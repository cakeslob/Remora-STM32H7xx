
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140b0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08014350  08014350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014b38  08014b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014b40  08014b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014b48  08014b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  08014b50  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e0c  240000e0  08014c14  000160e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000eec  08014c14  00016eec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000160c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00045a67  00000000  00000000  000160f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068f6  00000000  00000000  0005bb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca8  00000000  00000000  00062450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001604  00000000  00000000  000640f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c05b  00000000  00000000  000656fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f0c0  00000000  00000000  00071757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181974  00000000  00000000  000a0817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022218b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000993c  00000000  00000000  002221d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0022bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014338 	.word	0x08014338

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08014338 	.word	0x08014338

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b97e 	b.w	8000a2c <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f81a 	bl	8000770 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__popcountsi2>:
 8000748:	0843      	lsrs	r3, r0, #1
 800074a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800074e:	1ac0      	subs	r0, r0, r3
 8000750:	0883      	lsrs	r3, r0, #2
 8000752:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000756:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800075a:	4418      	add	r0, r3
 800075c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000760:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000764:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000768:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800076c:	0e00      	lsrs	r0, r0, #24
 800076e:	4770      	bx	lr

08000770 <__udivmoddi4>:
 8000770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000774:	9d08      	ldr	r5, [sp, #32]
 8000776:	460c      	mov	r4, r1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d14e      	bne.n	800081a <__udivmoddi4+0xaa>
 800077c:	4694      	mov	ip, r2
 800077e:	458c      	cmp	ip, r1
 8000780:	4686      	mov	lr, r0
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	d962      	bls.n	800084e <__udivmoddi4+0xde>
 8000788:	b14a      	cbz	r2, 800079e <__udivmoddi4+0x2e>
 800078a:	f1c2 0320 	rsb	r3, r2, #32
 800078e:	4091      	lsls	r1, r2
 8000790:	fa20 f303 	lsr.w	r3, r0, r3
 8000794:	fa0c fc02 	lsl.w	ip, ip, r2
 8000798:	4319      	orrs	r1, r3
 800079a:	fa00 fe02 	lsl.w	lr, r0, r2
 800079e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a2:	fa1f f68c 	uxth.w	r6, ip
 80007a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80007aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007ae:	fb07 1114 	mls	r1, r7, r4, r1
 80007b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b6:	fb04 f106 	mul.w	r1, r4, r6
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d90a      	bls.n	80007d4 <__udivmoddi4+0x64>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80007c6:	f080 8112 	bcs.w	80009ee <__udivmoddi4+0x27e>
 80007ca:	4299      	cmp	r1, r3
 80007cc:	f240 810f 	bls.w	80009ee <__udivmoddi4+0x27e>
 80007d0:	3c02      	subs	r4, #2
 80007d2:	4463      	add	r3, ip
 80007d4:	1a59      	subs	r1, r3, r1
 80007d6:	fa1f f38e 	uxth.w	r3, lr
 80007da:	fbb1 f0f7 	udiv	r0, r1, r7
 80007de:	fb07 1110 	mls	r1, r7, r0, r1
 80007e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e6:	fb00 f606 	mul.w	r6, r0, r6
 80007ea:	429e      	cmp	r6, r3
 80007ec:	d90a      	bls.n	8000804 <__udivmoddi4+0x94>
 80007ee:	eb1c 0303 	adds.w	r3, ip, r3
 80007f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f6:	f080 80fc 	bcs.w	80009f2 <__udivmoddi4+0x282>
 80007fa:	429e      	cmp	r6, r3
 80007fc:	f240 80f9 	bls.w	80009f2 <__udivmoddi4+0x282>
 8000800:	4463      	add	r3, ip
 8000802:	3802      	subs	r0, #2
 8000804:	1b9b      	subs	r3, r3, r6
 8000806:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800080a:	2100      	movs	r1, #0
 800080c:	b11d      	cbz	r5, 8000816 <__udivmoddi4+0xa6>
 800080e:	40d3      	lsrs	r3, r2
 8000810:	2200      	movs	r2, #0
 8000812:	e9c5 3200 	strd	r3, r2, [r5]
 8000816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081a:	428b      	cmp	r3, r1
 800081c:	d905      	bls.n	800082a <__udivmoddi4+0xba>
 800081e:	b10d      	cbz	r5, 8000824 <__udivmoddi4+0xb4>
 8000820:	e9c5 0100 	strd	r0, r1, [r5]
 8000824:	2100      	movs	r1, #0
 8000826:	4608      	mov	r0, r1
 8000828:	e7f5      	b.n	8000816 <__udivmoddi4+0xa6>
 800082a:	fab3 f183 	clz	r1, r3
 800082e:	2900      	cmp	r1, #0
 8000830:	d146      	bne.n	80008c0 <__udivmoddi4+0x150>
 8000832:	42a3      	cmp	r3, r4
 8000834:	d302      	bcc.n	800083c <__udivmoddi4+0xcc>
 8000836:	4290      	cmp	r0, r2
 8000838:	f0c0 80f0 	bcc.w	8000a1c <__udivmoddi4+0x2ac>
 800083c:	1a86      	subs	r6, r0, r2
 800083e:	eb64 0303 	sbc.w	r3, r4, r3
 8000842:	2001      	movs	r0, #1
 8000844:	2d00      	cmp	r5, #0
 8000846:	d0e6      	beq.n	8000816 <__udivmoddi4+0xa6>
 8000848:	e9c5 6300 	strd	r6, r3, [r5]
 800084c:	e7e3      	b.n	8000816 <__udivmoddi4+0xa6>
 800084e:	2a00      	cmp	r2, #0
 8000850:	f040 8090 	bne.w	8000974 <__udivmoddi4+0x204>
 8000854:	eba1 040c 	sub.w	r4, r1, ip
 8000858:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800085c:	fa1f f78c 	uxth.w	r7, ip
 8000860:	2101      	movs	r1, #1
 8000862:	fbb4 f6f8 	udiv	r6, r4, r8
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb08 4416 	mls	r4, r8, r6, r4
 800086e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000872:	fb07 f006 	mul.w	r0, r7, r6
 8000876:	4298      	cmp	r0, r3
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x11c>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x11a>
 8000884:	4298      	cmp	r0, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2b4>
 800088a:	4626      	mov	r6, r4
 800088c:	1a1c      	subs	r4, r3, r0
 800088e:	fa1f f38e 	uxth.w	r3, lr
 8000892:	fbb4 f0f8 	udiv	r0, r4, r8
 8000896:	fb08 4410 	mls	r4, r8, r0, r4
 800089a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800089e:	fb00 f707 	mul.w	r7, r0, r7
 80008a2:	429f      	cmp	r7, r3
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x148>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80008ae:	d202      	bcs.n	80008b6 <__udivmoddi4+0x146>
 80008b0:	429f      	cmp	r7, r3
 80008b2:	f200 80b0 	bhi.w	8000a16 <__udivmoddi4+0x2a6>
 80008b6:	4620      	mov	r0, r4
 80008b8:	1bdb      	subs	r3, r3, r7
 80008ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008be:	e7a5      	b.n	800080c <__udivmoddi4+0x9c>
 80008c0:	f1c1 0620 	rsb	r6, r1, #32
 80008c4:	408b      	lsls	r3, r1
 80008c6:	fa22 f706 	lsr.w	r7, r2, r6
 80008ca:	431f      	orrs	r7, r3
 80008cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80008d0:	fa04 f301 	lsl.w	r3, r4, r1
 80008d4:	ea43 030c 	orr.w	r3, r3, ip
 80008d8:	40f4      	lsrs	r4, r6
 80008da:	fa00 f801 	lsl.w	r8, r0, r1
 80008de:	0c38      	lsrs	r0, r7, #16
 80008e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008e4:	fbb4 fef0 	udiv	lr, r4, r0
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fb00 441e 	mls	r4, r0, lr, r4
 80008f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f4:	fb0e f90c 	mul.w	r9, lr, ip
 80008f8:	45a1      	cmp	r9, r4
 80008fa:	fa02 f201 	lsl.w	r2, r2, r1
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x1a6>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000906:	f080 8084 	bcs.w	8000a12 <__udivmoddi4+0x2a2>
 800090a:	45a1      	cmp	r9, r4
 800090c:	f240 8081 	bls.w	8000a12 <__udivmoddi4+0x2a2>
 8000910:	f1ae 0e02 	sub.w	lr, lr, #2
 8000914:	443c      	add	r4, r7
 8000916:	eba4 0409 	sub.w	r4, r4, r9
 800091a:	fa1f f983 	uxth.w	r9, r3
 800091e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000922:	fb00 4413 	mls	r4, r0, r3, r4
 8000926:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092a:	fb03 fc0c 	mul.w	ip, r3, ip
 800092e:	45a4      	cmp	ip, r4
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0x1d2>
 8000932:	193c      	adds	r4, r7, r4
 8000934:	f103 30ff 	add.w	r0, r3, #4294967295
 8000938:	d267      	bcs.n	8000a0a <__udivmoddi4+0x29a>
 800093a:	45a4      	cmp	ip, r4
 800093c:	d965      	bls.n	8000a0a <__udivmoddi4+0x29a>
 800093e:	3b02      	subs	r3, #2
 8000940:	443c      	add	r4, r7
 8000942:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000946:	fba0 9302 	umull	r9, r3, r0, r2
 800094a:	eba4 040c 	sub.w	r4, r4, ip
 800094e:	429c      	cmp	r4, r3
 8000950:	46ce      	mov	lr, r9
 8000952:	469c      	mov	ip, r3
 8000954:	d351      	bcc.n	80009fa <__udivmoddi4+0x28a>
 8000956:	d04e      	beq.n	80009f6 <__udivmoddi4+0x286>
 8000958:	b155      	cbz	r5, 8000970 <__udivmoddi4+0x200>
 800095a:	ebb8 030e 	subs.w	r3, r8, lr
 800095e:	eb64 040c 	sbc.w	r4, r4, ip
 8000962:	fa04 f606 	lsl.w	r6, r4, r6
 8000966:	40cb      	lsrs	r3, r1
 8000968:	431e      	orrs	r6, r3
 800096a:	40cc      	lsrs	r4, r1
 800096c:	e9c5 6400 	strd	r6, r4, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	e750      	b.n	8000816 <__udivmoddi4+0xa6>
 8000974:	f1c2 0320 	rsb	r3, r2, #32
 8000978:	fa20 f103 	lsr.w	r1, r0, r3
 800097c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000980:	fa24 f303 	lsr.w	r3, r4, r3
 8000984:	4094      	lsls	r4, r2
 8000986:	430c      	orrs	r4, r1
 8000988:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800098c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3110 	mls	r1, r8, r0, r3
 800099c:	0c23      	lsrs	r3, r4, #16
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f107 	mul.w	r1, r0, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x24c>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80009b2:	d22c      	bcs.n	8000a0e <__udivmoddi4+0x29e>
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d92a      	bls.n	8000a0e <__udivmoddi4+0x29e>
 80009b8:	3802      	subs	r0, #2
 80009ba:	4463      	add	r3, ip
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80009c4:	fb08 3311 	mls	r3, r8, r1, r3
 80009c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009cc:	fb01 f307 	mul.w	r3, r1, r7
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x276>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80009dc:	d213      	bcs.n	8000a06 <__udivmoddi4+0x296>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d911      	bls.n	8000a06 <__udivmoddi4+0x296>
 80009e2:	3902      	subs	r1, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	1ae4      	subs	r4, r4, r3
 80009e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009ec:	e739      	b.n	8000862 <__udivmoddi4+0xf2>
 80009ee:	4604      	mov	r4, r0
 80009f0:	e6f0      	b.n	80007d4 <__udivmoddi4+0x64>
 80009f2:	4608      	mov	r0, r1
 80009f4:	e706      	b.n	8000804 <__udivmoddi4+0x94>
 80009f6:	45c8      	cmp	r8, r9
 80009f8:	d2ae      	bcs.n	8000958 <__udivmoddi4+0x1e8>
 80009fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80009fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a02:	3801      	subs	r0, #1
 8000a04:	e7a8      	b.n	8000958 <__udivmoddi4+0x1e8>
 8000a06:	4631      	mov	r1, r6
 8000a08:	e7ed      	b.n	80009e6 <__udivmoddi4+0x276>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e799      	b.n	8000942 <__udivmoddi4+0x1d2>
 8000a0e:	4630      	mov	r0, r6
 8000a10:	e7d4      	b.n	80009bc <__udivmoddi4+0x24c>
 8000a12:	46d6      	mov	lr, sl
 8000a14:	e77f      	b.n	8000916 <__udivmoddi4+0x1a6>
 8000a16:	4463      	add	r3, ip
 8000a18:	3802      	subs	r0, #2
 8000a1a:	e74d      	b.n	80008b8 <__udivmoddi4+0x148>
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	4623      	mov	r3, r4
 8000a20:	4608      	mov	r0, r1
 8000a22:	e70f      	b.n	8000844 <__udivmoddi4+0xd4>
 8000a24:	3e02      	subs	r6, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x11c>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_idiv0>:
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <_ZN9InterruptC1Ev+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	08014998 	.word	0x08014998

08000a50 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a5e:	f012 fda5 	bl	80135ac <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08014350 	.word	0x08014350
 8000a78:	240000fc 	.word	0x240000fc

08000a7c <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a02      	ldr	r2, [pc, #8]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4798      	blx	r3
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240000fc 	.word	0x240000fc

08000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a02      	ldr	r2, [pc, #8]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000aa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	4798      	blx	r3
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240000fc 	.word	0x240000fc

08000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a02      	ldr	r2, [pc, #8]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000ac2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	240000fc 	.word	0x240000fc

08000ad0 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a02      	ldr	r2, [pc, #8]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ade:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000fc 	.word	0x240000fc

08000aec <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a02      	ldr	r2, [pc, #8]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000afa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000afc:	4610      	mov	r0, r2
 8000afe:	4798      	blx	r3
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240000fc 	.word	0x240000fc

08000b08 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a02      	ldr	r2, [pc, #8]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b16:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4798      	blx	r3
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240000fc 	.word	0x240000fc

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    return _head;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000b98:	687b      	ldr	r3, [r7, #4]
  }
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	e000      	b.n	8000bc8 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000bc6:	2300      	movs	r3, #0
  }
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	111b      	asrs	r3, r3, #4
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	815a      	strh	r2, [r3, #10]
  }
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000c10:	463b      	mov	r3, r7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fd96 	bl	8002744 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  }
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    return _key;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
  }
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  }
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3303      	adds	r3, #3
 8000c74:	f023 0303 	bic.w	r3, r3, #3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	e000      	b.n	8000cac <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000caa:	2300      	movs	r3, #0
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	e000      	b.n	8000cc0 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
    return _begin;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
  }
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fd32 	bl	800275c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000cf8:	4603      	mov	r3, r0
  }
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f000 f864 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000d32:	bf00      	nop
  }
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	441a      	add	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f84a 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  }
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	441a      	add	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
  }
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffe1 	bl	8000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e008      	b.n	8000df2 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	425b      	negs	r3, r3
 8000de8:	441a      	add	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
    return _right;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
  }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	e009      	b.n	8000e6c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fa40 	bl	80002e0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
  }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffc3 	bl	8000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f81b 	bl	8000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e000      	b.n	8000eac <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 8000eaa:	2300      	movs	r3, #0
  }
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f81d 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	e000      	b.n	8000ece <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8000ecc:	2300      	movs	r3, #0
  }
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
  }
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
  }
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000f22:	b5b0      	push	{r4, r5, r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000f2e:	2105      	movs	r1, #5
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f895 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f880 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000f7e:	2106      	movs	r1, #6
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f86d 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f85a 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f849 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f83c 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fbaa 	bl	8002744 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
  }
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8001006:	2140      	movs	r1, #64	@ 0x40
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f829 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f957 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001016:	687b      	ldr	r3, [r7, #4]
  }
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f818 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f946 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001038:	687b      	ldr	r3, [r7, #4]
  }
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001052:	b2db      	uxtb	r3, r3
  }
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a1b      	ldrb	r3, [r3, #8]
 8001070:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1a      	ldrb	r2, [r3, #8]
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	4313      	orrs	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	721a      	strb	r2, [r3, #8]
  }
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fefb 	bl	8000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 80010be:	4603      	mov	r3, r0
 80010c0:	e000      	b.n	80010c4 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 800110e:	b590      	push	{r4, r7, lr}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fd35 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8001126:	4603      	mov	r3, r0
 8001128:	60fc      	str	r4, [r7, #12]
 800112a:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fb2f 	bl	8002794 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	bf00      	nop
  }
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
  }
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fd13 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
    return *this;
 8001186:	687b      	ldr	r3, [r7, #4]
  }
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fde7 	bl	8000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3310      	adds	r3, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff0a 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
    return _pool;
 80011ba:	687b      	ldr	r3, [r7, #4]
  }
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    return _data;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3310      	adds	r3, #16
  }
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 80011e0:	b084      	sub	sp, #16
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	f107 001c 	add.w	r0, r7, #28
 80011ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461c      	mov	r4, r3
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3310      	adds	r3, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff feda 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr

0800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f011 ffeb 	bl	8013200 <malloc>
 800122a:	4603      	mov	r3, r0
  }
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    free(p);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f011 ffe6 	bl	8013210 <free>
  }
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff fd47 	bl	8000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 800125c:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001264:	2300      	movs	r3, #0
 8001266:	e017      	b.n	8001298 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcac 	bl	8000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	e005      	b.n	8001290 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fcd4 	bl	8000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffcd 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff feed 	bl	8001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  _head = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  _tail = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80012f2:	d904      	bls.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b39      	cmp	r3, #57	@ 0x39
 80012f8:	d801      	bhi.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe94 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 800131a:	4603      	mov	r3, r0
 800131c:	3b03      	subs	r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d802      	bhi.n	8001328 <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e000      	b.n	800132a <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 8001328:	2300      	movs	r3, #0
  }
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8001332:	b590      	push	{r4, r7, lr}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fc      	ldr	r4, [r7, #12]
 800134e:	463b      	mov	r3, r7
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fcd5 	bl	8000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8001358:	f104 0308 	add.w	r3, r4, #8
 800135c:	463a      	mov	r2, r7
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001370:	b490      	push	{r4, r7}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>

    if (_size >= _slot.size) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d303      	bcc.n	8001398 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
      return;
 8001396:	e00c      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    }

    _slot.value[_size++] = c;
 8001398:	78fc      	ldrb	r4, [r7, #3]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	1c58      	adds	r0, r3, #1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6048      	str	r0, [r1, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4622      	mov	r2, r4
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e000      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    if (!_slot.value) return;
 80013b0:	bf00      	nop
  }
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr

080013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    append('\0');
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffd3 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0108 	add.w	r1, r3, #8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f7ff fcab 	bl	8000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
  }
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff86 	bl	8001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	e000      	b.n	8001446 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	08014384 	.word	0x08014384

0800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c59      	adds	r1, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
  }
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001484:	2300      	movs	r3, #0
  }
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e005      	b.n	80014f4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  }
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	08001493 	.word	0x08001493

08001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    return _code;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
  }
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d81b      	bhi.n	8001564 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001559 	.word	0x08001559
 8001540:	08001555 	.word	0x08001555
 8001544:	08001561 	.word	0x08001561
 8001548:	08001551 	.word	0x08001551
      case Ok:
        return "Ok";
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800154e:	e00a      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001552:	e008      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001556:	e006      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800155a:	e004      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800155e:	e002      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001562:	e000      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08014388 	.word	0x08014388
 8001578:	0801438c 	.word	0x0801438c
 800157c:	08014394 	.word	0x08014394
 8001580:	080143a0 	.word	0x080143a0
 8001584:	080143b0 	.word	0x080143b0
 8001588:	080143c0 	.word	0x080143c0
 800158c:	080143d0 	.word	0x080143d0

08001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2232      	movs	r2, #50	@ 0x32
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 f818 	bl	80015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80015bc:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	e00c      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	e003      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3302      	adds	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80015e2:	e7ec      	b.n	80015be <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e000      	b.n	8001602 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 8001600:	2300      	movs	r3, #0
 8001602:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001604:	4413      	add	r3, r2
  }
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	080143d4 	.word	0x080143d4

08001618 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	2210      	movs	r2, #16
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001640:	f7ff fa1c 	bl	8000a7c <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800164c:	f7ff fa24 	bl	8000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8001658:	f7ff fa2c 	bl	8000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8001664:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800167c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800168c:	f7ff fa20 	bl	8000ad0 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 80016ba:	f7ff fa17 	bl	8000aec <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400

080016c8 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 80016ee:	f7ff fa0b 	bl	8000b08 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000800 	.word	0x40000800

080016fc <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80016fc:	b598      	push	{r3, r4, r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM2, TIM2_IRQn, base_freq);
 8001700:	2030      	movs	r0, #48	@ 0x30
 8001702:	f011 fbbc 	bl	8012e7e <_Znwj>
 8001706:	4603      	mov	r3, r0
 8001708:	461c      	mov	r4, r3
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <_Z13createThreadsv+0x78>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	221c      	movs	r2, #28
 8001710:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001714:	4620      	mov	r0, r4
 8001716:	f003 ff49 	bl	80055ac <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <_Z13createThreadsv+0x7c>)
 800171c:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 800171e:	2102      	movs	r1, #2
 8001720:	201c      	movs	r0, #28
 8001722:	f7ff f9ff 	bl	8000b24 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM3, TIM3_IRQn , servo_freq);
 8001726:	2030      	movs	r0, #48	@ 0x30
 8001728:	f011 fba9 	bl	8012e7e <_Znwj>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <_Z13createThreadsv+0x80>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221d      	movs	r2, #29
 8001736:	4912      	ldr	r1, [pc, #72]	@ (8001780 <_Z13createThreadsv+0x84>)
 8001738:	4620      	mov	r0, r4
 800173a:	f003 ff37 	bl	80055ac <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_Z13createThreadsv+0x88>)
 8001740:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 8001742:	2103      	movs	r1, #3
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff f9ed 	bl	8000b24 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 800174a:	2030      	movs	r0, #48	@ 0x30
 800174c:	f011 fb97 	bl	8012e7e <_Znwj>
 8001750:	4603      	mov	r3, r0
 8001752:	461c      	mov	r4, r3
 8001754:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001758:	221e      	movs	r2, #30
 800175a:	490b      	ldr	r1, [pc, #44]	@ (8001788 <_Z13createThreadsv+0x8c>)
 800175c:	4620      	mov	r0, r4
 800175e:	f003 ff25 	bl	80055ac <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <_Z13createThreadsv+0x90>)
 8001764:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 8001766:	2104      	movs	r1, #4
 8001768:	201e      	movs	r0, #30
 800176a:	f7ff f9db 	bl	8000b24 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	bd98      	pop	{r3, r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	24000000 	.word	0x24000000
 8001778:	24000358 	.word	0x24000358
 800177c:	24000004 	.word	0x24000004
 8001780:	40000400 	.word	0x40000400
 8001784:	24000354 	.word	0x24000354
 8001788:	40000800 	.word	0x40000800
 800178c:	2400035c 	.word	0x2400035c

08001790 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800179e:	2201      	movs	r2, #1
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <__io_putchar+0x20>)
 80017a2:	f00c ff92 	bl	800e6ca <HAL_UART_Transmit>
	  return ch;
 80017a6:	687b      	ldr	r3, [r7, #4]
	}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	240005f8 	.word	0x240005f8

080017b4 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b08d      	sub	sp, #52	@ 0x34
 80017ba:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80017bc:	4854      	ldr	r0, [pc, #336]	@ (8001910 <_Z14readJsonConfigv+0x15c>)
 80017be:	f011 ff65 	bl	801368c <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80017c2:	4854      	ldr	r0, [pc, #336]	@ (8001914 <_Z14readJsonConfigv+0x160>)
 80017c4:	f011 ff62 	bl	801368c <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80017c8:	2200      	movs	r2, #0
 80017ca:	4953      	ldr	r1, [pc, #332]	@ (8001918 <_Z14readJsonConfigv+0x164>)
 80017cc:	4853      	ldr	r0, [pc, #332]	@ (800191c <_Z14readJsonConfigv+0x168>)
 80017ce:	f010 feff 	bl	80125d0 <f_mount>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80017e2:	484f      	ldr	r0, [pc, #316]	@ (8001920 <_Z14readJsonConfigv+0x16c>)
 80017e4:	f011 fee2 	bl	80135ac <iprintf>
    	Error_Handler();
 80017e8:	f000 ffa0 	bl	800272c <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80017ec:	e08a      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80017ee:	2201      	movs	r2, #1
 80017f0:	494c      	ldr	r1, [pc, #304]	@ (8001924 <_Z14readJsonConfigv+0x170>)
 80017f2:	484d      	ldr	r0, [pc, #308]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80017f4:	f010 ff32 	bl	801265c <f_open>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001808:	4848      	ldr	r0, [pc, #288]	@ (800192c <_Z14readJsonConfigv+0x178>)
 800180a:	f011 ff3f 	bl	801368c <puts>
			Error_Handler();
 800180e:	f000 ff8d 	bl	800272c <Error_Handler>
}
 8001812:	e077      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		}
 8001814:	466b      	mov	r3, sp
 8001816:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 800181e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001820:	4843      	ldr	r0, [pc, #268]	@ (8001930 <_Z14readJsonConfigv+0x17c>)
 8001822:	f011 fec3 	bl	80135ac <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8001826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001828:	1e4b      	subs	r3, r1, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	460a      	mov	r2, r1
 800182e:	2300      	movs	r3, #0
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001848:	460a      	mov	r2, r1
 800184a:	2300      	movs	r3, #0
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	460b      	mov	r3, r1
 8001862:	3318      	adds	r3, #24
 8001864:	3307      	adds	r3, #7
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	ebad 0d03 	sub.w	sp, sp, r3
 800186e:	466b      	mov	r3, sp
 8001870:	331f      	adds	r3, #31
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	482a      	ldr	r0, [pc, #168]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 8001880:	f011 f8a6 	bl	80129d0 <f_read>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001894:	4827      	ldr	r0, [pc, #156]	@ (8001934 <_Z14readJsonConfigv+0x180>)
 8001896:	f011 fef9 	bl	801368c <puts>
 800189a:	e02f      	b.n	80018fc <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 800189c:	4826      	ldr	r0, [pc, #152]	@ (8001938 <_Z14readJsonConfigv+0x184>)
 800189e:	f011 fef5 	bl	801368c <puts>
				strJson.reserve(length + 1);
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	3301      	adds	r3, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	4824      	ldr	r0, [pc, #144]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018aa:	f011 fc06 	bl	80130ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b2:	e017      	b.n	80018e4 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	491e      	ldr	r1, [pc, #120]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 ffcc 	bl	8002860 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018d0:	f011 fb84 	bl	8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f011 fb79 	bl	8012fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbe3      	blt.n	80018b4 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 80018ec:	4813      	ldr	r0, [pc, #76]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018ee:	f011 fc47 	bl	8013180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <_Z14readJsonConfigv+0x18c>)
 80018f8:	f011 fe58 	bl	80135ac <iprintf>
			f_close(&SDFile);
 80018fc:	480a      	ldr	r0, [pc, #40]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80018fe:	f011 fa24 	bl	8012d4a <f_close>
 8001902:	46b5      	mov	sp, r6
}
 8001904:	bf00      	nop
 8001906:	3734      	adds	r7, #52	@ 0x34
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	bf00      	nop
 8001910:	080143e4 	.word	0x080143e4
 8001914:	08014408 	.word	0x08014408
 8001918:	240006e8 	.word	0x240006e8
 800191c:	240006ec 	.word	0x240006ec
 8001920:	08014428 	.word	0x08014428
 8001924:	08014444 	.word	0x08014444
 8001928:	2400091c 	.word	0x2400091c
 800192c:	08014450 	.word	0x08014450
 8001930:	08014474 	.word	0x08014474
 8001934:	08014498 	.word	0x08014498
 8001938:	080144b8 	.word	0x080144b8
 800193c:	24000524 	.word	0x24000524
 8001940:	080144d8 	.word	0x080144d8

08001944 <_Z5setupv>:

void setup()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <_Z5setupv+0x24>)
 800194a:	f011 fe9f 	bl	801368c <puts>

     // initialise the Remora comms
    comms->init();
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_Z5setupv+0x28>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f99e 	bl	8004c94 <_ZN11RemoraComms4initEv>
    comms->start();
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <_Z5setupv+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fb47 	bl	8004ff0 <_ZN11RemoraComms5startEv>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	080144e0 	.word	0x080144e0
 800196c:	24000578 	.word	0x24000578

08001970 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001976:	4826      	ldr	r0, [pc, #152]	@ (8001a10 <_Z15deserialiseJSONv+0xa0>)
 8001978:	f011 fe88 	bl	801368c <puts>

    const char *json = strJson.c_str();
 800197c:	4825      	ldr	r0, [pc, #148]	@ (8001a14 <_Z15deserialiseJSONv+0xa4>)
 800197e:	f011 fbff 	bl	8013180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001982:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe01 	bl	8001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800198e:	7a3a      	ldrb	r2, [r7, #8]
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	4821      	ldr	r0, [pc, #132]	@ (8001a18 <_Z15deserialiseJSONv+0xa8>)
 8001994:	f000 ff7a 	bl	800288c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001998:	4603      	mov	r3, r0
 800199a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800199c:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <_Z15deserialiseJSONv+0xac>)
 800199e:	f011 fe05 	bl	80135ac <iprintf>

    switch (error.code())
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fdad 	bl	8001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d011      	beq.n	80019d4 <_Z15deserialiseJSONv+0x64>
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	dc16      	bgt.n	80019e2 <_Z15deserialiseJSONv+0x72>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_Z15deserialiseJSONv+0x4e>
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d004      	beq.n	80019c6 <_Z15deserialiseJSONv+0x56>
 80019bc:	e011      	b.n	80019e2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <_Z15deserialiseJSONv+0xb0>)
 80019c0:	f011 fe64 	bl	801368c <puts>
            break;
 80019c4:	e01f      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80019c6:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <_Z15deserialiseJSONv+0xb4>)
 80019c8:	f011 fe60 	bl	801368c <puts>
            configError = true;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
            break;
 80019d2:	e018      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <_Z15deserialiseJSONv+0xbc>)
 80019d6:	f011 fe59 	bl	801368c <puts>
            configError = true;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
            break;
 80019e0:	e011      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <_Z15deserialiseJSONv+0xc0>)
 80019e4:	f011 fde2 	bl	80135ac <iprintf>
            printf(error.c_str());
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd96 	bl	800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f011 fdda 	bl	80135ac <iprintf>
            printf("\n");
 80019f8:	200a      	movs	r0, #10
 80019fa:	f011 fde9 	bl	80135d0 <putchar>
            configError = true;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
            break;
 8001a04:	bf00      	nop
    }
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08014504 	.word	0x08014504
 8001a14:	24000524 	.word	0x24000524
 8001a18:	24000548 	.word	0x24000548
 8001a1c:	08014528 	.word	0x08014528
 8001a20:	08014544 	.word	0x08014544
 8001a24:	08014560 	.word	0x08014560
 8001a28:	24000352 	.word	0x24000352
 8001a2c:	08014570 	.word	0x08014570
 8001a30:	08014584 	.word	0x08014584

08001a34 <_Z13configThreadsv>:

void configThreads()
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b0bc      	sub	sp, #240	@ 0xf0
 8001a38:	af00      	add	r7, sp, #0
    if (configError) return;
 8001a3a:	4bcb      	ldr	r3, [pc, #812]	@ (8001d68 <_Z13configThreadsv+0x334>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 818d 	bne.w	8001d5e <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 8001a44:	48c9      	ldr	r0, [pc, #804]	@ (8001d6c <_Z13configThreadsv+0x338>)
 8001a46:	f011 fe21 	bl	801368c <puts>
 8001a4a:	4bc9      	ldr	r3, [pc, #804]	@ (8001d70 <_Z13configThreadsv+0x33c>)
 8001a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a50:	4bc8      	ldr	r3, [pc, #800]	@ (8001d74 <_Z13configThreadsv+0x340>)
 8001a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8001a6a:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 ffa4 	bl	80029be <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001a98:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001aa0:	f103 0510 	add.w	r5, r3, #16
 8001aa4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001aa8:	f7ff f9e4 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f001 fdec 	bl	800368e <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ac0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ac4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fe63 	bl	8002794 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001ad8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <_Z13configThreadsv+0xb8>
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9d5 	bl	8000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e000      	b.n	8001aee <_Z13configThreadsv+0xba>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe57 	bl	80027b2 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <_Z13configThreadsv+0xee>
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fad6 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001b20:	e00b      	b.n	8001b3a <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001b22:	69fc      	ldr	r4, [r7, #28]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f826 	bl	8000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4621      	mov	r1, r4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fad7 	bl	80010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001b3a:	e0fe      	b.n	8001d3a <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001b3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b40:	f107 0210 	add.w	r2, r7, #16
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fae1 	bl	800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 ff3f 	bl	80029d4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b5c:	685c      	ldr	r4, [r3, #4]
 8001b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff faa1 	bl	80010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	667c      	str	r4, [r7, #100]	@ 0x64
 8001b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe2b 	bl	80027d0 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b84:	461a      	mov	r2, r3
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <_Z13configThreadsv+0x348>)
 8001b94:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001b96:	4878      	ldr	r0, [pc, #480]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b98:	f000 ff27 	bl	80029ea <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001bac:	bf00      	nop
 8001bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 ff24 	bl	8002a00 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001bda:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001bde:	f7ff f949 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bec:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf2:	685c      	ldr	r4, [r3, #4]
 8001bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f8e5 	bl	8003dcc <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001c02:	4603      	mov	r3, r0
 8001c04:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001c06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c0c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fdc0 	bl	8002794 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001c14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c18:	bf00      	nop
    return get_impl(adaptString(key));
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fbc3 	bl	80033ac <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001c26:	4603      	mov	r3, r0
 8001c28:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop

        const char* configor = thread["Thread"];
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c32:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <_Z13configThreadsv+0x34c>)
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c38:	484f      	ldr	r0, [pc, #316]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001c3a:	f000 fed6 	bl	80029ea <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c58:	bf00      	nop
 8001c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fece 	bl	8002a00 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c86:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001c8a:	f7ff f8f3 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c98:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c9e:	685c      	ldr	r4, [r3, #4]
 8001ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f88f 	bl	8003dcc <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fd67 	bl	8002794 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ccc:	bf00      	nop
    return get_impl(adaptString(key));
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
    return variantAs<T>(_data);
 8001cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fb7a 	bl	80033ce <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001ce6:	4927      	ldr	r1, [pc, #156]	@ (8001d84 <_Z13configThreadsv+0x350>)
 8001ce8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001cec:	f7fe faf8 	bl	80002e0 <strcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001cfc:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <_Z13configThreadsv+0x358>)
 8001d06:	f011 fc51 	bl	80135ac <iprintf>
 8001d0a:	e011      	b.n	8001d30 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001d0c:	4920      	ldr	r1, [pc, #128]	@ (8001d90 <_Z13configThreadsv+0x35c>)
 8001d0e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d12:	f7fe fae5 	bl	80002e0 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001d22:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481b      	ldr	r0, [pc, #108]	@ (8001d98 <_Z13configThreadsv+0x364>)
 8001d2c:	f011 fc3e 	bl	80135ac <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fa1a 	bl	800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001d3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f9c4 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001d44:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f9f9 	bl	8001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f aef0 	bne.w	8001b3c <_Z13configThreadsv+0x108>
 8001d5c:	e000      	b.n	8001d60 <_Z13configThreadsv+0x32c>
    if (configError) return;
 8001d5e:	bf00      	nop
        }
    }
}
 8001d60:	37f0      	adds	r7, #240	@ 0xf0
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000352 	.word	0x24000352
 8001d6c:	080145a0 	.word	0x080145a0
 8001d70:	080145b8 	.word	0x080145b8
 8001d74:	24000548 	.word	0x24000548
 8001d78:	24000568 	.word	0x24000568
 8001d7c:	080145c0 	.word	0x080145c0
 8001d80:	080145c8 	.word	0x080145c8
 8001d84:	080145d4 	.word	0x080145d4
 8001d88:	24000000 	.word	0x24000000
 8001d8c:	080145dc 	.word	0x080145dc
 8001d90:	08014604 	.word	0x08014604
 8001d94:	24000004 	.word	0x24000004
 8001d98:	0801460c 	.word	0x0801460c

08001d9c <main>:


int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	@ 0x40
 8001da0:	af02      	add	r7, sp, #8
	MPU_Config();
 8001da2:	f000 fc97 	bl	80026d4 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8001da6:	4bbb      	ldr	r3, [pc, #748]	@ (8002094 <main+0x2f8>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dac:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8001dae:	f003 fea3 	bl	8005af8 <HAL_Init>
	SystemClock_Config();
 8001db2:	f000 faa5 	bl	8002300 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8001db6:	f000 fb6d 	bl	8002494 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dba:	f3bf 8f4f 	dsb	sy
}
 8001dbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
}
 8001dc4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001dc6:	4bb3      	ldr	r3, [pc, #716]	@ (8002094 <main+0x2f8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001dda:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ddc:	4bad      	ldr	r3, [pc, #692]	@ (8002094 <main+0x2f8>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11b      	bne.n	8001e2a <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001df2:	f3bf 8f4f 	dsb	sy
}
 8001df6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001df8:	f3bf 8f6f 	isb	sy
}
 8001dfc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8002094 <main+0x2f8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e06:	f3bf 8f4f 	dsb	sy
}
 8001e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e0c:	f3bf 8f6f 	isb	sy
}
 8001e10:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e12:	4ba0      	ldr	r3, [pc, #640]	@ (8002094 <main+0x2f8>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a9f      	ldr	r2, [pc, #636]	@ (8002094 <main+0x2f8>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1e:	f3bf 8f4f 	dsb	sy
}
 8001e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e24:	f3bf 8f6f 	isb	sy
}
 8001e28:	e000      	b.n	8001e2c <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e2a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e2c:	4b99      	ldr	r3, [pc, #612]	@ (8002094 <main+0x2f8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e34:	f3bf 8f4f 	dsb	sy
}
 8001e38:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e3a:	4b96      	ldr	r3, [pc, #600]	@ (8002094 <main+0x2f8>)
 8001e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e40:	623b      	str	r3, [r7, #32]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	0b5b      	lsrs	r3, r3, #13
 8001e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e4a:	61fb      	str	r3, [r7, #28]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	61bb      	str	r3, [r7, #24]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001e5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e64:	498b      	ldr	r1, [pc, #556]	@ (8002094 <main+0x2f8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	61ba      	str	r2, [r7, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ea      	bne.n	8001e56 <main+0xba>
    } while(sets-- != 0U);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1db      	bne.n	8001e4c <main+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e94:	f3bf 8f4f 	dsb	sy
}
 8001e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e9a:	f3bf 8f6f 	isb	sy
}
 8001e9e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001ea0:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <main+0x2f8>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d142      	bne.n	8001f3e <main+0x1a2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001eb8:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <main+0x2f8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001ec6:	4b73      	ldr	r3, [pc, #460]	@ (8002094 <main+0x2f8>)
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	0b5b      	lsrs	r3, r3, #13
 8001ed2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001eea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ef0:	4968      	ldr	r1, [pc, #416]	@ (8002094 <main+0x2f8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <main+0x146>
    } while(sets-- != 0U);
 8001f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1db      	bne.n	8001ed8 <main+0x13c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f20:	f3bf 8f4f 	dsb	sy
}
 8001f24:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f26:	4b5b      	ldr	r3, [pc, #364]	@ (8002094 <main+0x2f8>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8002094 <main+0x2f8>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f38:	f3bf 8f6f 	isb	sy
}
 8001f3c:	e000      	b.n	8001f40 <main+0x1a4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f3e:	bf00      	nop
	SCB_EnableICache();
	SCB_InvalidateDCache();
	SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f40:	4b55      	ldr	r3, [pc, #340]	@ (8002098 <main+0x2fc>)
 8001f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f46:	4a54      	ldr	r2, [pc, #336]	@ (8002098 <main+0x2fc>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f50:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <main+0x2fc>)
 8001f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

	MX_GPIO_Init(); // used for SD card detect
 8001f5e:	f000 fb5d 	bl	800261c <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001f62:	f000 fafb 	bl	800255c <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in sd_diskio.c
 8001f66:	f000 facd 	bl	8002504 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8001f6a:	f00e fa93 	bl	8010494 <MX_FATFS_Init>
	//txPingPongBuffer.txBuffers[1].header = PRU_DATA;

	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	prevState = ST_RESET;
 8001f74:	2305      	movs	r3, #5
 8001f76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    comms->setStatus(false);
 8001f7a:	4b48      	ldr	r3, [pc, #288]	@ (800209c <main+0x300>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fa9d 	bl	80054c0 <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 8001f86:	4b45      	ldr	r3, [pc, #276]	@ (800209c <main+0x300>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 fab4 	bl	80054fa <_ZN11RemoraComms8setErrorEb>
    resetCnt = 0;
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <main+0x304>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001f98:	4b42      	ldr	r3, [pc, #264]	@ (80020a4 <main+0x308>)
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4841      	ldr	r0, [pc, #260]	@ (80020a8 <main+0x30c>)
 8001fa4:	f011 fb02 	bl	80135ac <iprintf>

	while (1)
	{
		switch(currentState){
 8001fa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d8fb      	bhi.n	8001fa8 <main+0x20c>
 8001fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <main+0x21c>)
 8001fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb6:	bf00      	nop
 8001fb8:	08001fd5 	.word	0x08001fd5
 8001fbc:	0800200b 	.word	0x0800200b
 8001fc0:	08002061 	.word	0x08002061
 8001fc4:	080020cd 	.word	0x080020cd
 8001fc8:	08002165 	.word	0x08002165
 8001fcc:	08002187 	.word	0x08002187
 8001fd0:	08002233 	.word	0x08002233
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8001fd4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d002      	beq.n	8001fe6 <main+0x24a>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8001fe0:	4832      	ldr	r0, [pc, #200]	@ (80020ac <main+0x310>)
 8001fe2:	f011 fb53 	bl	801368c <puts>
			              }
			              prevState = currentState;
 8001fe6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              readJsonConfig();
 8001fee:	f7ff fbe1 	bl	80017b4 <_Z14readJsonConfigv>
			              setup();
 8001ff2:	f7ff fca7 	bl	8001944 <_Z5setupv>
			              deserialiseJSON();
 8001ff6:	f7ff fcbb 	bl	8001970 <_Z15deserialiseJSONv>
			              configThreads();
 8001ffa:	f7ff fd1b 	bl	8001a34 <_Z13configThreadsv>
			              createThreads();
 8001ffe:	f7ff fb7d 	bl	80016fc <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002008:	e11a      	b.n	8002240 <main+0x4a4>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 800200a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800200e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002012:	429a      	cmp	r2, r3
 8002014:	d002      	beq.n	800201c <main+0x280>
			              {
			                  printf("\n## Entering START state\n");
 8002016:	4826      	ldr	r0, [pc, #152]	@ (80020b0 <main+0x314>)
 8002018:	f011 fb38 	bl	801368c <puts>
			              }
			              prevState = currentState;
 800201c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002020:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              if (!threadsRunning)
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <main+0x318>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <main+0x2bc>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 8002032:	4821      	ldr	r0, [pc, #132]	@ (80020b8 <main+0x31c>)
 8002034:	f011 fb2a 	bl	801368c <puts>
			                  baseThread->startThread();
 8002038:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <main+0x320>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fae3 	bl	8005608 <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 8002042:	481f      	ldr	r0, [pc, #124]	@ (80020c0 <main+0x324>)
 8002044:	f011 fb22 	bl	801368c <puts>
			                  servoThread->startThread();
 8002048:	4b1e      	ldr	r3, [pc, #120]	@ (80020c4 <main+0x328>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fadb 	bl	8005608 <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <main+0x318>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 8002058:	2302      	movs	r3, #2
 800205a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			              break;
 800205e:	e0ef      	b.n	8002240 <main+0x4a4>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 8002060:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002064:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002068:	429a      	cmp	r2, r3
 800206a:	d002      	beq.n	8002072 <main+0x2d6>
			              {
			                  printf("\n## Entering IDLE state\n");
 800206c:	4816      	ldr	r0, [pc, #88]	@ (80020c8 <main+0x32c>)
 800206e:	f011 fb0d 	bl	801368c <puts>
			              }
			              prevState = currentState;
 8002072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002076:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              //wait for data before changing to running state
			              if (comms->getStatus())
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <main+0x300>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fa11 	bl	80054a6 <_ZN11RemoraComms9getStatusEv>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80d6 	beq.w	8002238 <main+0x49c>
			              {
			                  currentState = ST_RUNNING;
 800208c:	2303      	movs	r3, #3
 800208e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              break;
 8002092:	e0d1      	b.n	8002238 <main+0x49c>
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	58024400 	.word	0x58024400
 800209c:	24000578 	.word	0x24000578
 80020a0:	24000350 	.word	0x24000350
 80020a4:	08014660 	.word	0x08014660
 80020a8:	08014634 	.word	0x08014634
 80020ac:	0801466c 	.word	0x0801466c
 80020b0:	08014688 	.word	0x08014688
 80020b4:	24000353 	.word	0x24000353
 80020b8:	080146a4 	.word	0x080146a4
 80020bc:	24000358 	.word	0x24000358
 80020c0:	080146c0 	.word	0x080146c0
 80020c4:	24000354 	.word	0x24000354
 80020c8:	080146dc 	.word	0x080146dc

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 80020cc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80020d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d002      	beq.n	80020de <main+0x342>
			              {
			                  printf("\n## Entering RUNNING state\n");
 80020d8:	485a      	ldr	r0, [pc, #360]	@ (8002244 <main+0x4a8>)
 80020da:	f011 fad7 	bl	801368c <puts>
			              }
			              prevState = currentState;
 80020de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 80020e6:	4b58      	ldr	r3, [pc, #352]	@ (8002248 <main+0x4ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f9f8 	bl	80054e0 <_ZN11RemoraComms8getErrorEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <main+0x36c>
			              {
			                  printf("Communication data error\n");
 80020f6:	4855      	ldr	r0, [pc, #340]	@ (800224c <main+0x4b0>)
 80020f8:	f011 fac8 	bl	801368c <puts>
			                  comms->setError(false);
 80020fc:	4b52      	ldr	r3, [pc, #328]	@ (8002248 <main+0x4ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f9f9 	bl	80054fa <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 8002108:	4b4f      	ldr	r3, [pc, #316]	@ (8002248 <main+0x4ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 f9ca 	bl	80054a6 <_ZN11RemoraComms9getStatusEv>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <main+0x390>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 8002118:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <main+0x4b4>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 800211e:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <main+0x4ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f003 f9cb 	bl	80054c0 <_ZN11RemoraComms9setStatusEb>
 800212a:	e005      	b.n	8002138 <main+0x39c>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <main+0x4b4>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b46      	ldr	r3, [pc, #280]	@ (8002250 <main+0x4b4>)
 8002136:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 8002138:	4b45      	ldr	r3, [pc, #276]	@ (8002250 <main+0x4b4>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d908      	bls.n	8002152 <main+0x3b6>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8002140:	4844      	ldr	r0, [pc, #272]	@ (8002254 <main+0x4b8>)
 8002142:	f011 faa3 	bl	801368c <puts>
			                  resetCnt = 0;
 8002146:	4b42      	ldr	r3, [pc, #264]	@ (8002250 <main+0x4b4>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 800214c:	2305      	movs	r3, #5
 800214e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              if (PRUreset)
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <main+0x4bc>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d06f      	beq.n	800223c <main+0x4a0>
			              {
			                  currentState = ST_WDRESET;
 800215c:	2306      	movs	r3, #6
 800215e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              break;
 8002162:	e06b      	b.n	800223c <main+0x4a0>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8002164:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002168:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800216c:	429a      	cmp	r2, r3
 800216e:	d002      	beq.n	8002176 <main+0x3da>
			              {
			                  printf("\n## Entering STOP state\n");
 8002170:	483a      	ldr	r0, [pc, #232]	@ (800225c <main+0x4c0>)
 8002172:	f011 fa8b 	bl	801368c <puts>
			              }
			              prevState = currentState;
 8002176:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800217a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36


			              currentState = ST_STOP;
 800217e:	2304      	movs	r3, #4
 8002180:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002184:	e05c      	b.n	8002240 <main+0x4a4>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 8002186:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800218a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800218e:	429a      	cmp	r2, r3
 8002190:	d002      	beq.n	8002198 <main+0x3fc>
			              {
			                  printf("\n## Entering RESET state\n");
 8002192:	4833      	ldr	r0, [pc, #204]	@ (8002260 <main+0x4c4>)
 8002194:	f011 fa7a 	bl	801368c <puts>
			              }
			              prevState = currentState;
 8002198:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800219c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile

			              pruRxData = getCurrentRxBuffer(&rxPingPongBuffer);
 80021a0:	4830      	ldr	r0, [pc, #192]	@ (8002264 <main+0x4c8>)
 80021a2:	f000 f879 	bl	8002298 <_Z18getCurrentRxBufferP16RxPingPongBuffer>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <main+0x4cc>)
 80021aa:	6013      	str	r3, [r2, #0]

			              printf("   Resetting rxBuffer\n");
 80021ac:	482f      	ldr	r0, [pc, #188]	@ (800226c <main+0x4d0>)
 80021ae:	f011 fa6d 	bl	801368c <puts>
			              {
			            	  SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)pruRxData->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <main+0x4cc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 031f 	bic.w	r3, r3, #31
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	2340      	movs	r3, #64	@ 0x40
 80021be:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dd1d      	ble.n	8002202 <main+0x466>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80021d6:	f3bf 8f4f 	dsb	sy
}
 80021da:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80021dc:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <main+0x4d4>)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3320      	adds	r3, #32
 80021e8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b20      	subs	r3, #32
 80021ee:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dcf2      	bgt.n	80021dc <main+0x440>
  __ASM volatile ("dsb 0xF":::"memory");
 80021f6:	f3bf 8f4f 	dsb	sy
}
 80021fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021fc:	f3bf 8f6f 	isb	sy
}
 8002200:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8002202:	bf00      	nop
			                  int n = sizeof(pruRxData->rxBuffer);
 8002204:	2340      	movs	r3, #64	@ 0x40
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
			                  while(n-- > 0)
 8002208:	e005      	b.n	8002216 <main+0x47a>
			                  {
			                      pruRxData->rxBuffer[n] = 0;
 800220a:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <main+0x4cc>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002210:	4413      	add	r3, r2
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
			                  while(n-- > 0)
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	633a      	str	r2, [r7, #48]	@ 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	bfcc      	ite	gt
 8002220:	2301      	movgt	r3, #1
 8002222:	2300      	movle	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ef      	bne.n	800220a <main+0x46e>
			                  }
			              }

			              currentState = ST_IDLE;
 800222a:	2302      	movs	r3, #2
 800222c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002230:	e006      	b.n	8002240 <main+0x4a4>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 8002232:	f003 fe3c 	bl	8005eae <HAL_NVIC_SystemReset>
			              break;
 8002236:	e003      	b.n	8002240 <main+0x4a4>
			              break;
 8002238:	bf00      	nop
 800223a:	e6b5      	b.n	8001fa8 <main+0x20c>
			              break;
 800223c:	bf00      	nop
 800223e:	e6b3      	b.n	8001fa8 <main+0x20c>
			  }

	}
 8002240:	e6b2      	b.n	8001fa8 <main+0x20c>
 8002242:	bf00      	nop
 8002244:	080146f4 	.word	0x080146f4
 8002248:	24000578 	.word	0x24000578
 800224c:	08014710 	.word	0x08014710
 8002250:	24000350 	.word	0x24000350
 8002254:	0801472c 	.word	0x0801472c
 8002258:	24000351 	.word	0x24000351
 800225c:	08014764 	.word	0x08014764
 8002260:	0801477c 	.word	0x0801477c
 8002264:	24000360 	.word	0x24000360
 8002268:	24000520 	.word	0x24000520
 800226c:	08014798 	.word	0x08014798
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <_Z13swapTxBuffersP16TxPingPongBuffer>:

void swapRxBuffers(RxPingPongBuffer* buffer) {
    buffer->currentRxBuffer = 1 - buffer->currentRxBuffer;
}

void swapTxBuffers(TxPingPongBuffer* buffer) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 1 - buffer->currentTxBuffer;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002282:	f1c3 0201 	rsb	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_Z18getCurrentRxBufferP16RxPingPongBuffer>:

rxData_t* getCurrentRxBuffer(RxPingPongBuffer* buffer) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[buffer->currentRxBuffer];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_Z14getAltRxBufferP16RxPingPongBuffer>:

txData_t* getCurrentTxBuffer(TxPingPongBuffer* buffer) {
    return &buffer->txBuffers[buffer->currentTxBuffer];
}

rxData_t* getAltRxBuffer(RxPingPongBuffer* buffer) {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[1 - buffer->currentRxBuffer];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022c6:	f1c3 0301 	rsb	r3, r3, #1
 80022ca:	019b      	lsls	r3, r3, #6
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_Z14getAltTxBufferP16TxPingPongBuffer>:

txData_t* getAltTxBuffer(TxPingPongBuffer* buffer) {
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[1 - buffer->currentTxBuffer];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ea:	f1c3 0301 	rsb	r3, r3, #1
 80022ee:	019b      	lsls	r3, r3, #6
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b09e      	sub	sp, #120	@ 0x78
 8002304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230a:	224c      	movs	r2, #76	@ 0x4c
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f011 fab6 	bl	8013880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2220      	movs	r2, #32
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f011 faaf 	bl	8013880 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002322:	2002      	movs	r0, #2
 8002324:	f006 fbfe 	bl	8008b24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	4b56      	ldr	r3, [pc, #344]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	4a55      	ldr	r2, [pc, #340]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002338:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b52      	ldr	r3, [pc, #328]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4a51      	ldr	r2, [pc, #324]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 8002348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234c:	6193      	str	r3, [r2, #24]
 800234e:	4b4f      	ldr	r3, [pc, #316]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800235a:	bf00      	nop
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f3      	bne.n	800235c <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002374:	4b46      	ldr	r3, [pc, #280]	@ (8002490 <_Z18SystemClock_Configv+0x190>)
 8002376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800237a:	4a45      	ldr	r2, [pc, #276]	@ (8002490 <_Z18SystemClock_Configv+0x190>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002384:	4b42      	ldr	r3, [pc, #264]	@ (8002490 <_Z18SystemClock_Configv+0x190>)
 8002386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 800239c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <_Z18SystemClock_Configv+0x188>)
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023c4:	bf00      	nop
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <_Z18SystemClock_Configv+0x18c>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d2:	bf14      	ite	ne
 80023d4:	2301      	movne	r3, #1
 80023d6:	2300      	moveq	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f3      	bne.n	80023c6 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80023de:	4b2c      	ldr	r3, [pc, #176]	@ (8002490 <_Z18SystemClock_Configv+0x190>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <_Z18SystemClock_Configv+0x190>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f8:	2302      	movs	r3, #2
 80023fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fc:	2302      	movs	r3, #2
 80023fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002400:	2305      	movs	r3, #5
 8002402:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002404:	23c0      	movs	r3, #192	@ 0xc0
 8002406:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002408:	2302      	movs	r3, #2
 800240a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800240c:	2304      	movs	r3, #4
 800240e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002410:	2302      	movs	r3, #2
 8002412:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002414:	2308      	movs	r3, #8
 8002416:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002418:	2300      	movs	r3, #0
 800241a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002424:	4618      	mov	r0, r3
 8002426:	f006 fbb7 	bl	8008b98 <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800243a:	f000 f977 	bl	800272c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243e:	233f      	movs	r3, #63	@ 0x3f
 8002440:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002442:	2303      	movs	r3, #3
 8002444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800244a:	2308      	movs	r3, #8
 800244c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800244e:	2340      	movs	r3, #64	@ 0x40
 8002450:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002452:	2340      	movs	r3, #64	@ 0x40
 8002454:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800245c:	2340      	movs	r3, #64	@ 0x40
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	2104      	movs	r1, #4
 8002466:	4618      	mov	r0, r3
 8002468:	f006 fff0 	bl	800944c <HAL_RCC_ClockConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 800247c:	f000 f956 	bl	800272c <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3778      	adds	r7, #120	@ 0x78
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58000400 	.word	0x58000400
 800248c:	58024800 	.word	0x58024800
 8002490:	58024400 	.word	0x58024400

08002494 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0b0      	sub	sp, #192	@ 0xc0
 8002498:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	22c0      	movs	r2, #192	@ 0xc0
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f011 f9ed 	bl	8013880 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80024a6:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80024b6:	230c      	movs	r3, #12
 80024b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80024be:	230a      	movs	r3, #10
 80024c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80024c6:	23c0      	movs	r3, #192	@ 0xc0
 80024c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80024ca:	2320      	movs	r3, #32
 80024cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80024d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024d6:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80024d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	463b      	mov	r3, r7
 80024e0:	4618      	mov	r0, r3
 80024e2:	f007 fb3f 	bl	8009b64 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 80024f6:	f000 f919 	bl	800272c <Error_Handler>
  }
}
 80024fa:	bf00      	nop
 80024fc:	37c0      	adds	r7, #192	@ 0xc0
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800250a:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800250c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800251e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002522:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800252c:	2208      	movs	r2, #8
 800252e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002530:	4807      	ldr	r0, [pc, #28]	@ (8002550 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002532:	f00a f815 	bl	800c560 <HAL_SD_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8002546:	4804      	ldr	r0, [pc, #16]	@ (8002558 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8002548:	f011 f8a0 	bl	801368c <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2400057c 	.word	0x2400057c
 8002554:	52007000 	.word	0x52007000
 8002558:	080147b0 	.word	0x080147b0

0800255c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002560:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002562:	4a2d      	ldr	r2, [pc, #180]	@ (8002618 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002598:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a4:	481b      	ldr	r0, [pc, #108]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025a6:	f00c f840 	bl	800e62a <HAL_UART_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80025ba:	f000 f8b7 	bl	800272c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025be:	2100      	movs	r1, #0
 80025c0:	4814      	ldr	r0, [pc, #80]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025c2:	f00d f8d2 	bl	800f76a <HAL_UARTEx_SetTxFifoThreshold>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80025d6:	f000 f8a9 	bl	800272c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025da:	2100      	movs	r1, #0
 80025dc:	480d      	ldr	r0, [pc, #52]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025de:	f00d f902 	bl	800f7e6 <HAL_UARTEx_SetRxFifoThreshold>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80025f2:	f000 f89b 	bl	800272c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025f6:	4807      	ldr	r0, [pc, #28]	@ (8002614 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025f8:	f00d f87e 	bl	800f6f8 <HAL_UARTEx_DisableFifoMode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800260c:	f000 f88e 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	240005f8 	.word	0x240005f8
 8002618:	40011000 	.word	0x40011000

0800261c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002638:	4a24      	ldr	r2, [pc, #144]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 800263a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002642:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002674:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002692:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <_ZL12MX_GPIO_Initv+0xb0>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026aa:	2310      	movs	r3, #16
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <_ZL12MX_GPIO_Initv+0xb4>)
 80026be:	f006 f881 	bl	80087c4 <HAL_GPIO_Init>

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58020800 	.word	0x58020800

080026d4 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80026da:	463b      	mov	r3, r7
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80026e6:	f003 fbf3 	bl	8005ed0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80026f6:	231f      	movs	r3, #31
 80026f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80026fa:	2387      	movs	r3, #135	@ 0x87
 80026fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80026fe:	2300      	movs	r3, #0
 8002700:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002702:	2300      	movs	r3, #0
 8002704:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002716:	463b      	mov	r3, r7
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc11 	bl	8005f40 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800271e:	2004      	movs	r0, #4
 8002720:	f003 fbee 	bl	8005f00 <HAL_MPU_Enable>

}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8002730:	4803      	ldr	r0, [pc, #12]	@ (8002740 <Error_Handler+0x14>)
 8002732:	f010 ff3b 	bl	80135ac <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8002736:	b672      	cpsid	i
}
 8002738:	bf00      	nop

  __disable_irq();
  while (1)
 800273a:	bf00      	nop
 800273c:	e7fd      	b.n	800273a <Error_Handler+0xe>
 800273e:	bf00      	nop
 8002740:	080147c0 	.word	0x080147c0

08002744 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
  }
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8002764:	2110      	movs	r1, #16
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fb29 	bl	8000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 800276c:	4603      	mov	r3, r0
  }
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f891 	bl	80028ac <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f865 	bl	80028ca <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 8002800:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d004      	beq.n	8002812 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7fe f9c1 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 800280e:	4603      	mov	r3, r0
 8002810:	e000      	b.n	8002814 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b08b      	sub	sp, #44	@ 0x2c
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4621      	mov	r1, r4
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f888 	bl	8002942 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f103 0408 	add.w	r4, r3, #8
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f865 	bl	8002910 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	4620      	mov	r0, r4
 8002852:	f7fe fcc5 	bl	80011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	@ 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f010 fca2 	bl	80131ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	461a      	mov	r2, r3
 800287a:	2101      	movs	r1, #1
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f010 fc75 	bl	801316c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8002882:	bf00      	nop
    }
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8002898:	793a      	ldrb	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f85c 	bl	800295a <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]
  }
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  while (slot) {
 80028da:	e00f      	b.n	80028fc <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7fe f9a2 	bl	8000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	463b      	mov	r3, r7
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fa9f 	bl	8000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7fe f956 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 80028fa:	60f8      	str	r0, [r7, #12]
  while (slot) {
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ec      	bne.n	80028dc <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 8002902:	e000      	b.n	8002906 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 8002904:	bf00      	nop
  return slot;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe f9a1 	bl	8000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>
 8002922:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f874 	bl	8002a16 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 800292e:	4603      	mov	r3, r0
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4619      	mov	r1, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fe f9a5 	bl	8000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	7039      	strb	r1, [r7, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 800295a:	b5b0      	push	{r4, r5, r7, lr}
 800295c:	b08a      	sub	sp, #40	@ 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7fe fc12 	bl	8001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7fe fc20 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002972:	4604      	mov	r4, r0
 8002974:	68b8      	ldr	r0, [r7, #8]
 8002976:	f000 f85d 	bl	8002a34 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 800297a:	4605      	mov	r5, r0
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7fe fc18 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002982:	4603      	mov	r3, r0
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f863 	bl	8002a52 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 800298c:	4602      	mov	r2, r0
 800298e:	793b      	ldrb	r3, [r7, #4]
 8002990:	f107 0010 	add.w	r0, r7, #16
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	462a      	mov	r2, r5
 800299a:	4621      	mov	r1, r4
 800299c:	f000 f868 	bl	8002a70 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7fe fc11 	bl	80011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f871 	bl	8002a96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}

080029be <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80029c6:	687b      	ldr	r3, [r7, #4]
  }
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80029dc:	687b      	ldr	r3, [r7, #4]
  }
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 80029f2:	687b      	ldr	r3, [r7, #4]
  }
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002a08:	687b      	ldr	r3, [r7, #4]
  }
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fbf8 	bl	800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002a2a:	4603      	mov	r3, r0
  }
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fcf4 	bl	8001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f863 	bl	8002b2c <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8002a66:	4603      	mov	r3, r0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002a7e:	7e3b      	ldrb	r3, [r7, #24]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f85f 	bl	8002b4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f871 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	f107 020c 	add.w	r2, r7, #12
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fd07 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8002ada:	7b3b      	ldrb	r3, [r7, #12]
 8002adc:	e022      	b.n	8002b24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f932 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b5b      	cmp	r3, #91	@ 0x5b
 8002ae8:	d002      	beq.n	8002af0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8002aea:	2b7b      	cmp	r3, #123	@ 0x7b
 8002aec:	d00a      	beq.n	8002b04 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8002aee:	e013      	b.n	8002b18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f7fe fa84 	bl	8000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f94d 	bl	8002d9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8002b00:	4603      	mov	r3, r0
 8002b02:	e00f      	b.n	8002b24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8002b04:	6838      	ldr	r0, [r7, #0]
 8002b06:	f7fe fa8b 	bl	8001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa6a 	bl	8002fe8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8002b14:	4603      	mov	r3, r0
 8002b16:	e005      	b.n	8002b24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fc27 	bl	800336e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8002b20:	4603      	mov	r3, r0
 8002b22:	bf00      	nop
  }
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fc58 	bl	80013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8002b42:	68fb      	ldr	r3, [r7, #12]
  }
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	7e3a      	ldrb	r2, [r7, #24]
 8002b70:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	739a      	strb	r2, [r3, #14]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8d9 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b2f      	cmp	r3, #47	@ 0x2f
 8002b9a:	f200 80c7 	bhi.w	8002d2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c65 	.word	0x08002c65
 8002ba8:	08002d2d 	.word	0x08002d2d
 8002bac:	08002d2d 	.word	0x08002d2d
 8002bb0:	08002d2d 	.word	0x08002d2d
 8002bb4:	08002d2d 	.word	0x08002d2d
 8002bb8:	08002d2d 	.word	0x08002d2d
 8002bbc:	08002d2d 	.word	0x08002d2d
 8002bc0:	08002d2d 	.word	0x08002d2d
 8002bc4:	08002d2d 	.word	0x08002d2d
 8002bc8:	08002c75 	.word	0x08002c75
 8002bcc:	08002c75 	.word	0x08002c75
 8002bd0:	08002d2d 	.word	0x08002d2d
 8002bd4:	08002d2d 	.word	0x08002d2d
 8002bd8:	08002c75 	.word	0x08002c75
 8002bdc:	08002d2d 	.word	0x08002d2d
 8002be0:	08002d2d 	.word	0x08002d2d
 8002be4:	08002d2d 	.word	0x08002d2d
 8002be8:	08002d2d 	.word	0x08002d2d
 8002bec:	08002d2d 	.word	0x08002d2d
 8002bf0:	08002d2d 	.word	0x08002d2d
 8002bf4:	08002d2d 	.word	0x08002d2d
 8002bf8:	08002d2d 	.word	0x08002d2d
 8002bfc:	08002d2d 	.word	0x08002d2d
 8002c00:	08002d2d 	.word	0x08002d2d
 8002c04:	08002d2d 	.word	0x08002d2d
 8002c08:	08002d2d 	.word	0x08002d2d
 8002c0c:	08002d2d 	.word	0x08002d2d
 8002c10:	08002d2d 	.word	0x08002d2d
 8002c14:	08002d2d 	.word	0x08002d2d
 8002c18:	08002d2d 	.word	0x08002d2d
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	08002d2d 	.word	0x08002d2d
 8002c24:	08002c75 	.word	0x08002c75
 8002c28:	08002d2d 	.word	0x08002d2d
 8002c2c:	08002d2d 	.word	0x08002d2d
 8002c30:	08002d2d 	.word	0x08002d2d
 8002c34:	08002d2d 	.word	0x08002d2d
 8002c38:	08002d2d 	.word	0x08002d2d
 8002c3c:	08002d2d 	.word	0x08002d2d
 8002c40:	08002d2d 	.word	0x08002d2d
 8002c44:	08002d2d 	.word	0x08002d2d
 8002c48:	08002d2d 	.word	0x08002d2d
 8002c4c:	08002d2d 	.word	0x08002d2d
 8002c50:	08002d2d 	.word	0x08002d2d
 8002c54:	08002d2d 	.word	0x08002d2d
 8002c58:	08002d2d 	.word	0x08002d2d
 8002c5c:	08002d2d 	.word	0x08002d2d
 8002c60:	08002c7d 	.word	0x08002c7d
          return DeserializationError::IncompleteInput;
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fc1b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002c70:	7b3b      	ldrb	r3, [r7, #12]
 8002c72:	e064      	b.n	8002d3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fbbb 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8002c7a:	e05f      	b.n	8002d3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fbb7 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f860 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c8c:	d002      	beq.n	8002c94 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8002c8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c90:	d02a      	beq.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8002c92:	e042      	b.n	8002d1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fbab 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f852 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002ca8:	7f7b      	ldrb	r3, [r7, #29]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fbf6 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002cba:	7c3b      	ldrb	r3, [r7, #16]
 8002cbc:	e03f      	b.n	8002d3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8002cbe:	7f7b      	ldrb	r3, [r7, #29]
 8002cc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8002cc2:	d107      	bne.n	8002cd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fb90 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8002cd0:	bf00      	nop
              break;
 8002cd2:	e02a      	b.n	8002d2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8002cd4:	7f7b      	ldrb	r3, [r7, #29]
 8002cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
                move();
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb85 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8002ce6:	e7da      	b.n	8002c9e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb81 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f82a 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002cf8:	7fbb      	ldrb	r3, [r7, #30]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fbce 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d0a:	7d3b      	ldrb	r3, [r7, #20]
 8002d0c:	e017      	b.n	8002d3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8002d0e:	7fbb      	ldrb	r3, [r7, #30]
 8002d10:	2b0a      	cmp	r3, #10
 8002d12:	d000      	beq.n	8002d16 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8002d14:	e7e8      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8002d16:	bf00      	nop
              break;
 8002d18:	e007      	b.n	8002d2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	2102      	movs	r1, #2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fbc0 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d26:	7e3b      	ldrb	r3, [r7, #24]
 8002d28:	e009      	b.n	8002d3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8002d2a:	e007      	b.n	8002d3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fbb7 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d38:	7f3b      	ldrb	r3, [r7, #28]
 8002d3a:	e000      	b.n	8002d3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8002d3c:	e728      	b.n	8002b90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7b9b      	ldrb	r3, [r3, #14]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fb8a 	bl	800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	735a      	strb	r2, [r3, #13]
 8002d74:	e008      	b.n	8002d88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fb6e 	bl	800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	739a      	strb	r2, [r3, #14]
    return _current;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7b5b      	ldrb	r3, [r3, #13]
  }
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b098      	sub	sp, #96	@ 0x60
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7b1b      	ldrb	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	2105      	movs	r1, #5
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fb77 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002db8:	7c3b      	ldrb	r3, [r7, #16]
 8002dba:	e111      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dc0:	235b      	movs	r3, #91	@ 0x5b
 8002dc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8002dc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002dc8:	f7ff ffbe 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8002de2:	2300      	movs	r3, #0
 8002de4:	e003      	b.n	8002dee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8002de6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002de8:	f000 fb02 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002dec:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fb51 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002e04:	7d3b      	ldrb	r3, [r7, #20]
 8002e06:	e0eb      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff febd 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002e12:	f107 0318 	add.w	r3, r7, #24
 8002e16:	f107 020c 	add.w	r2, r7, #12
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fb53 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8002e36:	2300      	movs	r3, #0
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	e0cc      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e4a:	235d      	movs	r3, #93	@ 0x5d
 8002e4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8002e50:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e52:	f7ff ff79 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e003      	b.n	8002e78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8002e70:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e72:	f000 fabd 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002e76:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fb0f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e8c:	e0a8      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f7fe fa03 	bl	80012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8002e9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8002ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fafc 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002eae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eb2:	e095      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8002ec0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fde7 	bl	8002a96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7b1b      	ldrb	r3, [r3, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002ed8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002edc:	f107 020c 	add.w	r2, r7, #12
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe faf0 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002efc:	2300      	movs	r3, #0
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002f08:	7b3b      	ldrb	r3, [r7, #12]
 8002f0a:	e069      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fe3b 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002f12:	4603      	mov	r3, r0
 8002f14:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002f16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f1a:	f107 020c 	add.w	r2, r7, #12
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fad1 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002f46:	7b3b      	ldrb	r3, [r7, #12]
 8002f48:	e04a      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f4e:	235d      	movs	r3, #93	@ 0x5d
 8002f50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002f54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002f56:	f7ff fef7 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f62:	4293      	cmp	r3, r2
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 8002f70:	2300      	movs	r3, #0
 8002f72:	e003      	b.n	8002f7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002f74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002f76:	f000 fa3b 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002f7a:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8002f80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fa8d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002f8c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002f90:	e026      	b.n	8002fe0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f96:	232c      	movs	r3, #44	@ 0x2c
 8002f98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002f9c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002f9e:	f7ff fed3 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002faa:	4293      	cmp	r3, r2
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e003      	b.n	8002fc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002fbc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002fbe:	f000 fa17 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002fc2:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f43f af5f 	beq.w	8002e8e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002fd0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa65 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002fdc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3760      	adds	r7, #96	@ 0x60
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b0a3      	sub	sp, #140	@ 0x8c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7b1b      	ldrb	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	2105      	movs	r1, #5
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe fa50 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003006:	7c3b      	ldrb	r3, [r7, #16]
 8003008:	e1ad      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003010:	237b      	movs	r3, #123	@ 0x7b
 8003012:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 8003016:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800301a:	f7ff fe95 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003026:	4293      	cmp	r3, r2
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8003034:	2300      	movs	r3, #0
 8003036:	e004      	b.n	8003042 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8003038:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800303c:	f000 f9d8 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003040:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fa27 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003058:	7d3b      	ldrb	r3, [r7, #20]
 800305a:	e184      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fd93 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003062:	4603      	mov	r3, r0
 8003064:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003066:	f107 0318 	add.w	r3, r7, #24
 800306a:	f107 020c 	add.w	r2, r7, #12
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fa29 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 800308a:	2300      	movs	r3, #0
 800308c:	f083 0301 	eor.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8003096:	7b3b      	ldrb	r3, [r7, #12]
 8003098:	e165      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800309e:	237d      	movs	r3, #125	@ 0x7d
 80030a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 80030a4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80030a6:	f7ff fe4f 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80030aa:	4603      	mov	r3, r0
 80030ac:	461a      	mov	r2, r3
 80030ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80030b2:	4293      	cmp	r3, r2
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 80030c0:	2300      	movs	r3, #0
 80030c2:	e003      	b.n	80030cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80030c4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80030c6:	f000 f993 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80030ca:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80030d0:	f107 0320 	add.w	r3, r7, #32
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f9e5 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80030dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e0:	e141      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f7fe f8af 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80030ee:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 80030f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 80030fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fe:	2103      	movs	r1, #3
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe f9d0 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003106:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800310a:	e12c      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 800310c:	f107 0308 	add.w	r3, r7, #8
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f979 	bl	800340a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8003118:	4603      	mov	r3, r0
 800311a:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800311c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003120:	f107 020c 	add.w	r2, r7, #12
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f9ce 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8003140:	2300      	movs	r3, #0
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 800314c:	7b3b      	ldrb	r3, [r7, #12]
 800314e:	e10a      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8003150:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fb0d 	bl	8002776 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 800315c:	4603      	mov	r3, r0
 800315e:	4619      	mov	r1, r3
 8003160:	4620      	mov	r0, r4
 8003162:	f7fd fd49 	bl	8000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fd0e 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800316c:	4603      	mov	r3, r0
 800316e:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 8003170:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003174:	f107 020c 	add.w	r2, r7, #12
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe f9a4 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8003194:	2300      	movs	r3, #0
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 80031a0:	7b3b      	ldrb	r3, [r7, #12]
 80031a2:	e0e0      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80031a8:	233a      	movs	r3, #58	@ 0x3a
 80031aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 80031ae:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80031b0:	f7ff fdca 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80031bc:	4293      	cmp	r3, r2
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 80031ca:	2300      	movs	r3, #0
 80031cc:	e003      	b.n	80031d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 80031ce:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80031d0:	f000 f90e 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80031d4:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 80031e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f95d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80031f0:	e0b9      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7b1b      	ldrb	r3, [r3, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 80031fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003202:	f7fd fcc5 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8003206:	4603      	mov	r3, r0
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fc43 	bl	8002a96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003210:	4603      	mov	r3, r0
 8003212:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7b1b      	ldrb	r3, [r3, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003220:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003224:	f107 020c 	add.w	r2, r7, #12
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f94c 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8003244:	2300      	movs	r3, #0
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8003250:	7b3b      	ldrb	r3, [r7, #12]
 8003252:	e088      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fc97 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800325a:	4603      	mov	r3, r0
 800325c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800325e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003262:	f107 020c 	add.w	r2, r7, #12
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe f92d 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800326e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8003274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 8003282:	2300      	movs	r3, #0
 8003284:	f083 0301 	eor.w	r3, r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	e069      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003296:	237d      	movs	r3, #125	@ 0x7d
 8003298:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 800329c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800329e:	f7ff fd53 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032aa:	4293      	cmp	r3, r2
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80032b8:	2300      	movs	r3, #0
 80032ba:	e003      	b.n	80032c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80032bc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80032be:	f000 f897 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80032c2:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 80032c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe f8e9 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80032d4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80032d8:	e045      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032de:	232c      	movs	r3, #44	@ 0x2c
 80032e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 80032e4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80032e6:	f7ff fd2f 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80032f2:	4293      	cmp	r3, r2
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8003300:	2300      	movs	r3, #0
 8003302:	e003      	b.n	800330c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 8003304:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003306:	f000 f873 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800330a:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 8003316:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe f8c2 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003322:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003326:	e01e      	b.n	8003366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fc2d 	bl	8002b88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800332e:	4603      	mov	r3, r0
 8003330:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003332:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003336:	f107 020c 	add.w	r2, r7, #12
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe f8c3 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 8003356:	2300      	movs	r3, #0
 8003358:	f083 0301 	eor.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f43f aebf 	beq.w	80030e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003364:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003366:	4618      	mov	r0, r3
 8003368:	378c      	adds	r7, #140	@ 0x8c
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fce5 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f861 	bl	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f86e 	bl	8003470 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8003394:	4603      	mov	r3, r0
 8003396:	e005      	b.n	80033a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8a3 	bl	80034e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80033a0:	4603      	mov	r3, r0
 80033a2:	bf00      	nop
  }
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd ffa6 	bl	800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 80033c0:	4603      	mov	r3, r0
 80033c2:	e000      	b.n	80033c6 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f96d 	bl	80036bc <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 80033e2:	4603      	mov	r3, r0
 80033e4:	e000      	b.n	80033e8 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    _loaded = false;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	739a      	strb	r2, [r3, #14]
  }
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fc97 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800341a:	4603      	mov	r3, r0
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f813 	bl	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f988 	bl	8003740 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003430:	4603      	mov	r3, r0
 8003432:	e005      	b.n	8003440 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa1a 	bl	8003870 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 800343c:	4603      	mov	r3, r0
 800343e:	bf00      	nop
  }
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b27      	cmp	r3, #39	@ 0x27
 8003456:	d002      	beq.n	800345e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b22      	cmp	r3, #34	@ 0x22
 800345c:	d101      	bne.n	8003462 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 8003462:	2300      	movs	r3, #0
  }
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f95d 	bl	8003740 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003486:	4603      	mov	r3, r0
 8003488:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	f107 020c 	add.w	r2, r7, #12
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe f817 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80034ae:	2300      	movs	r3, #0
 80034b0:	f083 0301 	eor.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80034ba:	7b3b      	ldrb	r3, [r7, #12]
 80034bc:	e00f      	b.n	80034de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f958 	bl	8002776 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	f7fd fd83 	bl	8000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ffe5 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034dc:	7f3b      	ldrb	r3, [r7, #28]
  }
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b0a0      	sub	sp, #128	@ 0x80
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fc26 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003502:	e013      	b.n	800352c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff73 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 800350a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800350e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	f887 107f 	strb.w	r1, [r7, #127]	@ 0x7f
 8003518:	3380      	adds	r3, #128	@ 0x80
 800351a:	443b      	add	r3, r7
 800351c:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fc11 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800352c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fa08 	bl	8003946 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 800353c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003540:	2b3e      	cmp	r3, #62	@ 0x3e
 8003542:	d801      	bhi.n	8003548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1da      	bne.n	8003504 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 800354e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003552:	3380      	adds	r3, #128	@ 0x80
 8003554:	443b      	add	r3, r7
 8003556:	2200      	movs	r2, #0
 8003558:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 800355c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003560:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 8003564:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003568:	2b74      	cmp	r3, #116	@ 0x74
 800356a:	d114      	bne.n	8003596 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 800356c:	2101      	movs	r1, #1
 800356e:	6838      	ldr	r0, [r7, #0]
 8003570:	f7fd fcd7 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 8003574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003578:	2b04      	cmp	r3, #4
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003582:	461a      	mov	r2, r3
 8003584:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd ff8b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003590:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003594:	e077      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 8003596:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800359a:	2b66      	cmp	r3, #102	@ 0x66
 800359c:	d114      	bne.n	80035c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 800359e:	2100      	movs	r1, #0
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f7fd fcbe 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80035a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80035b4:	461a      	mov	r2, r3
 80035b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd ff72 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035c2:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80035c6:	e05e      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 80035c8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80035cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80035ce:	d110      	bne.n	80035f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 80035d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80035de:	461a      	mov	r2, r3
 80035e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd ff5d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035ec:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80035f0:	e049      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f9d3 	bl	80039a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fbd4 	bl	8003db4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 800360c:	4603      	mov	r3, r0
 800360e:	2b08      	cmp	r3, #8
 8003610:	d021      	beq.n	8003656 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 8003612:	2b08      	cmp	r3, #8
 8003614:	dc2f      	bgt.n	8003676 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 8003616:	2b06      	cmp	r3, #6
 8003618:	d00f      	beq.n	800363a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 800361a:	2b07      	cmp	r3, #7
 800361c:	d12b      	bne.n	8003676 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 800361e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f7fd fcb8 	bl	8000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8003628:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd ff39 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003634:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003638:	e025      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 800363a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f7fd fc97 	bl	8000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8003644:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd ff2b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003650:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003654:	e017      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 8003656:	ed97 7b04 	vldr	d7, [r7, #16]
 800365a:	eeb0 0b47 	vmov.f64	d0, d7
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f7fd fc74 	bl	8000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8003664:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd ff1b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003670:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003674:	e007      	b.n	8003686 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 8003676:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd ff12 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003682:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 8003686:	4618      	mov	r0, r3
 8003688:	3780      	adds	r7, #128	@ 0x80
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fd fc2f 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f8a0 	bl	80027ee <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 80036ae:	4603      	mov	r3, r0
 80036b0:	e000      	b.n	80036b4 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 80036b2:	2300      	movs	r3, #0
  }
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fd fcbc 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80036ca:	4603      	mov	r3, r0
 80036cc:	3b03      	subs	r3, #3
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d830      	bhi.n	8003734 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 80036d2:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	08003715 	.word	0x08003715
 80036dc:	08003715 	.word	0x08003715
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036f1 	.word	0x080036f1
 80036e8:	08003703 	.word	0x08003703
 80036ec:	08003723 	.word	0x08003723
      return convertPositiveInteger<T>(_content.asInteger);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f000 fb7c 	bl	8003df6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 80036fe:	4603      	mov	r3, r0
 8003700:	e019      	b.n	8003736 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f000 fb86 	bl	8003e1c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003710:	4603      	mov	r3, r0
 8003712:	e010      	b.n	8003736 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fb93 	bl	8003e44 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 800371e:	4603      	mov	r3, r0
 8003720:	e009      	b.n	8003736 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	ed93 7b00 	vldr	d7, [r3]
 8003728:	eeb0 0b47 	vmov.f64	d0, d7
 800372c:	f000 fb9e 	bl	8003e6c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003730:	4603      	mov	r3, r0
 8003732:	e000      	b.n	8003736 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop

08003740 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	@ 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f103 0208 	add.w	r2, r3, #8
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fe5a 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff faf3 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fe41 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff faea 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe38 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8003780:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003784:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003788:	429a      	cmp	r2, r3
 800378a:	d04f      	beq.n	800382c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 800378c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fe83 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037a0:	7e3b      	ldrb	r3, [r7, #24]
 80037a2:	e061      	b.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 80037a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80037aa:	d136      	bne.n	800381a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff facb 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 80037b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fe6d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037cc:	7f3b      	ldrb	r3, [r7, #28]
 80037ce:	e04b      	b.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 80037d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037d4:	2b75      	cmp	r3, #117	@ 0x75
 80037d6:	d108      	bne.n	80037ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 80037d8:	f107 0320 	add.w	r3, r7, #32
 80037dc:	2104      	movs	r1, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fe61 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037e8:	e03e      	b.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 80037ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fedc 	bl	80015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 80037fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8003802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fe4c 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800380e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003812:	e029      	b.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fdeb 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 800381a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fda3 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 800382a:	e7a0      	b.n	800376e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 800382c:	bf00      	nop
    result = builder.complete();
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fdc1 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003838:	4602      	mov	r2, r0
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 8003846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800384a:	2103      	movs	r1, #3
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fe2a 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003856:	e007      	b.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 8003858:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fe21 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003864:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 8003868:	4618      	mov	r0, r3
 800386a:	3730      	adds	r7, #48	@ 0x30
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	@ 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f103 0208 	add.w	r2, r3, #8
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fdc2 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fa5b 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 80038a0:	f107 0318 	add.w	r3, r7, #24
 80038a4:	2101      	movs	r1, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fdfd 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038ac:	7e3b      	ldrb	r3, [r7, #24]
 80038ae:	e046      	b.n	800393e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 80038b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f846 	bl	8003946 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d019      	beq.n	80038f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fd95 	bl	80033f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 80038c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fd4d 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fa36 	bl	8002d48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 80038e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f82d 	bl	8003946 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e6      	bne.n	80038c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 80038f2:	e007      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fdd3 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003900:	7f3b      	ldrb	r3, [r7, #28]
 8003902:	e01c      	b.n	800393e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fd56 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 800391c:	f107 0320 	add.w	r3, r7, #32
 8003920:	2103      	movs	r1, #3
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fdbf 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003928:	f897 3020 	ldrb.w	r3, [r7, #32]
 800392c:	e007      	b.n	800393e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 800392e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fdb6 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800393a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 800393e:	4618      	mov	r0, r3
 8003940:	3728      	adds	r7, #40	@ 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2239      	movs	r2, #57	@ 0x39
 8003954:	2130      	movs	r1, #48	@ 0x30
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fab3 	bl	8003ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800395c:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11a      	bne.n	8003998 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	227a      	movs	r2, #122	@ 0x7a
 8003966:	215f      	movs	r1, #95	@ 0x5f
 8003968:	4618      	mov	r0, r3
 800396a:	f000 faaa 	bl	8003ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	225a      	movs	r2, #90	@ 0x5a
 8003978:	2141      	movs	r1, #65	@ 0x41
 800397a:	4618      	mov	r0, r3
 800397c:	f000 faa1 	bl	8003ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003980:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b2b      	cmp	r3, #43	@ 0x2b
 800398a:	d005      	beq.n	8003998 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003990:	d002      	beq.n	8003998 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b2e      	cmp	r3, #46	@ 0x2e
 8003996:	d101      	bne.n	800399c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 800399c:	2300      	movs	r3, #0
  }
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0a2      	sub	sp, #136	@ 0x88
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80039b2:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 80039ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b2b      	cmp	r3, #43	@ 0x2b
 80039c0:	d008      	beq.n	80039d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 80039c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80039c4:	d10a      	bne.n	80039dc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 80039cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ce:	3301      	adds	r3, #1
 80039d0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80039d2:	e003      	b.n	80039dc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 80039d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d6:	3301      	adds	r3, #1
 80039d8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80039da:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80039e2:	d003      	beq.n	80039ec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 80039e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80039ea:	d109      	bne.n	8003a00 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 80039ec:	f000 fa84 	bl	8003ef8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 80039f0:	eeb0 7b40 	vmov.f64	d7, d0
 80039f4:	eeb0 0b47 	vmov.f64	d0, d7
 80039f8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80039fa:	f000 fa8b 	bl	8003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80039fe:	e1d4      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b69      	cmp	r3, #105	@ 0x69
 8003a06:	d003      	beq.n	8003a10 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b49      	cmp	r3, #73	@ 0x49
 8003a0e:	d114      	bne.n	8003a3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003a10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003a18:	f000 fa92 	bl	8003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8003a20:	eeb1 7b47 	vneg.f64	d7, d7
 8003a24:	e003      	b.n	8003a2e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8003a26:	f000 fa8b 	bl	8003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8003a2e:	eeb0 0b47 	vmov.f64	d0, d7
 8003a32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a34:	f000 fa6e 	bl	8003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003a38:	e1b7      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fc50 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a56:	d001      	beq.n	8003a5c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8003a62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a64:	f000 fa7a 	bl	8003f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003a68:	e19f      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003a88:	e054      	b.n	8003b34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	3b30      	subs	r3, #48	@ 0x30
 8003a90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8003a94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a98:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003a9c:	49b2      	ldr	r1, [pc, #712]	@ (8003d68 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8003a9e:	418b      	sbcs	r3, r1
 8003aa0:	d251      	bcs.n	8003b46 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8003aa2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003ab8:	0090      	lsls	r0, r2, #2
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	eb12 0804 	adds.w	r8, r2, r4
 8003ac2:	eb43 0905 	adc.w	r9, r3, r5
 8003ac6:	eb18 0308 	adds.w	r3, r8, r8
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	eb49 0309 	adc.w	r3, r9, r9
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003ad6:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8003ada:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ade:	2200      	movs	r2, #0
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ae4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003ae8:	460b      	mov	r3, r1
 8003aea:	43db      	mvns	r3, r3
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aee:	4613      	mov	r3, r2
 8003af0:	43db      	mvns	r3, r3
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003af8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003afc:	4621      	mov	r1, r4
 8003afe:	4291      	cmp	r1, r2
 8003b00:	4629      	mov	r1, r5
 8003b02:	eb71 0303 	sbcs.w	r3, r1, r3
 8003b06:	d320      	bcc.n	8003b4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8003b08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b16:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	1851      	adds	r1, r2, r1
 8003b1e:	6139      	str	r1, [r7, #16]
 8003b20:	4629      	mov	r1, r5
 8003b22:	414b      	adcs	r3, r1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b2a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b30:	3301      	adds	r3, #1
 8003b32:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fd fbd3 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1a2      	bne.n	8003a8a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8003b44:	e002      	b.n	8003b4c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8003b4a:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11b      	bne.n	8003b8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8003b54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003b60:	f000 fa18 	bl	8003f94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8003b64:	e121      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003b66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b6a:	f04f 020a 	mov.w	r2, #10
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	f7fc fdd1 	bl	8000718 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8003b7e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8003b8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b94:	d2e7      	bcs.n	8003b66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8003b96:	e009      	b.n	8003bac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8003b98:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba8:	3301      	adds	r3, #1
 8003baa:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd fb97 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ed      	bne.n	8003b98 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bc2:	d14c      	bne.n	8003c5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003bca:	e040      	b.n	8003c4e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8003bcc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bd0:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8003bd4:	4965      	ldr	r1, [pc, #404]	@ (8003d6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8003bd6:	418b      	sbcs	r3, r1
 8003bd8:	d236      	bcs.n	8003c48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003bda:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003bde:	4622      	mov	r2, r4
 8003be0:	462b      	mov	r3, r5
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003bf0:	0090      	lsls	r0, r2, #2
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	eb12 0a04 	adds.w	sl, r2, r4
 8003bfa:	eb43 0b05 	adc.w	fp, r3, r5
 8003bfe:	eb1a 030a 	adds.w	r3, sl, sl
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	eb4b 030b 	adc.w	r3, fp, fp
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c0e:	4652      	mov	r2, sl
 8003c10:	465b      	mov	r3, fp
 8003c12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c14:	7809      	ldrb	r1, [r1, #0]
 8003c16:	3930      	subs	r1, #48	@ 0x30
 8003c18:	b2c9      	uxtb	r1, r1
 8003c1a:	b2c9      	uxtb	r1, r1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	6239      	str	r1, [r7, #32]
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c26:	4621      	mov	r1, r4
 8003c28:	1851      	adds	r1, r2, r1
 8003c2a:	6039      	str	r1, [r7, #0]
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	414b      	adcs	r3, r1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c36:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8003c3a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8003c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd fb46 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1b6      	bne.n	8003bcc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8003c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b65      	cmp	r3, #101	@ 0x65
 8003c68:	d003      	beq.n	8003c72 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b45      	cmp	r3, #69	@ 0x45
 8003c70:	d164      	bne.n	8003d3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8003c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c74:	3301      	adds	r3, #1
 8003c76:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c84:	d106      	bne.n	8003c94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8e:	3301      	adds	r3, #1
 8003c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c92:	e044      	b.n	8003d1e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8003c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c9a:	d140      	bne.n	8003d1e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8003ca2:	e03c      	b.n	8003d1e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8003ca4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3b30      	subs	r3, #48	@ 0x30
 8003cb6:	4413      	add	r3, r2
 8003cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8003cba:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8003cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003cc6:	dd27      	ble.n	8003d18 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8003cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8003cd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8003cd8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8003d58 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8003cdc:	e001      	b.n	8003ce2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8003cde:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8003d60 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8003ce2:	eeb0 0b47 	vmov.f64	d0, d7
 8003ce6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003ce8:	f000 f914 	bl	8003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003cec:	e05d      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8003cee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8003cf6:	f000 f923 	bl	8003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003cfa:	eeb0 7b40 	vmov.f64	d7, d0
 8003cfe:	eeb1 7b47 	vneg.f64	d7, d7
 8003d02:	e003      	b.n	8003d0c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8003d04:	f000 f91c 	bl	8003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d08:	eeb0 7b40 	vmov.f64	d7, d0
 8003d0c:	eeb0 0b47 	vmov.f64	d0, d7
 8003d10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d12:	f000 f8ff 	bl	8003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d16:	e048      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8003d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fade 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ba      	bne.n	8003ca4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8003d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8003d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d38:	425b      	negs	r3, r3
 8003d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8003d3c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003d40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d42:	4413      	add	r3, r2
 8003d44:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8003d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8003d4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d50:	f000 f904 	bl	8003f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003d54:	e029      	b.n	8003daa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8003d56:	bf00      	nop
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	80000000 	.word	0x80000000
	...
 8003d68:	19999999 	.word	0x19999999
 8003d6c:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8003d70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d74:	f7fc fc9a 	bl	80006ac <__aeabi_ul2d>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003d7e:	ec43 2b10 	vmov	d0, r2, r3
 8003d82:	f000 f928 	bl	8003fd6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8003d86:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8003d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8003d92:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003d96:	eeb1 7b47 	vneg.f64	d7, d7
 8003d9a:	e001      	b.n	8003da0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8003d9c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003da0:	eeb0 0b47 	vmov.f64	d0, d7
 8003da4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003da6:	f000 f8b5 	bl	8003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8003daa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003dac:	3780      	adds	r7, #128	@ 0x80
 8003dae:	46bd      	mov	sp, r7
 8003db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003db4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    return _type;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7c1b      	ldrb	r3, [r3, #16]
  }
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e006      	b.n	8003dee <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fd02 	bl	80027ee <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003dea:	4603      	mov	r3, r0
 8003dec:	bf00      	nop
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8003e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e04:	f000 f937 	bl	8004076 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	e000      	b.n	8003e14 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8003e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e2a:	f000 f93c 	bl	80040a6 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	425b      	negs	r3, r3
 8003e38:	e000      	b.n	8003e3c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fda8 	bl	80039a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f92e 	bl	80040be <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 8003e62:	4603      	mov	r3, r0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8003e76:	f000 f950 	bl	800411a <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 8003e7a:	ee07 0a90 	vmov	s15, r0
 8003e7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 8003e82:	ed97 6b00 	vldr	d6, [r7]
 8003e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	db13      	blt.n	8003eb8 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 8003e90:	f000 f94b 	bl	800412a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8003e94:	ee07 0a90 	vmov	s15, r0
 8003e98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8003e9c:	ed97 6b00 	vldr	d6, [r7]
 8003ea0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	d806      	bhi.n	8003eb8 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 8003eaa:	ed97 7b00 	vldr	d7, [r7]
 8003eae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003eb2:	ee17 3a90 	vmov	r3, s15
 8003eb6:	e000      	b.n	8003eba <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 8003eb8:	2300      	movs	r3, #0
             : 0;
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	71bb      	strb	r3, [r7, #6]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8003ed4:	79ba      	ldrb	r2, [r7, #6]
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d805      	bhi.n	8003ee8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003edc:	79fa      	ldrb	r2, [r7, #7]
 8003ede:	797b      	ldrb	r3, [r7, #5]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d801      	bhi.n	8003ee8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8003ee8:	2300      	movs	r3, #0
  }
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8003efc:	2100      	movs	r1, #0
 8003efe:	4804      	ldr	r0, [pc, #16]	@ (8003f10 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8003f00:	f000 f91c 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f04:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003f08:	eeb0 0b47 	vmov.f64	d0, d7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	7ff80000 	.word	0x7ff80000

08003f14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	ed87 0b00 	vstr	d0, [r7]
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f26:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	741a      	strb	r2, [r3, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8003f44:	2100      	movs	r1, #0
 8003f46:	4804      	ldr	r0, [pc, #16]	@ (8003f58 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8003f48:	f000 f8f8 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f4c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003f50:	eeb0 0b47 	vmov.f64	d0, d7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	7ff00000 	.word	0x7ff00000

08003f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9c1 2300 	strd	r2, r3, [r1]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	741a      	strb	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa6:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8003faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fae:	f7fc fb7d 	bl	80006ac <__aeabi_ul2d>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8003fbc:	7e3b      	ldrb	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	e000      	b.n	8003fc8 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8003fc6:	2206      	movs	r2, #6
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	ed87 0b02 	vstr	d0, [r7, #8]
 8003fe0:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dd1d      	ble.n	8004024 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]
 8003fec:	e016      	b.n	800401c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f8c2 	bl	8004184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8004000:	eeb0 6b40 	vmov.f64	d6, d0
 8004004:	ed97 7b02 	vldr	d7, [r7, #8]
 8004008:	ee27 7b06 	vmul.f64	d7, d7, d6
 800400c:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	105b      	asrs	r3, r3, #1
 8004014:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	3301      	adds	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 8004022:	e01f      	b.n	8004064 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	425b      	negs	r3, r3
 8004028:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 800402a:	2300      	movs	r3, #0
 800402c:	75bb      	strb	r3, [r7, #22]
 800402e:	e016      	b.n	800405e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 800403a:	7dbb      	ldrb	r3, [r7, #22]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f905 	bl	800424c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8004042:	eeb0 6b40 	vmov.f64	d6, d0
 8004046:	ed97 7b02 	vldr	d7, [r7, #8]
 800404a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800404e:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	105b      	asrs	r3, r3, #1
 8004056:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004058:	7dbb      	ldrb	r3, [r7, #22]
 800405a:	3301      	adds	r3, #1
 800405c:	75bb      	strb	r3, [r7, #22]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8004064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004068:	ec43 2b17 	vmov	d7, r2, r3
  }
 800406c:	eeb0 0b47 	vmov.f64	d0, d7
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 8004076:	b5b0      	push	{r4, r5, r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004080:	f000 f853 	bl	800412a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8004084:	4603      	mov	r3, r0
 8004086:	2200      	movs	r2, #0
 8004088:	461c      	mov	r4, r3
 800408a:	4615      	mov	r5, r2
 800408c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004090:	4294      	cmp	r4, r2
 8004092:	eb75 0303 	sbcs.w	r3, r5, r3
 8004096:	bf2c      	ite	cs
 8004098:	2301      	movcs	r3, #1
 800409a:	2300      	movcc	r3, #0
 800409c:	b2db      	uxtb	r3, r3
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bdb0      	pop	{r4, r5, r7, pc}

080040a6 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
    switch (_type) {
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7c1b      	ldrb	r3, [r3, #16]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d017      	beq.n	80040fe <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	dc1e      	bgt.n	8004110 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d00a      	beq.n	80040ec <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 80040d6:	2b07      	cmp	r3, #7
 80040d8:	d11a      	bne.n	8004110 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7ff fe9a 	bl	8003e1c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 80040e8:	4603      	mov	r3, r0
 80040ea:	e012      	b.n	8004112 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7ff fe7e 	bl	8003df6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e009      	b.n	8004112 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	ed93 7b02 	vldr	d7, [r3, #8]
 8004104:	eeb0 0b47 	vmov.f64	d0, d7
 8004108:	f7ff feb0 	bl	8003e6c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 800410c:	4603      	mov	r3, r0
 800410e:	e000      	b.n	8004112 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8004110:	2300      	movs	r3, #0
  }
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
    return 0;
 800411e:	2300      	movs	r3, #0
  }
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
    return T(-1);
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	469a      	mov	sl, r3
 800414e:	4693      	mov	fp, r2
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	4653      	mov	r3, sl
 800415a:	2200      	movs	r2, #0
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	2000      	movs	r0, #0
 8004160:	460c      	mov	r4, r1
 8004162:	4605      	mov	r5, r0
 8004164:	ea42 0804 	orr.w	r8, r2, r4
 8004168:	ea43 0905 	orr.w	r9, r3, r5
 800416c:	4640      	mov	r0, r8
 800416e:	4649      	mov	r1, r9
 8004170:	f000 f912 	bl	8004398 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8004174:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004178:	eeb0 0b47 	vmov.f64	d0, d7
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 800418c:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3bf 8f5b 	dmb	ish
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d031      	beq.n	800420a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 80041a6:	481f      	ldr	r0, [pc, #124]	@ (8004224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80041a8:	f00e fe5a 	bl	8012e60 <__cxa_guard_acquire>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d026      	beq.n	800420a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 80041bc:	491a      	ldr	r1, [pc, #104]	@ (8004228 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 80041be:	481b      	ldr	r0, [pc, #108]	@ (800422c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 80041c0:	f7ff ffbc 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80041c4:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80041c8:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80041ca:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 80041ce:	4919      	ldr	r1, [pc, #100]	@ (8004234 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 80041d0:	4819      	ldr	r0, [pc, #100]	@ (8004238 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 80041d2:	f7ff ffb3 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80041d6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80041dc:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 80041e0:	4916      	ldr	r1, [pc, #88]	@ (800423c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 80041e2:	4817      	ldr	r0, [pc, #92]	@ (8004240 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 80041e4:	f7ff ffaa 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80041e8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80041ee:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 80041f2:	4914      	ldr	r1, [pc, #80]	@ (8004244 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 80041f4:	4814      	ldr	r0, [pc, #80]	@ (8004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 80041f6:	f7ff ffa1 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80041fa:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004200:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8004204:	4807      	ldr	r0, [pc, #28]	@ (8004224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004206:	f00e fe37 	bl	8012e78 <__cxa_guard_release>
    return factors[index];
 800420a:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	ec43 2b17 	vmov	d7, r2, r3
  }
 800421a:	eeb0 0b47 	vmov.f64	d0, d7
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2400068c 	.word	0x2400068c
 8004228:	b5056e17 	.word	0xb5056e17
 800422c:	4693b8b5 	.word	0x4693b8b5
 8004230:	24000010 	.word	0x24000010
 8004234:	e93ff9f5 	.word	0xe93ff9f5
 8004238:	4d384f03 	.word	0x4d384f03
 800423c:	f9301d32 	.word	0xf9301d32
 8004240:	5a827748 	.word	0x5a827748
 8004244:	7f73bf3c 	.word	0x7f73bf3c
 8004248:	75154fdd 	.word	0x75154fdd

0800424c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004254:	4b3c      	ldr	r3, [pc, #240]	@ (8004348 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3bf 8f5b 	dmb	ish
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d05e      	beq.n	800432c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 800426e:	4836      	ldr	r0, [pc, #216]	@ (8004348 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004270:	f00e fdf6 	bl	8012e60 <__cxa_guard_acquire>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf14      	ite	ne
 800427a:	2301      	movne	r3, #1
 800427c:	2300      	moveq	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d053      	beq.n	800432c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8004284:	4931      	ldr	r1, [pc, #196]	@ (800434c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 8004286:	4832      	ldr	r0, [pc, #200]	@ (8004350 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004288:	f7ff ff58 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800428c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004290:	4b30      	ldr	r3, [pc, #192]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004292:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8004296:	4930      	ldr	r1, [pc, #192]	@ (8004358 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 8004298:	4830      	ldr	r0, [pc, #192]	@ (800435c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 800429a:	f7ff ff4f 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800429e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042a4:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80042a8:	492d      	ldr	r1, [pc, #180]	@ (8004360 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80042aa:	482e      	ldr	r0, [pc, #184]	@ (8004364 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80042ac:	f7ff ff46 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042b0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042b6:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80042ba:	492b      	ldr	r1, [pc, #172]	@ (8004368 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80042bc:	482b      	ldr	r0, [pc, #172]	@ (800436c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80042be:	f7ff ff3d 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042c2:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042c6:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042c8:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 80042cc:	4928      	ldr	r1, [pc, #160]	@ (8004370 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 80042ce:	4829      	ldr	r0, [pc, #164]	@ (8004374 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 80042d0:	f7ff ff34 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042d4:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042da:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 80042de:	4926      	ldr	r1, [pc, #152]	@ (8004378 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 80042e0:	4826      	ldr	r0, [pc, #152]	@ (800437c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 80042e2:	f7ff ff2b 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042e6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042ec:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 80042f0:	4923      	ldr	r1, [pc, #140]	@ (8004380 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 80042f2:	4824      	ldr	r0, [pc, #144]	@ (8004384 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 80042f4:	f7ff ff22 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042f8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042fc:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042fe:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 8004302:	4921      	ldr	r1, [pc, #132]	@ (8004388 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8004304:	4821      	ldr	r0, [pc, #132]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8004306:	f7ff ff19 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800430a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004310:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8004314:	491e      	ldr	r1, [pc, #120]	@ (8004390 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8004316:	481f      	ldr	r0, [pc, #124]	@ (8004394 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004318:	f7ff ff10 	bl	800413c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800431c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004322:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8004326:	4808      	ldr	r0, [pc, #32]	@ (8004348 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004328:	f00e fda6 	bl	8012e78 <__cxa_guard_release>
    return factors[index];
 800432c:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	ec43 2b17 	vmov	d7, r2, r3
  }
 800433c:	eeb0 0b47 	vmov.f64	d0, d7
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	240006d8 	.word	0x240006d8
 800434c:	9999999a 	.word	0x9999999a
 8004350:	3fb99999 	.word	0x3fb99999
 8004354:	24000690 	.word	0x24000690
 8004358:	47ae147b 	.word	0x47ae147b
 800435c:	3f847ae1 	.word	0x3f847ae1
 8004360:	eb1c432d 	.word	0xeb1c432d
 8004364:	3f1a36e2 	.word	0x3f1a36e2
 8004368:	e2308c3a 	.word	0xe2308c3a
 800436c:	3e45798e 	.word	0x3e45798e
 8004370:	97d889bc 	.word	0x97d889bc
 8004374:	3c9cd2b2 	.word	0x3c9cd2b2
 8004378:	d5a8a733 	.word	0xd5a8a733
 800437c:	3949f623 	.word	0x3949f623
 8004380:	44f4a73d 	.word	0x44f4a73d
 8004384:	32a50ffd 	.word	0x32a50ffd
 8004388:	cf8c979d 	.word	0xcf8c979d
 800438c:	255bba08 	.word	0x255bba08
 8004390:	64ac6f43 	.word	0x64ac6f43
 8004394:	0ac80628 	.word	0x0ac80628

08004398 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80043a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80043aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80043b2:	eeb0 0b47 	vmov.f64	d0, d7
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d12e      	bne.n	800442e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d129      	bne.n	800442e <_Z41__static_initialization_and_destruction_0ii+0x6e>
std::string strJson;
 80043da:	481e      	ldr	r0, [pc, #120]	@ (8004454 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80043dc:	f00e fdf1 	bl	8012fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80043e0:	4622      	mov	r2, r4
 80043e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80043e6:	481c      	ldr	r0, [pc, #112]	@ (8004458 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80043e8:	f7fe fa18 	bl	800281c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe f9ed 	bl	80027d0 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80043f6:	4b19      	ldr	r3, [pc, #100]	@ (800445c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe f9e5 	bl	80027d0 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 800440c:	2120      	movs	r1, #32
 800440e:	f44f 7008 	mov.w	r0, #544	@ 0x220
 8004412:	f00e fd45 	bl	8012ea0 <_ZnwjSt11align_val_t>
 8004416:	4603      	mov	r3, r0
 8004418:	461c      	mov	r4, r3
 800441a:	4b12      	ldr	r3, [pc, #72]	@ (8004464 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004424:	4620      	mov	r0, r4
 8004426:	f000 fc09 	bl	8004c3c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800442a:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800442c:	601c      	str	r4, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <_Z41__static_initialization_and_destruction_0ii+0x8a>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800443a:	4293      	cmp	r3, r2
 800443c:	d105      	bne.n	800444a <_Z41__static_initialization_and_destruction_0ii+0x8a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 800443e:	4806      	ldr	r0, [pc, #24]	@ (8004458 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004440:	f000 f818 	bl	8004474 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 8004444:	4803      	ldr	r0, [pc, #12]	@ (8004454 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004446:	f00e fdc3 	bl	8012fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	24000524 	.word	0x24000524
 8004458:	24000540 	.word	0x24000540
 800445c:	24000568 	.word	0x24000568
 8004460:	24000570 	.word	0x24000570
 8004464:	24000008 	.word	0x24000008
 8004468:	2400000c 	.word	0x2400000c
 800446c:	40013000 	.word	0x40013000
 8004470:	24000578 	.word	0x24000578

08004474 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    freePool();
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f805 	bl	800448c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8004494:	687c      	ldr	r4, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3308      	adds	r3, #8
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fe89 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc fc15 	bl	8000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4619      	mov	r1, r3
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 f804 	bl	80044ba <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd90      	pop	{r4, r7, pc}

080044ba <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fc feb3 	bl	8001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 80044d6:	b580      	push	{r7, lr}
 80044d8:	af00      	add	r7, sp, #0
 80044da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80044de:	2001      	movs	r0, #1
 80044e0:	f7ff ff6e 	bl	80043c0 <_Z41__static_initialization_and_destruction_0ii>
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 80044e6:	b580      	push	{r7, lr}
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80044ee:	2000      	movs	r0, #0
 80044f0:	f7ff ff66 	bl	80043c0 <_Z41__static_initialization_and_destruction_0ii>
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_MspInit+0x30>)
 8004500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004504:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <HAL_MspInit+0x30>)
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_MspInit+0x30>)
 8004510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	58024400 	.word	0x58024400

0800452c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b0bc      	sub	sp, #240	@ 0xf0
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004544:	f107 0318 	add.w	r3, r7, #24
 8004548:	22c0      	movs	r2, #192	@ 0xc0
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f00f f997 	bl	8013880 <memset>
  if(hsd->Instance==SDMMC1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3c      	ldr	r2, [pc, #240]	@ (8004648 <HAL_SD_MspInit+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d171      	bne.n	8004640 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800455c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8004568:	2300      	movs	r3, #0
 800456a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800456c:	f107 0318 	add.w	r3, r7, #24
 8004570:	4618      	mov	r0, r3
 8004572:	f005 faf7 	bl	8009b64 <HAL_RCCEx_PeriphCLKConfig>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800457c:	f7fe f8d6 	bl	800272c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004580:	4b32      	ldr	r3, [pc, #200]	@ (800464c <HAL_SD_MspInit+0x120>)
 8004582:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004586:	4a31      	ldr	r2, [pc, #196]	@ (800464c <HAL_SD_MspInit+0x120>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004590:	4b2e      	ldr	r3, [pc, #184]	@ (800464c <HAL_SD_MspInit+0x120>)
 8004592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459e:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a4:	4a29      	ldr	r2, [pc, #164]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045ae:	4b27      	ldr	r3, [pc, #156]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045bc:	4b23      	ldr	r3, [pc, #140]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045c2:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045cc:	4b1f      	ldr	r3, [pc, #124]	@ (800464c <HAL_SD_MspInit+0x120>)
 80045ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80045da:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80045de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ee:	2303      	movs	r3, #3
 80045f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80045f4:	230c      	movs	r3, #12
 80045f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80045fe:	4619      	mov	r1, r3
 8004600:	4813      	ldr	r0, [pc, #76]	@ (8004650 <HAL_SD_MspInit+0x124>)
 8004602:	f004 f8df 	bl	80087c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004606:	2304      	movs	r3, #4
 8004608:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004618:	2303      	movs	r3, #3
 800461a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800461e:	230c      	movs	r3, #12
 8004620:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004624:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004628:	4619      	mov	r1, r3
 800462a:	480a      	ldr	r0, [pc, #40]	@ (8004654 <HAL_SD_MspInit+0x128>)
 800462c:	f004 f8ca 	bl	80087c4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004630:	2200      	movs	r2, #0
 8004632:	2100      	movs	r1, #0
 8004634:	2031      	movs	r0, #49	@ 0x31
 8004636:	f001 fc12 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800463a:	2031      	movs	r0, #49	@ 0x31
 800463c:	f001 fc29 	bl	8005e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004640:	bf00      	nop
 8004642:	37f0      	adds	r7, #240	@ 0xf0
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	52007000 	.word	0x52007000
 800464c:	58024400 	.word	0x58024400
 8004650:	58020800 	.word	0x58020800
 8004654:	58020c00 	.word	0x58020c00

08004658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b0ba      	sub	sp, #232	@ 0xe8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	22c0      	movs	r2, #192	@ 0xc0
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f00f f901 	bl	8013880 <memset>
  if(huart->Instance==USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <HAL_UART_MspInit+0xc8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d146      	bne.n	8004716 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004688:	f04f 0201 	mov.w	r2, #1
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f005 fa60 	bl	8009b64 <HAL_RCCEx_PeriphCLKConfig>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80046aa:	f7fe f83f 	bl	800272c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046b6:	f043 0310 	orr.w	r3, r3, #16
 80046ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046be:	4b19      	ldr	r3, [pc, #100]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046cc:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d2:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <HAL_UART_MspInit+0xcc>)
 80046de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004704:	2307      	movs	r3, #7
 8004706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800470e:	4619      	mov	r1, r3
 8004710:	4805      	ldr	r0, [pc, #20]	@ (8004728 <HAL_UART_MspInit+0xd0>)
 8004712:	f004 f857 	bl	80087c4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004716:	bf00      	nop
 8004718:	37e8      	adds	r7, #232	@ 0xe8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40011000 	.word	0x40011000
 8004724:	58024400 	.word	0x58024400
 8004728:	58020000 	.word	0x58020000

0800472c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <NMI_Handler+0x4>

08004734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <HardFault_Handler+0x4>

0800473c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <MemManage_Handler+0x4>

08004744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <BusFault_Handler+0x4>

0800474c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <UsageFault_Handler+0x4>

08004754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004782:	f001 fa2b 	bl	8005bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004790:	4802      	ldr	r0, [pc, #8]	@ (800479c <SDMMC1_IRQHandler+0x10>)
 8004792:	f008 f955 	bl	800ca40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2400057c 	.word	0x2400057c

080047a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	return 1;
 80047a4:	2301      	movs	r3, #1
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <_kill>:

int _kill(int pid, int sig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047ba:	f00f f903 	bl	80139c4 <__errno>
 80047be:	4603      	mov	r3, r0
 80047c0:	2216      	movs	r2, #22
 80047c2:	601a      	str	r2, [r3, #0]
	return -1;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_exit>:

void _exit (int status)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047d8:	f04f 31ff 	mov.w	r1, #4294967295
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ffe7 	bl	80047b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <_exit+0x12>

080047e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e00a      	b.n	800480e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047f8:	f3af 8000 	nop.w
 80047fc:	4601      	mov	r1, r0
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	60ba      	str	r2, [r7, #8]
 8004804:	b2ca      	uxtb	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3301      	adds	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	dbf0      	blt.n	80047f8 <_read+0x12>
	}

return len;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e009      	b.n	8004846 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	60ba      	str	r2, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fc ffa8 	bl	8001790 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	dbf1      	blt.n	8004832 <_write+0x12>
	}
	return len;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_close>:

int _close(int file)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	return -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004880:	605a      	str	r2, [r3, #4]
	return 0;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_isatty>:

int _isatty(int file)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	return 1;
 8004898:	2301      	movs	r3, #1
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
	return 0;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048c8:	4a14      	ldr	r2, [pc, #80]	@ (800491c <_sbrk+0x5c>)
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <_sbrk+0x60>)
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048d4:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <_sbrk+0x64>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <_sbrk+0x64>)
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <_sbrk+0x68>)
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <_sbrk+0x64>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d207      	bcs.n	8004900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048f0:	f00f f868 	bl	80139c4 <__errno>
 80048f4:	4603      	mov	r3, r0
 80048f6:	220c      	movs	r2, #12
 80048f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295
 80048fe:	e009      	b.n	8004914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004900:	4b08      	ldr	r3, [pc, #32]	@ (8004924 <_sbrk+0x64>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <_sbrk+0x64>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	4a05      	ldr	r2, [pc, #20]	@ (8004924 <_sbrk+0x64>)
 8004910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	24080000 	.word	0x24080000
 8004920:	00000400 	.word	0x00000400
 8004924:	240006dc 	.word	0x240006dc
 8004928:	24000ef0 	.word	0x24000ef0

0800492c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004930:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <SystemInit+0xe4>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004936:	4a36      	ldr	r2, [pc, #216]	@ (8004a10 <SystemInit+0xe4>)
 8004938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800493c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004940:	4b34      	ldr	r3, [pc, #208]	@ (8004a14 <SystemInit+0xe8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	2b06      	cmp	r3, #6
 800494a:	d807      	bhi.n	800495c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800494c:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <SystemInit+0xe8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 030f 	bic.w	r3, r3, #15
 8004954:	4a2f      	ldr	r2, [pc, #188]	@ (8004a14 <SystemInit+0xe8>)
 8004956:	f043 0307 	orr.w	r3, r3, #7
 800495a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800495c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a18 <SystemInit+0xec>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2d      	ldr	r2, [pc, #180]	@ (8004a18 <SystemInit+0xec>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <SystemInit+0xec>)
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800496e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <SystemInit+0xec>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4929      	ldr	r1, [pc, #164]	@ (8004a18 <SystemInit+0xec>)
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <SystemInit+0xf0>)
 8004976:	4013      	ands	r3, r2
 8004978:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800497a:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <SystemInit+0xe8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004986:	4b23      	ldr	r3, [pc, #140]	@ (8004a14 <SystemInit+0xe8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 030f 	bic.w	r3, r3, #15
 800498e:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <SystemInit+0xe8>)
 8004990:	f043 0307 	orr.w	r3, r3, #7
 8004994:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004996:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <SystemInit+0xec>)
 8004998:	2200      	movs	r2, #0
 800499a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <SystemInit+0xec>)
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80049a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <SystemInit+0xec>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80049a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <SystemInit+0xec>)
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <SystemInit+0xf4>)
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <SystemInit+0xec>)
 80049b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <SystemInit+0xf8>)
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80049b4:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <SystemInit+0xec>)
 80049b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <SystemInit+0xfc>)
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <SystemInit+0xec>)
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80049c0:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <SystemInit+0xec>)
 80049c2:	4a19      	ldr	r2, [pc, #100]	@ (8004a28 <SystemInit+0xfc>)
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <SystemInit+0xec>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80049cc:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <SystemInit+0xec>)
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <SystemInit+0xfc>)
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <SystemInit+0xec>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <SystemInit+0xec>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <SystemInit+0xec>)
 80049de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <SystemInit+0xec>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <SystemInit+0x100>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <SystemInit+0x104>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049f6:	d202      	bcs.n	80049fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <SystemInit+0x108>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <SystemInit+0x10c>)
 8004a00:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004a04:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000ed00 	.word	0xe000ed00
 8004a14:	52002000 	.word	0x52002000
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a20:	02020200 	.word	0x02020200
 8004a24:	01ff0000 	.word	0x01ff0000
 8004a28:	01010280 	.word	0x01010280
 8004a2c:	5c001000 	.word	0x5c001000
 8004a30:	ffff0000 	.word	0xffff0000
 8004a34:	51008108 	.word	0x51008108
 8004a38:	52004000 	.word	0x52004000

08004a3c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	4a08      	ldr	r2, [pc, #32]	@ (8004a68 <_ZN6ModuleC1Ev+0x2c>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004a56:	4805      	ldr	r0, [pc, #20]	@ (8004a6c <_ZN6ModuleC1Ev+0x30>)
 8004a58:	f00e fe18 	bl	801368c <puts>
}
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	080149b4 	.word	0x080149b4
 8004a6c:	080147c8 	.word	0x080147c8

08004a70 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <_ZN6ModuleD1Ev+0x1c>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	080149b4 	.word	0x080149b4

08004a90 <_ZN6ModuleD0Ev>:
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ffe9 	bl	8004a70 <_ZN6ModuleD1Ev>
 8004a9e:	2114      	movs	r1, #20
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f00e f9d8 	bl	8012e56 <_ZdlPvj>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	++this->counter;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	db08      	blt.n	8004ae0 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
		this->counter = 0;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN6Module6updateEv>:

void Module::update(){}
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <_ZN6Module9configureEv>:
void Module::configure(){}
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 8004b74:	b082      	sub	sp, #8
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	460b      	mov	r3, r1
 8004b84:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb ff51 	bl	8000a30 <_ZN9InterruptC1Ev>
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	f107 021c 	add.w	r2, r7, #28
 8004ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ba6:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8004baa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb ff4c 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc4:	b002      	add	sp, #8
 8004bc6:	4770      	bx	lr
 8004bc8:	080149d8 	.word	0x080149d8

08004bcc <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02a      	beq.n	8004c32 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d01b      	beq.n	8004c32 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	e00a      	b.n	8004c22 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68d2      	ldr	r2, [r2, #12]
 8004c14:	1052      	asrs	r2, r2, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	4413      	add	r3, r2
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6852      	ldr	r2, [r2, #4]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68c9      	ldr	r1, [r1, #12]
 8004c2a:	1049      	asrs	r1, r1, #1
 8004c2c:	440a      	add	r2, r1
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4798      	blx	r3
    }
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>


RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fef5 	bl	8004a3c <_ZN6ModuleC1Ev>
 8004c52:	4a0f      	ldr	r2, [pc, #60]	@ (8004c90 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x54>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    this->irqNss = EXTI4_IRQn;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	220a      	movs	r2, #10
 8004c76:	869a      	strh	r2, [r3, #52]	@ 0x34
    this->irqDMAtx = DMA1_Stream0_IRQn;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	220b      	movs	r2, #11
 8004c7c:	871a      	strh	r2, [r3, #56]	@ 0x38
    this->irqDMArx = DMA1_Stream1_IRQn;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	220c      	movs	r2, #12
 8004c82:	86da      	strh	r2, [r3, #54]	@ 0x36

    // the constructor is called before any DMA and cache setup
    // don't do stuff here
}
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	080149e4 	.word	0x080149e4

08004c94 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b093      	sub	sp, #76	@ 0x4c
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	4aba      	ldr	r2, [pc, #744]	@ (8004f9c <_ZN11RemoraComms4initEv+0x308>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f040 8198 	bne.w	8004fe8 <_ZN11RemoraComms4initEv+0x354>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb8:	4bb9      	ldr	r3, [pc, #740]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cbe:	4ab8      	ldr	r2, [pc, #736]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cc8:	4bb5      	ldr	r3, [pc, #724]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004cde:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	4619      	mov	r1, r3
 8004cea:	48ae      	ldr	r0, [pc, #696]	@ (8004fa4 <_ZN11RemoraComms4initEv+0x310>)
 8004cec:	f003 fd6a 	bl	80087c4 <HAL_GPIO_Init>

        NssInterrupt = new ModuleInterrupt(this->irqNss, this, static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt));
 8004cf0:	2010      	movs	r0, #16
 8004cf2:	f00e f8c4 	bl	8012e7e <_Znwj>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461c      	mov	r4, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f9b3 1034 	ldrsh.w	r1, [r3, #52]	@ 0x34
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4ba9      	ldr	r3, [pc, #676]	@ (8004fa8 <_ZN11RemoraComms4initEv+0x314>)
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7ff ff2f 	bl	8004b74 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	629c      	str	r4, [r3, #40]	@ 0x28
    	HAL_NVIC_SetPriority(this->irqNss, 6, 0);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8004d20:	2200      	movs	r2, #0
 8004d22:	2106      	movs	r1, #6
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 f89a 	bl	8005e5e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irqNss);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f8ae 	bl	8005e92 <HAL_NVIC_EnableIRQ>


        printf("	Initialising SPI1 slave\n");
 8004d36:	489d      	ldr	r0, [pc, #628]	@ (8004fac <_ZN11RemoraComms4initEv+0x318>)
 8004d38:	f00e fca8 	bl	801368c <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2207      	movs	r2, #7
 8004d4c:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	651a      	str	r2, [r3, #80]	@ 0x50
        //this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
        this->spiHandle.Init.NSS            		= SPI_NSS_SOFT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        HAL_SPI_Init(&this->spiHandle);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	333c      	adds	r3, #60	@ 0x3c
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f009 f82e 	bl	800de28 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8004dcc:	4b74      	ldr	r3, [pc, #464]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dd2:	4a73      	ldr	r2, [pc, #460]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004dd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ddc:	4b70      	ldr	r3, [pc, #448]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8004dea:	4871      	ldr	r0, [pc, #452]	@ (8004fb0 <_ZN11RemoraComms4initEv+0x31c>)
 8004dec:	f00e fc4e 	bl	801368c <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df0:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004df6:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e00:	4b67      	ldr	r3, [pc, #412]	@ (8004fa0 <_ZN11RemoraComms4initEv+0x30c>)
 8004e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	60da      	str	r2, [r3, #12]
 8004e1c:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e1e:	23f0      	movs	r3, #240	@ 0xf0
 8004e20:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e2e:	2305      	movs	r3, #5
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e32:	f107 0314 	add.w	r3, r7, #20
 8004e36:	4619      	mov	r1, r3
 8004e38:	485a      	ldr	r0, [pc, #360]	@ (8004fa4 <_ZN11RemoraComms4initEv+0x310>)
 8004e3a:	f003 fcc3 	bl	80087c4 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8004e3e:	485d      	ldr	r0, [pc, #372]	@ (8004fb4 <_ZN11RemoraComms4initEv+0x320>)
 8004e40:	f00e fc24 	bl	801368c <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a5c      	ldr	r2, [pc, #368]	@ (8004fb8 <_ZN11RemoraComms4initEv+0x324>)
 8004e48:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2225      	movs	r2, #37	@ 0x25
 8004e50:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e6a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        //this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
        this->hdma_spi_rx.Init.Mode 				= DMA_NORMAL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        HAL_DMA_Init(&this->hdma_spi_rx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f88f 	bl	8005fc0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 729e 	add.w	r2, r3, #316	@ 0x13c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
 8004eba:	2010      	movs	r0, #16
 8004ebc:	f00d ffdf 	bl	8012e7e <_Znwj>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	@ 0x36
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fbc <_ZN11RemoraComms4initEv+0x328>)
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff fe4a 	bl	8004b74 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631c      	str	r4, [r3, #48]	@ 0x30
    	HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8004eea:	2200      	movs	r2, #0
 8004eec:	2105      	movs	r1, #5
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 ffb5 	bl	8005e5e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irqDMArx);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 ffc9 	bl	8005e92 <HAL_NVIC_EnableIRQ>

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc0 <_ZN11RemoraComms4initEv+0x32c>)
 8004f04:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2226      	movs	r2, #38	@ 0x26
 8004f0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	@ 0x40
 8004f14:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f26:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        //this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
        this->hdma_spi_tx.Init.Mode 				= DMA_NORMAL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

        HAL_DMA_Init(&this->hdma_spi_tx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	33c4      	adds	r3, #196	@ 0xc4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f832 	bl	8005fc0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
 8004f74:	2010      	movs	r0, #16
 8004f76:	f00d ff82 	bl	8012e7e <_Znwj>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461c      	mov	r4, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f9b3 1038 	ldrsh.w	r1, [r3, #56]	@ 0x38
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <_ZN11RemoraComms4initEv+0x330>)
 8004f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff fded 	bl	8004b74 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004f9a:	e015      	b.n	8004fc8 <_ZN11RemoraComms4initEv+0x334>
 8004f9c:	40013000 	.word	0x40013000
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	58020000 	.word	0x58020000
 8004fa8:	08005251 	.word	0x08005251
 8004fac:	08014820 	.word	0x08014820
 8004fb0:	0801483c 	.word	0x0801483c
 8004fb4:	08014858 	.word	0x08014858
 8004fb8:	40020028 	.word	0x40020028
 8004fbc:	08005477 	.word	0x08005477
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	08005449 	.word	0x08005449
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62dc      	str	r4, [r3, #44]	@ 0x2c
        HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ff41 	bl	8005e5e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 ff55 	bl	8005e92 <HAL_NVIC_EnableIRQ>
    }
}
 8004fe8:	bf00      	nop
 8004fea:	3744      	adds	r7, #68	@ 0x44
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}

08004ff0 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	@ 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	txPingPongBuffer.txBuffers[0].header =  PRU_DATA;
 8004ff8:	4b54      	ldr	r3, [pc, #336]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 8004ffa:	4a55      	ldr	r2, [pc, #340]	@ (8005150 <_ZN11RemoraComms5startEv+0x160>)
 8004ffc:	601a      	str	r2, [r3, #0]
	txPingPongBuffer.txBuffers[1].header =  PRU_DATA;
 8004ffe:	4b53      	ldr	r3, [pc, #332]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 8005000:	4a53      	ldr	r2, [pc, #332]	@ (8005150 <_ZN11RemoraComms5startEv+0x160>)
 8005002:	641a      	str	r2, [r3, #64]	@ 0x40

	txPingPongBuffer.currentTxBuffer = 0;
 8005004:	4b51      	ldr	r3, [pc, #324]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	rxPingPongBuffer.currentRxBuffer = 0;
 800500c:	4b51      	ldr	r3, [pc, #324]	@ (8005154 <_ZN11RemoraComms5startEv+0x164>)
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)&txPingPongBuffer.txBuffers[0]) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8005014:	4b4d      	ldr	r3, [pc, #308]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 8005016:	f023 031f 	bic.w	r3, r3, #31
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	2340      	movs	r3, #64	@ 0x40
 800501e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	dd1d      	ble.n	8005062 <_ZN11RemoraComms5startEv+0x72>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005036:	f3bf 8f4f 	dsb	sy
}
 800503a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800503c:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <_ZN11RemoraComms5startEv+0x168>)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	3320      	adds	r3, #32
 8005048:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b20      	subs	r3, #32
 800504e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dcf2      	bgt.n	800503c <_ZN11RemoraComms5startEv+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005056:	f3bf 8f4f 	dsb	sy
}
 800505a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800505c:	f3bf 8f6f 	isb	sy
}
 8005060:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005062:	bf00      	nop
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)&txPingPongBuffer.txBuffers[1]) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8005064:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <_ZN11RemoraComms5startEv+0x16c>)
 8005066:	f023 031f 	bic.w	r3, r3, #31
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	2340      	movs	r3, #64	@ 0x40
 800506e:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd1d      	ble.n	80050b2 <_ZN11RemoraComms5startEv+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	4413      	add	r3, r2
 8005080:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8005086:	f3bf 8f4f 	dsb	sy
}
 800508a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800508c:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <_ZN11RemoraComms5startEv+0x168>)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	3320      	adds	r3, #32
 8005098:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3b20      	subs	r3, #32
 800509e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dcf2      	bgt.n	800508c <_ZN11RemoraComms5startEv+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80050a6:	f3bf 8f4f 	dsb	sy
}
 80050aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050ac:	f3bf 8f6f 	isb	sy
}
 80050b0:	bf00      	nop
}
 80050b2:	bf00      	nop

	printf("txBuffers[0].header = 0x%x\n", txPingPongBuffer.txBuffers[0].header);
 80050b4:	4b25      	ldr	r3, [pc, #148]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4829      	ldr	r0, [pc, #164]	@ (8005160 <_ZN11RemoraComms5startEv+0x170>)
 80050bc:	f00e fa76 	bl	80135ac <iprintf>
	printf("txBuffers[1].header = 0x%x\n", txPingPongBuffer.txBuffers[1].header);
 80050c0:	4b22      	ldr	r3, [pc, #136]	@ (800514c <_ZN11RemoraComms5startEv+0x15c>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	4619      	mov	r1, r3
 80050c6:	4827      	ldr	r0, [pc, #156]	@ (8005164 <_ZN11RemoraComms5startEv+0x174>)
 80050c8:	f00e fa70 	bl	80135ac <iprintf>
    // Alternate buffer: used by DMA comms
    //txBuffer = getAltTxBuffer(&txPingPongBuffer);
    //txBuffer->header = PRU_DATA;
    //SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);

    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 80050cc:	4821      	ldr	r0, [pc, #132]	@ (8005154 <_ZN11RemoraComms5startEv+0x164>)
 80050ce:	f7fd f8f3 	bl	80022b8 <_Z14getAltRxBufferP16RxPingPongBuffer>
 80050d2:	4602      	mov	r2, r0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 031f 	bic.w	r3, r3, #31
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e2:	2340      	movs	r3, #64	@ 0x40
 80050e4:	633b      	str	r3, [r7, #48]	@ 0x30
    if ( dsize > 0 ) { 
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd1d      	ble.n	8005128 <_ZN11RemoraComms5startEv+0x138>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80050ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ee:	f003 021f 	and.w	r2, r3, #31
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	4413      	add	r3, r2
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80050f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 80050fc:	f3bf 8f4f 	dsb	sy
}
 8005100:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005102:	4a15      	ldr	r2, [pc, #84]	@ (8005158 <_ZN11RemoraComms5startEv+0x168>)
 8005104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005106:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	3320      	adds	r3, #32
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005112:	3b20      	subs	r3, #32
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      } while ( op_size > 0 );
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	dcf2      	bgt.n	8005102 <_ZN11RemoraComms5startEv+0x112>
  __ASM volatile ("dsb 0xF":::"memory");
 800511c:	f3bf 8f4f 	dsb	sy
}
 8005120:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005122:	f3bf 8f6f 	isb	sy
}
 8005126:	bf00      	nop
}
 8005128:	bf00      	nop

    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	4619      	mov	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	461a      	mov	r2, r3
 800513c:	2340      	movs	r3, #64	@ 0x40
 800513e:	f008 ffa1 	bl	800e084 <HAL_SPI_TransmitReceive_DMA>
}
 8005142:	bf00      	nop
 8005144:	3738      	adds	r7, #56	@ 0x38
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	24000400 	.word	0x24000400
 8005150:	64617461 	.word	0x64617461
 8005154:	24000360 	.word	0x24000360
 8005158:	e000ed00 	.word	0xe000ed00
 800515c:	24000440 	.word	0x24000440
 8005160:	08014874 	.word	0x08014874
 8005164:	08014890 	.word	0x08014890

08005168 <_ZN11RemoraComms11swapBuffersEv>:


void RemoraComms::swapBuffers()
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	@ 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005170:	b672      	cpsid	i
}
 8005172:	bf00      	nop
    __disable_irq();
    swapTxBuffers(&txPingPongBuffer);
 8005174:	4833      	ldr	r0, [pc, #204]	@ (8005244 <_ZN11RemoraComms11swapBuffersEv+0xdc>)
 8005176:	f7fd f87d 	bl	8002274 <_Z13swapTxBuffersP16TxPingPongBuffer>
  __ASM volatile ("cpsie i" : : : "memory");
 800517a:	b662      	cpsie	i
}
 800517c:	bf00      	nop
    __enable_irq();
    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 800517e:	4832      	ldr	r0, [pc, #200]	@ (8005248 <_ZN11RemoraComms11swapBuffersEv+0xe0>)
 8005180:	f7fd f89a 	bl	80022b8 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 800518a:	482e      	ldr	r0, [pc, #184]	@ (8005244 <_ZN11RemoraComms11swapBuffersEv+0xdc>)
 800518c:	f7fd f8a6 	bl	80022dc <_Z14getAltTxBufferP16TxPingPongBuffer>
 8005190:	4602      	mov	r2, r0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	625a      	str	r2, [r3, #36]	@ 0x24
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 031f 	bic.w	r3, r3, #31
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	2340      	movs	r3, #64	@ 0x40
 80051a2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dd1d      	ble.n	80051e6 <_ZN11RemoraComms11swapBuffersEv+0x7e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80051ba:	f3bf 8f4f 	dsb	sy
}
 80051be:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80051c0:	4a22      	ldr	r2, [pc, #136]	@ (800524c <_ZN11RemoraComms11swapBuffersEv+0xe4>)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3320      	adds	r3, #32
 80051cc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b20      	subs	r3, #32
 80051d2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	dcf2      	bgt.n	80051c0 <_ZN11RemoraComms11swapBuffersEv+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 80051da:	f3bf 8f4f 	dsb	sy
}
 80051de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051e0:	f3bf 8f6f 	isb	sy
}
 80051e4:	bf00      	nop
}
 80051e6:	bf00      	nop
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f023 031f 	bic.w	r3, r3, #31
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f2:	2340      	movs	r3, #64	@ 0x40
 80051f4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dd1d      	ble.n	8005238 <_ZN11RemoraComms11swapBuffersEv+0xd0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	f003 021f 	and.w	r2, r3, #31
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	4413      	add	r3, r2
 8005206:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800520c:	f3bf 8f4f 	dsb	sy
}
 8005210:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005212:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <_ZN11RemoraComms11swapBuffersEv+0xe4>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3320      	adds	r3, #32
 800521e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3b20      	subs	r3, #32
 8005224:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dcf2      	bgt.n	8005212 <_ZN11RemoraComms11swapBuffersEv+0xaa>
  __ASM volatile ("dsb 0xF":::"memory");
 800522c:	f3bf 8f4f 	dsb	sy
}
 8005230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005232:	f3bf 8f6f 	isb	sy
}
 8005236:	bf00      	nop
}
 8005238:	bf00      	nop
}
 800523a:	bf00      	nop
 800523c:	3728      	adds	r7, #40	@ 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	24000400 	.word	0x24000400
 8005248:	24000360 	.word	0x24000360
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <_ZN11RemoraComms18handleNssInterruptEv>:

void RemoraComms::handleNssInterrupt()
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	@ 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

    // Stop the previous DMA transfer
    HAL_DMA_Abort(this->spiHandle.hdmarx);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fc74 	bl	8006b4c <HAL_DMA_Abort>
    HAL_DMA_Abort(this->spiHandle.hdmatx);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fc6e 	bl	8006b4c <HAL_DMA_Abort>

	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fe0b 	bl	8005e92 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(this->irqDMArx);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fe05 	bl	8005e92 <HAL_NVIC_EnableIRQ>

	if (this->dmaRx != true && this->dmaTx != true)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800528e:	2b01      	cmp	r3, #1
 8005290:	d00f      	beq.n	80052b2 <_ZN11RemoraComms18handleNssInterruptEv+0x62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00a      	beq.n	80052b2 <_ZN11RemoraComms18handleNssInterruptEv+0x62>
	{
		// DMA should have been handled by now
		this->dmaRx = false;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		this->dmaTx = false;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
		printf("err\n");
 80052ac:	485d      	ldr	r0, [pc, #372]	@ (8005424 <_ZN11RemoraComms18handleNssInterruptEv+0x1d4>)
 80052ae:	f00e f9ed 	bl	801368c <puts>
		//return;
	}

	this->dmaRx = false;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	this->dmaTx = false;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

    // Get alternative buffers
    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 80052c2:	4859      	ldr	r0, [pc, #356]	@ (8005428 <_ZN11RemoraComms18handleNssInterruptEv+0x1d8>)
 80052c4:	f7fc fff8 	bl	80022b8 <_Z14getAltRxBufferP16RxPingPongBuffer>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 80052ce:	4857      	ldr	r0, [pc, #348]	@ (800542c <_ZN11RemoraComms18handleNssInterruptEv+0x1dc>)
 80052d0:	f7fd f804 	bl	80022dc <_Z14getAltTxBufferP16TxPingPongBuffer>
 80052d4:	4602      	mov	r2, r0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	625a      	str	r2, [r3, #36]	@ 0x24

    // Define aligned buffer addresses for DCache operations
    uint32_t* alignedRxBuffer = (uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 031f 	bic.w	r3, r3, #31
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t* alignedTxBuffer = (uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	f023 031f 	bic.w	r3, r3, #31
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dd1d      	ble.n	8005338 <_ZN11RemoraComms18handleNssInterruptEv+0xe8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	f003 021f 	and.w	r2, r3, #31
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	4413      	add	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800530c:	f3bf 8f4f 	dsb	sy
}
 8005310:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005312:	4a47      	ldr	r2, [pc, #284]	@ (8005430 <_ZN11RemoraComms18handleNssInterruptEv+0x1e0>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	3320      	adds	r3, #32
 800531e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3b20      	subs	r3, #32
 8005324:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	dcf2      	bgt.n	8005312 <_ZN11RemoraComms18handleNssInterruptEv+0xc2>
  __ASM volatile ("dsb 0xF":::"memory");
 800532c:	f3bf 8f4f 	dsb	sy
}
 8005330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005332:	f3bf 8f6f 	isb	sy
}
 8005336:	bf00      	nop
}
 8005338:	bf00      	nop

    // Invalidate the DCache for the received buffer
    SCB_InvalidateDCache_by_Addr(alignedRxBuffer, BUFFER_ALIGNED_SIZE);

    // Handle different PRU header values
    switch (rxBuffer->header)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3c      	ldr	r2, [pc, #240]	@ (8005434 <_ZN11RemoraComms18handleNssInterruptEv+0x1e4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <_ZN11RemoraComms18handleNssInterruptEv+0xfe>
 8005346:	4a3c      	ldr	r2, [pc, #240]	@ (8005438 <_ZN11RemoraComms18handleNssInterruptEv+0x1e8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d008      	beq.n	800535e <_ZN11RemoraComms18handleNssInterruptEv+0x10e>
 800534c:	e012      	b.n	8005374 <_ZN11RemoraComms18handleNssInterruptEv+0x124>
    {
        case PRU_READ:
            // Data is good, no buffer swap needed
        	printf("r\n");
 800534e:	483b      	ldr	r0, [pc, #236]	@ (800543c <_ZN11RemoraComms18handleNssInterruptEv+0x1ec>)
 8005350:	f00e f99c 	bl	801368c <puts>
            this->SPIdata = true;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
            break;
 800535c:	e01f      	b.n	800539e <_ZN11RemoraComms18handleNssInterruptEv+0x14e>

        case PRU_WRITE:
            // Good data, swap the RX buffer
        	this->swapBuffers();
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ff02 	bl	8005168 <_ZN11RemoraComms11swapBuffersEv>
            printf("w\n");
 8005364:	4836      	ldr	r0, [pc, #216]	@ (8005440 <_ZN11RemoraComms18handleNssInterruptEv+0x1f0>)
 8005366:	f00e f991 	bl	801368c <puts>
            this->SPIdata = true;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
            break;
 8005372:	e014      	b.n	800539e <_ZN11RemoraComms18handleNssInterruptEv+0x14e>

        default:
            // Invalid data, increment reject count
        	printf("e\n");
 8005374:	4833      	ldr	r0, [pc, #204]	@ (8005444 <_ZN11RemoraComms18handleNssInterruptEv+0x1f4>)
 8005376:	f00e f989 	bl	801368c <puts>
            this->rejectCnt++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005380:	3301      	adds	r3, #1
 8005382:	b2da      	uxtb	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
            if (this->rejectCnt > 5)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005390:	2b05      	cmp	r3, #5
 8005392:	d903      	bls.n	800539c <_ZN11RemoraComms18handleNssInterruptEv+0x14c>
            {
                this->SPIdataError = true;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
            }
            break;
 800539c:	bf00      	nop
    }

    // If needed, clean the TX buffer's DCache and swap it
    if (rxBuffer->header != PRU_READ)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a23      	ldr	r2, [pc, #140]	@ (8005434 <_ZN11RemoraComms18handleNssInterruptEv+0x1e4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d028      	beq.n	80053fc <_ZN11RemoraComms18handleNssInterruptEv+0x1ac>
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	2340      	movs	r3, #64	@ 0x40
 80053b0:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd1d      	ble.n	80053f4 <_ZN11RemoraComms18handleNssInterruptEv+0x1a4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 021f 	and.w	r2, r3, #31
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80053c8:	f3bf 8f4f 	dsb	sy
}
 80053cc:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <_ZN11RemoraComms18handleNssInterruptEv+0x1e0>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3320      	adds	r3, #32
 80053da:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b20      	subs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dcf2      	bgt.n	80053ce <_ZN11RemoraComms18handleNssInterruptEv+0x17e>
  __ASM volatile ("dsb 0xF":::"memory");
 80053e8:	f3bf 8f4f 	dsb	sy
}
 80053ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053ee:	f3bf 8f6f 	isb	sy
}
 80053f2:	bf00      	nop
}
 80053f4:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(alignedTxBuffer, BUFFER_ALIGNED_SIZE);
        this->swapBuffers();
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff feb6 	bl	8005168 <_ZN11RemoraComms11swapBuffersEv>
    }

    // SPI state does not get reset correctly, force it
    this->spiHandle.State = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd

    // Start SPI communication (DMA transfer)
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	4619      	mov	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	461a      	mov	r2, r3
 8005416:	2340      	movs	r3, #64	@ 0x40
 8005418:	f008 fe34 	bl	800e084 <HAL_SPI_TransmitReceive_DMA>
}
 800541c:	bf00      	nop
 800541e:	3730      	adds	r7, #48	@ 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	080148ac 	.word	0x080148ac
 8005428:	24000360 	.word	0x24000360
 800542c:	24000400 	.word	0x24000400
 8005430:	e000ed00 	.word	0xe000ed00
 8005434:	72656164 	.word	0x72656164
 8005438:	77726974 	.word	0x77726974
 800543c:	080148b0 	.word	0x080148b0
 8005440:	080148b4 	.word	0x080148b4
 8005444:	080148b8 	.word	0x080148b8

08005448 <_ZN11RemoraComms17handleTxInterruptEv>:


void RemoraComms::handleTxInterrupt()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	// Handle the DMA interrupt
	HAL_DMA_IRQHandler(&this->hdma_spi_tx);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	33c4      	adds	r3, #196	@ 0xc4
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fe97 	bl	8007188 <HAL_DMA_IRQHandler>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fd16 	bl	8005e92 <HAL_NVIC_EnableIRQ>

    this->dmaTx = true;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <_ZN11RemoraComms17handleRxInterruptEv>:


void RemoraComms::handleRxInterrupt()
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
	// Handle the DMA interrupt
	HAL_DMA_IRQHandler(&this->hdma_spi_rx);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fe7f 	bl	8007188 <HAL_DMA_IRQHandler>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fcfe 	bl	8005e92 <HAL_NVIC_EnableIRQ>

    this->dmaRx = true;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <_ZN11RemoraCommsD1Ev>:
#include "extern.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	4a05      	ldr	r2, [pc, #20]	@ (8005550 <_ZN11RemoraCommsD1Ev+0x20>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fa95 	bl	8004a70 <_ZN6ModuleD1Ev>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	080149e4 	.word	0x080149e4

08005554 <_ZN11RemoraCommsD0Ev>:
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ffe7 	bl	8005530 <_ZN11RemoraCommsD1Ev>
 8005562:	2220      	movs	r2, #32
 8005564:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f00d fc76 	bl	8012e5a <_ZdlPvjSt11align_val_t>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f8bc 	bl	8005700 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ffeb 	bl	8005578 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	605a      	str	r2, [r3, #4]
	irq(irq),
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3314      	adds	r3, #20
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff ffdd 	bl	8005592 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3320      	adds	r3, #32
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ffd8 	bl	8005592 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	332c      	adds	r3, #44	@ 0x2c
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f89a 	bl	8005720 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4619      	mov	r1, r3
 80055f2:	4804      	ldr	r0, [pc, #16]	@ (8005604 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 80055f4:	f00d ffda 	bl	80135ac <iprintf>
}
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	080148bc 	.word	0x080148bc

08005608 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b085      	sub	sp, #20
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 8005610:	2014      	movs	r0, #20
 8005612:	f00d fc34 	bl	8012e7e <_Znwj>
 8005616:	4603      	mov	r3, r0
 8005618:	461c      	mov	r4, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68d8      	ldr	r0, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	4620      	mov	r0, r4
 8005630:	f000 f93e 	bl	80058b0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601c      	str	r4, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}

08005640 <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3314      	adds	r3, #20
 800564c:	687c      	ldr	r4, [r7, #4]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f874 	bl	800573c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8005654:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8005656:	e00e      	b.n	8005676 <_ZN9pruThread3runEv+0x36>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	332c      	adds	r3, #44	@ 0x2c
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f8b6 	bl	80057ce <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8005662:	4603      	mov	r3, r0
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fa22 	bl	8004ab0 <_ZN6Module9runModuleEv>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	332c      	adds	r3, #44	@ 0x2c
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f89c 	bl	80057ae <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3314      	adds	r3, #20
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f86b 	bl	800575c <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8005686:	4603      	mov	r3, r0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	4620      	mov	r0, r4
 8005692:	f000 f874 	bl	800577e <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1dd      	bne.n	8005658 <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7c1b      	ldrb	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d029      	beq.n	80056f8 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3320      	adds	r3, #32
 80056a8:	687c      	ldr	r4, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f846 	bl	800573c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80056b0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80056b2:	e00e      	b.n	80056d2 <_ZN9pruThread3runEv+0x92>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	332c      	adds	r3, #44	@ 0x2c
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f888 	bl	80057ce <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80056be:	4603      	mov	r3, r0
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fa16 	bl	8004af4 <_ZN6Module13runModulePostEv>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	332c      	adds	r3, #44	@ 0x2c
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f86e 	bl	80057ae <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3320      	adds	r3, #32
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f83d 	bl	800575c <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80056e2:	4603      	mov	r3, r0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	4619      	mov	r1, r3
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 f846 	bl	800577e <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1dd      	bne.n	80056b4 <_ZN9pruThread3runEv+0x74>
	}
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}

08005700 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f86c 	bl	80057e6 <_ZNSaIP6ModuleEC1Ev>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f874 	bl	80057fe <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	4611      	mov	r1, r2
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f86a 	bl	8005826 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f859 	bl	8005826 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800577e:	b590      	push	{r4, r7, lr}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f85c 	bl	8005846 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 800578e:	4603      	mov	r3, r0
 8005790:	681c      	ldr	r4, [r3, #0]
 8005792:	6838      	ldr	r0, [r7, #0]
 8005794:	f000 f857 	bl	8005846 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8005798:	4603      	mov	r3, r0
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	429c      	cmp	r4, r3
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}

080057ae <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	1d1a      	adds	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
	return *this;
 80057c0:	687b      	ldr	r3, [r7, #4]
      }
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f834 	bl	800585c <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
	{ }
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <__NVIC_EnableIRQ>:
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800587e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db0b      	blt.n	800589e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	4907      	ldr	r1, [pc, #28]	@ (80058ac <__NVIC_EnableIRQ+0x38>)
 800588e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	2001      	movs	r0, #1
 8005896:	fa00 f202 	lsl.w	r2, r0, r2
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	e000e100 	.word	0xe000e100

080058b0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	605a      	str	r2, [r3, #4]
	irq(irq),
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 80058d8:	2008      	movs	r0, #8
 80058da:	f00d fad0 	bl	8012e7e <_Znwj>
 80058de:	4603      	mov	r3, r0
 80058e0:	461c      	mov	r4, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 f8af 	bl	8005a50 <_ZN14TimerInterruptC1EiP8pruTimer>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601c      	str	r4, [r3, #0]

	this->startTimer();
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f812 	bl	8005920 <_ZN8pruTimer10startTimerEv>
}
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}

08005906 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fe94 	bl	8005640 <_ZN9pruThread3runEv>
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d115      	bne.n	800595e <_ZN8pruTimer10startTimerEv+0x3e>
    {
        printf("	power on Timer 2\n\r");
 8005932:	483f      	ldr	r0, [pc, #252]	@ (8005a30 <_ZN8pruTimer10startTimerEv+0x110>)
 8005934:	f00d fe3a 	bl	80135ac <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 800593a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800593e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005948:	4b3a      	ldr	r3, [pc, #232]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 800594a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 8005956:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <_ZN8pruTimer10startTimerEv+0x118>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e036      	b.n	80059cc <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM3)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4a36      	ldr	r2, [pc, #216]	@ (8005a3c <_ZN8pruTimer10startTimerEv+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d116      	bne.n	8005996 <_ZN8pruTimer10startTimerEv+0x76>
    {
        printf("	power on Timer 3\n\r");
 8005968:	4835      	ldr	r0, [pc, #212]	@ (8005a40 <_ZN8pruTimer10startTimerEv+0x120>)
 800596a:	f00d fe1f 	bl	80135ac <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800596e:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 8005970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005974:	4a2f      	ldr	r2, [pc, #188]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 8005976:	f043 0302 	orr.w	r3, r3, #2
 800597a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800597e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 8005980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 800598c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a38 <_ZN8pruTimer10startTimerEv+0x118>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e01a      	b.n	80059cc <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM4)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a44 <_ZN8pruTimer10startTimerEv+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d115      	bne.n	80059cc <_ZN8pruTimer10startTimerEv+0xac>
    {
        printf("	power on Timer 4\n\r");
 80059a0:	4829      	ldr	r0, [pc, #164]	@ (8005a48 <_ZN8pruTimer10startTimerEv+0x128>)
 80059a2:	f00d fe03 	bl	80135ac <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80059a6:	4b23      	ldr	r3, [pc, #140]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 80059a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059ac:	4a21      	ldr	r2, [pc, #132]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a34 <_ZN8pruTimer10startTimerEv+0x114>)
 80059b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 80059c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a38 <_ZN8pruTimer10startTimerEv+0x118>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	3a01      	subs	r2, #1
 80059f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff ff2a 	bl	8005874 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8005a20:	480a      	ldr	r0, [pc, #40]	@ (8005a4c <_ZN8pruTimer10startTimerEv+0x12c>)
 8005a22:	f00d fe33 	bl	801368c <puts>
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	080148f0 	.word	0x080148f0
 8005a34:	58024400 	.word	0x58024400
 8005a38:	24000058 	.word	0x24000058
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	08014904 	.word	0x08014904
 8005a44:	40000800 	.word	0x40000800
 8005a48:	08014918 	.word	0x08014918
 8005a4c:	0801492c 	.word	0x0801492c

08005a50 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fa ffe6 	bl	8000a30 <_ZN9InterruptC1Ev>
 8005a64:	4a07      	ldr	r2, [pc, #28]	@ (8005a84 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4619      	mov	r1, r3
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f7fa ffeb 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	08014a08 	.word	0x08014a08

08005a88 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ff36 	bl	8005906 <_ZN8pruTimer9timerTickEv>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005aa8:	f7fe ff40 	bl	800492c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005aac:	480c      	ldr	r0, [pc, #48]	@ (8005ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005aae:	490d      	ldr	r1, [pc, #52]	@ (8005ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ab4:	e002      	b.n	8005abc <LoopCopyDataInit>

08005ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005aba:	3304      	adds	r3, #4

08005abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ac0:	d3f9      	bcc.n	8005ab6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8005af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ac8:	e001      	b.n	8005ace <LoopFillZerobss>

08005aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005acc:	3204      	adds	r2, #4

08005ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ad0:	d3fb      	bcc.n	8005aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ad2:	f00d ff7d 	bl	80139d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ad6:	f7fc f961 	bl	8001d9c <main>
  bx  lr
 8005ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005adc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005ae0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005ae4:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8005ae8:	08014b50 	.word	0x08014b50
  ldr r2, =_sbss
 8005aec:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8005af0:	24000eec 	.word	0x24000eec

08005af4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005af4:	e7fe      	b.n	8005af4 <ADC3_IRQHandler>
	...

08005af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005afe:	2003      	movs	r0, #3
 8005b00:	f000 f9a2 	bl	8005e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b04:	f003 fe58 	bl	80097b8 <HAL_RCC_GetSysClockFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <HAL_Init+0x68>)
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	4913      	ldr	r1, [pc, #76]	@ (8005b64 <HAL_Init+0x6c>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b22:	4b0f      	ldr	r3, [pc, #60]	@ (8005b60 <HAL_Init+0x68>)
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8005b64 <HAL_Init+0x6c>)
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
 8005b38:	4a0b      	ldr	r2, [pc, #44]	@ (8005b68 <HAL_Init+0x70>)
 8005b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b6c <HAL_Init+0x74>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b42:	200f      	movs	r0, #15
 8005b44:	f000 f814 	bl	8005b70 <HAL_InitTick>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e002      	b.n	8005b58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b52:	f7fe fcd1 	bl	80044f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	58024400 	.word	0x58024400
 8005b64:	0801499c 	.word	0x0801499c
 8005b68:	2400005c 	.word	0x2400005c
 8005b6c:	24000058 	.word	0x24000058

08005b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b78:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <HAL_InitTick+0x60>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e021      	b.n	8005bc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <HAL_InitTick+0x64>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <HAL_InitTick+0x60>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f98b 	bl	8005eb6 <HAL_SYSTICK_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e00e      	b.n	8005bc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d80a      	bhi.n	8005bc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb8:	f000 f951 	bl	8005e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bbc:	4a06      	ldr	r2, [pc, #24]	@ (8005bd8 <HAL_InitTick+0x68>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	24000064 	.word	0x24000064
 8005bd4:	24000058 	.word	0x24000058
 8005bd8:	24000060 	.word	0x24000060

08005bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_IncTick+0x20>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <HAL_IncTick+0x24>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4413      	add	r3, r2
 8005bec:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <HAL_IncTick+0x24>)
 8005bee:	6013      	str	r3, [r2, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	24000064 	.word	0x24000064
 8005c00:	240006e0 	.word	0x240006e0

08005c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return uwTick;
 8005c08:	4b03      	ldr	r3, [pc, #12]	@ (8005c18 <HAL_GetTick+0x14>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	240006e0 	.word	0x240006e0

08005c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c24:	f7ff ffee 	bl	8005c04 <HAL_GetTick>
 8005c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d005      	beq.n	8005c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <HAL_Delay+0x44>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c42:	bf00      	nop
 8005c44:	f7ff ffde 	bl	8005c04 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d8f7      	bhi.n	8005c44 <HAL_Delay+0x28>
  {
  }
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	24000064 	.word	0x24000064

08005c64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005c68:	4b03      	ldr	r3, [pc, #12]	@ (8005c78 <HAL_GetREVID+0x14>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	5c001000 	.word	0x5c001000

08005c7c <__NVIC_SetPriorityGrouping>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <__NVIC_SetPriorityGrouping+0x40>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ca4:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005caa:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <__NVIC_SetPriorityGrouping+0x40>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	60d3      	str	r3, [r2, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	e000ed00 	.word	0xe000ed00
 8005cc0:	05fa0000 	.word	0x05fa0000

08005cc4 <__NVIC_GetPriorityGrouping>:
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cc8:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <__NVIC_GetPriorityGrouping+0x18>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	f003 0307 	and.w	r3, r3, #7
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	e000ed00 	.word	0xe000ed00

08005ce0 <__NVIC_EnableIRQ>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	db0b      	blt.n	8005d0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	f003 021f 	and.w	r2, r3, #31
 8005cf8:	4907      	ldr	r1, [pc, #28]	@ (8005d18 <__NVIC_EnableIRQ+0x38>)
 8005cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2001      	movs	r0, #1
 8005d02:	fa00 f202 	lsl.w	r2, r0, r2
 8005d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	e000e100 	.word	0xe000e100

08005d1c <__NVIC_SetPriority>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	6039      	str	r1, [r7, #0]
 8005d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	db0a      	blt.n	8005d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	490c      	ldr	r1, [pc, #48]	@ (8005d68 <__NVIC_SetPriority+0x4c>)
 8005d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d3a:	0112      	lsls	r2, r2, #4
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	440b      	add	r3, r1
 8005d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d44:	e00a      	b.n	8005d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4908      	ldr	r1, [pc, #32]	@ (8005d6c <__NVIC_SetPriority+0x50>)
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	3b04      	subs	r3, #4
 8005d54:	0112      	lsls	r2, r2, #4
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	440b      	add	r3, r1
 8005d5a:	761a      	strb	r2, [r3, #24]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	e000e100 	.word	0xe000e100
 8005d6c:	e000ed00 	.word	0xe000ed00

08005d70 <NVIC_EncodePriority>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	@ 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f1c3 0307 	rsb	r3, r3, #7
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	bf28      	it	cs
 8005d8e:	2304      	movcs	r3, #4
 8005d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3304      	adds	r3, #4
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d902      	bls.n	8005da0 <NVIC_EncodePriority+0x30>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3b03      	subs	r3, #3
 8005d9e:	e000      	b.n	8005da2 <NVIC_EncodePriority+0x32>
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43da      	mvns	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	401a      	ands	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005db8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	43d9      	mvns	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc8:	4313      	orrs	r3, r2
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3724      	adds	r7, #36	@ 0x24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <__NVIC_SystemReset>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005ddc:	f3bf 8f4f 	dsb	sy
}
 8005de0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005de2:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <__NVIC_SystemReset+0x24>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005dea:	4904      	ldr	r1, [pc, #16]	@ (8005dfc <__NVIC_SystemReset+0x24>)
 8005dec:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <__NVIC_SystemReset+0x28>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005df2:	f3bf 8f4f 	dsb	sy
}
 8005df6:	bf00      	nop
    __NOP();
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <__NVIC_SystemReset+0x20>
 8005dfc:	e000ed00 	.word	0xe000ed00
 8005e00:	05fa0004 	.word	0x05fa0004

08005e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e14:	d301      	bcc.n	8005e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e16:	2301      	movs	r3, #1
 8005e18:	e00f      	b.n	8005e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <SysTick_Config+0x40>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e22:	210f      	movs	r1, #15
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	f7ff ff78 	bl	8005d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e2c:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <SysTick_Config+0x40>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e32:	4b04      	ldr	r3, [pc, #16]	@ (8005e44 <SysTick_Config+0x40>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000e010 	.word	0xe000e010

08005e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff13 	bl	8005c7c <__NVIC_SetPriorityGrouping>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e6c:	f7ff ff2a 	bl	8005cc4 <__NVIC_GetPriorityGrouping>
 8005e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff7a 	bl	8005d70 <NVIC_EncodePriority>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff49 	bl	8005d1c <__NVIC_SetPriority>
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff1d 	bl	8005ce0 <__NVIC_EnableIRQ>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005eb2:	f7ff ff91 	bl	8005dd8 <__NVIC_SystemReset>

08005eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ffa0 	bl	8005e04 <SysTick_Config>
 8005ec4:	4603      	mov	r3, r0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005ed4:	f3bf 8f5f 	dmb	sy
}
 8005ed8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005eda:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <HAL_MPU_Disable+0x28>)
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	4a06      	ldr	r2, [pc, #24]	@ (8005ef8 <HAL_MPU_Disable+0x28>)
 8005ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005ee6:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_MPU_Disable+0x2c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	605a      	str	r2, [r3, #4]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	e000ed00 	.word	0xe000ed00
 8005efc:	e000ed90 	.word	0xe000ed90

08005f00 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005f08:	4a0b      	ldr	r2, [pc, #44]	@ (8005f38 <HAL_MPU_Enable+0x38>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <HAL_MPU_Enable+0x3c>)
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	4a09      	ldr	r2, [pc, #36]	@ (8005f3c <HAL_MPU_Enable+0x3c>)
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005f1e:	f3bf 8f4f 	dsb	sy
}
 8005f22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f24:	f3bf 8f6f 	isb	sy
}
 8005f28:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	e000ed90 	.word	0xe000ed90
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	785a      	ldrb	r2, [r3, #1]
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <HAL_MPU_ConfigRegion+0x7c>)
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005f50:	4b1a      	ldr	r3, [pc, #104]	@ (8005fbc <HAL_MPU_ConfigRegion+0x7c>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <HAL_MPU_ConfigRegion+0x7c>)
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005f5c:	4a17      	ldr	r2, [pc, #92]	@ (8005fbc <HAL_MPU_ConfigRegion+0x7c>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7b1b      	ldrb	r3, [r3, #12]
 8005f68:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7adb      	ldrb	r3, [r3, #11]
 8005f6e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7a9b      	ldrb	r3, [r3, #10]
 8005f76:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7b5b      	ldrb	r3, [r3, #13]
 8005f7e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7b9b      	ldrb	r3, [r3, #14]
 8005f86:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7bdb      	ldrb	r3, [r3, #15]
 8005f8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7a5b      	ldrb	r3, [r3, #9]
 8005f96:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7a1b      	ldrb	r3, [r3, #8]
 8005f9e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005fa0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005fa8:	4a04      	ldr	r2, [pc, #16]	@ (8005fbc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005faa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005fac:	6113      	str	r3, [r2, #16]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000ed90 	.word	0xe000ed90

08005fc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005fc8:	f7ff fe1c 	bl	8005c04 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e316      	b.n	8006606 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a66      	ldr	r2, [pc, #408]	@ (8006178 <HAL_DMA_Init+0x1b8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d04a      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a65      	ldr	r2, [pc, #404]	@ (800617c <HAL_DMA_Init+0x1bc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d045      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a63      	ldr	r2, [pc, #396]	@ (8006180 <HAL_DMA_Init+0x1c0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d040      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a62      	ldr	r2, [pc, #392]	@ (8006184 <HAL_DMA_Init+0x1c4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d03b      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a60      	ldr	r2, [pc, #384]	@ (8006188 <HAL_DMA_Init+0x1c8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d036      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a5f      	ldr	r2, [pc, #380]	@ (800618c <HAL_DMA_Init+0x1cc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d031      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5d      	ldr	r2, [pc, #372]	@ (8006190 <HAL_DMA_Init+0x1d0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02c      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a5c      	ldr	r2, [pc, #368]	@ (8006194 <HAL_DMA_Init+0x1d4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d027      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5a      	ldr	r2, [pc, #360]	@ (8006198 <HAL_DMA_Init+0x1d8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a59      	ldr	r2, [pc, #356]	@ (800619c <HAL_DMA_Init+0x1dc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01d      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a57      	ldr	r2, [pc, #348]	@ (80061a0 <HAL_DMA_Init+0x1e0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a56      	ldr	r2, [pc, #344]	@ (80061a4 <HAL_DMA_Init+0x1e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a54      	ldr	r2, [pc, #336]	@ (80061a8 <HAL_DMA_Init+0x1e8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a53      	ldr	r2, [pc, #332]	@ (80061ac <HAL_DMA_Init+0x1ec>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a51      	ldr	r2, [pc, #324]	@ (80061b0 <HAL_DMA_Init+0x1f0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_DMA_Init+0xb8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a50      	ldr	r2, [pc, #320]	@ (80061b4 <HAL_DMA_Init+0x1f4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <HAL_DMA_Init+0xbc>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_DMA_Init+0xbe>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 813b 	beq.w	80062fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a37      	ldr	r2, [pc, #220]	@ (8006178 <HAL_DMA_Init+0x1b8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d04a      	beq.n	8006134 <HAL_DMA_Init+0x174>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a36      	ldr	r2, [pc, #216]	@ (800617c <HAL_DMA_Init+0x1bc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d045      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a34      	ldr	r2, [pc, #208]	@ (8006180 <HAL_DMA_Init+0x1c0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d040      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a33      	ldr	r2, [pc, #204]	@ (8006184 <HAL_DMA_Init+0x1c4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d03b      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a31      	ldr	r2, [pc, #196]	@ (8006188 <HAL_DMA_Init+0x1c8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d036      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a30      	ldr	r2, [pc, #192]	@ (800618c <HAL_DMA_Init+0x1cc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d031      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006190 <HAL_DMA_Init+0x1d0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02c      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2d      	ldr	r2, [pc, #180]	@ (8006194 <HAL_DMA_Init+0x1d4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d027      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006198 <HAL_DMA_Init+0x1d8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2a      	ldr	r2, [pc, #168]	@ (800619c <HAL_DMA_Init+0x1dc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01d      	beq.n	8006134 <HAL_DMA_Init+0x174>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a28      	ldr	r2, [pc, #160]	@ (80061a0 <HAL_DMA_Init+0x1e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_DMA_Init+0x174>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a27      	ldr	r2, [pc, #156]	@ (80061a4 <HAL_DMA_Init+0x1e4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_DMA_Init+0x174>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a25      	ldr	r2, [pc, #148]	@ (80061a8 <HAL_DMA_Init+0x1e8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_DMA_Init+0x174>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a24      	ldr	r2, [pc, #144]	@ (80061ac <HAL_DMA_Init+0x1ec>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_DMA_Init+0x174>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a22      	ldr	r2, [pc, #136]	@ (80061b0 <HAL_DMA_Init+0x1f0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_DMA_Init+0x174>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a21      	ldr	r2, [pc, #132]	@ (80061b4 <HAL_DMA_Init+0x1f4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d108      	bne.n	8006146 <HAL_DMA_Init+0x186>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e007      	b.n	8006156 <HAL_DMA_Init+0x196>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0201 	bic.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006156:	e02f      	b.n	80061b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006158:	f7ff fd54 	bl	8005c04 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b05      	cmp	r3, #5
 8006164:	d928      	bls.n	80061b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2203      	movs	r2, #3
 8006170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e246      	b.n	8006606 <HAL_DMA_Init+0x646>
 8006178:	40020010 	.word	0x40020010
 800617c:	40020028 	.word	0x40020028
 8006180:	40020040 	.word	0x40020040
 8006184:	40020058 	.word	0x40020058
 8006188:	40020070 	.word	0x40020070
 800618c:	40020088 	.word	0x40020088
 8006190:	400200a0 	.word	0x400200a0
 8006194:	400200b8 	.word	0x400200b8
 8006198:	40020410 	.word	0x40020410
 800619c:	40020428 	.word	0x40020428
 80061a0:	40020440 	.word	0x40020440
 80061a4:	40020458 	.word	0x40020458
 80061a8:	40020470 	.word	0x40020470
 80061ac:	40020488 	.word	0x40020488
 80061b0:	400204a0 	.word	0x400204a0
 80061b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1c8      	bne.n	8006158 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4b83      	ldr	r3, [pc, #524]	@ (80063e0 <HAL_DMA_Init+0x420>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80061de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	2b04      	cmp	r3, #4
 800620a:	d107      	bne.n	800621c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	4313      	orrs	r3, r2
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800621c:	4b71      	ldr	r3, [pc, #452]	@ (80063e4 <HAL_DMA_Init+0x424>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b71      	ldr	r3, [pc, #452]	@ (80063e8 <HAL_DMA_Init+0x428>)
 8006222:	4013      	ands	r3, r2
 8006224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006228:	d328      	bcc.n	800627c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b28      	cmp	r3, #40	@ 0x28
 8006230:	d903      	bls.n	800623a <HAL_DMA_Init+0x27a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b2e      	cmp	r3, #46	@ 0x2e
 8006238:	d917      	bls.n	800626a <HAL_DMA_Init+0x2aa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006240:	d903      	bls.n	800624a <HAL_DMA_Init+0x28a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b42      	cmp	r3, #66	@ 0x42
 8006248:	d90f      	bls.n	800626a <HAL_DMA_Init+0x2aa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b46      	cmp	r3, #70	@ 0x46
 8006250:	d903      	bls.n	800625a <HAL_DMA_Init+0x29a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b48      	cmp	r3, #72	@ 0x48
 8006258:	d907      	bls.n	800626a <HAL_DMA_Init+0x2aa>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006260:	d905      	bls.n	800626e <HAL_DMA_Init+0x2ae>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b52      	cmp	r3, #82	@ 0x52
 8006268:	d801      	bhi.n	800626e <HAL_DMA_Init+0x2ae>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <HAL_DMA_Init+0x2b0>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800627a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d117      	bne.n	80062d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f002 f8f9 	bl	80084b0 <DMA_CheckFifoParam>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2240      	movs	r2, #64	@ 0x40
 80062c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e197      	b.n	8006606 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 f834 	bl	800834c <DMA_CalcBaseAndBitshift>
 80062e4:	4603      	mov	r3, r0
 80062e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	223f      	movs	r2, #63	@ 0x3f
 80062f2:	409a      	lsls	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e0cd      	b.n	8006496 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a3b      	ldr	r2, [pc, #236]	@ (80063ec <HAL_DMA_Init+0x42c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_DMA_Init+0x38a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a39      	ldr	r2, [pc, #228]	@ (80063f0 <HAL_DMA_Init+0x430>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <HAL_DMA_Init+0x38a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a38      	ldr	r2, [pc, #224]	@ (80063f4 <HAL_DMA_Init+0x434>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_DMA_Init+0x38a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a36      	ldr	r2, [pc, #216]	@ (80063f8 <HAL_DMA_Init+0x438>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_DMA_Init+0x38a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a35      	ldr	r2, [pc, #212]	@ (80063fc <HAL_DMA_Init+0x43c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_DMA_Init+0x38a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a33      	ldr	r2, [pc, #204]	@ (8006400 <HAL_DMA_Init+0x440>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_DMA_Init+0x38a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a32      	ldr	r2, [pc, #200]	@ (8006404 <HAL_DMA_Init+0x444>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_DMA_Init+0x38a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a30      	ldr	r2, [pc, #192]	@ (8006408 <HAL_DMA_Init+0x448>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_DMA_Init+0x38e>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_DMA_Init+0x390>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8097 	beq.w	8006484 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	@ (80063ec <HAL_DMA_Init+0x42c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d021      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	@ (80063f0 <HAL_DMA_Init+0x430>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01c      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	@ (80063f4 <HAL_DMA_Init+0x434>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d017      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <HAL_DMA_Init+0x438>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d012      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <HAL_DMA_Init+0x43c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00d      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <HAL_DMA_Init+0x440>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d008      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <HAL_DMA_Init+0x444>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <HAL_DMA_Init+0x3e4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <HAL_DMA_Init+0x448>)
 80063a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4b13      	ldr	r3, [pc, #76]	@ (800640c <HAL_DMA_Init+0x44c>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b40      	cmp	r3, #64	@ 0x40
 80063ca:	d021      	beq.n	8006410 <HAL_DMA_Init+0x450>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b80      	cmp	r3, #128	@ 0x80
 80063d2:	d102      	bne.n	80063da <HAL_DMA_Init+0x41a>
 80063d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063d8:	e01b      	b.n	8006412 <HAL_DMA_Init+0x452>
 80063da:	2300      	movs	r3, #0
 80063dc:	e019      	b.n	8006412 <HAL_DMA_Init+0x452>
 80063de:	bf00      	nop
 80063e0:	fe10803f 	.word	0xfe10803f
 80063e4:	5c001000 	.word	0x5c001000
 80063e8:	ffff0000 	.word	0xffff0000
 80063ec:	58025408 	.word	0x58025408
 80063f0:	5802541c 	.word	0x5802541c
 80063f4:	58025430 	.word	0x58025430
 80063f8:	58025444 	.word	0x58025444
 80063fc:	58025458 	.word	0x58025458
 8006400:	5802546c 	.word	0x5802546c
 8006404:	58025480 	.word	0x58025480
 8006408:	58025494 	.word	0x58025494
 800640c:	fffe000f 	.word	0xfffe000f
 8006410:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68d2      	ldr	r2, [r2, #12]
 8006416:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006440:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	4b6e      	ldr	r3, [pc, #440]	@ (8006610 <HAL_DMA_Init+0x650>)
 8006458:	4413      	add	r3, r2
 800645a:	4a6e      	ldr	r2, [pc, #440]	@ (8006614 <HAL_DMA_Init+0x654>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	009a      	lsls	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 ff6f 	bl	800834c <DMA_CalcBaseAndBitshift>
 800646e:	4603      	mov	r3, r0
 8006470:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2201      	movs	r2, #1
 800647c:	409a      	lsls	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	e008      	b.n	8006496 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2240      	movs	r2, #64	@ 0x40
 8006488:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2203      	movs	r2, #3
 800648e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0b7      	b.n	8006606 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a5f      	ldr	r2, [pc, #380]	@ (8006618 <HAL_DMA_Init+0x658>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d072      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5d      	ldr	r2, [pc, #372]	@ (800661c <HAL_DMA_Init+0x65c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d06d      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006620 <HAL_DMA_Init+0x660>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d068      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006624 <HAL_DMA_Init+0x664>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d063      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a59      	ldr	r2, [pc, #356]	@ (8006628 <HAL_DMA_Init+0x668>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d05e      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a57      	ldr	r2, [pc, #348]	@ (800662c <HAL_DMA_Init+0x66c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d059      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a56      	ldr	r2, [pc, #344]	@ (8006630 <HAL_DMA_Init+0x670>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d054      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a54      	ldr	r2, [pc, #336]	@ (8006634 <HAL_DMA_Init+0x674>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d04f      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a53      	ldr	r2, [pc, #332]	@ (8006638 <HAL_DMA_Init+0x678>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a51      	ldr	r2, [pc, #324]	@ (800663c <HAL_DMA_Init+0x67c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a50      	ldr	r2, [pc, #320]	@ (8006640 <HAL_DMA_Init+0x680>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a4e      	ldr	r2, [pc, #312]	@ (8006644 <HAL_DMA_Init+0x684>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a4d      	ldr	r2, [pc, #308]	@ (8006648 <HAL_DMA_Init+0x688>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a4b      	ldr	r2, [pc, #300]	@ (800664c <HAL_DMA_Init+0x68c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a4a      	ldr	r2, [pc, #296]	@ (8006650 <HAL_DMA_Init+0x690>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a48      	ldr	r2, [pc, #288]	@ (8006654 <HAL_DMA_Init+0x694>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a47      	ldr	r2, [pc, #284]	@ (8006658 <HAL_DMA_Init+0x698>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a45      	ldr	r2, [pc, #276]	@ (800665c <HAL_DMA_Init+0x69c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a44      	ldr	r2, [pc, #272]	@ (8006660 <HAL_DMA_Init+0x6a0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a42      	ldr	r2, [pc, #264]	@ (8006664 <HAL_DMA_Init+0x6a4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a41      	ldr	r2, [pc, #260]	@ (8006668 <HAL_DMA_Init+0x6a8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a3f      	ldr	r2, [pc, #252]	@ (800666c <HAL_DMA_Init+0x6ac>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a3e      	ldr	r2, [pc, #248]	@ (8006670 <HAL_DMA_Init+0x6b0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_Init+0x5c6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a3c      	ldr	r2, [pc, #240]	@ (8006674 <HAL_DMA_Init+0x6b4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_DMA_Init+0x5ca>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <HAL_DMA_Init+0x5cc>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d032      	beq.n	80065f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f002 f809 	bl	80085a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b80      	cmp	r3, #128	@ 0x80
 800659c:	d102      	bne.n	80065a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80065b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d010      	beq.n	80065e4 <HAL_DMA_Init+0x624>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d80c      	bhi.n	80065e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f002 f886 	bl	80086dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e008      	b.n	80065f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	a7fdabf8 	.word	0xa7fdabf8
 8006614:	cccccccd 	.word	0xcccccccd
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
 8006658:	58025408 	.word	0x58025408
 800665c:	5802541c 	.word	0x5802541c
 8006660:	58025430 	.word	0x58025430
 8006664:	58025444 	.word	0x58025444
 8006668:	58025458 	.word	0x58025458
 800666c:	5802546c 	.word	0x5802546c
 8006670:	58025480 	.word	0x58025480
 8006674:	58025494 	.word	0x58025494

08006678 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e226      	b.n	8006ae2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_DMA_Start_IT+0x2a>
 800669e:	2302      	movs	r3, #2
 80066a0:	e21f      	b.n	8006ae2 <HAL_DMA_Start_IT+0x46a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	f040 820a 	bne.w	8006acc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a68      	ldr	r2, [pc, #416]	@ (800686c <HAL_DMA_Start_IT+0x1f4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d04a      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a66      	ldr	r2, [pc, #408]	@ (8006870 <HAL_DMA_Start_IT+0x1f8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d045      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a65      	ldr	r2, [pc, #404]	@ (8006874 <HAL_DMA_Start_IT+0x1fc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d040      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a63      	ldr	r2, [pc, #396]	@ (8006878 <HAL_DMA_Start_IT+0x200>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d03b      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a62      	ldr	r2, [pc, #392]	@ (800687c <HAL_DMA_Start_IT+0x204>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d036      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a60      	ldr	r2, [pc, #384]	@ (8006880 <HAL_DMA_Start_IT+0x208>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d031      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a5f      	ldr	r2, [pc, #380]	@ (8006884 <HAL_DMA_Start_IT+0x20c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d02c      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a5d      	ldr	r2, [pc, #372]	@ (8006888 <HAL_DMA_Start_IT+0x210>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d027      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a5c      	ldr	r2, [pc, #368]	@ (800688c <HAL_DMA_Start_IT+0x214>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a5a      	ldr	r2, [pc, #360]	@ (8006890 <HAL_DMA_Start_IT+0x218>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a59      	ldr	r2, [pc, #356]	@ (8006894 <HAL_DMA_Start_IT+0x21c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a57      	ldr	r2, [pc, #348]	@ (8006898 <HAL_DMA_Start_IT+0x220>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a56      	ldr	r2, [pc, #344]	@ (800689c <HAL_DMA_Start_IT+0x224>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a54      	ldr	r2, [pc, #336]	@ (80068a0 <HAL_DMA_Start_IT+0x228>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a53      	ldr	r2, [pc, #332]	@ (80068a4 <HAL_DMA_Start_IT+0x22c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_DMA_Start_IT+0xee>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a51      	ldr	r2, [pc, #324]	@ (80068a8 <HAL_DMA_Start_IT+0x230>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d108      	bne.n	8006778 <HAL_DMA_Start_IT+0x100>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e007      	b.n	8006788 <HAL_DMA_Start_IT+0x110>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f001 fc30 	bl	8007ff4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a34      	ldr	r2, [pc, #208]	@ (800686c <HAL_DMA_Start_IT+0x1f4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d04a      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a33      	ldr	r2, [pc, #204]	@ (8006870 <HAL_DMA_Start_IT+0x1f8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d045      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a31      	ldr	r2, [pc, #196]	@ (8006874 <HAL_DMA_Start_IT+0x1fc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d040      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a30      	ldr	r2, [pc, #192]	@ (8006878 <HAL_DMA_Start_IT+0x200>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d03b      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a2e      	ldr	r2, [pc, #184]	@ (800687c <HAL_DMA_Start_IT+0x204>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d036      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006880 <HAL_DMA_Start_IT+0x208>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d031      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006884 <HAL_DMA_Start_IT+0x20c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02c      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2a      	ldr	r2, [pc, #168]	@ (8006888 <HAL_DMA_Start_IT+0x210>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d027      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a28      	ldr	r2, [pc, #160]	@ (800688c <HAL_DMA_Start_IT+0x214>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <HAL_DMA_Start_IT+0x218>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d01d      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a25      	ldr	r2, [pc, #148]	@ (8006894 <HAL_DMA_Start_IT+0x21c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a24      	ldr	r2, [pc, #144]	@ (8006898 <HAL_DMA_Start_IT+0x220>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a22      	ldr	r2, [pc, #136]	@ (800689c <HAL_DMA_Start_IT+0x224>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <HAL_DMA_Start_IT+0x228>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1f      	ldr	r2, [pc, #124]	@ (80068a4 <HAL_DMA_Start_IT+0x22c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_DMA_Start_IT+0x1bc>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1e      	ldr	r2, [pc, #120]	@ (80068a8 <HAL_DMA_Start_IT+0x230>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d101      	bne.n	8006838 <HAL_DMA_Start_IT+0x1c0>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_DMA_Start_IT+0x1c2>
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d036      	beq.n	80068ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 021e 	bic.w	r2, r3, #30
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0216 	orr.w	r2, r2, #22
 8006850:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03e      	beq.n	80068d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0208 	orr.w	r2, r2, #8
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e035      	b.n	80068d8 <HAL_DMA_Start_IT+0x260>
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 020e 	bic.w	r2, r3, #14
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 020a 	orr.w	r2, r2, #10
 80068be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0204 	orr.w	r2, r2, #4
 80068d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a83      	ldr	r2, [pc, #524]	@ (8006aec <HAL_DMA_Start_IT+0x474>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d072      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a82      	ldr	r2, [pc, #520]	@ (8006af0 <HAL_DMA_Start_IT+0x478>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d06d      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a80      	ldr	r2, [pc, #512]	@ (8006af4 <HAL_DMA_Start_IT+0x47c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d068      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a7f      	ldr	r2, [pc, #508]	@ (8006af8 <HAL_DMA_Start_IT+0x480>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d063      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a7d      	ldr	r2, [pc, #500]	@ (8006afc <HAL_DMA_Start_IT+0x484>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d05e      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b00 <HAL_DMA_Start_IT+0x488>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d059      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a7a      	ldr	r2, [pc, #488]	@ (8006b04 <HAL_DMA_Start_IT+0x48c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d054      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a79      	ldr	r2, [pc, #484]	@ (8006b08 <HAL_DMA_Start_IT+0x490>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d04f      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a77      	ldr	r2, [pc, #476]	@ (8006b0c <HAL_DMA_Start_IT+0x494>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d04a      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a76      	ldr	r2, [pc, #472]	@ (8006b10 <HAL_DMA_Start_IT+0x498>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d045      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a74      	ldr	r2, [pc, #464]	@ (8006b14 <HAL_DMA_Start_IT+0x49c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d040      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a73      	ldr	r2, [pc, #460]	@ (8006b18 <HAL_DMA_Start_IT+0x4a0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d03b      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a71      	ldr	r2, [pc, #452]	@ (8006b1c <HAL_DMA_Start_IT+0x4a4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d036      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a70      	ldr	r2, [pc, #448]	@ (8006b20 <HAL_DMA_Start_IT+0x4a8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d031      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6e      	ldr	r2, [pc, #440]	@ (8006b24 <HAL_DMA_Start_IT+0x4ac>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d02c      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6d      	ldr	r2, [pc, #436]	@ (8006b28 <HAL_DMA_Start_IT+0x4b0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d027      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6b      	ldr	r2, [pc, #428]	@ (8006b2c <HAL_DMA_Start_IT+0x4b4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6a      	ldr	r2, [pc, #424]	@ (8006b30 <HAL_DMA_Start_IT+0x4b8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d01d      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a68      	ldr	r2, [pc, #416]	@ (8006b34 <HAL_DMA_Start_IT+0x4bc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a67      	ldr	r2, [pc, #412]	@ (8006b38 <HAL_DMA_Start_IT+0x4c0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a65      	ldr	r2, [pc, #404]	@ (8006b3c <HAL_DMA_Start_IT+0x4c4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a64      	ldr	r2, [pc, #400]	@ (8006b40 <HAL_DMA_Start_IT+0x4c8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a62      	ldr	r2, [pc, #392]	@ (8006b44 <HAL_DMA_Start_IT+0x4cc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_Start_IT+0x350>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a61      	ldr	r2, [pc, #388]	@ (8006b48 <HAL_DMA_Start_IT+0x4d0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d101      	bne.n	80069cc <HAL_DMA_Start_IT+0x354>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_DMA_Start_IT+0x356>
 80069cc:	2300      	movs	r3, #0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01a      	beq.n	8006a08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a37      	ldr	r2, [pc, #220]	@ (8006aec <HAL_DMA_Start_IT+0x474>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a36      	ldr	r2, [pc, #216]	@ (8006af0 <HAL_DMA_Start_IT+0x478>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d045      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	@ (8006af4 <HAL_DMA_Start_IT+0x47c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d040      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a33      	ldr	r2, [pc, #204]	@ (8006af8 <HAL_DMA_Start_IT+0x480>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a31      	ldr	r2, [pc, #196]	@ (8006afc <HAL_DMA_Start_IT+0x484>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d036      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a30      	ldr	r2, [pc, #192]	@ (8006b00 <HAL_DMA_Start_IT+0x488>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d031      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2e      	ldr	r2, [pc, #184]	@ (8006b04 <HAL_DMA_Start_IT+0x48c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2d      	ldr	r2, [pc, #180]	@ (8006b08 <HAL_DMA_Start_IT+0x490>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d027      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8006b0c <HAL_DMA_Start_IT+0x494>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2a      	ldr	r2, [pc, #168]	@ (8006b10 <HAL_DMA_Start_IT+0x498>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a28      	ldr	r2, [pc, #160]	@ (8006b14 <HAL_DMA_Start_IT+0x49c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a27      	ldr	r2, [pc, #156]	@ (8006b18 <HAL_DMA_Start_IT+0x4a0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a25      	ldr	r2, [pc, #148]	@ (8006b1c <HAL_DMA_Start_IT+0x4a4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a24      	ldr	r2, [pc, #144]	@ (8006b20 <HAL_DMA_Start_IT+0x4a8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a22      	ldr	r2, [pc, #136]	@ (8006b24 <HAL_DMA_Start_IT+0x4ac>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x430>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <HAL_DMA_Start_IT+0x4b0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d108      	bne.n	8006aba <HAL_DMA_Start_IT+0x442>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e012      	b.n	8006ae0 <HAL_DMA_Start_IT+0x468>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e009      	b.n	8006ae0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ad2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40020010 	.word	0x40020010
 8006af0:	40020028 	.word	0x40020028
 8006af4:	40020040 	.word	0x40020040
 8006af8:	40020058 	.word	0x40020058
 8006afc:	40020070 	.word	0x40020070
 8006b00:	40020088 	.word	0x40020088
 8006b04:	400200a0 	.word	0x400200a0
 8006b08:	400200b8 	.word	0x400200b8
 8006b0c:	40020410 	.word	0x40020410
 8006b10:	40020428 	.word	0x40020428
 8006b14:	40020440 	.word	0x40020440
 8006b18:	40020458 	.word	0x40020458
 8006b1c:	40020470 	.word	0x40020470
 8006b20:	40020488 	.word	0x40020488
 8006b24:	400204a0 	.word	0x400204a0
 8006b28:	400204b8 	.word	0x400204b8
 8006b2c:	58025408 	.word	0x58025408
 8006b30:	5802541c 	.word	0x5802541c
 8006b34:	58025430 	.word	0x58025430
 8006b38:	58025444 	.word	0x58025444
 8006b3c:	58025458 	.word	0x58025458
 8006b40:	5802546c 	.word	0x5802546c
 8006b44:	58025480 	.word	0x58025480
 8006b48:	58025494 	.word	0x58025494

08006b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b54:	f7ff f856 	bl	8005c04 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e2dc      	b.n	800711e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d008      	beq.n	8006b82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2280      	movs	r2, #128	@ 0x80
 8006b74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e2cd      	b.n	800711e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a76      	ldr	r2, [pc, #472]	@ (8006d60 <HAL_DMA_Abort+0x214>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d04a      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a74      	ldr	r2, [pc, #464]	@ (8006d64 <HAL_DMA_Abort+0x218>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d045      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a73      	ldr	r2, [pc, #460]	@ (8006d68 <HAL_DMA_Abort+0x21c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d040      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a71      	ldr	r2, [pc, #452]	@ (8006d6c <HAL_DMA_Abort+0x220>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d03b      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a70      	ldr	r2, [pc, #448]	@ (8006d70 <HAL_DMA_Abort+0x224>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d036      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8006d74 <HAL_DMA_Abort+0x228>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d031      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a6d      	ldr	r2, [pc, #436]	@ (8006d78 <HAL_DMA_Abort+0x22c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d02c      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8006d7c <HAL_DMA_Abort+0x230>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d027      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6a      	ldr	r2, [pc, #424]	@ (8006d80 <HAL_DMA_Abort+0x234>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d022      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a68      	ldr	r2, [pc, #416]	@ (8006d84 <HAL_DMA_Abort+0x238>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a67      	ldr	r2, [pc, #412]	@ (8006d88 <HAL_DMA_Abort+0x23c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d018      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a65      	ldr	r2, [pc, #404]	@ (8006d8c <HAL_DMA_Abort+0x240>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a64      	ldr	r2, [pc, #400]	@ (8006d90 <HAL_DMA_Abort+0x244>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a62      	ldr	r2, [pc, #392]	@ (8006d94 <HAL_DMA_Abort+0x248>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a61      	ldr	r2, [pc, #388]	@ (8006d98 <HAL_DMA_Abort+0x24c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_DMA_Abort+0xd6>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a5f      	ldr	r2, [pc, #380]	@ (8006d9c <HAL_DMA_Abort+0x250>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_DMA_Abort+0xda>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_DMA_Abort+0xdc>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d013      	beq.n	8006c54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 021e 	bic.w	r2, r2, #30
 8006c3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e00a      	b.n	8006c6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 020e 	bic.w	r2, r2, #14
 8006c62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d60 <HAL_DMA_Abort+0x214>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d072      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3a      	ldr	r2, [pc, #232]	@ (8006d64 <HAL_DMA_Abort+0x218>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d06d      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a39      	ldr	r2, [pc, #228]	@ (8006d68 <HAL_DMA_Abort+0x21c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d068      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a37      	ldr	r2, [pc, #220]	@ (8006d6c <HAL_DMA_Abort+0x220>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d063      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a36      	ldr	r2, [pc, #216]	@ (8006d70 <HAL_DMA_Abort+0x224>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d05e      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a34      	ldr	r2, [pc, #208]	@ (8006d74 <HAL_DMA_Abort+0x228>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d059      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a33      	ldr	r2, [pc, #204]	@ (8006d78 <HAL_DMA_Abort+0x22c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d054      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a31      	ldr	r2, [pc, #196]	@ (8006d7c <HAL_DMA_Abort+0x230>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04f      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a30      	ldr	r2, [pc, #192]	@ (8006d80 <HAL_DMA_Abort+0x234>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <HAL_DMA_Abort+0x238>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <HAL_DMA_Abort+0x23c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8006d8c <HAL_DMA_Abort+0x240>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d90 <HAL_DMA_Abort+0x244>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a28      	ldr	r2, [pc, #160]	@ (8006d94 <HAL_DMA_Abort+0x248>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a27      	ldr	r2, [pc, #156]	@ (8006d98 <HAL_DMA_Abort+0x24c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a25      	ldr	r2, [pc, #148]	@ (8006d9c <HAL_DMA_Abort+0x250>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a24      	ldr	r2, [pc, #144]	@ (8006da0 <HAL_DMA_Abort+0x254>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a22      	ldr	r2, [pc, #136]	@ (8006da4 <HAL_DMA_Abort+0x258>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a21      	ldr	r2, [pc, #132]	@ (8006da8 <HAL_DMA_Abort+0x25c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dac <HAL_DMA_Abort+0x260>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1e      	ldr	r2, [pc, #120]	@ (8006db0 <HAL_DMA_Abort+0x264>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_DMA_Abort+0x268>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <HAL_DMA_Abort+0x26c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_Abort+0x20e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a19      	ldr	r2, [pc, #100]	@ (8006dbc <HAL_DMA_Abort+0x270>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d132      	bne.n	8006dc0 <HAL_DMA_Abort+0x274>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e031      	b.n	8006dc2 <HAL_DMA_Abort+0x276>
 8006d5e:	bf00      	nop
 8006d60:	40020010 	.word	0x40020010
 8006d64:	40020028 	.word	0x40020028
 8006d68:	40020040 	.word	0x40020040
 8006d6c:	40020058 	.word	0x40020058
 8006d70:	40020070 	.word	0x40020070
 8006d74:	40020088 	.word	0x40020088
 8006d78:	400200a0 	.word	0x400200a0
 8006d7c:	400200b8 	.word	0x400200b8
 8006d80:	40020410 	.word	0x40020410
 8006d84:	40020428 	.word	0x40020428
 8006d88:	40020440 	.word	0x40020440
 8006d8c:	40020458 	.word	0x40020458
 8006d90:	40020470 	.word	0x40020470
 8006d94:	40020488 	.word	0x40020488
 8006d98:	400204a0 	.word	0x400204a0
 8006d9c:	400204b8 	.word	0x400204b8
 8006da0:	58025408 	.word	0x58025408
 8006da4:	5802541c 	.word	0x5802541c
 8006da8:	58025430 	.word	0x58025430
 8006dac:	58025444 	.word	0x58025444
 8006db0:	58025458 	.word	0x58025458
 8006db4:	5802546c 	.word	0x5802546c
 8006db8:	58025480 	.word	0x58025480
 8006dbc:	58025494 	.word	0x58025494
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a6d      	ldr	r2, [pc, #436]	@ (8006f90 <HAL_DMA_Abort+0x444>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f94 <HAL_DMA_Abort+0x448>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a6a      	ldr	r2, [pc, #424]	@ (8006f98 <HAL_DMA_Abort+0x44c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a68      	ldr	r2, [pc, #416]	@ (8006f9c <HAL_DMA_Abort+0x450>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a67      	ldr	r2, [pc, #412]	@ (8006fa0 <HAL_DMA_Abort+0x454>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a65      	ldr	r2, [pc, #404]	@ (8006fa4 <HAL_DMA_Abort+0x458>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a64      	ldr	r2, [pc, #400]	@ (8006fa8 <HAL_DMA_Abort+0x45c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a62      	ldr	r2, [pc, #392]	@ (8006fac <HAL_DMA_Abort+0x460>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a61      	ldr	r2, [pc, #388]	@ (8006fb0 <HAL_DMA_Abort+0x464>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a5f      	ldr	r2, [pc, #380]	@ (8006fb4 <HAL_DMA_Abort+0x468>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8006fb8 <HAL_DMA_Abort+0x46c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a5c      	ldr	r2, [pc, #368]	@ (8006fbc <HAL_DMA_Abort+0x470>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a5b      	ldr	r2, [pc, #364]	@ (8006fc0 <HAL_DMA_Abort+0x474>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a59      	ldr	r2, [pc, #356]	@ (8006fc4 <HAL_DMA_Abort+0x478>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a58      	ldr	r2, [pc, #352]	@ (8006fc8 <HAL_DMA_Abort+0x47c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_Abort+0x32a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a56      	ldr	r2, [pc, #344]	@ (8006fcc <HAL_DMA_Abort+0x480>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <HAL_DMA_Abort+0x33c>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e007      	b.n	8006e98 <HAL_DMA_Abort+0x34c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e98:	e013      	b.n	8006ec2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e9a:	f7fe feb3 	bl	8005c04 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b05      	cmp	r3, #5
 8006ea6:	d90c      	bls.n	8006ec2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e12d      	b.n	800711e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8006f90 <HAL_DMA_Abort+0x444>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04a      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a2d      	ldr	r2, [pc, #180]	@ (8006f94 <HAL_DMA_Abort+0x448>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d045      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f98 <HAL_DMA_Abort+0x44c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f9c <HAL_DMA_Abort+0x450>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a29      	ldr	r2, [pc, #164]	@ (8006fa0 <HAL_DMA_Abort+0x454>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d036      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a27      	ldr	r2, [pc, #156]	@ (8006fa4 <HAL_DMA_Abort+0x458>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a26      	ldr	r2, [pc, #152]	@ (8006fa8 <HAL_DMA_Abort+0x45c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02c      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a24      	ldr	r2, [pc, #144]	@ (8006fac <HAL_DMA_Abort+0x460>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d027      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a23      	ldr	r2, [pc, #140]	@ (8006fb0 <HAL_DMA_Abort+0x464>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d022      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a21      	ldr	r2, [pc, #132]	@ (8006fb4 <HAL_DMA_Abort+0x468>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01d      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a20      	ldr	r2, [pc, #128]	@ (8006fb8 <HAL_DMA_Abort+0x46c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d018      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_DMA_Abort+0x470>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <HAL_DMA_Abort+0x474>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <HAL_DMA_Abort+0x478>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fc8 <HAL_DMA_Abort+0x47c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_DMA_Abort+0x422>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <HAL_DMA_Abort+0x480>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d101      	bne.n	8006f72 <HAL_DMA_Abort+0x426>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <HAL_DMA_Abort+0x428>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d02b      	beq.n	8006fd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	223f      	movs	r2, #63	@ 0x3f
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	609a      	str	r2, [r3, #8]
 8006f8e:	e02a      	b.n	8006fe6 <HAL_DMA_Abort+0x49a>
 8006f90:	40020010 	.word	0x40020010
 8006f94:	40020028 	.word	0x40020028
 8006f98:	40020040 	.word	0x40020040
 8006f9c:	40020058 	.word	0x40020058
 8006fa0:	40020070 	.word	0x40020070
 8006fa4:	40020088 	.word	0x40020088
 8006fa8:	400200a0 	.word	0x400200a0
 8006fac:	400200b8 	.word	0x400200b8
 8006fb0:	40020410 	.word	0x40020410
 8006fb4:	40020428 	.word	0x40020428
 8006fb8:	40020440 	.word	0x40020440
 8006fbc:	40020458 	.word	0x40020458
 8006fc0:	40020470 	.word	0x40020470
 8006fc4:	40020488 	.word	0x40020488
 8006fc8:	400204a0 	.word	0x400204a0
 8006fcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	2201      	movs	r2, #1
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a4f      	ldr	r2, [pc, #316]	@ (8007128 <HAL_DMA_Abort+0x5dc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d072      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800712c <HAL_DMA_Abort+0x5e0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d06d      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8007130 <HAL_DMA_Abort+0x5e4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d068      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a4a      	ldr	r2, [pc, #296]	@ (8007134 <HAL_DMA_Abort+0x5e8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d063      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a49      	ldr	r2, [pc, #292]	@ (8007138 <HAL_DMA_Abort+0x5ec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d05e      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a47      	ldr	r2, [pc, #284]	@ (800713c <HAL_DMA_Abort+0x5f0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d059      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a46      	ldr	r2, [pc, #280]	@ (8007140 <HAL_DMA_Abort+0x5f4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d054      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a44      	ldr	r2, [pc, #272]	@ (8007144 <HAL_DMA_Abort+0x5f8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d04f      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a43      	ldr	r2, [pc, #268]	@ (8007148 <HAL_DMA_Abort+0x5fc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d04a      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a41      	ldr	r2, [pc, #260]	@ (800714c <HAL_DMA_Abort+0x600>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d045      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a40      	ldr	r2, [pc, #256]	@ (8007150 <HAL_DMA_Abort+0x604>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d040      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a3e      	ldr	r2, [pc, #248]	@ (8007154 <HAL_DMA_Abort+0x608>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d03b      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3d      	ldr	r2, [pc, #244]	@ (8007158 <HAL_DMA_Abort+0x60c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d036      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3b      	ldr	r2, [pc, #236]	@ (800715c <HAL_DMA_Abort+0x610>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d031      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3a      	ldr	r2, [pc, #232]	@ (8007160 <HAL_DMA_Abort+0x614>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d02c      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a38      	ldr	r2, [pc, #224]	@ (8007164 <HAL_DMA_Abort+0x618>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d027      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a37      	ldr	r2, [pc, #220]	@ (8007168 <HAL_DMA_Abort+0x61c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d022      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a35      	ldr	r2, [pc, #212]	@ (800716c <HAL_DMA_Abort+0x620>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a34      	ldr	r2, [pc, #208]	@ (8007170 <HAL_DMA_Abort+0x624>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d018      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a32      	ldr	r2, [pc, #200]	@ (8007174 <HAL_DMA_Abort+0x628>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a31      	ldr	r2, [pc, #196]	@ (8007178 <HAL_DMA_Abort+0x62c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2f      	ldr	r2, [pc, #188]	@ (800717c <HAL_DMA_Abort+0x630>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007180 <HAL_DMA_Abort+0x634>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_DMA_Abort+0x58a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007184 <HAL_DMA_Abort+0x638>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_DMA_Abort+0x58e>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <HAL_DMA_Abort+0x590>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d015      	beq.n	800710c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80070e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007100:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800710a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40020010 	.word	0x40020010
 800712c:	40020028 	.word	0x40020028
 8007130:	40020040 	.word	0x40020040
 8007134:	40020058 	.word	0x40020058
 8007138:	40020070 	.word	0x40020070
 800713c:	40020088 	.word	0x40020088
 8007140:	400200a0 	.word	0x400200a0
 8007144:	400200b8 	.word	0x400200b8
 8007148:	40020410 	.word	0x40020410
 800714c:	40020428 	.word	0x40020428
 8007150:	40020440 	.word	0x40020440
 8007154:	40020458 	.word	0x40020458
 8007158:	40020470 	.word	0x40020470
 800715c:	40020488 	.word	0x40020488
 8007160:	400204a0 	.word	0x400204a0
 8007164:	400204b8 	.word	0x400204b8
 8007168:	58025408 	.word	0x58025408
 800716c:	5802541c 	.word	0x5802541c
 8007170:	58025430 	.word	0x58025430
 8007174:	58025444 	.word	0x58025444
 8007178:	58025458 	.word	0x58025458
 800717c:	5802546c 	.word	0x5802546c
 8007180:	58025480 	.word	0x58025480
 8007184:	58025494 	.word	0x58025494

08007188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	@ 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007194:	4b67      	ldr	r3, [pc, #412]	@ (8007334 <HAL_DMA_IRQHandler+0x1ac>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a67      	ldr	r2, [pc, #412]	@ (8007338 <HAL_DMA_IRQHandler+0x1b0>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	0a9b      	lsrs	r3, r3, #10
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a5f      	ldr	r2, [pc, #380]	@ (800733c <HAL_DMA_IRQHandler+0x1b4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d04a      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a5d      	ldr	r2, [pc, #372]	@ (8007340 <HAL_DMA_IRQHandler+0x1b8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d045      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a5c      	ldr	r2, [pc, #368]	@ (8007344 <HAL_DMA_IRQHandler+0x1bc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d040      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007348 <HAL_DMA_IRQHandler+0x1c0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d03b      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a59      	ldr	r2, [pc, #356]	@ (800734c <HAL_DMA_IRQHandler+0x1c4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d036      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a57      	ldr	r2, [pc, #348]	@ (8007350 <HAL_DMA_IRQHandler+0x1c8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d031      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a56      	ldr	r2, [pc, #344]	@ (8007354 <HAL_DMA_IRQHandler+0x1cc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d02c      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a54      	ldr	r2, [pc, #336]	@ (8007358 <HAL_DMA_IRQHandler+0x1d0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d027      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a53      	ldr	r2, [pc, #332]	@ (800735c <HAL_DMA_IRQHandler+0x1d4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d022      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a51      	ldr	r2, [pc, #324]	@ (8007360 <HAL_DMA_IRQHandler+0x1d8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01d      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a50      	ldr	r2, [pc, #320]	@ (8007364 <HAL_DMA_IRQHandler+0x1dc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d018      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a4e      	ldr	r2, [pc, #312]	@ (8007368 <HAL_DMA_IRQHandler+0x1e0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a4d      	ldr	r2, [pc, #308]	@ (800736c <HAL_DMA_IRQHandler+0x1e4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00e      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a4b      	ldr	r2, [pc, #300]	@ (8007370 <HAL_DMA_IRQHandler+0x1e8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d009      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a4a      	ldr	r2, [pc, #296]	@ (8007374 <HAL_DMA_IRQHandler+0x1ec>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d004      	beq.n	800725a <HAL_DMA_IRQHandler+0xd2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a48      	ldr	r2, [pc, #288]	@ (8007378 <HAL_DMA_IRQHandler+0x1f0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <HAL_DMA_IRQHandler+0xd6>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <HAL_DMA_IRQHandler+0xd8>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 842b 	beq.w	8007abc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	2208      	movs	r2, #8
 8007270:	409a      	lsls	r2, r3
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80a2 	beq.w	80073c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2e      	ldr	r2, [pc, #184]	@ (800733c <HAL_DMA_IRQHandler+0x1b4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d04a      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2d      	ldr	r2, [pc, #180]	@ (8007340 <HAL_DMA_IRQHandler+0x1b8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d045      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a2b      	ldr	r2, [pc, #172]	@ (8007344 <HAL_DMA_IRQHandler+0x1bc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d040      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2a      	ldr	r2, [pc, #168]	@ (8007348 <HAL_DMA_IRQHandler+0x1c0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d03b      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a28      	ldr	r2, [pc, #160]	@ (800734c <HAL_DMA_IRQHandler+0x1c4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d036      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a27      	ldr	r2, [pc, #156]	@ (8007350 <HAL_DMA_IRQHandler+0x1c8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d031      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a25      	ldr	r2, [pc, #148]	@ (8007354 <HAL_DMA_IRQHandler+0x1cc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d02c      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a24      	ldr	r2, [pc, #144]	@ (8007358 <HAL_DMA_IRQHandler+0x1d0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d027      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a22      	ldr	r2, [pc, #136]	@ (800735c <HAL_DMA_IRQHandler+0x1d4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d022      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <HAL_DMA_IRQHandler+0x1d8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d01d      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007364 <HAL_DMA_IRQHandler+0x1dc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d018      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007368 <HAL_DMA_IRQHandler+0x1e0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1c      	ldr	r2, [pc, #112]	@ (800736c <HAL_DMA_IRQHandler+0x1e4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00e      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1b      	ldr	r2, [pc, #108]	@ (8007370 <HAL_DMA_IRQHandler+0x1e8>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d009      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a19      	ldr	r2, [pc, #100]	@ (8007374 <HAL_DMA_IRQHandler+0x1ec>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <HAL_DMA_IRQHandler+0x194>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a18      	ldr	r2, [pc, #96]	@ (8007378 <HAL_DMA_IRQHandler+0x1f0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d12f      	bne.n	800737c <HAL_DMA_IRQHandler+0x1f4>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e02e      	b.n	8007390 <HAL_DMA_IRQHandler+0x208>
 8007332:	bf00      	nop
 8007334:	24000058 	.word	0x24000058
 8007338:	1b4e81b5 	.word	0x1b4e81b5
 800733c:	40020010 	.word	0x40020010
 8007340:	40020028 	.word	0x40020028
 8007344:	40020040 	.word	0x40020040
 8007348:	40020058 	.word	0x40020058
 800734c:	40020070 	.word	0x40020070
 8007350:	40020088 	.word	0x40020088
 8007354:	400200a0 	.word	0x400200a0
 8007358:	400200b8 	.word	0x400200b8
 800735c:	40020410 	.word	0x40020410
 8007360:	40020428 	.word	0x40020428
 8007364:	40020440 	.word	0x40020440
 8007368:	40020458 	.word	0x40020458
 800736c:	40020470 	.word	0x40020470
 8007370:	40020488 	.word	0x40020488
 8007374:	400204a0 	.word	0x400204a0
 8007378:	400204b8 	.word	0x400204b8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0204 	bic.w	r2, r2, #4
 80073a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2208      	movs	r2, #8
 80073ae:	409a      	lsls	r2, r3
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b8:	f043 0201 	orr.w	r2, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	fa22 f303 	lsr.w	r3, r2, r3
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d06e      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a69      	ldr	r2, [pc, #420]	@ (8007580 <HAL_DMA_IRQHandler+0x3f8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04a      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a67      	ldr	r2, [pc, #412]	@ (8007584 <HAL_DMA_IRQHandler+0x3fc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d045      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a66      	ldr	r2, [pc, #408]	@ (8007588 <HAL_DMA_IRQHandler+0x400>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d040      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a64      	ldr	r2, [pc, #400]	@ (800758c <HAL_DMA_IRQHandler+0x404>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d03b      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a63      	ldr	r2, [pc, #396]	@ (8007590 <HAL_DMA_IRQHandler+0x408>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d036      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a61      	ldr	r2, [pc, #388]	@ (8007594 <HAL_DMA_IRQHandler+0x40c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a60      	ldr	r2, [pc, #384]	@ (8007598 <HAL_DMA_IRQHandler+0x410>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d02c      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a5e      	ldr	r2, [pc, #376]	@ (800759c <HAL_DMA_IRQHandler+0x414>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d027      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a5d      	ldr	r2, [pc, #372]	@ (80075a0 <HAL_DMA_IRQHandler+0x418>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a5b      	ldr	r2, [pc, #364]	@ (80075a4 <HAL_DMA_IRQHandler+0x41c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a5a      	ldr	r2, [pc, #360]	@ (80075a8 <HAL_DMA_IRQHandler+0x420>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a58      	ldr	r2, [pc, #352]	@ (80075ac <HAL_DMA_IRQHandler+0x424>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a57      	ldr	r2, [pc, #348]	@ (80075b0 <HAL_DMA_IRQHandler+0x428>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a55      	ldr	r2, [pc, #340]	@ (80075b4 <HAL_DMA_IRQHandler+0x42c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a54      	ldr	r2, [pc, #336]	@ (80075b8 <HAL_DMA_IRQHandler+0x430>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_DMA_IRQHandler+0x2ee>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a52      	ldr	r2, [pc, #328]	@ (80075bc <HAL_DMA_IRQHandler+0x434>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10a      	bne.n	800748c <HAL_DMA_IRQHandler+0x304>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e003      	b.n	8007494 <HAL_DMA_IRQHandler+0x30c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2201      	movs	r2, #1
 80074a2:	409a      	lsls	r2, r3
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ac:	f043 0202 	orr.w	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2204      	movs	r2, #4
 80074be:	409a      	lsls	r2, r3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 808f 	beq.w	80075e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007580 <HAL_DMA_IRQHandler+0x3f8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d04a      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007584 <HAL_DMA_IRQHandler+0x3fc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d045      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a29      	ldr	r2, [pc, #164]	@ (8007588 <HAL_DMA_IRQHandler+0x400>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d040      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a27      	ldr	r2, [pc, #156]	@ (800758c <HAL_DMA_IRQHandler+0x404>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d03b      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a26      	ldr	r2, [pc, #152]	@ (8007590 <HAL_DMA_IRQHandler+0x408>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d036      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <HAL_DMA_IRQHandler+0x40c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d031      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <HAL_DMA_IRQHandler+0x410>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d02c      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a21      	ldr	r2, [pc, #132]	@ (800759c <HAL_DMA_IRQHandler+0x414>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d027      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a20      	ldr	r2, [pc, #128]	@ (80075a0 <HAL_DMA_IRQHandler+0x418>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d022      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1e      	ldr	r2, [pc, #120]	@ (80075a4 <HAL_DMA_IRQHandler+0x41c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01d      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1d      	ldr	r2, [pc, #116]	@ (80075a8 <HAL_DMA_IRQHandler+0x420>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d018      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <HAL_DMA_IRQHandler+0x424>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1a      	ldr	r2, [pc, #104]	@ (80075b0 <HAL_DMA_IRQHandler+0x428>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00e      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a18      	ldr	r2, [pc, #96]	@ (80075b4 <HAL_DMA_IRQHandler+0x42c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	@ (80075b8 <HAL_DMA_IRQHandler+0x430>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_DMA_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a15      	ldr	r2, [pc, #84]	@ (80075bc <HAL_DMA_IRQHandler+0x434>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d12a      	bne.n	80075c0 <HAL_DMA_IRQHandler+0x438>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e023      	b.n	80075c8 <HAL_DMA_IRQHandler+0x440>
 8007580:	40020010 	.word	0x40020010
 8007584:	40020028 	.word	0x40020028
 8007588:	40020040 	.word	0x40020040
 800758c:	40020058 	.word	0x40020058
 8007590:	40020070 	.word	0x40020070
 8007594:	40020088 	.word	0x40020088
 8007598:	400200a0 	.word	0x400200a0
 800759c:	400200b8 	.word	0x400200b8
 80075a0:	40020410 	.word	0x40020410
 80075a4:	40020428 	.word	0x40020428
 80075a8:	40020440 	.word	0x40020440
 80075ac:	40020458 	.word	0x40020458
 80075b0:	40020470 	.word	0x40020470
 80075b4:	40020488 	.word	0x40020488
 80075b8:	400204a0 	.word	0x400204a0
 80075bc:	400204b8 	.word	0x400204b8
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2204      	movs	r2, #4
 80075d6:	409a      	lsls	r2, r3
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e0:	f043 0204 	orr.w	r2, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	2210      	movs	r2, #16
 80075f2:	409a      	lsls	r2, r3
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80a6 	beq.w	800774a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a85      	ldr	r2, [pc, #532]	@ (8007818 <HAL_DMA_IRQHandler+0x690>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d04a      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a83      	ldr	r2, [pc, #524]	@ (800781c <HAL_DMA_IRQHandler+0x694>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d045      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a82      	ldr	r2, [pc, #520]	@ (8007820 <HAL_DMA_IRQHandler+0x698>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d040      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a80      	ldr	r2, [pc, #512]	@ (8007824 <HAL_DMA_IRQHandler+0x69c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d03b      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a7f      	ldr	r2, [pc, #508]	@ (8007828 <HAL_DMA_IRQHandler+0x6a0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d036      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a7d      	ldr	r2, [pc, #500]	@ (800782c <HAL_DMA_IRQHandler+0x6a4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d031      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a7c      	ldr	r2, [pc, #496]	@ (8007830 <HAL_DMA_IRQHandler+0x6a8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d02c      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a7a      	ldr	r2, [pc, #488]	@ (8007834 <HAL_DMA_IRQHandler+0x6ac>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d027      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a79      	ldr	r2, [pc, #484]	@ (8007838 <HAL_DMA_IRQHandler+0x6b0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d022      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a77      	ldr	r2, [pc, #476]	@ (800783c <HAL_DMA_IRQHandler+0x6b4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d01d      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a76      	ldr	r2, [pc, #472]	@ (8007840 <HAL_DMA_IRQHandler+0x6b8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d018      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a74      	ldr	r2, [pc, #464]	@ (8007844 <HAL_DMA_IRQHandler+0x6bc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a73      	ldr	r2, [pc, #460]	@ (8007848 <HAL_DMA_IRQHandler+0x6c0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00e      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a71      	ldr	r2, [pc, #452]	@ (800784c <HAL_DMA_IRQHandler+0x6c4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d009      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a70      	ldr	r2, [pc, #448]	@ (8007850 <HAL_DMA_IRQHandler+0x6c8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_DMA_IRQHandler+0x516>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6e      	ldr	r2, [pc, #440]	@ (8007854 <HAL_DMA_IRQHandler+0x6cc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d10a      	bne.n	80076b4 <HAL_DMA_IRQHandler+0x52c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	e009      	b.n	80076c8 <HAL_DMA_IRQHandler+0x540>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bf14      	ite	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	2300      	moveq	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d03e      	beq.n	800774a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	2210      	movs	r2, #16
 80076d6:	409a      	lsls	r2, r3
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d018      	beq.n	800771c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d108      	bne.n	800770a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d024      	beq.n	800774a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
 8007708:	e01f      	b.n	800774a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01b      	beq.n	800774a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	e016      	b.n	800774a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d107      	bne.n	800773a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0208 	bic.w	r2, r2, #8
 8007738:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2220      	movs	r2, #32
 8007754:	409a      	lsls	r2, r3
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8110 	beq.w	8007980 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2c      	ldr	r2, [pc, #176]	@ (8007818 <HAL_DMA_IRQHandler+0x690>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a2b      	ldr	r2, [pc, #172]	@ (800781c <HAL_DMA_IRQHandler+0x694>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a29      	ldr	r2, [pc, #164]	@ (8007820 <HAL_DMA_IRQHandler+0x698>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a28      	ldr	r2, [pc, #160]	@ (8007824 <HAL_DMA_IRQHandler+0x69c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a26      	ldr	r2, [pc, #152]	@ (8007828 <HAL_DMA_IRQHandler+0x6a0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a25      	ldr	r2, [pc, #148]	@ (800782c <HAL_DMA_IRQHandler+0x6a4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a23      	ldr	r2, [pc, #140]	@ (8007830 <HAL_DMA_IRQHandler+0x6a8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a22      	ldr	r2, [pc, #136]	@ (8007834 <HAL_DMA_IRQHandler+0x6ac>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a20      	ldr	r2, [pc, #128]	@ (8007838 <HAL_DMA_IRQHandler+0x6b0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <HAL_DMA_IRQHandler+0x6b4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007840 <HAL_DMA_IRQHandler+0x6b8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007844 <HAL_DMA_IRQHandler+0x6bc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007848 <HAL_DMA_IRQHandler+0x6c0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a19      	ldr	r2, [pc, #100]	@ (800784c <HAL_DMA_IRQHandler+0x6c4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a17      	ldr	r2, [pc, #92]	@ (8007850 <HAL_DMA_IRQHandler+0x6c8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_DMA_IRQHandler+0x678>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a16      	ldr	r2, [pc, #88]	@ (8007854 <HAL_DMA_IRQHandler+0x6cc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d12b      	bne.n	8007858 <HAL_DMA_IRQHandler+0x6d0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e02a      	b.n	800786c <HAL_DMA_IRQHandler+0x6e4>
 8007816:	bf00      	nop
 8007818:	40020010 	.word	0x40020010
 800781c:	40020028 	.word	0x40020028
 8007820:	40020040 	.word	0x40020040
 8007824:	40020058 	.word	0x40020058
 8007828:	40020070 	.word	0x40020070
 800782c:	40020088 	.word	0x40020088
 8007830:	400200a0 	.word	0x400200a0
 8007834:	400200b8 	.word	0x400200b8
 8007838:	40020410 	.word	0x40020410
 800783c:	40020428 	.word	0x40020428
 8007840:	40020440 	.word	0x40020440
 8007844:	40020458 	.word	0x40020458
 8007848:	40020470 	.word	0x40020470
 800784c:	40020488 	.word	0x40020488
 8007850:	400204a0 	.word	0x400204a0
 8007854:	400204b8 	.word	0x400204b8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	bf14      	ite	ne
 8007866:	2301      	movne	r3, #1
 8007868:	2300      	moveq	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8087 	beq.w	8007980 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2220      	movs	r2, #32
 800787c:	409a      	lsls	r2, r3
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b04      	cmp	r3, #4
 800788c:	d139      	bne.n	8007902 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0216 	bic.w	r2, r2, #22
 800789c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_DMA_IRQHandler+0x736>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0208 	bic.w	r2, r2, #8
 80078cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	223f      	movs	r2, #63	@ 0x3f
 80078d8:	409a      	lsls	r2, r3
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 834a 	beq.w	8007f8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
          }
          return;
 8007900:	e344      	b.n	8007f8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d018      	beq.n	8007942 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d108      	bne.n	8007930 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02c      	beq.n	8007980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
 800792e:	e027      	b.n	8007980 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d023      	beq.n	8007980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	e01e      	b.n	8007980 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0210 	bic.w	r2, r2, #16
 800795e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8306 	beq.w	8007f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8088 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2204      	movs	r2, #4
 800799c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a7a      	ldr	r2, [pc, #488]	@ (8007b90 <HAL_DMA_IRQHandler+0xa08>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d04a      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a79      	ldr	r2, [pc, #484]	@ (8007b94 <HAL_DMA_IRQHandler+0xa0c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d045      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a77      	ldr	r2, [pc, #476]	@ (8007b98 <HAL_DMA_IRQHandler+0xa10>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d040      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a76      	ldr	r2, [pc, #472]	@ (8007b9c <HAL_DMA_IRQHandler+0xa14>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d03b      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a74      	ldr	r2, [pc, #464]	@ (8007ba0 <HAL_DMA_IRQHandler+0xa18>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d036      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a73      	ldr	r2, [pc, #460]	@ (8007ba4 <HAL_DMA_IRQHandler+0xa1c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d031      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a71      	ldr	r2, [pc, #452]	@ (8007ba8 <HAL_DMA_IRQHandler+0xa20>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d02c      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a70      	ldr	r2, [pc, #448]	@ (8007bac <HAL_DMA_IRQHandler+0xa24>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d027      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a6e      	ldr	r2, [pc, #440]	@ (8007bb0 <HAL_DMA_IRQHandler+0xa28>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d022      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a6d      	ldr	r2, [pc, #436]	@ (8007bb4 <HAL_DMA_IRQHandler+0xa2c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d01d      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a6b      	ldr	r2, [pc, #428]	@ (8007bb8 <HAL_DMA_IRQHandler+0xa30>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d018      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a6a      	ldr	r2, [pc, #424]	@ (8007bbc <HAL_DMA_IRQHandler+0xa34>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a68      	ldr	r2, [pc, #416]	@ (8007bc0 <HAL_DMA_IRQHandler+0xa38>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00e      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a67      	ldr	r2, [pc, #412]	@ (8007bc4 <HAL_DMA_IRQHandler+0xa3c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a65      	ldr	r2, [pc, #404]	@ (8007bc8 <HAL_DMA_IRQHandler+0xa40>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x8b8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a64      	ldr	r2, [pc, #400]	@ (8007bcc <HAL_DMA_IRQHandler+0xa44>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <HAL_DMA_IRQHandler+0x8ca>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0201 	bic.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	e007      	b.n	8007a62 <HAL_DMA_IRQHandler+0x8da>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d307      	bcc.n	8007a7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f2      	bne.n	8007a62 <HAL_DMA_IRQHandler+0x8da>
 8007a7c:	e000      	b.n	8007a80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007a7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2203      	movs	r2, #3
 8007a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007a96:	e003      	b.n	8007aa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8272 	beq.w	8007f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
 8007aba:	e26c      	b.n	8007f96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a43      	ldr	r2, [pc, #268]	@ (8007bd0 <HAL_DMA_IRQHandler+0xa48>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d022      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a42      	ldr	r2, [pc, #264]	@ (8007bd4 <HAL_DMA_IRQHandler+0xa4c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d01d      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a40      	ldr	r2, [pc, #256]	@ (8007bd8 <HAL_DMA_IRQHandler+0xa50>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a3f      	ldr	r2, [pc, #252]	@ (8007bdc <HAL_DMA_IRQHandler+0xa54>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8007be0 <HAL_DMA_IRQHandler+0xa58>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a3c      	ldr	r2, [pc, #240]	@ (8007be4 <HAL_DMA_IRQHandler+0xa5c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a3a      	ldr	r2, [pc, #232]	@ (8007be8 <HAL_DMA_IRQHandler+0xa60>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x984>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a39      	ldr	r2, [pc, #228]	@ (8007bec <HAL_DMA_IRQHandler+0xa64>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d101      	bne.n	8007b10 <HAL_DMA_IRQHandler+0x988>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <HAL_DMA_IRQHandler+0x98a>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 823f 	beq.w	8007f96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b24:	f003 031f 	and.w	r3, r3, #31
 8007b28:	2204      	movs	r2, #4
 8007b2a:	409a      	lsls	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80cd 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xb48>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80c7 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d049      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8210 	beq.w	8007f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b78:	e20a      	b.n	8007f90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8206 	beq.w	8007f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b8c:	e200      	b.n	8007f90 <HAL_DMA_IRQHandler+0xe08>
 8007b8e:	bf00      	nop
 8007b90:	40020010 	.word	0x40020010
 8007b94:	40020028 	.word	0x40020028
 8007b98:	40020040 	.word	0x40020040
 8007b9c:	40020058 	.word	0x40020058
 8007ba0:	40020070 	.word	0x40020070
 8007ba4:	40020088 	.word	0x40020088
 8007ba8:	400200a0 	.word	0x400200a0
 8007bac:	400200b8 	.word	0x400200b8
 8007bb0:	40020410 	.word	0x40020410
 8007bb4:	40020428 	.word	0x40020428
 8007bb8:	40020440 	.word	0x40020440
 8007bbc:	40020458 	.word	0x40020458
 8007bc0:	40020470 	.word	0x40020470
 8007bc4:	40020488 	.word	0x40020488
 8007bc8:	400204a0 	.word	0x400204a0
 8007bcc:	400204b8 	.word	0x400204b8
 8007bd0:	58025408 	.word	0x58025408
 8007bd4:	5802541c 	.word	0x5802541c
 8007bd8:	58025430 	.word	0x58025430
 8007bdc:	58025444 	.word	0x58025444
 8007be0:	58025458 	.word	0x58025458
 8007be4:	5802546c 	.word	0x5802546c
 8007be8:	58025480 	.word	0x58025480
 8007bec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d160      	bne.n	8007cbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8007dfc <HAL_DMA_IRQHandler+0xc74>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d04a      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a7d      	ldr	r2, [pc, #500]	@ (8007e00 <HAL_DMA_IRQHandler+0xc78>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d045      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a7c      	ldr	r2, [pc, #496]	@ (8007e04 <HAL_DMA_IRQHandler+0xc7c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d040      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8007e08 <HAL_DMA_IRQHandler+0xc80>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d03b      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a79      	ldr	r2, [pc, #484]	@ (8007e0c <HAL_DMA_IRQHandler+0xc84>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d036      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a77      	ldr	r2, [pc, #476]	@ (8007e10 <HAL_DMA_IRQHandler+0xc88>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d031      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a76      	ldr	r2, [pc, #472]	@ (8007e14 <HAL_DMA_IRQHandler+0xc8c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d02c      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a74      	ldr	r2, [pc, #464]	@ (8007e18 <HAL_DMA_IRQHandler+0xc90>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d027      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a73      	ldr	r2, [pc, #460]	@ (8007e1c <HAL_DMA_IRQHandler+0xc94>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d022      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a71      	ldr	r2, [pc, #452]	@ (8007e20 <HAL_DMA_IRQHandler+0xc98>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d01d      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a70      	ldr	r2, [pc, #448]	@ (8007e24 <HAL_DMA_IRQHandler+0xc9c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d018      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8007e28 <HAL_DMA_IRQHandler+0xca0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a6d      	ldr	r2, [pc, #436]	@ (8007e2c <HAL_DMA_IRQHandler+0xca4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00e      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a6b      	ldr	r2, [pc, #428]	@ (8007e30 <HAL_DMA_IRQHandler+0xca8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d009      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6a      	ldr	r2, [pc, #424]	@ (8007e34 <HAL_DMA_IRQHandler+0xcac>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d004      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xb12>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a68      	ldr	r2, [pc, #416]	@ (8007e38 <HAL_DMA_IRQHandler+0xcb0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d108      	bne.n	8007cac <HAL_DMA_IRQHandler+0xb24>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0208 	bic.w	r2, r2, #8
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e007      	b.n	8007cbc <HAL_DMA_IRQHandler+0xb34>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0204 	bic.w	r2, r2, #4
 8007cba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 8165 	beq.w	8007f90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cce:	e15f      	b.n	8007f90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	2202      	movs	r2, #2
 8007cda:	409a      	lsls	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80c5 	beq.w	8007e70 <HAL_DMA_IRQHandler+0xce8>
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80bf 	beq.w	8007e70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	409a      	lsls	r2, r3
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 813a 	beq.w	8007f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d28:	e134      	b.n	8007f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8130 	beq.w	8007f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d3c:	e12a      	b.n	8007f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 8089 	bne.w	8007e5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dfc <HAL_DMA_IRQHandler+0xc74>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d04a      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a29      	ldr	r2, [pc, #164]	@ (8007e00 <HAL_DMA_IRQHandler+0xc78>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d045      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a28      	ldr	r2, [pc, #160]	@ (8007e04 <HAL_DMA_IRQHandler+0xc7c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a26      	ldr	r2, [pc, #152]	@ (8007e08 <HAL_DMA_IRQHandler+0xc80>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d03b      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a25      	ldr	r2, [pc, #148]	@ (8007e0c <HAL_DMA_IRQHandler+0xc84>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d036      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a23      	ldr	r2, [pc, #140]	@ (8007e10 <HAL_DMA_IRQHandler+0xc88>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d031      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a22      	ldr	r2, [pc, #136]	@ (8007e14 <HAL_DMA_IRQHandler+0xc8c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d02c      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a20      	ldr	r2, [pc, #128]	@ (8007e18 <HAL_DMA_IRQHandler+0xc90>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d027      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e1c <HAL_DMA_IRQHandler+0xc94>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e20 <HAL_DMA_IRQHandler+0xc98>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01d      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e24 <HAL_DMA_IRQHandler+0xc9c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e28 <HAL_DMA_IRQHandler+0xca0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <HAL_DMA_IRQHandler+0xca4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	@ (8007e30 <HAL_DMA_IRQHandler+0xca8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a16      	ldr	r2, [pc, #88]	@ (8007e34 <HAL_DMA_IRQHandler+0xcac>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_DMA_IRQHandler+0xc62>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a14      	ldr	r2, [pc, #80]	@ (8007e38 <HAL_DMA_IRQHandler+0xcb0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d128      	bne.n	8007e3c <HAL_DMA_IRQHandler+0xcb4>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0214 	bic.w	r2, r2, #20
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e027      	b.n	8007e4c <HAL_DMA_IRQHandler+0xcc4>
 8007dfc:	40020010 	.word	0x40020010
 8007e00:	40020028 	.word	0x40020028
 8007e04:	40020040 	.word	0x40020040
 8007e08:	40020058 	.word	0x40020058
 8007e0c:	40020070 	.word	0x40020070
 8007e10:	40020088 	.word	0x40020088
 8007e14:	400200a0 	.word	0x400200a0
 8007e18:	400200b8 	.word	0x400200b8
 8007e1c:	40020410 	.word	0x40020410
 8007e20:	40020428 	.word	0x40020428
 8007e24:	40020440 	.word	0x40020440
 8007e28:	40020458 	.word	0x40020458
 8007e2c:	40020470 	.word	0x40020470
 8007e30:	40020488 	.word	0x40020488
 8007e34:	400204a0 	.word	0x400204a0
 8007e38:	400204b8 	.word	0x400204b8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 020a 	bic.w	r2, r2, #10
 8007e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8097 	beq.w	8007f94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e6e:	e091      	b.n	8007f94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2208      	movs	r2, #8
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8088 	beq.w	8007f96 <HAL_DMA_IRQHandler+0xe0e>
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8082 	beq.w	8007f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a41      	ldr	r2, [pc, #260]	@ (8007f9c <HAL_DMA_IRQHandler+0xe14>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d04a      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8007fa0 <HAL_DMA_IRQHandler+0xe18>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d045      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8007fa4 <HAL_DMA_IRQHandler+0xe1c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d040      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fa8 <HAL_DMA_IRQHandler+0xe20>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d03b      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8007fac <HAL_DMA_IRQHandler+0xe24>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d036      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a39      	ldr	r2, [pc, #228]	@ (8007fb0 <HAL_DMA_IRQHandler+0xe28>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d031      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a38      	ldr	r2, [pc, #224]	@ (8007fb4 <HAL_DMA_IRQHandler+0xe2c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d02c      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a36      	ldr	r2, [pc, #216]	@ (8007fb8 <HAL_DMA_IRQHandler+0xe30>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d027      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a35      	ldr	r2, [pc, #212]	@ (8007fbc <HAL_DMA_IRQHandler+0xe34>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d022      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a33      	ldr	r2, [pc, #204]	@ (8007fc0 <HAL_DMA_IRQHandler+0xe38>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01d      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a32      	ldr	r2, [pc, #200]	@ (8007fc4 <HAL_DMA_IRQHandler+0xe3c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d018      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a30      	ldr	r2, [pc, #192]	@ (8007fc8 <HAL_DMA_IRQHandler+0xe40>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8007fcc <HAL_DMA_IRQHandler+0xe44>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00e      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2d      	ldr	r2, [pc, #180]	@ (8007fd0 <HAL_DMA_IRQHandler+0xe48>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d009      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd4 <HAL_DMA_IRQHandler+0xe4c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d004      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xdaa>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd8 <HAL_DMA_IRQHandler+0xe50>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d108      	bne.n	8007f44 <HAL_DMA_IRQHandler+0xdbc>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 021c 	bic.w	r2, r2, #28
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e007      	b.n	8007f54 <HAL_DMA_IRQHandler+0xdcc>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 020e 	bic.w	r2, r2, #14
 8007f52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
 8007f8a:	e004      	b.n	8007f96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007f8c:	bf00      	nop
 8007f8e:	e002      	b.n	8007f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f90:	bf00      	nop
 8007f92:	e000      	b.n	8007f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f96:	3728      	adds	r7, #40	@ 0x28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	40020010 	.word	0x40020010
 8007fa0:	40020028 	.word	0x40020028
 8007fa4:	40020040 	.word	0x40020040
 8007fa8:	40020058 	.word	0x40020058
 8007fac:	40020070 	.word	0x40020070
 8007fb0:	40020088 	.word	0x40020088
 8007fb4:	400200a0 	.word	0x400200a0
 8007fb8:	400200b8 	.word	0x400200b8
 8007fbc:	40020410 	.word	0x40020410
 8007fc0:	40020428 	.word	0x40020428
 8007fc4:	40020440 	.word	0x40020440
 8007fc8:	40020458 	.word	0x40020458
 8007fcc:	40020470 	.word	0x40020470
 8007fd0:	40020488 	.word	0x40020488
 8007fd4:	400204a0 	.word	0x400204a0
 8007fd8:	400204b8 	.word	0x400204b8

08007fdc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008006:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a7f      	ldr	r2, [pc, #508]	@ (8008210 <DMA_SetConfig+0x21c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d072      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a7d      	ldr	r2, [pc, #500]	@ (8008214 <DMA_SetConfig+0x220>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d06d      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a7c      	ldr	r2, [pc, #496]	@ (8008218 <DMA_SetConfig+0x224>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d068      	beq.n	80080fe <DMA_SetConfig+0x10a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a7a      	ldr	r2, [pc, #488]	@ (800821c <DMA_SetConfig+0x228>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d063      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a79      	ldr	r2, [pc, #484]	@ (8008220 <DMA_SetConfig+0x22c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d05e      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a77      	ldr	r2, [pc, #476]	@ (8008224 <DMA_SetConfig+0x230>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d059      	beq.n	80080fe <DMA_SetConfig+0x10a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a76      	ldr	r2, [pc, #472]	@ (8008228 <DMA_SetConfig+0x234>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d054      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a74      	ldr	r2, [pc, #464]	@ (800822c <DMA_SetConfig+0x238>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d04f      	beq.n	80080fe <DMA_SetConfig+0x10a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a73      	ldr	r2, [pc, #460]	@ (8008230 <DMA_SetConfig+0x23c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d04a      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a71      	ldr	r2, [pc, #452]	@ (8008234 <DMA_SetConfig+0x240>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d045      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a70      	ldr	r2, [pc, #448]	@ (8008238 <DMA_SetConfig+0x244>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d040      	beq.n	80080fe <DMA_SetConfig+0x10a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a6e      	ldr	r2, [pc, #440]	@ (800823c <DMA_SetConfig+0x248>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d03b      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a6d      	ldr	r2, [pc, #436]	@ (8008240 <DMA_SetConfig+0x24c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d036      	beq.n	80080fe <DMA_SetConfig+0x10a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a6b      	ldr	r2, [pc, #428]	@ (8008244 <DMA_SetConfig+0x250>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d031      	beq.n	80080fe <DMA_SetConfig+0x10a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a6a      	ldr	r2, [pc, #424]	@ (8008248 <DMA_SetConfig+0x254>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d02c      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a68      	ldr	r2, [pc, #416]	@ (800824c <DMA_SetConfig+0x258>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d027      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a67      	ldr	r2, [pc, #412]	@ (8008250 <DMA_SetConfig+0x25c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d022      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a65      	ldr	r2, [pc, #404]	@ (8008254 <DMA_SetConfig+0x260>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d01d      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a64      	ldr	r2, [pc, #400]	@ (8008258 <DMA_SetConfig+0x264>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d018      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a62      	ldr	r2, [pc, #392]	@ (800825c <DMA_SetConfig+0x268>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d013      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a61      	ldr	r2, [pc, #388]	@ (8008260 <DMA_SetConfig+0x26c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00e      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a5f      	ldr	r2, [pc, #380]	@ (8008264 <DMA_SetConfig+0x270>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d009      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008268 <DMA_SetConfig+0x274>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d004      	beq.n	80080fe <DMA_SetConfig+0x10a>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a5c      	ldr	r2, [pc, #368]	@ (800826c <DMA_SetConfig+0x278>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d101      	bne.n	8008102 <DMA_SetConfig+0x10e>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <DMA_SetConfig+0x110>
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008110:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008122:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a39      	ldr	r2, [pc, #228]	@ (8008210 <DMA_SetConfig+0x21c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d04a      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a38      	ldr	r2, [pc, #224]	@ (8008214 <DMA_SetConfig+0x220>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d045      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a36      	ldr	r2, [pc, #216]	@ (8008218 <DMA_SetConfig+0x224>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d040      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a35      	ldr	r2, [pc, #212]	@ (800821c <DMA_SetConfig+0x228>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d03b      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a33      	ldr	r2, [pc, #204]	@ (8008220 <DMA_SetConfig+0x22c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d036      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <DMA_SetConfig+0x230>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d031      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a30      	ldr	r2, [pc, #192]	@ (8008228 <DMA_SetConfig+0x234>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02c      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2f      	ldr	r2, [pc, #188]	@ (800822c <DMA_SetConfig+0x238>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d027      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2d      	ldr	r2, [pc, #180]	@ (8008230 <DMA_SetConfig+0x23c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d022      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2c      	ldr	r2, [pc, #176]	@ (8008234 <DMA_SetConfig+0x240>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d01d      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2a      	ldr	r2, [pc, #168]	@ (8008238 <DMA_SetConfig+0x244>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a29      	ldr	r2, [pc, #164]	@ (800823c <DMA_SetConfig+0x248>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d013      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a27      	ldr	r2, [pc, #156]	@ (8008240 <DMA_SetConfig+0x24c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a26      	ldr	r2, [pc, #152]	@ (8008244 <DMA_SetConfig+0x250>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a24      	ldr	r2, [pc, #144]	@ (8008248 <DMA_SetConfig+0x254>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <DMA_SetConfig+0x1d0>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a23      	ldr	r2, [pc, #140]	@ (800824c <DMA_SetConfig+0x258>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d101      	bne.n	80081c8 <DMA_SetConfig+0x1d4>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <DMA_SetConfig+0x1d6>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d059      	beq.n	8008282 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081d2:	f003 031f 	and.w	r3, r3, #31
 80081d6:	223f      	movs	r2, #63	@ 0x3f
 80081d8:	409a      	lsls	r2, r3
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b40      	cmp	r3, #64	@ 0x40
 80081fc:	d138      	bne.n	8008270 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800820e:	e086      	b.n	800831e <DMA_SetConfig+0x32a>
 8008210:	40020010 	.word	0x40020010
 8008214:	40020028 	.word	0x40020028
 8008218:	40020040 	.word	0x40020040
 800821c:	40020058 	.word	0x40020058
 8008220:	40020070 	.word	0x40020070
 8008224:	40020088 	.word	0x40020088
 8008228:	400200a0 	.word	0x400200a0
 800822c:	400200b8 	.word	0x400200b8
 8008230:	40020410 	.word	0x40020410
 8008234:	40020428 	.word	0x40020428
 8008238:	40020440 	.word	0x40020440
 800823c:	40020458 	.word	0x40020458
 8008240:	40020470 	.word	0x40020470
 8008244:	40020488 	.word	0x40020488
 8008248:	400204a0 	.word	0x400204a0
 800824c:	400204b8 	.word	0x400204b8
 8008250:	58025408 	.word	0x58025408
 8008254:	5802541c 	.word	0x5802541c
 8008258:	58025430 	.word	0x58025430
 800825c:	58025444 	.word	0x58025444
 8008260:	58025458 	.word	0x58025458
 8008264:	5802546c 	.word	0x5802546c
 8008268:	58025480 	.word	0x58025480
 800826c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
}
 8008280:	e04d      	b.n	800831e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a29      	ldr	r2, [pc, #164]	@ (800832c <DMA_SetConfig+0x338>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d022      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a27      	ldr	r2, [pc, #156]	@ (8008330 <DMA_SetConfig+0x33c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a26      	ldr	r2, [pc, #152]	@ (8008334 <DMA_SetConfig+0x340>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d018      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a24      	ldr	r2, [pc, #144]	@ (8008338 <DMA_SetConfig+0x344>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a23      	ldr	r2, [pc, #140]	@ (800833c <DMA_SetConfig+0x348>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a21      	ldr	r2, [pc, #132]	@ (8008340 <DMA_SetConfig+0x34c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <DMA_SetConfig+0x350>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <DMA_SetConfig+0x2de>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008348 <DMA_SetConfig+0x354>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d101      	bne.n	80082d6 <DMA_SetConfig+0x2e2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <DMA_SetConfig+0x2e4>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d020      	beq.n	800831e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2201      	movs	r2, #1
 80082e6:	409a      	lsls	r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b40      	cmp	r3, #64	@ 0x40
 80082fa:	d108      	bne.n	800830e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	60da      	str	r2, [r3, #12]
}
 800830c:	e007      	b.n	800831e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	60da      	str	r2, [r3, #12]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	58025408 	.word	0x58025408
 8008330:	5802541c 	.word	0x5802541c
 8008334:	58025430 	.word	0x58025430
 8008338:	58025444 	.word	0x58025444
 800833c:	58025458 	.word	0x58025458
 8008340:	5802546c 	.word	0x5802546c
 8008344:	58025480 	.word	0x58025480
 8008348:	58025494 	.word	0x58025494

0800834c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a42      	ldr	r2, [pc, #264]	@ (8008464 <DMA_CalcBaseAndBitshift+0x118>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d04a      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a41      	ldr	r2, [pc, #260]	@ (8008468 <DMA_CalcBaseAndBitshift+0x11c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d045      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a3f      	ldr	r2, [pc, #252]	@ (800846c <DMA_CalcBaseAndBitshift+0x120>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d040      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a3e      	ldr	r2, [pc, #248]	@ (8008470 <DMA_CalcBaseAndBitshift+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d03b      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a3c      	ldr	r2, [pc, #240]	@ (8008474 <DMA_CalcBaseAndBitshift+0x128>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d036      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a3b      	ldr	r2, [pc, #236]	@ (8008478 <DMA_CalcBaseAndBitshift+0x12c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d031      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a39      	ldr	r2, [pc, #228]	@ (800847c <DMA_CalcBaseAndBitshift+0x130>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d02c      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a38      	ldr	r2, [pc, #224]	@ (8008480 <DMA_CalcBaseAndBitshift+0x134>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d027      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a36      	ldr	r2, [pc, #216]	@ (8008484 <DMA_CalcBaseAndBitshift+0x138>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d022      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a35      	ldr	r2, [pc, #212]	@ (8008488 <DMA_CalcBaseAndBitshift+0x13c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d01d      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a33      	ldr	r2, [pc, #204]	@ (800848c <DMA_CalcBaseAndBitshift+0x140>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d018      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a32      	ldr	r2, [pc, #200]	@ (8008490 <DMA_CalcBaseAndBitshift+0x144>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d013      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a30      	ldr	r2, [pc, #192]	@ (8008494 <DMA_CalcBaseAndBitshift+0x148>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00e      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2f      	ldr	r2, [pc, #188]	@ (8008498 <DMA_CalcBaseAndBitshift+0x14c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d009      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a2d      	ldr	r2, [pc, #180]	@ (800849c <DMA_CalcBaseAndBitshift+0x150>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d004      	beq.n	80083f4 <DMA_CalcBaseAndBitshift+0xa8>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a2c      	ldr	r2, [pc, #176]	@ (80084a0 <DMA_CalcBaseAndBitshift+0x154>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d101      	bne.n	80083f8 <DMA_CalcBaseAndBitshift+0xac>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <DMA_CalcBaseAndBitshift+0xae>
 80083f8:	2300      	movs	r3, #0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d024      	beq.n	8008448 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	3b10      	subs	r3, #16
 8008406:	4a27      	ldr	r2, [pc, #156]	@ (80084a4 <DMA_CalcBaseAndBitshift+0x158>)
 8008408:	fba2 2303 	umull	r2, r3, r2, r3
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	4a24      	ldr	r2, [pc, #144]	@ (80084a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008418:	5cd3      	ldrb	r3, [r2, r3]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d908      	bls.n	8008438 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	4b1f      	ldr	r3, [pc, #124]	@ (80084ac <DMA_CalcBaseAndBitshift+0x160>)
 800842e:	4013      	ands	r3, r2
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	659a      	str	r2, [r3, #88]	@ 0x58
 8008436:	e00d      	b.n	8008454 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	4b1b      	ldr	r3, [pc, #108]	@ (80084ac <DMA_CalcBaseAndBitshift+0x160>)
 8008440:	4013      	ands	r3, r2
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6593      	str	r3, [r2, #88]	@ 0x58
 8008446:	e005      	b.n	8008454 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	40020010 	.word	0x40020010
 8008468:	40020028 	.word	0x40020028
 800846c:	40020040 	.word	0x40020040
 8008470:	40020058 	.word	0x40020058
 8008474:	40020070 	.word	0x40020070
 8008478:	40020088 	.word	0x40020088
 800847c:	400200a0 	.word	0x400200a0
 8008480:	400200b8 	.word	0x400200b8
 8008484:	40020410 	.word	0x40020410
 8008488:	40020428 	.word	0x40020428
 800848c:	40020440 	.word	0x40020440
 8008490:	40020458 	.word	0x40020458
 8008494:	40020470 	.word	0x40020470
 8008498:	40020488 	.word	0x40020488
 800849c:	400204a0 	.word	0x400204a0
 80084a0:	400204b8 	.word	0x400204b8
 80084a4:	aaaaaaab 	.word	0xaaaaaaab
 80084a8:	08014a0c 	.word	0x08014a0c
 80084ac:	fffffc00 	.word	0xfffffc00

080084b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d120      	bne.n	8008506 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d858      	bhi.n	800857e <DMA_CheckFifoParam+0xce>
 80084cc:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <DMA_CheckFifoParam+0x24>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084f7 	.word	0x080084f7
 80084dc:	080084e5 	.word	0x080084e5
 80084e0:	0800857f 	.word	0x0800857f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d048      	beq.n	8008582 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f4:	e045      	b.n	8008582 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084fe:	d142      	bne.n	8008586 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008504:	e03f      	b.n	8008586 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850e:	d123      	bne.n	8008558 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008514:	2b03      	cmp	r3, #3
 8008516:	d838      	bhi.n	800858a <DMA_CheckFifoParam+0xda>
 8008518:	a201      	add	r2, pc, #4	@ (adr r2, 8008520 <DMA_CheckFifoParam+0x70>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	08008531 	.word	0x08008531
 8008524:	08008537 	.word	0x08008537
 8008528:	08008531 	.word	0x08008531
 800852c:	08008549 	.word	0x08008549
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
        break;
 8008534:	e030      	b.n	8008598 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d025      	beq.n	800858e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008546:	e022      	b.n	800858e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008550:	d11f      	bne.n	8008592 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008556:	e01c      	b.n	8008592 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	2b02      	cmp	r3, #2
 800855e:	d902      	bls.n	8008566 <DMA_CheckFifoParam+0xb6>
 8008560:	2b03      	cmp	r3, #3
 8008562:	d003      	beq.n	800856c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008564:	e018      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
        break;
 800856a:	e015      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	e00b      	b.n	8008596 <DMA_CheckFifoParam+0xe6>
        break;
 800857e:	bf00      	nop
 8008580:	e00a      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        break;
 8008582:	bf00      	nop
 8008584:	e008      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        break;
 8008586:	bf00      	nop
 8008588:	e006      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        break;
 800858a:	bf00      	nop
 800858c:	e004      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        break;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
        break;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <DMA_CheckFifoParam+0xe8>
    break;
 8008596:	bf00      	nop
    }
  }

  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop

080085a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a38      	ldr	r2, [pc, #224]	@ (800869c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d022      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a36      	ldr	r2, [pc, #216]	@ (80086a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d01d      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a35      	ldr	r2, [pc, #212]	@ (80086a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d018      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a33      	ldr	r2, [pc, #204]	@ (80086a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d013      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a32      	ldr	r2, [pc, #200]	@ (80086ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00e      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a30      	ldr	r2, [pc, #192]	@ (80086b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d009      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2f      	ldr	r2, [pc, #188]	@ (80086b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d004      	beq.n	8008606 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a2d      	ldr	r2, [pc, #180]	@ (80086b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d101      	bne.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01a      	beq.n	8008646 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	3b08      	subs	r3, #8
 8008618:	4a28      	ldr	r2, [pc, #160]	@ (80086bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800861a:	fba2 2303 	umull	r2, r3, r2, r3
 800861e:	091b      	lsrs	r3, r3, #4
 8008620:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4b26      	ldr	r3, [pc, #152]	@ (80086c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a24      	ldr	r2, [pc, #144]	@ (80086c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008634:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2201      	movs	r2, #1
 800863e:	409a      	lsls	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008644:	e024      	b.n	8008690 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	3b10      	subs	r3, #16
 800864e:	4a1e      	ldr	r2, [pc, #120]	@ (80086c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008650:	fba2 2303 	umull	r2, r3, r2, r3
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4a1c      	ldr	r2, [pc, #112]	@ (80086cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d806      	bhi.n	800866e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4a1b      	ldr	r2, [pc, #108]	@ (80086d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d902      	bls.n	800866e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3308      	adds	r3, #8
 800866c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4b18      	ldr	r3, [pc, #96]	@ (80086d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a16      	ldr	r2, [pc, #88]	@ (80086d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008680:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	2201      	movs	r2, #1
 800868a:	409a      	lsls	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	58025408 	.word	0x58025408
 80086a0:	5802541c 	.word	0x5802541c
 80086a4:	58025430 	.word	0x58025430
 80086a8:	58025444 	.word	0x58025444
 80086ac:	58025458 	.word	0x58025458
 80086b0:	5802546c 	.word	0x5802546c
 80086b4:	58025480 	.word	0x58025480
 80086b8:	58025494 	.word	0x58025494
 80086bc:	cccccccd 	.word	0xcccccccd
 80086c0:	16009600 	.word	0x16009600
 80086c4:	58025880 	.word	0x58025880
 80086c8:	aaaaaaab 	.word	0xaaaaaaab
 80086cc:	400204b8 	.word	0x400204b8
 80086d0:	4002040f 	.word	0x4002040f
 80086d4:	10008200 	.word	0x10008200
 80086d8:	40020880 	.word	0x40020880

080086dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d04a      	beq.n	8008788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d847      	bhi.n	8008788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a25      	ldr	r2, [pc, #148]	@ (8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d022      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a24      	ldr	r2, [pc, #144]	@ (8008798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d01d      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a22      	ldr	r2, [pc, #136]	@ (800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d018      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a21      	ldr	r2, [pc, #132]	@ (80087a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d013      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1f      	ldr	r2, [pc, #124]	@ (80087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00e      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d009      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d101      	bne.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008748:	2301      	movs	r3, #1
 800874a:	e000      	b.n	800874e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800874c:	2300      	movs	r3, #0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a15      	ldr	r2, [pc, #84]	@ (80087b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008764:	671a      	str	r2, [r3, #112]	@ 0x70
 8008766:	e009      	b.n	800877c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4b14      	ldr	r3, [pc, #80]	@ (80087bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	461a      	mov	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a11      	ldr	r2, [pc, #68]	@ (80087c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800877a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	58025408 	.word	0x58025408
 8008798:	5802541c 	.word	0x5802541c
 800879c:	58025430 	.word	0x58025430
 80087a0:	58025444 	.word	0x58025444
 80087a4:	58025458 	.word	0x58025458
 80087a8:	5802546c 	.word	0x5802546c
 80087ac:	58025480 	.word	0x58025480
 80087b0:	58025494 	.word	0x58025494
 80087b4:	1600963f 	.word	0x1600963f
 80087b8:	58025940 	.word	0x58025940
 80087bc:	1000823f 	.word	0x1000823f
 80087c0:	40020940 	.word	0x40020940

080087c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	@ 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80087d2:	4b89      	ldr	r3, [pc, #548]	@ (80089f8 <HAL_GPIO_Init+0x234>)
 80087d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087d6:	e194      	b.n	8008b02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	2101      	movs	r1, #1
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	fa01 f303 	lsl.w	r3, r1, r3
 80087e4:	4013      	ands	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 8186 	beq.w	8008afc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d005      	beq.n	8008808 <HAL_GPIO_Init+0x44>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d130      	bne.n	800886a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	2203      	movs	r2, #3
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	43db      	mvns	r3, r3
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	4013      	ands	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	4313      	orrs	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800883e:	2201      	movs	r2, #1
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	43db      	mvns	r3, r3
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	4013      	ands	r3, r2
 800884c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	091b      	lsrs	r3, r3, #4
 8008854:	f003 0201 	and.w	r2, r3, #1
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	fa02 f303 	lsl.w	r3, r2, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4313      	orrs	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d017      	beq.n	80088a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	2203      	movs	r2, #3
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43db      	mvns	r3, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4013      	ands	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	4313      	orrs	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d123      	bne.n	80088fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	08da      	lsrs	r2, r3, #3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3208      	adds	r2, #8
 80088ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	220f      	movs	r2, #15
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43db      	mvns	r3, r3
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	4013      	ands	r3, r2
 80088d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	08da      	lsrs	r2, r3, #3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3208      	adds	r2, #8
 80088f4:	69b9      	ldr	r1, [r7, #24]
 80088f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	2203      	movs	r2, #3
 8008906:	fa02 f303 	lsl.w	r3, r2, r3
 800890a:	43db      	mvns	r3, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4013      	ands	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f003 0203 	and.w	r2, r3, #3
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80e0 	beq.w	8008afc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800893c:	4b2f      	ldr	r3, [pc, #188]	@ (80089fc <HAL_GPIO_Init+0x238>)
 800893e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008942:	4a2e      	ldr	r2, [pc, #184]	@ (80089fc <HAL_GPIO_Init+0x238>)
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800894c:	4b2b      	ldr	r3, [pc, #172]	@ (80089fc <HAL_GPIO_Init+0x238>)
 800894e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800895a:	4a29      	ldr	r2, [pc, #164]	@ (8008a00 <HAL_GPIO_Init+0x23c>)
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	089b      	lsrs	r3, r3, #2
 8008960:	3302      	adds	r3, #2
 8008962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	220f      	movs	r2, #15
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	43db      	mvns	r3, r3
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	4013      	ands	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a20      	ldr	r2, [pc, #128]	@ (8008a04 <HAL_GPIO_Init+0x240>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d052      	beq.n	8008a2c <HAL_GPIO_Init+0x268>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1f      	ldr	r2, [pc, #124]	@ (8008a08 <HAL_GPIO_Init+0x244>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d031      	beq.n	80089f2 <HAL_GPIO_Init+0x22e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1e      	ldr	r2, [pc, #120]	@ (8008a0c <HAL_GPIO_Init+0x248>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d02b      	beq.n	80089ee <HAL_GPIO_Init+0x22a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1d      	ldr	r2, [pc, #116]	@ (8008a10 <HAL_GPIO_Init+0x24c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d025      	beq.n	80089ea <HAL_GPIO_Init+0x226>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008a14 <HAL_GPIO_Init+0x250>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01f      	beq.n	80089e6 <HAL_GPIO_Init+0x222>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a18 <HAL_GPIO_Init+0x254>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d019      	beq.n	80089e2 <HAL_GPIO_Init+0x21e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a1c <HAL_GPIO_Init+0x258>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <HAL_GPIO_Init+0x21a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a19      	ldr	r2, [pc, #100]	@ (8008a20 <HAL_GPIO_Init+0x25c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00d      	beq.n	80089da <HAL_GPIO_Init+0x216>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a18      	ldr	r2, [pc, #96]	@ (8008a24 <HAL_GPIO_Init+0x260>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <HAL_GPIO_Init+0x212>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <HAL_GPIO_Init+0x264>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d101      	bne.n	80089d2 <HAL_GPIO_Init+0x20e>
 80089ce:	2309      	movs	r3, #9
 80089d0:	e02d      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089d2:	230a      	movs	r3, #10
 80089d4:	e02b      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089d6:	2308      	movs	r3, #8
 80089d8:	e029      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089da:	2307      	movs	r3, #7
 80089dc:	e027      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089de:	2306      	movs	r3, #6
 80089e0:	e025      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089e2:	2305      	movs	r3, #5
 80089e4:	e023      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089e6:	2304      	movs	r3, #4
 80089e8:	e021      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089ea:	2303      	movs	r3, #3
 80089ec:	e01f      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e01d      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e01b      	b.n	8008a2e <HAL_GPIO_Init+0x26a>
 80089f6:	bf00      	nop
 80089f8:	58000080 	.word	0x58000080
 80089fc:	58024400 	.word	0x58024400
 8008a00:	58000400 	.word	0x58000400
 8008a04:	58020000 	.word	0x58020000
 8008a08:	58020400 	.word	0x58020400
 8008a0c:	58020800 	.word	0x58020800
 8008a10:	58020c00 	.word	0x58020c00
 8008a14:	58021000 	.word	0x58021000
 8008a18:	58021400 	.word	0x58021400
 8008a1c:	58021800 	.word	0x58021800
 8008a20:	58021c00 	.word	0x58021c00
 8008a24:	58022000 	.word	0x58022000
 8008a28:	58022400 	.word	0x58022400
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	f002 0203 	and.w	r2, r2, #3
 8008a34:	0092      	lsls	r2, r2, #2
 8008a36:	4093      	lsls	r3, r2
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a3e:	4938      	ldr	r1, [pc, #224]	@ (8008b20 <HAL_GPIO_Init+0x35c>)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	089b      	lsrs	r3, r3, #2
 8008a44:	3302      	adds	r3, #2
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	43db      	mvns	r3, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	43db      	mvns	r3, r3
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	43db      	mvns	r3, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	3301      	adds	r3, #1
 8008b00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f47f ae63 	bne.w	80087d8 <HAL_GPIO_Init+0x14>
  }
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	3724      	adds	r7, #36	@ 0x24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	58000400 	.word	0x58000400

08008b24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b2c:	4b19      	ldr	r3, [pc, #100]	@ (8008b94 <HAL_PWREx_ConfigSupply+0x70>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d00a      	beq.n	8008b4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b38:	4b16      	ldr	r3, [pc, #88]	@ (8008b94 <HAL_PWREx_ConfigSupply+0x70>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d001      	beq.n	8008b4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e01f      	b.n	8008b8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e01d      	b.n	8008b8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b4e:	4b11      	ldr	r3, [pc, #68]	@ (8008b94 <HAL_PWREx_ConfigSupply+0x70>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f023 0207 	bic.w	r2, r3, #7
 8008b56:	490f      	ldr	r1, [pc, #60]	@ (8008b94 <HAL_PWREx_ConfigSupply+0x70>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b5e:	f7fd f851 	bl	8005c04 <HAL_GetTick>
 8008b62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b64:	e009      	b.n	8008b7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b66:	f7fd f84d 	bl	8005c04 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b74:	d901      	bls.n	8008b7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e007      	b.n	8008b8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b7a:	4b06      	ldr	r3, [pc, #24]	@ (8008b94 <HAL_PWREx_ConfigSupply+0x70>)
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b86:	d1ee      	bne.n	8008b66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	58024800 	.word	0x58024800

08008b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	@ 0x30
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f000 bc48 	b.w	800943c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 8088 	beq.w	8008cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bba:	4b99      	ldr	r3, [pc, #612]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bc4:	4b96      	ldr	r3, [pc, #600]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d007      	beq.n	8008be0 <HAL_RCC_OscConfig+0x48>
 8008bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd2:	2b18      	cmp	r3, #24
 8008bd4:	d111      	bne.n	8008bfa <HAL_RCC_OscConfig+0x62>
 8008bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be0:	4b8f      	ldr	r3, [pc, #572]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d06d      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x130>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d169      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f000 bc21 	b.w	800943c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_OscConfig+0x7a>
 8008c04:	4b86      	ldr	r3, [pc, #536]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a85      	ldr	r2, [pc, #532]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e02e      	b.n	8008c70 <HAL_RCC_OscConfig+0xd8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x9c>
 8008c1a:	4b81      	ldr	r3, [pc, #516]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a80      	ldr	r2, [pc, #512]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	4b7e      	ldr	r3, [pc, #504]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e01d      	b.n	8008c70 <HAL_RCC_OscConfig+0xd8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c3c:	d10c      	bne.n	8008c58 <HAL_RCC_OscConfig+0xc0>
 8008c3e:	4b78      	ldr	r3, [pc, #480]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a77      	ldr	r2, [pc, #476]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4b75      	ldr	r3, [pc, #468]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a74      	ldr	r2, [pc, #464]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e00b      	b.n	8008c70 <HAL_RCC_OscConfig+0xd8>
 8008c58:	4b71      	ldr	r3, [pc, #452]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a70      	ldr	r2, [pc, #448]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4b6e      	ldr	r3, [pc, #440]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a6d      	ldr	r2, [pc, #436]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c78:	f7fc ffc4 	bl	8005c04 <HAL_GetTick>
 8008c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fc ffc0 	bl	8005c04 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	@ 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e3d4      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c92:	4b63      	ldr	r3, [pc, #396]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0xe8>
 8008c9e:	e014      	b.n	8008cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca0:	f7fc ffb0 	bl	8005c04 <HAL_GetTick>
 8008ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fc ffac 	bl	8005c04 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	@ 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e3c0      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cba:	4b59      	ldr	r3, [pc, #356]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x110>
 8008cc6:	e000      	b.n	8008cca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80ca 	beq.w	8008e6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cd8:	4b51      	ldr	r3, [pc, #324]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ce0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <HAL_RCC_OscConfig+0x166>
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2b18      	cmp	r3, #24
 8008cf2:	d156      	bne.n	8008da2 <HAL_RCC_OscConfig+0x20a>
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d151      	bne.n	8008da2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cfe:	4b48      	ldr	r3, [pc, #288]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_OscConfig+0x17e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e392      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d16:	4b42      	ldr	r3, [pc, #264]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 0219 	bic.w	r2, r3, #25
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	493f      	ldr	r1, [pc, #252]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d28:	f7fc ff6c 	bl	8005c04 <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d30:	f7fc ff68 	bl	8005c04 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e37c      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d42:	4b37      	ldr	r3, [pc, #220]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4e:	f7fc ff89 	bl	8005c64 <HAL_GetREVID>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d817      	bhi.n	8008d8c <HAL_RCC_OscConfig+0x1f4>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b40      	cmp	r3, #64	@ 0x40
 8008d62:	d108      	bne.n	8008d76 <HAL_RCC_OscConfig+0x1de>
 8008d64:	4b2e      	ldr	r3, [pc, #184]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d74:	e07a      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d76:	4b2a      	ldr	r3, [pc, #168]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	031b      	lsls	r3, r3, #12
 8008d84:	4926      	ldr	r1, [pc, #152]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d8a:	e06f      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d8c:	4b24      	ldr	r3, [pc, #144]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	4921      	ldr	r1, [pc, #132]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008da0:	e064      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d047      	beq.n	8008e3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008daa:	4b1d      	ldr	r3, [pc, #116]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f023 0219 	bic.w	r2, r3, #25
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	491a      	ldr	r1, [pc, #104]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbc:	f7fc ff22 	bl	8005c04 <HAL_GetTick>
 8008dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dc4:	f7fc ff1e 	bl	8005c04 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e332      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dd6:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f0      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008de2:	f7fc ff3f 	bl	8005c64 <HAL_GetREVID>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d819      	bhi.n	8008e24 <HAL_RCC_OscConfig+0x28c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2b40      	cmp	r3, #64	@ 0x40
 8008df6:	d108      	bne.n	8008e0a <HAL_RCC_OscConfig+0x272>
 8008df8:	4b09      	ldr	r3, [pc, #36]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008e00:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e06:	6053      	str	r3, [r2, #4]
 8008e08:	e030      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
 8008e0a:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	031b      	lsls	r3, r3, #12
 8008e18:	4901      	ldr	r1, [pc, #4]	@ (8008e20 <HAL_RCC_OscConfig+0x288>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	604b      	str	r3, [r1, #4]
 8008e1e:	e025      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
 8008e20:	58024400 	.word	0x58024400
 8008e24:	4b9a      	ldr	r3, [pc, #616]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	061b      	lsls	r3, r3, #24
 8008e32:	4997      	ldr	r1, [pc, #604]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	604b      	str	r3, [r1, #4]
 8008e38:	e018      	b.n	8008e6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e3a:	4b95      	ldr	r3, [pc, #596]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a94      	ldr	r2, [pc, #592]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e46:	f7fc fedd 	bl	8005c04 <HAL_GetTick>
 8008e4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e4c:	e008      	b.n	8008e60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e4e:	f7fc fed9 	bl	8005c04 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e2ed      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e60:	4b8b      	ldr	r3, [pc, #556]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f0      	bne.n	8008e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80a9 	beq.w	8008fcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e7a:	4b85      	ldr	r3, [pc, #532]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e84:	4b82      	ldr	r3, [pc, #520]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d007      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x308>
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b18      	cmp	r3, #24
 8008e94:	d13a      	bne.n	8008f0c <HAL_RCC_OscConfig+0x374>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 0303 	and.w	r3, r3, #3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d135      	bne.n	8008f0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x320>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	2b80      	cmp	r3, #128	@ 0x80
 8008eb2:	d001      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e2c1      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008eb8:	f7fc fed4 	bl	8005c64 <HAL_GetREVID>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d817      	bhi.n	8008ef6 <HAL_RCC_OscConfig+0x35e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d108      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x348>
 8008ece:	4b70      	ldr	r3, [pc, #448]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008edc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ede:	e075      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	069b      	lsls	r3, r3, #26
 8008eee:	4968      	ldr	r1, [pc, #416]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ef4:	e06a      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ef6:	4b66      	ldr	r3, [pc, #408]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	061b      	lsls	r3, r3, #24
 8008f04:	4962      	ldr	r1, [pc, #392]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f0a:	e05f      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d042      	beq.n	8008f9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f14:	4b5e      	ldr	r3, [pc, #376]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a5d      	ldr	r2, [pc, #372]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fc fe70 	bl	8005c04 <HAL_GetTick>
 8008f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f28:	f7fc fe6c 	bl	8005c04 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e280      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f3a:	4b55      	ldr	r3, [pc, #340]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0f0      	beq.n	8008f28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f46:	f7fc fe8d 	bl	8005c64 <HAL_GetREVID>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d817      	bhi.n	8008f84 <HAL_RCC_OscConfig+0x3ec>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d108      	bne.n	8008f6e <HAL_RCC_OscConfig+0x3d6>
 8008f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008f64:	4a4a      	ldr	r2, [pc, #296]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f6a:	6053      	str	r3, [r2, #4]
 8008f6c:	e02e      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
 8008f6e:	4b48      	ldr	r3, [pc, #288]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	069b      	lsls	r3, r3, #26
 8008f7c:	4944      	ldr	r1, [pc, #272]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	604b      	str	r3, [r1, #4]
 8008f82:	e023      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
 8008f84:	4b42      	ldr	r3, [pc, #264]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	061b      	lsls	r3, r3, #24
 8008f92:	493f      	ldr	r1, [pc, #252]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60cb      	str	r3, [r1, #12]
 8008f98:	e018      	b.n	8008fcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa6:	f7fc fe2d 	bl	8005c04 <HAL_GetTick>
 8008faa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fac:	e008      	b.n	8008fc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fae:	f7fc fe29 	bl	8005c04 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e23d      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fc0:	4b33      	ldr	r3, [pc, #204]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f0      	bne.n	8008fae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0308 	and.w	r3, r3, #8
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d036      	beq.n	8009046 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d019      	beq.n	8009014 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fec:	f7fc fe0a 	bl	8005c04 <HAL_GetTick>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ff4:	f7fc fe06 	bl	8005c04 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e21a      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009006:	4b22      	ldr	r3, [pc, #136]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8009008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0f0      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x45c>
 8009012:	e018      	b.n	8009046 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009014:	4b1e      	ldr	r3, [pc, #120]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8009016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009018:	4a1d      	ldr	r2, [pc, #116]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009020:	f7fc fdf0 	bl	8005c04 <HAL_GetTick>
 8009024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009028:	f7fc fdec 	bl	8005c04 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e200      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800903a:	4b15      	ldr	r3, [pc, #84]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 800903c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1f0      	bne.n	8009028 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d039      	beq.n	80090c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d01c      	beq.n	8009094 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800905a:	4b0d      	ldr	r3, [pc, #52]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a0c      	ldr	r2, [pc, #48]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8009060:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009064:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009066:	f7fc fdcd 	bl	8005c04 <HAL_GetTick>
 800906a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800906c:	e008      	b.n	8009080 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800906e:	f7fc fdc9 	bl	8005c04 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e1dd      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009080:	4b03      	ldr	r3, [pc, #12]	@ (8009090 <HAL_RCC_OscConfig+0x4f8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0f0      	beq.n	800906e <HAL_RCC_OscConfig+0x4d6>
 800908c:	e01b      	b.n	80090c6 <HAL_RCC_OscConfig+0x52e>
 800908e:	bf00      	nop
 8009090:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009094:	4b9b      	ldr	r3, [pc, #620]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a9a      	ldr	r2, [pc, #616]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800909a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800909e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090a0:	f7fc fdb0 	bl	8005c04 <HAL_GetTick>
 80090a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090a6:	e008      	b.n	80090ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090a8:	f7fc fdac 	bl	8005c04 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d901      	bls.n	80090ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e1c0      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090ba:	4b92      	ldr	r3, [pc, #584]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1f0      	bne.n	80090a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0304 	and.w	r3, r3, #4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 8081 	beq.w	80091d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090d4:	4b8c      	ldr	r3, [pc, #560]	@ (8009308 <HAL_RCC_OscConfig+0x770>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a8b      	ldr	r2, [pc, #556]	@ (8009308 <HAL_RCC_OscConfig+0x770>)
 80090da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090e0:	f7fc fd90 	bl	8005c04 <HAL_GetTick>
 80090e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090e6:	e008      	b.n	80090fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e8:	f7fc fd8c 	bl	8005c04 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b64      	cmp	r3, #100	@ 0x64
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e1a0      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090fa:	4b83      	ldr	r3, [pc, #524]	@ (8009308 <HAL_RCC_OscConfig+0x770>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f0      	beq.n	80090e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d106      	bne.n	800911c <HAL_RCC_OscConfig+0x584>
 800910e:	4b7d      	ldr	r3, [pc, #500]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009112:	4a7c      	ldr	r2, [pc, #496]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	6713      	str	r3, [r2, #112]	@ 0x70
 800911a:	e02d      	b.n	8009178 <HAL_RCC_OscConfig+0x5e0>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10c      	bne.n	800913e <HAL_RCC_OscConfig+0x5a6>
 8009124:	4b77      	ldr	r3, [pc, #476]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009128:	4a76      	ldr	r2, [pc, #472]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800912a:	f023 0301 	bic.w	r3, r3, #1
 800912e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009130:	4b74      	ldr	r3, [pc, #464]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009134:	4a73      	ldr	r2, [pc, #460]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009136:	f023 0304 	bic.w	r3, r3, #4
 800913a:	6713      	str	r3, [r2, #112]	@ 0x70
 800913c:	e01c      	b.n	8009178 <HAL_RCC_OscConfig+0x5e0>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b05      	cmp	r3, #5
 8009144:	d10c      	bne.n	8009160 <HAL_RCC_OscConfig+0x5c8>
 8009146:	4b6f      	ldr	r3, [pc, #444]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914a:	4a6e      	ldr	r2, [pc, #440]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	6713      	str	r3, [r2, #112]	@ 0x70
 8009152:	4b6c      	ldr	r3, [pc, #432]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009156:	4a6b      	ldr	r2, [pc, #428]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	6713      	str	r3, [r2, #112]	@ 0x70
 800915e:	e00b      	b.n	8009178 <HAL_RCC_OscConfig+0x5e0>
 8009160:	4b68      	ldr	r3, [pc, #416]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009164:	4a67      	ldr	r2, [pc, #412]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009166:	f023 0301 	bic.w	r3, r3, #1
 800916a:	6713      	str	r3, [r2, #112]	@ 0x70
 800916c:	4b65      	ldr	r3, [pc, #404]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800916e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009170:	4a64      	ldr	r2, [pc, #400]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009172:	f023 0304 	bic.w	r3, r3, #4
 8009176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d015      	beq.n	80091ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009180:	f7fc fd40 	bl	8005c04 <HAL_GetTick>
 8009184:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009186:	e00a      	b.n	800919e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009188:	f7fc fd3c 	bl	8005c04 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e14e      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800919e:	4b59      	ldr	r3, [pc, #356]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0ee      	beq.n	8009188 <HAL_RCC_OscConfig+0x5f0>
 80091aa:	e014      	b.n	80091d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ac:	f7fc fd2a 	bl	8005c04 <HAL_GetTick>
 80091b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b4:	f7fc fd26 	bl	8005c04 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e138      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091ca:	4b4e      	ldr	r3, [pc, #312]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1ee      	bne.n	80091b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 812d 	beq.w	800943a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091e0:	4b48      	ldr	r3, [pc, #288]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e8:	2b18      	cmp	r3, #24
 80091ea:	f000 80bd 	beq.w	8009368 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	f040 809e 	bne.w	8009334 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091f8:	4b42      	ldr	r3, [pc, #264]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a41      	ldr	r2, [pc, #260]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009204:	f7fc fcfe 	bl	8005c04 <HAL_GetTick>
 8009208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800920c:	f7fc fcfa 	bl	8005c04 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e10e      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800921e:	4b39      	ldr	r3, [pc, #228]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1f0      	bne.n	800920c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800922a:	4b36      	ldr	r3, [pc, #216]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800922c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800922e:	4b37      	ldr	r3, [pc, #220]	@ (800930c <HAL_RCC_OscConfig+0x774>)
 8009230:	4013      	ands	r3, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800923a:	0112      	lsls	r2, r2, #4
 800923c:	430a      	orrs	r2, r1
 800923e:	4931      	ldr	r1, [pc, #196]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	628b      	str	r3, [r1, #40]	@ 0x28
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009248:	3b01      	subs	r3, #1
 800924a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009252:	3b01      	subs	r3, #1
 8009254:	025b      	lsls	r3, r3, #9
 8009256:	b29b      	uxth	r3, r3
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	3b01      	subs	r3, #1
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926c:	3b01      	subs	r3, #1
 800926e:	061b      	lsls	r3, r3, #24
 8009270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009274:	4923      	ldr	r1, [pc, #140]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800927a:	4b22      	ldr	r3, [pc, #136]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	4a21      	ldr	r2, [pc, #132]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009286:	4b1f      	ldr	r3, [pc, #124]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800928a:	4b21      	ldr	r3, [pc, #132]	@ (8009310 <HAL_RCC_OscConfig+0x778>)
 800928c:	4013      	ands	r3, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009292:	00d2      	lsls	r2, r2, #3
 8009294:	491b      	ldr	r1, [pc, #108]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 8009296:	4313      	orrs	r3, r2
 8009298:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800929a:	4b1a      	ldr	r3, [pc, #104]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 800929c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929e:	f023 020c 	bic.w	r2, r3, #12
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a6:	4917      	ldr	r1, [pc, #92]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092ac:	4b15      	ldr	r3, [pc, #84]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	f023 0202 	bic.w	r2, r3, #2
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b8:	4912      	ldr	r1, [pc, #72]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092be:	4b11      	ldr	r3, [pc, #68]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c2:	4a10      	ldr	r2, [pc, #64]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	4a0a      	ldr	r2, [pc, #40]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80092e2:	4b08      	ldr	r3, [pc, #32]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	4a07      	ldr	r2, [pc, #28]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092e8:	f043 0301 	orr.w	r3, r3, #1
 80092ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092ee:	4b05      	ldr	r3, [pc, #20]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a04      	ldr	r2, [pc, #16]	@ (8009304 <HAL_RCC_OscConfig+0x76c>)
 80092f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fa:	f7fc fc83 	bl	8005c04 <HAL_GetTick>
 80092fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009300:	e011      	b.n	8009326 <HAL_RCC_OscConfig+0x78e>
 8009302:	bf00      	nop
 8009304:	58024400 	.word	0x58024400
 8009308:	58024800 	.word	0x58024800
 800930c:	fffffc0c 	.word	0xfffffc0c
 8009310:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009314:	f7fc fc76 	bl	8005c04 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e08a      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009326:	4b47      	ldr	r3, [pc, #284]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0f0      	beq.n	8009314 <HAL_RCC_OscConfig+0x77c>
 8009332:	e082      	b.n	800943a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009334:	4b43      	ldr	r3, [pc, #268]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a42      	ldr	r2, [pc, #264]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 800933a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800933e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009340:	f7fc fc60 	bl	8005c04 <HAL_GetTick>
 8009344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009348:	f7fc fc5c 	bl	8005c04 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e070      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800935a:	4b3a      	ldr	r3, [pc, #232]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f0      	bne.n	8009348 <HAL_RCC_OscConfig+0x7b0>
 8009366:	e068      	b.n	800943a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009368:	4b36      	ldr	r3, [pc, #216]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800936e:	4b35      	ldr	r3, [pc, #212]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009372:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009378:	2b01      	cmp	r3, #1
 800937a:	d031      	beq.n	80093e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f003 0203 	and.w	r2, r3, #3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009386:	429a      	cmp	r2, r3
 8009388:	d12a      	bne.n	80093e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	091b      	lsrs	r3, r3, #4
 800938e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009396:	429a      	cmp	r2, r3
 8009398:	d122      	bne.n	80093e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d11a      	bne.n	80093e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	0a5b      	lsrs	r3, r3, #9
 80093ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d111      	bne.n	80093e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d108      	bne.n	80093e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	0e1b      	lsrs	r3, r3, #24
 80093d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093dc:	429a      	cmp	r2, r3
 80093de:	d001      	beq.n	80093e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e02b      	b.n	800943c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80093e4:	4b17      	ldr	r3, [pc, #92]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 80093e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d01f      	beq.n	800943a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80093fa:	4b12      	ldr	r3, [pc, #72]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 80093fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fe:	4a11      	ldr	r2, [pc, #68]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009400:	f023 0301 	bic.w	r3, r3, #1
 8009404:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009406:	f7fc fbfd 	bl	8005c04 <HAL_GetTick>
 800940a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800940c:	bf00      	nop
 800940e:	f7fc fbf9 	bl	8005c04 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	4293      	cmp	r3, r2
 8009418:	d0f9      	beq.n	800940e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800941a:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 800941c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800941e:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <HAL_RCC_OscConfig+0x8b0>)
 8009420:	4013      	ands	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009426:	00d2      	lsls	r2, r2, #3
 8009428:	4906      	ldr	r1, [pc, #24]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 800942a:	4313      	orrs	r3, r2
 800942c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800942e:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	4a04      	ldr	r2, [pc, #16]	@ (8009444 <HAL_RCC_OscConfig+0x8ac>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3730      	adds	r7, #48	@ 0x30
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	58024400 	.word	0x58024400
 8009448:	ffff0007 	.word	0xffff0007

0800944c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e19c      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009460:	4b8a      	ldr	r3, [pc, #552]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d910      	bls.n	8009490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800946e:	4b87      	ldr	r3, [pc, #540]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f023 020f 	bic.w	r2, r3, #15
 8009476:	4985      	ldr	r1, [pc, #532]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	4313      	orrs	r3, r2
 800947c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800947e:	4b83      	ldr	r3, [pc, #524]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d001      	beq.n	8009490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e184      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	4b7b      	ldr	r3, [pc, #492]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d908      	bls.n	80094be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094ac:	4b78      	ldr	r3, [pc, #480]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	4975      	ldr	r1, [pc, #468]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695a      	ldr	r2, [r3, #20]
 80094ce:	4b70      	ldr	r3, [pc, #448]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d908      	bls.n	80094ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094da:	4b6d      	ldr	r3, [pc, #436]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	496a      	ldr	r1, [pc, #424]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d010      	beq.n	800951a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	4b64      	ldr	r3, [pc, #400]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009504:	429a      	cmp	r2, r3
 8009506:	d908      	bls.n	800951a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009508:	4b61      	ldr	r3, [pc, #388]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	495e      	ldr	r1, [pc, #376]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009516:	4313      	orrs	r3, r2
 8009518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d010      	beq.n	8009548 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69da      	ldr	r2, [r3, #28]
 800952a:	4b59      	ldr	r3, [pc, #356]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009532:	429a      	cmp	r2, r3
 8009534:	d908      	bls.n	8009548 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009536:	4b56      	ldr	r3, [pc, #344]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	4953      	ldr	r1, [pc, #332]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009544:	4313      	orrs	r3, r2
 8009546:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d010      	beq.n	8009576 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	4b4d      	ldr	r3, [pc, #308]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	429a      	cmp	r2, r3
 8009562:	d908      	bls.n	8009576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009564:	4b4a      	ldr	r3, [pc, #296]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f023 020f 	bic.w	r2, r3, #15
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4947      	ldr	r1, [pc, #284]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009572:	4313      	orrs	r3, r2
 8009574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d055      	beq.n	800962e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009582:	4b43      	ldr	r3, [pc, #268]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	4940      	ldr	r1, [pc, #256]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009590:	4313      	orrs	r3, r2
 8009592:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d107      	bne.n	80095ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800959c:	4b3c      	ldr	r3, [pc, #240]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d121      	bne.n	80095ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e0f6      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d107      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095b4:	4b36      	ldr	r3, [pc, #216]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d115      	bne.n	80095ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e0ea      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d107      	bne.n	80095dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095cc:	4b30      	ldr	r3, [pc, #192]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e0de      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0d6      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095ec:	4b28      	ldr	r3, [pc, #160]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f023 0207 	bic.w	r2, r3, #7
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4925      	ldr	r1, [pc, #148]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095fe:	f7fc fb01 	bl	8005c04 <HAL_GetTick>
 8009602:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009604:	e00a      	b.n	800961c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009606:	f7fc fafd 	bl	8005c04 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009614:	4293      	cmp	r3, r2
 8009616:	d901      	bls.n	800961c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e0be      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800961c:	4b1c      	ldr	r3, [pc, #112]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	429a      	cmp	r2, r3
 800962c:	d1eb      	bne.n	8009606 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d010      	beq.n	800965c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	4b14      	ldr	r3, [pc, #80]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	f003 030f 	and.w	r3, r3, #15
 8009646:	429a      	cmp	r2, r3
 8009648:	d208      	bcs.n	800965c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800964a:	4b11      	ldr	r3, [pc, #68]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	f023 020f 	bic.w	r2, r3, #15
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	490e      	ldr	r1, [pc, #56]	@ (8009690 <HAL_RCC_ClockConfig+0x244>)
 8009658:	4313      	orrs	r3, r2
 800965a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800965c:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d214      	bcs.n	8009694 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966a:	4b08      	ldr	r3, [pc, #32]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 020f 	bic.w	r2, r3, #15
 8009672:	4906      	ldr	r1, [pc, #24]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967a:	4b04      	ldr	r3, [pc, #16]	@ (800968c <HAL_RCC_ClockConfig+0x240>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d005      	beq.n	8009694 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e086      	b.n	800979a <HAL_RCC_ClockConfig+0x34e>
 800968c:	52002000 	.word	0x52002000
 8009690:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d010      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	4b3f      	ldr	r3, [pc, #252]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d208      	bcs.n	80096c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096b0:	4b3c      	ldr	r3, [pc, #240]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	4939      	ldr	r1, [pc, #228]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d010      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695a      	ldr	r2, [r3, #20]
 80096d2:	4b34      	ldr	r3, [pc, #208]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096da:	429a      	cmp	r2, r3
 80096dc:	d208      	bcs.n	80096f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096de:	4b31      	ldr	r3, [pc, #196]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	492e      	ldr	r1, [pc, #184]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d010      	beq.n	800971e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	4b28      	ldr	r3, [pc, #160]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009708:	429a      	cmp	r2, r3
 800970a:	d208      	bcs.n	800971e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800970c:	4b25      	ldr	r3, [pc, #148]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	4922      	ldr	r1, [pc, #136]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 800971a:	4313      	orrs	r3, r2
 800971c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d010      	beq.n	800974c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69da      	ldr	r2, [r3, #28]
 800972e:	4b1d      	ldr	r3, [pc, #116]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009736:	429a      	cmp	r2, r3
 8009738:	d208      	bcs.n	800974c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800973a:	4b1a      	ldr	r3, [pc, #104]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	4917      	ldr	r1, [pc, #92]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 8009748:	4313      	orrs	r3, r2
 800974a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800974c:	f000 f834 	bl	80097b8 <HAL_RCC_GetSysClockFreq>
 8009750:	4602      	mov	r2, r0
 8009752:	4b14      	ldr	r3, [pc, #80]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	0a1b      	lsrs	r3, r3, #8
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	4912      	ldr	r1, [pc, #72]	@ (80097a8 <HAL_RCC_ClockConfig+0x35c>)
 800975e:	5ccb      	ldrb	r3, [r1, r3]
 8009760:	f003 031f 	and.w	r3, r3, #31
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800976a:	4b0e      	ldr	r3, [pc, #56]	@ (80097a4 <HAL_RCC_ClockConfig+0x358>)
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	4a0d      	ldr	r2, [pc, #52]	@ (80097a8 <HAL_RCC_ClockConfig+0x35c>)
 8009774:	5cd3      	ldrb	r3, [r2, r3]
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
 8009780:	4a0a      	ldr	r2, [pc, #40]	@ (80097ac <HAL_RCC_ClockConfig+0x360>)
 8009782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009784:	4a0a      	ldr	r2, [pc, #40]	@ (80097b0 <HAL_RCC_ClockConfig+0x364>)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800978a:	4b0a      	ldr	r3, [pc, #40]	@ (80097b4 <HAL_RCC_ClockConfig+0x368>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f7fc f9ee 	bl	8005b70 <HAL_InitTick>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	58024400 	.word	0x58024400
 80097a8:	0801499c 	.word	0x0801499c
 80097ac:	2400005c 	.word	0x2400005c
 80097b0:	24000058 	.word	0x24000058
 80097b4:	24000060 	.word	0x24000060

080097b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b089      	sub	sp, #36	@ 0x24
 80097bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097be:	4bb3      	ldr	r3, [pc, #716]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097c6:	2b18      	cmp	r3, #24
 80097c8:	f200 8155 	bhi.w	8009a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80097cc:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	08009839 	.word	0x08009839
 80097d8:	08009a77 	.word	0x08009a77
 80097dc:	08009a77 	.word	0x08009a77
 80097e0:	08009a77 	.word	0x08009a77
 80097e4:	08009a77 	.word	0x08009a77
 80097e8:	08009a77 	.word	0x08009a77
 80097ec:	08009a77 	.word	0x08009a77
 80097f0:	08009a77 	.word	0x08009a77
 80097f4:	0800985f 	.word	0x0800985f
 80097f8:	08009a77 	.word	0x08009a77
 80097fc:	08009a77 	.word	0x08009a77
 8009800:	08009a77 	.word	0x08009a77
 8009804:	08009a77 	.word	0x08009a77
 8009808:	08009a77 	.word	0x08009a77
 800980c:	08009a77 	.word	0x08009a77
 8009810:	08009a77 	.word	0x08009a77
 8009814:	08009865 	.word	0x08009865
 8009818:	08009a77 	.word	0x08009a77
 800981c:	08009a77 	.word	0x08009a77
 8009820:	08009a77 	.word	0x08009a77
 8009824:	08009a77 	.word	0x08009a77
 8009828:	08009a77 	.word	0x08009a77
 800982c:	08009a77 	.word	0x08009a77
 8009830:	08009a77 	.word	0x08009a77
 8009834:	0800986b 	.word	0x0800986b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009838:	4b94      	ldr	r3, [pc, #592]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009844:	4b91      	ldr	r3, [pc, #580]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	08db      	lsrs	r3, r3, #3
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	4a90      	ldr	r2, [pc, #576]	@ (8009a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
 8009854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009856:	e111      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009858:	4b8d      	ldr	r3, [pc, #564]	@ (8009a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800985a:	61bb      	str	r3, [r7, #24]
      break;
 800985c:	e10e      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800985e:	4b8d      	ldr	r3, [pc, #564]	@ (8009a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009860:	61bb      	str	r3, [r7, #24]
      break;
 8009862:	e10b      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009864:	4b8c      	ldr	r3, [pc, #560]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009866:	61bb      	str	r3, [r7, #24]
      break;
 8009868:	e108      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800986a:	4b88      	ldr	r3, [pc, #544]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009874:	4b85      	ldr	r3, [pc, #532]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800987e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009880:	4b82      	ldr	r3, [pc, #520]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800988a:	4b80      	ldr	r3, [pc, #512]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800988c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988e:	08db      	lsrs	r3, r3, #3
 8009890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	fb02 f303 	mul.w	r3, r2, r3
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80e1 	beq.w	8009a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	f000 8083 	beq.w	80099bc <HAL_RCC_GetSysClockFreq+0x204>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f200 80a1 	bhi.w	8009a00 <HAL_RCC_GetSysClockFreq+0x248>
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_RCC_GetSysClockFreq+0x114>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d056      	beq.n	8009978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098ca:	e099      	b.n	8009a00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098cc:	4b6f      	ldr	r3, [pc, #444]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02d      	beq.n	8009934 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098d8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	08db      	lsrs	r3, r3, #3
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	4a6b      	ldr	r2, [pc, #428]	@ (8009a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
 80098e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b62      	ldr	r3, [pc, #392]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a02 	vldr	s12, [r7, #8]
 8009916:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009932:	e087      	b.n	8009a44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b51      	ldr	r3, [pc, #324]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a02 	vldr	s12, [r7, #8]
 800995a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009976:	e065      	b.n	8009a44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b40      	ldr	r3, [pc, #256]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a02 	vldr	s12, [r7, #8]
 800999e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099ba:	e043      	b.n	8009a44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b2f      	ldr	r3, [pc, #188]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a02 	vldr	s12, [r7, #8]
 80099e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099fe:	e021      	b.n	8009a44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b1e      	ldr	r3, [pc, #120]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a44:	4b11      	ldr	r3, [pc, #68]	@ (8009a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a48:	0a5b      	lsrs	r3, r3, #9
 8009a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4e:	3301      	adds	r3, #1
 8009a50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a68:	ee17 3a90 	vmov	r3, s15
 8009a6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a6e:	e005      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61bb      	str	r3, [r7, #24]
      break;
 8009a74:	e002      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a76:	4b07      	ldr	r3, [pc, #28]	@ (8009a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a78:	61bb      	str	r3, [r7, #24]
      break;
 8009a7a:	bf00      	nop
  }

  return sysclockfreq;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3724      	adds	r7, #36	@ 0x24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	03d09000 	.word	0x03d09000
 8009a94:	003d0900 	.word	0x003d0900
 8009a98:	017d7840 	.word	0x017d7840
 8009a9c:	46000000 	.word	0x46000000
 8009aa0:	4c742400 	.word	0x4c742400
 8009aa4:	4a742400 	.word	0x4a742400
 8009aa8:	4bbebc20 	.word	0x4bbebc20

08009aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ab2:	f7ff fe81 	bl	80097b8 <HAL_RCC_GetSysClockFreq>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b10      	ldr	r3, [pc, #64]	@ (8009afc <HAL_RCC_GetHCLKFreq+0x50>)
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	0a1b      	lsrs	r3, r3, #8
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	490f      	ldr	r1, [pc, #60]	@ (8009b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ac4:	5ccb      	ldrb	r3, [r1, r3]
 8009ac6:	f003 031f 	and.w	r3, r3, #31
 8009aca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ace:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <HAL_RCC_GetHCLKFreq+0x50>)
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	4a09      	ldr	r2, [pc, #36]	@ (8009b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ada:	5cd3      	ldrb	r3, [r2, r3]
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae6:	4a07      	ldr	r2, [pc, #28]	@ (8009b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ae8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009aea:	4a07      	ldr	r2, [pc, #28]	@ (8009b08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009af0:	4b04      	ldr	r3, [pc, #16]	@ (8009b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8009af2:	681b      	ldr	r3, [r3, #0]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	58024400 	.word	0x58024400
 8009b00:	0801499c 	.word	0x0801499c
 8009b04:	2400005c 	.word	0x2400005c
 8009b08:	24000058 	.word	0x24000058

08009b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b10:	f7ff ffcc 	bl	8009aac <HAL_RCC_GetHCLKFreq>
 8009b14:	4602      	mov	r2, r0
 8009b16:	4b06      	ldr	r3, [pc, #24]	@ (8009b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	091b      	lsrs	r3, r3, #4
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	4904      	ldr	r1, [pc, #16]	@ (8009b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b22:	5ccb      	ldrb	r3, [r1, r3]
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	58024400 	.word	0x58024400
 8009b34:	0801499c 	.word	0x0801499c

08009b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b3c:	f7ff ffb6 	bl	8009aac <HAL_RCC_GetHCLKFreq>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4b06      	ldr	r3, [pc, #24]	@ (8009b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	4904      	ldr	r1, [pc, #16]	@ (8009b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b4e:	5ccb      	ldrb	r3, [r1, r3]
 8009b50:	f003 031f 	and.w	r3, r3, #31
 8009b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	0801499c 	.word	0x0801499c

08009b64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b68:	b0ca      	sub	sp, #296	@ 0x128
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b76:	2300      	movs	r3, #0
 8009b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009b88:	2500      	movs	r5, #0
 8009b8a:	ea54 0305 	orrs.w	r3, r4, r5
 8009b8e:	d049      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b9a:	d02f      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba0:	d828      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ba6:	d01a      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bac:	d822      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bb6:	d007      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009bb8:	e01c      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bba:	4bb8      	ldr	r3, [pc, #736]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	4ab7      	ldr	r2, [pc, #732]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bc6:	e01a      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bcc:	3308      	adds	r3, #8
 8009bce:	2102      	movs	r1, #2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f002 fb61 	bl	800c298 <RCCEx_PLL2_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bdc:	e00f      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be2:	3328      	adds	r3, #40	@ 0x28
 8009be4:	2102      	movs	r1, #2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fc08 	bl	800c3fc <RCCEx_PLL3_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bf2:	e004      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c06:	4ba5      	ldr	r3, [pc, #660]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c14:	4aa1      	ldr	r2, [pc, #644]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c16:	430b      	orrs	r3, r1
 8009c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c1a:	e003      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009c30:	f04f 0900 	mov.w	r9, #0
 8009c34:	ea58 0309 	orrs.w	r3, r8, r9
 8009c38:	d047      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d82a      	bhi.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c44:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c6f 	.word	0x08009c6f
 8009c54:	08009c85 	.word	0x08009c85
 8009c58:	08009ca3 	.word	0x08009ca3
 8009c5c:	08009ca3 	.word	0x08009ca3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c60:	4b8e      	ldr	r3, [pc, #568]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c64:	4a8d      	ldr	r2, [pc, #564]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c6c:	e01a      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c72:	3308      	adds	r3, #8
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f002 fb0e 	bl	800c298 <RCCEx_PLL2_Config>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c82:	e00f      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c88:	3328      	adds	r3, #40	@ 0x28
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f002 fbb5 	bl	800c3fc <RCCEx_PLL3_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c98:	e004      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ca0:	e000      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cac:	4b7b      	ldr	r3, [pc, #492]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	f023 0107 	bic.w	r1, r3, #7
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cba:	4a78      	ldr	r2, [pc, #480]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009cc0:	e003      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009cd6:	f04f 0b00 	mov.w	fp, #0
 8009cda:	ea5a 030b 	orrs.w	r3, sl, fp
 8009cde:	d04c      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cea:	d030      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cf0:	d829      	bhi.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cf4:	d02d      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cf8:	d825      	bhi.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009cfa:	2b80      	cmp	r3, #128	@ 0x80
 8009cfc:	d018      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009cfe:	2b80      	cmp	r3, #128	@ 0x80
 8009d00:	d821      	bhi.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d06:	2b40      	cmp	r3, #64	@ 0x40
 8009d08:	d007      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d0a:	e01c      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d0c:	4b63      	ldr	r3, [pc, #396]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d10:	4a62      	ldr	r2, [pc, #392]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d18:	e01c      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1e:	3308      	adds	r3, #8
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f002 fab8 	bl	800c298 <RCCEx_PLL2_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e011      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d34:	3328      	adds	r3, #40	@ 0x28
 8009d36:	2100      	movs	r1, #0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fb5f 	bl	800c3fc <RCCEx_PLL3_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d44:	e006      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d4c:	e002      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d4e:	bf00      	nop
 8009d50:	e000      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d70:	e003      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009d86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009d90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009d94:	460b      	mov	r3, r1
 8009d96:	4313      	orrs	r3, r2
 8009d98:	d053      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009da6:	d035      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dac:	d82e      	bhi.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009db2:	d031      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009db4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009db8:	d828      	bhi.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dbe:	d01a      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dc4:	d822      	bhi.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dce:	d007      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009dd0:	e01c      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd2:	4b32      	ldr	r3, [pc, #200]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd6:	4a31      	ldr	r2, [pc, #196]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dde:	e01c      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de4:	3308      	adds	r3, #8
 8009de6:	2100      	movs	r1, #0
 8009de8:	4618      	mov	r0, r3
 8009dea:	f002 fa55 	bl	800c298 <RCCEx_PLL2_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009df4:	e011      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfa:	3328      	adds	r3, #40	@ 0x28
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 fafc 	bl	800c3fc <RCCEx_PLL3_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e0a:	e006      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e12:	e002      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e14:	bf00      	nop
 8009e16:	e000      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10b      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e22:	4b1e      	ldr	r3, [pc, #120]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e32:	4a1a      	ldr	r2, [pc, #104]	@ (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e34:	430b      	orrs	r3, r1
 8009e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e38:	e003      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009e4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009e52:	2300      	movs	r3, #0
 8009e54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009e58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	d056      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e6e:	d038      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e74:	d831      	bhi.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e7a:	d034      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009e7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e80:	d82b      	bhi.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e86:	d01d      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e8c:	d825      	bhi.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e96:	d00a      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e98:	e01f      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e9a:	bf00      	nop
 8009e9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea0:	4ba2      	ldr	r3, [pc, #648]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea4:	4aa1      	ldr	r2, [pc, #644]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eac:	e01c      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 f9ee 	bl	800c298 <RCCEx_PLL2_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ec2:	e011      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec8:	3328      	adds	r3, #40	@ 0x28
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f002 fa95 	bl	800c3fc <RCCEx_PLL3_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ed8:	e006      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ee0:	e002      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ee2:	bf00      	nop
 8009ee4:	e000      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ef4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f00:	4a8a      	ldr	r2, [pc, #552]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f06:	e003      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f20:	2300      	movs	r3, #0
 8009f22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	d03a      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f36:	2b30      	cmp	r3, #48	@ 0x30
 8009f38:	d01f      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f3a:	2b30      	cmp	r3, #48	@ 0x30
 8009f3c:	d819      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d00c      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	d815      	bhi.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d019      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009f4a:	2b10      	cmp	r3, #16
 8009f4c:	d111      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4e:	4b77      	ldr	r3, [pc, #476]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	4a76      	ldr	r2, [pc, #472]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f5a:	e011      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	3308      	adds	r3, #8
 8009f62:	2102      	movs	r1, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f002 f997 	bl	800c298 <RCCEx_PLL2_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f70:	e006      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f78:	e002      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f7a:	bf00      	nop
 8009f7c:	e000      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f88:	4b68      	ldr	r3, [pc, #416]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f96:	4a65      	ldr	r2, [pc, #404]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f9c:	e003      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009fb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009fbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	d051      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fd0:	d035      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fd6:	d82e      	bhi.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009fd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fdc:	d031      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fe2:	d828      	bhi.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fe8:	d01a      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fee:	d822      	bhi.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff8:	d007      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009ffa:	e01c      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a000:	4a4a      	ldr	r2, [pc, #296]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a008:	e01c      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00e:	3308      	adds	r3, #8
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f002 f940 	bl	800c298 <RCCEx_PLL2_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a01e:	e011      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a024:	3328      	adds	r3, #40	@ 0x28
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 f9e7 	bl	800c3fc <RCCEx_PLL3_Config>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a034:	e006      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a03c:	e002      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a03e:	bf00      	nop
 800a040:	e000      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a04c:	4b37      	ldr	r3, [pc, #220]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a050:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a05a:	4a34      	ldr	r2, [pc, #208]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05c:	430b      	orrs	r3, r1
 800a05e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a060:	e003      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a07a:	2300      	movs	r3, #0
 800a07c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a080:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a084:	460b      	mov	r3, r1
 800a086:	4313      	orrs	r3, r2
 800a088:	d056      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a094:	d033      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a096:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a09a:	d82c      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a09c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0a0:	d02f      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0a6:	d826      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0ac:	d02b      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a0ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0b2:	d820      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0b8:	d012      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a0ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0be:	d81a      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d022      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a0c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0c8:	d115      	bne.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f002 f8e0 	bl	800c298 <RCCEx_PLL2_Config>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0de:	e015      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e4:	3328      	adds	r3, #40	@ 0x28
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f002 f987 	bl	800c3fc <RCCEx_PLL3_Config>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0f4:	e00a      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0fc:	e006      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a0fe:	bf00      	nop
 800a100:	e004      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a102:	bf00      	nop
 800a104:	e002      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a106:	bf00      	nop
 800a108:	e000      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a10a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a10c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10d      	bne.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a118:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a122:	4a02      	ldr	r2, [pc, #8]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a124:	430b      	orrs	r3, r1
 800a126:	6513      	str	r3, [r2, #80]	@ 0x50
 800a128:	e006      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a12a:	bf00      	nop
 800a12c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a148:	2300      	movs	r3, #0
 800a14a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a14e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a152:	460b      	mov	r3, r1
 800a154:	4313      	orrs	r3, r2
 800a156:	d055      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a164:	d033      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a16a:	d82c      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a16c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a170:	d02f      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a176:	d826      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a178:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a17c:	d02b      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a17e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a182:	d820      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a188:	d012      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a18a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a18e:	d81a      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a198:	d115      	bne.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19e:	3308      	adds	r3, #8
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f002 f878 	bl	800c298 <RCCEx_PLL2_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1ae:	e015      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b4:	3328      	adds	r3, #40	@ 0x28
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f002 f91f 	bl	800c3fc <RCCEx_PLL3_Config>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1c4:	e00a      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1cc:	e006      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1ce:	bf00      	nop
 800a1d0:	e004      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1d2:	bf00      	nop
 800a1d4:	e002      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1d6:	bf00      	nop
 800a1d8:	e000      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10b      	bne.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a1e4:	4ba3      	ldr	r3, [pc, #652]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1f4:	4a9f      	ldr	r2, [pc, #636]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1fa:	e003      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a214:	2300      	movs	r3, #0
 800a216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a21a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a21e:	460b      	mov	r3, r1
 800a220:	4313      	orrs	r3, r2
 800a222:	d037      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22e:	d00e      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a234:	d816      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d018      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a23a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a23e:	d111      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a240:	4b8c      	ldr	r3, [pc, #560]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a244:	4a8b      	ldr	r2, [pc, #556]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a24a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a24c:	e00f      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a252:	3308      	adds	r3, #8
 800a254:	2101      	movs	r1, #1
 800a256:	4618      	mov	r0, r3
 800a258:	f002 f81e 	bl	800c298 <RCCEx_PLL2_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a262:	e004      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a26a:	e000      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a276:	4b7f      	ldr	r3, [pc, #508]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a27a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a284:	4a7b      	ldr	r2, [pc, #492]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a286:	430b      	orrs	r3, r1
 800a288:	6513      	str	r3, [r2, #80]	@ 0x50
 800a28a:	e003      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a28c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a2aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	d039      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d81c      	bhi.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a2be:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a301 	.word	0x0800a301
 800a2c8:	0800a2d5 	.word	0x0800a2d5
 800a2cc:	0800a2e3 	.word	0x0800a2e3
 800a2d0:	0800a301 	.word	0x0800a301
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d4:	4b67      	ldr	r3, [pc, #412]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d8:	4a66      	ldr	r2, [pc, #408]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2e0:	e00f      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 ffd4 	bl	800c298 <RCCEx_PLL2_Config>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2f6:	e004      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2fe:	e000      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a300:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a30a:	4b5a      	ldr	r3, [pc, #360]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a30c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a30e:	f023 0103 	bic.w	r1, r3, #3
 800a312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a318:	4a56      	ldr	r2, [pc, #344]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a31a:	430b      	orrs	r3, r1
 800a31c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a31e:	e003      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a334:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a338:	2300      	movs	r3, #0
 800a33a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a33e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a342:	460b      	mov	r3, r1
 800a344:	4313      	orrs	r3, r2
 800a346:	f000 809f 	beq.w	800a488 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a34a:	4b4b      	ldr	r3, [pc, #300]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a4a      	ldr	r2, [pc, #296]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a356:	f7fb fc55 	bl	8005c04 <HAL_GetTick>
 800a35a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a35e:	e00b      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a360:	f7fb fc50 	bl	8005c04 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	2b64      	cmp	r3, #100	@ 0x64
 800a36e:	d903      	bls.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a376:	e005      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a378:	4b3f      	ldr	r3, [pc, #252]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0ed      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d179      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a38c:	4b39      	ldr	r3, [pc, #228]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a38e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a394:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a398:	4053      	eors	r3, r2
 800a39a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d015      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3a2:	4b34      	ldr	r3, [pc, #208]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3ae:	4b31      	ldr	r3, [pc, #196]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b2:	4a30      	ldr	r2, [pc, #192]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3ba:	4b2e      	ldr	r3, [pc, #184]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3be:	4a2d      	ldr	r2, [pc, #180]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3da:	d118      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3dc:	f7fb fc12 	bl	8005c04 <HAL_GetTick>
 800a3e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3e4:	e00d      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3e6:	f7fb fc0d 	bl	8005c04 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a3f0:	1ad2      	subs	r2, r2, r3
 800a3f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d903      	bls.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a400:	e005      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a402:	4b1c      	ldr	r3, [pc, #112]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0eb      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a40e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a412:	2b00      	cmp	r3, #0
 800a414:	d129      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a41e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a426:	d10e      	bne.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a428:	4b12      	ldr	r3, [pc, #72]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a438:	091a      	lsrs	r2, r3, #4
 800a43a:	4b10      	ldr	r3, [pc, #64]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a43c:	4013      	ands	r3, r2
 800a43e:	4a0d      	ldr	r2, [pc, #52]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a440:	430b      	orrs	r3, r1
 800a442:	6113      	str	r3, [r2, #16]
 800a444:	e005      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a446:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	4a0a      	ldr	r2, [pc, #40]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a450:	6113      	str	r3, [r2, #16]
 800a452:	4b08      	ldr	r3, [pc, #32]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a454:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a45e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a462:	4a04      	ldr	r2, [pc, #16]	@ (800a474 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a464:	430b      	orrs	r3, r1
 800a466:	6713      	str	r3, [r2, #112]	@ 0x70
 800a468:	e00e      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a46e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a472:	e009      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a474:	58024400 	.word	0x58024400
 800a478:	58024800 	.word	0x58024800
 800a47c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f002 0301 	and.w	r3, r2, #1
 800a494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a498:	2300      	movs	r3, #0
 800a49a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a49e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	f000 8089 	beq.w	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4b0:	2b28      	cmp	r3, #40	@ 0x28
 800a4b2:	d86b      	bhi.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a595 	.word	0x0800a595
 800a4c0:	0800a58d 	.word	0x0800a58d
 800a4c4:	0800a58d 	.word	0x0800a58d
 800a4c8:	0800a58d 	.word	0x0800a58d
 800a4cc:	0800a58d 	.word	0x0800a58d
 800a4d0:	0800a58d 	.word	0x0800a58d
 800a4d4:	0800a58d 	.word	0x0800a58d
 800a4d8:	0800a58d 	.word	0x0800a58d
 800a4dc:	0800a561 	.word	0x0800a561
 800a4e0:	0800a58d 	.word	0x0800a58d
 800a4e4:	0800a58d 	.word	0x0800a58d
 800a4e8:	0800a58d 	.word	0x0800a58d
 800a4ec:	0800a58d 	.word	0x0800a58d
 800a4f0:	0800a58d 	.word	0x0800a58d
 800a4f4:	0800a58d 	.word	0x0800a58d
 800a4f8:	0800a58d 	.word	0x0800a58d
 800a4fc:	0800a577 	.word	0x0800a577
 800a500:	0800a58d 	.word	0x0800a58d
 800a504:	0800a58d 	.word	0x0800a58d
 800a508:	0800a58d 	.word	0x0800a58d
 800a50c:	0800a58d 	.word	0x0800a58d
 800a510:	0800a58d 	.word	0x0800a58d
 800a514:	0800a58d 	.word	0x0800a58d
 800a518:	0800a58d 	.word	0x0800a58d
 800a51c:	0800a595 	.word	0x0800a595
 800a520:	0800a58d 	.word	0x0800a58d
 800a524:	0800a58d 	.word	0x0800a58d
 800a528:	0800a58d 	.word	0x0800a58d
 800a52c:	0800a58d 	.word	0x0800a58d
 800a530:	0800a58d 	.word	0x0800a58d
 800a534:	0800a58d 	.word	0x0800a58d
 800a538:	0800a58d 	.word	0x0800a58d
 800a53c:	0800a595 	.word	0x0800a595
 800a540:	0800a58d 	.word	0x0800a58d
 800a544:	0800a58d 	.word	0x0800a58d
 800a548:	0800a58d 	.word	0x0800a58d
 800a54c:	0800a58d 	.word	0x0800a58d
 800a550:	0800a58d 	.word	0x0800a58d
 800a554:	0800a58d 	.word	0x0800a58d
 800a558:	0800a58d 	.word	0x0800a58d
 800a55c:	0800a595 	.word	0x0800a595
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a564:	3308      	adds	r3, #8
 800a566:	2101      	movs	r1, #1
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 fe95 	bl	800c298 <RCCEx_PLL2_Config>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a574:	e00f      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57a:	3328      	adds	r3, #40	@ 0x28
 800a57c:	2101      	movs	r1, #1
 800a57e:	4618      	mov	r0, r3
 800a580:	f001 ff3c 	bl	800c3fc <RCCEx_PLL3_Config>
 800a584:	4603      	mov	r3, r0
 800a586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a58a:	e004      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a592:	e000      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a594:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10a      	bne.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a59e:	4bbf      	ldr	r3, [pc, #764]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ac:	4abb      	ldr	r2, [pc, #748]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5b2:	e003      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f002 0302 	and.w	r3, r2, #2
 800a5c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a5d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	d041      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d824      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ec:	0800a639 	.word	0x0800a639
 800a5f0:	0800a605 	.word	0x0800a605
 800a5f4:	0800a61b 	.word	0x0800a61b
 800a5f8:	0800a639 	.word	0x0800a639
 800a5fc:	0800a639 	.word	0x0800a639
 800a600:	0800a639 	.word	0x0800a639
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a608:	3308      	adds	r3, #8
 800a60a:	2101      	movs	r1, #1
 800a60c:	4618      	mov	r0, r3
 800a60e:	f001 fe43 	bl	800c298 <RCCEx_PLL2_Config>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a618:	e00f      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a61e:	3328      	adds	r3, #40	@ 0x28
 800a620:	2101      	movs	r1, #1
 800a622:	4618      	mov	r0, r3
 800a624:	f001 feea 	bl	800c3fc <RCCEx_PLL3_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a62e:	e004      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a636:	e000      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a642:	4b96      	ldr	r3, [pc, #600]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a646:	f023 0107 	bic.w	r1, r3, #7
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a650:	4a92      	ldr	r2, [pc, #584]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a652:	430b      	orrs	r3, r1
 800a654:	6553      	str	r3, [r2, #84]	@ 0x54
 800a656:	e003      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a65c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f002 0304 	and.w	r3, r2, #4
 800a66c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a670:	2300      	movs	r3, #0
 800a672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a676:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4313      	orrs	r3, r2
 800a67e:	d044      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a688:	2b05      	cmp	r3, #5
 800a68a:	d825      	bhi.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a68c:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a692:	bf00      	nop
 800a694:	0800a6e1 	.word	0x0800a6e1
 800a698:	0800a6ad 	.word	0x0800a6ad
 800a69c:	0800a6c3 	.word	0x0800a6c3
 800a6a0:	0800a6e1 	.word	0x0800a6e1
 800a6a4:	0800a6e1 	.word	0x0800a6e1
 800a6a8:	0800a6e1 	.word	0x0800a6e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 fdef 	bl	800c298 <RCCEx_PLL2_Config>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6c0:	e00f      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c6:	3328      	adds	r3, #40	@ 0x28
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f001 fe96 	bl	800c3fc <RCCEx_PLL3_Config>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6d6:	e004      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6de:	e000      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6ea:	4b6c      	ldr	r3, [pc, #432]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ee:	f023 0107 	bic.w	r1, r3, #7
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6fa:	4a68      	ldr	r2, [pc, #416]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800a700:	e003      	b.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f002 0320 	and.w	r3, r2, #32
 800a716:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a71a:	2300      	movs	r3, #0
 800a71c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a724:	460b      	mov	r3, r1
 800a726:	4313      	orrs	r3, r2
 800a728:	d055      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a736:	d033      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a73c:	d82c      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a742:	d02f      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a748:	d826      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a74a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a74e:	d02b      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a750:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a754:	d820      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a75a:	d012      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a75c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a760:	d81a      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a762:	2b00      	cmp	r3, #0
 800a764:	d022      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a76a:	d115      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a770:	3308      	adds	r3, #8
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f001 fd8f 	bl	800c298 <RCCEx_PLL2_Config>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a780:	e015      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a786:	3328      	adds	r3, #40	@ 0x28
 800a788:	2102      	movs	r1, #2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 fe36 	bl	800c3fc <RCCEx_PLL3_Config>
 800a790:	4603      	mov	r3, r0
 800a792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a796:	e00a      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a79e:	e006      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7a0:	bf00      	nop
 800a7a2:	e004      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7a4:	bf00      	nop
 800a7a6:	e002      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7a8:	bf00      	nop
 800a7aa:	e000      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10b      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7b6:	4b39      	ldr	r3, [pc, #228]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c6:	4a35      	ldr	r2, [pc, #212]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7cc:	e003      	b.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a7e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a7ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	d058      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a802:	d033      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a804:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a808:	d82c      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a80a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a80e:	d02f      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a814:	d826      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a816:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a81a:	d02b      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a81c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a820:	d820      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a826:	d012      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a82c:	d81a      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d022      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a836:	d115      	bne.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a83c:	3308      	adds	r3, #8
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f001 fd29 	bl	800c298 <RCCEx_PLL2_Config>
 800a846:	4603      	mov	r3, r0
 800a848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a84c:	e015      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a852:	3328      	adds	r3, #40	@ 0x28
 800a854:	2102      	movs	r1, #2
 800a856:	4618      	mov	r0, r3
 800a858:	f001 fdd0 	bl	800c3fc <RCCEx_PLL3_Config>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a862:	e00a      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a86a:	e006      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a86c:	bf00      	nop
 800a86e:	e004      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a870:	bf00      	nop
 800a872:	e002      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a874:	bf00      	nop
 800a876:	e000      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a87a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10e      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a882:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a886:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a88e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a892:	4a02      	ldr	r2, [pc, #8]	@ (800a89c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a894:	430b      	orrs	r3, r1
 800a896:	6593      	str	r3, [r2, #88]	@ 0x58
 800a898:	e006      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a8b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d055      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a8d4:	d033      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a8d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a8da:	d82c      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8e0:	d02f      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a8e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8e6:	d826      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a8ec:	d02b      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a8ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a8f2:	d820      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8f8:	d012      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a8fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8fe:	d81a      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d022      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a908:	d115      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	3308      	adds	r3, #8
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f001 fcc0 	bl	800c298 <RCCEx_PLL2_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a91e:	e015      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a924:	3328      	adds	r3, #40	@ 0x28
 800a926:	2102      	movs	r1, #2
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fd67 	bl	800c3fc <RCCEx_PLL3_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a934:	e00a      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a93c:	e006      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a93e:	bf00      	nop
 800a940:	e004      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a942:	bf00      	nop
 800a944:	e002      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a946:	bf00      	nop
 800a948:	e000      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a94a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a954:	4ba1      	ldr	r3, [pc, #644]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a958:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a964:	4a9d      	ldr	r2, [pc, #628]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a966:	430b      	orrs	r3, r1
 800a968:	6593      	str	r3, [r2, #88]	@ 0x58
 800a96a:	e003      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f002 0308 	and.w	r3, r2, #8
 800a980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a98a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a98e:	460b      	mov	r3, r1
 800a990:	4313      	orrs	r3, r2
 800a992:	d01e      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a99c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9a0:	d10c      	bne.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a6:	3328      	adds	r3, #40	@ 0x28
 800a9a8:	2102      	movs	r1, #2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 fd26 	bl	800c3fc <RCCEx_PLL3_Config>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9bc:	4b87      	ldr	r3, [pc, #540]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9cc:	4a83      	ldr	r2, [pc, #524]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f002 0310 	and.w	r3, r2, #16
 800a9de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	d01e      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9fe:	d10c      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa04:	3328      	adds	r3, #40	@ 0x28
 800aa06:	2102      	movs	r1, #2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f001 fcf7 	bl	800c3fc <RCCEx_PLL3_Config>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa1a:	4b70      	ldr	r3, [pc, #448]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa2a:	4a6c      	ldr	r2, [pc, #432]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aa3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa40:	2300      	movs	r3, #0
 800aa42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	d03e      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa5c:	d022      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aa5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa62:	d81b      	bhi.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aa68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa6c:	d00b      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aa6e:	e015      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa74:	3308      	adds	r3, #8
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 fc0d 	bl	800c298 <RCCEx_PLL2_Config>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa84:	e00f      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa8a:	3328      	adds	r3, #40	@ 0x28
 800aa8c:	2102      	movs	r1, #2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 fcb4 	bl	800c3fc <RCCEx_PLL3_Config>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa9a:	e004      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aaa2:	e000      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aaa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aaae:	4b4b      	ldr	r3, [pc, #300]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aabe:	4a47      	ldr	r2, [pc, #284]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aac0:	430b      	orrs	r3, r1
 800aac2:	6593      	str	r3, [r2, #88]	@ 0x58
 800aac4:	e003      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800aada:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aadc:	2300      	movs	r3, #0
 800aade:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aae0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aae4:	460b      	mov	r3, r1
 800aae6:	4313      	orrs	r3, r2
 800aae8:	d03b      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aaf6:	d01f      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800aaf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aafc:	d818      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800aafe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab02:	d003      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab08:	d007      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab0a:	e011      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab0c:	4b33      	ldr	r3, [pc, #204]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab10:	4a32      	ldr	r2, [pc, #200]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab18:	e00f      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1e:	3328      	adds	r3, #40	@ 0x28
 800ab20:	2101      	movs	r1, #1
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 fc6a 	bl	800c3fc <RCCEx_PLL3_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab2e:	e004      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab36:	e000      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10b      	bne.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab42:	4b26      	ldr	r3, [pc, #152]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab52:	4a22      	ldr	r2, [pc, #136]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab54:	430b      	orrs	r3, r1
 800ab56:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab58:	e003      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ab6e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab70:	2300      	movs	r3, #0
 800ab72:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	d034      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ab88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab8c:	d007      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ab8e:	e011      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab90:	4b12      	ldr	r3, [pc, #72]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab94:	4a11      	ldr	r2, [pc, #68]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab9c:	e00e      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba2:	3308      	adds	r3, #8
 800aba4:	2102      	movs	r1, #2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 fb76 	bl	800c298 <RCCEx_PLL2_Config>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abb2:	e003      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10d      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800abc4:	4b05      	ldr	r3, [pc, #20]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abd2:	4a02      	ldr	r2, [pc, #8]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abd8:	e006      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800abf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abf6:	2300      	movs	r3, #0
 800abf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800abfe:	460b      	mov	r3, r1
 800ac00:	4313      	orrs	r3, r2
 800ac02:	d00c      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac08:	3328      	adds	r3, #40	@ 0x28
 800ac0a:	2102      	movs	r1, #2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f001 fbf5 	bl	800c3fc <RCCEx_PLL3_Config>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ac2a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ac34:	460b      	mov	r3, r1
 800ac36:	4313      	orrs	r3, r2
 800ac38:	d038      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac46:	d018      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ac48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac4c:	d811      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac52:	d014      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ac54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac58:	d80b      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d011      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ac5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac62:	d106      	bne.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4bc3      	ldr	r3, [pc, #780]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	4ac2      	ldr	r2, [pc, #776]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac70:	e008      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac78:	e004      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10b      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac8c:	4bb9      	ldr	r3, [pc, #740]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac9c:	4ab5      	ldr	r2, [pc, #724]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aca2:	e003      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800acb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acba:	2300      	movs	r3, #0
 800acbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800acc2:	460b      	mov	r3, r1
 800acc4:	4313      	orrs	r3, r2
 800acc6:	d009      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800acc8:	4baa      	ldr	r3, [pc, #680]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800accc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acd6:	4aa7      	ldr	r2, [pc, #668]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acd8:	430b      	orrs	r3, r1
 800acda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ace8:	653b      	str	r3, [r7, #80]	@ 0x50
 800acea:	2300      	movs	r3, #0
 800acec:	657b      	str	r3, [r7, #84]	@ 0x54
 800acee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	d00a      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800acf8:	4b9e      	ldr	r3, [pc, #632]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ad00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ad08:	4a9a      	ldr	r2, [pc, #616]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad0a:	430b      	orrs	r3, r1
 800ad0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ad1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ad24:	460b      	mov	r3, r1
 800ad26:	4313      	orrs	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad2a:	4b92      	ldr	r3, [pc, #584]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ad32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad38:	4a8e      	ldr	r2, [pc, #568]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3a:	430b      	orrs	r3, r1
 800ad3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ad4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ad54:	460b      	mov	r3, r1
 800ad56:	4313      	orrs	r3, r2
 800ad58:	d00e      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad5a:	4b86      	ldr	r3, [pc, #536]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	4a85      	ldr	r2, [pc, #532]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad64:	6113      	str	r3, [r2, #16]
 800ad66:	4b83      	ldr	r3, [pc, #524]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad68:	6919      	ldr	r1, [r3, #16]
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ad72:	4a80      	ldr	r2, [pc, #512]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ad84:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	d009      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad94:	4b77      	ldr	r3, [pc, #476]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ad9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada2:	4a74      	ldr	r2, [pc, #464]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800adb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800adb6:	2300      	movs	r3, #0
 800adb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800adbe:	460b      	mov	r3, r1
 800adc0:	4313      	orrs	r3, r2
 800adc2:	d00a      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adc4:	4b6b      	ldr	r3, [pc, #428]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800adcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800add4:	4a67      	ldr	r2, [pc, #412]	@ (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800add6:	430b      	orrs	r3, r1
 800add8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800adda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	2100      	movs	r1, #0
 800ade4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800adf0:	460b      	mov	r3, r1
 800adf2:	4313      	orrs	r3, r2
 800adf4:	d011      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adfa:	3308      	adds	r3, #8
 800adfc:	2100      	movs	r1, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 fa4a 	bl	800c298 <RCCEx_PLL2_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	2100      	movs	r1, #0
 800ae24:	6239      	str	r1, [r7, #32]
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae30:	460b      	mov	r3, r1
 800ae32:	4313      	orrs	r3, r2
 800ae34:	d011      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f001 fa2a 	bl	800c298 <RCCEx_PLL2_Config>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	2100      	movs	r1, #0
 800ae64:	61b9      	str	r1, [r7, #24]
 800ae66:	f003 0304 	and.w	r3, r3, #4
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae70:	460b      	mov	r3, r1
 800ae72:	4313      	orrs	r3, r2
 800ae74:	d011      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	2102      	movs	r1, #2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fa0a 	bl	800c298 <RCCEx_PLL2_Config>
 800ae84:	4603      	mov	r3, r0
 800ae86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	2100      	movs	r1, #0
 800aea4:	6139      	str	r1, [r7, #16]
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	d011      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeba:	3328      	adds	r3, #40	@ 0x28
 800aebc:	2100      	movs	r1, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f001 fa9c 	bl	800c3fc <RCCEx_PLL3_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800aeca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	2100      	movs	r1, #0
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	f003 0310 	and.w	r3, r3, #16
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aef0:	460b      	mov	r3, r1
 800aef2:	4313      	orrs	r3, r2
 800aef4:	d011      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aefa:	3328      	adds	r3, #40	@ 0x28
 800aefc:	2101      	movs	r1, #1
 800aefe:	4618      	mov	r0, r3
 800af00:	f001 fa7c 	bl	800c3fc <RCCEx_PLL3_Config>
 800af04:	4603      	mov	r3, r0
 800af06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	2100      	movs	r1, #0
 800af24:	6039      	str	r1, [r7, #0]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	607b      	str	r3, [r7, #4]
 800af2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af30:	460b      	mov	r3, r1
 800af32:	4313      	orrs	r3, r2
 800af34:	d011      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3a:	3328      	adds	r3, #40	@ 0x28
 800af3c:	2102      	movs	r1, #2
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 fa5c 	bl	800c3fc <RCCEx_PLL3_Config>
 800af44:	4603      	mov	r3, r0
 800af46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800af5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	e000      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
}
 800af68:	4618      	mov	r0, r3
 800af6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800af6e:	46bd      	mov	sp, r7
 800af70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af74:	58024400 	.word	0x58024400

0800af78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b090      	sub	sp, #64	@ 0x40
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af86:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800af8a:	430b      	orrs	r3, r1
 800af8c:	f040 8094 	bne.w	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800af90:	4b9e      	ldr	r3, [pc, #632]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af94:	f003 0307 	and.w	r3, r3, #7
 800af98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	f200 8087 	bhi.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800afa2:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afe5 	.word	0x0800afe5
 800afb0:	0800b00d 	.word	0x0800b00d
 800afb4:	0800b0a9 	.word	0x0800b0a9
 800afb8:	0800b035 	.word	0x0800b035
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afbc:	4b93      	ldr	r3, [pc, #588]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afc8:	d108      	bne.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 f810 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd8:	f000 bd45 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe0:	f000 bd41 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe4:	4b89      	ldr	r3, [pc, #548]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aff0:	d108      	bne.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff2:	f107 0318 	add.w	r3, r7, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fd54 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b000:	f000 bd31 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b008:	f000 bd2d 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b00c:	4b7f      	ldr	r3, [pc, #508]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b018:	d108      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b01a:	f107 030c 	add.w	r3, r7, #12
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 fe94 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b028:	f000 bd1d 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b030:	f000 bd19 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b034:	4b75      	ldr	r3, [pc, #468]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b03e:	4b73      	ldr	r3, [pc, #460]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b04      	cmp	r3, #4
 800b048:	d10c      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d109      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b050:	4b6e      	ldr	r3, [pc, #440]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	08db      	lsrs	r3, r3, #3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	4a6d      	ldr	r2, [pc, #436]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
 800b060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b062:	e01f      	b.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b064:	4b69      	ldr	r3, [pc, #420]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b06c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b070:	d106      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b078:	d102      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b07a:	4b66      	ldr	r3, [pc, #408]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b07e:	e011      	b.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b080:	4b62      	ldr	r3, [pc, #392]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b08c:	d106      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b094:	d102      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b096:	4b60      	ldr	r3, [pc, #384]	@ (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b09a:	e003      	b.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0a0:	f000 bce1 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0a4:	f000 bcdf 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0a8:	4b5c      	ldr	r3, [pc, #368]	@ (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ac:	f000 bcdb 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b4:	f000 bcd7 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	f040 80ad 	bne.w	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b0c6:	4b51      	ldr	r3, [pc, #324]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0d6:	d056      	beq.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0de:	f200 8090 	bhi.w	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0e6:	f000 8088 	beq.w	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0ee:	f200 8088 	bhi.w	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f4:	2b80      	cmp	r3, #128	@ 0x80
 800b0f6:	d032      	beq.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	2b80      	cmp	r3, #128	@ 0x80
 800b0fc:	f200 8081 	bhi.w	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b108:	2b40      	cmp	r3, #64	@ 0x40
 800b10a:	d014      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b10c:	e079      	b.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b10e:	4b3f      	ldr	r3, [pc, #252]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b11a:	d108      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b11c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b120:	4618      	mov	r0, r3
 800b122:	f000 ff67 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12a:	f000 bc9c 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b132:	f000 bc98 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b136:	4b35      	ldr	r3, [pc, #212]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b13e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b142:	d108      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b144:	f107 0318 	add.w	r3, r7, #24
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fcab 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b152:	f000 bc88 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b15a:	f000 bc84 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b15e:	4b2b      	ldr	r3, [pc, #172]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b16a:	d108      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b16c:	f107 030c 	add.w	r3, r7, #12
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fdeb 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b17a:	f000 bc74 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b182:	f000 bc70 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b186:	4b21      	ldr	r3, [pc, #132]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b18a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b18e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b190:	4b1e      	ldr	r3, [pc, #120]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d10c      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	08db      	lsrs	r3, r3, #3
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	4a18      	ldr	r2, [pc, #96]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1b4:	e01f      	b.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1b6:	4b15      	ldr	r3, [pc, #84]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1c2:	d106      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ca:	d102      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1cc:	4b11      	ldr	r3, [pc, #68]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1d0:	e011      	b.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1de:	d106      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1e6:	d102      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ec:	e003      	b.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1f2:	f000 bc38 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1f6:	f000 bc36 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1fa:	4b08      	ldr	r3, [pc, #32]	@ (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fe:	f000 bc32 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b206:	f000 bc2e 	b.w	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b20a:	bf00      	nop
 800b20c:	58024400 	.word	0x58024400
 800b210:	03d09000 	.word	0x03d09000
 800b214:	003d0900 	.word	0x003d0900
 800b218:	017d7840 	.word	0x017d7840
 800b21c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b224:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b228:	430b      	orrs	r3, r1
 800b22a:	f040 809c 	bne.w	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b22e:	4b9e      	ldr	r3, [pc, #632]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b232:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b236:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b23e:	d054      	beq.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b246:	f200 808b 	bhi.w	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b250:	f000 8083 	beq.w	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b25a:	f200 8081 	bhi.w	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b264:	d02f      	beq.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b26c:	d878      	bhi.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b27a:	d012      	beq.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b27c:	e070      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b27e:	4b8a      	ldr	r3, [pc, #552]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b28a:	d107      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b28c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b290:	4618      	mov	r0, r3
 800b292:	f000 feaf 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29a:	e3e4      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a0:	e3e1      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2a2:	4b81      	ldr	r3, [pc, #516]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2ae:	d107      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b0:	f107 0318 	add.w	r3, r7, #24
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fbf5 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2be:	e3d2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e3cf      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2c6:	4b78      	ldr	r3, [pc, #480]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2d2:	d107      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d4:	f107 030c 	add.w	r3, r7, #12
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fd37 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e2:	e3c0      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e8:	e3bd      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2ea:	4b6f      	ldr	r3, [pc, #444]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2f4:	4b6c      	ldr	r3, [pc, #432]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0304 	and.w	r3, r3, #4
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d10c      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b302:	2b00      	cmp	r3, #0
 800b304:	d109      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b306:	4b68      	ldr	r3, [pc, #416]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	08db      	lsrs	r3, r3, #3
 800b30c:	f003 0303 	and.w	r3, r3, #3
 800b310:	4a66      	ldr	r2, [pc, #408]	@ (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b312:	fa22 f303 	lsr.w	r3, r2, r3
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b318:	e01e      	b.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b31a:	4b63      	ldr	r3, [pc, #396]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b326:	d106      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b32e:	d102      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b330:	4b5f      	ldr	r3, [pc, #380]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b334:	e010      	b.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b336:	4b5c      	ldr	r3, [pc, #368]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b33e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b342:	d106      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b34a:	d102      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b34c:	4b59      	ldr	r3, [pc, #356]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b350:	e002      	b.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b356:	e386      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b358:	e385      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b35a:	4b57      	ldr	r3, [pc, #348]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b35e:	e382      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b364:	e37f      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b36e:	430b      	orrs	r3, r1
 800b370:	f040 80a7 	bne.w	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b374:	4b4c      	ldr	r3, [pc, #304]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b378:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b37c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b384:	d055      	beq.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b38c:	f200 8096 	bhi.w	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b396:	f000 8084 	beq.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b3a0:	f200 808c 	bhi.w	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3aa:	d030      	beq.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3b2:	f200 8083 	bhi.w	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d004      	beq.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3c2:	d012      	beq.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b3c4:	e07a      	b.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3c6:	4b38      	ldr	r3, [pc, #224]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3d2:	d107      	bne.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 fe0b 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e2:	e340      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e8:	e33d      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3f6:	d107      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f8:	f107 0318 	add.w	r3, r7, #24
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fb51 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b406:	e32e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40c:	e32b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b40e:	4b26      	ldr	r3, [pc, #152]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b41a:	d107      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b41c:	f107 030c 	add.w	r3, r7, #12
 800b420:	4618      	mov	r0, r3
 800b422:	f000 fc93 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42a:	e31c      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b430:	e319      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b432:	4b1d      	ldr	r3, [pc, #116]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b43a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b43c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b04      	cmp	r3, #4
 800b446:	d10c      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d109      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b44e:	4b16      	ldr	r3, [pc, #88]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	08db      	lsrs	r3, r3, #3
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	4a14      	ldr	r2, [pc, #80]	@ (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b45a:	fa22 f303 	lsr.w	r3, r2, r3
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b460:	e01e      	b.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b462:	4b11      	ldr	r3, [pc, #68]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b46a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b46e:	d106      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b476:	d102      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b478:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b47c:	e010      	b.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b47e:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b48a:	d106      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b492:	d102      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b494:	4b07      	ldr	r3, [pc, #28]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b498:	e002      	b.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b49e:	e2e2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4a0:	e2e1      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4a2:	4b05      	ldr	r3, [pc, #20]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a6:	e2de      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	03d09000 	.word	0x03d09000
 800b4b0:	003d0900 	.word	0x003d0900
 800b4b4:	017d7840 	.word	0x017d7840
 800b4b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c0:	e2d1      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	f040 809c 	bne.w	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b4d0:	4b93      	ldr	r3, [pc, #588]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b4d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4e0:	d054      	beq.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4e8:	f200 808b 	bhi.w	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4f2:	f000 8083 	beq.w	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4fc:	f200 8081 	bhi.w	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b506:	d02f      	beq.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b50e:	d878      	bhi.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b51c:	d012      	beq.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b51e:	e070      	b.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b520:	4b7f      	ldr	r3, [pc, #508]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b52c:	d107      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b52e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b532:	4618      	mov	r0, r3
 800b534:	f000 fd5e 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53c:	e293      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b542:	e290      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b544:	4b76      	ldr	r3, [pc, #472]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b54c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b550:	d107      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b552:	f107 0318 	add.w	r3, r7, #24
 800b556:	4618      	mov	r0, r3
 800b558:	f000 faa4 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b560:	e281      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b566:	e27e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b568:	4b6d      	ldr	r3, [pc, #436]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b574:	d107      	bne.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b576:	f107 030c 	add.w	r3, r7, #12
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fbe6 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b584:	e26f      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b58a:	e26c      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b58c:	4b64      	ldr	r3, [pc, #400]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b590:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b594:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b596:	4b62      	ldr	r3, [pc, #392]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d10c      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5a8:	4b5d      	ldr	r3, [pc, #372]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	08db      	lsrs	r3, r3, #3
 800b5ae:	f003 0303 	and.w	r3, r3, #3
 800b5b2:	4a5c      	ldr	r2, [pc, #368]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ba:	e01e      	b.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5bc:	4b58      	ldr	r3, [pc, #352]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5c8:	d106      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5d0:	d102      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5d2:	4b55      	ldr	r3, [pc, #340]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5d6:	e010      	b.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5d8:	4b51      	ldr	r3, [pc, #324]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5e4:	d106      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ec:	d102      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5f2:	e002      	b.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5f8:	e235      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5fa:	e234      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5fc:	4b4c      	ldr	r3, [pc, #304]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b600:	e231      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b606:	e22e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b610:	430b      	orrs	r3, r1
 800b612:	f040 808f 	bne.w	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b616:	4b42      	ldr	r3, [pc, #264]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b61a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b61e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b626:	d06b      	beq.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b62e:	d874      	bhi.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b636:	d056      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b63e:	d86c      	bhi.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b646:	d03b      	beq.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b64e:	d864      	bhi.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b656:	d021      	beq.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b65e:	d85c      	bhi.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b66c:	d004      	beq.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b66e:	e054      	b.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b670:	f7fe fa4c 	bl	8009b0c <HAL_RCC_GetPCLK1Freq>
 800b674:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b676:	e1f6      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b678:	4b29      	ldr	r3, [pc, #164]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b684:	d107      	bne.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b686:	f107 0318 	add.w	r3, r7, #24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fa0a 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b694:	e1e7      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b69a:	e1e4      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b69c:	4b20      	ldr	r3, [pc, #128]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6a8:	d107      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6aa:	f107 030c 	add.w	r3, r7, #12
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fb4c 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b8:	e1d5      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6be:	e1d2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6c0:	4b17      	ldr	r3, [pc, #92]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d109      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6cc:	4b14      	ldr	r3, [pc, #80]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	08db      	lsrs	r3, r3, #3
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	4a13      	ldr	r2, [pc, #76]	@ (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6de:	e1c2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6e4:	e1bf      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6f2:	d102      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f8:	e1b5      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6fe:	e1b2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b700:	4b07      	ldr	r3, [pc, #28]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b70c:	d102      	bne.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b70e:	4b07      	ldr	r3, [pc, #28]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b712:	e1a8      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b718:	e1a5      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b71e:	e1a2      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b720:	58024400 	.word	0x58024400
 800b724:	03d09000 	.word	0x03d09000
 800b728:	003d0900 	.word	0x003d0900
 800b72c:	017d7840 	.word	0x017d7840
 800b730:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b734:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b738:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b73c:	430b      	orrs	r3, r1
 800b73e:	d173      	bne.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b740:	4b9c      	ldr	r3, [pc, #624]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b748:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b750:	d02f      	beq.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b758:	d863      	bhi.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d004      	beq.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b766:	d012      	beq.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b768:	e05b      	b.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b76a:	4b92      	ldr	r3, [pc, #584]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b776:	d107      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b778:	f107 0318 	add.w	r3, r7, #24
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 f991 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b786:	e16e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b78c:	e16b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b78e:	4b89      	ldr	r3, [pc, #548]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b79a:	d107      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b79c:	f107 030c 	add.w	r3, r7, #12
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 fad3 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7aa:	e15c      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b0:	e159      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7b2:	4b80      	ldr	r3, [pc, #512]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7bc:	4b7d      	ldr	r3, [pc, #500]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d10c      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ce:	4b79      	ldr	r3, [pc, #484]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	08db      	lsrs	r3, r3, #3
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	4a77      	ldr	r2, [pc, #476]	@ (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b7da:	fa22 f303 	lsr.w	r3, r2, r3
 800b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e0:	e01e      	b.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7e2:	4b74      	ldr	r3, [pc, #464]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ee:	d106      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7f6:	d102      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7f8:	4b70      	ldr	r3, [pc, #448]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7fc:	e010      	b.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7fe:	4b6d      	ldr	r3, [pc, #436]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b80a:	d106      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b812:	d102      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b814:	4b6a      	ldr	r3, [pc, #424]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b818:	e002      	b.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b81e:	e122      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b820:	e121      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b826:	e11e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b82c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b830:	430b      	orrs	r3, r1
 800b832:	d133      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b834:	4b5f      	ldr	r3, [pc, #380]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b83c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b840:	2b00      	cmp	r3, #0
 800b842:	d004      	beq.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b84a:	d012      	beq.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b84c:	e023      	b.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b84e:	4b59      	ldr	r3, [pc, #356]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b85a:	d107      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b85c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b860:	4618      	mov	r0, r3
 800b862:	f000 fbc7 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86a:	e0fc      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b870:	e0f9      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b872:	4b50      	ldr	r3, [pc, #320]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b87a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b87e:	d107      	bne.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b880:	f107 0318 	add.w	r3, r7, #24
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f90d 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b88e:	e0ea      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b894:	e0e7      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89a:	e0e4      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	f040 808d 	bne.w	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b8aa:	4b42      	ldr	r3, [pc, #264]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b8b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8ba:	d06b      	beq.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8c2:	d874      	bhi.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ca:	d056      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8d2:	d86c      	bhi.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8da:	d03b      	beq.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8e2:	d864      	bhi.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8ea:	d021      	beq.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f2:	d85c      	bhi.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d004      	beq.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b900:	d004      	beq.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b902:	e054      	b.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b904:	f000 f8b8 	bl	800ba78 <HAL_RCCEx_GetD3PCLK1Freq>
 800b908:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b90a:	e0ac      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b90c:	4b29      	ldr	r3, [pc, #164]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b918:	d107      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b91a:	f107 0318 	add.w	r3, r7, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f8c0 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b928:	e09d      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92e:	e09a      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b930:	4b20      	ldr	r3, [pc, #128]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b93c:	d107      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b93e:	f107 030c 	add.w	r3, r7, #12
 800b942:	4618      	mov	r0, r3
 800b944:	f000 fa02 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94c:	e08b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b952:	e088      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b954:	4b17      	ldr	r3, [pc, #92]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d109      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b960:	4b14      	ldr	r3, [pc, #80]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	08db      	lsrs	r3, r3, #3
 800b966:	f003 0303 	and.w	r3, r3, #3
 800b96a:	4a13      	ldr	r2, [pc, #76]	@ (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b96c:	fa22 f303 	lsr.w	r3, r2, r3
 800b970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b972:	e078      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b978:	e075      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b97a:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b986:	d102      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b988:	4b0c      	ldr	r3, [pc, #48]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98c:	e06b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b992:	e068      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b994:	4b07      	ldr	r3, [pc, #28]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b99c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9a0:	d102      	bne.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b9a2:	4b07      	ldr	r3, [pc, #28]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a6:	e05e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ac:	e05b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b2:	e058      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9b4:	58024400 	.word	0x58024400
 800b9b8:	03d09000 	.word	0x03d09000
 800b9bc:	003d0900 	.word	0x003d0900
 800b9c0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b9cc:	430b      	orrs	r3, r1
 800b9ce:	d148      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b9d0:	4b27      	ldr	r3, [pc, #156]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9e0:	d02a      	beq.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9e8:	d838      	bhi.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d004      	beq.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f6:	d00d      	beq.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b9f8:	e030      	b.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9fa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba06:	d102      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ba08:	4b1a      	ldr	r3, [pc, #104]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba0c:	e02b      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba12:	e028      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba14:	4b16      	ldr	r3, [pc, #88]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba20:	d107      	bne.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 fae4 	bl	800bff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba30:	e019      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba36:	e016      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba38:	4b0d      	ldr	r3, [pc, #52]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba44:	d107      	bne.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba46:	f107 0318 	add.w	r3, r7, #24
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 f82a 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba54:	e007      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba5a:	e004      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba60:	e001      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ba66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3740      	adds	r7, #64	@ 0x40
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	58024400 	.word	0x58024400
 800ba74:	017d7840 	.word	0x017d7840

0800ba78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba7c:	f7fe f816 	bl	8009aac <HAL_RCC_GetHCLKFreq>
 800ba80:	4602      	mov	r2, r0
 800ba82:	4b06      	ldr	r3, [pc, #24]	@ (800ba9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	091b      	lsrs	r3, r3, #4
 800ba88:	f003 0307 	and.w	r3, r3, #7
 800ba8c:	4904      	ldr	r1, [pc, #16]	@ (800baa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba8e:	5ccb      	ldrb	r3, [r1, r3]
 800ba90:	f003 031f 	and.w	r3, r3, #31
 800ba94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	58024400 	.word	0x58024400
 800baa0:	0801499c 	.word	0x0801499c

0800baa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b089      	sub	sp, #36	@ 0x24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baac:	4ba1      	ldr	r3, [pc, #644]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bab6:	4b9f      	ldr	r3, [pc, #636]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baba:	0b1b      	lsrs	r3, r3, #12
 800babc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bac0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bac2:	4b9c      	ldr	r3, [pc, #624]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac6:	091b      	lsrs	r3, r3, #4
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bace:	4b99      	ldr	r3, [pc, #612]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad2:	08db      	lsrs	r3, r3, #3
 800bad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	fb02 f303 	mul.w	r3, r2, r3
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8111 	beq.w	800bd14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	f000 8083 	beq.w	800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	f200 80a1 	bhi.w	800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d056      	beq.n	800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb0e:	e099      	b.n	800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb10:	4b88      	ldr	r3, [pc, #544]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0320 	and.w	r3, r3, #32
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d02d      	beq.n	800bb78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb1c:	4b85      	ldr	r3, [pc, #532]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	08db      	lsrs	r3, r3, #3
 800bb22:	f003 0303 	and.w	r3, r3, #3
 800bb26:	4a84      	ldr	r2, [pc, #528]	@ (800bd38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb28:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb46:	4b7b      	ldr	r3, [pc, #492]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb76:	e087      	b.n	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb8a:	4b6a      	ldr	r3, [pc, #424]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbba:	e065      	b.n	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbce:	4b59      	ldr	r3, [pc, #356]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbe2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfe:	e043      	b.n	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	ee07 3a90 	vmov	s15, r3
 800bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc12:	4b48      	ldr	r3, [pc, #288]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc42:	e021      	b.n	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc56:	4b37      	ldr	r3, [pc, #220]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc88:	4b2a      	ldr	r3, [pc, #168]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc8c:	0a5b      	lsrs	r3, r3, #9
 800bc8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bca2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcae:	ee17 2a90 	vmov	r2, s15
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bcb6:	4b1f      	ldr	r3, [pc, #124]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcba:	0c1b      	lsrs	r3, r3, #16
 800bcbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc0:	ee07 3a90 	vmov	s15, r3
 800bcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcdc:	ee17 2a90 	vmov	r2, s15
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bce4:	4b13      	ldr	r3, [pc, #76]	@ (800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce8:	0e1b      	lsrs	r3, r3, #24
 800bcea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd0a:	ee17 2a90 	vmov	r2, s15
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd12:	e008      	b.n	800bd26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	609a      	str	r2, [r3, #8]
}
 800bd26:	bf00      	nop
 800bd28:	3724      	adds	r7, #36	@ 0x24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	58024400 	.word	0x58024400
 800bd38:	03d09000 	.word	0x03d09000
 800bd3c:	46000000 	.word	0x46000000
 800bd40:	4c742400 	.word	0x4c742400
 800bd44:	4a742400 	.word	0x4a742400
 800bd48:	4bbebc20 	.word	0x4bbebc20

0800bd4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b089      	sub	sp, #36	@ 0x24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd54:	4ba1      	ldr	r3, [pc, #644]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd5e:	4b9f      	ldr	r3, [pc, #636]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd62:	0d1b      	lsrs	r3, r3, #20
 800bd64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd6a:	4b9c      	ldr	r3, [pc, #624]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd76:	4b99      	ldr	r3, [pc, #612]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd7a:	08db      	lsrs	r3, r3, #3
 800bd7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	fb02 f303 	mul.w	r3, r2, r3
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 8111 	beq.w	800bfbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	f000 8083 	beq.w	800bea8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	f200 80a1 	bhi.w	800beec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d056      	beq.n	800be64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bdb6:	e099      	b.n	800beec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdb8:	4b88      	ldr	r3, [pc, #544]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0320 	and.w	r3, r3, #32
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d02d      	beq.n	800be20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdc4:	4b85      	ldr	r3, [pc, #532]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	08db      	lsrs	r3, r3, #3
 800bdca:	f003 0303 	and.w	r3, r3, #3
 800bdce:	4a84      	ldr	r2, [pc, #528]	@ (800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bdd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bdd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	ee07 3a90 	vmov	s15, r3
 800bddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdee:	4b7b      	ldr	r3, [pc, #492]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800be02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be1e:	e087      	b.n	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be32:	4b6a      	ldr	r3, [pc, #424]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be42:	ed97 6a03 	vldr	s12, [r7, #12]
 800be46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be62:	e065      	b.n	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be76:	4b59      	ldr	r3, [pc, #356]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be86:	ed97 6a03 	vldr	s12, [r7, #12]
 800be8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea6:	e043      	b.n	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800beb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beba:	4b48      	ldr	r3, [pc, #288]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bece:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beea:	e021      	b.n	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800befa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800befe:	4b37      	ldr	r3, [pc, #220]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf30:	4b2a      	ldr	r3, [pc, #168]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf34:	0a5b      	lsrs	r3, r3, #9
 800bf36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf56:	ee17 2a90 	vmov	r2, s15
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf5e:	4b1f      	ldr	r3, [pc, #124]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf62:	0c1b      	lsrs	r3, r3, #16
 800bf64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf68:	ee07 3a90 	vmov	s15, r3
 800bf6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf78:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf84:	ee17 2a90 	vmov	r2, s15
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf8c:	4b13      	ldr	r3, [pc, #76]	@ (800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf90:	0e1b      	lsrs	r3, r3, #24
 800bf92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfb2:	ee17 2a90 	vmov	r2, s15
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bfba:	e008      	b.n	800bfce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	609a      	str	r2, [r3, #8]
}
 800bfce:	bf00      	nop
 800bfd0:	3724      	adds	r7, #36	@ 0x24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	58024400 	.word	0x58024400
 800bfe0:	03d09000 	.word	0x03d09000
 800bfe4:	46000000 	.word	0x46000000
 800bfe8:	4c742400 	.word	0x4c742400
 800bfec:	4a742400 	.word	0x4a742400
 800bff0:	4bbebc20 	.word	0x4bbebc20

0800bff4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b089      	sub	sp, #36	@ 0x24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bffc:	4ba0      	ldr	r3, [pc, #640]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c000:	f003 0303 	and.w	r3, r3, #3
 800c004:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c006:	4b9e      	ldr	r3, [pc, #632]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00a:	091b      	lsrs	r3, r3, #4
 800c00c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c010:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c012:	4b9b      	ldr	r3, [pc, #620]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c01c:	4b98      	ldr	r3, [pc, #608]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c020:	08db      	lsrs	r3, r3, #3
 800c022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	fb02 f303 	mul.w	r3, r2, r3
 800c02c:	ee07 3a90 	vmov	s15, r3
 800c030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c034:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 8111 	beq.w	800c262 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	2b02      	cmp	r3, #2
 800c044:	f000 8083 	beq.w	800c14e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	f200 80a1 	bhi.w	800c192 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d056      	beq.n	800c10a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c05c:	e099      	b.n	800c192 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c05e:	4b88      	ldr	r3, [pc, #544]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0320 	and.w	r3, r3, #32
 800c066:	2b00      	cmp	r3, #0
 800c068:	d02d      	beq.n	800c0c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c06a:	4b85      	ldr	r3, [pc, #532]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	08db      	lsrs	r3, r3, #3
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	4a83      	ldr	r2, [pc, #524]	@ (800c284 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c076:	fa22 f303 	lsr.w	r3, r2, r3
 800c07a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c094:	4b7a      	ldr	r3, [pc, #488]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0c4:	e087      	b.n	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	ee07 3a90 	vmov	s15, r3
 800c0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c28c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d8:	4b69      	ldr	r3, [pc, #420]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c108:	e065      	b.n	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	ee07 3a90 	vmov	s15, r3
 800c110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c114:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c290 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11c:	4b58      	ldr	r3, [pc, #352]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c124:	ee07 3a90 	vmov	s15, r3
 800c128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c130:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c14c:	e043      	b.n	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c158:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c294 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c160:	4b47      	ldr	r3, [pc, #284]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c170:	ed97 6a03 	vldr	s12, [r7, #12]
 800c174:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c190:	e021      	b.n	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c28c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a4:	4b36      	ldr	r3, [pc, #216]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ac:	ee07 3a90 	vmov	s15, r3
 800c1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c288 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c1d6:	4b2a      	ldr	r3, [pc, #168]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1da:	0a5b      	lsrs	r3, r3, #9
 800c1dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1fc:	ee17 2a90 	vmov	r2, s15
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c204:	4b1e      	ldr	r3, [pc, #120]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c208:	0c1b      	lsrs	r3, r3, #16
 800c20a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c20e:	ee07 3a90 	vmov	s15, r3
 800c212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c22a:	ee17 2a90 	vmov	r2, s15
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c232:	4b13      	ldr	r3, [pc, #76]	@ (800c280 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c236:	0e1b      	lsrs	r3, r3, #24
 800c238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c258:	ee17 2a90 	vmov	r2, s15
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c260:	e008      	b.n	800c274 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	609a      	str	r2, [r3, #8]
}
 800c274:	bf00      	nop
 800c276:	3724      	adds	r7, #36	@ 0x24
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	58024400 	.word	0x58024400
 800c284:	03d09000 	.word	0x03d09000
 800c288:	46000000 	.word	0x46000000
 800c28c:	4c742400 	.word	0x4c742400
 800c290:	4a742400 	.word	0x4a742400
 800c294:	4bbebc20 	.word	0x4bbebc20

0800c298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2a6:	4b53      	ldr	r3, [pc, #332]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2aa:	f003 0303 	and.w	r3, r3, #3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d101      	bne.n	800c2b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e099      	b.n	800c3ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c2b6:	4b4f      	ldr	r3, [pc, #316]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a4e      	ldr	r2, [pc, #312]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2c2:	f7f9 fc9f 	bl	8005c04 <HAL_GetTick>
 800c2c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2c8:	e008      	b.n	800c2dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ca:	f7f9 fc9b 	bl	8005c04 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d901      	bls.n	800c2dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e086      	b.n	800c3ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2dc:	4b45      	ldr	r3, [pc, #276]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f0      	bne.n	800c2ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c2e8:	4b42      	ldr	r3, [pc, #264]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	031b      	lsls	r3, r3, #12
 800c2f6:	493f      	ldr	r1, [pc, #252]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	3b01      	subs	r3, #1
 800c302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	025b      	lsls	r3, r3, #9
 800c30e:	b29b      	uxth	r3, r3
 800c310:	431a      	orrs	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	3b01      	subs	r3, #1
 800c318:	041b      	lsls	r3, r3, #16
 800c31a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c31e:	431a      	orrs	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	3b01      	subs	r3, #1
 800c326:	061b      	lsls	r3, r3, #24
 800c328:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c32c:	4931      	ldr	r1, [pc, #196]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c332:	4b30      	ldr	r3, [pc, #192]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c336:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	492d      	ldr	r1, [pc, #180]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c340:	4313      	orrs	r3, r2
 800c342:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c344:	4b2b      	ldr	r3, [pc, #172]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c348:	f023 0220 	bic.w	r2, r3, #32
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	4928      	ldr	r1, [pc, #160]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c352:	4313      	orrs	r3, r2
 800c354:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c356:	4b27      	ldr	r3, [pc, #156]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	4a26      	ldr	r2, [pc, #152]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c35c:	f023 0310 	bic.w	r3, r3, #16
 800c360:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c362:	4b24      	ldr	r3, [pc, #144]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c366:	4b24      	ldr	r3, [pc, #144]	@ (800c3f8 <RCCEx_PLL2_Config+0x160>)
 800c368:	4013      	ands	r3, r2
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	69d2      	ldr	r2, [r2, #28]
 800c36e:	00d2      	lsls	r2, r2, #3
 800c370:	4920      	ldr	r1, [pc, #128]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c372:	4313      	orrs	r3, r2
 800c374:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c376:	4b1f      	ldr	r3, [pc, #124]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c37c:	f043 0310 	orr.w	r3, r3, #16
 800c380:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c388:	4b1a      	ldr	r3, [pc, #104]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38c:	4a19      	ldr	r2, [pc, #100]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c38e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c394:	e00f      	b.n	800c3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d106      	bne.n	800c3aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c39c:	4b15      	ldr	r3, [pc, #84]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a0:	4a14      	ldr	r2, [pc, #80]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3a8:	e005      	b.n	800c3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c3aa:	4b12      	ldr	r3, [pc, #72]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ae:	4a11      	ldr	r2, [pc, #68]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c3b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a0e      	ldr	r2, [pc, #56]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3c2:	f7f9 fc1f 	bl	8005c04 <HAL_GetTick>
 800c3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3c8:	e008      	b.n	800c3dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3ca:	f7f9 fc1b 	bl	8005c04 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d901      	bls.n	800c3dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e006      	b.n	800c3ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3dc:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <RCCEx_PLL2_Config+0x15c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d0f0      	beq.n	800c3ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	58024400 	.word	0x58024400
 800c3f8:	ffff0007 	.word	0xffff0007

0800c3fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c40a:	4b53      	ldr	r3, [pc, #332]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	2b03      	cmp	r3, #3
 800c414:	d101      	bne.n	800c41a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e099      	b.n	800c54e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c41a:	4b4f      	ldr	r3, [pc, #316]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a4e      	ldr	r2, [pc, #312]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c426:	f7f9 fbed 	bl	8005c04 <HAL_GetTick>
 800c42a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c42c:	e008      	b.n	800c440 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c42e:	f7f9 fbe9 	bl	8005c04 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d901      	bls.n	800c440 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e086      	b.n	800c54e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c440:	4b45      	ldr	r3, [pc, #276]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1f0      	bne.n	800c42e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c44c:	4b42      	ldr	r3, [pc, #264]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c450:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	051b      	lsls	r3, r3, #20
 800c45a:	493f      	ldr	r1, [pc, #252]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	3b01      	subs	r3, #1
 800c466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	025b      	lsls	r3, r3, #9
 800c472:	b29b      	uxth	r3, r3
 800c474:	431a      	orrs	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	041b      	lsls	r3, r3, #16
 800c47e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c482:	431a      	orrs	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	3b01      	subs	r3, #1
 800c48a:	061b      	lsls	r3, r3, #24
 800c48c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c490:	4931      	ldr	r1, [pc, #196]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c492:	4313      	orrs	r3, r2
 800c494:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c496:	4b30      	ldr	r3, [pc, #192]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	492d      	ldr	r1, [pc, #180]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	4928      	ldr	r1, [pc, #160]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c4ba:	4b27      	ldr	r3, [pc, #156]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4be:	4a26      	ldr	r2, [pc, #152]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4c6:	4b24      	ldr	r3, [pc, #144]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4ca:	4b24      	ldr	r3, [pc, #144]	@ (800c55c <RCCEx_PLL3_Config+0x160>)
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	69d2      	ldr	r2, [r2, #28]
 800c4d2:	00d2      	lsls	r2, r2, #3
 800c4d4:	4920      	ldr	r1, [pc, #128]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4da:	4b1f      	ldr	r3, [pc, #124]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4de:	4a1e      	ldr	r2, [pc, #120]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	4a19      	ldr	r2, [pc, #100]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c4f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4f8:	e00f      	b.n	800c51a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d106      	bne.n	800c50e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c500:	4b15      	ldr	r3, [pc, #84]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c504:	4a14      	ldr	r2, [pc, #80]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c506:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c50a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c50c:	e005      	b.n	800c51a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c50e:	4b12      	ldr	r3, [pc, #72]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c512:	4a11      	ldr	r2, [pc, #68]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c514:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c518:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c51a:	4b0f      	ldr	r3, [pc, #60]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a0e      	ldr	r2, [pc, #56]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c526:	f7f9 fb6d 	bl	8005c04 <HAL_GetTick>
 800c52a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c52c:	e008      	b.n	800c540 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c52e:	f7f9 fb69 	bl	8005c04 <HAL_GetTick>
 800c532:	4602      	mov	r2, r0
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d901      	bls.n	800c540 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c53c:	2303      	movs	r3, #3
 800c53e:	e006      	b.n	800c54e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c540:	4b05      	ldr	r3, [pc, #20]	@ (800c558 <RCCEx_PLL3_Config+0x15c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d0f0      	beq.n	800c52e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	58024400 	.word	0x58024400
 800c55c:	ffff0007 	.word	0xffff0007

0800c560 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	@ 0x28
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e075      	b.n	800c65e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d105      	bne.n	800c58a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7f7 ffd1 	bl	800452c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2204      	movs	r2, #4
 800c58e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f868 	bl	800c668 <HAL_SD_InitCard>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e05d      	b.n	800c65e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c5a2:	f107 0308 	add.w	r3, r7, #8
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fdaf 	bl	800d10c <HAL_SD_GetCardStatus>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e052      	b.n	800c65e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c5b8:	7e3b      	ldrb	r3, [r7, #24]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c5be:	7e7b      	ldrb	r3, [r7, #25]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d10a      	bne.n	800c5e2 <HAL_SD_Init+0x82>
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <HAL_SD_Init+0x78>
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5de:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5e0:	e00b      	b.n	800c5fa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d104      	bne.n	800c5f4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5f0:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5f2:	e002      	b.n	800c5fa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fe6d 	bl	800d2e0 <HAL_SD_ConfigWideBusOperation>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e026      	b.n	800c65e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c610:	f7f9 faf8 	bl	8005c04 <HAL_GetTick>
 800c614:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c616:	e011      	b.n	800c63c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c618:	f7f9 faf4 	bl	8005c04 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c626:	d109      	bne.n	800c63c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c62e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c638:	2303      	movs	r3, #3
 800c63a:	e010      	b.n	800c65e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 ff61 	bl	800d504 <HAL_SD_GetCardState>
 800c642:	4603      	mov	r3, r0
 800c644:	2b04      	cmp	r3, #4
 800c646:	d1e7      	bne.n	800c618 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3728      	adds	r7, #40	@ 0x28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b08d      	sub	sp, #52	@ 0x34
 800c66c:	af02      	add	r7, sp, #8
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c674:	2300      	movs	r3, #0
 800c676:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c67c:	2300      	movs	r3, #0
 800c67e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c680:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c684:	f04f 0100 	mov.w	r1, #0
 800c688:	f7fe fc76 	bl	800af78 <HAL_RCCEx_GetPeriphCLKFreq>
 800c68c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c690:	2b00      	cmp	r3, #0
 800c692:	d109      	bne.n	800c6a8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c6a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e070      	b.n	800c78a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	4a39      	ldr	r2, [pc, #228]	@ (800c794 <HAL_SD_InitCard+0x12c>)
 800c6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b2:	091b      	lsrs	r3, r3, #4
 800c6b4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681c      	ldr	r4, [r3, #0]
 800c6ba:	466a      	mov	r2, sp
 800c6bc:	f107 0318 	add.w	r3, r7, #24
 800c6c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c6c4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c6c8:	f107 030c 	add.w	r3, r7, #12
 800c6cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f003 f916 	bl	800f900 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f003 f959 	bl	800f990 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d005      	beq.n	800c6f0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d007      	beq.n	800c706 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c6f6:	4a28      	ldr	r2, [pc, #160]	@ (800c798 <HAL_SD_InitCard+0x130>)
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fe:	3301      	adds	r3, #1
 800c700:	4618      	mov	r0, r3
 800c702:	f7f9 fa8b 	bl	8005c1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 ffea 	bl	800d6e0 <SD_PowerON>
 800c70c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c70e:	6a3b      	ldr	r3, [r7, #32]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00b      	beq.n	800c72c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c720:	6a3b      	ldr	r3, [r7, #32]
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e02e      	b.n	800c78a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 ff09 	bl	800d544 <SD_InitCard>
 800c732:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00b      	beq.n	800c752 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e01b      	b.n	800c78a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c75a:	4618      	mov	r0, r3
 800c75c:	f003 f9ae 	bl	800fabc <SDMMC_CmdBlockLength>
 800c760:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00f      	beq.n	800c788 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a0b      	ldr	r2, [pc, #44]	@ (800c79c <HAL_SD_InitCard+0x134>)
 800c76e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	431a      	orrs	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	e000      	b.n	800c78a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	372c      	adds	r7, #44	@ 0x2c
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd90      	pop	{r4, r7, pc}
 800c792:	bf00      	nop
 800c794:	014f8b59 	.word	0x014f8b59
 800c798:	00012110 	.word	0x00012110
 800c79c:	1fe00fff 	.word	0x1fe00fff

0800c7a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08c      	sub	sp, #48	@ 0x30
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
 800c7ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d107      	bne.n	800c7c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e08d      	b.n	800c8e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	f040 8086 	bne.w	800c8e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c7dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d907      	bls.n	800c7fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e074      	b.n	800c8e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2203      	movs	r2, #3
 800c7fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2200      	movs	r2, #0
 800c808:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	025a      	lsls	r2, r3, #9
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d002      	beq.n	800c826 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c822:	025b      	lsls	r3, r3, #9
 800c824:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c826:	f04f 33ff 	mov.w	r3, #4294967295
 800c82a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	025b      	lsls	r3, r3, #9
 800c830:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c832:	2390      	movs	r3, #144	@ 0x90
 800c834:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c836:	2302      	movs	r3, #2
 800c838:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c83e:	2300      	movs	r3, #0
 800c840:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f107 0210 	add.w	r2, r7, #16
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f003 f909 	bl	800fa64 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68da      	ldr	r2, [r3, #12]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c860:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2201      	movs	r2, #1
 800c870:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d90a      	bls.n	800c88e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2282      	movs	r2, #130	@ 0x82
 800c87c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c884:	4618      	mov	r0, r3
 800c886:	f003 f95f 	bl	800fb48 <SDMMC_CmdReadMultiBlock>
 800c88a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c88c:	e009      	b.n	800c8a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2281      	movs	r2, #129	@ 0x81
 800c892:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c89a:	4618      	mov	r0, r3
 800c89c:	f003 f931 	bl	800fb02 <SDMMC_CmdReadSingleBlock>
 800c8a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d012      	beq.n	800c8ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c8ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c8ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e00a      	b.n	800c8e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c8dc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e000      	b.n	800c8e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c8e2:	2302      	movs	r3, #2
  }
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3730      	adds	r7, #48	@ 0x30
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	1fe00fff 	.word	0x1fe00fff

0800c8f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08c      	sub	sp, #48	@ 0x30
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d107      	bne.n	800c918 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e08d      	b.n	800ca34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b01      	cmp	r3, #1
 800c922:	f040 8086 	bne.w	800ca32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c92c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	441a      	add	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c936:	429a      	cmp	r2, r3
 800c938:	d907      	bls.n	800c94a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c93e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e074      	b.n	800ca34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2203      	movs	r2, #3
 800c94e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2200      	movs	r2, #0
 800c958:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	025a      	lsls	r2, r3, #9
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d002      	beq.n	800c976 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	025b      	lsls	r3, r3, #9
 800c974:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c976:	f04f 33ff 	mov.w	r3, #4294967295
 800c97a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	025b      	lsls	r3, r3, #9
 800c980:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c982:	2390      	movs	r3, #144	@ 0x90
 800c984:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c986:	2300      	movs	r3, #0
 800c988:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c98e:	2300      	movs	r3, #0
 800c990:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f107 0210 	add.w	r2, r7, #16
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f003 f861 	bl	800fa64 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68da      	ldr	r2, [r3, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9b0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d90a      	bls.n	800c9de <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	22a0      	movs	r2, #160	@ 0xa0
 800c9cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 f8fd 	bl	800fbd4 <SDMMC_CmdWriteMultiBlock>
 800c9da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9dc:	e009      	b.n	800c9f2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2290      	movs	r2, #144	@ 0x90
 800c9e2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 f8cf 	bl	800fb8e <SDMMC_CmdWriteSingleBlock>
 800c9f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d012      	beq.n	800ca1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a0f      	ldr	r2, [pc, #60]	@ (800ca3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c9fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca06:	431a      	orrs	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e00a      	b.n	800ca34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800ca2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e000      	b.n	800ca34 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ca32:	2302      	movs	r3, #2
  }
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3730      	adds	r7, #48	@ 0x30
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	1fe00fff 	.word	0x1fe00fff

0800ca40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d008      	beq.n	800ca6e <HAL_SD_IRQHandler+0x2e>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f003 0308 	and.w	r3, r3, #8
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f001 f926 	bl	800dcb8 <SD_Read_IT>
 800ca6c:	e19a      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 80ac 	beq.w	800cbd6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca86:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	4b59      	ldr	r3, [pc, #356]	@ (800cbf8 <HAL_SD_IRQHandler+0x1b8>)
 800ca94:	400b      	ands	r3, r1
 800ca96:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800caa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cab6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f003 0308 	and.w	r3, r3, #8
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d038      	beq.n	800cb34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <HAL_SD_IRQHandler+0x96>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f003 0320 	and.w	r3, r3, #32
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d011      	beq.n	800cafa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4618      	mov	r0, r3
 800cadc:	f003 f89e 	bl	800fc1c <SDMMC_CmdStopTransfer>
 800cae0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d008      	beq.n	800cafa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f95b 	bl	800cdb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a3f      	ldr	r2, [pc, #252]	@ (800cbfc <HAL_SD_IRQHandler+0x1bc>)
 800cb00:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d104      	bne.n	800cb24 <HAL_SD_IRQHandler+0xe4>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f003 fd2b 	bl	8010580 <HAL_SD_RxCpltCallback>
 800cb2a:	e13b      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f003 fd1d 	bl	801056c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb32:	e137      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 8132 	beq.w	800cda4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2200      	movs	r2, #0
 800cb46:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2200      	movs	r2, #0
 800cb56:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d104      	bne.n	800cb6c <HAL_SD_IRQHandler+0x12c>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f003 0320 	and.w	r3, r3, #32
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d011      	beq.n	800cb90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f003 f853 	bl	800fc1c <SDMMC_CmdStopTransfer>
 800cb76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d008      	beq.n	800cb90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	431a      	orrs	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f910 	bl	800cdb0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f003 0310 	and.w	r3, r3, #16
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d104      	bne.n	800cbb2 <HAL_SD_IRQHandler+0x172>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f003 fcda 	bl	801056c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <HAL_SD_IRQHandler+0x18e>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f000 80eb 	beq.w	800cda4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f003 fcd6 	bl	8010580 <HAL_SD_RxCpltCallback>
}
 800cbd4:	e0e6      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00d      	beq.n	800cc00 <HAL_SD_IRQHandler+0x1c0>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d008      	beq.n	800cc00 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 f8a8 	bl	800dd44 <SD_Write_IT>
 800cbf4:	e0d6      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
 800cbf6:	bf00      	nop
 800cbf8:	ffff3ec5 	.word	0xffff3ec5
 800cbfc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc06:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 809d 	beq.w	800cd4a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc16:	f003 0302 	and.w	r3, r3, #2
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d005      	beq.n	800cc2a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc22:	f043 0202 	orr.w	r2, r3, #2
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc30:	f003 0308 	and.w	r3, r3, #8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc3c:	f043 0208 	orr.w	r2, r3, #8
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc4a:	f003 0320 	and.w	r3, r3, #32
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d005      	beq.n	800cc5e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc56:	f043 0220 	orr.w	r2, r3, #32
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc64:	f003 0310 	and.w	r3, r3, #16
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d005      	beq.n	800cc78 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc70:	f043 0210 	orr.w	r2, r3, #16
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a4b      	ldr	r2, [pc, #300]	@ (800cdac <HAL_SD_IRQHandler+0x36c>)
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cc8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc9e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ccae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ccbe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f002 ffa9 	bl	800fc1c <SDMMC_CmdStopTransfer>
 800ccca:	4602      	mov	r2, r0
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd0:	431a      	orrs	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68da      	ldr	r2, [r3, #12]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cce4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ccee:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f003 0308 	and.w	r3, r3, #8
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f851 	bl	800cdb0 <HAL_SD_ErrorCallback>
}
 800cd0e:	e049      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d044      	beq.n	800cda4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d040      	beq.n	800cda4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cd30:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2200      	movs	r2, #0
 800cd38:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f834 	bl	800cdb0 <HAL_SD_ErrorCallback>
}
 800cd48:	e02c      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d025      	beq.n	800cda4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd60:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10c      	bne.n	800cd8a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d003      	beq.n	800cd82 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f001 f84a 	bl	800de14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cd80:	e010      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f001 f832 	bl	800ddec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cd88:	e00c      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f003 0320 	and.w	r3, r3, #32
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f001 f833 	bl	800de00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cd9a:	e003      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 f81b 	bl	800ddd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cda2:	e7ff      	b.n	800cda4 <HAL_SD_IRQHandler+0x364>
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	18000f3a 	.word	0x18000f3a

0800cdb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd2:	0f9b      	lsrs	r3, r3, #30
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdde:	0e9b      	lsrs	r3, r3, #26
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	f003 030f 	and.w	r3, r3, #15
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdf0:	0e1b      	lsrs	r3, r3, #24
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce02:	0c1b      	lsrs	r3, r3, #16
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce24:	0d1b      	lsrs	r3, r3, #20
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce30:	0c1b      	lsrs	r3, r3, #16
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 030f 	and.w	r3, r3, #15
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce42:	0bdb      	lsrs	r3, r3, #15
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	f003 0301 	and.w	r3, r3, #1
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce54:	0b9b      	lsrs	r3, r3, #14
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce66:	0b5b      	lsrs	r3, r3, #13
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce78:	0b1b      	lsrs	r3, r3, #12
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	f003 0301 	and.w	r3, r3, #1
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d163      	bne.n	800cf5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce98:	009a      	lsls	r2, r3, #2
 800ce9a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ce9e:	4013      	ands	r3, r2
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cea4:	0f92      	lsrs	r2, r2, #30
 800cea6:	431a      	orrs	r2, r3
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb0:	0edb      	lsrs	r3, r3, #27
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0307 	and.w	r3, r3, #7
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec2:	0e1b      	lsrs	r3, r3, #24
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	f003 0307 	and.w	r3, r3, #7
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ced4:	0d5b      	lsrs	r3, r3, #21
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0307 	and.w	r3, r3, #7
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cee6:	0c9b      	lsrs	r3, r3, #18
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cef8:	0bdb      	lsrs	r3, r3, #15
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	f003 0307 	and.w	r3, r3, #7
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	7e1b      	ldrb	r3, [r3, #24]
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf26:	fb03 f202 	mul.w	r2, r3, r2
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	7a1b      	ldrb	r3, [r3, #8]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	f003 030f 	and.w	r3, r3, #15
 800cf38:	2201      	movs	r2, #1
 800cf3a:	409a      	lsls	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cf48:	0a52      	lsrs	r2, r2, #9
 800cf4a:	fb03 f202 	mul.w	r2, r3, r2
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf58:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf5a:	e031      	b.n	800cfc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d11d      	bne.n	800cfa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf68:	041b      	lsls	r3, r3, #16
 800cf6a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf72:	0c1b      	lsrs	r3, r3, #16
 800cf74:	431a      	orrs	r2, r3
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	029a      	lsls	r2, r3, #10
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf94:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf9e:	e00f      	b.n	800cfc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a58      	ldr	r2, [pc, #352]	@ (800d108 <HAL_SD_GetCardCSD+0x344>)
 800cfa6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e09d      	b.n	800d0fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfc4:	0b9b      	lsrs	r3, r3, #14
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfd6:	09db      	lsrs	r3, r3, #7
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cff8:	0fdb      	lsrs	r3, r3, #31
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d004:	0f5b      	lsrs	r3, r3, #29
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f003 0303 	and.w	r3, r3, #3
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d016:	0e9b      	lsrs	r3, r3, #26
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	f003 0307 	and.w	r3, r3, #7
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d028:	0d9b      	lsrs	r3, r3, #22
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	f003 030f 	and.w	r3, r3, #15
 800d030:	b2da      	uxtb	r2, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d03a:	0d5b      	lsrs	r3, r3, #21
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	b2da      	uxtb	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d056:	0c1b      	lsrs	r3, r3, #16
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	b2da      	uxtb	r2, r3
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d06a:	0bdb      	lsrs	r3, r3, #15
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	b2da      	uxtb	r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d07e:	0b9b      	lsrs	r3, r3, #14
 800d080:	b2db      	uxtb	r3, r3
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d092:	0b5b      	lsrs	r3, r3, #13
 800d094:	b2db      	uxtb	r3, r3
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0a6:	0b1b      	lsrs	r3, r3, #12
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	f003 0301 	and.w	r3, r3, #1
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0ba:	0a9b      	lsrs	r3, r3, #10
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	f003 0303 	and.w	r3, r3, #3
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0ce:	0a1b      	lsrs	r3, r3, #8
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	1fe00fff 	.word	0x1fe00fff

0800d10c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b094      	sub	sp, #80	@ 0x50
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b03      	cmp	r3, #3
 800d126:	d101      	bne.n	800d12c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e0a7      	b.n	800d27c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d12c:	f107 0308 	add.w	r3, r7, #8
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fb62 	bl	800d7fc <SD_SendSDStatus>
 800d138:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d13a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d011      	beq.n	800d164 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a4f      	ldr	r2, [pc, #316]	@ (800d284 <HAL_SD_GetCardStatus+0x178>)
 800d146:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d14c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d14e:	431a      	orrs	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d162:	e070      	b.n	800d246 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	099b      	lsrs	r3, r3, #6
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	095b      	lsrs	r3, r3, #5
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	0a1b      	lsrs	r3, r3, #8
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d18e:	b29a      	uxth	r2, r3
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	0e1b      	lsrs	r3, r3, #24
 800d194:	b29b      	uxth	r3, r3
 800d196:	4313      	orrs	r3, r2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	061a      	lsls	r2, r3, #24
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	021b      	lsls	r3, r3, #8
 800d1a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	0e1b      	lsrs	r3, r3, #24
 800d1ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	0a1b      	lsrs	r3, r3, #8
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	0d1b      	lsrs	r3, r3, #20
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 030f 	and.w	r3, r3, #15
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	0c1b      	lsrs	r3, r3, #16
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	0a9b      	lsrs	r3, r3, #10
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	091b      	lsrs	r3, r3, #4
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	b2da      	uxtb	r2, r3
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	0e1b      	lsrs	r3, r3, #24
 800d240:	b2da      	uxtb	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d24e:	4618      	mov	r0, r3
 800d250:	f002 fc34 	bl	800fabc <SDMMC_CmdBlockLength>
 800d254:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00d      	beq.n	800d278 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a08      	ldr	r2, [pc, #32]	@ (800d284 <HAL_SD_GetCardStatus+0x178>)
 800d262:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d268:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d278:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3750      	adds	r7, #80	@ 0x50
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	1fe00fff 	.word	0x1fe00fff

0800d288 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b08d      	sub	sp, #52	@ 0x34
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2203      	movs	r2, #3
 800d2f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d02e      	beq.n	800d35e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d306:	d106      	bne.n	800d316 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d30c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	635a      	str	r2, [r3, #52]	@ 0x34
 800d314:	e029      	b.n	800d36a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d31c:	d10a      	bne.n	800d334 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fb64 	bl	800d9ec <SD_WideBus_Enable>
 800d324:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	635a      	str	r2, [r3, #52]	@ 0x34
 800d332:	e01a      	b.n	800d36a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fba1 	bl	800da82 <SD_WideBus_Disable>
 800d340:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	431a      	orrs	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d34e:	e00c      	b.n	800d36a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d354:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d35c:	e005      	b.n	800d36a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d362:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d007      	beq.n	800d382 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a5f      	ldr	r2, [pc, #380]	@ (800d4f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d378:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d380:	e096      	b.n	800d4b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d382:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d386:	f04f 0100 	mov.w	r1, #0
 800d38a:	f7fd fdf5 	bl	800af78 <HAL_RCCEx_GetPeriphCLKFreq>
 800d38e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 8083 	beq.w	800d49e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	695a      	ldr	r2, [r3, #20]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	4950      	ldr	r1, [pc, #320]	@ (800d4f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3b6:	fba1 1303 	umull	r1, r3, r1, r3
 800d3ba:	0e1b      	lsrs	r3, r3, #24
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d303      	bcc.n	800d3c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	61bb      	str	r3, [r7, #24]
 800d3c6:	e05a      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3d0:	d103      	bne.n	800d3da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	61bb      	str	r3, [r7, #24]
 800d3d8:	e051      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3e2:	d126      	bne.n	800d432 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10e      	bne.n	800d40a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	4a43      	ldr	r2, [pc, #268]	@ (800d4fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d906      	bls.n	800d402 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	4a40      	ldr	r2, [pc, #256]	@ (800d4f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fc:	0e5b      	lsrs	r3, r3, #25
 800d3fe:	61bb      	str	r3, [r7, #24]
 800d400:	e03d      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	61bb      	str	r3, [r7, #24]
 800d408:	e039      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	69fa      	ldr	r2, [r7, #28]
 800d412:	fbb2 f3f3 	udiv	r3, r2, r3
 800d416:	4a39      	ldr	r2, [pc, #228]	@ (800d4fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d906      	bls.n	800d42a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	4a36      	ldr	r2, [pc, #216]	@ (800d4f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d420:	fba2 2303 	umull	r2, r3, r2, r3
 800d424:	0e5b      	lsrs	r3, r3, #25
 800d426:	61bb      	str	r3, [r7, #24]
 800d428:	e029      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	61bb      	str	r3, [r7, #24]
 800d430:	e025      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10e      	bne.n	800d458 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	4a30      	ldr	r2, [pc, #192]	@ (800d500 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d906      	bls.n	800d450 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	4a2c      	ldr	r2, [pc, #176]	@ (800d4f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d446:	fba2 2303 	umull	r2, r3, r2, r3
 800d44a:	0e1b      	lsrs	r3, r3, #24
 800d44c:	61bb      	str	r3, [r7, #24]
 800d44e:	e016      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	61bb      	str	r3, [r7, #24]
 800d456:	e012      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	69fa      	ldr	r2, [r7, #28]
 800d460:	fbb2 f3f3 	udiv	r3, r2, r3
 800d464:	4a26      	ldr	r2, [pc, #152]	@ (800d500 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d906      	bls.n	800d478 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	4a22      	ldr	r2, [pc, #136]	@ (800d4f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d46e:	fba2 2303 	umull	r2, r3, r2, r3
 800d472:	0e1b      	lsrs	r3, r3, #24
 800d474:	61bb      	str	r3, [r7, #24]
 800d476:	e002      	b.n	800d47e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681c      	ldr	r4, [r3, #0]
 800d482:	466a      	mov	r2, sp
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d48c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d490:	f107 0308 	add.w	r3, r7, #8
 800d494:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d496:	4620      	mov	r0, r4
 800d498:	f002 fa32 	bl	800f900 <SDMMC_Init>
 800d49c:	e008      	b.n	800d4b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f002 faff 	bl	800fabc <SDMMC_CmdBlockLength>
 800d4be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00c      	beq.n	800d4e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d4f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d4cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	372c      	adds	r7, #44	@ 0x2c
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd90      	pop	{r4, r7, pc}
 800d4f4:	1fe00fff 	.word	0x1fe00fff
 800d4f8:	55e63b89 	.word	0x55e63b89
 800d4fc:	02faf080 	.word	0x02faf080
 800d500:	017d7840 	.word	0x017d7840

0800d504 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d510:	f107 030c 	add.w	r3, r7, #12
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fa40 	bl	800d99c <SD_SendStatus>
 800d51c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	431a      	orrs	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	0a5b      	lsrs	r3, r3, #9
 800d534:	f003 030f 	and.w	r3, r3, #15
 800d538:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d53a:	693b      	ldr	r3, [r7, #16]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3718      	adds	r7, #24
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b090      	sub	sp, #64	@ 0x40
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d550:	f7f8 fb58 	bl	8005c04 <HAL_GetTick>
 800d554:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f002 fa29 	bl	800f9b2 <SDMMC_GetPowerState>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d102      	bne.n	800d56c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d566:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d56a:	e0b5      	b.n	800d6d8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d570:	2b03      	cmp	r3, #3
 800d572:	d02e      	beq.n	800d5d2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4618      	mov	r0, r3
 800d57a:	f002 fc74 	bl	800fe66 <SDMMC_CmdSendCID>
 800d57e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <SD_InitCard+0x46>
    {
      return errorstate;
 800d586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d588:	e0a6      	b.n	800d6d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2100      	movs	r1, #0
 800d590:	4618      	mov	r0, r3
 800d592:	f002 fa54 	bl	800fa3e <SDMMC_GetResponse>
 800d596:	4602      	mov	r2, r0
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2104      	movs	r1, #4
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f002 fa4b 	bl	800fa3e <SDMMC_GetResponse>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2108      	movs	r1, #8
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f002 fa42 	bl	800fa3e <SDMMC_GetResponse>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	210c      	movs	r1, #12
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f002 fa39 	bl	800fa3e <SDMMC_GetResponse>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d6:	2b03      	cmp	r3, #3
 800d5d8:	d01d      	beq.n	800d616 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d5da:	e019      	b.n	800d610 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f107 020a 	add.w	r2, r7, #10
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f002 fc7c 	bl	800fee4 <SDMMC_CmdSetRelAdd>
 800d5ec:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	e06f      	b.n	800d6d8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d5f8:	f7f8 fb04 	bl	8005c04 <HAL_GetTick>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d606:	4293      	cmp	r3, r2
 800d608:	d902      	bls.n	800d610 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d60a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d60e:	e063      	b.n	800d6d8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d610:	897b      	ldrh	r3, [r7, #10]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d0e2      	beq.n	800d5dc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d036      	beq.n	800d68c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d61e:	897b      	ldrh	r3, [r7, #10]
 800d620:	461a      	mov	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d62e:	041b      	lsls	r3, r3, #16
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f002 fc36 	bl	800fea4 <SDMMC_CmdSendCSD>
 800d638:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <SD_InitCard+0x100>
    {
      return errorstate;
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	e049      	b.n	800d6d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2100      	movs	r1, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f002 f9f7 	bl	800fa3e <SDMMC_GetResponse>
 800d650:	4602      	mov	r2, r0
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2104      	movs	r1, #4
 800d65c:	4618      	mov	r0, r3
 800d65e:	f002 f9ee 	bl	800fa3e <SDMMC_GetResponse>
 800d662:	4602      	mov	r2, r0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2108      	movs	r1, #8
 800d66e:	4618      	mov	r0, r3
 800d670:	f002 f9e5 	bl	800fa3e <SDMMC_GetResponse>
 800d674:	4602      	mov	r2, r0
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	210c      	movs	r1, #12
 800d680:	4618      	mov	r0, r3
 800d682:	f002 f9dc 	bl	800fa3e <SDMMC_GetResponse>
 800d686:	4602      	mov	r2, r0
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2104      	movs	r1, #4
 800d692:	4618      	mov	r0, r3
 800d694:	f002 f9d3 	bl	800fa3e <SDMMC_GetResponse>
 800d698:	4603      	mov	r3, r0
 800d69a:	0d1a      	lsrs	r2, r3, #20
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d6a0:	f107 030c 	add.w	r3, r7, #12
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff fb8c 	bl	800cdc4 <HAL_SD_GetCardCSD>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d6b6:	e00f      	b.n	800d6d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6c0:	041b      	lsls	r3, r3, #16
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	f002 fae5 	bl	800fc94 <SDMMC_CmdSelDesel>
 800d6ca:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <SD_InitCard+0x192>
  {
    return errorstate;
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d4:	e000      	b.n	800d6d8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3740      	adds	r7, #64	@ 0x40
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f002 faee 	bl	800fcda <SDMMC_CmdGoIdleState>
 800d6fe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	e072      	b.n	800d7f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	f002 fb01 	bl	800fd16 <SDMMC_CmdOperCond>
 800d714:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d71c:	d10d      	bne.n	800d73a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4618      	mov	r0, r3
 800d72a:	f002 fad6 	bl	800fcda <SDMMC_CmdGoIdleState>
 800d72e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d004      	beq.n	800d740 <SD_PowerON+0x60>
    {
      return errorstate;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	e05a      	b.n	800d7f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d744:	2b01      	cmp	r3, #1
 800d746:	d137      	bne.n	800d7b8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f002 fb01 	bl	800fd56 <SDMMC_CmdAppCommand>
 800d754:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d02d      	beq.n	800d7b8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d75c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d760:	e046      	b.n	800d7f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2100      	movs	r1, #0
 800d768:	4618      	mov	r0, r3
 800d76a:	f002 faf4 	bl	800fd56 <SDMMC_CmdAppCommand>
 800d76e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <SD_PowerON+0x9a>
    {
      return errorstate;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	e03a      	b.n	800d7f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	491e      	ldr	r1, [pc, #120]	@ (800d7f8 <SD_PowerON+0x118>)
 800d780:	4618      	mov	r0, r3
 800d782:	f002 fb0b 	bl	800fd9c <SDMMC_CmdAppOperCommand>
 800d786:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d78e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d792:	e02d      	b.n	800d7f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2100      	movs	r1, #0
 800d79a:	4618      	mov	r0, r3
 800d79c:	f002 f94f 	bl	800fa3e <SDMMC_GetResponse>
 800d7a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	0fdb      	lsrs	r3, r3, #31
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d101      	bne.n	800d7ae <SD_PowerON+0xce>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e000      	b.n	800d7b0 <SD_PowerON+0xd0>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	613b      	str	r3, [r7, #16]

    count++;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d802      	bhi.n	800d7c8 <SD_PowerON+0xe8>
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0cc      	beq.n	800d762 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d902      	bls.n	800d7d8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d7d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d7d6:	e00b      	b.n	800d7f0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d002      	beq.n	800d7ee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	c1100000 	.word	0xc1100000

0800d7fc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	@ 0x30
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d806:	f7f8 f9fd 	bl	8005c04 <HAL_GetTick>
 800d80a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2100      	movs	r1, #0
 800d816:	4618      	mov	r0, r3
 800d818:	f002 f911 	bl	800fa3e <SDMMC_GetResponse>
 800d81c:	4603      	mov	r3, r0
 800d81e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d826:	d102      	bne.n	800d82e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d828:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d82c:	e0b0      	b.n	800d990 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2140      	movs	r1, #64	@ 0x40
 800d834:	4618      	mov	r0, r3
 800d836:	f002 f941 	bl	800fabc <SDMMC_CmdBlockLength>
 800d83a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d84a:	6a3b      	ldr	r3, [r7, #32]
 800d84c:	e0a0      	b.n	800d990 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d856:	041b      	lsls	r3, r3, #16
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f002 fa7b 	bl	800fd56 <SDMMC_CmdAppCommand>
 800d860:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d862:	6a3b      	ldr	r3, [r7, #32]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d005      	beq.n	800d874 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	e08d      	b.n	800d990 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d874:	f04f 33ff 	mov.w	r3, #4294967295
 800d878:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d87a:	2340      	movs	r3, #64	@ 0x40
 800d87c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d87e:	2360      	movs	r3, #96	@ 0x60
 800d880:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d882:	2302      	movs	r3, #2
 800d884:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d886:	2300      	movs	r3, #0
 800d888:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d88a:	2301      	movs	r3, #1
 800d88c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f107 0208 	add.w	r2, r7, #8
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f002 f8e3 	bl	800fa64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f002 fb63 	bl	800ff6e <SDMMC_CmdStatusRegister>
 800d8a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d02b      	beq.n	800d908 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	e069      	b.n	800d990 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d013      	beq.n	800d8f2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ce:	e00d      	b.n	800d8ec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f002 f83d 	bl	800f954 <SDMMC_ReadFIFO>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	601a      	str	r2, [r3, #0]
        pData++;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	2b07      	cmp	r3, #7
 800d8f0:	d9ee      	bls.n	800d8d0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8f2:	f7f8 f987 	bl	8005c04 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d900:	d102      	bne.n	800d908 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d902:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d906:	e043      	b.n	800d990 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d90e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0d2      	beq.n	800d8bc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d91c:	f003 0308 	and.w	r3, r3, #8
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d924:	2308      	movs	r3, #8
 800d926:	e033      	b.n	800d990 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d936:	2302      	movs	r3, #2
 800d938:	e02a      	b.n	800d990 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d940:	f003 0320 	and.w	r3, r3, #32
 800d944:	2b00      	cmp	r3, #0
 800d946:	d017      	beq.n	800d978 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d948:	2320      	movs	r3, #32
 800d94a:	e021      	b.n	800d990 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f001 ffff 	bl	800f954 <SDMMC_ReadFIFO>
 800d956:	4602      	mov	r2, r0
 800d958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95a:	601a      	str	r2, [r3, #0]
    pData++;
 800d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95e:	3304      	adds	r3, #4
 800d960:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d962:	f7f8 f94f 	bl	8005c04 <HAL_GetTick>
 800d966:	4602      	mov	r2, r0
 800d968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d970:	d102      	bne.n	800d978 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d972:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d976:	e00b      	b.n	800d990 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d97e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e2      	bne.n	800d94c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a03      	ldr	r2, [pc, #12]	@ (800d998 <SD_SendSDStatus+0x19c>)
 800d98c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3730      	adds	r7, #48	@ 0x30
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	18000f3a 	.word	0x18000f3a

0800d99c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d9ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d9b0:	e018      	b.n	800d9e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ba:	041b      	lsls	r3, r3, #16
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f002 fab2 	bl	800ff28 <SDMMC_CmdSendStatus>
 800d9c4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	e009      	b.n	800d9e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f002 f831 	bl	800fa3e <SDMMC_GetResponse>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2100      	movs	r1, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f002 f81b 	bl	800fa3e <SDMMC_GetResponse>
 800da08:	4603      	mov	r3, r0
 800da0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da12:	d102      	bne.n	800da1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da18:	e02f      	b.n	800da7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da1a:	f107 030c 	add.w	r3, r7, #12
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f879 	bl	800db18 <SD_FindSCR>
 800da26:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	e023      	b.n	800da7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d01c      	beq.n	800da76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da44:	041b      	lsls	r3, r3, #16
 800da46:	4619      	mov	r1, r3
 800da48:	4610      	mov	r0, r2
 800da4a:	f002 f984 	bl	800fd56 <SDMMC_CmdAppCommand>
 800da4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	e00f      	b.n	800da7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2102      	movs	r1, #2
 800da60:	4618      	mov	r0, r3
 800da62:	f002 f9bb 	bl	800fddc <SDMMC_CmdBusWidth>
 800da66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	e003      	b.n	800da7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da72:	2300      	movs	r3, #0
 800da74:	e001      	b.n	800da7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b086      	sub	sp, #24
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800da8a:	2300      	movs	r3, #0
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2100      	movs	r1, #0
 800da98:	4618      	mov	r0, r3
 800da9a:	f001 ffd0 	bl	800fa3e <SDMMC_GetResponse>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800daa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daa8:	d102      	bne.n	800dab0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800daaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800daae:	e02f      	b.n	800db10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dab0:	f107 030c 	add.w	r3, r7, #12
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f82e 	bl	800db18 <SD_FindSCR>
 800dabc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	e023      	b.n	800db10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01c      	beq.n	800db0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dada:	041b      	lsls	r3, r3, #16
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f002 f939 	bl	800fd56 <SDMMC_CmdAppCommand>
 800dae4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	e00f      	b.n	800db10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2100      	movs	r1, #0
 800daf6:	4618      	mov	r0, r3
 800daf8:	f002 f970 	bl	800fddc <SDMMC_CmdBusWidth>
 800dafc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	e003      	b.n	800db10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db08:	2300      	movs	r3, #0
 800db0a:	e001      	b.n	800db10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800db10:	4618      	mov	r0, r3
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08e      	sub	sp, #56	@ 0x38
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db22:	f7f8 f86f 	bl	8005c04 <HAL_GetTick>
 800db26:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800db2c:	2300      	movs	r3, #0
 800db2e:	60bb      	str	r3, [r7, #8]
 800db30:	2300      	movs	r3, #0
 800db32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2108      	movs	r1, #8
 800db3e:	4618      	mov	r0, r3
 800db40:	f001 ffbc 	bl	800fabc <SDMMC_CmdBlockLength>
 800db44:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <SD_FindSCR+0x38>
  {
    return errorstate;
 800db4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4e:	e0ad      	b.n	800dcac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db58:	041b      	lsls	r3, r3, #16
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f002 f8fa 	bl	800fd56 <SDMMC_CmdAppCommand>
 800db62:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <SD_FindSCR+0x56>
  {
    return errorstate;
 800db6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6c:	e09e      	b.n	800dcac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db6e:	f04f 33ff 	mov.w	r3, #4294967295
 800db72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db74:	2308      	movs	r3, #8
 800db76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800db78:	2330      	movs	r3, #48	@ 0x30
 800db7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db7c:	2302      	movs	r3, #2
 800db7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db80:	2300      	movs	r3, #0
 800db82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db84:	2301      	movs	r3, #1
 800db86:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f107 0210 	add.w	r2, r7, #16
 800db90:	4611      	mov	r1, r2
 800db92:	4618      	mov	r0, r3
 800db94:	f001 ff66 	bl	800fa64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f002 f940 	bl	800fe22 <SDMMC_CmdSendSCR>
 800dba2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d027      	beq.n	800dbfa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbac:	e07e      	b.n	800dcac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d113      	bne.n	800dbe4 <SD_FindSCR+0xcc>
 800dbbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d110      	bne.n	800dbe4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f001 fec4 	bl	800f954 <SDMMC_ReadFIFO>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f001 febd 	bl	800f954 <SDMMC_ReadFIFO>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	60fb      	str	r3, [r7, #12]
      index++;
 800dbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dbe4:	f7f8 f80e 	bl	8005c04 <HAL_GetTick>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf2:	d102      	bne.n	800dbfa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dbf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbf8:	e058      	b.n	800dcac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc00:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dc04:	4013      	ands	r3, r2
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0d1      	beq.n	800dbae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc10:	f003 0308 	and.w	r3, r3, #8
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc20:	2308      	movs	r3, #8
 800dc22:	e043      	b.n	800dcac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2a:	f003 0302 	and.w	r3, r3, #2
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2202      	movs	r2, #2
 800dc38:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	e036      	b.n	800dcac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc44:	f003 0320 	and.w	r3, r3, #32
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2220      	movs	r2, #32
 800dc52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc54:	2320      	movs	r3, #32
 800dc56:	e029      	b.n	800dcac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a15      	ldr	r2, [pc, #84]	@ (800dcb4 <SD_FindSCR+0x19c>)
 800dc5e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	061a      	lsls	r2, r3, #24
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	0a1b      	lsrs	r3, r3, #8
 800dc72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	0e1b      	lsrs	r3, r3, #24
 800dc7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc80:	601a      	str	r2, [r3, #0]
    scr++;
 800dc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc84:	3304      	adds	r3, #4
 800dc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	061a      	lsls	r2, r3, #24
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	021b      	lsls	r3, r3, #8
 800dc90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	0a1b      	lsrs	r3, r3, #8
 800dc9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	0e1b      	lsrs	r3, r3, #24
 800dca4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3738      	adds	r7, #56	@ 0x38
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	18000f3a 	.word	0x18000f3a

0800dcb8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcca:	2b1f      	cmp	r3, #31
 800dccc:	d936      	bls.n	800dd3c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e027      	b.n	800dd24 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f001 fe3b 	bl	800f954 <SDMMC_ReadFIFO>
 800dcde:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	3301      	adds	r3, #1
 800dcec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	0a1b      	lsrs	r3, r3, #8
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	0c1b      	lsrs	r3, r3, #16
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	0e1b      	lsrs	r3, r3, #24
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	3301      	adds	r3, #1
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2b07      	cmp	r3, #7
 800dd28:	d9d4      	bls.n	800dcd4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd34:	f1a3 0220 	sub.w	r2, r3, #32
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800dd3c:	bf00      	nop
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	2b1f      	cmp	r3, #31
 800dd58:	d93a      	bls.n	800ddd0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	617b      	str	r3, [r7, #20]
 800dd5e:	e02b      	b.n	800ddb8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	021a      	lsls	r2, r3, #8
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	041a      	lsls	r2, r3, #16
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4313      	orrs	r3, r2
 800dd88:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	061a      	lsls	r2, r3, #24
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f107 020c 	add.w	r2, r7, #12
 800ddaa:	4611      	mov	r1, r2
 800ddac:	4618      	mov	r0, r3
 800ddae:	f001 fdde 	bl	800f96e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	2b07      	cmp	r3, #7
 800ddbc:	d9d0      	bls.n	800dd60 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	f1a3 0220 	sub.w	r2, r3, #32
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	621a      	str	r2, [r3, #32]
  }
}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e10f      	b.n	800e05a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a87      	ldr	r2, [pc, #540]	@ (800e064 <HAL_SPI_Init+0x23c>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d00f      	beq.n	800de6a <HAL_SPI_Init+0x42>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a86      	ldr	r2, [pc, #536]	@ (800e068 <HAL_SPI_Init+0x240>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d00a      	beq.n	800de6a <HAL_SPI_Init+0x42>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a84      	ldr	r2, [pc, #528]	@ (800e06c <HAL_SPI_Init+0x244>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d005      	beq.n	800de6a <HAL_SPI_Init+0x42>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	2b0f      	cmp	r3, #15
 800de64:	d901      	bls.n	800de6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e0f7      	b.n	800e05a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 fbc2 	bl	800e5f4 <SPI_GetPacketSize>
 800de70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a7b      	ldr	r2, [pc, #492]	@ (800e064 <HAL_SPI_Init+0x23c>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00c      	beq.n	800de96 <HAL_SPI_Init+0x6e>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a79      	ldr	r2, [pc, #484]	@ (800e068 <HAL_SPI_Init+0x240>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d007      	beq.n	800de96 <HAL_SPI_Init+0x6e>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a78      	ldr	r2, [pc, #480]	@ (800e06c <HAL_SPI_Init+0x244>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d002      	beq.n	800de96 <HAL_SPI_Init+0x6e>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b08      	cmp	r3, #8
 800de94:	d811      	bhi.n	800deba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de9a:	4a72      	ldr	r2, [pc, #456]	@ (800e064 <HAL_SPI_Init+0x23c>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d009      	beq.n	800deb4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a70      	ldr	r2, [pc, #448]	@ (800e068 <HAL_SPI_Init+0x240>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d004      	beq.n	800deb4 <HAL_SPI_Init+0x8c>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a6f      	ldr	r2, [pc, #444]	@ (800e06c <HAL_SPI_Init+0x244>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d104      	bne.n	800debe <HAL_SPI_Init+0x96>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2b10      	cmp	r3, #16
 800deb8:	d901      	bls.n	800debe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e0cd      	b.n	800e05a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f8cc 	bl	800e070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2202      	movs	r2, #2
 800dedc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f022 0201 	bic.w	r2, r2, #1
 800deee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800defa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800df04:	d119      	bne.n	800df3a <HAL_SPI_Init+0x112>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800df0e:	d103      	bne.n	800df18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df14:	2b00      	cmp	r3, #0
 800df16:	d008      	beq.n	800df2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10c      	bne.n	800df3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df28:	d107      	bne.n	800df3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800df38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00f      	beq.n	800df66 <HAL_SPI_Init+0x13e>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b06      	cmp	r3, #6
 800df4c:	d90b      	bls.n	800df66 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	430a      	orrs	r2, r1
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	e007      	b.n	800df76 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800df74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	69da      	ldr	r2, [r3, #28]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df7e:	431a      	orrs	r2, r3
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	431a      	orrs	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df88:	ea42 0103 	orr.w	r1, r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68da      	ldr	r2, [r3, #12]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	430a      	orrs	r2, r1
 800df96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa0:	431a      	orrs	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa6:	431a      	orrs	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	431a      	orrs	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	431a      	orrs	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	431a      	orrs	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfd6:	ea42 0103 	orr.w	r1, r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	430a      	orrs	r2, r1
 800dfe4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d113      	bne.n	800e016 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e000:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e014:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f022 0201 	bic.w	r2, r2, #1
 800e024:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00a      	beq.n	800e048 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	430a      	orrs	r2, r1
 800e046:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	40013000 	.word	0x40013000
 800e068:	40003800 	.word	0x40003800
 800e06c:	40003c00 	.word	0x40003c00

0800e070 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800e078:	bf00      	nop
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d001      	beq.n	800e0a2 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800e09e:	2302      	movs	r3, #2
 800e0a0:	e18a      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d005      	beq.n	800e0b4 <HAL_SPI_TransmitReceive_DMA+0x30>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d002      	beq.n	800e0b4 <HAL_SPI_TransmitReceive_DMA+0x30>
 800e0ae:	887b      	ldrh	r3, [r7, #2]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e17f      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_SPI_TransmitReceive_DMA+0x42>
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e178      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2205      	movs	r2, #5
 800e0d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	887a      	ldrh	r2, [r7, #2]
 800e0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	887a      	ldrh	r2, [r7, #2]
 800e0f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	887a      	ldrh	r2, [r7, #2]
 800e0fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	887a      	ldrh	r2, [r7, #2]
 800e106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e124:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689a      	ldr	r2, [r3, #8]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e134:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	2b0f      	cmp	r3, #15
 800e13c:	d905      	bls.n	800e14a <HAL_SPI_TransmitReceive_DMA+0xc6>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e148:	d10f      	bne.n	800e16a <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e14e:	2b07      	cmp	r3, #7
 800e150:	d911      	bls.n	800e176 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e15c:	d00b      	beq.n	800e176 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e162:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e168:	d005      	beq.n	800e176 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e120      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b07      	cmp	r3, #7
 800e17c:	d840      	bhi.n	800e200 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e182:	699b      	ldr	r3, [r3, #24]
 800e184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e188:	d109      	bne.n	800e19e <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e190:	b29b      	uxth	r3, r3
 800e192:	3301      	adds	r3, #1
 800e194:	105b      	asrs	r3, r3, #1
 800e196:	b29a      	uxth	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1a8:	d109      	bne.n	800e1be <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	3303      	adds	r3, #3
 800e1b4:	109b      	asrs	r3, r3, #2
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1c8:	d109      	bne.n	800e1de <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	105b      	asrs	r3, r3, #1
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1e8:	d12e      	bne.n	800e248 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	3303      	adds	r3, #3
 800e1f4:	109b      	asrs	r3, r3, #2
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e1fe:	e023      	b.n	800e248 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	2b0f      	cmp	r3, #15
 800e206:	d81f      	bhi.n	800e248 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e20c:	699b      	ldr	r3, [r3, #24]
 800e20e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e212:	d109      	bne.n	800e228 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	3301      	adds	r3, #1
 800e21e:	105b      	asrs	r3, r3, #1
 800e220:	b29a      	uxth	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e232:	d109      	bne.n	800e248 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	3301      	adds	r3, #1
 800e23e:	105b      	asrs	r3, r3, #1
 800e240:	b29a      	uxth	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e24c:	4a5c      	ldr	r2, [pc, #368]	@ (800e3c0 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800e24e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e254:	4a5b      	ldr	r2, [pc, #364]	@ (800e3c4 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800e256:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e25c:	4a5a      	ldr	r2, [pc, #360]	@ (800e3c8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e25e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e264:	2200      	movs	r2, #0
 800e266:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3330      	adds	r3, #48	@ 0x30
 800e272:	4619      	mov	r1, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e278:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e280:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e282:	f7f8 f9f9 	bl	8006678 <HAL_DMA_Start_IT>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d011      	beq.n	800e2b0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e292:	f043 0210 	orr.w	r2, r3, #16
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e083      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	689a      	ldr	r2, [r3, #8]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e2be:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2dc:	4a3a      	ldr	r2, [pc, #232]	@ (800e3c8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e2de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	3320      	adds	r3, #32
 800e2f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e2fa:	f7f8 f9bd 	bl	8006678 <HAL_DMA_Start_IT>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d016      	beq.n	800e332 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e308:	4618      	mov	r0, r3
 800e30a:	f7f8 fc1f 	bl	8006b4c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e314:	f043 0210 	orr.w	r2, r3, #16
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2201      	movs	r2, #1
 800e322:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e042      	b.n	800e3b8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e33c:	d108      	bne.n	800e350 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6859      	ldr	r1, [r3, #4]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	4b20      	ldr	r3, [pc, #128]	@ (800e3cc <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e34a:	400b      	ands	r3, r1
 800e34c:	6053      	str	r3, [r2, #4]
 800e34e:	e009      	b.n	800e364 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	4b1d      	ldr	r3, [pc, #116]	@ (800e3cc <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e358:	4013      	ands	r3, r2
 800e35a:	8879      	ldrh	r1, [r7, #2]
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	430b      	orrs	r3, r1
 800e362:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689a      	ldr	r2, [r3, #8]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e372:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	691a      	ldr	r2, [r3, #16]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800e382:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f042 0201 	orr.w	r2, r2, #1
 800e392:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e39c:	d107      	bne.n	800e3ae <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3ac:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	0800e453 	.word	0x0800e453
 800e3c4:	0800e40d 	.word	0x0800e40d
 800e3c8:	0800e46f 	.word	0x0800e46f
 800e3cc:	ffff0000 	.word	0xffff0000

0800e3d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e418:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b07      	cmp	r3, #7
 800e424:	d011      	beq.n	800e44a <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e430:	d103      	bne.n	800e43a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff ffcc 	bl	800e3d0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e438:	e007      	b.n	800e44a <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	691a      	ldr	r2, [r3, #16]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f042 0208 	orr.w	r2, r2, #8
 800e448:	611a      	str	r2, [r3, #16]
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e45e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7ff ffbf 	bl	800e3e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e466:	bf00      	nop
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e47a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7f9 fdad 	bl	8007fdc <HAL_DMA_GetError>
 800e482:	4603      	mov	r3, r0
 800e484:	2b02      	cmp	r3, #2
 800e486:	d011      	beq.n	800e4ac <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 f813 	bl	800e4b4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e494:	f043 0210 	orr.w	r2, r3, #16
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff ffa6 	bl	800e3f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	699a      	ldr	r2, [r3, #24]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f042 0208 	orr.w	r2, r2, #8
 800e4d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	699a      	ldr	r2, [r3, #24]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f042 0210 	orr.w	r2, r2, #16
 800e4e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0201 	bic.w	r2, r2, #1
 800e4f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6919      	ldr	r1, [r3, #16]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	4b3c      	ldr	r3, [pc, #240]	@ (800e5f0 <SPI_CloseTransfer+0x13c>)
 800e500:	400b      	ands	r3, r1
 800e502:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	689a      	ldr	r2, [r3, #8]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e512:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	2b04      	cmp	r3, #4
 800e51e:	d014      	beq.n	800e54a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f003 0320 	and.w	r3, r3, #32
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00f      	beq.n	800e54a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e530:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	699a      	ldr	r2, [r3, #24]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f042 0220 	orr.w	r2, r2, #32
 800e548:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b03      	cmp	r3, #3
 800e554:	d014      	beq.n	800e580 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00f      	beq.n	800e580 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e566:	f043 0204 	orr.w	r2, r3, #4
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	699a      	ldr	r2, [r3, #24]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e57e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00f      	beq.n	800e5aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e590:	f043 0201 	orr.w	r2, r3, #1
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	699a      	ldr	r2, [r3, #24]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00f      	beq.n	800e5d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5ba:	f043 0208 	orr.w	r2, r3, #8
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699a      	ldr	r2, [r3, #24]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e5d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e5e4:	bf00      	nop
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	fffffc90 	.word	0xfffffc90

0800e5f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e600:	095b      	lsrs	r3, r3, #5
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	3301      	adds	r3, #1
 800e60c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	3307      	adds	r3, #7
 800e612:	08db      	lsrs	r3, r3, #3
 800e614:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b082      	sub	sp, #8
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e638:	2301      	movs	r3, #1
 800e63a:	e042      	b.n	800e6c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7f6 f802 	bl	8004658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2224      	movs	r2, #36	@ 0x24
 800e658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f022 0201 	bic.w	r2, r2, #1
 800e66a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fe1f 	bl	800f2b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 f8b4 	bl	800e7e8 <UART_SetConfig>
 800e680:	4603      	mov	r3, r0
 800e682:	2b01      	cmp	r3, #1
 800e684:	d101      	bne.n	800e68a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e01b      	b.n	800e6c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e698:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689a      	ldr	r2, [r3, #8]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f042 0201 	orr.w	r2, r2, #1
 800e6b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fe9e 	bl	800f3fc <UART_CheckIdleState>
 800e6c0:	4603      	mov	r3, r0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b08a      	sub	sp, #40	@ 0x28
 800e6ce:	af02      	add	r7, sp, #8
 800e6d0:	60f8      	str	r0, [r7, #12]
 800e6d2:	60b9      	str	r1, [r7, #8]
 800e6d4:	603b      	str	r3, [r7, #0]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6e0:	2b20      	cmp	r3, #32
 800e6e2:	d17b      	bne.n	800e7dc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <HAL_UART_Transmit+0x26>
 800e6ea:	88fb      	ldrh	r3, [r7, #6]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d101      	bne.n	800e6f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e074      	b.n	800e7de <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2221      	movs	r2, #33	@ 0x21
 800e700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e704:	f7f7 fa7e 	bl	8005c04 <HAL_GetTick>
 800e708:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	88fa      	ldrh	r2, [r7, #6]
 800e716:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e722:	d108      	bne.n	800e736 <HAL_UART_Transmit+0x6c>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d104      	bne.n	800e736 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e72c:	2300      	movs	r3, #0
 800e72e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	e003      	b.n	800e73e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e73e:	e030      	b.n	800e7a2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2200      	movs	r2, #0
 800e748:	2180      	movs	r1, #128	@ 0x80
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f000 ff00 	bl	800f550 <UART_WaitOnFlagUntilTimeout>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d005      	beq.n	800e762 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2220      	movs	r2, #32
 800e75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e75e:	2303      	movs	r3, #3
 800e760:	e03d      	b.n	800e7de <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10b      	bne.n	800e780 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	881b      	ldrh	r3, [r3, #0]
 800e76c:	461a      	mov	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e776:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	3302      	adds	r3, #2
 800e77c:	61bb      	str	r3, [r7, #24]
 800e77e:	e007      	b.n	800e790 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	781a      	ldrb	r2, [r3, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	3301      	adds	r3, #1
 800e78e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e796:	b29b      	uxth	r3, r3
 800e798:	3b01      	subs	r3, #1
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1c8      	bne.n	800e740 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2140      	movs	r1, #64	@ 0x40
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 fec9 	bl	800f550 <UART_WaitOnFlagUntilTimeout>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d005      	beq.n	800e7d0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2220      	movs	r2, #32
 800e7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e006      	b.n	800e7de <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2220      	movs	r2, #32
 800e7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	e000      	b.n	800e7de <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e7dc:	2302      	movs	r3, #2
  }
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3720      	adds	r7, #32
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7ec:	b092      	sub	sp, #72	@ 0x48
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	431a      	orrs	r2, r3
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	431a      	orrs	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	4bbe      	ldr	r3, [pc, #760]	@ (800eb10 <UART_SetConfig+0x328>)
 800e818:	4013      	ands	r3, r2
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	6812      	ldr	r2, [r2, #0]
 800e81e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e820:	430b      	orrs	r3, r1
 800e822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	68da      	ldr	r2, [r3, #12]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	430a      	orrs	r2, r1
 800e838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4ab3      	ldr	r2, [pc, #716]	@ (800eb14 <UART_SetConfig+0x32c>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d004      	beq.n	800e854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e850:	4313      	orrs	r3, r2
 800e852:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	4baf      	ldr	r3, [pc, #700]	@ (800eb18 <UART_SetConfig+0x330>)
 800e85c:	4013      	ands	r3, r2
 800e85e:	697a      	ldr	r2, [r7, #20]
 800e860:	6812      	ldr	r2, [r2, #0]
 800e862:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e864:	430b      	orrs	r3, r1
 800e866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e86e:	f023 010f 	bic.w	r1, r3, #15
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	430a      	orrs	r2, r1
 800e87c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4aa6      	ldr	r2, [pc, #664]	@ (800eb1c <UART_SetConfig+0x334>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d177      	bne.n	800e978 <UART_SetConfig+0x190>
 800e888:	4ba5      	ldr	r3, [pc, #660]	@ (800eb20 <UART_SetConfig+0x338>)
 800e88a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e890:	2b28      	cmp	r3, #40	@ 0x28
 800e892:	d86d      	bhi.n	800e970 <UART_SetConfig+0x188>
 800e894:	a201      	add	r2, pc, #4	@ (adr r2, 800e89c <UART_SetConfig+0xb4>)
 800e896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89a:	bf00      	nop
 800e89c:	0800e941 	.word	0x0800e941
 800e8a0:	0800e971 	.word	0x0800e971
 800e8a4:	0800e971 	.word	0x0800e971
 800e8a8:	0800e971 	.word	0x0800e971
 800e8ac:	0800e971 	.word	0x0800e971
 800e8b0:	0800e971 	.word	0x0800e971
 800e8b4:	0800e971 	.word	0x0800e971
 800e8b8:	0800e971 	.word	0x0800e971
 800e8bc:	0800e949 	.word	0x0800e949
 800e8c0:	0800e971 	.word	0x0800e971
 800e8c4:	0800e971 	.word	0x0800e971
 800e8c8:	0800e971 	.word	0x0800e971
 800e8cc:	0800e971 	.word	0x0800e971
 800e8d0:	0800e971 	.word	0x0800e971
 800e8d4:	0800e971 	.word	0x0800e971
 800e8d8:	0800e971 	.word	0x0800e971
 800e8dc:	0800e951 	.word	0x0800e951
 800e8e0:	0800e971 	.word	0x0800e971
 800e8e4:	0800e971 	.word	0x0800e971
 800e8e8:	0800e971 	.word	0x0800e971
 800e8ec:	0800e971 	.word	0x0800e971
 800e8f0:	0800e971 	.word	0x0800e971
 800e8f4:	0800e971 	.word	0x0800e971
 800e8f8:	0800e971 	.word	0x0800e971
 800e8fc:	0800e959 	.word	0x0800e959
 800e900:	0800e971 	.word	0x0800e971
 800e904:	0800e971 	.word	0x0800e971
 800e908:	0800e971 	.word	0x0800e971
 800e90c:	0800e971 	.word	0x0800e971
 800e910:	0800e971 	.word	0x0800e971
 800e914:	0800e971 	.word	0x0800e971
 800e918:	0800e971 	.word	0x0800e971
 800e91c:	0800e961 	.word	0x0800e961
 800e920:	0800e971 	.word	0x0800e971
 800e924:	0800e971 	.word	0x0800e971
 800e928:	0800e971 	.word	0x0800e971
 800e92c:	0800e971 	.word	0x0800e971
 800e930:	0800e971 	.word	0x0800e971
 800e934:	0800e971 	.word	0x0800e971
 800e938:	0800e971 	.word	0x0800e971
 800e93c:	0800e969 	.word	0x0800e969
 800e940:	2301      	movs	r3, #1
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e946:	e222      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e948:	2304      	movs	r3, #4
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94e:	e21e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e950:	2308      	movs	r3, #8
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e956:	e21a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e958:	2310      	movs	r3, #16
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95e:	e216      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e960:	2320      	movs	r3, #32
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e966:	e212      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e968:	2340      	movs	r3, #64	@ 0x40
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96e:	e20e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e970:	2380      	movs	r3, #128	@ 0x80
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e976:	e20a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a69      	ldr	r2, [pc, #420]	@ (800eb24 <UART_SetConfig+0x33c>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d130      	bne.n	800e9e4 <UART_SetConfig+0x1fc>
 800e982:	4b67      	ldr	r3, [pc, #412]	@ (800eb20 <UART_SetConfig+0x338>)
 800e984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b05      	cmp	r3, #5
 800e98c:	d826      	bhi.n	800e9dc <UART_SetConfig+0x1f4>
 800e98e:	a201      	add	r2, pc, #4	@ (adr r2, 800e994 <UART_SetConfig+0x1ac>)
 800e990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e994:	0800e9ad 	.word	0x0800e9ad
 800e998:	0800e9b5 	.word	0x0800e9b5
 800e99c:	0800e9bd 	.word	0x0800e9bd
 800e9a0:	0800e9c5 	.word	0x0800e9c5
 800e9a4:	0800e9cd 	.word	0x0800e9cd
 800e9a8:	0800e9d5 	.word	0x0800e9d5
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b2:	e1ec      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ba:	e1e8      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9bc:	2308      	movs	r3, #8
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c2:	e1e4      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ca:	e1e0      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9cc:	2320      	movs	r3, #32
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d2:	e1dc      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9d4:	2340      	movs	r3, #64	@ 0x40
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9da:	e1d8      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9dc:	2380      	movs	r3, #128	@ 0x80
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e2:	e1d4      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a4f      	ldr	r2, [pc, #316]	@ (800eb28 <UART_SetConfig+0x340>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d130      	bne.n	800ea50 <UART_SetConfig+0x268>
 800e9ee:	4b4c      	ldr	r3, [pc, #304]	@ (800eb20 <UART_SetConfig+0x338>)
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f2:	f003 0307 	and.w	r3, r3, #7
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	d826      	bhi.n	800ea48 <UART_SetConfig+0x260>
 800e9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800ea00 <UART_SetConfig+0x218>)
 800e9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea00:	0800ea19 	.word	0x0800ea19
 800ea04:	0800ea21 	.word	0x0800ea21
 800ea08:	0800ea29 	.word	0x0800ea29
 800ea0c:	0800ea31 	.word	0x0800ea31
 800ea10:	0800ea39 	.word	0x0800ea39
 800ea14:	0800ea41 	.word	0x0800ea41
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e1b6      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea20:	2304      	movs	r3, #4
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e1b2      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea28:	2308      	movs	r3, #8
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e1ae      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea30:	2310      	movs	r3, #16
 800ea32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea36:	e1aa      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea38:	2320      	movs	r3, #32
 800ea3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3e:	e1a6      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea40:	2340      	movs	r3, #64	@ 0x40
 800ea42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea46:	e1a2      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea48:	2380      	movs	r3, #128	@ 0x80
 800ea4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4e:	e19e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a35      	ldr	r2, [pc, #212]	@ (800eb2c <UART_SetConfig+0x344>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d130      	bne.n	800eabc <UART_SetConfig+0x2d4>
 800ea5a:	4b31      	ldr	r3, [pc, #196]	@ (800eb20 <UART_SetConfig+0x338>)
 800ea5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea5e:	f003 0307 	and.w	r3, r3, #7
 800ea62:	2b05      	cmp	r3, #5
 800ea64:	d826      	bhi.n	800eab4 <UART_SetConfig+0x2cc>
 800ea66:	a201      	add	r2, pc, #4	@ (adr r2, 800ea6c <UART_SetConfig+0x284>)
 800ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6c:	0800ea85 	.word	0x0800ea85
 800ea70:	0800ea8d 	.word	0x0800ea8d
 800ea74:	0800ea95 	.word	0x0800ea95
 800ea78:	0800ea9d 	.word	0x0800ea9d
 800ea7c:	0800eaa5 	.word	0x0800eaa5
 800ea80:	0800eaad 	.word	0x0800eaad
 800ea84:	2300      	movs	r3, #0
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8a:	e180      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea92:	e17c      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea94:	2308      	movs	r3, #8
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9a:	e178      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaa2:	e174      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaaa:	e170      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eaac:	2340      	movs	r3, #64	@ 0x40
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab2:	e16c      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eab4:	2380      	movs	r3, #128	@ 0x80
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaba:	e168      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a1b      	ldr	r2, [pc, #108]	@ (800eb30 <UART_SetConfig+0x348>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d142      	bne.n	800eb4c <UART_SetConfig+0x364>
 800eac6:	4b16      	ldr	r3, [pc, #88]	@ (800eb20 <UART_SetConfig+0x338>)
 800eac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaca:	f003 0307 	and.w	r3, r3, #7
 800eace:	2b05      	cmp	r3, #5
 800ead0:	d838      	bhi.n	800eb44 <UART_SetConfig+0x35c>
 800ead2:	a201      	add	r2, pc, #4	@ (adr r2, 800ead8 <UART_SetConfig+0x2f0>)
 800ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead8:	0800eaf1 	.word	0x0800eaf1
 800eadc:	0800eaf9 	.word	0x0800eaf9
 800eae0:	0800eb01 	.word	0x0800eb01
 800eae4:	0800eb09 	.word	0x0800eb09
 800eae8:	0800eb35 	.word	0x0800eb35
 800eaec:	0800eb3d 	.word	0x0800eb3d
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e14a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eaf8:	2304      	movs	r3, #4
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafe:	e146      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb00:	2308      	movs	r3, #8
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb06:	e142      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb08:	2310      	movs	r3, #16
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0e:	e13e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb10:	cfff69f3 	.word	0xcfff69f3
 800eb14:	58000c00 	.word	0x58000c00
 800eb18:	11fff4ff 	.word	0x11fff4ff
 800eb1c:	40011000 	.word	0x40011000
 800eb20:	58024400 	.word	0x58024400
 800eb24:	40004400 	.word	0x40004400
 800eb28:	40004800 	.word	0x40004800
 800eb2c:	40004c00 	.word	0x40004c00
 800eb30:	40005000 	.word	0x40005000
 800eb34:	2320      	movs	r3, #32
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3a:	e128      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb3c:	2340      	movs	r3, #64	@ 0x40
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e124      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb44:	2380      	movs	r3, #128	@ 0x80
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e120      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4acb      	ldr	r2, [pc, #812]	@ (800ee80 <UART_SetConfig+0x698>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d176      	bne.n	800ec44 <UART_SetConfig+0x45c>
 800eb56:	4bcb      	ldr	r3, [pc, #812]	@ (800ee84 <UART_SetConfig+0x69c>)
 800eb58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb5e:	2b28      	cmp	r3, #40	@ 0x28
 800eb60:	d86c      	bhi.n	800ec3c <UART_SetConfig+0x454>
 800eb62:	a201      	add	r2, pc, #4	@ (adr r2, 800eb68 <UART_SetConfig+0x380>)
 800eb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb68:	0800ec0d 	.word	0x0800ec0d
 800eb6c:	0800ec3d 	.word	0x0800ec3d
 800eb70:	0800ec3d 	.word	0x0800ec3d
 800eb74:	0800ec3d 	.word	0x0800ec3d
 800eb78:	0800ec3d 	.word	0x0800ec3d
 800eb7c:	0800ec3d 	.word	0x0800ec3d
 800eb80:	0800ec3d 	.word	0x0800ec3d
 800eb84:	0800ec3d 	.word	0x0800ec3d
 800eb88:	0800ec15 	.word	0x0800ec15
 800eb8c:	0800ec3d 	.word	0x0800ec3d
 800eb90:	0800ec3d 	.word	0x0800ec3d
 800eb94:	0800ec3d 	.word	0x0800ec3d
 800eb98:	0800ec3d 	.word	0x0800ec3d
 800eb9c:	0800ec3d 	.word	0x0800ec3d
 800eba0:	0800ec3d 	.word	0x0800ec3d
 800eba4:	0800ec3d 	.word	0x0800ec3d
 800eba8:	0800ec1d 	.word	0x0800ec1d
 800ebac:	0800ec3d 	.word	0x0800ec3d
 800ebb0:	0800ec3d 	.word	0x0800ec3d
 800ebb4:	0800ec3d 	.word	0x0800ec3d
 800ebb8:	0800ec3d 	.word	0x0800ec3d
 800ebbc:	0800ec3d 	.word	0x0800ec3d
 800ebc0:	0800ec3d 	.word	0x0800ec3d
 800ebc4:	0800ec3d 	.word	0x0800ec3d
 800ebc8:	0800ec25 	.word	0x0800ec25
 800ebcc:	0800ec3d 	.word	0x0800ec3d
 800ebd0:	0800ec3d 	.word	0x0800ec3d
 800ebd4:	0800ec3d 	.word	0x0800ec3d
 800ebd8:	0800ec3d 	.word	0x0800ec3d
 800ebdc:	0800ec3d 	.word	0x0800ec3d
 800ebe0:	0800ec3d 	.word	0x0800ec3d
 800ebe4:	0800ec3d 	.word	0x0800ec3d
 800ebe8:	0800ec2d 	.word	0x0800ec2d
 800ebec:	0800ec3d 	.word	0x0800ec3d
 800ebf0:	0800ec3d 	.word	0x0800ec3d
 800ebf4:	0800ec3d 	.word	0x0800ec3d
 800ebf8:	0800ec3d 	.word	0x0800ec3d
 800ebfc:	0800ec3d 	.word	0x0800ec3d
 800ec00:	0800ec3d 	.word	0x0800ec3d
 800ec04:	0800ec3d 	.word	0x0800ec3d
 800ec08:	0800ec35 	.word	0x0800ec35
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec12:	e0bc      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec14:	2304      	movs	r3, #4
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e0b8      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e0b4      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec24:	2310      	movs	r3, #16
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e0b0      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec2c:	2320      	movs	r3, #32
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec32:	e0ac      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec34:	2340      	movs	r3, #64	@ 0x40
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	e0a8      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec3c:	2380      	movs	r3, #128	@ 0x80
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec42:	e0a4      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a8f      	ldr	r2, [pc, #572]	@ (800ee88 <UART_SetConfig+0x6a0>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d130      	bne.n	800ecb0 <UART_SetConfig+0x4c8>
 800ec4e:	4b8d      	ldr	r3, [pc, #564]	@ (800ee84 <UART_SetConfig+0x69c>)
 800ec50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec52:	f003 0307 	and.w	r3, r3, #7
 800ec56:	2b05      	cmp	r3, #5
 800ec58:	d826      	bhi.n	800eca8 <UART_SetConfig+0x4c0>
 800ec5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec60 <UART_SetConfig+0x478>)
 800ec5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec60:	0800ec79 	.word	0x0800ec79
 800ec64:	0800ec81 	.word	0x0800ec81
 800ec68:	0800ec89 	.word	0x0800ec89
 800ec6c:	0800ec91 	.word	0x0800ec91
 800ec70:	0800ec99 	.word	0x0800ec99
 800ec74:	0800eca1 	.word	0x0800eca1
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e086      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec80:	2304      	movs	r3, #4
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e082      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec88:	2308      	movs	r3, #8
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e07e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec90:	2310      	movs	r3, #16
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec96:	e07a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ec98:	2320      	movs	r3, #32
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9e:	e076      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eca0:	2340      	movs	r3, #64	@ 0x40
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca6:	e072      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800eca8:	2380      	movs	r3, #128	@ 0x80
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecae:	e06e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a75      	ldr	r2, [pc, #468]	@ (800ee8c <UART_SetConfig+0x6a4>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d130      	bne.n	800ed1c <UART_SetConfig+0x534>
 800ecba:	4b72      	ldr	r3, [pc, #456]	@ (800ee84 <UART_SetConfig+0x69c>)
 800ecbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	2b05      	cmp	r3, #5
 800ecc4:	d826      	bhi.n	800ed14 <UART_SetConfig+0x52c>
 800ecc6:	a201      	add	r2, pc, #4	@ (adr r2, 800eccc <UART_SetConfig+0x4e4>)
 800ecc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eccc:	0800ece5 	.word	0x0800ece5
 800ecd0:	0800eced 	.word	0x0800eced
 800ecd4:	0800ecf5 	.word	0x0800ecf5
 800ecd8:	0800ecfd 	.word	0x0800ecfd
 800ecdc:	0800ed05 	.word	0x0800ed05
 800ece0:	0800ed0d 	.word	0x0800ed0d
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e050      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ecec:	2304      	movs	r3, #4
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e04c      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ecf4:	2308      	movs	r3, #8
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e048      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ecfc:	2310      	movs	r3, #16
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e044      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed04:	2320      	movs	r3, #32
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0a:	e040      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed0c:	2340      	movs	r3, #64	@ 0x40
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed12:	e03c      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed14:	2380      	movs	r3, #128	@ 0x80
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1a:	e038      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a5b      	ldr	r2, [pc, #364]	@ (800ee90 <UART_SetConfig+0x6a8>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d130      	bne.n	800ed88 <UART_SetConfig+0x5a0>
 800ed26:	4b57      	ldr	r3, [pc, #348]	@ (800ee84 <UART_SetConfig+0x69c>)
 800ed28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b05      	cmp	r3, #5
 800ed30:	d826      	bhi.n	800ed80 <UART_SetConfig+0x598>
 800ed32:	a201      	add	r2, pc, #4	@ (adr r2, 800ed38 <UART_SetConfig+0x550>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed51 	.word	0x0800ed51
 800ed3c:	0800ed59 	.word	0x0800ed59
 800ed40:	0800ed61 	.word	0x0800ed61
 800ed44:	0800ed69 	.word	0x0800ed69
 800ed48:	0800ed71 	.word	0x0800ed71
 800ed4c:	0800ed79 	.word	0x0800ed79
 800ed50:	2302      	movs	r3, #2
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e01a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed58:	2304      	movs	r3, #4
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e016      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed60:	2308      	movs	r3, #8
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e012      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed6e:	e00e      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed70:	2320      	movs	r3, #32
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed76:	e00a      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed78:	2340      	movs	r3, #64	@ 0x40
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7e:	e006      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed80:	2380      	movs	r3, #128	@ 0x80
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed86:	e002      	b.n	800ed8e <UART_SetConfig+0x5a6>
 800ed88:	2380      	movs	r3, #128	@ 0x80
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a3f      	ldr	r2, [pc, #252]	@ (800ee90 <UART_SetConfig+0x6a8>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	f040 80f8 	bne.w	800ef8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed9e:	2b20      	cmp	r3, #32
 800eda0:	dc46      	bgt.n	800ee30 <UART_SetConfig+0x648>
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	f2c0 8082 	blt.w	800eeac <UART_SetConfig+0x6c4>
 800eda8:	3b02      	subs	r3, #2
 800edaa:	2b1e      	cmp	r3, #30
 800edac:	d87e      	bhi.n	800eeac <UART_SetConfig+0x6c4>
 800edae:	a201      	add	r2, pc, #4	@ (adr r2, 800edb4 <UART_SetConfig+0x5cc>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800ee37 	.word	0x0800ee37
 800edb8:	0800eead 	.word	0x0800eead
 800edbc:	0800ee3f 	.word	0x0800ee3f
 800edc0:	0800eead 	.word	0x0800eead
 800edc4:	0800eead 	.word	0x0800eead
 800edc8:	0800eead 	.word	0x0800eead
 800edcc:	0800ee4f 	.word	0x0800ee4f
 800edd0:	0800eead 	.word	0x0800eead
 800edd4:	0800eead 	.word	0x0800eead
 800edd8:	0800eead 	.word	0x0800eead
 800eddc:	0800eead 	.word	0x0800eead
 800ede0:	0800eead 	.word	0x0800eead
 800ede4:	0800eead 	.word	0x0800eead
 800ede8:	0800eead 	.word	0x0800eead
 800edec:	0800ee5f 	.word	0x0800ee5f
 800edf0:	0800eead 	.word	0x0800eead
 800edf4:	0800eead 	.word	0x0800eead
 800edf8:	0800eead 	.word	0x0800eead
 800edfc:	0800eead 	.word	0x0800eead
 800ee00:	0800eead 	.word	0x0800eead
 800ee04:	0800eead 	.word	0x0800eead
 800ee08:	0800eead 	.word	0x0800eead
 800ee0c:	0800eead 	.word	0x0800eead
 800ee10:	0800eead 	.word	0x0800eead
 800ee14:	0800eead 	.word	0x0800eead
 800ee18:	0800eead 	.word	0x0800eead
 800ee1c:	0800eead 	.word	0x0800eead
 800ee20:	0800eead 	.word	0x0800eead
 800ee24:	0800eead 	.word	0x0800eead
 800ee28:	0800eead 	.word	0x0800eead
 800ee2c:	0800ee9f 	.word	0x0800ee9f
 800ee30:	2b40      	cmp	r3, #64	@ 0x40
 800ee32:	d037      	beq.n	800eea4 <UART_SetConfig+0x6bc>
 800ee34:	e03a      	b.n	800eeac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee36:	f7fc fe1f 	bl	800ba78 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee3c:	e03c      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fc fe2e 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee4c:	e034      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee4e:	f107 0318 	add.w	r3, r7, #24
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fc ff7a 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee5c:	e02c      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee5e:	4b09      	ldr	r3, [pc, #36]	@ (800ee84 <UART_SetConfig+0x69c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d016      	beq.n	800ee98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee6a:	4b06      	ldr	r3, [pc, #24]	@ (800ee84 <UART_SetConfig+0x69c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	08db      	lsrs	r3, r3, #3
 800ee70:	f003 0303 	and.w	r3, r3, #3
 800ee74:	4a07      	ldr	r2, [pc, #28]	@ (800ee94 <UART_SetConfig+0x6ac>)
 800ee76:	fa22 f303 	lsr.w	r3, r2, r3
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee7c:	e01c      	b.n	800eeb8 <UART_SetConfig+0x6d0>
 800ee7e:	bf00      	nop
 800ee80:	40011400 	.word	0x40011400
 800ee84:	58024400 	.word	0x58024400
 800ee88:	40007800 	.word	0x40007800
 800ee8c:	40007c00 	.word	0x40007c00
 800ee90:	58000c00 	.word	0x58000c00
 800ee94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ee98:	4b9d      	ldr	r3, [pc, #628]	@ (800f110 <UART_SetConfig+0x928>)
 800ee9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee9c:	e00c      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee9e:	4b9d      	ldr	r3, [pc, #628]	@ (800f114 <UART_SetConfig+0x92c>)
 800eea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eea2:	e009      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeaa:	e005      	b.n	800eeb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eeac:	2300      	movs	r3, #0
 800eeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eeb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eeb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 81de 	beq.w	800f27c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec4:	4a94      	ldr	r2, [pc, #592]	@ (800f118 <UART_SetConfig+0x930>)
 800eec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeca:	461a      	mov	r2, r3
 800eecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eece:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	685a      	ldr	r2, [r3, #4]
 800eed8:	4613      	mov	r3, r2
 800eeda:	005b      	lsls	r3, r3, #1
 800eedc:	4413      	add	r3, r2
 800eede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d305      	bcc.n	800eef0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eeea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d903      	bls.n	800eef8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eef6:	e1c1      	b.n	800f27c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eefa:	2200      	movs	r2, #0
 800eefc:	60bb      	str	r3, [r7, #8]
 800eefe:	60fa      	str	r2, [r7, #12]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef04:	4a84      	ldr	r2, [pc, #528]	@ (800f118 <UART_SetConfig+0x930>)
 800ef06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	607a      	str	r2, [r7, #4]
 800ef12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef1a:	f7f1 fbfd 	bl	8000718 <__aeabi_uldivmod>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	460b      	mov	r3, r1
 800ef22:	4610      	mov	r0, r2
 800ef24:	4619      	mov	r1, r3
 800ef26:	f04f 0200 	mov.w	r2, #0
 800ef2a:	f04f 0300 	mov.w	r3, #0
 800ef2e:	020b      	lsls	r3, r1, #8
 800ef30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef34:	0202      	lsls	r2, r0, #8
 800ef36:	6979      	ldr	r1, [r7, #20]
 800ef38:	6849      	ldr	r1, [r1, #4]
 800ef3a:	0849      	lsrs	r1, r1, #1
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	4605      	mov	r5, r0
 800ef42:	eb12 0804 	adds.w	r8, r2, r4
 800ef46:	eb43 0905 	adc.w	r9, r3, r5
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	469a      	mov	sl, r3
 800ef52:	4693      	mov	fp, r2
 800ef54:	4652      	mov	r2, sl
 800ef56:	465b      	mov	r3, fp
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f7f1 fbdc 	bl	8000718 <__aeabi_uldivmod>
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	4613      	mov	r3, r2
 800ef66:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef6e:	d308      	bcc.n	800ef82 <UART_SetConfig+0x79a>
 800ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef76:	d204      	bcs.n	800ef82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef7e:	60da      	str	r2, [r3, #12]
 800ef80:	e17c      	b.n	800f27c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ef82:	2301      	movs	r3, #1
 800ef84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ef88:	e178      	b.n	800f27c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef92:	f040 80c5 	bne.w	800f120 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ef96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef9a:	2b20      	cmp	r3, #32
 800ef9c:	dc48      	bgt.n	800f030 <UART_SetConfig+0x848>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	db7b      	blt.n	800f09a <UART_SetConfig+0x8b2>
 800efa2:	2b20      	cmp	r3, #32
 800efa4:	d879      	bhi.n	800f09a <UART_SetConfig+0x8b2>
 800efa6:	a201      	add	r2, pc, #4	@ (adr r2, 800efac <UART_SetConfig+0x7c4>)
 800efa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efac:	0800f037 	.word	0x0800f037
 800efb0:	0800f03f 	.word	0x0800f03f
 800efb4:	0800f09b 	.word	0x0800f09b
 800efb8:	0800f09b 	.word	0x0800f09b
 800efbc:	0800f047 	.word	0x0800f047
 800efc0:	0800f09b 	.word	0x0800f09b
 800efc4:	0800f09b 	.word	0x0800f09b
 800efc8:	0800f09b 	.word	0x0800f09b
 800efcc:	0800f057 	.word	0x0800f057
 800efd0:	0800f09b 	.word	0x0800f09b
 800efd4:	0800f09b 	.word	0x0800f09b
 800efd8:	0800f09b 	.word	0x0800f09b
 800efdc:	0800f09b 	.word	0x0800f09b
 800efe0:	0800f09b 	.word	0x0800f09b
 800efe4:	0800f09b 	.word	0x0800f09b
 800efe8:	0800f09b 	.word	0x0800f09b
 800efec:	0800f067 	.word	0x0800f067
 800eff0:	0800f09b 	.word	0x0800f09b
 800eff4:	0800f09b 	.word	0x0800f09b
 800eff8:	0800f09b 	.word	0x0800f09b
 800effc:	0800f09b 	.word	0x0800f09b
 800f000:	0800f09b 	.word	0x0800f09b
 800f004:	0800f09b 	.word	0x0800f09b
 800f008:	0800f09b 	.word	0x0800f09b
 800f00c:	0800f09b 	.word	0x0800f09b
 800f010:	0800f09b 	.word	0x0800f09b
 800f014:	0800f09b 	.word	0x0800f09b
 800f018:	0800f09b 	.word	0x0800f09b
 800f01c:	0800f09b 	.word	0x0800f09b
 800f020:	0800f09b 	.word	0x0800f09b
 800f024:	0800f09b 	.word	0x0800f09b
 800f028:	0800f09b 	.word	0x0800f09b
 800f02c:	0800f08d 	.word	0x0800f08d
 800f030:	2b40      	cmp	r3, #64	@ 0x40
 800f032:	d02e      	beq.n	800f092 <UART_SetConfig+0x8aa>
 800f034:	e031      	b.n	800f09a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f036:	f7fa fd69 	bl	8009b0c <HAL_RCC_GetPCLK1Freq>
 800f03a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f03c:	e033      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f03e:	f7fa fd7b 	bl	8009b38 <HAL_RCC_GetPCLK2Freq>
 800f042:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f044:	e02f      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fc fd2a 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f054:	e027      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f056:	f107 0318 	add.w	r3, r7, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fc fe76 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f064:	e01f      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f066:	4b2d      	ldr	r3, [pc, #180]	@ (800f11c <UART_SetConfig+0x934>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f003 0320 	and.w	r3, r3, #32
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d009      	beq.n	800f086 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f072:	4b2a      	ldr	r3, [pc, #168]	@ (800f11c <UART_SetConfig+0x934>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	08db      	lsrs	r3, r3, #3
 800f078:	f003 0303 	and.w	r3, r3, #3
 800f07c:	4a24      	ldr	r2, [pc, #144]	@ (800f110 <UART_SetConfig+0x928>)
 800f07e:	fa22 f303 	lsr.w	r3, r2, r3
 800f082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f084:	e00f      	b.n	800f0a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f086:	4b22      	ldr	r3, [pc, #136]	@ (800f110 <UART_SetConfig+0x928>)
 800f088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f08a:	e00c      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f08c:	4b21      	ldr	r3, [pc, #132]	@ (800f114 <UART_SetConfig+0x92c>)
 800f08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f090:	e009      	b.n	800f0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f098:	e005      	b.n	800f0a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f09a:	2300      	movs	r3, #0
 800f09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f000 80e7 	beq.w	800f27c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0b2:	4a19      	ldr	r2, [pc, #100]	@ (800f118 <UART_SetConfig+0x930>)
 800f0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0c0:	005a      	lsls	r2, r3, #1
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	085b      	lsrs	r3, r3, #1
 800f0c8:	441a      	add	r2, r3
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	2b0f      	cmp	r3, #15
 800f0d8:	d916      	bls.n	800f108 <UART_SetConfig+0x920>
 800f0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0e0:	d212      	bcs.n	800f108 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	f023 030f 	bic.w	r3, r3, #15
 800f0ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ee:	085b      	lsrs	r3, r3, #1
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f104:	60da      	str	r2, [r3, #12]
 800f106:	e0b9      	b.n	800f27c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f108:	2301      	movs	r3, #1
 800f10a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f10e:	e0b5      	b.n	800f27c <UART_SetConfig+0xa94>
 800f110:	03d09000 	.word	0x03d09000
 800f114:	003d0900 	.word	0x003d0900
 800f118:	08014a14 	.word	0x08014a14
 800f11c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f120:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f124:	2b20      	cmp	r3, #32
 800f126:	dc49      	bgt.n	800f1bc <UART_SetConfig+0x9d4>
 800f128:	2b00      	cmp	r3, #0
 800f12a:	db7c      	blt.n	800f226 <UART_SetConfig+0xa3e>
 800f12c:	2b20      	cmp	r3, #32
 800f12e:	d87a      	bhi.n	800f226 <UART_SetConfig+0xa3e>
 800f130:	a201      	add	r2, pc, #4	@ (adr r2, 800f138 <UART_SetConfig+0x950>)
 800f132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f136:	bf00      	nop
 800f138:	0800f1c3 	.word	0x0800f1c3
 800f13c:	0800f1cb 	.word	0x0800f1cb
 800f140:	0800f227 	.word	0x0800f227
 800f144:	0800f227 	.word	0x0800f227
 800f148:	0800f1d3 	.word	0x0800f1d3
 800f14c:	0800f227 	.word	0x0800f227
 800f150:	0800f227 	.word	0x0800f227
 800f154:	0800f227 	.word	0x0800f227
 800f158:	0800f1e3 	.word	0x0800f1e3
 800f15c:	0800f227 	.word	0x0800f227
 800f160:	0800f227 	.word	0x0800f227
 800f164:	0800f227 	.word	0x0800f227
 800f168:	0800f227 	.word	0x0800f227
 800f16c:	0800f227 	.word	0x0800f227
 800f170:	0800f227 	.word	0x0800f227
 800f174:	0800f227 	.word	0x0800f227
 800f178:	0800f1f3 	.word	0x0800f1f3
 800f17c:	0800f227 	.word	0x0800f227
 800f180:	0800f227 	.word	0x0800f227
 800f184:	0800f227 	.word	0x0800f227
 800f188:	0800f227 	.word	0x0800f227
 800f18c:	0800f227 	.word	0x0800f227
 800f190:	0800f227 	.word	0x0800f227
 800f194:	0800f227 	.word	0x0800f227
 800f198:	0800f227 	.word	0x0800f227
 800f19c:	0800f227 	.word	0x0800f227
 800f1a0:	0800f227 	.word	0x0800f227
 800f1a4:	0800f227 	.word	0x0800f227
 800f1a8:	0800f227 	.word	0x0800f227
 800f1ac:	0800f227 	.word	0x0800f227
 800f1b0:	0800f227 	.word	0x0800f227
 800f1b4:	0800f227 	.word	0x0800f227
 800f1b8:	0800f219 	.word	0x0800f219
 800f1bc:	2b40      	cmp	r3, #64	@ 0x40
 800f1be:	d02e      	beq.n	800f21e <UART_SetConfig+0xa36>
 800f1c0:	e031      	b.n	800f226 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1c2:	f7fa fca3 	bl	8009b0c <HAL_RCC_GetPCLK1Freq>
 800f1c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f1c8:	e033      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1ca:	f7fa fcb5 	bl	8009b38 <HAL_RCC_GetPCLK2Freq>
 800f1ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f1d0:	e02f      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fc fc64 	bl	800baa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1e0:	e027      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1e2:	f107 0318 	add.w	r3, r7, #24
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fc fdb0 	bl	800bd4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1f0:	e01f      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1f2:	4b2d      	ldr	r3, [pc, #180]	@ (800f2a8 <UART_SetConfig+0xac0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f003 0320 	and.w	r3, r3, #32
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d009      	beq.n	800f212 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1fe:	4b2a      	ldr	r3, [pc, #168]	@ (800f2a8 <UART_SetConfig+0xac0>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	08db      	lsrs	r3, r3, #3
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	4a28      	ldr	r2, [pc, #160]	@ (800f2ac <UART_SetConfig+0xac4>)
 800f20a:	fa22 f303 	lsr.w	r3, r2, r3
 800f20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f210:	e00f      	b.n	800f232 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f212:	4b26      	ldr	r3, [pc, #152]	@ (800f2ac <UART_SetConfig+0xac4>)
 800f214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f216:	e00c      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f218:	4b25      	ldr	r3, [pc, #148]	@ (800f2b0 <UART_SetConfig+0xac8>)
 800f21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f21c:	e009      	b.n	800f232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f21e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f224:	e005      	b.n	800f232 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f226:	2300      	movs	r3, #0
 800f228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f22a:	2301      	movs	r3, #1
 800f22c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f230:	bf00      	nop
    }

    if (pclk != 0U)
 800f232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f234:	2b00      	cmp	r3, #0
 800f236:	d021      	beq.n	800f27c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f23c:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b4 <UART_SetConfig+0xacc>)
 800f23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f242:	461a      	mov	r2, r3
 800f244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f246:	fbb3 f2f2 	udiv	r2, r3, r2
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	085b      	lsrs	r3, r3, #1
 800f250:	441a      	add	r2, r3
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	fbb2 f3f3 	udiv	r3, r2, r3
 800f25a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25e:	2b0f      	cmp	r3, #15
 800f260:	d909      	bls.n	800f276 <UART_SetConfig+0xa8e>
 800f262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f268:	d205      	bcs.n	800f276 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60da      	str	r2, [r3, #12]
 800f274:	e002      	b.n	800f27c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2201      	movs	r2, #1
 800f280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	2201      	movs	r2, #1
 800f288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	2200      	movs	r2, #0
 800f290:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	2200      	movs	r2, #0
 800f296:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f298:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3748      	adds	r7, #72	@ 0x48
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2a6:	bf00      	nop
 800f2a8:	58024400 	.word	0x58024400
 800f2ac:	03d09000 	.word	0x03d09000
 800f2b0:	003d0900 	.word	0x003d0900
 800f2b4:	08014a14 	.word	0x08014a14

0800f2b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2c4:	f003 0308 	and.w	r3, r3, #8
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00a      	beq.n	800f2e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	430a      	orrs	r2, r1
 800f2e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00a      	beq.n	800f304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	430a      	orrs	r2, r1
 800f302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00a      	beq.n	800f326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	430a      	orrs	r2, r1
 800f324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f32a:	f003 0304 	and.w	r3, r3, #4
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00a      	beq.n	800f348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	430a      	orrs	r2, r1
 800f346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f34c:	f003 0310 	and.w	r3, r3, #16
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00a      	beq.n	800f36a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	430a      	orrs	r2, r1
 800f368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f36e:	f003 0320 	and.w	r3, r3, #32
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00a      	beq.n	800f38c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	430a      	orrs	r2, r1
 800f38a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f394:	2b00      	cmp	r3, #0
 800f396:	d01a      	beq.n	800f3ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	430a      	orrs	r2, r1
 800f3ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3b6:	d10a      	bne.n	800f3ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	430a      	orrs	r2, r1
 800f3cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00a      	beq.n	800f3f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	430a      	orrs	r2, r1
 800f3ee:	605a      	str	r2, [r3, #4]
  }
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b098      	sub	sp, #96	@ 0x60
 800f400:	af02      	add	r7, sp, #8
 800f402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f40c:	f7f6 fbfa 	bl	8005c04 <HAL_GetTick>
 800f410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f003 0308 	and.w	r3, r3, #8
 800f41c:	2b08      	cmp	r3, #8
 800f41e:	d12f      	bne.n	800f480 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f428:	2200      	movs	r2, #0
 800f42a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f88e 	bl	800f550 <UART_WaitOnFlagUntilTimeout>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d022      	beq.n	800f480 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f442:	e853 3f00 	ldrex	r3, [r3]
 800f446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f44a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f44e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	461a      	mov	r2, r3
 800f456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f458:	647b      	str	r3, [r7, #68]	@ 0x44
 800f45a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f45e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f460:	e841 2300 	strex	r3, r2, [r1]
 800f464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1e6      	bne.n	800f43a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2220      	movs	r2, #32
 800f470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e063      	b.n	800f548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f003 0304 	and.w	r3, r3, #4
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	d149      	bne.n	800f522 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f48e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f496:	2200      	movs	r2, #0
 800f498:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f857 	bl	800f550 <UART_WaitOnFlagUntilTimeout>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d03c      	beq.n	800f522 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b0:	e853 3f00 	ldrex	r3, [r3]
 800f4b4:	623b      	str	r3, [r7, #32]
   return(result);
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f4bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4ce:	e841 2300 	strex	r3, r2, [r1]
 800f4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1e6      	bne.n	800f4a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	e853 3f00 	ldrex	r3, [r3]
 800f4e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f023 0301 	bic.w	r3, r3, #1
 800f4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f4fa:	61fa      	str	r2, [r7, #28]
 800f4fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	69b9      	ldr	r1, [r7, #24]
 800f500:	69fa      	ldr	r2, [r7, #28]
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	617b      	str	r3, [r7, #20]
   return(result);
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e5      	bne.n	800f4da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2220      	movs	r2, #32
 800f512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f51e:	2303      	movs	r3, #3
 800f520:	e012      	b.n	800f548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2220      	movs	r2, #32
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2220      	movs	r2, #32
 800f52e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3758      	adds	r7, #88	@ 0x58
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	603b      	str	r3, [r7, #0]
 800f55c:	4613      	mov	r3, r2
 800f55e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f560:	e04f      	b.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f568:	d04b      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f56a:	f7f6 fb4b 	bl	8005c04 <HAL_GetTick>
 800f56e:	4602      	mov	r2, r0
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	69ba      	ldr	r2, [r7, #24]
 800f576:	429a      	cmp	r2, r3
 800f578:	d302      	bcc.n	800f580 <UART_WaitOnFlagUntilTimeout+0x30>
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d101      	bne.n	800f584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f580:	2303      	movs	r3, #3
 800f582:	e04e      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f003 0304 	and.w	r3, r3, #4
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d037      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2b80      	cmp	r3, #128	@ 0x80
 800f596:	d034      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b40      	cmp	r3, #64	@ 0x40
 800f59c:	d031      	beq.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	f003 0308 	and.w	r3, r3, #8
 800f5a8:	2b08      	cmp	r3, #8
 800f5aa:	d110      	bne.n	800f5ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2208      	movs	r2, #8
 800f5b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 f839 	bl	800f62c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2208      	movs	r2, #8
 800f5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e029      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5dc:	d111      	bne.n	800f602 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f5e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f000 f81f 	bl	800f62c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2220      	movs	r2, #32
 800f5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e00f      	b.n	800f622 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	69da      	ldr	r2, [r3, #28]
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	4013      	ands	r3, r2
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	429a      	cmp	r2, r3
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	461a      	mov	r2, r3
 800f61a:	79fb      	ldrb	r3, [r7, #7]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d0a0      	beq.n	800f562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b095      	sub	sp, #84	@ 0x54
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f63c:	e853 3f00 	ldrex	r3, [r3]
 800f640:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	461a      	mov	r2, r3
 800f650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f652:	643b      	str	r3, [r7, #64]	@ 0x40
 800f654:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f65a:	e841 2300 	strex	r3, r2, [r1]
 800f65e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1e6      	bne.n	800f634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3308      	adds	r3, #8
 800f66c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	e853 3f00 	ldrex	r3, [r3]
 800f674:	61fb      	str	r3, [r7, #28]
   return(result);
 800f676:	69fa      	ldr	r2, [r7, #28]
 800f678:	4b1e      	ldr	r3, [pc, #120]	@ (800f6f4 <UART_EndRxTransfer+0xc8>)
 800f67a:	4013      	ands	r3, r2
 800f67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	3308      	adds	r3, #8
 800f684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f68e:	e841 2300 	strex	r3, r2, [r1]
 800f692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e5      	bne.n	800f666 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d118      	bne.n	800f6d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	e853 3f00 	ldrex	r3, [r3]
 800f6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	f023 0310 	bic.w	r3, r3, #16
 800f6b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c4:	6979      	ldr	r1, [r7, #20]
 800f6c6:	69ba      	ldr	r2, [r7, #24]
 800f6c8:	e841 2300 	strex	r3, r2, [r1]
 800f6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e6      	bne.n	800f6a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2220      	movs	r2, #32
 800f6d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f6e8:	bf00      	nop
 800f6ea:	3754      	adds	r7, #84	@ 0x54
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	effffffe 	.word	0xeffffffe

0800f6f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f706:	2b01      	cmp	r3, #1
 800f708:	d101      	bne.n	800f70e <HAL_UARTEx_DisableFifoMode+0x16>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e027      	b.n	800f75e <HAL_UARTEx_DisableFifoMode+0x66>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2224      	movs	r2, #36	@ 0x24
 800f71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0201 	bic.w	r2, r2, #1
 800f734:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f73c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2220      	movs	r2, #32
 800f750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3714      	adds	r7, #20
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d101      	bne.n	800f782 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f77e:	2302      	movs	r3, #2
 800f780:	e02d      	b.n	800f7de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2224      	movs	r2, #36	@ 0x24
 800f78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f022 0201 	bic.w	r2, r2, #1
 800f7a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	430a      	orrs	r2, r1
 800f7bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f850 	bl	800f864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d101      	bne.n	800f7fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	e02d      	b.n	800f85a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2201      	movs	r2, #1
 800f802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2224      	movs	r2, #36	@ 0x24
 800f80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f022 0201 	bic.w	r2, r2, #1
 800f824:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	683a      	ldr	r2, [r7, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f812 	bl	800f864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2220      	movs	r2, #32
 800f84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
	...

0800f864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f870:	2b00      	cmp	r3, #0
 800f872:	d108      	bne.n	800f886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f884:	e031      	b.n	800f8ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f886:	2310      	movs	r3, #16
 800f888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f88a:	2310      	movs	r3, #16
 800f88c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	0e5b      	lsrs	r3, r3, #25
 800f896:	b2db      	uxtb	r3, r3
 800f898:	f003 0307 	and.w	r3, r3, #7
 800f89c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	0f5b      	lsrs	r3, r3, #29
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	f003 0307 	and.w	r3, r3, #7
 800f8ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ae:	7bbb      	ldrb	r3, [r7, #14]
 800f8b0:	7b3a      	ldrb	r2, [r7, #12]
 800f8b2:	4911      	ldr	r1, [pc, #68]	@ (800f8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800f8b4:	5c8a      	ldrb	r2, [r1, r2]
 800f8b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8ba:	7b3a      	ldrb	r2, [r7, #12]
 800f8bc:	490f      	ldr	r1, [pc, #60]	@ (800f8fc <UARTEx_SetNbDataToProcess+0x98>)
 800f8be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
 800f8ce:	7b7a      	ldrb	r2, [r7, #13]
 800f8d0:	4909      	ldr	r1, [pc, #36]	@ (800f8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800f8d2:	5c8a      	ldrb	r2, [r1, r2]
 800f8d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8d8:	7b7a      	ldrb	r2, [r7, #13]
 800f8da:	4908      	ldr	r1, [pc, #32]	@ (800f8fc <UARTEx_SetNbDataToProcess+0x98>)
 800f8dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8de:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8e2:	b29a      	uxth	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8ea:	bf00      	nop
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	08014a2c 	.word	0x08014a2c
 800f8fc:	08014a34 	.word	0x08014a34

0800f900 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f900:	b084      	sub	sp, #16
 800f902:	b480      	push	{r7}
 800f904:	b085      	sub	sp, #20
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	f107 001c 	add.w	r0, r7, #28
 800f90e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f916:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f918:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f91a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800f91e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800f922:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800f926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685a      	ldr	r2, [r3, #4]
 800f932:	4b07      	ldr	r3, [pc, #28]	@ (800f950 <SDMMC_Init+0x50>)
 800f934:	4013      	ands	r3, r2
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	431a      	orrs	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	b004      	add	sp, #16
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	ffc02c00 	.word	0xffc02c00

0800f954 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f043 0203 	orr.w	r2, r3, #3
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	370c      	adds	r7, #12
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f003 0303 	and.w	r3, r3, #3
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	370c      	adds	r7, #12
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
	...

0800f9d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f9f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f9fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68da      	ldr	r2, [r3, #12]
 800fa06:	4b06      	ldr	r3, [pc, #24]	@ (800fa20 <SDMMC_SendCommand+0x50>)
 800fa08:	4013      	ands	r3, r2
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	431a      	orrs	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr
 800fa20:	fffee0c0 	.word	0xfffee0c0

0800fa24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	b2db      	uxtb	r3, r3
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b085      	sub	sp, #20
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
 800fa46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3314      	adds	r3, #20
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	4413      	add	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa8a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fa90:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fa96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	431a      	orrs	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800faae:	2300      	movs	r3, #0

}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b088      	sub	sp, #32
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800faca:	2310      	movs	r3, #16
 800facc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800face:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fad4:	2300      	movs	r3, #0
 800fad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fadc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fade:	f107 0308 	add.w	r3, r7, #8
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7ff ff73 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800faea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faee:	2110      	movs	r1, #16
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fa5f 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800faf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faf8:	69fb      	ldr	r3, [r7, #28]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3720      	adds	r7, #32
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b088      	sub	sp, #32
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fb10:	2311      	movs	r3, #17
 800fb12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb24:	f107 0308 	add.w	r3, r7, #8
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff ff50 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fb30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb34:	2111      	movs	r1, #17
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fa3c 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fb3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb3e:	69fb      	ldr	r3, [r7, #28]
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3720      	adds	r7, #32
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b088      	sub	sp, #32
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fb56:	2312      	movs	r3, #18
 800fb58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb60:	2300      	movs	r3, #0
 800fb62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb6a:	f107 0308 	add.w	r3, r7, #8
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7ff ff2d 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fb76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb7a:	2112      	movs	r1, #18
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fa19 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fb82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb84:	69fb      	ldr	r3, [r7, #28]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3720      	adds	r7, #32
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b088      	sub	sp, #32
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fb9c:	2318      	movs	r3, #24
 800fb9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fba6:	2300      	movs	r3, #0
 800fba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbb0:	f107 0308 	add.w	r3, r7, #8
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7ff ff0a 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fbbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbc0:	2118      	movs	r1, #24
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 f9f6 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fbc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbca:	69fb      	ldr	r3, [r7, #28]
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3720      	adds	r7, #32
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b088      	sub	sp, #32
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fbe2:	2319      	movs	r3, #25
 800fbe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbec:	2300      	movs	r3, #0
 800fbee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbf6:	f107 0308 	add.w	r3, r7, #8
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff fee7 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc06:	2119      	movs	r1, #25
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f9d3 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fc0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc10:	69fb      	ldr	r3, [r7, #28]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3720      	adds	r7, #32
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
	...

0800fc1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b088      	sub	sp, #32
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fc24:	2300      	movs	r3, #0
 800fc26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fc28:	230c      	movs	r3, #12
 800fc2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc3a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc54:	f107 0308 	add.w	r3, r7, #8
 800fc58:	4619      	mov	r1, r3
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7ff feb8 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fc60:	4a0b      	ldr	r2, [pc, #44]	@ (800fc90 <SDMMC_CmdStopTransfer+0x74>)
 800fc62:	210c      	movs	r1, #12
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f9a5 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fc6a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc7e:	d101      	bne.n	800fc84 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fc80:	2300      	movs	r3, #0
 800fc82:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fc84:	69fb      	ldr	r3, [r7, #28]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3720      	adds	r7, #32
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	05f5e100 	.word	0x05f5e100

0800fc94 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fca2:	2307      	movs	r3, #7
 800fca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcac:	2300      	movs	r3, #0
 800fcae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcb6:	f107 0308 	add.w	r3, r7, #8
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fe87 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fcc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcc6:	2107      	movs	r1, #7
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f973 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fcce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcd0:	69fb      	ldr	r3, [r7, #28]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3720      	adds	r7, #32
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b088      	sub	sp, #32
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fce2:	2300      	movs	r3, #0
 800fce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fce6:	2300      	movs	r3, #0
 800fce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fcea:	2300      	movs	r3, #0
 800fcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcf8:	f107 0308 	add.w	r3, r7, #8
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff fe66 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fb97 	bl	8010438 <SDMMC_GetCmdError>
 800fd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd0c:	69fb      	ldr	r3, [r7, #28]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3720      	adds	r7, #32
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b088      	sub	sp, #32
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fd1e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fd24:	2308      	movs	r3, #8
 800fd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd38:	f107 0308 	add.w	r3, r7, #8
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff fe46 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fb29 	bl	801039c <SDMMC_GetCmdResp7>
 800fd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd4c:	69fb      	ldr	r3, [r7, #28]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3720      	adds	r7, #32
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b088      	sub	sp, #32
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fd64:	2337      	movs	r3, #55	@ 0x37
 800fd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff fe26 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fd84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd88:	2137      	movs	r1, #55	@ 0x37
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f912 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fd90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd92:	69fb      	ldr	r3, [r7, #28]
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3720      	adds	r7, #32
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b088      	sub	sp, #32
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fdaa:	2329      	movs	r3, #41	@ 0x29
 800fdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdbe:	f107 0308 	add.w	r3, r7, #8
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff fe03 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 fa2e 	bl	801022c <SDMMC_GetCmdResp3>
 800fdd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3720      	adds	r7, #32
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fdea:	2306      	movs	r3, #6
 800fdec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdfe:	f107 0308 	add.w	r3, r7, #8
 800fe02:	4619      	mov	r1, r3
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff fde3 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fe0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe0e:	2106      	movs	r1, #6
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f8cf 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fe16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe18:	69fb      	ldr	r3, [r7, #28]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3720      	adds	r7, #32
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b088      	sub	sp, #32
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fe2e:	2333      	movs	r3, #51	@ 0x33
 800fe30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe42:	f107 0308 	add.w	r3, r7, #8
 800fe46:	4619      	mov	r1, r3
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff fdc1 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fe4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe52:	2133      	movs	r1, #51	@ 0x33
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 f8ad 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800fe5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe5c:	69fb      	ldr	r3, [r7, #28]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3720      	adds	r7, #32
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b088      	sub	sp, #32
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe72:	2302      	movs	r3, #2
 800fe74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fe7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe86:	f107 0308 	add.w	r3, r7, #8
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff fd9f 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 f980 	bl	8010198 <SDMMC_GetCmdResp2>
 800fe98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe9a:	69fb      	ldr	r3, [r7, #28]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3720      	adds	r7, #32
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b088      	sub	sp, #32
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800feb2:	2309      	movs	r3, #9
 800feb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800feb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800feba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800febc:	2300      	movs	r3, #0
 800febe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fec6:	f107 0308 	add.w	r3, r7, #8
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff fd7f 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 f960 	bl	8010198 <SDMMC_GetCmdResp2>
 800fed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feda:	69fb      	ldr	r3, [r7, #28]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3720      	adds	r7, #32
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b088      	sub	sp, #32
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800feee:	2300      	movs	r3, #0
 800fef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fef2:	2303      	movs	r3, #3
 800fef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fefa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fefc:	2300      	movs	r3, #0
 800fefe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff06:	f107 0308 	add.w	r3, r7, #8
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7ff fd5f 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	2103      	movs	r1, #3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 f9c8 	bl	80102ac <SDMMC_GetCmdResp6>
 800ff1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff1e:	69fb      	ldr	r3, [r7, #28]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3720      	adds	r7, #32
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff36:	230d      	movs	r3, #13
 800ff38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff40:	2300      	movs	r3, #0
 800ff42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff4a:	f107 0308 	add.w	r3, r7, #8
 800ff4e:	4619      	mov	r1, r3
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff fd3d 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff5a:	210d      	movs	r1, #13
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f829 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800ff62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff64:	69fb      	ldr	r3, [r7, #28]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3720      	adds	r7, #32
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b088      	sub	sp, #32
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ff76:	2300      	movs	r3, #0
 800ff78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ff7a:	230d      	movs	r3, #13
 800ff7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff84:	2300      	movs	r3, #0
 800ff86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff8e:	f107 0308 	add.w	r3, r7, #8
 800ff92:	4619      	mov	r1, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7ff fd1b 	bl	800f9d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ff9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff9e:	210d      	movs	r1, #13
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f807 	bl	800ffb4 <SDMMC_GetCmdResp1>
 800ffa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffa8:	69fb      	ldr	r3, [r7, #28]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3720      	adds	r7, #32
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
	...

0800ffb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b088      	sub	sp, #32
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffc2:	4b70      	ldr	r3, [pc, #448]	@ (8010184 <SDMMC_GetCmdResp1+0x1d0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a70      	ldr	r2, [pc, #448]	@ (8010188 <SDMMC_GetCmdResp1+0x1d4>)
 800ffc8:	fba2 2303 	umull	r2, r3, r2, r3
 800ffcc:	0a5a      	lsrs	r2, r3, #9
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	fb02 f303 	mul.w	r3, r2, r3
 800ffd4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	1e5a      	subs	r2, r3, #1
 800ffda:	61fa      	str	r2, [r7, #28]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d102      	bne.n	800ffe6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffe0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffe4:	e0c9      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ffec:	69ba      	ldr	r2, [r7, #24]
 800ffee:	4b67      	ldr	r3, [pc, #412]	@ (801018c <SDMMC_GetCmdResp1+0x1d8>)
 800fff0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0ef      	beq.n	800ffd6 <SDMMC_GetCmdResp1+0x22>
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1ea      	bne.n	800ffd6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010004:	f003 0304 	and.w	r3, r3, #4
 8010008:	2b00      	cmp	r3, #0
 801000a:	d004      	beq.n	8010016 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2204      	movs	r2, #4
 8010010:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010012:	2304      	movs	r3, #4
 8010014:	e0b1      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	2b00      	cmp	r3, #0
 8010020:	d004      	beq.n	801002c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2201      	movs	r2, #1
 8010026:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010028:	2301      	movs	r3, #1
 801002a:	e0a6      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	4a58      	ldr	r2, [pc, #352]	@ (8010190 <SDMMC_GetCmdResp1+0x1dc>)
 8010030:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f7ff fcf6 	bl	800fa24 <SDMMC_GetCommandResponse>
 8010038:	4603      	mov	r3, r0
 801003a:	461a      	mov	r2, r3
 801003c:	7afb      	ldrb	r3, [r7, #11]
 801003e:	4293      	cmp	r3, r2
 8010040:	d001      	beq.n	8010046 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010042:	2301      	movs	r3, #1
 8010044:	e099      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010046:	2100      	movs	r1, #0
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7ff fcf8 	bl	800fa3e <SDMMC_GetResponse>
 801004e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010050:	697a      	ldr	r2, [r7, #20]
 8010052:	4b50      	ldr	r3, [pc, #320]	@ (8010194 <SDMMC_GetCmdResp1+0x1e0>)
 8010054:	4013      	ands	r3, r2
 8010056:	2b00      	cmp	r3, #0
 8010058:	d101      	bne.n	801005e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801005a:	2300      	movs	r3, #0
 801005c:	e08d      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	2b00      	cmp	r3, #0
 8010062:	da02      	bge.n	801006a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010068:	e087      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010074:	2340      	movs	r3, #64	@ 0x40
 8010076:	e080      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010082:	2380      	movs	r3, #128	@ 0x80
 8010084:	e079      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010094:	e071      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80100a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100a4:	e069      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80100b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100b4:	e061      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d002      	beq.n	80100c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80100c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80100c4:	e059      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100d4:	e051      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d002      	beq.n	80100e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100e4:	e049      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d002      	beq.n	80100f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80100f4:	e041      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010104:	e039      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010110:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010114:	e031      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010120:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010124:	e029      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010130:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010134:	e021      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010140:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010144:	e019      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010150:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010154:	e011      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801015c:	2b00      	cmp	r3, #0
 801015e:	d002      	beq.n	8010166 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010160:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010164:	e009      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f003 0308 	and.w	r3, r3, #8
 801016c:	2b00      	cmp	r3, #0
 801016e:	d002      	beq.n	8010176 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010170:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010174:	e001      	b.n	801017a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801017a:	4618      	mov	r0, r3
 801017c:	3720      	adds	r7, #32
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	24000058 	.word	0x24000058
 8010188:	10624dd3 	.word	0x10624dd3
 801018c:	00200045 	.word	0x00200045
 8010190:	002000c5 	.word	0x002000c5
 8010194:	fdffe008 	.word	0xfdffe008

08010198 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80101a0:	4b1f      	ldr	r3, [pc, #124]	@ (8010220 <SDMMC_GetCmdResp2+0x88>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a1f      	ldr	r2, [pc, #124]	@ (8010224 <SDMMC_GetCmdResp2+0x8c>)
 80101a6:	fba2 2303 	umull	r2, r3, r2, r3
 80101aa:	0a5b      	lsrs	r3, r3, #9
 80101ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101b0:	fb02 f303 	mul.w	r3, r2, r3
 80101b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	1e5a      	subs	r2, r3, #1
 80101ba:	60fa      	str	r2, [r7, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d102      	bne.n	80101c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101c4:	e026      	b.n	8010214 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d0ef      	beq.n	80101b6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1ea      	bne.n	80101b6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101e4:	f003 0304 	and.w	r3, r3, #4
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d004      	beq.n	80101f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2204      	movs	r2, #4
 80101f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101f2:	2304      	movs	r3, #4
 80101f4:	e00e      	b.n	8010214 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101fa:	f003 0301 	and.w	r3, r3, #1
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d004      	beq.n	801020c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010208:	2301      	movs	r3, #1
 801020a:	e003      	b.n	8010214 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a06      	ldr	r2, [pc, #24]	@ (8010228 <SDMMC_GetCmdResp2+0x90>)
 8010210:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	24000058 	.word	0x24000058
 8010224:	10624dd3 	.word	0x10624dd3
 8010228:	002000c5 	.word	0x002000c5

0801022c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010234:	4b1a      	ldr	r3, [pc, #104]	@ (80102a0 <SDMMC_GetCmdResp3+0x74>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a1a      	ldr	r2, [pc, #104]	@ (80102a4 <SDMMC_GetCmdResp3+0x78>)
 801023a:	fba2 2303 	umull	r2, r3, r2, r3
 801023e:	0a5b      	lsrs	r3, r3, #9
 8010240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010244:	fb02 f303 	mul.w	r3, r2, r3
 8010248:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	1e5a      	subs	r2, r3, #1
 801024e:	60fa      	str	r2, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d102      	bne.n	801025a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010254:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010258:	e01b      	b.n	8010292 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801025e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0ef      	beq.n	801024a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1ea      	bne.n	801024a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010278:	f003 0304 	and.w	r3, r3, #4
 801027c:	2b00      	cmp	r3, #0
 801027e:	d004      	beq.n	801028a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2204      	movs	r2, #4
 8010284:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010286:	2304      	movs	r3, #4
 8010288:	e003      	b.n	8010292 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4a06      	ldr	r2, [pc, #24]	@ (80102a8 <SDMMC_GetCmdResp3+0x7c>)
 801028e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3714      	adds	r7, #20
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	24000058 	.word	0x24000058
 80102a4:	10624dd3 	.word	0x10624dd3
 80102a8:	002000c5 	.word	0x002000c5

080102ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	460b      	mov	r3, r1
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102ba:	4b35      	ldr	r3, [pc, #212]	@ (8010390 <SDMMC_GetCmdResp6+0xe4>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a35      	ldr	r2, [pc, #212]	@ (8010394 <SDMMC_GetCmdResp6+0xe8>)
 80102c0:	fba2 2303 	umull	r2, r3, r2, r3
 80102c4:	0a5b      	lsrs	r3, r3, #9
 80102c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102ca:	fb02 f303 	mul.w	r3, r2, r3
 80102ce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	1e5a      	subs	r2, r3, #1
 80102d4:	61fa      	str	r2, [r7, #28]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d102      	bne.n	80102e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102de:	e052      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102e4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d0ef      	beq.n	80102d0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1ea      	bne.n	80102d0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102fe:	f003 0304 	and.w	r3, r3, #4
 8010302:	2b00      	cmp	r3, #0
 8010304:	d004      	beq.n	8010310 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2204      	movs	r2, #4
 801030a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801030c:	2304      	movs	r3, #4
 801030e:	e03a      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d004      	beq.n	8010326 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2201      	movs	r2, #1
 8010320:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010322:	2301      	movs	r3, #1
 8010324:	e02f      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f7ff fb7c 	bl	800fa24 <SDMMC_GetCommandResponse>
 801032c:	4603      	mov	r3, r0
 801032e:	461a      	mov	r2, r3
 8010330:	7afb      	ldrb	r3, [r7, #11]
 8010332:	4293      	cmp	r3, r2
 8010334:	d001      	beq.n	801033a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010336:	2301      	movs	r3, #1
 8010338:	e025      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	4a16      	ldr	r2, [pc, #88]	@ (8010398 <SDMMC_GetCmdResp6+0xec>)
 801033e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010340:	2100      	movs	r1, #0
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7ff fb7b 	bl	800fa3e <SDMMC_GetResponse>
 8010348:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010350:	2b00      	cmp	r3, #0
 8010352:	d106      	bne.n	8010362 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	0c1b      	lsrs	r3, r3, #16
 8010358:	b29a      	uxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801035e:	2300      	movs	r3, #0
 8010360:	e011      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801036c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010370:	e009      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010378:	2b00      	cmp	r3, #0
 801037a:	d002      	beq.n	8010382 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801037c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010380:	e001      	b.n	8010386 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010386:	4618      	mov	r0, r3
 8010388:	3720      	adds	r7, #32
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	24000058 	.word	0x24000058
 8010394:	10624dd3 	.word	0x10624dd3
 8010398:	002000c5 	.word	0x002000c5

0801039c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103a4:	4b22      	ldr	r3, [pc, #136]	@ (8010430 <SDMMC_GetCmdResp7+0x94>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a22      	ldr	r2, [pc, #136]	@ (8010434 <SDMMC_GetCmdResp7+0x98>)
 80103aa:	fba2 2303 	umull	r2, r3, r2, r3
 80103ae:	0a5b      	lsrs	r3, r3, #9
 80103b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103b4:	fb02 f303 	mul.w	r3, r2, r3
 80103b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	1e5a      	subs	r2, r3, #1
 80103be:	60fa      	str	r2, [r7, #12]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103c8:	e02c      	b.n	8010424 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d0ef      	beq.n	80103ba <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1ea      	bne.n	80103ba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103e8:	f003 0304 	and.w	r3, r3, #4
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d004      	beq.n	80103fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2204      	movs	r2, #4
 80103f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103f6:	2304      	movs	r3, #4
 80103f8:	e014      	b.n	8010424 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	2b00      	cmp	r3, #0
 8010404:	d004      	beq.n	8010410 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2201      	movs	r2, #1
 801040a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801040c:	2301      	movs	r3, #1
 801040e:	e009      	b.n	8010424 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2240      	movs	r2, #64	@ 0x40
 8010420:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010422:	2300      	movs	r3, #0

}
 8010424:	4618      	mov	r0, r3
 8010426:	3714      	adds	r7, #20
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr
 8010430:	24000058 	.word	0x24000058
 8010434:	10624dd3 	.word	0x10624dd3

08010438 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010440:	4b11      	ldr	r3, [pc, #68]	@ (8010488 <SDMMC_GetCmdError+0x50>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4a11      	ldr	r2, [pc, #68]	@ (801048c <SDMMC_GetCmdError+0x54>)
 8010446:	fba2 2303 	umull	r2, r3, r2, r3
 801044a:	0a5b      	lsrs	r3, r3, #9
 801044c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010450:	fb02 f303 	mul.w	r3, r2, r3
 8010454:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	1e5a      	subs	r2, r3, #1
 801045a:	60fa      	str	r2, [r7, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d102      	bne.n	8010466 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010460:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010464:	e009      	b.n	801047a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801046a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801046e:	2b00      	cmp	r3, #0
 8010470:	d0f1      	beq.n	8010456 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4a06      	ldr	r2, [pc, #24]	@ (8010490 <SDMMC_GetCmdError+0x58>)
 8010476:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	24000058 	.word	0x24000058
 801048c:	10624dd3 	.word	0x10624dd3
 8010490:	002000c5 	.word	0x002000c5

08010494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010498:	4904      	ldr	r1, [pc, #16]	@ (80104ac <MX_FATFS_Init+0x18>)
 801049a:	4805      	ldr	r0, [pc, #20]	@ (80104b0 <MX_FATFS_Init+0x1c>)
 801049c:	f002 fccc 	bl	8012e38 <FATFS_LinkDriver>
 80104a0:	4603      	mov	r3, r0
 80104a2:	461a      	mov	r2, r3
 80104a4:	4b03      	ldr	r3, [pc, #12]	@ (80104b4 <MX_FATFS_Init+0x20>)
 80104a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80104a8:	bf00      	nop
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	240006e8 	.word	0x240006e8
 80104b0:	08014a3c 	.word	0x08014a3c
 80104b4:	240006e4 	.word	0x240006e4

080104b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80104b8:	b480      	push	{r7}
 80104ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80104bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80104be:	4618      	mov	r0, r3
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	68f9      	ldr	r1, [r7, #12]
 80104de:	4806      	ldr	r0, [pc, #24]	@ (80104f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80104e0:	f7fc f95e 	bl	800c7a0 <HAL_SD_ReadBlocks_DMA>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80104ea:	2301      	movs	r3, #1
 80104ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	2400057c 	.word	0x2400057c

080104fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010508:	2300      	movs	r3, #0
 801050a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	68ba      	ldr	r2, [r7, #8]
 8010510:	68f9      	ldr	r1, [r7, #12]
 8010512:	4806      	ldr	r0, [pc, #24]	@ (801052c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010514:	f7fc f9ec 	bl	800c8f0 <HAL_SD_WriteBlocks_DMA>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010522:	7dfb      	ldrb	r3, [r7, #23]
}
 8010524:	4618      	mov	r0, r3
 8010526:	3718      	adds	r7, #24
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2400057c 	.word	0x2400057c

08010530 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010534:	4805      	ldr	r0, [pc, #20]	@ (801054c <BSP_SD_GetCardState+0x1c>)
 8010536:	f7fc ffe5 	bl	800d504 <HAL_SD_GetCardState>
 801053a:	4603      	mov	r3, r0
 801053c:	2b04      	cmp	r3, #4
 801053e:	bf14      	ite	ne
 8010540:	2301      	movne	r3, #1
 8010542:	2300      	moveq	r3, #0
 8010544:	b2db      	uxtb	r3, r3
}
 8010546:	4618      	mov	r0, r3
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	2400057c 	.word	0x2400057c

08010550 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010558:	6879      	ldr	r1, [r7, #4]
 801055a:	4803      	ldr	r0, [pc, #12]	@ (8010568 <BSP_SD_GetCardInfo+0x18>)
 801055c:	f7fc fe94 	bl	800d288 <HAL_SD_GetCardInfo>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	2400057c 	.word	0x2400057c

0801056c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010574:	f000 fad8 	bl	8010b28 <BSP_SD_WriteCpltCallback>
}
 8010578:	bf00      	nop
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010588:	f000 fada 	bl	8010b40 <BSP_SD_ReadCpltCallback>
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801059c:	f7f5 fb32 	bl	8005c04 <HAL_GetTick>
 80105a0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80105a2:	e006      	b.n	80105b2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105a4:	f7ff ffc4 	bl	8010530 <BSP_SD_GetCardState>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d101      	bne.n	80105b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	e009      	b.n	80105c6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80105b2:	f7f5 fb27 	bl	8005c04 <HAL_GetTick>
 80105b6:	4602      	mov	r2, r0
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d8f0      	bhi.n	80105a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80105c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
	...

080105d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80105da:	4b0b      	ldr	r3, [pc, #44]	@ (8010608 <SD_CheckStatus+0x38>)
 80105dc:	2201      	movs	r2, #1
 80105de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80105e0:	f7ff ffa6 	bl	8010530 <BSP_SD_GetCardState>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d107      	bne.n	80105fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80105ea:	4b07      	ldr	r3, [pc, #28]	@ (8010608 <SD_CheckStatus+0x38>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	f023 0301 	bic.w	r3, r3, #1
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	4b04      	ldr	r3, [pc, #16]	@ (8010608 <SD_CheckStatus+0x38>)
 80105f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80105fa:	4b03      	ldr	r3, [pc, #12]	@ (8010608 <SD_CheckStatus+0x38>)
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	b2db      	uxtb	r3, r3
}
 8010600:	4618      	mov	r0, r3
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	24000065 	.word	0x24000065

0801060c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8010616:	79fb      	ldrb	r3, [r7, #7]
 8010618:	4618      	mov	r0, r3
 801061a:	f7ff ffd9 	bl	80105d0 <SD_CheckStatus>
 801061e:	4603      	mov	r3, r0
 8010620:	461a      	mov	r2, r3
 8010622:	4b04      	ldr	r3, [pc, #16]	@ (8010634 <SD_initialize+0x28>)
 8010624:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8010626:	4b03      	ldr	r3, [pc, #12]	@ (8010634 <SD_initialize+0x28>)
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	b2db      	uxtb	r3, r3
}
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	24000065 	.word	0x24000065

08010638 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	4603      	mov	r3, r0
 8010640:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010642:	79fb      	ldrb	r3, [r7, #7]
 8010644:	4618      	mov	r0, r3
 8010646:	f7ff ffc3 	bl	80105d0 <SD_CheckStatus>
 801064a:	4603      	mov	r3, r0
}
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b090      	sub	sp, #64	@ 0x40
 8010658:	af00      	add	r7, sp, #0
 801065a:	60b9      	str	r1, [r7, #8]
 801065c:	607a      	str	r2, [r7, #4]
 801065e:	603b      	str	r3, [r7, #0]
 8010660:	4603      	mov	r3, r0
 8010662:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010664:	2301      	movs	r3, #1
 8010666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801066a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801066e:	f7ff ff91 	bl	8010594 <SD_CheckStatusWithTimeout>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	da02      	bge.n	801067e <SD_read+0x2a>
  {
    return res;
 8010678:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801067c:	e0ea      	b.n	8010854 <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	f003 0303 	and.w	r3, r3, #3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d16d      	bne.n	8010764 <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	6879      	ldr	r1, [r7, #4]
 801068c:	68b8      	ldr	r0, [r7, #8]
 801068e:	f7ff ff1b 	bl	80104c8 <BSP_SD_ReadBlocks_DMA>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	f040 80db 	bne.w	8010850 <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801069a:	4b70      	ldr	r3, [pc, #448]	@ (801085c <SD_read+0x208>)
 801069c:	2200      	movs	r2, #0
 801069e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80106a0:	f7f5 fab0 	bl	8005c04 <HAL_GetTick>
 80106a4:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80106a6:	bf00      	nop
 80106a8:	4b6c      	ldr	r3, [pc, #432]	@ (801085c <SD_read+0x208>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d108      	bne.n	80106c2 <SD_read+0x6e>
 80106b0:	f7f5 faa8 	bl	8005c04 <HAL_GetTick>
 80106b4:	4602      	mov	r2, r0
 80106b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 80106be:	4293      	cmp	r3, r2
 80106c0:	d9f2      	bls.n	80106a8 <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80106c2:	4b66      	ldr	r3, [pc, #408]	@ (801085c <SD_read+0x208>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <SD_read+0x7e>
      {
        res = RES_ERROR;
 80106ca:	2301      	movs	r3, #1
 80106cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80106d0:	e0be      	b.n	8010850 <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 80106d2:	4b62      	ldr	r3, [pc, #392]	@ (801085c <SD_read+0x208>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80106d8:	f7f5 fa94 	bl	8005c04 <HAL_GetTick>
 80106dc:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80106de:	e037      	b.n	8010750 <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80106e0:	f7ff ff26 	bl	8010530 <BSP_SD_GetCardState>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d132      	bne.n	8010750 <SD_read+0xfc>
          {
            res = RES_OK;
 80106ea:	2300      	movs	r3, #0
 80106ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	f023 031f 	bic.w	r3, r3, #31
 80106f6:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 80106f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	0251      	lsls	r1, r2, #9
 80106fe:	68b8      	ldr	r0, [r7, #8]
 8010700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010702:	1a82      	subs	r2, r0, r2
 8010704:	440a      	add	r2, r1
 8010706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010708:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 801070a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070c:	2b00      	cmp	r3, #0
 801070e:	dd1d      	ble.n	801074c <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010712:	f003 021f 	and.w	r2, r3, #31
 8010716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010718:	4413      	add	r3, r2
 801071a:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801071c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 8010720:	f3bf 8f4f 	dsb	sy
}
 8010724:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010726:	4a4e      	ldr	r2, [pc, #312]	@ (8010860 <SD_read+0x20c>)
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801072e:	6a3b      	ldr	r3, [r7, #32]
 8010730:	3320      	adds	r3, #32
 8010732:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010736:	3b20      	subs	r3, #32
 8010738:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 801073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073c:	2b00      	cmp	r3, #0
 801073e:	dcf2      	bgt.n	8010726 <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 8010740:	f3bf 8f4f 	dsb	sy
}
 8010744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010746:	f3bf 8f6f 	isb	sy
}
 801074a:	bf00      	nop
}
 801074c:	bf00      	nop
#endif
            break;
 801074e:	e07f      	b.n	8010850 <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010750:	f7f5 fa58 	bl	8005c04 <HAL_GetTick>
 8010754:	4602      	mov	r2, r0
 8010756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801075e:	4293      	cmp	r3, r2
 8010760:	d9be      	bls.n	80106e0 <SD_read+0x8c>
 8010762:	e075      	b.n	8010850 <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8010764:	2300      	movs	r3, #0
 8010766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010768:	e061      	b.n	801082e <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	607a      	str	r2, [r7, #4]
 8010770:	2201      	movs	r2, #1
 8010772:	4619      	mov	r1, r3
 8010774:	483b      	ldr	r0, [pc, #236]	@ (8010864 <SD_read+0x210>)
 8010776:	f7ff fea7 	bl	80104c8 <BSP_SD_ReadBlocks_DMA>
 801077a:	4603      	mov	r3, r0
 801077c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 8010780:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010784:	2b00      	cmp	r3, #0
 8010786:	d157      	bne.n	8010838 <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8010788:	f7f5 fa3c 	bl	8005c04 <HAL_GetTick>
 801078c:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801078e:	bf00      	nop
 8010790:	4b32      	ldr	r3, [pc, #200]	@ (801085c <SD_read+0x208>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d108      	bne.n	80107aa <SD_read+0x156>
 8010798:	f7f5 fa34 	bl	8005c04 <HAL_GetTick>
 801079c:	4602      	mov	r2, r0
 801079e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d9f2      	bls.n	8010790 <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 80107aa:	4b2c      	ldr	r3, [pc, #176]	@ (801085c <SD_read+0x208>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d103      	bne.n	80107ba <SD_read+0x166>
          {
            res = RES_ERROR;
 80107b2:	2301      	movs	r3, #1
 80107b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80107b8:	e03f      	b.n	801083a <SD_read+0x1e6>
          }
          ReadStatus = 0;
 80107ba:	4b28      	ldr	r3, [pc, #160]	@ (801085c <SD_read+0x208>)
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	4b28      	ldr	r3, [pc, #160]	@ (8010864 <SD_read+0x210>)
 80107c2:	61fb      	str	r3, [r7, #28]
 80107c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80107c8:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	dd1d      	ble.n	801080c <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	f003 021f 	and.w	r2, r3, #31
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	4413      	add	r3, r2
 80107da:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80107e0:	f3bf 8f4f 	dsb	sy
}
 80107e4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80107e6:	4a1e      	ldr	r2, [pc, #120]	@ (8010860 <SD_read+0x20c>)
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	3320      	adds	r3, #32
 80107f2:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	3b20      	subs	r3, #32
 80107f8:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dcf2      	bgt.n	80107e6 <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 8010800:	f3bf 8f4f 	dsb	sy
}
 8010804:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010806:	f3bf 8f6f 	isb	sy
}
 801080a:	bf00      	nop
}
 801080c:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	4a14      	ldr	r2, [pc, #80]	@ (8010864 <SD_read+0x210>)
 8010812:	4618      	mov	r0, r3
 8010814:	4611      	mov	r1, r2
 8010816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801081a:	461a      	mov	r2, r3
 801081c:	f003 f8ff 	bl	8013a1e <memcpy>
          buff += BLOCKSIZE;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010826:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8010828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801082a:	3301      	adds	r3, #1
 801082c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	429a      	cmp	r2, r3
 8010834:	d899      	bhi.n	801076a <SD_read+0x116>
 8010836:	e000      	b.n	801083a <SD_read+0x1e6>
        }
        else
        {
          break;
 8010838:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801083a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	429a      	cmp	r2, r3
 8010840:	d106      	bne.n	8010850 <SD_read+0x1fc>
 8010842:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010846:	2b00      	cmp	r3, #0
 8010848:	d102      	bne.n	8010850 <SD_read+0x1fc>
        res = RES_OK;
 801084a:	2300      	movs	r3, #0
 801084c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 8010850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010854:	4618      	mov	r0, r3
 8010856:	3740      	adds	r7, #64	@ 0x40
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	24000d64 	.word	0x24000d64
 8010860:	e000ed00 	.word	0xe000ed00
 8010864:	24000b60 	.word	0x24000b60

08010868 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b090      	sub	sp, #64	@ 0x40
 801086c:	af00      	add	r7, sp, #0
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010878:	2301      	movs	r3, #1
 801087a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801087e:	4b7b      	ldr	r3, [pc, #492]	@ (8010a6c <SD_write+0x204>)
 8010880:	2200      	movs	r2, #0
 8010882:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010884:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010888:	f7ff fe84 	bl	8010594 <SD_CheckStatusWithTimeout>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	da02      	bge.n	8010898 <SD_write+0x30>
  {
    return res;
 8010892:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010896:	e0e5      	b.n	8010a64 <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	f003 0303 	and.w	r3, r3, #3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d16a      	bne.n	8010978 <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	f023 031f 	bic.w	r3, r3, #31
 80108a8:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 80108aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	0251      	lsls	r1, r2, #9
 80108b0:	68b8      	ldr	r0, [r7, #8]
 80108b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108b4:	1a82      	subs	r2, r0, r2
 80108b6:	440a      	add	r2, r1
 80108b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108ba:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 80108bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dd1d      	ble.n	80108fe <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80108c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c4:	f003 021f 	and.w	r2, r3, #31
 80108c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ca:	4413      	add	r3, r2
 80108cc:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 80108d2:	f3bf 8f4f 	dsb	sy
}
 80108d6:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80108d8:	4a65      	ldr	r2, [pc, #404]	@ (8010a70 <SD_write+0x208>)
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	3320      	adds	r3, #32
 80108e4:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80108e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108e8:	3b20      	subs	r3, #32
 80108ea:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 80108ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	dcf2      	bgt.n	80108d8 <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 80108f2:	f3bf 8f4f 	dsb	sy
}
 80108f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80108f8:	f3bf 8f6f 	isb	sy
}
 80108fc:	bf00      	nop
}
 80108fe:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	6879      	ldr	r1, [r7, #4]
 8010904:	68b8      	ldr	r0, [r7, #8]
 8010906:	f7ff fdf9 	bl	80104fc <BSP_SD_WriteBlocks_DMA>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	f040 80a7 	bne.w	8010a60 <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010912:	f7f5 f977 	bl	8005c04 <HAL_GetTick>
 8010916:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010918:	bf00      	nop
 801091a:	4b54      	ldr	r3, [pc, #336]	@ (8010a6c <SD_write+0x204>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d108      	bne.n	8010934 <SD_write+0xcc>
 8010922:	f7f5 f96f 	bl	8005c04 <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010930:	4293      	cmp	r3, r2
 8010932:	d9f2      	bls.n	801091a <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010934:	4b4d      	ldr	r3, [pc, #308]	@ (8010a6c <SD_write+0x204>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d103      	bne.n	8010944 <SD_write+0xdc>
      {
        res = RES_ERROR;
 801093c:	2301      	movs	r3, #1
 801093e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010942:	e08d      	b.n	8010a60 <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 8010944:	4b49      	ldr	r3, [pc, #292]	@ (8010a6c <SD_write+0x204>)
 8010946:	2200      	movs	r2, #0
 8010948:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801094a:	f7f5 f95b 	bl	8005c04 <HAL_GetTick>
 801094e:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010950:	e008      	b.n	8010964 <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010952:	f7ff fded 	bl	8010530 <BSP_SD_GetCardState>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d103      	bne.n	8010964 <SD_write+0xfc>
          {
            res = RES_OK;
 801095c:	2300      	movs	r3, #0
 801095e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8010962:	e07d      	b.n	8010a60 <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010964:	f7f5 f94e 	bl	8005c04 <HAL_GetTick>
 8010968:	4602      	mov	r2, r0
 801096a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010972:	4293      	cmp	r3, r2
 8010974:	d9ed      	bls.n	8010952 <SD_write+0xea>
 8010976:	e073      	b.n	8010a60 <SD_write+0x1f8>
 8010978:	4b3e      	ldr	r3, [pc, #248]	@ (8010a74 <SD_write+0x20c>)
 801097a:	61fb      	str	r3, [r7, #28]
 801097c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010980:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	2b00      	cmp	r3, #0
 8010986:	dd1d      	ble.n	80109c4 <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	f003 021f 	and.w	r2, r3, #31
 801098e:	69bb      	ldr	r3, [r7, #24]
 8010990:	4413      	add	r3, r2
 8010992:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8010998:	f3bf 8f4f 	dsb	sy
}
 801099c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801099e:	4a34      	ldr	r2, [pc, #208]	@ (8010a70 <SD_write+0x208>)
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	3320      	adds	r3, #32
 80109aa:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	3b20      	subs	r3, #32
 80109b0:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dcf2      	bgt.n	801099e <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 80109b8:	f3bf 8f4f 	dsb	sy
}
 80109bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80109be:	f3bf 8f6f 	isb	sy
}
 80109c2:	bf00      	nop
}
 80109c4:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80109c6:	2300      	movs	r3, #0
 80109c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109ca:	e036      	b.n	8010a3a <SD_write+0x1d2>
      {
        WriteStatus = 0;
 80109cc:	4b27      	ldr	r3, [pc, #156]	@ (8010a6c <SD_write+0x204>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 80109d2:	4a28      	ldr	r2, [pc, #160]	@ (8010a74 <SD_write+0x20c>)
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	4610      	mov	r0, r2
 80109d8:	4619      	mov	r1, r3
 80109da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109de:	461a      	mov	r2, r3
 80109e0:	f003 f81d 	bl	8013a1e <memcpy>
        buff += BLOCKSIZE;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80109ea:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	607a      	str	r2, [r7, #4]
 80109f2:	2201      	movs	r2, #1
 80109f4:	4619      	mov	r1, r3
 80109f6:	481f      	ldr	r0, [pc, #124]	@ (8010a74 <SD_write+0x20c>)
 80109f8:	f7ff fd80 	bl	80104fc <BSP_SD_WriteBlocks_DMA>
 80109fc:	4603      	mov	r3, r0
 80109fe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 8010a02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d11c      	bne.n	8010a44 <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8010a0a:	f7f5 f8fb 	bl	8005c04 <HAL_GetTick>
 8010a0e:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010a10:	bf00      	nop
 8010a12:	4b16      	ldr	r3, [pc, #88]	@ (8010a6c <SD_write+0x204>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d108      	bne.n	8010a2c <SD_write+0x1c4>
 8010a1a:	f7f5 f8f3 	bl	8005c04 <HAL_GetTick>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d9f2      	bls.n	8010a12 <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010a6c <SD_write+0x204>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d009      	beq.n	8010a48 <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 8010a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a36:	3301      	adds	r3, #1
 8010a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d8c4      	bhi.n	80109cc <SD_write+0x164>
 8010a42:	e002      	b.n	8010a4a <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 8010a44:	bf00      	nop
 8010a46:	e000      	b.n	8010a4a <SD_write+0x1e2>
            break;
 8010a48:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4c:	683a      	ldr	r2, [r7, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d106      	bne.n	8010a60 <SD_write+0x1f8>
 8010a52:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d102      	bne.n	8010a60 <SD_write+0x1f8>
        res = RES_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 8010a60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3740      	adds	r7, #64	@ 0x40
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	24000d60 	.word	0x24000d60
 8010a70:	e000ed00 	.word	0xe000ed00
 8010a74:	24000b60 	.word	0x24000b60

08010a78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08c      	sub	sp, #48	@ 0x30
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	603a      	str	r2, [r7, #0]
 8010a82:	71fb      	strb	r3, [r7, #7]
 8010a84:	460b      	mov	r3, r1
 8010a86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010a8e:	4b25      	ldr	r3, [pc, #148]	@ (8010b24 <SD_ioctl+0xac>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d001      	beq.n	8010aa0 <SD_ioctl+0x28>
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	e03c      	b.n	8010b1a <SD_ioctl+0xa2>

  switch (cmd)
 8010aa0:	79bb      	ldrb	r3, [r7, #6]
 8010aa2:	2b03      	cmp	r3, #3
 8010aa4:	d834      	bhi.n	8010b10 <SD_ioctl+0x98>
 8010aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8010aac <SD_ioctl+0x34>)
 8010aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aac:	08010abd 	.word	0x08010abd
 8010ab0:	08010ac5 	.word	0x08010ac5
 8010ab4:	08010add 	.word	0x08010add
 8010ab8:	08010af7 	.word	0x08010af7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010abc:	2300      	movs	r3, #0
 8010abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ac2:	e028      	b.n	8010b16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ac4:	f107 0308 	add.w	r3, r7, #8
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff fd41 	bl	8010550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ace:	6a3a      	ldr	r2, [r7, #32]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ada:	e01c      	b.n	8010b16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010adc:	f107 0308 	add.w	r3, r7, #8
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7ff fd35 	bl	8010550 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010aee:	2300      	movs	r3, #0
 8010af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010af4:	e00f      	b.n	8010b16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010af6:	f107 0308 	add.w	r3, r7, #8
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7ff fd28 	bl	8010550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b02:	0a5a      	lsrs	r2, r3, #9
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010b0e:	e002      	b.n	8010b16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010b10:	2304      	movs	r3, #4
 8010b12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010b16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3730      	adds	r7, #48	@ 0x30
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	24000065 	.word	0x24000065

08010b28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010b2c:	4b03      	ldr	r3, [pc, #12]	@ (8010b3c <BSP_SD_WriteCpltCallback+0x14>)
 8010b2e:	2201      	movs	r2, #1
 8010b30:	601a      	str	r2, [r3, #0]
}
 8010b32:	bf00      	nop
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	24000d60 	.word	0x24000d60

08010b40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010b40:	b480      	push	{r7}
 8010b42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010b44:	4b03      	ldr	r3, [pc, #12]	@ (8010b54 <BSP_SD_ReadCpltCallback+0x14>)
 8010b46:	2201      	movs	r2, #1
 8010b48:	601a      	str	r2, [r3, #0]
}
 8010b4a:	bf00      	nop
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	24000d64 	.word	0x24000d64

08010b58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010b62:	79fb      	ldrb	r3, [r7, #7]
 8010b64:	4a08      	ldr	r2, [pc, #32]	@ (8010b88 <disk_status+0x30>)
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	79fa      	ldrb	r2, [r7, #7]
 8010b70:	4905      	ldr	r1, [pc, #20]	@ (8010b88 <disk_status+0x30>)
 8010b72:	440a      	add	r2, r1
 8010b74:	7a12      	ldrb	r2, [r2, #8]
 8010b76:	4610      	mov	r0, r2
 8010b78:	4798      	blx	r3
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	24000d90 	.word	0x24000d90

08010b8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	4603      	mov	r3, r0
 8010b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010b96:	2300      	movs	r3, #0
 8010b98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8010bd8 <disk_initialize+0x4c>)
 8010b9e:	5cd3      	ldrb	r3, [r2, r3]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d114      	bne.n	8010bce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010ba4:	79fb      	ldrb	r3, [r7, #7]
 8010ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8010bd8 <disk_initialize+0x4c>)
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	4413      	add	r3, r2
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	79fa      	ldrb	r2, [r7, #7]
 8010bb2:	4909      	ldr	r1, [pc, #36]	@ (8010bd8 <disk_initialize+0x4c>)
 8010bb4:	440a      	add	r2, r1
 8010bb6:	7a12      	ldrb	r2, [r2, #8]
 8010bb8:	4610      	mov	r0, r2
 8010bba:	4798      	blx	r3
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d103      	bne.n	8010bce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	4a03      	ldr	r2, [pc, #12]	@ (8010bd8 <disk_initialize+0x4c>)
 8010bca:	2101      	movs	r1, #1
 8010bcc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3710      	adds	r7, #16
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	24000d90 	.word	0x24000d90

08010bdc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010bdc:	b590      	push	{r4, r7, lr}
 8010bde:	b087      	sub	sp, #28
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
 8010be6:	603b      	str	r3, [r7, #0]
 8010be8:	4603      	mov	r3, r0
 8010bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010bec:	7bfb      	ldrb	r3, [r7, #15]
 8010bee:	4a0a      	ldr	r2, [pc, #40]	@ (8010c18 <disk_read+0x3c>)
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	689c      	ldr	r4, [r3, #8]
 8010bf8:	7bfb      	ldrb	r3, [r7, #15]
 8010bfa:	4a07      	ldr	r2, [pc, #28]	@ (8010c18 <disk_read+0x3c>)
 8010bfc:	4413      	add	r3, r2
 8010bfe:	7a18      	ldrb	r0, [r3, #8]
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	68b9      	ldr	r1, [r7, #8]
 8010c06:	47a0      	blx	r4
 8010c08:	4603      	mov	r3, r0
 8010c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	371c      	adds	r7, #28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd90      	pop	{r4, r7, pc}
 8010c16:	bf00      	nop
 8010c18:	24000d90 	.word	0x24000d90

08010c1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010c1c:	b590      	push	{r4, r7, lr}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60b9      	str	r1, [r7, #8]
 8010c24:	607a      	str	r2, [r7, #4]
 8010c26:	603b      	str	r3, [r7, #0]
 8010c28:	4603      	mov	r3, r0
 8010c2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8010c58 <disk_write+0x3c>)
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	68dc      	ldr	r4, [r3, #12]
 8010c38:	7bfb      	ldrb	r3, [r7, #15]
 8010c3a:	4a07      	ldr	r2, [pc, #28]	@ (8010c58 <disk_write+0x3c>)
 8010c3c:	4413      	add	r3, r2
 8010c3e:	7a18      	ldrb	r0, [r3, #8]
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	68b9      	ldr	r1, [r7, #8]
 8010c46:	47a0      	blx	r4
 8010c48:	4603      	mov	r3, r0
 8010c4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	371c      	adds	r7, #28
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd90      	pop	{r4, r7, pc}
 8010c56:	bf00      	nop
 8010c58:	24000d90 	.word	0x24000d90

08010c5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	603a      	str	r2, [r7, #0]
 8010c66:	71fb      	strb	r3, [r7, #7]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010c6c:	79fb      	ldrb	r3, [r7, #7]
 8010c6e:	4a09      	ldr	r2, [pc, #36]	@ (8010c94 <disk_ioctl+0x38>)
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	79fa      	ldrb	r2, [r7, #7]
 8010c7a:	4906      	ldr	r1, [pc, #24]	@ (8010c94 <disk_ioctl+0x38>)
 8010c7c:	440a      	add	r2, r1
 8010c7e:	7a10      	ldrb	r0, [r2, #8]
 8010c80:	79b9      	ldrb	r1, [r7, #6]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4798      	blx	r3
 8010c86:	4603      	mov	r3, r0
 8010c88:	73fb      	strb	r3, [r7, #15]
  return res;
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	24000d90 	.word	0x24000d90

08010c98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010ca8:	89fb      	ldrh	r3, [r7, #14]
 8010caa:	021b      	lsls	r3, r3, #8
 8010cac:	b21a      	sxth	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	b21b      	sxth	r3, r3
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	b21b      	sxth	r3, r3
 8010cb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010cba:	89fb      	ldrh	r3, [r7, #14]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3714      	adds	r7, #20
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3303      	adds	r3, #3
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	021b      	lsls	r3, r3, #8
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	3202      	adds	r2, #2
 8010ce0:	7812      	ldrb	r2, [r2, #0]
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	021b      	lsls	r3, r3, #8
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	3201      	adds	r2, #1
 8010cee:	7812      	ldrb	r2, [r2, #0]
 8010cf0:	4313      	orrs	r3, r2
 8010cf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	021b      	lsls	r3, r3, #8
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	7812      	ldrb	r2, [r2, #0]
 8010cfc:	4313      	orrs	r3, r2
 8010cfe:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d00:	68fb      	ldr	r3, [r7, #12]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr

08010d0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b083      	sub	sp, #12
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	887a      	ldrh	r2, [r7, #2]
 8010d22:	b2d2      	uxtb	r2, r2
 8010d24:	701a      	strb	r2, [r3, #0]
 8010d26:	887b      	ldrh	r3, [r7, #2]
 8010d28:	0a1b      	lsrs	r3, r3, #8
 8010d2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	1c5a      	adds	r2, r3, #1
 8010d30:	607a      	str	r2, [r7, #4]
 8010d32:	887a      	ldrh	r2, [r7, #2]
 8010d34:	b2d2      	uxtb	r2, r2
 8010d36:	701a      	strb	r2, [r3, #0]
}
 8010d38:	bf00      	nop
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	1c5a      	adds	r2, r3, #1
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	683a      	ldr	r2, [r7, #0]
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	0a1b      	lsrs	r3, r3, #8
 8010d5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	607a      	str	r2, [r7, #4]
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	b2d2      	uxtb	r2, r2
 8010d6a:	701a      	strb	r2, [r3, #0]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	0a1b      	lsrs	r3, r3, #8
 8010d70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	1c5a      	adds	r2, r3, #1
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	683a      	ldr	r2, [r7, #0]
 8010d7a:	b2d2      	uxtb	r2, r2
 8010d7c:	701a      	strb	r2, [r3, #0]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	0a1b      	lsrs	r3, r3, #8
 8010d82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	1c5a      	adds	r2, r3, #1
 8010d88:	607a      	str	r2, [r7, #4]
 8010d8a:	683a      	ldr	r2, [r7, #0]
 8010d8c:	b2d2      	uxtb	r2, r2
 8010d8e:	701a      	strb	r2, [r3, #0]
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00d      	beq.n	8010dd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010db6:	693a      	ldr	r2, [r7, #16]
 8010db8:	1c53      	adds	r3, r2, #1
 8010dba:	613b      	str	r3, [r7, #16]
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	1c59      	adds	r1, r3, #1
 8010dc0:	6179      	str	r1, [r7, #20]
 8010dc2:	7812      	ldrb	r2, [r2, #0]
 8010dc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	607b      	str	r3, [r7, #4]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1f1      	bne.n	8010db6 <mem_cpy+0x1a>
	}
}
 8010dd2:	bf00      	nop
 8010dd4:	371c      	adds	r7, #28
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr

08010dde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010dde:	b480      	push	{r7}
 8010de0:	b087      	sub	sp, #28
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	60f8      	str	r0, [r7, #12]
 8010de6:	60b9      	str	r1, [r7, #8]
 8010de8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	1c5a      	adds	r2, r3, #1
 8010df2:	617a      	str	r2, [r7, #20]
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	b2d2      	uxtb	r2, r2
 8010df8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	607b      	str	r3, [r7, #4]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1f3      	bne.n	8010dee <mem_set+0x10>
}
 8010e06:	bf00      	nop
 8010e08:	bf00      	nop
 8010e0a:	371c      	adds	r7, #28
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010e14:	b480      	push	{r7}
 8010e16:	b089      	sub	sp, #36	@ 0x24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	61fa      	str	r2, [r7, #28]
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	4619      	mov	r1, r3
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	1c5a      	adds	r2, r3, #1
 8010e3a:	61ba      	str	r2, [r7, #24]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	1acb      	subs	r3, r1, r3
 8010e40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	3b01      	subs	r3, #1
 8010e46:	607b      	str	r3, [r7, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d002      	beq.n	8010e54 <mem_cmp+0x40>
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d0eb      	beq.n	8010e2c <mem_cmp+0x18>

	return r;
 8010e54:	697b      	ldr	r3, [r7, #20]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3724      	adds	r7, #36	@ 0x24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010e62:	b480      	push	{r7}
 8010e64:	b083      	sub	sp, #12
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010e6c:	e002      	b.n	8010e74 <chk_chr+0x12>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3301      	adds	r3, #1
 8010e72:	607b      	str	r3, [r7, #4]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d005      	beq.n	8010e88 <chk_chr+0x26>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	461a      	mov	r2, r3
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d1f2      	bne.n	8010e6e <chk_chr+0xc>
	return *str;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	60bb      	str	r3, [r7, #8]
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	60fb      	str	r3, [r7, #12]
 8010eaa:	e029      	b.n	8010f00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010eac:	4a27      	ldr	r2, [pc, #156]	@ (8010f4c <chk_lock+0xb4>)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	011b      	lsls	r3, r3, #4
 8010eb2:	4413      	add	r3, r2
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d01d      	beq.n	8010ef6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010eba:	4a24      	ldr	r2, [pc, #144]	@ (8010f4c <chk_lock+0xb4>)
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	011b      	lsls	r3, r3, #4
 8010ec0:	4413      	add	r3, r2
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d116      	bne.n	8010efa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8010f4c <chk_lock+0xb4>)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	011b      	lsls	r3, r3, #4
 8010ed2:	4413      	add	r3, r2
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d10c      	bne.n	8010efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8010f4c <chk_lock+0xb4>)
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	011b      	lsls	r3, r3, #4
 8010ee6:	4413      	add	r3, r2
 8010ee8:	3308      	adds	r3, #8
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d102      	bne.n	8010efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ef4:	e007      	b.n	8010f06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3301      	adds	r3, #1
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d9d2      	bls.n	8010eac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d109      	bne.n	8010f20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d102      	bne.n	8010f18 <chk_lock+0x80>
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2b02      	cmp	r3, #2
 8010f16:	d101      	bne.n	8010f1c <chk_lock+0x84>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e010      	b.n	8010f3e <chk_lock+0xa6>
 8010f1c:	2312      	movs	r3, #18
 8010f1e:	e00e      	b.n	8010f3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d108      	bne.n	8010f38 <chk_lock+0xa0>
 8010f26:	4a09      	ldr	r2, [pc, #36]	@ (8010f4c <chk_lock+0xb4>)
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	011b      	lsls	r3, r3, #4
 8010f2c:	4413      	add	r3, r2
 8010f2e:	330c      	adds	r3, #12
 8010f30:	881b      	ldrh	r3, [r3, #0]
 8010f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f36:	d101      	bne.n	8010f3c <chk_lock+0xa4>
 8010f38:	2310      	movs	r3, #16
 8010f3a:	e000      	b.n	8010f3e <chk_lock+0xa6>
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3714      	adds	r7, #20
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop
 8010f4c:	24000d70 	.word	0x24000d70

08010f50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010f56:	2300      	movs	r3, #0
 8010f58:	607b      	str	r3, [r7, #4]
 8010f5a:	e002      	b.n	8010f62 <enq_lock+0x12>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	607b      	str	r3, [r7, #4]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d806      	bhi.n	8010f76 <enq_lock+0x26>
 8010f68:	4a09      	ldr	r2, [pc, #36]	@ (8010f90 <enq_lock+0x40>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	011b      	lsls	r3, r3, #4
 8010f6e:	4413      	add	r3, r2
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1f2      	bne.n	8010f5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	bf14      	ite	ne
 8010f7c:	2301      	movne	r3, #1
 8010f7e:	2300      	moveq	r3, #0
 8010f80:	b2db      	uxtb	r3, r3
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	24000d70 	.word	0x24000d70

08010f94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60fb      	str	r3, [r7, #12]
 8010fa2:	e01f      	b.n	8010fe4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010fa4:	4a41      	ldr	r2, [pc, #260]	@ (80110ac <inc_lock+0x118>)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	011b      	lsls	r3, r3, #4
 8010faa:	4413      	add	r3, r2
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d113      	bne.n	8010fde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80110ac <inc_lock+0x118>)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	011b      	lsls	r3, r3, #4
 8010fbc:	4413      	add	r3, r2
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d109      	bne.n	8010fde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010fca:	4a38      	ldr	r2, [pc, #224]	@ (80110ac <inc_lock+0x118>)
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	011b      	lsls	r3, r3, #4
 8010fd0:	4413      	add	r3, r2
 8010fd2:	3308      	adds	r3, #8
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d006      	beq.n	8010fec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d9dc      	bls.n	8010fa4 <inc_lock+0x10>
 8010fea:	e000      	b.n	8010fee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010fec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d132      	bne.n	801105a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	60fb      	str	r3, [r7, #12]
 8010ff8:	e002      	b.n	8011000 <inc_lock+0x6c>
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	60fb      	str	r3, [r7, #12]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d806      	bhi.n	8011014 <inc_lock+0x80>
 8011006:	4a29      	ldr	r2, [pc, #164]	@ (80110ac <inc_lock+0x118>)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	011b      	lsls	r3, r3, #4
 801100c:	4413      	add	r3, r2
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1f2      	bne.n	8010ffa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2b02      	cmp	r3, #2
 8011018:	d101      	bne.n	801101e <inc_lock+0x8a>
 801101a:	2300      	movs	r3, #0
 801101c:	e040      	b.n	80110a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	4922      	ldr	r1, [pc, #136]	@ (80110ac <inc_lock+0x118>)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	011b      	lsls	r3, r3, #4
 8011028:	440b      	add	r3, r1
 801102a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689a      	ldr	r2, [r3, #8]
 8011030:	491e      	ldr	r1, [pc, #120]	@ (80110ac <inc_lock+0x118>)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	011b      	lsls	r3, r3, #4
 8011036:	440b      	add	r3, r1
 8011038:	3304      	adds	r3, #4
 801103a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	695a      	ldr	r2, [r3, #20]
 8011040:	491a      	ldr	r1, [pc, #104]	@ (80110ac <inc_lock+0x118>)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	011b      	lsls	r3, r3, #4
 8011046:	440b      	add	r3, r1
 8011048:	3308      	adds	r3, #8
 801104a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801104c:	4a17      	ldr	r2, [pc, #92]	@ (80110ac <inc_lock+0x118>)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	011b      	lsls	r3, r3, #4
 8011052:	4413      	add	r3, r2
 8011054:	330c      	adds	r3, #12
 8011056:	2200      	movs	r2, #0
 8011058:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d009      	beq.n	8011074 <inc_lock+0xe0>
 8011060:	4a12      	ldr	r2, [pc, #72]	@ (80110ac <inc_lock+0x118>)
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	011b      	lsls	r3, r3, #4
 8011066:	4413      	add	r3, r2
 8011068:	330c      	adds	r3, #12
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <inc_lock+0xe0>
 8011070:	2300      	movs	r3, #0
 8011072:	e015      	b.n	80110a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <inc_lock+0xf8>
 801107a:	4a0c      	ldr	r2, [pc, #48]	@ (80110ac <inc_lock+0x118>)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	011b      	lsls	r3, r3, #4
 8011080:	4413      	add	r3, r2
 8011082:	330c      	adds	r3, #12
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	3301      	adds	r3, #1
 8011088:	b29a      	uxth	r2, r3
 801108a:	e001      	b.n	8011090 <inc_lock+0xfc>
 801108c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011090:	4906      	ldr	r1, [pc, #24]	@ (80110ac <inc_lock+0x118>)
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	011b      	lsls	r3, r3, #4
 8011096:	440b      	add	r3, r1
 8011098:	330c      	adds	r3, #12
 801109a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	3301      	adds	r3, #1
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	24000d70 	.word	0x24000d70

080110b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	3b01      	subs	r3, #1
 80110bc:	607b      	str	r3, [r7, #4]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d825      	bhi.n	8011110 <dec_lock+0x60>
		n = Files[i].ctr;
 80110c4:	4a17      	ldr	r2, [pc, #92]	@ (8011124 <dec_lock+0x74>)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	011b      	lsls	r3, r3, #4
 80110ca:	4413      	add	r3, r2
 80110cc:	330c      	adds	r3, #12
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80110d2:	89fb      	ldrh	r3, [r7, #14]
 80110d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110d8:	d101      	bne.n	80110de <dec_lock+0x2e>
 80110da:	2300      	movs	r3, #0
 80110dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80110de:	89fb      	ldrh	r3, [r7, #14]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <dec_lock+0x3a>
 80110e4:	89fb      	ldrh	r3, [r7, #14]
 80110e6:	3b01      	subs	r3, #1
 80110e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80110ea:	4a0e      	ldr	r2, [pc, #56]	@ (8011124 <dec_lock+0x74>)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	011b      	lsls	r3, r3, #4
 80110f0:	4413      	add	r3, r2
 80110f2:	330c      	adds	r3, #12
 80110f4:	89fa      	ldrh	r2, [r7, #14]
 80110f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80110f8:	89fb      	ldrh	r3, [r7, #14]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d105      	bne.n	801110a <dec_lock+0x5a>
 80110fe:	4a09      	ldr	r2, [pc, #36]	@ (8011124 <dec_lock+0x74>)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	011b      	lsls	r3, r3, #4
 8011104:	4413      	add	r3, r2
 8011106:	2200      	movs	r2, #0
 8011108:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	737b      	strb	r3, [r7, #13]
 801110e:	e001      	b.n	8011114 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011110:	2302      	movs	r3, #2
 8011112:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011114:	7b7b      	ldrb	r3, [r7, #13]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	24000d70 	.word	0x24000d70

08011128 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011130:	2300      	movs	r3, #0
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e010      	b.n	8011158 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011136:	4a0d      	ldr	r2, [pc, #52]	@ (801116c <clear_lock+0x44>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	4413      	add	r3, r2
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d105      	bne.n	8011152 <clear_lock+0x2a>
 8011146:	4a09      	ldr	r2, [pc, #36]	@ (801116c <clear_lock+0x44>)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	011b      	lsls	r3, r3, #4
 801114c:	4413      	add	r3, r2
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d9eb      	bls.n	8011136 <clear_lock+0xe>
	}
}
 801115e:	bf00      	nop
 8011160:	bf00      	nop
 8011162:	3714      	adds	r7, #20
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	24000d70 	.word	0x24000d70

08011170 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	78db      	ldrb	r3, [r3, #3]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d034      	beq.n	80111ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011188:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	7858      	ldrb	r0, [r3, #1]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011194:	2301      	movs	r3, #1
 8011196:	697a      	ldr	r2, [r7, #20]
 8011198:	f7ff fd40 	bl	8010c1c <disk_write>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	73fb      	strb	r3, [r7, #15]
 80111a6:	e022      	b.n	80111ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a1b      	ldr	r3, [r3, #32]
 80111b2:	697a      	ldr	r2, [r7, #20]
 80111b4:	1ad2      	subs	r2, r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	699b      	ldr	r3, [r3, #24]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d217      	bcs.n	80111ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	789b      	ldrb	r3, [r3, #2]
 80111c2:	613b      	str	r3, [r7, #16]
 80111c4:	e010      	b.n	80111e8 <sync_window+0x78>
					wsect += fs->fsize;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	697a      	ldr	r2, [r7, #20]
 80111cc:	4413      	add	r3, r2
 80111ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	7858      	ldrb	r0, [r3, #1]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80111da:	2301      	movs	r3, #1
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	f7ff fd1d 	bl	8010c1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	613b      	str	r3, [r7, #16]
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d8eb      	bhi.n	80111c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3718      	adds	r7, #24
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d01b      	beq.n	8011248 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff ffad 	bl	8011170 <sync_window>
 8011216:	4603      	mov	r3, r0
 8011218:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801121a:	7bfb      	ldrb	r3, [r7, #15]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d113      	bne.n	8011248 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7858      	ldrb	r0, [r3, #1]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801122a:	2301      	movs	r3, #1
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	f7ff fcd5 	bl	8010bdc <disk_read>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d004      	beq.n	8011242 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801123e:	2301      	movs	r3, #1
 8011240:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011248:	7bfb      	ldrb	r3, [r7, #15]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7ff ff87 	bl	8011170 <sync_window>
 8011262:	4603      	mov	r3, r0
 8011264:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011266:	7bfb      	ldrb	r3, [r7, #15]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d158      	bne.n	801131e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	2b03      	cmp	r3, #3
 8011272:	d148      	bne.n	8011306 <sync_fs+0xb2>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	791b      	ldrb	r3, [r3, #4]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d144      	bne.n	8011306 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	3330      	adds	r3, #48	@ 0x30
 8011280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011284:	2100      	movs	r1, #0
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fda9 	bl	8010dde <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3330      	adds	r3, #48	@ 0x30
 8011290:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011294:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011298:	4618      	mov	r0, r3
 801129a:	f7ff fd38 	bl	8010d0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	3330      	adds	r3, #48	@ 0x30
 80112a2:	4921      	ldr	r1, [pc, #132]	@ (8011328 <sync_fs+0xd4>)
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fd4d 	bl	8010d44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3330      	adds	r3, #48	@ 0x30
 80112ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80112b2:	491e      	ldr	r1, [pc, #120]	@ (801132c <sync_fs+0xd8>)
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fd45 	bl	8010d44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	3330      	adds	r3, #48	@ 0x30
 80112be:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	691b      	ldr	r3, [r3, #16]
 80112c6:	4619      	mov	r1, r3
 80112c8:	4610      	mov	r0, r2
 80112ca:	f7ff fd3b 	bl	8010d44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3330      	adds	r3, #48	@ 0x30
 80112d2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f7ff fd31 	bl	8010d44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	69db      	ldr	r3, [r3, #28]
 80112e6:	1c5a      	adds	r2, r3, #1
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	7858      	ldrb	r0, [r3, #1]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112fa:	2301      	movs	r3, #1
 80112fc:	f7ff fc8e 	bl	8010c1c <disk_write>
			fs->fsi_flag = 0;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	785b      	ldrb	r3, [r3, #1]
 801130a:	2200      	movs	r2, #0
 801130c:	2100      	movs	r1, #0
 801130e:	4618      	mov	r0, r3
 8011310:	f7ff fca4 	bl	8010c5c <disk_ioctl>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <sync_fs+0xca>
 801131a:	2301      	movs	r3, #1
 801131c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	41615252 	.word	0x41615252
 801132c:	61417272 	.word	0x61417272

08011330 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	3b02      	subs	r3, #2
 801133e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	3b02      	subs	r3, #2
 8011346:	683a      	ldr	r2, [r7, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	d301      	bcc.n	8011350 <clust2sect+0x20>
 801134c:	2300      	movs	r3, #0
 801134e:	e008      	b.n	8011362 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	895b      	ldrh	r3, [r3, #10]
 8011354:	461a      	mov	r2, r3
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	fb03 f202 	mul.w	r2, r3, r2
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011360:	4413      	add	r3, r2
}
 8011362:	4618      	mov	r0, r3
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b086      	sub	sp, #24
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d904      	bls.n	801138e <get_fat+0x20>
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	695b      	ldr	r3, [r3, #20]
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d302      	bcc.n	8011394 <get_fat+0x26>
		val = 1;	/* Internal error */
 801138e:	2301      	movs	r3, #1
 8011390:	617b      	str	r3, [r7, #20]
 8011392:	e08e      	b.n	80114b2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
 8011398:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b03      	cmp	r3, #3
 80113a0:	d061      	beq.n	8011466 <get_fat+0xf8>
 80113a2:	2b03      	cmp	r3, #3
 80113a4:	dc7b      	bgt.n	801149e <get_fat+0x130>
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d002      	beq.n	80113b0 <get_fat+0x42>
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d041      	beq.n	8011432 <get_fat+0xc4>
 80113ae:	e076      	b.n	801149e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	085b      	lsrs	r3, r3, #1
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	4413      	add	r3, r2
 80113bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	6a1a      	ldr	r2, [r3, #32]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	0a5b      	lsrs	r3, r3, #9
 80113c6:	4413      	add	r3, r2
 80113c8:	4619      	mov	r1, r3
 80113ca:	6938      	ldr	r0, [r7, #16]
 80113cc:	f7ff ff14 	bl	80111f8 <move_window>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d166      	bne.n	80114a4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	60fa      	str	r2, [r7, #12]
 80113dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113e0:	693a      	ldr	r2, [r7, #16]
 80113e2:	4413      	add	r3, r2
 80113e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80113e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	6a1a      	ldr	r2, [r3, #32]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	0a5b      	lsrs	r3, r3, #9
 80113f2:	4413      	add	r3, r2
 80113f4:	4619      	mov	r1, r3
 80113f6:	6938      	ldr	r0, [r7, #16]
 80113f8:	f7ff fefe 	bl	80111f8 <move_window>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d152      	bne.n	80114a8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011408:	693a      	ldr	r2, [r7, #16]
 801140a:	4413      	add	r3, r2
 801140c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011410:	021b      	lsls	r3, r3, #8
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	4313      	orrs	r3, r2
 8011416:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	2b00      	cmp	r3, #0
 8011420:	d002      	beq.n	8011428 <get_fat+0xba>
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	091b      	lsrs	r3, r3, #4
 8011426:	e002      	b.n	801142e <get_fat+0xc0>
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801142e:	617b      	str	r3, [r7, #20]
			break;
 8011430:	e03f      	b.n	80114b2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	6a1a      	ldr	r2, [r3, #32]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	0a1b      	lsrs	r3, r3, #8
 801143a:	4413      	add	r3, r2
 801143c:	4619      	mov	r1, r3
 801143e:	6938      	ldr	r0, [r7, #16]
 8011440:	f7ff feda 	bl	80111f8 <move_window>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d130      	bne.n	80114ac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011458:	4413      	add	r3, r2
 801145a:	4618      	mov	r0, r3
 801145c:	f7ff fc1c 	bl	8010c98 <ld_word>
 8011460:	4603      	mov	r3, r0
 8011462:	617b      	str	r3, [r7, #20]
			break;
 8011464:	e025      	b.n	80114b2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	6a1a      	ldr	r2, [r3, #32]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	09db      	lsrs	r3, r3, #7
 801146e:	4413      	add	r3, r2
 8011470:	4619      	mov	r1, r3
 8011472:	6938      	ldr	r0, [r7, #16]
 8011474:	f7ff fec0 	bl	80111f8 <move_window>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d118      	bne.n	80114b0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801148c:	4413      	add	r3, r2
 801148e:	4618      	mov	r0, r3
 8011490:	f7ff fc1a 	bl	8010cc8 <ld_dword>
 8011494:	4603      	mov	r3, r0
 8011496:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801149a:	617b      	str	r3, [r7, #20]
			break;
 801149c:	e009      	b.n	80114b2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801149e:	2301      	movs	r3, #1
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	e006      	b.n	80114b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114a4:	bf00      	nop
 80114a6:	e004      	b.n	80114b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114a8:	bf00      	nop
 80114aa:	e002      	b.n	80114b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80114ac:	bf00      	nop
 80114ae:	e000      	b.n	80114b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80114b0:	bf00      	nop
		}
	}

	return val;
 80114b2:	697b      	ldr	r3, [r7, #20]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3718      	adds	r7, #24
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80114bc:	b590      	push	{r4, r7, lr}
 80114be:	b089      	sub	sp, #36	@ 0x24
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80114c8:	2302      	movs	r3, #2
 80114ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	f240 80d9 	bls.w	8011686 <put_fat+0x1ca>
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	68ba      	ldr	r2, [r7, #8]
 80114da:	429a      	cmp	r2, r3
 80114dc:	f080 80d3 	bcs.w	8011686 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	f000 8096 	beq.w	8011616 <put_fat+0x15a>
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	f300 80cb 	bgt.w	8011686 <put_fat+0x1ca>
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d002      	beq.n	80114fa <put_fat+0x3e>
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d06e      	beq.n	80115d6 <put_fat+0x11a>
 80114f8:	e0c5      	b.n	8011686 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	61bb      	str	r3, [r7, #24]
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	085b      	lsrs	r3, r3, #1
 8011502:	69ba      	ldr	r2, [r7, #24]
 8011504:	4413      	add	r3, r2
 8011506:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6a1a      	ldr	r2, [r3, #32]
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	0a5b      	lsrs	r3, r3, #9
 8011510:	4413      	add	r3, r2
 8011512:	4619      	mov	r1, r3
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7ff fe6f 	bl	80111f8 <move_window>
 801151a:	4603      	mov	r3, r0
 801151c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801151e:	7ffb      	ldrb	r3, [r7, #31]
 8011520:	2b00      	cmp	r3, #0
 8011522:	f040 80a9 	bne.w	8011678 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	1c59      	adds	r1, r3, #1
 8011530:	61b9      	str	r1, [r7, #24]
 8011532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011536:	4413      	add	r3, r2
 8011538:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	f003 0301 	and.w	r3, r3, #1
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <put_fat+0xa4>
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	b25b      	sxtb	r3, r3
 801154a:	f003 030f 	and.w	r3, r3, #15
 801154e:	b25a      	sxtb	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	b2db      	uxtb	r3, r3
 8011554:	011b      	lsls	r3, r3, #4
 8011556:	b25b      	sxtb	r3, r3
 8011558:	4313      	orrs	r3, r2
 801155a:	b25b      	sxtb	r3, r3
 801155c:	b2db      	uxtb	r3, r3
 801155e:	e001      	b.n	8011564 <put_fat+0xa8>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	b2db      	uxtb	r3, r3
 8011564:	697a      	ldr	r2, [r7, #20]
 8011566:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2201      	movs	r2, #1
 801156c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6a1a      	ldr	r2, [r3, #32]
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	0a5b      	lsrs	r3, r3, #9
 8011576:	4413      	add	r3, r2
 8011578:	4619      	mov	r1, r3
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f7ff fe3c 	bl	80111f8 <move_window>
 8011580:	4603      	mov	r3, r0
 8011582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011584:	7ffb      	ldrb	r3, [r7, #31]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d178      	bne.n	801167c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011596:	4413      	add	r3, r2
 8011598:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d003      	beq.n	80115ac <put_fat+0xf0>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	091b      	lsrs	r3, r3, #4
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	e00e      	b.n	80115ca <put_fat+0x10e>
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	b25b      	sxtb	r3, r3
 80115b2:	f023 030f 	bic.w	r3, r3, #15
 80115b6:	b25a      	sxtb	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	0a1b      	lsrs	r3, r3, #8
 80115bc:	b25b      	sxtb	r3, r3
 80115be:	f003 030f 	and.w	r3, r3, #15
 80115c2:	b25b      	sxtb	r3, r3
 80115c4:	4313      	orrs	r3, r2
 80115c6:	b25b      	sxtb	r3, r3
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	697a      	ldr	r2, [r7, #20]
 80115cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2201      	movs	r2, #1
 80115d2:	70da      	strb	r2, [r3, #3]
			break;
 80115d4:	e057      	b.n	8011686 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6a1a      	ldr	r2, [r3, #32]
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	0a1b      	lsrs	r3, r3, #8
 80115de:	4413      	add	r3, r2
 80115e0:	4619      	mov	r1, r3
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff fe08 	bl	80111f8 <move_window>
 80115e8:	4603      	mov	r3, r0
 80115ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80115ec:	7ffb      	ldrb	r3, [r7, #31]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d146      	bne.n	8011680 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011600:	4413      	add	r3, r2
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	b292      	uxth	r2, r2
 8011606:	4611      	mov	r1, r2
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff fb80 	bl	8010d0e <st_word>
			fs->wflag = 1;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2201      	movs	r2, #1
 8011612:	70da      	strb	r2, [r3, #3]
			break;
 8011614:	e037      	b.n	8011686 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6a1a      	ldr	r2, [r3, #32]
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	09db      	lsrs	r3, r3, #7
 801161e:	4413      	add	r3, r2
 8011620:	4619      	mov	r1, r3
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f7ff fde8 	bl	80111f8 <move_window>
 8011628:	4603      	mov	r3, r0
 801162a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801162c:	7ffb      	ldrb	r3, [r7, #31]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d128      	bne.n	8011684 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011646:	4413      	add	r3, r2
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fb3d 	bl	8010cc8 <ld_dword>
 801164e:	4603      	mov	r3, r0
 8011650:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011654:	4323      	orrs	r3, r4
 8011656:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011666:	4413      	add	r3, r2
 8011668:	6879      	ldr	r1, [r7, #4]
 801166a:	4618      	mov	r0, r3
 801166c:	f7ff fb6a 	bl	8010d44 <st_dword>
			fs->wflag = 1;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2201      	movs	r2, #1
 8011674:	70da      	strb	r2, [r3, #3]
			break;
 8011676:	e006      	b.n	8011686 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011678:	bf00      	nop
 801167a:	e004      	b.n	8011686 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801167c:	bf00      	nop
 801167e:	e002      	b.n	8011686 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011680:	bf00      	nop
 8011682:	e000      	b.n	8011686 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011684:	bf00      	nop
		}
	}
	return res;
 8011686:	7ffb      	ldrb	r3, [r7, #31]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3724      	adds	r7, #36	@ 0x24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd90      	pop	{r4, r7, pc}

08011690 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d904      	bls.n	80116b6 <remove_chain+0x26>
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d301      	bcc.n	80116ba <remove_chain+0x2a>
 80116b6:	2302      	movs	r3, #2
 80116b8:	e04b      	b.n	8011752 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80116c0:	f04f 32ff 	mov.w	r2, #4294967295
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	69b8      	ldr	r0, [r7, #24]
 80116c8:	f7ff fef8 	bl	80114bc <put_fat>
 80116cc:	4603      	mov	r3, r0
 80116ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80116d0:	7ffb      	ldrb	r3, [r7, #31]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d001      	beq.n	80116da <remove_chain+0x4a>
 80116d6:	7ffb      	ldrb	r3, [r7, #31]
 80116d8:	e03b      	b.n	8011752 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff fe46 	bl	801136e <get_fat>
 80116e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d031      	beq.n	801174e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d101      	bne.n	80116f4 <remove_chain+0x64>
 80116f0:	2302      	movs	r3, #2
 80116f2:	e02e      	b.n	8011752 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fa:	d101      	bne.n	8011700 <remove_chain+0x70>
 80116fc:	2301      	movs	r3, #1
 80116fe:	e028      	b.n	8011752 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011700:	2200      	movs	r2, #0
 8011702:	68b9      	ldr	r1, [r7, #8]
 8011704:	69b8      	ldr	r0, [r7, #24]
 8011706:	f7ff fed9 	bl	80114bc <put_fat>
 801170a:	4603      	mov	r3, r0
 801170c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801170e:	7ffb      	ldrb	r3, [r7, #31]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <remove_chain+0x88>
 8011714:	7ffb      	ldrb	r3, [r7, #31]
 8011716:	e01c      	b.n	8011752 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	691a      	ldr	r2, [r3, #16]
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	3b02      	subs	r3, #2
 8011722:	429a      	cmp	r2, r3
 8011724:	d20b      	bcs.n	801173e <remove_chain+0xae>
			fs->free_clst++;
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	791b      	ldrb	r3, [r3, #4]
 8011734:	f043 0301 	orr.w	r3, r3, #1
 8011738:	b2da      	uxtb	r2, r3
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	695b      	ldr	r3, [r3, #20]
 8011746:	68ba      	ldr	r2, [r7, #8]
 8011748:	429a      	cmp	r2, r3
 801174a:	d3c6      	bcc.n	80116da <remove_chain+0x4a>
 801174c:	e000      	b.n	8011750 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801174e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3720      	adds	r7, #32
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b088      	sub	sp, #32
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d10d      	bne.n	801178c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <create_chain+0x2c>
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	695b      	ldr	r3, [r3, #20]
 8011780:	69ba      	ldr	r2, [r7, #24]
 8011782:	429a      	cmp	r2, r3
 8011784:	d31b      	bcc.n	80117be <create_chain+0x64>
 8011786:	2301      	movs	r3, #1
 8011788:	61bb      	str	r3, [r7, #24]
 801178a:	e018      	b.n	80117be <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801178c:	6839      	ldr	r1, [r7, #0]
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f7ff fded 	bl	801136e <get_fat>
 8011794:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d801      	bhi.n	80117a0 <create_chain+0x46>
 801179c:	2301      	movs	r3, #1
 801179e:	e070      	b.n	8011882 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a6:	d101      	bne.n	80117ac <create_chain+0x52>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	e06a      	b.n	8011882 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d201      	bcs.n	80117ba <create_chain+0x60>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	e063      	b.n	8011882 <create_chain+0x128>
		scl = clst;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	3301      	adds	r3, #1
 80117c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	695b      	ldr	r3, [r3, #20]
 80117cc:	69fa      	ldr	r2, [r7, #28]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d307      	bcc.n	80117e2 <create_chain+0x88>
				ncl = 2;
 80117d2:	2302      	movs	r3, #2
 80117d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d901      	bls.n	80117e2 <create_chain+0x88>
 80117de:	2300      	movs	r3, #0
 80117e0:	e04f      	b.n	8011882 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80117e2:	69f9      	ldr	r1, [r7, #28]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff fdc2 	bl	801136e <get_fat>
 80117ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00e      	beq.n	8011810 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d003      	beq.n	8011800 <create_chain+0xa6>
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117fe:	d101      	bne.n	8011804 <create_chain+0xaa>
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	e03e      	b.n	8011882 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011804:	69fa      	ldr	r2, [r7, #28]
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	429a      	cmp	r2, r3
 801180a:	d1da      	bne.n	80117c2 <create_chain+0x68>
 801180c:	2300      	movs	r3, #0
 801180e:	e038      	b.n	8011882 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011810:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011812:	f04f 32ff 	mov.w	r2, #4294967295
 8011816:	69f9      	ldr	r1, [r7, #28]
 8011818:	6938      	ldr	r0, [r7, #16]
 801181a:	f7ff fe4f 	bl	80114bc <put_fat>
 801181e:	4603      	mov	r3, r0
 8011820:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011822:	7dfb      	ldrb	r3, [r7, #23]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d109      	bne.n	801183c <create_chain+0xe2>
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d006      	beq.n	801183c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801182e:	69fa      	ldr	r2, [r7, #28]
 8011830:	6839      	ldr	r1, [r7, #0]
 8011832:	6938      	ldr	r0, [r7, #16]
 8011834:	f7ff fe42 	bl	80114bc <put_fat>
 8011838:	4603      	mov	r3, r0
 801183a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d116      	bne.n	8011870 <create_chain+0x116>
		fs->last_clst = ncl;
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	69fa      	ldr	r2, [r7, #28]
 8011846:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	691a      	ldr	r2, [r3, #16]
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	695b      	ldr	r3, [r3, #20]
 8011850:	3b02      	subs	r3, #2
 8011852:	429a      	cmp	r2, r3
 8011854:	d804      	bhi.n	8011860 <create_chain+0x106>
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	1e5a      	subs	r2, r3, #1
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	791b      	ldrb	r3, [r3, #4]
 8011864:	f043 0301 	orr.w	r3, r3, #1
 8011868:	b2da      	uxtb	r2, r3
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	711a      	strb	r2, [r3, #4]
 801186e:	e007      	b.n	8011880 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011870:	7dfb      	ldrb	r3, [r7, #23]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d102      	bne.n	801187c <create_chain+0x122>
 8011876:	f04f 33ff 	mov.w	r3, #4294967295
 801187a:	e000      	b.n	801187e <create_chain+0x124>
 801187c:	2301      	movs	r3, #1
 801187e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011880:	69fb      	ldr	r3, [r7, #28]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801188a:	b480      	push	{r7}
 801188c:	b087      	sub	sp, #28
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801189e:	3304      	adds	r3, #4
 80118a0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	0a5b      	lsrs	r3, r3, #9
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	8952      	ldrh	r2, [r2, #10]
 80118aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	1d1a      	adds	r2, r3, #4
 80118b4:	613a      	str	r2, [r7, #16]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <clmt_clust+0x3a>
 80118c0:	2300      	movs	r3, #0
 80118c2:	e010      	b.n	80118e6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d307      	bcc.n	80118dc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80118cc:	697a      	ldr	r2, [r7, #20]
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	617b      	str	r3, [r7, #20]
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	3304      	adds	r3, #4
 80118d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118da:	e7e9      	b.n	80118b0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80118dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	681a      	ldr	r2, [r3, #0]
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	4413      	add	r3, r2
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	371c      	adds	r7, #28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b086      	sub	sp, #24
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
 80118fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011908:	d204      	bcs.n	8011914 <dir_sdi+0x22>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	f003 031f 	and.w	r3, r3, #31
 8011910:	2b00      	cmp	r3, #0
 8011912:	d001      	beq.n	8011918 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011914:	2302      	movs	r3, #2
 8011916:	e063      	b.n	80119e0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	683a      	ldr	r2, [r7, #0]
 801191c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <dir_sdi+0x46>
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	2b02      	cmp	r3, #2
 8011930:	d902      	bls.n	8011938 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011936:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d10c      	bne.n	8011958 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	095b      	lsrs	r3, r3, #5
 8011942:	693a      	ldr	r2, [r7, #16]
 8011944:	8912      	ldrh	r2, [r2, #8]
 8011946:	4293      	cmp	r3, r2
 8011948:	d301      	bcc.n	801194e <dir_sdi+0x5c>
 801194a:	2302      	movs	r3, #2
 801194c:	e048      	b.n	80119e0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	61da      	str	r2, [r3, #28]
 8011956:	e029      	b.n	80119ac <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	895b      	ldrh	r3, [r3, #10]
 801195c:	025b      	lsls	r3, r3, #9
 801195e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011960:	e019      	b.n	8011996 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6979      	ldr	r1, [r7, #20]
 8011966:	4618      	mov	r0, r3
 8011968:	f7ff fd01 	bl	801136e <get_fat>
 801196c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011974:	d101      	bne.n	801197a <dir_sdi+0x88>
 8011976:	2301      	movs	r3, #1
 8011978:	e032      	b.n	80119e0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	2b01      	cmp	r3, #1
 801197e:	d904      	bls.n	801198a <dir_sdi+0x98>
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	695b      	ldr	r3, [r3, #20]
 8011984:	697a      	ldr	r2, [r7, #20]
 8011986:	429a      	cmp	r2, r3
 8011988:	d301      	bcc.n	801198e <dir_sdi+0x9c>
 801198a:	2302      	movs	r3, #2
 801198c:	e028      	b.n	80119e0 <dir_sdi+0xee>
			ofs -= csz;
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	1ad3      	subs	r3, r2, r3
 8011994:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	429a      	cmp	r2, r3
 801199c:	d2e1      	bcs.n	8011962 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801199e:	6979      	ldr	r1, [r7, #20]
 80119a0:	6938      	ldr	r0, [r7, #16]
 80119a2:	f7ff fcc5 	bl	8011330 <clust2sect>
 80119a6:	4602      	mov	r2, r0
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	697a      	ldr	r2, [r7, #20]
 80119b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	69db      	ldr	r3, [r3, #28]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d101      	bne.n	80119be <dir_sdi+0xcc>
 80119ba:	2302      	movs	r3, #2
 80119bc:	e010      	b.n	80119e0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	69da      	ldr	r2, [r3, #28]
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	0a5b      	lsrs	r3, r3, #9
 80119c6:	441a      	add	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119d8:	441a      	add	r2, r3
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3718      	adds	r7, #24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	695b      	ldr	r3, [r3, #20]
 80119fc:	3320      	adds	r3, #32
 80119fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	69db      	ldr	r3, [r3, #28]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d003      	beq.n	8011a10 <dir_next+0x28>
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011a0e:	d301      	bcc.n	8011a14 <dir_next+0x2c>
 8011a10:	2304      	movs	r3, #4
 8011a12:	e0aa      	b.n	8011b6a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f040 8098 	bne.w	8011b50 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	69db      	ldr	r3, [r3, #28]
 8011a24:	1c5a      	adds	r2, r3, #1
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	699b      	ldr	r3, [r3, #24]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d10b      	bne.n	8011a4a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	095b      	lsrs	r3, r3, #5
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	8912      	ldrh	r2, [r2, #8]
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	f0c0 8088 	bcc.w	8011b50 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	61da      	str	r2, [r3, #28]
 8011a46:	2304      	movs	r3, #4
 8011a48:	e08f      	b.n	8011b6a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	0a5b      	lsrs	r3, r3, #9
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	8952      	ldrh	r2, [r2, #10]
 8011a52:	3a01      	subs	r2, #1
 8011a54:	4013      	ands	r3, r2
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d17a      	bne.n	8011b50 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	699b      	ldr	r3, [r3, #24]
 8011a60:	4619      	mov	r1, r3
 8011a62:	4610      	mov	r0, r2
 8011a64:	f7ff fc83 	bl	801136e <get_fat>
 8011a68:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d801      	bhi.n	8011a74 <dir_next+0x8c>
 8011a70:	2302      	movs	r3, #2
 8011a72:	e07a      	b.n	8011b6a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a7a:	d101      	bne.n	8011a80 <dir_next+0x98>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e074      	b.n	8011b6a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	695b      	ldr	r3, [r3, #20]
 8011a84:	697a      	ldr	r2, [r7, #20]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d358      	bcc.n	8011b3c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d104      	bne.n	8011a9a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	61da      	str	r2, [r3, #28]
 8011a96:	2304      	movs	r3, #4
 8011a98:	e067      	b.n	8011b6a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	f7ff fe59 	bl	801175a <create_chain>
 8011aa8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <dir_next+0xcc>
 8011ab0:	2307      	movs	r3, #7
 8011ab2:	e05a      	b.n	8011b6a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d101      	bne.n	8011abe <dir_next+0xd6>
 8011aba:	2302      	movs	r3, #2
 8011abc:	e055      	b.n	8011b6a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac4:	d101      	bne.n	8011aca <dir_next+0xe2>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	e04f      	b.n	8011b6a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff fb50 	bl	8011170 <sync_window>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <dir_next+0xf2>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	e047      	b.n	8011b6a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	3330      	adds	r3, #48	@ 0x30
 8011ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ae2:	2100      	movs	r1, #0
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff f97a 	bl	8010dde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011aea:	2300      	movs	r3, #0
 8011aec:	613b      	str	r3, [r7, #16]
 8011aee:	6979      	ldr	r1, [r7, #20]
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f7ff fc1d 	bl	8011330 <clust2sect>
 8011af6:	4602      	mov	r2, r0
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011afc:	e012      	b.n	8011b24 <dir_next+0x13c>
						fs->wflag = 1;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2201      	movs	r2, #1
 8011b02:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f7ff fb33 	bl	8011170 <sync_window>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d001      	beq.n	8011b14 <dir_next+0x12c>
 8011b10:	2301      	movs	r3, #1
 8011b12:	e02a      	b.n	8011b6a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	3301      	adds	r3, #1
 8011b18:	613b      	str	r3, [r7, #16]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b1e:	1c5a      	adds	r2, r3, #1
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	895b      	ldrh	r3, [r3, #10]
 8011b28:	461a      	mov	r2, r3
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d3e6      	bcc.n	8011afe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	1ad2      	subs	r2, r2, r3
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	697a      	ldr	r2, [r7, #20]
 8011b40:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011b42:	6979      	ldr	r1, [r7, #20]
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f7ff fbf3 	bl	8011330 <clust2sect>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b62:	441a      	add	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b086      	sub	sp, #24
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011b82:	2100      	movs	r1, #0
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7ff feb4 	bl	80118f2 <dir_sdi>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b8e:	7dfb      	ldrb	r3, [r7, #23]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d12b      	bne.n	8011bec <dir_alloc+0x7a>
		n = 0;
 8011b94:	2300      	movs	r3, #0
 8011b96:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	69db      	ldr	r3, [r3, #28]
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f7ff fb2a 	bl	80111f8 <move_window>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011ba8:	7dfb      	ldrb	r3, [r7, #23]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d11d      	bne.n	8011bea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	2be5      	cmp	r3, #229	@ 0xe5
 8011bb6:	d004      	beq.n	8011bc2 <dir_alloc+0x50>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6a1b      	ldr	r3, [r3, #32]
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d107      	bne.n	8011bd2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	613b      	str	r3, [r7, #16]
 8011bc8:	693a      	ldr	r2, [r7, #16]
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d102      	bne.n	8011bd6 <dir_alloc+0x64>
 8011bd0:	e00c      	b.n	8011bec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011bd6:	2101      	movs	r1, #1
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7ff ff05 	bl	80119e8 <dir_next>
 8011bde:	4603      	mov	r3, r0
 8011be0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011be2:	7dfb      	ldrb	r3, [r7, #23]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d0d7      	beq.n	8011b98 <dir_alloc+0x26>
 8011be8:	e000      	b.n	8011bec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011bea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011bec:	7dfb      	ldrb	r3, [r7, #23]
 8011bee:	2b04      	cmp	r3, #4
 8011bf0:	d101      	bne.n	8011bf6 <dir_alloc+0x84>
 8011bf2:	2307      	movs	r3, #7
 8011bf4:	75fb      	strb	r3, [r7, #23]
	return res;
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3718      	adds	r7, #24
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	331a      	adds	r3, #26
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff f842 	bl	8010c98 <ld_word>
 8011c14:	4603      	mov	r3, r0
 8011c16:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	2b03      	cmp	r3, #3
 8011c1e:	d109      	bne.n	8011c34 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	3314      	adds	r3, #20
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ff f837 	bl	8010c98 <ld_word>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	041b      	lsls	r3, r3, #16
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	4313      	orrs	r3, r2
 8011c32:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011c34:	68fb      	ldr	r3, [r7, #12]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	60f8      	str	r0, [r7, #12]
 8011c46:	60b9      	str	r1, [r7, #8]
 8011c48:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	331a      	adds	r3, #26
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	b292      	uxth	r2, r2
 8011c52:	4611      	mov	r1, r2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff f85a 	bl	8010d0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	2b03      	cmp	r3, #3
 8011c60:	d109      	bne.n	8011c76 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	f103 0214 	add.w	r2, r3, #20
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	0c1b      	lsrs	r3, r3, #16
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7ff f84c 	bl	8010d0e <st_word>
	}
}
 8011c76:	bf00      	nop
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b086      	sub	sp, #24
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff fe2f 	bl	80118f2 <dir_sdi>
 8011c94:	4603      	mov	r3, r0
 8011c96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011c98:	7dfb      	ldrb	r3, [r7, #23]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <dir_find+0x24>
 8011c9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ca0:	e03e      	b.n	8011d20 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	69db      	ldr	r3, [r3, #28]
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6938      	ldr	r0, [r7, #16]
 8011caa:	f7ff faa5 	bl	80111f8 <move_window>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011cb2:	7dfb      	ldrb	r3, [r7, #23]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d12f      	bne.n	8011d18 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a1b      	ldr	r3, [r3, #32]
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d102      	bne.n	8011ccc <dir_find+0x4e>
 8011cc6:	2304      	movs	r3, #4
 8011cc8:	75fb      	strb	r3, [r7, #23]
 8011cca:	e028      	b.n	8011d1e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a1b      	ldr	r3, [r3, #32]
 8011cd0:	330b      	adds	r3, #11
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6a1b      	ldr	r3, [r3, #32]
 8011ce2:	330b      	adds	r3, #11
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	f003 0308 	and.w	r3, r3, #8
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d10a      	bne.n	8011d04 <dir_find+0x86>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a18      	ldr	r0, [r3, #32]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	3324      	adds	r3, #36	@ 0x24
 8011cf6:	220b      	movs	r2, #11
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	f7ff f88b 	bl	8010e14 <mem_cmp>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00b      	beq.n	8011d1c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011d04:	2100      	movs	r1, #0
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7ff fe6e 	bl	80119e8 <dir_next>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011d10:	7dfb      	ldrb	r3, [r7, #23]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d0c5      	beq.n	8011ca2 <dir_find+0x24>
 8011d16:	e002      	b.n	8011d1e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011d18:	bf00      	nop
 8011d1a:	e000      	b.n	8011d1e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d1c:	bf00      	nop

	return res;
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3718      	adds	r7, #24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011d36:	2101      	movs	r1, #1
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff ff1a 	bl	8011b72 <dir_alloc>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011d42:	7bfb      	ldrb	r3, [r7, #15]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d11c      	bne.n	8011d82 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	69db      	ldr	r3, [r3, #28]
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	68b8      	ldr	r0, [r7, #8]
 8011d50:	f7ff fa52 	bl	80111f8 <move_window>
 8011d54:	4603      	mov	r3, r0
 8011d56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011d58:	7bfb      	ldrb	r3, [r7, #15]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d111      	bne.n	8011d82 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6a1b      	ldr	r3, [r3, #32]
 8011d62:	2220      	movs	r2, #32
 8011d64:	2100      	movs	r1, #0
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff f839 	bl	8010dde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a18      	ldr	r0, [r3, #32]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3324      	adds	r3, #36	@ 0x24
 8011d74:	220b      	movs	r2, #11
 8011d76:	4619      	mov	r1, r3
 8011d78:	f7ff f810 	bl	8010d9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b088      	sub	sp, #32
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	3324      	adds	r3, #36	@ 0x24
 8011da0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011da2:	220b      	movs	r2, #11
 8011da4:	2120      	movs	r1, #32
 8011da6:	68b8      	ldr	r0, [r7, #8]
 8011da8:	f7ff f819 	bl	8010dde <mem_set>
	si = i = 0; ni = 8;
 8011dac:	2300      	movs	r3, #0
 8011dae:	613b      	str	r3, [r7, #16]
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	61fb      	str	r3, [r7, #28]
 8011db4:	2308      	movs	r3, #8
 8011db6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	1c5a      	adds	r2, r3, #1
 8011dbc:	61fa      	str	r2, [r7, #28]
 8011dbe:	68fa      	ldr	r2, [r7, #12]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011dc6:	7efb      	ldrb	r3, [r7, #27]
 8011dc8:	2b20      	cmp	r3, #32
 8011dca:	d94e      	bls.n	8011e6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011dcc:	7efb      	ldrb	r3, [r7, #27]
 8011dce:	2b2f      	cmp	r3, #47	@ 0x2f
 8011dd0:	d006      	beq.n	8011de0 <create_name+0x54>
 8011dd2:	7efb      	ldrb	r3, [r7, #27]
 8011dd4:	2b5c      	cmp	r3, #92	@ 0x5c
 8011dd6:	d110      	bne.n	8011dfa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011dd8:	e002      	b.n	8011de0 <create_name+0x54>
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	61fb      	str	r3, [r7, #28]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	4413      	add	r3, r2
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	2b2f      	cmp	r3, #47	@ 0x2f
 8011dea:	d0f6      	beq.n	8011dda <create_name+0x4e>
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	4413      	add	r3, r2
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b5c      	cmp	r3, #92	@ 0x5c
 8011df6:	d0f0      	beq.n	8011dda <create_name+0x4e>
			break;
 8011df8:	e038      	b.n	8011e6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011dfa:	7efb      	ldrb	r3, [r7, #27]
 8011dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dfe:	d003      	beq.n	8011e08 <create_name+0x7c>
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d30c      	bcc.n	8011e22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	2b0b      	cmp	r3, #11
 8011e0c:	d002      	beq.n	8011e14 <create_name+0x88>
 8011e0e:	7efb      	ldrb	r3, [r7, #27]
 8011e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e12:	d001      	beq.n	8011e18 <create_name+0x8c>
 8011e14:	2306      	movs	r3, #6
 8011e16:	e044      	b.n	8011ea2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011e18:	2308      	movs	r3, #8
 8011e1a:	613b      	str	r3, [r7, #16]
 8011e1c:	230b      	movs	r3, #11
 8011e1e:	617b      	str	r3, [r7, #20]
			continue;
 8011e20:	e022      	b.n	8011e68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da04      	bge.n	8011e34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011e2a:	7efb      	ldrb	r3, [r7, #27]
 8011e2c:	3b80      	subs	r3, #128	@ 0x80
 8011e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8011eac <create_name+0x120>)
 8011e30:	5cd3      	ldrb	r3, [r2, r3]
 8011e32:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011e34:	7efb      	ldrb	r3, [r7, #27]
 8011e36:	4619      	mov	r1, r3
 8011e38:	481d      	ldr	r0, [pc, #116]	@ (8011eb0 <create_name+0x124>)
 8011e3a:	f7ff f812 	bl	8010e62 <chk_chr>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <create_name+0xbc>
 8011e44:	2306      	movs	r3, #6
 8011e46:	e02c      	b.n	8011ea2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011e48:	7efb      	ldrb	r3, [r7, #27]
 8011e4a:	2b60      	cmp	r3, #96	@ 0x60
 8011e4c:	d905      	bls.n	8011e5a <create_name+0xce>
 8011e4e:	7efb      	ldrb	r3, [r7, #27]
 8011e50:	2b7a      	cmp	r3, #122	@ 0x7a
 8011e52:	d802      	bhi.n	8011e5a <create_name+0xce>
 8011e54:	7efb      	ldrb	r3, [r7, #27]
 8011e56:	3b20      	subs	r3, #32
 8011e58:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	613a      	str	r2, [r7, #16]
 8011e60:	68ba      	ldr	r2, [r7, #8]
 8011e62:	4413      	add	r3, r2
 8011e64:	7efa      	ldrb	r2, [r7, #27]
 8011e66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011e68:	e7a6      	b.n	8011db8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011e6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	441a      	add	r2, r3
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <create_name+0xf4>
 8011e7c:	2306      	movs	r3, #6
 8011e7e:	e010      	b.n	8011ea2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2be5      	cmp	r3, #229	@ 0xe5
 8011e86:	d102      	bne.n	8011e8e <create_name+0x102>
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2205      	movs	r2, #5
 8011e8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011e8e:	7efb      	ldrb	r3, [r7, #27]
 8011e90:	2b20      	cmp	r3, #32
 8011e92:	d801      	bhi.n	8011e98 <create_name+0x10c>
 8011e94:	2204      	movs	r2, #4
 8011e96:	e000      	b.n	8011e9a <create_name+0x10e>
 8011e98:	2200      	movs	r2, #0
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	330b      	adds	r3, #11
 8011e9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ea0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3720      	adds	r7, #32
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	08014a50 	.word	0x08014a50
 8011eb0:	0801494c 	.word	0x0801494c

08011eb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011ec8:	e002      	b.n	8011ed0 <follow_path+0x1c>
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	2b2f      	cmp	r3, #47	@ 0x2f
 8011ed6:	d0f8      	beq.n	8011eca <follow_path+0x16>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	2b5c      	cmp	r3, #92	@ 0x5c
 8011ede:	d0f4      	beq.n	8011eca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	2b1f      	cmp	r3, #31
 8011eec:	d80a      	bhi.n	8011f04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2280      	movs	r2, #128	@ 0x80
 8011ef2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff fcfa 	bl	80118f2 <dir_sdi>
 8011efe:	4603      	mov	r3, r0
 8011f00:	75fb      	strb	r3, [r7, #23]
 8011f02:	e043      	b.n	8011f8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f04:	463b      	mov	r3, r7
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff ff3f 	bl	8011d8c <create_name>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f12:	7dfb      	ldrb	r3, [r7, #23]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d134      	bne.n	8011f82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff feb0 	bl	8011c7e <dir_find>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011f28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011f2a:	7dfb      	ldrb	r3, [r7, #23]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00a      	beq.n	8011f46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	2b04      	cmp	r3, #4
 8011f34:	d127      	bne.n	8011f86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011f36:	7afb      	ldrb	r3, [r7, #11]
 8011f38:	f003 0304 	and.w	r3, r3, #4
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d122      	bne.n	8011f86 <follow_path+0xd2>
 8011f40:	2305      	movs	r3, #5
 8011f42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011f44:	e01f      	b.n	8011f86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f46:	7afb      	ldrb	r3, [r7, #11]
 8011f48:	f003 0304 	and.w	r3, r3, #4
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d11c      	bne.n	8011f8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	799b      	ldrb	r3, [r3, #6]
 8011f54:	f003 0310 	and.w	r3, r3, #16
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011f5c:	2305      	movs	r3, #5
 8011f5e:	75fb      	strb	r3, [r7, #23]
 8011f60:	e014      	b.n	8011f8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	695b      	ldr	r3, [r3, #20]
 8011f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f70:	4413      	add	r3, r2
 8011f72:	4619      	mov	r1, r3
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ff fe43 	bl	8011c00 <ld_clust>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f80:	e7c0      	b.n	8011f04 <follow_path+0x50>
			if (res != FR_OK) break;
 8011f82:	bf00      	nop
 8011f84:	e002      	b.n	8011f8c <follow_path+0xd8>
				break;
 8011f86:	bf00      	nop
 8011f88:	e000      	b.n	8011f8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f8a:	bf00      	nop
			}
		}
	}

	return res;
 8011f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3718      	adds	r7, #24
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}

08011f96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011f96:	b480      	push	{r7}
 8011f98:	b087      	sub	sp, #28
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d031      	beq.n	8012010 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	617b      	str	r3, [r7, #20]
 8011fb2:	e002      	b.n	8011fba <get_ldnumber+0x24>
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	617b      	str	r3, [r7, #20]
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	2b20      	cmp	r3, #32
 8011fc0:	d903      	bls.n	8011fca <get_ldnumber+0x34>
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8011fc8:	d1f4      	bne.n	8011fb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2b3a      	cmp	r3, #58	@ 0x3a
 8011fd0:	d11c      	bne.n	801200c <get_ldnumber+0x76>
			tp = *path;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	1c5a      	adds	r2, r3, #1
 8011fdc:	60fa      	str	r2, [r7, #12]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	3b30      	subs	r3, #48	@ 0x30
 8011fe2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	2b09      	cmp	r3, #9
 8011fe8:	d80e      	bhi.n	8012008 <get_ldnumber+0x72>
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d10a      	bne.n	8012008 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d107      	bne.n	8012008 <get_ldnumber+0x72>
					vol = (int)i;
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	3301      	adds	r3, #1
 8012000:	617b      	str	r3, [r7, #20]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	697a      	ldr	r2, [r7, #20]
 8012006:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	e002      	b.n	8012012 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801200c:	2300      	movs	r3, #0
 801200e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012010:	693b      	ldr	r3, [r7, #16]
}
 8012012:	4618      	mov	r0, r3
 8012014:	371c      	adds	r7, #28
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
	...

08012020 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2200      	movs	r2, #0
 801202e:	70da      	strb	r2, [r3, #3]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f04f 32ff 	mov.w	r2, #4294967295
 8012036:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012038:	6839      	ldr	r1, [r7, #0]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7ff f8dc 	bl	80111f8 <move_window>
 8012040:	4603      	mov	r3, r0
 8012042:	2b00      	cmp	r3, #0
 8012044:	d001      	beq.n	801204a <check_fs+0x2a>
 8012046:	2304      	movs	r3, #4
 8012048:	e038      	b.n	80120bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	3330      	adds	r3, #48	@ 0x30
 801204e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe fe20 	bl	8010c98 <ld_word>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012060:	429a      	cmp	r2, r3
 8012062:	d001      	beq.n	8012068 <check_fs+0x48>
 8012064:	2303      	movs	r3, #3
 8012066:	e029      	b.n	80120bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801206e:	2be9      	cmp	r3, #233	@ 0xe9
 8012070:	d009      	beq.n	8012086 <check_fs+0x66>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012078:	2beb      	cmp	r3, #235	@ 0xeb
 801207a:	d11e      	bne.n	80120ba <check_fs+0x9a>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012082:	2b90      	cmp	r3, #144	@ 0x90
 8012084:	d119      	bne.n	80120ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	3330      	adds	r3, #48	@ 0x30
 801208a:	3336      	adds	r3, #54	@ 0x36
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fe1b 	bl	8010cc8 <ld_dword>
 8012092:	4603      	mov	r3, r0
 8012094:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012098:	4a0a      	ldr	r2, [pc, #40]	@ (80120c4 <check_fs+0xa4>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d101      	bne.n	80120a2 <check_fs+0x82>
 801209e:	2300      	movs	r3, #0
 80120a0:	e00c      	b.n	80120bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	3330      	adds	r3, #48	@ 0x30
 80120a6:	3352      	adds	r3, #82	@ 0x52
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fe fe0d 	bl	8010cc8 <ld_dword>
 80120ae:	4603      	mov	r3, r0
 80120b0:	4a05      	ldr	r2, [pc, #20]	@ (80120c8 <check_fs+0xa8>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d101      	bne.n	80120ba <check_fs+0x9a>
 80120b6:	2300      	movs	r3, #0
 80120b8:	e000      	b.n	80120bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80120ba:	2302      	movs	r3, #2
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	00544146 	.word	0x00544146
 80120c8:	33544146 	.word	0x33544146

080120cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b096      	sub	sp, #88	@ 0x58
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	4613      	mov	r3, r2
 80120d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2200      	movs	r2, #0
 80120de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f7ff ff58 	bl	8011f96 <get_ldnumber>
 80120e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80120e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	da01      	bge.n	80120f2 <find_volume+0x26>
 80120ee:	230b      	movs	r3, #11
 80120f0:	e22d      	b.n	801254e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80120f2:	4aa1      	ldr	r2, [pc, #644]	@ (8012378 <find_volume+0x2ac>)
 80120f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80120fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <find_volume+0x3a>
 8012102:	230c      	movs	r3, #12
 8012104:	e223      	b.n	801254e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801210a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801210c:	79fb      	ldrb	r3, [r7, #7]
 801210e:	f023 0301 	bic.w	r3, r3, #1
 8012112:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d01a      	beq.n	8012152 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801211c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211e:	785b      	ldrb	r3, [r3, #1]
 8012120:	4618      	mov	r0, r3
 8012122:	f7fe fd19 	bl	8010b58 <disk_status>
 8012126:	4603      	mov	r3, r0
 8012128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801212c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012130:	f003 0301 	and.w	r3, r3, #1
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10c      	bne.n	8012152 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012138:	79fb      	ldrb	r3, [r7, #7]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d007      	beq.n	801214e <find_volume+0x82>
 801213e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012142:	f003 0304 	and.w	r3, r3, #4
 8012146:	2b00      	cmp	r3, #0
 8012148:	d001      	beq.n	801214e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801214a:	230a      	movs	r3, #10
 801214c:	e1ff      	b.n	801254e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801214e:	2300      	movs	r3, #0
 8012150:	e1fd      	b.n	801254e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012154:	2200      	movs	r2, #0
 8012156:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801215a:	b2da      	uxtb	r2, r3
 801215c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012162:	785b      	ldrb	r3, [r3, #1]
 8012164:	4618      	mov	r0, r3
 8012166:	f7fe fd11 	bl	8010b8c <disk_initialize>
 801216a:	4603      	mov	r3, r0
 801216c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012170:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012174:	f003 0301 	and.w	r3, r3, #1
 8012178:	2b00      	cmp	r3, #0
 801217a:	d001      	beq.n	8012180 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801217c:	2303      	movs	r3, #3
 801217e:	e1e6      	b.n	801254e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012180:	79fb      	ldrb	r3, [r7, #7]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d007      	beq.n	8012196 <find_volume+0xca>
 8012186:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801218a:	f003 0304 	and.w	r3, r3, #4
 801218e:	2b00      	cmp	r3, #0
 8012190:	d001      	beq.n	8012196 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012192:	230a      	movs	r3, #10
 8012194:	e1db      	b.n	801254e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801219a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801219c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801219e:	f7ff ff3f 	bl	8012020 <check_fs>
 80121a2:	4603      	mov	r3, r0
 80121a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80121a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d149      	bne.n	8012244 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80121b0:	2300      	movs	r3, #0
 80121b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80121b4:	e01e      	b.n	80121f4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80121b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80121bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121be:	011b      	lsls	r3, r3, #4
 80121c0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80121c4:	4413      	add	r3, r2
 80121c6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80121c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ca:	3304      	adds	r3, #4
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d006      	beq.n	80121e0 <find_volume+0x114>
 80121d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d4:	3308      	adds	r3, #8
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fe fd76 	bl	8010cc8 <ld_dword>
 80121dc:	4602      	mov	r2, r0
 80121de:	e000      	b.n	80121e2 <find_volume+0x116>
 80121e0:	2200      	movs	r2, #0
 80121e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	3358      	adds	r3, #88	@ 0x58
 80121e8:	443b      	add	r3, r7
 80121ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80121ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121f0:	3301      	adds	r3, #1
 80121f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80121f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121f6:	2b03      	cmp	r3, #3
 80121f8:	d9dd      	bls.n	80121b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80121fa:	2300      	movs	r3, #0
 80121fc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80121fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <find_volume+0x13e>
 8012204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012206:	3b01      	subs	r3, #1
 8012208:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801220a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	3358      	adds	r3, #88	@ 0x58
 8012210:	443b      	add	r3, r7
 8012212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012216:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801221a:	2b00      	cmp	r3, #0
 801221c:	d005      	beq.n	801222a <find_volume+0x15e>
 801221e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012220:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012222:	f7ff fefd 	bl	8012020 <check_fs>
 8012226:	4603      	mov	r3, r0
 8012228:	e000      	b.n	801222c <find_volume+0x160>
 801222a:	2303      	movs	r3, #3
 801222c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012234:	2b01      	cmp	r3, #1
 8012236:	d905      	bls.n	8012244 <find_volume+0x178>
 8012238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801223a:	3301      	adds	r3, #1
 801223c:	643b      	str	r3, [r7, #64]	@ 0x40
 801223e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012240:	2b03      	cmp	r3, #3
 8012242:	d9e2      	bls.n	801220a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012244:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012248:	2b04      	cmp	r3, #4
 801224a:	d101      	bne.n	8012250 <find_volume+0x184>
 801224c:	2301      	movs	r3, #1
 801224e:	e17e      	b.n	801254e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012254:	2b01      	cmp	r3, #1
 8012256:	d901      	bls.n	801225c <find_volume+0x190>
 8012258:	230d      	movs	r3, #13
 801225a:	e178      	b.n	801254e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801225e:	3330      	adds	r3, #48	@ 0x30
 8012260:	330b      	adds	r3, #11
 8012262:	4618      	mov	r0, r3
 8012264:	f7fe fd18 	bl	8010c98 <ld_word>
 8012268:	4603      	mov	r3, r0
 801226a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801226e:	d001      	beq.n	8012274 <find_volume+0x1a8>
 8012270:	230d      	movs	r3, #13
 8012272:	e16c      	b.n	801254e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012276:	3330      	adds	r3, #48	@ 0x30
 8012278:	3316      	adds	r3, #22
 801227a:	4618      	mov	r0, r3
 801227c:	f7fe fd0c 	bl	8010c98 <ld_word>
 8012280:	4603      	mov	r3, r0
 8012282:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012286:	2b00      	cmp	r3, #0
 8012288:	d106      	bne.n	8012298 <find_volume+0x1cc>
 801228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228c:	3330      	adds	r3, #48	@ 0x30
 801228e:	3324      	adds	r3, #36	@ 0x24
 8012290:	4618      	mov	r0, r3
 8012292:	f7fe fd19 	bl	8010cc8 <ld_dword>
 8012296:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801229a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801229c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801229e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80122a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80122a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122aa:	789b      	ldrb	r3, [r3, #2]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d005      	beq.n	80122bc <find_volume+0x1f0>
 80122b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b2:	789b      	ldrb	r3, [r3, #2]
 80122b4:	2b02      	cmp	r3, #2
 80122b6:	d001      	beq.n	80122bc <find_volume+0x1f0>
 80122b8:	230d      	movs	r3, #13
 80122ba:	e148      	b.n	801254e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80122bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122be:	789b      	ldrb	r3, [r3, #2]
 80122c0:	461a      	mov	r2, r3
 80122c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122c4:	fb02 f303 	mul.w	r3, r2, r3
 80122c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80122ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80122d0:	461a      	mov	r2, r3
 80122d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80122d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d8:	895b      	ldrh	r3, [r3, #10]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d008      	beq.n	80122f0 <find_volume+0x224>
 80122de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122e0:	895b      	ldrh	r3, [r3, #10]
 80122e2:	461a      	mov	r2, r3
 80122e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122e6:	895b      	ldrh	r3, [r3, #10]
 80122e8:	3b01      	subs	r3, #1
 80122ea:	4013      	ands	r3, r2
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <find_volume+0x228>
 80122f0:	230d      	movs	r3, #13
 80122f2:	e12c      	b.n	801254e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80122f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f6:	3330      	adds	r3, #48	@ 0x30
 80122f8:	3311      	adds	r3, #17
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fe fccc 	bl	8010c98 <ld_word>
 8012300:	4603      	mov	r3, r0
 8012302:	461a      	mov	r2, r3
 8012304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012306:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801230a:	891b      	ldrh	r3, [r3, #8]
 801230c:	f003 030f 	and.w	r3, r3, #15
 8012310:	b29b      	uxth	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d001      	beq.n	801231a <find_volume+0x24e>
 8012316:	230d      	movs	r3, #13
 8012318:	e119      	b.n	801254e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801231c:	3330      	adds	r3, #48	@ 0x30
 801231e:	3313      	adds	r3, #19
 8012320:	4618      	mov	r0, r3
 8012322:	f7fe fcb9 	bl	8010c98 <ld_word>
 8012326:	4603      	mov	r3, r0
 8012328:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801232a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801232c:	2b00      	cmp	r3, #0
 801232e:	d106      	bne.n	801233e <find_volume+0x272>
 8012330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012332:	3330      	adds	r3, #48	@ 0x30
 8012334:	3320      	adds	r3, #32
 8012336:	4618      	mov	r0, r3
 8012338:	f7fe fcc6 	bl	8010cc8 <ld_dword>
 801233c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801233e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012340:	3330      	adds	r3, #48	@ 0x30
 8012342:	330e      	adds	r3, #14
 8012344:	4618      	mov	r0, r3
 8012346:	f7fe fca7 	bl	8010c98 <ld_word>
 801234a:	4603      	mov	r3, r0
 801234c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801234e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <find_volume+0x28c>
 8012354:	230d      	movs	r3, #13
 8012356:	e0fa      	b.n	801254e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012358:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801235a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801235c:	4413      	add	r3, r2
 801235e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012360:	8912      	ldrh	r2, [r2, #8]
 8012362:	0912      	lsrs	r2, r2, #4
 8012364:	b292      	uxth	r2, r2
 8012366:	4413      	add	r3, r2
 8012368:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801236a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801236e:	429a      	cmp	r2, r3
 8012370:	d204      	bcs.n	801237c <find_volume+0x2b0>
 8012372:	230d      	movs	r3, #13
 8012374:	e0eb      	b.n	801254e <find_volume+0x482>
 8012376:	bf00      	nop
 8012378:	24000d68 	.word	0x24000d68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801237c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012380:	1ad3      	subs	r3, r2, r3
 8012382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012384:	8952      	ldrh	r2, [r2, #10]
 8012386:	fbb3 f3f2 	udiv	r3, r3, r2
 801238a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <find_volume+0x2ca>
 8012392:	230d      	movs	r3, #13
 8012394:	e0db      	b.n	801254e <find_volume+0x482>
		fmt = FS_FAT32;
 8012396:	2303      	movs	r3, #3
 8012398:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d802      	bhi.n	80123ac <find_volume+0x2e0>
 80123a6:	2302      	movs	r3, #2
 80123a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80123ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d802      	bhi.n	80123bc <find_volume+0x2f0>
 80123b6:	2301      	movs	r3, #1
 80123b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80123bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123be:	1c9a      	adds	r2, r3, #2
 80123c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80123c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123c8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80123ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80123cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123ce:	441a      	add	r2, r3
 80123d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80123d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123d8:	441a      	add	r2, r3
 80123da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123dc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80123de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80123e2:	2b03      	cmp	r3, #3
 80123e4:	d11e      	bne.n	8012424 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80123e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e8:	3330      	adds	r3, #48	@ 0x30
 80123ea:	332a      	adds	r3, #42	@ 0x2a
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7fe fc53 	bl	8010c98 <ld_word>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <find_volume+0x330>
 80123f8:	230d      	movs	r3, #13
 80123fa:	e0a8      	b.n	801254e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80123fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d001      	beq.n	8012408 <find_volume+0x33c>
 8012404:	230d      	movs	r3, #13
 8012406:	e0a2      	b.n	801254e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801240a:	3330      	adds	r3, #48	@ 0x30
 801240c:	332c      	adds	r3, #44	@ 0x2c
 801240e:	4618      	mov	r0, r3
 8012410:	f7fe fc5a 	bl	8010cc8 <ld_dword>
 8012414:	4602      	mov	r2, r0
 8012416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012418:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801241c:	695b      	ldr	r3, [r3, #20]
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	647b      	str	r3, [r7, #68]	@ 0x44
 8012422:	e01f      	b.n	8012464 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012426:	891b      	ldrh	r3, [r3, #8]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <find_volume+0x364>
 801242c:	230d      	movs	r3, #13
 801242e:	e08e      	b.n	801254e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012432:	6a1a      	ldr	r2, [r3, #32]
 8012434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012436:	441a      	add	r2, r3
 8012438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801243c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012440:	2b02      	cmp	r3, #2
 8012442:	d103      	bne.n	801244c <find_volume+0x380>
 8012444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012446:	695b      	ldr	r3, [r3, #20]
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	e00a      	b.n	8012462 <find_volume+0x396>
 801244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801244e:	695a      	ldr	r2, [r3, #20]
 8012450:	4613      	mov	r3, r2
 8012452:	005b      	lsls	r3, r3, #1
 8012454:	4413      	add	r3, r2
 8012456:	085a      	lsrs	r2, r3, #1
 8012458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245a:	695b      	ldr	r3, [r3, #20]
 801245c:	f003 0301 	and.w	r3, r3, #1
 8012460:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012462:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012466:	699a      	ldr	r2, [r3, #24]
 8012468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801246a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801246e:	0a5b      	lsrs	r3, r3, #9
 8012470:	429a      	cmp	r2, r3
 8012472:	d201      	bcs.n	8012478 <find_volume+0x3ac>
 8012474:	230d      	movs	r3, #13
 8012476:	e06a      	b.n	801254e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801247a:	f04f 32ff 	mov.w	r2, #4294967295
 801247e:	611a      	str	r2, [r3, #16]
 8012480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012482:	691a      	ldr	r2, [r3, #16]
 8012484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012486:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801248a:	2280      	movs	r2, #128	@ 0x80
 801248c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801248e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012492:	2b03      	cmp	r3, #3
 8012494:	d149      	bne.n	801252a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012498:	3330      	adds	r3, #48	@ 0x30
 801249a:	3330      	adds	r3, #48	@ 0x30
 801249c:	4618      	mov	r0, r3
 801249e:	f7fe fbfb 	bl	8010c98 <ld_word>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d140      	bne.n	801252a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80124a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124aa:	3301      	adds	r3, #1
 80124ac:	4619      	mov	r1, r3
 80124ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80124b0:	f7fe fea2 	bl	80111f8 <move_window>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d137      	bne.n	801252a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80124ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124bc:	2200      	movs	r2, #0
 80124be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80124c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c2:	3330      	adds	r3, #48	@ 0x30
 80124c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fe fbe5 	bl	8010c98 <ld_word>
 80124ce:	4603      	mov	r3, r0
 80124d0:	461a      	mov	r2, r3
 80124d2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d127      	bne.n	801252a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80124da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124dc:	3330      	adds	r3, #48	@ 0x30
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fe fbf2 	bl	8010cc8 <ld_dword>
 80124e4:	4603      	mov	r3, r0
 80124e6:	4a1c      	ldr	r2, [pc, #112]	@ (8012558 <find_volume+0x48c>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d11e      	bne.n	801252a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80124ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ee:	3330      	adds	r3, #48	@ 0x30
 80124f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fe fbe7 	bl	8010cc8 <ld_dword>
 80124fa:	4603      	mov	r3, r0
 80124fc:	4a17      	ldr	r2, [pc, #92]	@ (801255c <find_volume+0x490>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d113      	bne.n	801252a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012504:	3330      	adds	r3, #48	@ 0x30
 8012506:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801250a:	4618      	mov	r0, r3
 801250c:	f7fe fbdc 	bl	8010cc8 <ld_dword>
 8012510:	4602      	mov	r2, r0
 8012512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012514:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012518:	3330      	adds	r3, #48	@ 0x30
 801251a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801251e:	4618      	mov	r0, r3
 8012520:	f7fe fbd2 	bl	8010cc8 <ld_dword>
 8012524:	4602      	mov	r2, r0
 8012526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012528:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012530:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012532:	4b0b      	ldr	r3, [pc, #44]	@ (8012560 <find_volume+0x494>)
 8012534:	881b      	ldrh	r3, [r3, #0]
 8012536:	3301      	adds	r3, #1
 8012538:	b29a      	uxth	r2, r3
 801253a:	4b09      	ldr	r3, [pc, #36]	@ (8012560 <find_volume+0x494>)
 801253c:	801a      	strh	r2, [r3, #0]
 801253e:	4b08      	ldr	r3, [pc, #32]	@ (8012560 <find_volume+0x494>)
 8012540:	881a      	ldrh	r2, [r3, #0]
 8012542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012544:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012548:	f7fe fdee 	bl	8011128 <clear_lock>
#endif
	return FR_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3758      	adds	r7, #88	@ 0x58
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	41615252 	.word	0x41615252
 801255c:	61417272 	.word	0x61417272
 8012560:	24000d6c 	.word	0x24000d6c

08012564 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801256e:	2309      	movs	r3, #9
 8012570:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d01c      	beq.n	80125b2 <validate+0x4e>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d018      	beq.n	80125b2 <validate+0x4e>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d013      	beq.n	80125b2 <validate+0x4e>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	889a      	ldrh	r2, [r3, #4]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	88db      	ldrh	r3, [r3, #6]
 8012594:	429a      	cmp	r2, r3
 8012596:	d10c      	bne.n	80125b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	785b      	ldrb	r3, [r3, #1]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fe fada 	bl	8010b58 <disk_status>
 80125a4:	4603      	mov	r3, r0
 80125a6:	f003 0301 	and.w	r3, r3, #1
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d101      	bne.n	80125b2 <validate+0x4e>
			res = FR_OK;
 80125ae:	2300      	movs	r3, #0
 80125b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <validate+0x5a>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	e000      	b.n	80125c0 <validate+0x5c>
 80125be:	2300      	movs	r3, #0
 80125c0:	683a      	ldr	r2, [r7, #0]
 80125c2:	6013      	str	r3, [r2, #0]
	return res;
 80125c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
	...

080125d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b088      	sub	sp, #32
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	4613      	mov	r3, r2
 80125dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80125e2:	f107 0310 	add.w	r3, r7, #16
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7ff fcd5 	bl	8011f96 <get_ldnumber>
 80125ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	da01      	bge.n	80125f8 <f_mount+0x28>
 80125f4:	230b      	movs	r3, #11
 80125f6:	e02b      	b.n	8012650 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80125f8:	4a17      	ldr	r2, [pc, #92]	@ (8012658 <f_mount+0x88>)
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012600:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d005      	beq.n	8012614 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012608:	69b8      	ldr	r0, [r7, #24]
 801260a:	f7fe fd8d 	bl	8011128 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	2200      	movs	r2, #0
 8012612:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d002      	beq.n	8012620 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2200      	movs	r2, #0
 801261e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	490d      	ldr	r1, [pc, #52]	@ (8012658 <f_mount+0x88>)
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <f_mount+0x66>
 8012630:	79fb      	ldrb	r3, [r7, #7]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d001      	beq.n	801263a <f_mount+0x6a>
 8012636:	2300      	movs	r3, #0
 8012638:	e00a      	b.n	8012650 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801263a:	f107 010c 	add.w	r1, r7, #12
 801263e:	f107 0308 	add.w	r3, r7, #8
 8012642:	2200      	movs	r2, #0
 8012644:	4618      	mov	r0, r3
 8012646:	f7ff fd41 	bl	80120cc <find_volume>
 801264a:	4603      	mov	r3, r0
 801264c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012650:	4618      	mov	r0, r3
 8012652:	3720      	adds	r7, #32
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	24000d68 	.word	0x24000d68

0801265c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b098      	sub	sp, #96	@ 0x60
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	4613      	mov	r3, r2
 8012668:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d101      	bne.n	8012674 <f_open+0x18>
 8012670:	2309      	movs	r3, #9
 8012672:	e1a9      	b.n	80129c8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012674:	79fb      	ldrb	r3, [r7, #7]
 8012676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801267a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801267c:	79fa      	ldrb	r2, [r7, #7]
 801267e:	f107 0110 	add.w	r1, r7, #16
 8012682:	f107 0308 	add.w	r3, r7, #8
 8012686:	4618      	mov	r0, r3
 8012688:	f7ff fd20 	bl	80120cc <find_volume>
 801268c:	4603      	mov	r3, r0
 801268e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012692:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012696:	2b00      	cmp	r3, #0
 8012698:	f040 818d 	bne.w	80129b6 <f_open+0x35a>
		dj.obj.fs = fs;
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	f107 0314 	add.w	r3, r7, #20
 80126a6:	4611      	mov	r1, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff fc03 	bl	8011eb4 <follow_path>
 80126ae:	4603      	mov	r3, r0
 80126b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80126b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d118      	bne.n	80126ee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80126bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80126c0:	b25b      	sxtb	r3, r3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	da03      	bge.n	80126ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80126c6:	2306      	movs	r3, #6
 80126c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80126cc:	e00f      	b.n	80126ee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80126ce:	79fb      	ldrb	r3, [r7, #7]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	bf8c      	ite	hi
 80126d4:	2301      	movhi	r3, #1
 80126d6:	2300      	movls	r3, #0
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	461a      	mov	r2, r3
 80126dc:	f107 0314 	add.w	r3, r7, #20
 80126e0:	4611      	mov	r1, r2
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fe fbd8 	bl	8010e98 <chk_lock>
 80126e8:	4603      	mov	r3, r0
 80126ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	f003 031c 	and.w	r3, r3, #28
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d07f      	beq.n	80127f8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80126f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d017      	beq.n	8012730 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012700:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012704:	2b04      	cmp	r3, #4
 8012706:	d10e      	bne.n	8012726 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012708:	f7fe fc22 	bl	8010f50 <enq_lock>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d006      	beq.n	8012720 <f_open+0xc4>
 8012712:	f107 0314 	add.w	r3, r7, #20
 8012716:	4618      	mov	r0, r3
 8012718:	f7ff fb06 	bl	8011d28 <dir_register>
 801271c:	4603      	mov	r3, r0
 801271e:	e000      	b.n	8012722 <f_open+0xc6>
 8012720:	2312      	movs	r3, #18
 8012722:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012726:	79fb      	ldrb	r3, [r7, #7]
 8012728:	f043 0308 	orr.w	r3, r3, #8
 801272c:	71fb      	strb	r3, [r7, #7]
 801272e:	e010      	b.n	8012752 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012730:	7ebb      	ldrb	r3, [r7, #26]
 8012732:	f003 0311 	and.w	r3, r3, #17
 8012736:	2b00      	cmp	r3, #0
 8012738:	d003      	beq.n	8012742 <f_open+0xe6>
					res = FR_DENIED;
 801273a:	2307      	movs	r3, #7
 801273c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012740:	e007      	b.n	8012752 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	f003 0304 	and.w	r3, r3, #4
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <f_open+0xf6>
 801274c:	2308      	movs	r3, #8
 801274e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012752:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012756:	2b00      	cmp	r3, #0
 8012758:	d168      	bne.n	801282c <f_open+0x1d0>
 801275a:	79fb      	ldrb	r3, [r7, #7]
 801275c:	f003 0308 	and.w	r3, r3, #8
 8012760:	2b00      	cmp	r3, #0
 8012762:	d063      	beq.n	801282c <f_open+0x1d0>
				dw = GET_FATTIME();
 8012764:	f7fd fea8 	bl	80104b8 <get_fattime>
 8012768:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801276c:	330e      	adds	r3, #14
 801276e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012770:	4618      	mov	r0, r3
 8012772:	f7fe fae7 	bl	8010d44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012778:	3316      	adds	r3, #22
 801277a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801277c:	4618      	mov	r0, r3
 801277e:	f7fe fae1 	bl	8010d44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012784:	330b      	adds	r3, #11
 8012786:	2220      	movs	r2, #32
 8012788:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801278e:	4611      	mov	r1, r2
 8012790:	4618      	mov	r0, r3
 8012792:	f7ff fa35 	bl	8011c00 <ld_clust>
 8012796:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801279c:	2200      	movs	r2, #0
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff fa4d 	bl	8011c3e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80127a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127a6:	331c      	adds	r3, #28
 80127a8:	2100      	movs	r1, #0
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe faca 	bl	8010d44 <st_dword>
					fs->wflag = 1;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2201      	movs	r2, #1
 80127b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80127b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d037      	beq.n	801282c <f_open+0x1d0>
						dw = fs->winsect;
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127c0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80127c2:	f107 0314 	add.w	r3, r7, #20
 80127c6:	2200      	movs	r2, #0
 80127c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fe ff60 	bl	8011690 <remove_chain>
 80127d0:	4603      	mov	r3, r0
 80127d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80127d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d126      	bne.n	801282c <f_open+0x1d0>
							res = move_window(fs, dw);
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe fd08 	bl	80111f8 <move_window>
 80127e8:	4603      	mov	r3, r0
 80127ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80127f2:	3a01      	subs	r2, #1
 80127f4:	60da      	str	r2, [r3, #12]
 80127f6:	e019      	b.n	801282c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80127f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d115      	bne.n	801282c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012800:	7ebb      	ldrb	r3, [r7, #26]
 8012802:	f003 0310 	and.w	r3, r3, #16
 8012806:	2b00      	cmp	r3, #0
 8012808:	d003      	beq.n	8012812 <f_open+0x1b6>
					res = FR_NO_FILE;
 801280a:	2304      	movs	r3, #4
 801280c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012810:	e00c      	b.n	801282c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012812:	79fb      	ldrb	r3, [r7, #7]
 8012814:	f003 0302 	and.w	r3, r3, #2
 8012818:	2b00      	cmp	r3, #0
 801281a:	d007      	beq.n	801282c <f_open+0x1d0>
 801281c:	7ebb      	ldrb	r3, [r7, #26]
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	2b00      	cmp	r3, #0
 8012824:	d002      	beq.n	801282c <f_open+0x1d0>
						res = FR_DENIED;
 8012826:	2307      	movs	r3, #7
 8012828:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801282c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012830:	2b00      	cmp	r3, #0
 8012832:	d126      	bne.n	8012882 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012834:	79fb      	ldrb	r3, [r7, #7]
 8012836:	f003 0308 	and.w	r3, r3, #8
 801283a:	2b00      	cmp	r3, #0
 801283c:	d003      	beq.n	8012846 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801283e:	79fb      	ldrb	r3, [r7, #7]
 8012840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012844:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801284e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012854:	79fb      	ldrb	r3, [r7, #7]
 8012856:	2b01      	cmp	r3, #1
 8012858:	bf8c      	ite	hi
 801285a:	2301      	movhi	r3, #1
 801285c:	2300      	movls	r3, #0
 801285e:	b2db      	uxtb	r3, r3
 8012860:	461a      	mov	r2, r3
 8012862:	f107 0314 	add.w	r3, r7, #20
 8012866:	4611      	mov	r1, r2
 8012868:	4618      	mov	r0, r3
 801286a:	f7fe fb93 	bl	8010f94 <inc_lock>
 801286e:	4602      	mov	r2, r0
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	691b      	ldr	r3, [r3, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <f_open+0x226>
 801287c:	2302      	movs	r3, #2
 801287e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012882:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012886:	2b00      	cmp	r3, #0
 8012888:	f040 8095 	bne.w	80129b6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff f9b4 	bl	8011c00 <ld_clust>
 8012898:	4602      	mov	r2, r0
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801289e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128a0:	331c      	adds	r3, #28
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fe fa10 	bl	8010cc8 <ld_dword>
 80128a8:	4602      	mov	r2, r0
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2200      	movs	r2, #0
 80128b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80128b4:	693a      	ldr	r2, [r7, #16]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	88da      	ldrh	r2, [r3, #6]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	79fa      	ldrb	r2, [r7, #7]
 80128c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	2200      	movs	r2, #0
 80128cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	2200      	movs	r2, #0
 80128d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	3330      	adds	r3, #48	@ 0x30
 80128de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128e2:	2100      	movs	r1, #0
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fe fa7a 	bl	8010dde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80128ea:	79fb      	ldrb	r3, [r7, #7]
 80128ec:	f003 0320 	and.w	r3, r3, #32
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d060      	beq.n	80129b6 <f_open+0x35a>
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d05c      	beq.n	80129b6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	68da      	ldr	r2, [r3, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	895b      	ldrh	r3, [r3, #10]
 8012908:	025b      	lsls	r3, r3, #9
 801290a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	657b      	str	r3, [r7, #84]	@ 0x54
 8012918:	e016      	b.n	8012948 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fd25 	bl	801136e <get_fat>
 8012924:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012928:	2b01      	cmp	r3, #1
 801292a:	d802      	bhi.n	8012932 <f_open+0x2d6>
 801292c:	2302      	movs	r3, #2
 801292e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012938:	d102      	bne.n	8012940 <f_open+0x2e4>
 801293a:	2301      	movs	r3, #1
 801293c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012940:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	657b      	str	r3, [r7, #84]	@ 0x54
 8012948:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801294c:	2b00      	cmp	r3, #0
 801294e:	d103      	bne.n	8012958 <f_open+0x2fc>
 8012950:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012954:	429a      	cmp	r2, r3
 8012956:	d8e0      	bhi.n	801291a <f_open+0x2be>
				}
				fp->clust = clst;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801295c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801295e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012962:	2b00      	cmp	r3, #0
 8012964:	d127      	bne.n	80129b6 <f_open+0x35a>
 8012966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801296c:	2b00      	cmp	r3, #0
 801296e:	d022      	beq.n	80129b6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012974:	4618      	mov	r0, r3
 8012976:	f7fe fcdb 	bl	8011330 <clust2sect>
 801297a:	6478      	str	r0, [r7, #68]	@ 0x44
 801297c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801297e:	2b00      	cmp	r3, #0
 8012980:	d103      	bne.n	801298a <f_open+0x32e>
						res = FR_INT_ERR;
 8012982:	2302      	movs	r3, #2
 8012984:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012988:	e015      	b.n	80129b6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801298a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801298c:	0a5a      	lsrs	r2, r3, #9
 801298e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012990:	441a      	add	r2, r3
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	7858      	ldrb	r0, [r3, #1]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6a1a      	ldr	r2, [r3, #32]
 80129a4:	2301      	movs	r3, #1
 80129a6:	f7fe f919 	bl	8010bdc <disk_read>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d002      	beq.n	80129b6 <f_open+0x35a>
 80129b0:	2301      	movs	r3, #1
 80129b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80129b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <f_open+0x368>
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80129c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3760      	adds	r7, #96	@ 0x60
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b08e      	sub	sp, #56	@ 0x38
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2200      	movs	r2, #0
 80129e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f107 0214 	add.w	r2, r7, #20
 80129ee:	4611      	mov	r1, r2
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7ff fdb7 	bl	8012564 <validate>
 80129f6:	4603      	mov	r3, r0
 80129f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80129fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d107      	bne.n	8012a14 <f_read+0x44>
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	7d5b      	ldrb	r3, [r3, #21]
 8012a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d002      	beq.n	8012a1a <f_read+0x4a>
 8012a14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a18:	e115      	b.n	8012c46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	7d1b      	ldrb	r3, [r3, #20]
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d101      	bne.n	8012a2a <f_read+0x5a>
 8012a26:	2307      	movs	r3, #7
 8012a28:	e10d      	b.n	8012c46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	68da      	ldr	r2, [r3, #12]
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	699b      	ldr	r3, [r3, #24]
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	6a3b      	ldr	r3, [r7, #32]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	f240 80fe 	bls.w	8012c3c <f_read+0x26c>
 8012a40:	6a3b      	ldr	r3, [r7, #32]
 8012a42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012a44:	e0fa      	b.n	8012c3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	699b      	ldr	r3, [r3, #24]
 8012a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f040 80c6 	bne.w	8012be0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	699b      	ldr	r3, [r3, #24]
 8012a58:	0a5b      	lsrs	r3, r3, #9
 8012a5a:	697a      	ldr	r2, [r7, #20]
 8012a5c:	8952      	ldrh	r2, [r2, #10]
 8012a5e:	3a01      	subs	r2, #1
 8012a60:	4013      	ands	r3, r2
 8012a62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d12f      	bne.n	8012aca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	699b      	ldr	r3, [r3, #24]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d103      	bne.n	8012a7a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a78:	e013      	b.n	8012aa2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d007      	beq.n	8012a92 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	699b      	ldr	r3, [r3, #24]
 8012a86:	4619      	mov	r1, r3
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f7fe fefe 	bl	801188a <clmt_clust>
 8012a8e:	6338      	str	r0, [r7, #48]	@ 0x30
 8012a90:	e007      	b.n	8012aa2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	f7fe fc67 	bl	801136e <get_fat>
 8012aa0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d804      	bhi.n	8012ab2 <f_read+0xe2>
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2202      	movs	r2, #2
 8012aac:	755a      	strb	r2, [r3, #21]
 8012aae:	2302      	movs	r3, #2
 8012ab0:	e0c9      	b.n	8012c46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab8:	d104      	bne.n	8012ac4 <f_read+0xf4>
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2201      	movs	r2, #1
 8012abe:	755a      	strb	r2, [r3, #21]
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e0c0      	b.n	8012c46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ac8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012aca:	697a      	ldr	r2, [r7, #20]
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	69db      	ldr	r3, [r3, #28]
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	4610      	mov	r0, r2
 8012ad4:	f7fe fc2c 	bl	8011330 <clust2sect>
 8012ad8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d104      	bne.n	8012aea <f_read+0x11a>
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	755a      	strb	r2, [r3, #21]
 8012ae6:	2302      	movs	r3, #2
 8012ae8:	e0ad      	b.n	8012c46 <f_read+0x276>
			sect += csect;
 8012aea:	69ba      	ldr	r2, [r7, #24]
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	4413      	add	r3, r2
 8012af0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	0a5b      	lsrs	r3, r3, #9
 8012af6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d039      	beq.n	8012b72 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012afe:	69fa      	ldr	r2, [r7, #28]
 8012b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b02:	4413      	add	r3, r2
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	8952      	ldrh	r2, [r2, #10]
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d905      	bls.n	8012b18 <f_read+0x148>
					cc = fs->csize - csect;
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	895b      	ldrh	r3, [r3, #10]
 8012b10:	461a      	mov	r2, r3
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	7858      	ldrb	r0, [r3, #1]
 8012b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b1e:	69ba      	ldr	r2, [r7, #24]
 8012b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012b22:	f7fe f85b 	bl	8010bdc <disk_read>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d004      	beq.n	8012b36 <f_read+0x166>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2201      	movs	r2, #1
 8012b30:	755a      	strb	r2, [r3, #21]
 8012b32:	2301      	movs	r3, #1
 8012b34:	e087      	b.n	8012c46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	7d1b      	ldrb	r3, [r3, #20]
 8012b3a:	b25b      	sxtb	r3, r3
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	da14      	bge.n	8012b6a <f_read+0x19a>
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	6a1a      	ldr	r2, [r3, #32]
 8012b44:	69bb      	ldr	r3, [r7, #24]
 8012b46:	1ad3      	subs	r3, r2, r3
 8012b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d90d      	bls.n	8012b6a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	6a1a      	ldr	r2, [r3, #32]
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	025b      	lsls	r3, r3, #9
 8012b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b5a:	18d0      	adds	r0, r2, r3
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	3330      	adds	r3, #48	@ 0x30
 8012b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b64:	4619      	mov	r1, r3
 8012b66:	f7fe f919 	bl	8010d9c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6c:	025b      	lsls	r3, r3, #9
 8012b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012b70:	e050      	b.n	8012c14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6a1b      	ldr	r3, [r3, #32]
 8012b76:	69ba      	ldr	r2, [r7, #24]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d02e      	beq.n	8012bda <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	7d1b      	ldrb	r3, [r3, #20]
 8012b80:	b25b      	sxtb	r3, r3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	da18      	bge.n	8012bb8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	7858      	ldrb	r0, [r3, #1]
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	6a1a      	ldr	r2, [r3, #32]
 8012b94:	2301      	movs	r3, #1
 8012b96:	f7fe f841 	bl	8010c1c <disk_write>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d004      	beq.n	8012baa <f_read+0x1da>
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	755a      	strb	r2, [r3, #21]
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e04d      	b.n	8012c46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	7d1b      	ldrb	r3, [r3, #20]
 8012bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012bb2:	b2da      	uxtb	r2, r3
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	7858      	ldrb	r0, [r3, #1]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	69ba      	ldr	r2, [r7, #24]
 8012bc6:	f7fe f809 	bl	8010bdc <disk_read>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d004      	beq.n	8012bda <f_read+0x20a>
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	755a      	strb	r2, [r3, #21]
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e035      	b.n	8012c46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	69ba      	ldr	r2, [r7, #24]
 8012bde:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	699b      	ldr	r3, [r3, #24]
 8012be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012be8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d901      	bls.n	8012bfa <f_read+0x22a>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	699b      	ldr	r3, [r3, #24]
 8012c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c08:	4413      	add	r3, r2
 8012c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c10:	f7fe f8c4 	bl	8010d9c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c18:	4413      	add	r3, r2
 8012c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	699a      	ldr	r2, [r3, #24]
 8012c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c22:	441a      	add	r2, r3
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	619a      	str	r2, [r3, #24]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c2e:	441a      	add	r2, r3
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f47f af01 	bne.w	8012a46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3738      	adds	r7, #56	@ 0x38
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b086      	sub	sp, #24
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f107 0208 	add.w	r2, r7, #8
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fc80 	bl	8012564 <validate>
 8012c64:	4603      	mov	r3, r0
 8012c66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c68:	7dfb      	ldrb	r3, [r7, #23]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d168      	bne.n	8012d40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7d1b      	ldrb	r3, [r3, #20]
 8012c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d062      	beq.n	8012d40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	7d1b      	ldrb	r3, [r3, #20]
 8012c7e:	b25b      	sxtb	r3, r3
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	da15      	bge.n	8012cb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	7858      	ldrb	r0, [r3, #1]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6a1a      	ldr	r2, [r3, #32]
 8012c92:	2301      	movs	r3, #1
 8012c94:	f7fd ffc2 	bl	8010c1c <disk_write>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <f_sync+0x54>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e04f      	b.n	8012d42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	7d1b      	ldrb	r3, [r3, #20]
 8012ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012cb0:	f7fd fc02 	bl	80104b8 <get_fattime>
 8012cb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	4610      	mov	r0, r2
 8012cc0:	f7fe fa9a 	bl	80111f8 <move_window>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012cc8:	7dfb      	ldrb	r3, [r7, #23]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d138      	bne.n	8012d40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	330b      	adds	r3, #11
 8012cd8:	781a      	ldrb	r2, [r3, #0]
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	330b      	adds	r3, #11
 8012cde:	f042 0220 	orr.w	r2, r2, #32
 8012ce2:	b2d2      	uxtb	r2, r2
 8012ce4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6818      	ldr	r0, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	461a      	mov	r2, r3
 8012cf0:	68f9      	ldr	r1, [r7, #12]
 8012cf2:	f7fe ffa4 	bl	8011c3e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f103 021c 	add.w	r2, r3, #28
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	4619      	mov	r1, r3
 8012d02:	4610      	mov	r0, r2
 8012d04:	f7fe f81e 	bl	8010d44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	3316      	adds	r3, #22
 8012d0c:	6939      	ldr	r1, [r7, #16]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fe f818 	bl	8010d44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	3312      	adds	r3, #18
 8012d18:	2100      	movs	r1, #0
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fd fff7 	bl	8010d0e <st_word>
					fs->wflag = 1;
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2201      	movs	r2, #1
 8012d24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fe fa93 	bl	8011254 <sync_fs>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	7d1b      	ldrb	r3, [r3, #20]
 8012d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3718      	adds	r7, #24
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b084      	sub	sp, #16
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff ff7b 	bl	8012c4e <f_sync>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012d5c:	7bfb      	ldrb	r3, [r7, #15]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d118      	bne.n	8012d94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f107 0208 	add.w	r2, r7, #8
 8012d68:	4611      	mov	r1, r2
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fbfa 	bl	8012564 <validate>
 8012d70:	4603      	mov	r3, r0
 8012d72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012d74:	7bfb      	ldrb	r3, [r7, #15]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d10c      	bne.n	8012d94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	691b      	ldr	r3, [r3, #16]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fe f996 	bl	80110b0 <dec_lock>
 8012d84:	4603      	mov	r3, r0
 8012d86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012d88:	7bfb      	ldrb	r3, [r7, #15]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d102      	bne.n	8012d94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2200      	movs	r2, #0
 8012d92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
	...

08012da0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b087      	sub	sp, #28
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	4613      	mov	r3, r2
 8012dac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012dae:	2301      	movs	r3, #1
 8012db0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012db2:	2300      	movs	r3, #0
 8012db4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012db6:	4b1f      	ldr	r3, [pc, #124]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012db8:	7a5b      	ldrb	r3, [r3, #9]
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d131      	bne.n	8012e24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012dc2:	7a5b      	ldrb	r3, [r3, #9]
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012dca:	2100      	movs	r1, #0
 8012dcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012dce:	4b19      	ldr	r3, [pc, #100]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012dd0:	7a5b      	ldrb	r3, [r3, #9]
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	4a17      	ldr	r2, [pc, #92]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	4413      	add	r3, r2
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012dde:	4b15      	ldr	r3, [pc, #84]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012de0:	7a5b      	ldrb	r3, [r3, #9]
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	461a      	mov	r2, r3
 8012de6:	4b13      	ldr	r3, [pc, #76]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012de8:	4413      	add	r3, r2
 8012dea:	79fa      	ldrb	r2, [r7, #7]
 8012dec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012dee:	4b11      	ldr	r3, [pc, #68]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012df0:	7a5b      	ldrb	r3, [r3, #9]
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	1c5a      	adds	r2, r3, #1
 8012df6:	b2d1      	uxtb	r1, r2
 8012df8:	4a0e      	ldr	r2, [pc, #56]	@ (8012e34 <FATFS_LinkDriverEx+0x94>)
 8012dfa:	7251      	strb	r1, [r2, #9]
 8012dfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012dfe:	7dbb      	ldrb	r3, [r7, #22]
 8012e00:	3330      	adds	r3, #48	@ 0x30
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	223a      	movs	r2, #58	@ 0x3a
 8012e0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	3302      	adds	r3, #2
 8012e14:	222f      	movs	r2, #47	@ 0x2f
 8012e16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	3303      	adds	r3, #3
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	371c      	adds	r7, #28
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr
 8012e32:	bf00      	nop
 8012e34:	24000d90 	.word	0x24000d90

08012e38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012e42:	2200      	movs	r2, #0
 8012e44:	6839      	ldr	r1, [r7, #0]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7ff ffaa 	bl	8012da0 <FATFS_LinkDriverEx>
 8012e4c:	4603      	mov	r3, r0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <_ZdlPvj>:
 8012e56:	f000 b9be 	b.w	80131d6 <_ZdlPv>

08012e5a <_ZdlPvjSt11align_val_t>:
 8012e5a:	4611      	mov	r1, r2
 8012e5c:	f000 b9bd 	b.w	80131da <_ZdlPvSt11align_val_t>

08012e60 <__cxa_guard_acquire>:
 8012e60:	6802      	ldr	r2, [r0, #0]
 8012e62:	07d2      	lsls	r2, r2, #31
 8012e64:	4603      	mov	r3, r0
 8012e66:	d405      	bmi.n	8012e74 <__cxa_guard_acquire+0x14>
 8012e68:	7842      	ldrb	r2, [r0, #1]
 8012e6a:	b102      	cbz	r2, 8012e6e <__cxa_guard_acquire+0xe>
 8012e6c:	deff      	udf	#255	@ 0xff
 8012e6e:	2001      	movs	r0, #1
 8012e70:	7058      	strb	r0, [r3, #1]
 8012e72:	4770      	bx	lr
 8012e74:	2000      	movs	r0, #0
 8012e76:	4770      	bx	lr

08012e78 <__cxa_guard_release>:
 8012e78:	2301      	movs	r3, #1
 8012e7a:	6003      	str	r3, [r0, #0]
 8012e7c:	4770      	bx	lr

08012e7e <_Znwj>:
 8012e7e:	2801      	cmp	r0, #1
 8012e80:	bf38      	it	cc
 8012e82:	2001      	movcc	r0, #1
 8012e84:	b510      	push	{r4, lr}
 8012e86:	4604      	mov	r4, r0
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f000 f9b9 	bl	8013200 <malloc>
 8012e8e:	b100      	cbz	r0, 8012e92 <_Znwj+0x14>
 8012e90:	bd10      	pop	{r4, pc}
 8012e92:	f000 f9a5 	bl	80131e0 <_ZSt15get_new_handlerv>
 8012e96:	b908      	cbnz	r0, 8012e9c <_Znwj+0x1e>
 8012e98:	f000 f9aa 	bl	80131f0 <abort>
 8012e9c:	4780      	blx	r0
 8012e9e:	e7f3      	b.n	8012e88 <_Znwj+0xa>

08012ea0 <_ZnwjSt11align_val_t>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	4608      	mov	r0, r1
 8012ea6:	460d      	mov	r5, r1
 8012ea8:	f7ed fc4e 	bl	8000748 <__popcountsi2>
 8012eac:	2801      	cmp	r0, #1
 8012eae:	d001      	beq.n	8012eb4 <_ZnwjSt11align_val_t+0x14>
 8012eb0:	f000 f99e 	bl	80131f0 <abort>
 8012eb4:	2c01      	cmp	r4, #1
 8012eb6:	bf38      	it	cc
 8012eb8:	2401      	movcc	r4, #1
 8012eba:	4621      	mov	r1, r4
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f000 fa5d 	bl	801337c <memalign>
 8012ec2:	b100      	cbz	r0, 8012ec6 <_ZnwjSt11align_val_t+0x26>
 8012ec4:	bd38      	pop	{r3, r4, r5, pc}
 8012ec6:	f000 f98b 	bl	80131e0 <_ZSt15get_new_handlerv>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d0f0      	beq.n	8012eb0 <_ZnwjSt11align_val_t+0x10>
 8012ece:	4780      	blx	r0
 8012ed0:	e7f3      	b.n	8012eba <_ZnwjSt11align_val_t+0x1a>

08012ed2 <_ZSt17__throw_bad_allocv>:
 8012ed2:	b508      	push	{r3, lr}
 8012ed4:	f000 f98c 	bl	80131f0 <abort>

08012ed8 <_ZSt20__throw_length_errorPKc>:
 8012ed8:	b508      	push	{r3, lr}
 8012eda:	f000 f989 	bl	80131f0 <abort>

08012ede <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012ede:	b10a      	cbz	r2, 8012ee4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012ee0:	f000 bd9d 	b.w	8013a1e <memcpy>
 8012ee4:	4770      	bx	lr

08012ee6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8012ee6:	f850 3b08 	ldr.w	r3, [r0], #8
 8012eea:	1a1b      	subs	r3, r3, r0
 8012eec:	4258      	negs	r0, r3
 8012eee:	4158      	adcs	r0, r3
 8012ef0:	4770      	bx	lr
	...

08012ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012ef4:	b508      	push	{r3, lr}
 8012ef6:	680b      	ldr	r3, [r1, #0]
 8012ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012efc:	d302      	bcc.n	8012f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012efe:	480d      	ldr	r0, [pc, #52]	@ (8012f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012f00:	f7ff ffea 	bl	8012ed8 <_ZSt20__throw_length_errorPKc>
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d90b      	bls.n	8012f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012f08:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012f0c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012f10:	d206      	bcs.n	8012f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012f12:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8012f16:	bf2a      	itet	cs
 8012f18:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8012f1c:	6008      	strcc	r0, [r1, #0]
 8012f1e:	600b      	strcs	r3, [r1, #0]
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	3001      	adds	r0, #1
 8012f24:	d501      	bpl.n	8012f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012f26:	f7ff ffd4 	bl	8012ed2 <_ZSt17__throw_bad_allocv>
 8012f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012f2e:	f7ff bfa6 	b.w	8012e7e <_Znwj>
 8012f32:	bf00      	nop
 8012f34:	08014ad0 	.word	0x08014ad0

08012f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012f38:	b510      	push	{r4, lr}
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	f7ff ffd3 	bl	8012ee6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012f40:	b920      	cbnz	r0, 8012f4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8012f42:	6820      	ldr	r0, [r4, #0]
 8012f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f48:	f000 b945 	b.w	80131d6 <_ZdlPv>
 8012f4c:	bd10      	pop	{r4, pc}

08012f4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012f4e:	6840      	ldr	r0, [r0, #4]
 8012f50:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012f54:	3901      	subs	r1, #1
 8012f56:	1a09      	subs	r1, r1, r0
 8012f58:	4291      	cmp	r1, r2
 8012f5a:	b508      	push	{r3, lr}
 8012f5c:	d202      	bcs.n	8012f64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7ff ffba 	bl	8012ed8 <_ZSt20__throw_length_errorPKc>
 8012f64:	bd08      	pop	{r3, pc}

08012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8012f66:	2a01      	cmp	r2, #1
 8012f68:	b410      	push	{r4}
 8012f6a:	d104      	bne.n	8012f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012f6c:	780a      	ldrb	r2, [r1, #0]
 8012f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f72:	7002      	strb	r2, [r0, #0]
 8012f74:	4770      	bx	lr
 8012f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f7a:	f7ff bfb0 	b.w	8012ede <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012f7e:	2a01      	cmp	r2, #1
 8012f80:	b430      	push	{r4, r5}
 8012f82:	d103      	bne.n	8012f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012f84:	780b      	ldrb	r3, [r1, #0]
 8012f86:	7003      	strb	r3, [r0, #0]
 8012f88:	bc30      	pop	{r4, r5}
 8012f8a:	4770      	bx	lr
 8012f8c:	2a00      	cmp	r2, #0
 8012f8e:	d0fb      	beq.n	8012f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012f90:	bc30      	pop	{r4, r5}
 8012f92:	f000 bc5b 	b.w	801384c <memmove>

08012f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8012f96:	460b      	mov	r3, r1
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	b410      	push	{r4}
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	d103      	bne.n	8012faa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8012fa2:	7022      	strb	r2, [r4, #0]
 8012fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fa8:	4770      	bx	lr
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d0fa      	beq.n	8012fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8012fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	f000 bc64 	b.w	8013880 <memset>

08012fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8012fb8:	b508      	push	{r3, lr}
 8012fba:	1a52      	subs	r2, r2, r1
 8012fbc:	f7ff ffd3 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012fc0:	bd08      	pop	{r3, pc}

08012fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8012fc2:	f100 0208 	add.w	r2, r0, #8
 8012fc6:	6002      	str	r2, [r0, #0]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	6042      	str	r2, [r0, #4]
 8012fcc:	7202      	strb	r2, [r0, #8]
 8012fce:	4770      	bx	lr

08012fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	f7ff ffb0 	bl	8012f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012fd8:	4620      	mov	r0, r4
 8012fda:	bd10      	pop	{r4, pc}

08012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8012fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fde:	460c      	mov	r4, r1
 8012fe0:	4605      	mov	r5, r0
 8012fe2:	f7ff ff80 	bl	8012ee6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f7ff ff7c 	bl	8012ee6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012fee:	b190      	cbz	r0, 8013016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8012ff0:	42a5      	cmp	r5, r4
 8012ff2:	d00a      	beq.n	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8012ff4:	6862      	ldr	r2, [r4, #4]
 8012ff6:	b11a      	cbz	r2, 8013000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8012ff8:	6821      	ldr	r1, [r4, #0]
 8012ffa:	6828      	ldr	r0, [r5, #0]
 8012ffc:	f7ff ffb3 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013000:	6863      	ldr	r3, [r4, #4]
 8013002:	682a      	ldr	r2, [r5, #0]
 8013004:	606b      	str	r3, [r5, #4]
 8013006:	2100      	movs	r1, #0
 8013008:	54d1      	strb	r1, [r2, r3]
 801300a:	6822      	ldr	r2, [r4, #0]
 801300c:	2300      	movs	r3, #0
 801300e:	6063      	str	r3, [r4, #4]
 8013010:	7013      	strb	r3, [r2, #0]
 8013012:	4628      	mov	r0, r5
 8013014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013016:	b90e      	cbnz	r6, 801301c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8013018:	6828      	ldr	r0, [r5, #0]
 801301a:	68af      	ldr	r7, [r5, #8]
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	602b      	str	r3, [r5, #0]
 8013020:	6863      	ldr	r3, [r4, #4]
 8013022:	606b      	str	r3, [r5, #4]
 8013024:	68a3      	ldr	r3, [r4, #8]
 8013026:	60ab      	str	r3, [r5, #8]
 8013028:	b110      	cbz	r0, 8013030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801302a:	6020      	str	r0, [r4, #0]
 801302c:	60a7      	str	r7, [r4, #8]
 801302e:	e7ec      	b.n	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8013030:	f104 0308 	add.w	r3, r4, #8
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	e7e8      	b.n	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08013038 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8013038:	b510      	push	{r4, lr}
 801303a:	4604      	mov	r4, r0
 801303c:	f7ff ff53 	bl	8012ee6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013040:	b908      	cbnz	r0, 8013046 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8013042:	68a0      	ldr	r0, [r4, #8]
 8013044:	bd10      	pop	{r4, pc}
 8013046:	200f      	movs	r0, #15
 8013048:	e7fc      	b.n	8013044 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801304a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801304a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801304e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013050:	461f      	mov	r7, r3
 8013052:	6843      	ldr	r3, [r0, #4]
 8013054:	eb01 0802 	add.w	r8, r1, r2
 8013058:	1ab2      	subs	r2, r6, r2
 801305a:	441a      	add	r2, r3
 801305c:	4604      	mov	r4, r0
 801305e:	460d      	mov	r5, r1
 8013060:	eba3 0908 	sub.w	r9, r3, r8
 8013064:	9201      	str	r2, [sp, #4]
 8013066:	f7ff ffe7 	bl	8013038 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801306a:	a901      	add	r1, sp, #4
 801306c:	4602      	mov	r2, r0
 801306e:	4620      	mov	r0, r4
 8013070:	f7ff ff40 	bl	8012ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013074:	4682      	mov	sl, r0
 8013076:	b11d      	cbz	r5, 8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8013078:	6821      	ldr	r1, [r4, #0]
 801307a:	462a      	mov	r2, r5
 801307c:	f7ff ff73 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013080:	b137      	cbz	r7, 8013090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013082:	b12e      	cbz	r6, 8013090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013084:	4632      	mov	r2, r6
 8013086:	4639      	mov	r1, r7
 8013088:	eb0a 0005 	add.w	r0, sl, r5
 801308c:	f7ff ff6b 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013090:	f1b9 0f00 	cmp.w	r9, #0
 8013094:	d007      	beq.n	80130a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8013096:	6821      	ldr	r1, [r4, #0]
 8013098:	4435      	add	r5, r6
 801309a:	464a      	mov	r2, r9
 801309c:	4441      	add	r1, r8
 801309e:	eb0a 0005 	add.w	r0, sl, r5
 80130a2:	f7ff ff60 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80130a6:	4620      	mov	r0, r4
 80130a8:	f7ff ff46 	bl	8012f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80130ac:	9b01      	ldr	r3, [sp, #4]
 80130ae:	f8c4 a000 	str.w	sl, [r4]
 80130b2:	60a3      	str	r3, [r4, #8]
 80130b4:	b002      	add	sp, #8
 80130b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080130ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80130ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130bc:	4604      	mov	r4, r0
 80130be:	9101      	str	r1, [sp, #4]
 80130c0:	f7ff ffba 	bl	8013038 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80130c4:	9b01      	ldr	r3, [sp, #4]
 80130c6:	4283      	cmp	r3, r0
 80130c8:	4602      	mov	r2, r0
 80130ca:	d90f      	bls.n	80130ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80130cc:	a901      	add	r1, sp, #4
 80130ce:	4620      	mov	r0, r4
 80130d0:	f7ff ff10 	bl	8012ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80130d4:	6862      	ldr	r2, [r4, #4]
 80130d6:	6821      	ldr	r1, [r4, #0]
 80130d8:	3201      	adds	r2, #1
 80130da:	4605      	mov	r5, r0
 80130dc:	f7ff ff43 	bl	8012f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80130e0:	4620      	mov	r0, r4
 80130e2:	f7ff ff29 	bl	8012f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	6025      	str	r5, [r4, #0]
 80130ea:	60a3      	str	r3, [r4, #8]
 80130ec:	b003      	add	sp, #12
 80130ee:	bd30      	pop	{r4, r5, pc}

080130f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80130f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80130f4:	4616      	mov	r6, r2
 80130f6:	461d      	mov	r5, r3
 80130f8:	4604      	mov	r4, r0
 80130fa:	4b1b      	ldr	r3, [pc, #108]	@ (8013168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80130fc:	462a      	mov	r2, r5
 80130fe:	460f      	mov	r7, r1
 8013100:	4631      	mov	r1, r6
 8013102:	f7ff ff24 	bl	8012f4e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013106:	4620      	mov	r0, r4
 8013108:	f7ff ff96 	bl	8013038 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801310c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013110:	eba5 0806 	sub.w	r8, r5, r6
 8013114:	44c8      	add	r8, r9
 8013116:	4540      	cmp	r0, r8
 8013118:	d31d      	bcc.n	8013156 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801311a:	19f3      	adds	r3, r6, r7
 801311c:	ebb9 0203 	subs.w	r2, r9, r3
 8013120:	d007      	beq.n	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8013122:	42ae      	cmp	r6, r5
 8013124:	d005      	beq.n	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8013126:	6820      	ldr	r0, [r4, #0]
 8013128:	4438      	add	r0, r7
 801312a:	1981      	adds	r1, r0, r6
 801312c:	4428      	add	r0, r5
 801312e:	f7ff ff26 	bl	8012f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013132:	b135      	cbz	r5, 8013142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8013134:	6820      	ldr	r0, [r4, #0]
 8013136:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801313a:	4629      	mov	r1, r5
 801313c:	4438      	add	r0, r7
 801313e:	f7ff ff2a 	bl	8012f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8013142:	6823      	ldr	r3, [r4, #0]
 8013144:	f8c4 8004 	str.w	r8, [r4, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	4620      	mov	r0, r4
 801314c:	f803 2008 	strb.w	r2, [r3, r8]
 8013150:	b003      	add	sp, #12
 8013152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013156:	9500      	str	r5, [sp, #0]
 8013158:	2300      	movs	r3, #0
 801315a:	4632      	mov	r2, r6
 801315c:	4639      	mov	r1, r7
 801315e:	4620      	mov	r0, r4
 8013160:	f7ff ff73 	bl	801304a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013164:	e7e5      	b.n	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8013166:	bf00      	nop
 8013168:	08014ae8 	.word	0x08014ae8

0801316c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801316c:	b507      	push	{r0, r1, r2, lr}
 801316e:	9200      	str	r2, [sp, #0]
 8013170:	460b      	mov	r3, r1
 8013172:	2200      	movs	r2, #0
 8013174:	6841      	ldr	r1, [r0, #4]
 8013176:	f7ff ffbb 	bl	80130f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801317a:	b003      	add	sp, #12
 801317c:	f85d fb04 	ldr.w	pc, [sp], #4

08013180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8013180:	6800      	ldr	r0, [r0, #0]
 8013182:	4770      	bx	lr

08013184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8013184:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013186:	1a53      	subs	r3, r2, r1
 8013188:	2b0f      	cmp	r3, #15
 801318a:	4604      	mov	r4, r0
 801318c:	460d      	mov	r5, r1
 801318e:	4616      	mov	r6, r2
 8013190:	9301      	str	r3, [sp, #4]
 8013192:	d906      	bls.n	80131a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8013194:	2200      	movs	r2, #0
 8013196:	a901      	add	r1, sp, #4
 8013198:	f7ff feac 	bl	8012ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	6020      	str	r0, [r4, #0]
 80131a0:	60a3      	str	r3, [r4, #8]
 80131a2:	4632      	mov	r2, r6
 80131a4:	4629      	mov	r1, r5
 80131a6:	6820      	ldr	r0, [r4, #0]
 80131a8:	f7ff ff06 	bl	8012fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80131ac:	9b01      	ldr	r3, [sp, #4]
 80131ae:	6822      	ldr	r2, [r4, #0]
 80131b0:	6063      	str	r3, [r4, #4]
 80131b2:	2100      	movs	r1, #0
 80131b4:	54d1      	strb	r1, [r2, r3]
 80131b6:	b002      	add	sp, #8
 80131b8:	bd70      	pop	{r4, r5, r6, pc}

080131ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80131ba:	f100 0208 	add.w	r2, r0, #8
 80131be:	b510      	push	{r4, lr}
 80131c0:	6002      	str	r2, [r0, #0]
 80131c2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80131c6:	4604      	mov	r4, r0
 80131c8:	f04f 0300 	mov.w	r3, #0
 80131cc:	440a      	add	r2, r1
 80131ce:	f7ff ffd9 	bl	8013184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80131d2:	4620      	mov	r0, r4
 80131d4:	bd10      	pop	{r4, pc}

080131d6 <_ZdlPv>:
 80131d6:	f000 b81b 	b.w	8013210 <free>

080131da <_ZdlPvSt11align_val_t>:
 80131da:	f000 b819 	b.w	8013210 <free>
	...

080131e0 <_ZSt15get_new_handlerv>:
 80131e0:	4b02      	ldr	r3, [pc, #8]	@ (80131ec <_ZSt15get_new_handlerv+0xc>)
 80131e2:	6818      	ldr	r0, [r3, #0]
 80131e4:	f3bf 8f5b 	dmb	ish
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	24000d9c 	.word	0x24000d9c

080131f0 <abort>:
 80131f0:	b508      	push	{r3, lr}
 80131f2:	2006      	movs	r0, #6
 80131f4:	f000 fb74 	bl	80138e0 <raise>
 80131f8:	2001      	movs	r0, #1
 80131fa:	f7f1 fae9 	bl	80047d0 <_exit>
	...

08013200 <malloc>:
 8013200:	4b02      	ldr	r3, [pc, #8]	@ (801320c <malloc+0xc>)
 8013202:	4601      	mov	r1, r0
 8013204:	6818      	ldr	r0, [r3, #0]
 8013206:	f000 b82d 	b.w	8013264 <_malloc_r>
 801320a:	bf00      	nop
 801320c:	24000074 	.word	0x24000074

08013210 <free>:
 8013210:	4b02      	ldr	r3, [pc, #8]	@ (801321c <free+0xc>)
 8013212:	4601      	mov	r1, r0
 8013214:	6818      	ldr	r0, [r3, #0]
 8013216:	f000 bc11 	b.w	8013a3c <_free_r>
 801321a:	bf00      	nop
 801321c:	24000074 	.word	0x24000074

08013220 <sbrk_aligned>:
 8013220:	b570      	push	{r4, r5, r6, lr}
 8013222:	4e0f      	ldr	r6, [pc, #60]	@ (8013260 <sbrk_aligned+0x40>)
 8013224:	460c      	mov	r4, r1
 8013226:	6831      	ldr	r1, [r6, #0]
 8013228:	4605      	mov	r5, r0
 801322a:	b911      	cbnz	r1, 8013232 <sbrk_aligned+0x12>
 801322c:	f000 fba8 	bl	8013980 <_sbrk_r>
 8013230:	6030      	str	r0, [r6, #0]
 8013232:	4621      	mov	r1, r4
 8013234:	4628      	mov	r0, r5
 8013236:	f000 fba3 	bl	8013980 <_sbrk_r>
 801323a:	1c43      	adds	r3, r0, #1
 801323c:	d103      	bne.n	8013246 <sbrk_aligned+0x26>
 801323e:	f04f 34ff 	mov.w	r4, #4294967295
 8013242:	4620      	mov	r0, r4
 8013244:	bd70      	pop	{r4, r5, r6, pc}
 8013246:	1cc4      	adds	r4, r0, #3
 8013248:	f024 0403 	bic.w	r4, r4, #3
 801324c:	42a0      	cmp	r0, r4
 801324e:	d0f8      	beq.n	8013242 <sbrk_aligned+0x22>
 8013250:	1a21      	subs	r1, r4, r0
 8013252:	4628      	mov	r0, r5
 8013254:	f000 fb94 	bl	8013980 <_sbrk_r>
 8013258:	3001      	adds	r0, #1
 801325a:	d1f2      	bne.n	8013242 <sbrk_aligned+0x22>
 801325c:	e7ef      	b.n	801323e <sbrk_aligned+0x1e>
 801325e:	bf00      	nop
 8013260:	24000da0 	.word	0x24000da0

08013264 <_malloc_r>:
 8013264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013268:	1ccd      	adds	r5, r1, #3
 801326a:	f025 0503 	bic.w	r5, r5, #3
 801326e:	3508      	adds	r5, #8
 8013270:	2d0c      	cmp	r5, #12
 8013272:	bf38      	it	cc
 8013274:	250c      	movcc	r5, #12
 8013276:	2d00      	cmp	r5, #0
 8013278:	4606      	mov	r6, r0
 801327a:	db01      	blt.n	8013280 <_malloc_r+0x1c>
 801327c:	42a9      	cmp	r1, r5
 801327e:	d904      	bls.n	801328a <_malloc_r+0x26>
 8013280:	230c      	movs	r3, #12
 8013282:	6033      	str	r3, [r6, #0]
 8013284:	2000      	movs	r0, #0
 8013286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801328a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013360 <_malloc_r+0xfc>
 801328e:	f000 f869 	bl	8013364 <__malloc_lock>
 8013292:	f8d8 3000 	ldr.w	r3, [r8]
 8013296:	461c      	mov	r4, r3
 8013298:	bb44      	cbnz	r4, 80132ec <_malloc_r+0x88>
 801329a:	4629      	mov	r1, r5
 801329c:	4630      	mov	r0, r6
 801329e:	f7ff ffbf 	bl	8013220 <sbrk_aligned>
 80132a2:	1c43      	adds	r3, r0, #1
 80132a4:	4604      	mov	r4, r0
 80132a6:	d158      	bne.n	801335a <_malloc_r+0xf6>
 80132a8:	f8d8 4000 	ldr.w	r4, [r8]
 80132ac:	4627      	mov	r7, r4
 80132ae:	2f00      	cmp	r7, #0
 80132b0:	d143      	bne.n	801333a <_malloc_r+0xd6>
 80132b2:	2c00      	cmp	r4, #0
 80132b4:	d04b      	beq.n	801334e <_malloc_r+0xea>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	4639      	mov	r1, r7
 80132ba:	4630      	mov	r0, r6
 80132bc:	eb04 0903 	add.w	r9, r4, r3
 80132c0:	f000 fb5e 	bl	8013980 <_sbrk_r>
 80132c4:	4581      	cmp	r9, r0
 80132c6:	d142      	bne.n	801334e <_malloc_r+0xea>
 80132c8:	6821      	ldr	r1, [r4, #0]
 80132ca:	1a6d      	subs	r5, r5, r1
 80132cc:	4629      	mov	r1, r5
 80132ce:	4630      	mov	r0, r6
 80132d0:	f7ff ffa6 	bl	8013220 <sbrk_aligned>
 80132d4:	3001      	adds	r0, #1
 80132d6:	d03a      	beq.n	801334e <_malloc_r+0xea>
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	442b      	add	r3, r5
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	f8d8 3000 	ldr.w	r3, [r8]
 80132e2:	685a      	ldr	r2, [r3, #4]
 80132e4:	bb62      	cbnz	r2, 8013340 <_malloc_r+0xdc>
 80132e6:	f8c8 7000 	str.w	r7, [r8]
 80132ea:	e00f      	b.n	801330c <_malloc_r+0xa8>
 80132ec:	6822      	ldr	r2, [r4, #0]
 80132ee:	1b52      	subs	r2, r2, r5
 80132f0:	d420      	bmi.n	8013334 <_malloc_r+0xd0>
 80132f2:	2a0b      	cmp	r2, #11
 80132f4:	d917      	bls.n	8013326 <_malloc_r+0xc2>
 80132f6:	1961      	adds	r1, r4, r5
 80132f8:	42a3      	cmp	r3, r4
 80132fa:	6025      	str	r5, [r4, #0]
 80132fc:	bf18      	it	ne
 80132fe:	6059      	strne	r1, [r3, #4]
 8013300:	6863      	ldr	r3, [r4, #4]
 8013302:	bf08      	it	eq
 8013304:	f8c8 1000 	streq.w	r1, [r8]
 8013308:	5162      	str	r2, [r4, r5]
 801330a:	604b      	str	r3, [r1, #4]
 801330c:	4630      	mov	r0, r6
 801330e:	f000 f82f 	bl	8013370 <__malloc_unlock>
 8013312:	f104 000b 	add.w	r0, r4, #11
 8013316:	1d23      	adds	r3, r4, #4
 8013318:	f020 0007 	bic.w	r0, r0, #7
 801331c:	1ac2      	subs	r2, r0, r3
 801331e:	bf1c      	itt	ne
 8013320:	1a1b      	subne	r3, r3, r0
 8013322:	50a3      	strne	r3, [r4, r2]
 8013324:	e7af      	b.n	8013286 <_malloc_r+0x22>
 8013326:	6862      	ldr	r2, [r4, #4]
 8013328:	42a3      	cmp	r3, r4
 801332a:	bf0c      	ite	eq
 801332c:	f8c8 2000 	streq.w	r2, [r8]
 8013330:	605a      	strne	r2, [r3, #4]
 8013332:	e7eb      	b.n	801330c <_malloc_r+0xa8>
 8013334:	4623      	mov	r3, r4
 8013336:	6864      	ldr	r4, [r4, #4]
 8013338:	e7ae      	b.n	8013298 <_malloc_r+0x34>
 801333a:	463c      	mov	r4, r7
 801333c:	687f      	ldr	r7, [r7, #4]
 801333e:	e7b6      	b.n	80132ae <_malloc_r+0x4a>
 8013340:	461a      	mov	r2, r3
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	42a3      	cmp	r3, r4
 8013346:	d1fb      	bne.n	8013340 <_malloc_r+0xdc>
 8013348:	2300      	movs	r3, #0
 801334a:	6053      	str	r3, [r2, #4]
 801334c:	e7de      	b.n	801330c <_malloc_r+0xa8>
 801334e:	230c      	movs	r3, #12
 8013350:	6033      	str	r3, [r6, #0]
 8013352:	4630      	mov	r0, r6
 8013354:	f000 f80c 	bl	8013370 <__malloc_unlock>
 8013358:	e794      	b.n	8013284 <_malloc_r+0x20>
 801335a:	6005      	str	r5, [r0, #0]
 801335c:	e7d6      	b.n	801330c <_malloc_r+0xa8>
 801335e:	bf00      	nop
 8013360:	24000da4 	.word	0x24000da4

08013364 <__malloc_lock>:
 8013364:	4801      	ldr	r0, [pc, #4]	@ (801336c <__malloc_lock+0x8>)
 8013366:	f000 bb58 	b.w	8013a1a <__retarget_lock_acquire_recursive>
 801336a:	bf00      	nop
 801336c:	24000ee8 	.word	0x24000ee8

08013370 <__malloc_unlock>:
 8013370:	4801      	ldr	r0, [pc, #4]	@ (8013378 <__malloc_unlock+0x8>)
 8013372:	f000 bb53 	b.w	8013a1c <__retarget_lock_release_recursive>
 8013376:	bf00      	nop
 8013378:	24000ee8 	.word	0x24000ee8

0801337c <memalign>:
 801337c:	4b02      	ldr	r3, [pc, #8]	@ (8013388 <memalign+0xc>)
 801337e:	460a      	mov	r2, r1
 8013380:	4601      	mov	r1, r0
 8013382:	6818      	ldr	r0, [r3, #0]
 8013384:	f000 b802 	b.w	801338c <_memalign_r>
 8013388:	24000074 	.word	0x24000074

0801338c <_memalign_r>:
 801338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338e:	1e4b      	subs	r3, r1, #1
 8013390:	420b      	tst	r3, r1
 8013392:	4606      	mov	r6, r0
 8013394:	460d      	mov	r5, r1
 8013396:	d106      	bne.n	80133a6 <_memalign_r+0x1a>
 8013398:	2908      	cmp	r1, #8
 801339a:	bf38      	it	cc
 801339c:	2508      	movcc	r5, #8
 801339e:	1d53      	adds	r3, r2, #5
 80133a0:	d904      	bls.n	80133ac <_memalign_r+0x20>
 80133a2:	230c      	movs	r3, #12
 80133a4:	6033      	str	r3, [r6, #0]
 80133a6:	2500      	movs	r5, #0
 80133a8:	4628      	mov	r0, r5
 80133aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ac:	2a04      	cmp	r2, #4
 80133ae:	bf38      	it	cc
 80133b0:	2204      	movcc	r2, #4
 80133b2:	1cd4      	adds	r4, r2, #3
 80133b4:	f024 0403 	bic.w	r4, r4, #3
 80133b8:	f1c5 0307 	rsb	r3, r5, #7
 80133bc:	42a3      	cmp	r3, r4
 80133be:	d3f0      	bcc.n	80133a2 <_memalign_r+0x16>
 80133c0:	f1a5 0108 	sub.w	r1, r5, #8
 80133c4:	4421      	add	r1, r4
 80133c6:	f7ff ff4d 	bl	8013264 <_malloc_r>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	d0eb      	beq.n	80133a6 <_memalign_r+0x1a>
 80133ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80133d2:	1f03      	subs	r3, r0, #4
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	bfb8      	it	lt
 80133d8:	189b      	addlt	r3, r3, r2
 80133da:	1cea      	adds	r2, r5, #3
 80133dc:	441a      	add	r2, r3
 80133de:	426d      	negs	r5, r5
 80133e0:	4015      	ands	r5, r2
 80133e2:	1d19      	adds	r1, r3, #4
 80133e4:	1a6a      	subs	r2, r5, r1
 80133e6:	d00b      	beq.n	8013400 <_memalign_r+0x74>
 80133e8:	2a0b      	cmp	r2, #11
 80133ea:	eb03 0702 	add.w	r7, r3, r2
 80133ee:	d918      	bls.n	8013422 <_memalign_r+0x96>
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	1a80      	subs	r0, r0, r2
 80133f4:	5098      	str	r0, [r3, r2]
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	4630      	mov	r0, r6
 80133fa:	f000 fb1f 	bl	8013a3c <_free_r>
 80133fe:	463b      	mov	r3, r7
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	f104 010c 	add.w	r1, r4, #12
 8013406:	1898      	adds	r0, r3, r2
 8013408:	4429      	add	r1, r5
 801340a:	4288      	cmp	r0, r1
 801340c:	d9cc      	bls.n	80133a8 <_memalign_r+0x1c>
 801340e:	1929      	adds	r1, r5, r4
 8013410:	1ac8      	subs	r0, r1, r3
 8013412:	1a12      	subs	r2, r2, r0
 8013414:	6018      	str	r0, [r3, #0]
 8013416:	3104      	adds	r1, #4
 8013418:	512a      	str	r2, [r5, r4]
 801341a:	4630      	mov	r0, r6
 801341c:	f000 fb0e 	bl	8013a3c <_free_r>
 8013420:	e7c2      	b.n	80133a8 <_memalign_r+0x1c>
 8013422:	4251      	negs	r1, r2
 8013424:	5099      	str	r1, [r3, r2]
 8013426:	e7eb      	b.n	8013400 <_memalign_r+0x74>

08013428 <std>:
 8013428:	2300      	movs	r3, #0
 801342a:	b510      	push	{r4, lr}
 801342c:	4604      	mov	r4, r0
 801342e:	e9c0 3300 	strd	r3, r3, [r0]
 8013432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013436:	6083      	str	r3, [r0, #8]
 8013438:	8181      	strh	r1, [r0, #12]
 801343a:	6643      	str	r3, [r0, #100]	@ 0x64
 801343c:	81c2      	strh	r2, [r0, #14]
 801343e:	6183      	str	r3, [r0, #24]
 8013440:	4619      	mov	r1, r3
 8013442:	2208      	movs	r2, #8
 8013444:	305c      	adds	r0, #92	@ 0x5c
 8013446:	f000 fa1b 	bl	8013880 <memset>
 801344a:	4b0d      	ldr	r3, [pc, #52]	@ (8013480 <std+0x58>)
 801344c:	6263      	str	r3, [r4, #36]	@ 0x24
 801344e:	4b0d      	ldr	r3, [pc, #52]	@ (8013484 <std+0x5c>)
 8013450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013452:	4b0d      	ldr	r3, [pc, #52]	@ (8013488 <std+0x60>)
 8013454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013456:	4b0d      	ldr	r3, [pc, #52]	@ (801348c <std+0x64>)
 8013458:	6323      	str	r3, [r4, #48]	@ 0x30
 801345a:	4b0d      	ldr	r3, [pc, #52]	@ (8013490 <std+0x68>)
 801345c:	6224      	str	r4, [r4, #32]
 801345e:	429c      	cmp	r4, r3
 8013460:	d006      	beq.n	8013470 <std+0x48>
 8013462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013466:	4294      	cmp	r4, r2
 8013468:	d002      	beq.n	8013470 <std+0x48>
 801346a:	33d0      	adds	r3, #208	@ 0xd0
 801346c:	429c      	cmp	r4, r3
 801346e:	d105      	bne.n	801347c <std+0x54>
 8013470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013478:	f000 bace 	b.w	8013a18 <__retarget_lock_init_recursive>
 801347c:	bd10      	pop	{r4, pc}
 801347e:	bf00      	nop
 8013480:	0801369d 	.word	0x0801369d
 8013484:	080136bf 	.word	0x080136bf
 8013488:	080136f7 	.word	0x080136f7
 801348c:	0801371b 	.word	0x0801371b
 8013490:	24000da8 	.word	0x24000da8

08013494 <stdio_exit_handler>:
 8013494:	4a02      	ldr	r2, [pc, #8]	@ (80134a0 <stdio_exit_handler+0xc>)
 8013496:	4903      	ldr	r1, [pc, #12]	@ (80134a4 <stdio_exit_handler+0x10>)
 8013498:	4803      	ldr	r0, [pc, #12]	@ (80134a8 <stdio_exit_handler+0x14>)
 801349a:	f000 b869 	b.w	8013570 <_fwalk_sglue>
 801349e:	bf00      	nop
 80134a0:	24000068 	.word	0x24000068
 80134a4:	08014179 	.word	0x08014179
 80134a8:	24000078 	.word	0x24000078

080134ac <cleanup_stdio>:
 80134ac:	6841      	ldr	r1, [r0, #4]
 80134ae:	4b0c      	ldr	r3, [pc, #48]	@ (80134e0 <cleanup_stdio+0x34>)
 80134b0:	4299      	cmp	r1, r3
 80134b2:	b510      	push	{r4, lr}
 80134b4:	4604      	mov	r4, r0
 80134b6:	d001      	beq.n	80134bc <cleanup_stdio+0x10>
 80134b8:	f000 fe5e 	bl	8014178 <_fflush_r>
 80134bc:	68a1      	ldr	r1, [r4, #8]
 80134be:	4b09      	ldr	r3, [pc, #36]	@ (80134e4 <cleanup_stdio+0x38>)
 80134c0:	4299      	cmp	r1, r3
 80134c2:	d002      	beq.n	80134ca <cleanup_stdio+0x1e>
 80134c4:	4620      	mov	r0, r4
 80134c6:	f000 fe57 	bl	8014178 <_fflush_r>
 80134ca:	68e1      	ldr	r1, [r4, #12]
 80134cc:	4b06      	ldr	r3, [pc, #24]	@ (80134e8 <cleanup_stdio+0x3c>)
 80134ce:	4299      	cmp	r1, r3
 80134d0:	d004      	beq.n	80134dc <cleanup_stdio+0x30>
 80134d2:	4620      	mov	r0, r4
 80134d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134d8:	f000 be4e 	b.w	8014178 <_fflush_r>
 80134dc:	bd10      	pop	{r4, pc}
 80134de:	bf00      	nop
 80134e0:	24000da8 	.word	0x24000da8
 80134e4:	24000e10 	.word	0x24000e10
 80134e8:	24000e78 	.word	0x24000e78

080134ec <global_stdio_init.part.0>:
 80134ec:	b510      	push	{r4, lr}
 80134ee:	4b0b      	ldr	r3, [pc, #44]	@ (801351c <global_stdio_init.part.0+0x30>)
 80134f0:	4c0b      	ldr	r4, [pc, #44]	@ (8013520 <global_stdio_init.part.0+0x34>)
 80134f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013524 <global_stdio_init.part.0+0x38>)
 80134f4:	601a      	str	r2, [r3, #0]
 80134f6:	4620      	mov	r0, r4
 80134f8:	2200      	movs	r2, #0
 80134fa:	2104      	movs	r1, #4
 80134fc:	f7ff ff94 	bl	8013428 <std>
 8013500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013504:	2201      	movs	r2, #1
 8013506:	2109      	movs	r1, #9
 8013508:	f7ff ff8e 	bl	8013428 <std>
 801350c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013510:	2202      	movs	r2, #2
 8013512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013516:	2112      	movs	r1, #18
 8013518:	f7ff bf86 	b.w	8013428 <std>
 801351c:	24000ee0 	.word	0x24000ee0
 8013520:	24000da8 	.word	0x24000da8
 8013524:	08013495 	.word	0x08013495

08013528 <__sfp_lock_acquire>:
 8013528:	4801      	ldr	r0, [pc, #4]	@ (8013530 <__sfp_lock_acquire+0x8>)
 801352a:	f000 ba76 	b.w	8013a1a <__retarget_lock_acquire_recursive>
 801352e:	bf00      	nop
 8013530:	24000ee9 	.word	0x24000ee9

08013534 <__sfp_lock_release>:
 8013534:	4801      	ldr	r0, [pc, #4]	@ (801353c <__sfp_lock_release+0x8>)
 8013536:	f000 ba71 	b.w	8013a1c <__retarget_lock_release_recursive>
 801353a:	bf00      	nop
 801353c:	24000ee9 	.word	0x24000ee9

08013540 <__sinit>:
 8013540:	b510      	push	{r4, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	f7ff fff0 	bl	8013528 <__sfp_lock_acquire>
 8013548:	6a23      	ldr	r3, [r4, #32]
 801354a:	b11b      	cbz	r3, 8013554 <__sinit+0x14>
 801354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013550:	f7ff bff0 	b.w	8013534 <__sfp_lock_release>
 8013554:	4b04      	ldr	r3, [pc, #16]	@ (8013568 <__sinit+0x28>)
 8013556:	6223      	str	r3, [r4, #32]
 8013558:	4b04      	ldr	r3, [pc, #16]	@ (801356c <__sinit+0x2c>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d1f5      	bne.n	801354c <__sinit+0xc>
 8013560:	f7ff ffc4 	bl	80134ec <global_stdio_init.part.0>
 8013564:	e7f2      	b.n	801354c <__sinit+0xc>
 8013566:	bf00      	nop
 8013568:	080134ad 	.word	0x080134ad
 801356c:	24000ee0 	.word	0x24000ee0

08013570 <_fwalk_sglue>:
 8013570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013574:	4607      	mov	r7, r0
 8013576:	4688      	mov	r8, r1
 8013578:	4614      	mov	r4, r2
 801357a:	2600      	movs	r6, #0
 801357c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013580:	f1b9 0901 	subs.w	r9, r9, #1
 8013584:	d505      	bpl.n	8013592 <_fwalk_sglue+0x22>
 8013586:	6824      	ldr	r4, [r4, #0]
 8013588:	2c00      	cmp	r4, #0
 801358a:	d1f7      	bne.n	801357c <_fwalk_sglue+0xc>
 801358c:	4630      	mov	r0, r6
 801358e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013592:	89ab      	ldrh	r3, [r5, #12]
 8013594:	2b01      	cmp	r3, #1
 8013596:	d907      	bls.n	80135a8 <_fwalk_sglue+0x38>
 8013598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801359c:	3301      	adds	r3, #1
 801359e:	d003      	beq.n	80135a8 <_fwalk_sglue+0x38>
 80135a0:	4629      	mov	r1, r5
 80135a2:	4638      	mov	r0, r7
 80135a4:	47c0      	blx	r8
 80135a6:	4306      	orrs	r6, r0
 80135a8:	3568      	adds	r5, #104	@ 0x68
 80135aa:	e7e9      	b.n	8013580 <_fwalk_sglue+0x10>

080135ac <iprintf>:
 80135ac:	b40f      	push	{r0, r1, r2, r3}
 80135ae:	b507      	push	{r0, r1, r2, lr}
 80135b0:	4906      	ldr	r1, [pc, #24]	@ (80135cc <iprintf+0x20>)
 80135b2:	ab04      	add	r3, sp, #16
 80135b4:	6808      	ldr	r0, [r1, #0]
 80135b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ba:	6881      	ldr	r1, [r0, #8]
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	f000 fab1 	bl	8013b24 <_vfiprintf_r>
 80135c2:	b003      	add	sp, #12
 80135c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c8:	b004      	add	sp, #16
 80135ca:	4770      	bx	lr
 80135cc:	24000074 	.word	0x24000074

080135d0 <putchar>:
 80135d0:	4b02      	ldr	r3, [pc, #8]	@ (80135dc <putchar+0xc>)
 80135d2:	4601      	mov	r1, r0
 80135d4:	6818      	ldr	r0, [r3, #0]
 80135d6:	6882      	ldr	r2, [r0, #8]
 80135d8:	f000 be58 	b.w	801428c <_putc_r>
 80135dc:	24000074 	.word	0x24000074

080135e0 <_puts_r>:
 80135e0:	6a03      	ldr	r3, [r0, #32]
 80135e2:	b570      	push	{r4, r5, r6, lr}
 80135e4:	6884      	ldr	r4, [r0, #8]
 80135e6:	4605      	mov	r5, r0
 80135e8:	460e      	mov	r6, r1
 80135ea:	b90b      	cbnz	r3, 80135f0 <_puts_r+0x10>
 80135ec:	f7ff ffa8 	bl	8013540 <__sinit>
 80135f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80135f2:	07db      	lsls	r3, r3, #31
 80135f4:	d405      	bmi.n	8013602 <_puts_r+0x22>
 80135f6:	89a3      	ldrh	r3, [r4, #12]
 80135f8:	0598      	lsls	r0, r3, #22
 80135fa:	d402      	bmi.n	8013602 <_puts_r+0x22>
 80135fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135fe:	f000 fa0c 	bl	8013a1a <__retarget_lock_acquire_recursive>
 8013602:	89a3      	ldrh	r3, [r4, #12]
 8013604:	0719      	lsls	r1, r3, #28
 8013606:	d502      	bpl.n	801360e <_puts_r+0x2e>
 8013608:	6923      	ldr	r3, [r4, #16]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d135      	bne.n	801367a <_puts_r+0x9a>
 801360e:	4621      	mov	r1, r4
 8013610:	4628      	mov	r0, r5
 8013612:	f000 f8c5 	bl	80137a0 <__swsetup_r>
 8013616:	b380      	cbz	r0, 801367a <_puts_r+0x9a>
 8013618:	f04f 35ff 	mov.w	r5, #4294967295
 801361c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801361e:	07da      	lsls	r2, r3, #31
 8013620:	d405      	bmi.n	801362e <_puts_r+0x4e>
 8013622:	89a3      	ldrh	r3, [r4, #12]
 8013624:	059b      	lsls	r3, r3, #22
 8013626:	d402      	bmi.n	801362e <_puts_r+0x4e>
 8013628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801362a:	f000 f9f7 	bl	8013a1c <__retarget_lock_release_recursive>
 801362e:	4628      	mov	r0, r5
 8013630:	bd70      	pop	{r4, r5, r6, pc}
 8013632:	2b00      	cmp	r3, #0
 8013634:	da04      	bge.n	8013640 <_puts_r+0x60>
 8013636:	69a2      	ldr	r2, [r4, #24]
 8013638:	429a      	cmp	r2, r3
 801363a:	dc17      	bgt.n	801366c <_puts_r+0x8c>
 801363c:	290a      	cmp	r1, #10
 801363e:	d015      	beq.n	801366c <_puts_r+0x8c>
 8013640:	6823      	ldr	r3, [r4, #0]
 8013642:	1c5a      	adds	r2, r3, #1
 8013644:	6022      	str	r2, [r4, #0]
 8013646:	7019      	strb	r1, [r3, #0]
 8013648:	68a3      	ldr	r3, [r4, #8]
 801364a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801364e:	3b01      	subs	r3, #1
 8013650:	60a3      	str	r3, [r4, #8]
 8013652:	2900      	cmp	r1, #0
 8013654:	d1ed      	bne.n	8013632 <_puts_r+0x52>
 8013656:	2b00      	cmp	r3, #0
 8013658:	da11      	bge.n	801367e <_puts_r+0x9e>
 801365a:	4622      	mov	r2, r4
 801365c:	210a      	movs	r1, #10
 801365e:	4628      	mov	r0, r5
 8013660:	f000 f85f 	bl	8013722 <__swbuf_r>
 8013664:	3001      	adds	r0, #1
 8013666:	d0d7      	beq.n	8013618 <_puts_r+0x38>
 8013668:	250a      	movs	r5, #10
 801366a:	e7d7      	b.n	801361c <_puts_r+0x3c>
 801366c:	4622      	mov	r2, r4
 801366e:	4628      	mov	r0, r5
 8013670:	f000 f857 	bl	8013722 <__swbuf_r>
 8013674:	3001      	adds	r0, #1
 8013676:	d1e7      	bne.n	8013648 <_puts_r+0x68>
 8013678:	e7ce      	b.n	8013618 <_puts_r+0x38>
 801367a:	3e01      	subs	r6, #1
 801367c:	e7e4      	b.n	8013648 <_puts_r+0x68>
 801367e:	6823      	ldr	r3, [r4, #0]
 8013680:	1c5a      	adds	r2, r3, #1
 8013682:	6022      	str	r2, [r4, #0]
 8013684:	220a      	movs	r2, #10
 8013686:	701a      	strb	r2, [r3, #0]
 8013688:	e7ee      	b.n	8013668 <_puts_r+0x88>
	...

0801368c <puts>:
 801368c:	4b02      	ldr	r3, [pc, #8]	@ (8013698 <puts+0xc>)
 801368e:	4601      	mov	r1, r0
 8013690:	6818      	ldr	r0, [r3, #0]
 8013692:	f7ff bfa5 	b.w	80135e0 <_puts_r>
 8013696:	bf00      	nop
 8013698:	24000074 	.word	0x24000074

0801369c <__sread>:
 801369c:	b510      	push	{r4, lr}
 801369e:	460c      	mov	r4, r1
 80136a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a4:	f000 f946 	bl	8013934 <_read_r>
 80136a8:	2800      	cmp	r0, #0
 80136aa:	bfab      	itete	ge
 80136ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80136ae:	89a3      	ldrhlt	r3, [r4, #12]
 80136b0:	181b      	addge	r3, r3, r0
 80136b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80136b6:	bfac      	ite	ge
 80136b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80136ba:	81a3      	strhlt	r3, [r4, #12]
 80136bc:	bd10      	pop	{r4, pc}

080136be <__swrite>:
 80136be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c2:	461f      	mov	r7, r3
 80136c4:	898b      	ldrh	r3, [r1, #12]
 80136c6:	05db      	lsls	r3, r3, #23
 80136c8:	4605      	mov	r5, r0
 80136ca:	460c      	mov	r4, r1
 80136cc:	4616      	mov	r6, r2
 80136ce:	d505      	bpl.n	80136dc <__swrite+0x1e>
 80136d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d4:	2302      	movs	r3, #2
 80136d6:	2200      	movs	r2, #0
 80136d8:	f000 f91a 	bl	8013910 <_lseek_r>
 80136dc:	89a3      	ldrh	r3, [r4, #12]
 80136de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136e6:	81a3      	strh	r3, [r4, #12]
 80136e8:	4632      	mov	r2, r6
 80136ea:	463b      	mov	r3, r7
 80136ec:	4628      	mov	r0, r5
 80136ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136f2:	f000 b955 	b.w	80139a0 <_write_r>

080136f6 <__sseek>:
 80136f6:	b510      	push	{r4, lr}
 80136f8:	460c      	mov	r4, r1
 80136fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136fe:	f000 f907 	bl	8013910 <_lseek_r>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	89a3      	ldrh	r3, [r4, #12]
 8013706:	bf15      	itete	ne
 8013708:	6560      	strne	r0, [r4, #84]	@ 0x54
 801370a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801370e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013712:	81a3      	strheq	r3, [r4, #12]
 8013714:	bf18      	it	ne
 8013716:	81a3      	strhne	r3, [r4, #12]
 8013718:	bd10      	pop	{r4, pc}

0801371a <__sclose>:
 801371a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801371e:	f000 b8e7 	b.w	80138f0 <_close_r>

08013722 <__swbuf_r>:
 8013722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013724:	460e      	mov	r6, r1
 8013726:	4614      	mov	r4, r2
 8013728:	4605      	mov	r5, r0
 801372a:	b118      	cbz	r0, 8013734 <__swbuf_r+0x12>
 801372c:	6a03      	ldr	r3, [r0, #32]
 801372e:	b90b      	cbnz	r3, 8013734 <__swbuf_r+0x12>
 8013730:	f7ff ff06 	bl	8013540 <__sinit>
 8013734:	69a3      	ldr	r3, [r4, #24]
 8013736:	60a3      	str	r3, [r4, #8]
 8013738:	89a3      	ldrh	r3, [r4, #12]
 801373a:	071a      	lsls	r2, r3, #28
 801373c:	d501      	bpl.n	8013742 <__swbuf_r+0x20>
 801373e:	6923      	ldr	r3, [r4, #16]
 8013740:	b943      	cbnz	r3, 8013754 <__swbuf_r+0x32>
 8013742:	4621      	mov	r1, r4
 8013744:	4628      	mov	r0, r5
 8013746:	f000 f82b 	bl	80137a0 <__swsetup_r>
 801374a:	b118      	cbz	r0, 8013754 <__swbuf_r+0x32>
 801374c:	f04f 37ff 	mov.w	r7, #4294967295
 8013750:	4638      	mov	r0, r7
 8013752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013754:	6823      	ldr	r3, [r4, #0]
 8013756:	6922      	ldr	r2, [r4, #16]
 8013758:	1a98      	subs	r0, r3, r2
 801375a:	6963      	ldr	r3, [r4, #20]
 801375c:	b2f6      	uxtb	r6, r6
 801375e:	4283      	cmp	r3, r0
 8013760:	4637      	mov	r7, r6
 8013762:	dc05      	bgt.n	8013770 <__swbuf_r+0x4e>
 8013764:	4621      	mov	r1, r4
 8013766:	4628      	mov	r0, r5
 8013768:	f000 fd06 	bl	8014178 <_fflush_r>
 801376c:	2800      	cmp	r0, #0
 801376e:	d1ed      	bne.n	801374c <__swbuf_r+0x2a>
 8013770:	68a3      	ldr	r3, [r4, #8]
 8013772:	3b01      	subs	r3, #1
 8013774:	60a3      	str	r3, [r4, #8]
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	6022      	str	r2, [r4, #0]
 801377c:	701e      	strb	r6, [r3, #0]
 801377e:	6962      	ldr	r2, [r4, #20]
 8013780:	1c43      	adds	r3, r0, #1
 8013782:	429a      	cmp	r2, r3
 8013784:	d004      	beq.n	8013790 <__swbuf_r+0x6e>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	07db      	lsls	r3, r3, #31
 801378a:	d5e1      	bpl.n	8013750 <__swbuf_r+0x2e>
 801378c:	2e0a      	cmp	r6, #10
 801378e:	d1df      	bne.n	8013750 <__swbuf_r+0x2e>
 8013790:	4621      	mov	r1, r4
 8013792:	4628      	mov	r0, r5
 8013794:	f000 fcf0 	bl	8014178 <_fflush_r>
 8013798:	2800      	cmp	r0, #0
 801379a:	d0d9      	beq.n	8013750 <__swbuf_r+0x2e>
 801379c:	e7d6      	b.n	801374c <__swbuf_r+0x2a>
	...

080137a0 <__swsetup_r>:
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	4b29      	ldr	r3, [pc, #164]	@ (8013848 <__swsetup_r+0xa8>)
 80137a4:	4605      	mov	r5, r0
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	460c      	mov	r4, r1
 80137aa:	b118      	cbz	r0, 80137b4 <__swsetup_r+0x14>
 80137ac:	6a03      	ldr	r3, [r0, #32]
 80137ae:	b90b      	cbnz	r3, 80137b4 <__swsetup_r+0x14>
 80137b0:	f7ff fec6 	bl	8013540 <__sinit>
 80137b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137b8:	0719      	lsls	r1, r3, #28
 80137ba:	d422      	bmi.n	8013802 <__swsetup_r+0x62>
 80137bc:	06da      	lsls	r2, r3, #27
 80137be:	d407      	bmi.n	80137d0 <__swsetup_r+0x30>
 80137c0:	2209      	movs	r2, #9
 80137c2:	602a      	str	r2, [r5, #0]
 80137c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137c8:	81a3      	strh	r3, [r4, #12]
 80137ca:	f04f 30ff 	mov.w	r0, #4294967295
 80137ce:	e033      	b.n	8013838 <__swsetup_r+0x98>
 80137d0:	0758      	lsls	r0, r3, #29
 80137d2:	d512      	bpl.n	80137fa <__swsetup_r+0x5a>
 80137d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137d6:	b141      	cbz	r1, 80137ea <__swsetup_r+0x4a>
 80137d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137dc:	4299      	cmp	r1, r3
 80137de:	d002      	beq.n	80137e6 <__swsetup_r+0x46>
 80137e0:	4628      	mov	r0, r5
 80137e2:	f000 f92b 	bl	8013a3c <_free_r>
 80137e6:	2300      	movs	r3, #0
 80137e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80137ea:	89a3      	ldrh	r3, [r4, #12]
 80137ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	2300      	movs	r3, #0
 80137f4:	6063      	str	r3, [r4, #4]
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	6023      	str	r3, [r4, #0]
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f043 0308 	orr.w	r3, r3, #8
 8013800:	81a3      	strh	r3, [r4, #12]
 8013802:	6923      	ldr	r3, [r4, #16]
 8013804:	b94b      	cbnz	r3, 801381a <__swsetup_r+0x7a>
 8013806:	89a3      	ldrh	r3, [r4, #12]
 8013808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801380c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013810:	d003      	beq.n	801381a <__swsetup_r+0x7a>
 8013812:	4621      	mov	r1, r4
 8013814:	4628      	mov	r0, r5
 8013816:	f000 fcfd 	bl	8014214 <__smakebuf_r>
 801381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381e:	f013 0201 	ands.w	r2, r3, #1
 8013822:	d00a      	beq.n	801383a <__swsetup_r+0x9a>
 8013824:	2200      	movs	r2, #0
 8013826:	60a2      	str	r2, [r4, #8]
 8013828:	6962      	ldr	r2, [r4, #20]
 801382a:	4252      	negs	r2, r2
 801382c:	61a2      	str	r2, [r4, #24]
 801382e:	6922      	ldr	r2, [r4, #16]
 8013830:	b942      	cbnz	r2, 8013844 <__swsetup_r+0xa4>
 8013832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013836:	d1c5      	bne.n	80137c4 <__swsetup_r+0x24>
 8013838:	bd38      	pop	{r3, r4, r5, pc}
 801383a:	0799      	lsls	r1, r3, #30
 801383c:	bf58      	it	pl
 801383e:	6962      	ldrpl	r2, [r4, #20]
 8013840:	60a2      	str	r2, [r4, #8]
 8013842:	e7f4      	b.n	801382e <__swsetup_r+0x8e>
 8013844:	2000      	movs	r0, #0
 8013846:	e7f7      	b.n	8013838 <__swsetup_r+0x98>
 8013848:	24000074 	.word	0x24000074

0801384c <memmove>:
 801384c:	4288      	cmp	r0, r1
 801384e:	b510      	push	{r4, lr}
 8013850:	eb01 0402 	add.w	r4, r1, r2
 8013854:	d902      	bls.n	801385c <memmove+0x10>
 8013856:	4284      	cmp	r4, r0
 8013858:	4623      	mov	r3, r4
 801385a:	d807      	bhi.n	801386c <memmove+0x20>
 801385c:	1e43      	subs	r3, r0, #1
 801385e:	42a1      	cmp	r1, r4
 8013860:	d008      	beq.n	8013874 <memmove+0x28>
 8013862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013866:	f803 2f01 	strb.w	r2, [r3, #1]!
 801386a:	e7f8      	b.n	801385e <memmove+0x12>
 801386c:	4402      	add	r2, r0
 801386e:	4601      	mov	r1, r0
 8013870:	428a      	cmp	r2, r1
 8013872:	d100      	bne.n	8013876 <memmove+0x2a>
 8013874:	bd10      	pop	{r4, pc}
 8013876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801387a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801387e:	e7f7      	b.n	8013870 <memmove+0x24>

08013880 <memset>:
 8013880:	4402      	add	r2, r0
 8013882:	4603      	mov	r3, r0
 8013884:	4293      	cmp	r3, r2
 8013886:	d100      	bne.n	801388a <memset+0xa>
 8013888:	4770      	bx	lr
 801388a:	f803 1b01 	strb.w	r1, [r3], #1
 801388e:	e7f9      	b.n	8013884 <memset+0x4>

08013890 <_raise_r>:
 8013890:	291f      	cmp	r1, #31
 8013892:	b538      	push	{r3, r4, r5, lr}
 8013894:	4605      	mov	r5, r0
 8013896:	460c      	mov	r4, r1
 8013898:	d904      	bls.n	80138a4 <_raise_r+0x14>
 801389a:	2316      	movs	r3, #22
 801389c:	6003      	str	r3, [r0, #0]
 801389e:	f04f 30ff 	mov.w	r0, #4294967295
 80138a2:	bd38      	pop	{r3, r4, r5, pc}
 80138a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80138a6:	b112      	cbz	r2, 80138ae <_raise_r+0x1e>
 80138a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138ac:	b94b      	cbnz	r3, 80138c2 <_raise_r+0x32>
 80138ae:	4628      	mov	r0, r5
 80138b0:	f000 f864 	bl	801397c <_getpid_r>
 80138b4:	4622      	mov	r2, r4
 80138b6:	4601      	mov	r1, r0
 80138b8:	4628      	mov	r0, r5
 80138ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138be:	f000 b84b 	b.w	8013958 <_kill_r>
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d00a      	beq.n	80138dc <_raise_r+0x4c>
 80138c6:	1c59      	adds	r1, r3, #1
 80138c8:	d103      	bne.n	80138d2 <_raise_r+0x42>
 80138ca:	2316      	movs	r3, #22
 80138cc:	6003      	str	r3, [r0, #0]
 80138ce:	2001      	movs	r0, #1
 80138d0:	e7e7      	b.n	80138a2 <_raise_r+0x12>
 80138d2:	2100      	movs	r1, #0
 80138d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80138d8:	4620      	mov	r0, r4
 80138da:	4798      	blx	r3
 80138dc:	2000      	movs	r0, #0
 80138de:	e7e0      	b.n	80138a2 <_raise_r+0x12>

080138e0 <raise>:
 80138e0:	4b02      	ldr	r3, [pc, #8]	@ (80138ec <raise+0xc>)
 80138e2:	4601      	mov	r1, r0
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	f7ff bfd3 	b.w	8013890 <_raise_r>
 80138ea:	bf00      	nop
 80138ec:	24000074 	.word	0x24000074

080138f0 <_close_r>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4d06      	ldr	r5, [pc, #24]	@ (801390c <_close_r+0x1c>)
 80138f4:	2300      	movs	r3, #0
 80138f6:	4604      	mov	r4, r0
 80138f8:	4608      	mov	r0, r1
 80138fa:	602b      	str	r3, [r5, #0]
 80138fc:	f7f0 ffac 	bl	8004858 <_close>
 8013900:	1c43      	adds	r3, r0, #1
 8013902:	d102      	bne.n	801390a <_close_r+0x1a>
 8013904:	682b      	ldr	r3, [r5, #0]
 8013906:	b103      	cbz	r3, 801390a <_close_r+0x1a>
 8013908:	6023      	str	r3, [r4, #0]
 801390a:	bd38      	pop	{r3, r4, r5, pc}
 801390c:	24000ee4 	.word	0x24000ee4

08013910 <_lseek_r>:
 8013910:	b538      	push	{r3, r4, r5, lr}
 8013912:	4d07      	ldr	r5, [pc, #28]	@ (8013930 <_lseek_r+0x20>)
 8013914:	4604      	mov	r4, r0
 8013916:	4608      	mov	r0, r1
 8013918:	4611      	mov	r1, r2
 801391a:	2200      	movs	r2, #0
 801391c:	602a      	str	r2, [r5, #0]
 801391e:	461a      	mov	r2, r3
 8013920:	f7f0 ffc1 	bl	80048a6 <_lseek>
 8013924:	1c43      	adds	r3, r0, #1
 8013926:	d102      	bne.n	801392e <_lseek_r+0x1e>
 8013928:	682b      	ldr	r3, [r5, #0]
 801392a:	b103      	cbz	r3, 801392e <_lseek_r+0x1e>
 801392c:	6023      	str	r3, [r4, #0]
 801392e:	bd38      	pop	{r3, r4, r5, pc}
 8013930:	24000ee4 	.word	0x24000ee4

08013934 <_read_r>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4d07      	ldr	r5, [pc, #28]	@ (8013954 <_read_r+0x20>)
 8013938:	4604      	mov	r4, r0
 801393a:	4608      	mov	r0, r1
 801393c:	4611      	mov	r1, r2
 801393e:	2200      	movs	r2, #0
 8013940:	602a      	str	r2, [r5, #0]
 8013942:	461a      	mov	r2, r3
 8013944:	f7f0 ff4f 	bl	80047e6 <_read>
 8013948:	1c43      	adds	r3, r0, #1
 801394a:	d102      	bne.n	8013952 <_read_r+0x1e>
 801394c:	682b      	ldr	r3, [r5, #0]
 801394e:	b103      	cbz	r3, 8013952 <_read_r+0x1e>
 8013950:	6023      	str	r3, [r4, #0]
 8013952:	bd38      	pop	{r3, r4, r5, pc}
 8013954:	24000ee4 	.word	0x24000ee4

08013958 <_kill_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4d07      	ldr	r5, [pc, #28]	@ (8013978 <_kill_r+0x20>)
 801395c:	2300      	movs	r3, #0
 801395e:	4604      	mov	r4, r0
 8013960:	4608      	mov	r0, r1
 8013962:	4611      	mov	r1, r2
 8013964:	602b      	str	r3, [r5, #0]
 8013966:	f7f0 ff23 	bl	80047b0 <_kill>
 801396a:	1c43      	adds	r3, r0, #1
 801396c:	d102      	bne.n	8013974 <_kill_r+0x1c>
 801396e:	682b      	ldr	r3, [r5, #0]
 8013970:	b103      	cbz	r3, 8013974 <_kill_r+0x1c>
 8013972:	6023      	str	r3, [r4, #0]
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	bf00      	nop
 8013978:	24000ee4 	.word	0x24000ee4

0801397c <_getpid_r>:
 801397c:	f7f0 bf10 	b.w	80047a0 <_getpid>

08013980 <_sbrk_r>:
 8013980:	b538      	push	{r3, r4, r5, lr}
 8013982:	4d06      	ldr	r5, [pc, #24]	@ (801399c <_sbrk_r+0x1c>)
 8013984:	2300      	movs	r3, #0
 8013986:	4604      	mov	r4, r0
 8013988:	4608      	mov	r0, r1
 801398a:	602b      	str	r3, [r5, #0]
 801398c:	f7f0 ff98 	bl	80048c0 <_sbrk>
 8013990:	1c43      	adds	r3, r0, #1
 8013992:	d102      	bne.n	801399a <_sbrk_r+0x1a>
 8013994:	682b      	ldr	r3, [r5, #0]
 8013996:	b103      	cbz	r3, 801399a <_sbrk_r+0x1a>
 8013998:	6023      	str	r3, [r4, #0]
 801399a:	bd38      	pop	{r3, r4, r5, pc}
 801399c:	24000ee4 	.word	0x24000ee4

080139a0 <_write_r>:
 80139a0:	b538      	push	{r3, r4, r5, lr}
 80139a2:	4d07      	ldr	r5, [pc, #28]	@ (80139c0 <_write_r+0x20>)
 80139a4:	4604      	mov	r4, r0
 80139a6:	4608      	mov	r0, r1
 80139a8:	4611      	mov	r1, r2
 80139aa:	2200      	movs	r2, #0
 80139ac:	602a      	str	r2, [r5, #0]
 80139ae:	461a      	mov	r2, r3
 80139b0:	f7f0 ff36 	bl	8004820 <_write>
 80139b4:	1c43      	adds	r3, r0, #1
 80139b6:	d102      	bne.n	80139be <_write_r+0x1e>
 80139b8:	682b      	ldr	r3, [r5, #0]
 80139ba:	b103      	cbz	r3, 80139be <_write_r+0x1e>
 80139bc:	6023      	str	r3, [r4, #0]
 80139be:	bd38      	pop	{r3, r4, r5, pc}
 80139c0:	24000ee4 	.word	0x24000ee4

080139c4 <__errno>:
 80139c4:	4b01      	ldr	r3, [pc, #4]	@ (80139cc <__errno+0x8>)
 80139c6:	6818      	ldr	r0, [r3, #0]
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	24000074 	.word	0x24000074

080139d0 <__libc_init_array>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	4d0d      	ldr	r5, [pc, #52]	@ (8013a08 <__libc_init_array+0x38>)
 80139d4:	4c0d      	ldr	r4, [pc, #52]	@ (8013a0c <__libc_init_array+0x3c>)
 80139d6:	1b64      	subs	r4, r4, r5
 80139d8:	10a4      	asrs	r4, r4, #2
 80139da:	2600      	movs	r6, #0
 80139dc:	42a6      	cmp	r6, r4
 80139de:	d109      	bne.n	80139f4 <__libc_init_array+0x24>
 80139e0:	4d0b      	ldr	r5, [pc, #44]	@ (8013a10 <__libc_init_array+0x40>)
 80139e2:	4c0c      	ldr	r4, [pc, #48]	@ (8013a14 <__libc_init_array+0x44>)
 80139e4:	f000 fca8 	bl	8014338 <_init>
 80139e8:	1b64      	subs	r4, r4, r5
 80139ea:	10a4      	asrs	r4, r4, #2
 80139ec:	2600      	movs	r6, #0
 80139ee:	42a6      	cmp	r6, r4
 80139f0:	d105      	bne.n	80139fe <__libc_init_array+0x2e>
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80139f8:	4798      	blx	r3
 80139fa:	3601      	adds	r6, #1
 80139fc:	e7ee      	b.n	80139dc <__libc_init_array+0xc>
 80139fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a02:	4798      	blx	r3
 8013a04:	3601      	adds	r6, #1
 8013a06:	e7f2      	b.n	80139ee <__libc_init_array+0x1e>
 8013a08:	08014b40 	.word	0x08014b40
 8013a0c:	08014b40 	.word	0x08014b40
 8013a10:	08014b40 	.word	0x08014b40
 8013a14:	08014b48 	.word	0x08014b48

08013a18 <__retarget_lock_init_recursive>:
 8013a18:	4770      	bx	lr

08013a1a <__retarget_lock_acquire_recursive>:
 8013a1a:	4770      	bx	lr

08013a1c <__retarget_lock_release_recursive>:
 8013a1c:	4770      	bx	lr

08013a1e <memcpy>:
 8013a1e:	440a      	add	r2, r1
 8013a20:	4291      	cmp	r1, r2
 8013a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a26:	d100      	bne.n	8013a2a <memcpy+0xc>
 8013a28:	4770      	bx	lr
 8013a2a:	b510      	push	{r4, lr}
 8013a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a34:	4291      	cmp	r1, r2
 8013a36:	d1f9      	bne.n	8013a2c <memcpy+0xe>
 8013a38:	bd10      	pop	{r4, pc}
	...

08013a3c <_free_r>:
 8013a3c:	b538      	push	{r3, r4, r5, lr}
 8013a3e:	4605      	mov	r5, r0
 8013a40:	2900      	cmp	r1, #0
 8013a42:	d041      	beq.n	8013ac8 <_free_r+0x8c>
 8013a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a48:	1f0c      	subs	r4, r1, #4
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	bfb8      	it	lt
 8013a4e:	18e4      	addlt	r4, r4, r3
 8013a50:	f7ff fc88 	bl	8013364 <__malloc_lock>
 8013a54:	4a1d      	ldr	r2, [pc, #116]	@ (8013acc <_free_r+0x90>)
 8013a56:	6813      	ldr	r3, [r2, #0]
 8013a58:	b933      	cbnz	r3, 8013a68 <_free_r+0x2c>
 8013a5a:	6063      	str	r3, [r4, #4]
 8013a5c:	6014      	str	r4, [r2, #0]
 8013a5e:	4628      	mov	r0, r5
 8013a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a64:	f7ff bc84 	b.w	8013370 <__malloc_unlock>
 8013a68:	42a3      	cmp	r3, r4
 8013a6a:	d908      	bls.n	8013a7e <_free_r+0x42>
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	1821      	adds	r1, r4, r0
 8013a70:	428b      	cmp	r3, r1
 8013a72:	bf01      	itttt	eq
 8013a74:	6819      	ldreq	r1, [r3, #0]
 8013a76:	685b      	ldreq	r3, [r3, #4]
 8013a78:	1809      	addeq	r1, r1, r0
 8013a7a:	6021      	streq	r1, [r4, #0]
 8013a7c:	e7ed      	b.n	8013a5a <_free_r+0x1e>
 8013a7e:	461a      	mov	r2, r3
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	b10b      	cbz	r3, 8013a88 <_free_r+0x4c>
 8013a84:	42a3      	cmp	r3, r4
 8013a86:	d9fa      	bls.n	8013a7e <_free_r+0x42>
 8013a88:	6811      	ldr	r1, [r2, #0]
 8013a8a:	1850      	adds	r0, r2, r1
 8013a8c:	42a0      	cmp	r0, r4
 8013a8e:	d10b      	bne.n	8013aa8 <_free_r+0x6c>
 8013a90:	6820      	ldr	r0, [r4, #0]
 8013a92:	4401      	add	r1, r0
 8013a94:	1850      	adds	r0, r2, r1
 8013a96:	4283      	cmp	r3, r0
 8013a98:	6011      	str	r1, [r2, #0]
 8013a9a:	d1e0      	bne.n	8013a5e <_free_r+0x22>
 8013a9c:	6818      	ldr	r0, [r3, #0]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	6053      	str	r3, [r2, #4]
 8013aa2:	4408      	add	r0, r1
 8013aa4:	6010      	str	r0, [r2, #0]
 8013aa6:	e7da      	b.n	8013a5e <_free_r+0x22>
 8013aa8:	d902      	bls.n	8013ab0 <_free_r+0x74>
 8013aaa:	230c      	movs	r3, #12
 8013aac:	602b      	str	r3, [r5, #0]
 8013aae:	e7d6      	b.n	8013a5e <_free_r+0x22>
 8013ab0:	6820      	ldr	r0, [r4, #0]
 8013ab2:	1821      	adds	r1, r4, r0
 8013ab4:	428b      	cmp	r3, r1
 8013ab6:	bf04      	itt	eq
 8013ab8:	6819      	ldreq	r1, [r3, #0]
 8013aba:	685b      	ldreq	r3, [r3, #4]
 8013abc:	6063      	str	r3, [r4, #4]
 8013abe:	bf04      	itt	eq
 8013ac0:	1809      	addeq	r1, r1, r0
 8013ac2:	6021      	streq	r1, [r4, #0]
 8013ac4:	6054      	str	r4, [r2, #4]
 8013ac6:	e7ca      	b.n	8013a5e <_free_r+0x22>
 8013ac8:	bd38      	pop	{r3, r4, r5, pc}
 8013aca:	bf00      	nop
 8013acc:	24000da4 	.word	0x24000da4

08013ad0 <__sfputc_r>:
 8013ad0:	6893      	ldr	r3, [r2, #8]
 8013ad2:	3b01      	subs	r3, #1
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	b410      	push	{r4}
 8013ad8:	6093      	str	r3, [r2, #8]
 8013ada:	da08      	bge.n	8013aee <__sfputc_r+0x1e>
 8013adc:	6994      	ldr	r4, [r2, #24]
 8013ade:	42a3      	cmp	r3, r4
 8013ae0:	db01      	blt.n	8013ae6 <__sfputc_r+0x16>
 8013ae2:	290a      	cmp	r1, #10
 8013ae4:	d103      	bne.n	8013aee <__sfputc_r+0x1e>
 8013ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aea:	f7ff be1a 	b.w	8013722 <__swbuf_r>
 8013aee:	6813      	ldr	r3, [r2, #0]
 8013af0:	1c58      	adds	r0, r3, #1
 8013af2:	6010      	str	r0, [r2, #0]
 8013af4:	7019      	strb	r1, [r3, #0]
 8013af6:	4608      	mov	r0, r1
 8013af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <__sfputs_r>:
 8013afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b00:	4606      	mov	r6, r0
 8013b02:	460f      	mov	r7, r1
 8013b04:	4614      	mov	r4, r2
 8013b06:	18d5      	adds	r5, r2, r3
 8013b08:	42ac      	cmp	r4, r5
 8013b0a:	d101      	bne.n	8013b10 <__sfputs_r+0x12>
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	e007      	b.n	8013b20 <__sfputs_r+0x22>
 8013b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b14:	463a      	mov	r2, r7
 8013b16:	4630      	mov	r0, r6
 8013b18:	f7ff ffda 	bl	8013ad0 <__sfputc_r>
 8013b1c:	1c43      	adds	r3, r0, #1
 8013b1e:	d1f3      	bne.n	8013b08 <__sfputs_r+0xa>
 8013b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b24 <_vfiprintf_r>:
 8013b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b28:	460d      	mov	r5, r1
 8013b2a:	b09d      	sub	sp, #116	@ 0x74
 8013b2c:	4614      	mov	r4, r2
 8013b2e:	4698      	mov	r8, r3
 8013b30:	4606      	mov	r6, r0
 8013b32:	b118      	cbz	r0, 8013b3c <_vfiprintf_r+0x18>
 8013b34:	6a03      	ldr	r3, [r0, #32]
 8013b36:	b90b      	cbnz	r3, 8013b3c <_vfiprintf_r+0x18>
 8013b38:	f7ff fd02 	bl	8013540 <__sinit>
 8013b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b3e:	07d9      	lsls	r1, r3, #31
 8013b40:	d405      	bmi.n	8013b4e <_vfiprintf_r+0x2a>
 8013b42:	89ab      	ldrh	r3, [r5, #12]
 8013b44:	059a      	lsls	r2, r3, #22
 8013b46:	d402      	bmi.n	8013b4e <_vfiprintf_r+0x2a>
 8013b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b4a:	f7ff ff66 	bl	8013a1a <__retarget_lock_acquire_recursive>
 8013b4e:	89ab      	ldrh	r3, [r5, #12]
 8013b50:	071b      	lsls	r3, r3, #28
 8013b52:	d501      	bpl.n	8013b58 <_vfiprintf_r+0x34>
 8013b54:	692b      	ldr	r3, [r5, #16]
 8013b56:	b99b      	cbnz	r3, 8013b80 <_vfiprintf_r+0x5c>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f7ff fe20 	bl	80137a0 <__swsetup_r>
 8013b60:	b170      	cbz	r0, 8013b80 <_vfiprintf_r+0x5c>
 8013b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b64:	07dc      	lsls	r4, r3, #31
 8013b66:	d504      	bpl.n	8013b72 <_vfiprintf_r+0x4e>
 8013b68:	f04f 30ff 	mov.w	r0, #4294967295
 8013b6c:	b01d      	add	sp, #116	@ 0x74
 8013b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b72:	89ab      	ldrh	r3, [r5, #12]
 8013b74:	0598      	lsls	r0, r3, #22
 8013b76:	d4f7      	bmi.n	8013b68 <_vfiprintf_r+0x44>
 8013b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b7a:	f7ff ff4f 	bl	8013a1c <__retarget_lock_release_recursive>
 8013b7e:	e7f3      	b.n	8013b68 <_vfiprintf_r+0x44>
 8013b80:	2300      	movs	r3, #0
 8013b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b84:	2320      	movs	r3, #32
 8013b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b8e:	2330      	movs	r3, #48	@ 0x30
 8013b90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013d40 <_vfiprintf_r+0x21c>
 8013b94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b98:	f04f 0901 	mov.w	r9, #1
 8013b9c:	4623      	mov	r3, r4
 8013b9e:	469a      	mov	sl, r3
 8013ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ba4:	b10a      	cbz	r2, 8013baa <_vfiprintf_r+0x86>
 8013ba6:	2a25      	cmp	r2, #37	@ 0x25
 8013ba8:	d1f9      	bne.n	8013b9e <_vfiprintf_r+0x7a>
 8013baa:	ebba 0b04 	subs.w	fp, sl, r4
 8013bae:	d00b      	beq.n	8013bc8 <_vfiprintf_r+0xa4>
 8013bb0:	465b      	mov	r3, fp
 8013bb2:	4622      	mov	r2, r4
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	4630      	mov	r0, r6
 8013bb8:	f7ff ffa1 	bl	8013afe <__sfputs_r>
 8013bbc:	3001      	adds	r0, #1
 8013bbe:	f000 80a7 	beq.w	8013d10 <_vfiprintf_r+0x1ec>
 8013bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013bc4:	445a      	add	r2, fp
 8013bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	f000 809f 	beq.w	8013d10 <_vfiprintf_r+0x1ec>
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bdc:	f10a 0a01 	add.w	sl, sl, #1
 8013be0:	9304      	str	r3, [sp, #16]
 8013be2:	9307      	str	r3, [sp, #28]
 8013be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8013bea:	4654      	mov	r4, sl
 8013bec:	2205      	movs	r2, #5
 8013bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bf2:	4853      	ldr	r0, [pc, #332]	@ (8013d40 <_vfiprintf_r+0x21c>)
 8013bf4:	f7ec fb84 	bl	8000300 <memchr>
 8013bf8:	9a04      	ldr	r2, [sp, #16]
 8013bfa:	b9d8      	cbnz	r0, 8013c34 <_vfiprintf_r+0x110>
 8013bfc:	06d1      	lsls	r1, r2, #27
 8013bfe:	bf44      	itt	mi
 8013c00:	2320      	movmi	r3, #32
 8013c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c06:	0713      	lsls	r3, r2, #28
 8013c08:	bf44      	itt	mi
 8013c0a:	232b      	movmi	r3, #43	@ 0x2b
 8013c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c10:	f89a 3000 	ldrb.w	r3, [sl]
 8013c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c16:	d015      	beq.n	8013c44 <_vfiprintf_r+0x120>
 8013c18:	9a07      	ldr	r2, [sp, #28]
 8013c1a:	4654      	mov	r4, sl
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	f04f 0c0a 	mov.w	ip, #10
 8013c22:	4621      	mov	r1, r4
 8013c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c28:	3b30      	subs	r3, #48	@ 0x30
 8013c2a:	2b09      	cmp	r3, #9
 8013c2c:	d94b      	bls.n	8013cc6 <_vfiprintf_r+0x1a2>
 8013c2e:	b1b0      	cbz	r0, 8013c5e <_vfiprintf_r+0x13a>
 8013c30:	9207      	str	r2, [sp, #28]
 8013c32:	e014      	b.n	8013c5e <_vfiprintf_r+0x13a>
 8013c34:	eba0 0308 	sub.w	r3, r0, r8
 8013c38:	fa09 f303 	lsl.w	r3, r9, r3
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	9304      	str	r3, [sp, #16]
 8013c40:	46a2      	mov	sl, r4
 8013c42:	e7d2      	b.n	8013bea <_vfiprintf_r+0xc6>
 8013c44:	9b03      	ldr	r3, [sp, #12]
 8013c46:	1d19      	adds	r1, r3, #4
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	9103      	str	r1, [sp, #12]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	bfbb      	ittet	lt
 8013c50:	425b      	neglt	r3, r3
 8013c52:	f042 0202 	orrlt.w	r2, r2, #2
 8013c56:	9307      	strge	r3, [sp, #28]
 8013c58:	9307      	strlt	r3, [sp, #28]
 8013c5a:	bfb8      	it	lt
 8013c5c:	9204      	strlt	r2, [sp, #16]
 8013c5e:	7823      	ldrb	r3, [r4, #0]
 8013c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c62:	d10a      	bne.n	8013c7a <_vfiprintf_r+0x156>
 8013c64:	7863      	ldrb	r3, [r4, #1]
 8013c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c68:	d132      	bne.n	8013cd0 <_vfiprintf_r+0x1ac>
 8013c6a:	9b03      	ldr	r3, [sp, #12]
 8013c6c:	1d1a      	adds	r2, r3, #4
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	9203      	str	r2, [sp, #12]
 8013c72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c76:	3402      	adds	r4, #2
 8013c78:	9305      	str	r3, [sp, #20]
 8013c7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013d50 <_vfiprintf_r+0x22c>
 8013c7e:	7821      	ldrb	r1, [r4, #0]
 8013c80:	2203      	movs	r2, #3
 8013c82:	4650      	mov	r0, sl
 8013c84:	f7ec fb3c 	bl	8000300 <memchr>
 8013c88:	b138      	cbz	r0, 8013c9a <_vfiprintf_r+0x176>
 8013c8a:	9b04      	ldr	r3, [sp, #16]
 8013c8c:	eba0 000a 	sub.w	r0, r0, sl
 8013c90:	2240      	movs	r2, #64	@ 0x40
 8013c92:	4082      	lsls	r2, r0
 8013c94:	4313      	orrs	r3, r2
 8013c96:	3401      	adds	r4, #1
 8013c98:	9304      	str	r3, [sp, #16]
 8013c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c9e:	4829      	ldr	r0, [pc, #164]	@ (8013d44 <_vfiprintf_r+0x220>)
 8013ca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013ca4:	2206      	movs	r2, #6
 8013ca6:	f7ec fb2b 	bl	8000300 <memchr>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d03f      	beq.n	8013d2e <_vfiprintf_r+0x20a>
 8013cae:	4b26      	ldr	r3, [pc, #152]	@ (8013d48 <_vfiprintf_r+0x224>)
 8013cb0:	bb1b      	cbnz	r3, 8013cfa <_vfiprintf_r+0x1d6>
 8013cb2:	9b03      	ldr	r3, [sp, #12]
 8013cb4:	3307      	adds	r3, #7
 8013cb6:	f023 0307 	bic.w	r3, r3, #7
 8013cba:	3308      	adds	r3, #8
 8013cbc:	9303      	str	r3, [sp, #12]
 8013cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cc0:	443b      	add	r3, r7
 8013cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cc4:	e76a      	b.n	8013b9c <_vfiprintf_r+0x78>
 8013cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013cca:	460c      	mov	r4, r1
 8013ccc:	2001      	movs	r0, #1
 8013cce:	e7a8      	b.n	8013c22 <_vfiprintf_r+0xfe>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	3401      	adds	r4, #1
 8013cd4:	9305      	str	r3, [sp, #20]
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	f04f 0c0a 	mov.w	ip, #10
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ce2:	3a30      	subs	r2, #48	@ 0x30
 8013ce4:	2a09      	cmp	r2, #9
 8013ce6:	d903      	bls.n	8013cf0 <_vfiprintf_r+0x1cc>
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d0c6      	beq.n	8013c7a <_vfiprintf_r+0x156>
 8013cec:	9105      	str	r1, [sp, #20]
 8013cee:	e7c4      	b.n	8013c7a <_vfiprintf_r+0x156>
 8013cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e7f0      	b.n	8013cdc <_vfiprintf_r+0x1b8>
 8013cfa:	ab03      	add	r3, sp, #12
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	462a      	mov	r2, r5
 8013d00:	4b12      	ldr	r3, [pc, #72]	@ (8013d4c <_vfiprintf_r+0x228>)
 8013d02:	a904      	add	r1, sp, #16
 8013d04:	4630      	mov	r0, r6
 8013d06:	f3af 8000 	nop.w
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	1c78      	adds	r0, r7, #1
 8013d0e:	d1d6      	bne.n	8013cbe <_vfiprintf_r+0x19a>
 8013d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d12:	07d9      	lsls	r1, r3, #31
 8013d14:	d405      	bmi.n	8013d22 <_vfiprintf_r+0x1fe>
 8013d16:	89ab      	ldrh	r3, [r5, #12]
 8013d18:	059a      	lsls	r2, r3, #22
 8013d1a:	d402      	bmi.n	8013d22 <_vfiprintf_r+0x1fe>
 8013d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013d1e:	f7ff fe7d 	bl	8013a1c <__retarget_lock_release_recursive>
 8013d22:	89ab      	ldrh	r3, [r5, #12]
 8013d24:	065b      	lsls	r3, r3, #25
 8013d26:	f53f af1f 	bmi.w	8013b68 <_vfiprintf_r+0x44>
 8013d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d2c:	e71e      	b.n	8013b6c <_vfiprintf_r+0x48>
 8013d2e:	ab03      	add	r3, sp, #12
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	462a      	mov	r2, r5
 8013d34:	4b05      	ldr	r3, [pc, #20]	@ (8013d4c <_vfiprintf_r+0x228>)
 8013d36:	a904      	add	r1, sp, #16
 8013d38:	4630      	mov	r0, r6
 8013d3a:	f000 f879 	bl	8013e30 <_printf_i>
 8013d3e:	e7e4      	b.n	8013d0a <_vfiprintf_r+0x1e6>
 8013d40:	08014b05 	.word	0x08014b05
 8013d44:	08014b0f 	.word	0x08014b0f
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	08013aff 	.word	0x08013aff
 8013d50:	08014b0b 	.word	0x08014b0b

08013d54 <_printf_common>:
 8013d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d58:	4616      	mov	r6, r2
 8013d5a:	4698      	mov	r8, r3
 8013d5c:	688a      	ldr	r2, [r1, #8]
 8013d5e:	690b      	ldr	r3, [r1, #16]
 8013d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013d64:	4293      	cmp	r3, r2
 8013d66:	bfb8      	it	lt
 8013d68:	4613      	movlt	r3, r2
 8013d6a:	6033      	str	r3, [r6, #0]
 8013d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013d70:	4607      	mov	r7, r0
 8013d72:	460c      	mov	r4, r1
 8013d74:	b10a      	cbz	r2, 8013d7a <_printf_common+0x26>
 8013d76:	3301      	adds	r3, #1
 8013d78:	6033      	str	r3, [r6, #0]
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	0699      	lsls	r1, r3, #26
 8013d7e:	bf42      	ittt	mi
 8013d80:	6833      	ldrmi	r3, [r6, #0]
 8013d82:	3302      	addmi	r3, #2
 8013d84:	6033      	strmi	r3, [r6, #0]
 8013d86:	6825      	ldr	r5, [r4, #0]
 8013d88:	f015 0506 	ands.w	r5, r5, #6
 8013d8c:	d106      	bne.n	8013d9c <_printf_common+0x48>
 8013d8e:	f104 0a19 	add.w	sl, r4, #25
 8013d92:	68e3      	ldr	r3, [r4, #12]
 8013d94:	6832      	ldr	r2, [r6, #0]
 8013d96:	1a9b      	subs	r3, r3, r2
 8013d98:	42ab      	cmp	r3, r5
 8013d9a:	dc26      	bgt.n	8013dea <_printf_common+0x96>
 8013d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013da0:	6822      	ldr	r2, [r4, #0]
 8013da2:	3b00      	subs	r3, #0
 8013da4:	bf18      	it	ne
 8013da6:	2301      	movne	r3, #1
 8013da8:	0692      	lsls	r2, r2, #26
 8013daa:	d42b      	bmi.n	8013e04 <_printf_common+0xb0>
 8013dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013db0:	4641      	mov	r1, r8
 8013db2:	4638      	mov	r0, r7
 8013db4:	47c8      	blx	r9
 8013db6:	3001      	adds	r0, #1
 8013db8:	d01e      	beq.n	8013df8 <_printf_common+0xa4>
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	6922      	ldr	r2, [r4, #16]
 8013dbe:	f003 0306 	and.w	r3, r3, #6
 8013dc2:	2b04      	cmp	r3, #4
 8013dc4:	bf02      	ittt	eq
 8013dc6:	68e5      	ldreq	r5, [r4, #12]
 8013dc8:	6833      	ldreq	r3, [r6, #0]
 8013dca:	1aed      	subeq	r5, r5, r3
 8013dcc:	68a3      	ldr	r3, [r4, #8]
 8013dce:	bf0c      	ite	eq
 8013dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013dd4:	2500      	movne	r5, #0
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	bfc4      	itt	gt
 8013dda:	1a9b      	subgt	r3, r3, r2
 8013ddc:	18ed      	addgt	r5, r5, r3
 8013dde:	2600      	movs	r6, #0
 8013de0:	341a      	adds	r4, #26
 8013de2:	42b5      	cmp	r5, r6
 8013de4:	d11a      	bne.n	8013e1c <_printf_common+0xc8>
 8013de6:	2000      	movs	r0, #0
 8013de8:	e008      	b.n	8013dfc <_printf_common+0xa8>
 8013dea:	2301      	movs	r3, #1
 8013dec:	4652      	mov	r2, sl
 8013dee:	4641      	mov	r1, r8
 8013df0:	4638      	mov	r0, r7
 8013df2:	47c8      	blx	r9
 8013df4:	3001      	adds	r0, #1
 8013df6:	d103      	bne.n	8013e00 <_printf_common+0xac>
 8013df8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e00:	3501      	adds	r5, #1
 8013e02:	e7c6      	b.n	8013d92 <_printf_common+0x3e>
 8013e04:	18e1      	adds	r1, r4, r3
 8013e06:	1c5a      	adds	r2, r3, #1
 8013e08:	2030      	movs	r0, #48	@ 0x30
 8013e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013e0e:	4422      	add	r2, r4
 8013e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013e18:	3302      	adds	r3, #2
 8013e1a:	e7c7      	b.n	8013dac <_printf_common+0x58>
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	4622      	mov	r2, r4
 8013e20:	4641      	mov	r1, r8
 8013e22:	4638      	mov	r0, r7
 8013e24:	47c8      	blx	r9
 8013e26:	3001      	adds	r0, #1
 8013e28:	d0e6      	beq.n	8013df8 <_printf_common+0xa4>
 8013e2a:	3601      	adds	r6, #1
 8013e2c:	e7d9      	b.n	8013de2 <_printf_common+0x8e>
	...

08013e30 <_printf_i>:
 8013e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e34:	7e0f      	ldrb	r7, [r1, #24]
 8013e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013e38:	2f78      	cmp	r7, #120	@ 0x78
 8013e3a:	4691      	mov	r9, r2
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	460c      	mov	r4, r1
 8013e40:	469a      	mov	sl, r3
 8013e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e46:	d807      	bhi.n	8013e58 <_printf_i+0x28>
 8013e48:	2f62      	cmp	r7, #98	@ 0x62
 8013e4a:	d80a      	bhi.n	8013e62 <_printf_i+0x32>
 8013e4c:	2f00      	cmp	r7, #0
 8013e4e:	f000 80d2 	beq.w	8013ff6 <_printf_i+0x1c6>
 8013e52:	2f58      	cmp	r7, #88	@ 0x58
 8013e54:	f000 80b9 	beq.w	8013fca <_printf_i+0x19a>
 8013e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013e60:	e03a      	b.n	8013ed8 <_printf_i+0xa8>
 8013e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013e66:	2b15      	cmp	r3, #21
 8013e68:	d8f6      	bhi.n	8013e58 <_printf_i+0x28>
 8013e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8013e70 <_printf_i+0x40>)
 8013e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e70:	08013ec9 	.word	0x08013ec9
 8013e74:	08013edd 	.word	0x08013edd
 8013e78:	08013e59 	.word	0x08013e59
 8013e7c:	08013e59 	.word	0x08013e59
 8013e80:	08013e59 	.word	0x08013e59
 8013e84:	08013e59 	.word	0x08013e59
 8013e88:	08013edd 	.word	0x08013edd
 8013e8c:	08013e59 	.word	0x08013e59
 8013e90:	08013e59 	.word	0x08013e59
 8013e94:	08013e59 	.word	0x08013e59
 8013e98:	08013e59 	.word	0x08013e59
 8013e9c:	08013fdd 	.word	0x08013fdd
 8013ea0:	08013f07 	.word	0x08013f07
 8013ea4:	08013f97 	.word	0x08013f97
 8013ea8:	08013e59 	.word	0x08013e59
 8013eac:	08013e59 	.word	0x08013e59
 8013eb0:	08013fff 	.word	0x08013fff
 8013eb4:	08013e59 	.word	0x08013e59
 8013eb8:	08013f07 	.word	0x08013f07
 8013ebc:	08013e59 	.word	0x08013e59
 8013ec0:	08013e59 	.word	0x08013e59
 8013ec4:	08013f9f 	.word	0x08013f9f
 8013ec8:	6833      	ldr	r3, [r6, #0]
 8013eca:	1d1a      	adds	r2, r3, #4
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	6032      	str	r2, [r6, #0]
 8013ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ed8:	2301      	movs	r3, #1
 8013eda:	e09d      	b.n	8014018 <_printf_i+0x1e8>
 8013edc:	6833      	ldr	r3, [r6, #0]
 8013ede:	6820      	ldr	r0, [r4, #0]
 8013ee0:	1d19      	adds	r1, r3, #4
 8013ee2:	6031      	str	r1, [r6, #0]
 8013ee4:	0606      	lsls	r6, r0, #24
 8013ee6:	d501      	bpl.n	8013eec <_printf_i+0xbc>
 8013ee8:	681d      	ldr	r5, [r3, #0]
 8013eea:	e003      	b.n	8013ef4 <_printf_i+0xc4>
 8013eec:	0645      	lsls	r5, r0, #25
 8013eee:	d5fb      	bpl.n	8013ee8 <_printf_i+0xb8>
 8013ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	da03      	bge.n	8013f00 <_printf_i+0xd0>
 8013ef8:	232d      	movs	r3, #45	@ 0x2d
 8013efa:	426d      	negs	r5, r5
 8013efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f00:	4859      	ldr	r0, [pc, #356]	@ (8014068 <_printf_i+0x238>)
 8013f02:	230a      	movs	r3, #10
 8013f04:	e011      	b.n	8013f2a <_printf_i+0xfa>
 8013f06:	6821      	ldr	r1, [r4, #0]
 8013f08:	6833      	ldr	r3, [r6, #0]
 8013f0a:	0608      	lsls	r0, r1, #24
 8013f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013f10:	d402      	bmi.n	8013f18 <_printf_i+0xe8>
 8013f12:	0649      	lsls	r1, r1, #25
 8013f14:	bf48      	it	mi
 8013f16:	b2ad      	uxthmi	r5, r5
 8013f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8013f1a:	4853      	ldr	r0, [pc, #332]	@ (8014068 <_printf_i+0x238>)
 8013f1c:	6033      	str	r3, [r6, #0]
 8013f1e:	bf14      	ite	ne
 8013f20:	230a      	movne	r3, #10
 8013f22:	2308      	moveq	r3, #8
 8013f24:	2100      	movs	r1, #0
 8013f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013f2a:	6866      	ldr	r6, [r4, #4]
 8013f2c:	60a6      	str	r6, [r4, #8]
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	bfa2      	ittt	ge
 8013f32:	6821      	ldrge	r1, [r4, #0]
 8013f34:	f021 0104 	bicge.w	r1, r1, #4
 8013f38:	6021      	strge	r1, [r4, #0]
 8013f3a:	b90d      	cbnz	r5, 8013f40 <_printf_i+0x110>
 8013f3c:	2e00      	cmp	r6, #0
 8013f3e:	d04b      	beq.n	8013fd8 <_printf_i+0x1a8>
 8013f40:	4616      	mov	r6, r2
 8013f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f46:	fb03 5711 	mls	r7, r3, r1, r5
 8013f4a:	5dc7      	ldrb	r7, [r0, r7]
 8013f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f50:	462f      	mov	r7, r5
 8013f52:	42bb      	cmp	r3, r7
 8013f54:	460d      	mov	r5, r1
 8013f56:	d9f4      	bls.n	8013f42 <_printf_i+0x112>
 8013f58:	2b08      	cmp	r3, #8
 8013f5a:	d10b      	bne.n	8013f74 <_printf_i+0x144>
 8013f5c:	6823      	ldr	r3, [r4, #0]
 8013f5e:	07df      	lsls	r7, r3, #31
 8013f60:	d508      	bpl.n	8013f74 <_printf_i+0x144>
 8013f62:	6923      	ldr	r3, [r4, #16]
 8013f64:	6861      	ldr	r1, [r4, #4]
 8013f66:	4299      	cmp	r1, r3
 8013f68:	bfde      	ittt	le
 8013f6a:	2330      	movle	r3, #48	@ 0x30
 8013f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f74:	1b92      	subs	r2, r2, r6
 8013f76:	6122      	str	r2, [r4, #16]
 8013f78:	f8cd a000 	str.w	sl, [sp]
 8013f7c:	464b      	mov	r3, r9
 8013f7e:	aa03      	add	r2, sp, #12
 8013f80:	4621      	mov	r1, r4
 8013f82:	4640      	mov	r0, r8
 8013f84:	f7ff fee6 	bl	8013d54 <_printf_common>
 8013f88:	3001      	adds	r0, #1
 8013f8a:	d14a      	bne.n	8014022 <_printf_i+0x1f2>
 8013f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f90:	b004      	add	sp, #16
 8013f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f96:	6823      	ldr	r3, [r4, #0]
 8013f98:	f043 0320 	orr.w	r3, r3, #32
 8013f9c:	6023      	str	r3, [r4, #0]
 8013f9e:	4833      	ldr	r0, [pc, #204]	@ (801406c <_printf_i+0x23c>)
 8013fa0:	2778      	movs	r7, #120	@ 0x78
 8013fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	6831      	ldr	r1, [r6, #0]
 8013faa:	061f      	lsls	r7, r3, #24
 8013fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8013fb0:	d402      	bmi.n	8013fb8 <_printf_i+0x188>
 8013fb2:	065f      	lsls	r7, r3, #25
 8013fb4:	bf48      	it	mi
 8013fb6:	b2ad      	uxthmi	r5, r5
 8013fb8:	6031      	str	r1, [r6, #0]
 8013fba:	07d9      	lsls	r1, r3, #31
 8013fbc:	bf44      	itt	mi
 8013fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8013fc2:	6023      	strmi	r3, [r4, #0]
 8013fc4:	b11d      	cbz	r5, 8013fce <_printf_i+0x19e>
 8013fc6:	2310      	movs	r3, #16
 8013fc8:	e7ac      	b.n	8013f24 <_printf_i+0xf4>
 8013fca:	4827      	ldr	r0, [pc, #156]	@ (8014068 <_printf_i+0x238>)
 8013fcc:	e7e9      	b.n	8013fa2 <_printf_i+0x172>
 8013fce:	6823      	ldr	r3, [r4, #0]
 8013fd0:	f023 0320 	bic.w	r3, r3, #32
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	e7f6      	b.n	8013fc6 <_printf_i+0x196>
 8013fd8:	4616      	mov	r6, r2
 8013fda:	e7bd      	b.n	8013f58 <_printf_i+0x128>
 8013fdc:	6833      	ldr	r3, [r6, #0]
 8013fde:	6825      	ldr	r5, [r4, #0]
 8013fe0:	6961      	ldr	r1, [r4, #20]
 8013fe2:	1d18      	adds	r0, r3, #4
 8013fe4:	6030      	str	r0, [r6, #0]
 8013fe6:	062e      	lsls	r6, r5, #24
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	d501      	bpl.n	8013ff0 <_printf_i+0x1c0>
 8013fec:	6019      	str	r1, [r3, #0]
 8013fee:	e002      	b.n	8013ff6 <_printf_i+0x1c6>
 8013ff0:	0668      	lsls	r0, r5, #25
 8013ff2:	d5fb      	bpl.n	8013fec <_printf_i+0x1bc>
 8013ff4:	8019      	strh	r1, [r3, #0]
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	6123      	str	r3, [r4, #16]
 8013ffa:	4616      	mov	r6, r2
 8013ffc:	e7bc      	b.n	8013f78 <_printf_i+0x148>
 8013ffe:	6833      	ldr	r3, [r6, #0]
 8014000:	1d1a      	adds	r2, r3, #4
 8014002:	6032      	str	r2, [r6, #0]
 8014004:	681e      	ldr	r6, [r3, #0]
 8014006:	6862      	ldr	r2, [r4, #4]
 8014008:	2100      	movs	r1, #0
 801400a:	4630      	mov	r0, r6
 801400c:	f7ec f978 	bl	8000300 <memchr>
 8014010:	b108      	cbz	r0, 8014016 <_printf_i+0x1e6>
 8014012:	1b80      	subs	r0, r0, r6
 8014014:	6060      	str	r0, [r4, #4]
 8014016:	6863      	ldr	r3, [r4, #4]
 8014018:	6123      	str	r3, [r4, #16]
 801401a:	2300      	movs	r3, #0
 801401c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014020:	e7aa      	b.n	8013f78 <_printf_i+0x148>
 8014022:	6923      	ldr	r3, [r4, #16]
 8014024:	4632      	mov	r2, r6
 8014026:	4649      	mov	r1, r9
 8014028:	4640      	mov	r0, r8
 801402a:	47d0      	blx	sl
 801402c:	3001      	adds	r0, #1
 801402e:	d0ad      	beq.n	8013f8c <_printf_i+0x15c>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	079b      	lsls	r3, r3, #30
 8014034:	d413      	bmi.n	801405e <_printf_i+0x22e>
 8014036:	68e0      	ldr	r0, [r4, #12]
 8014038:	9b03      	ldr	r3, [sp, #12]
 801403a:	4298      	cmp	r0, r3
 801403c:	bfb8      	it	lt
 801403e:	4618      	movlt	r0, r3
 8014040:	e7a6      	b.n	8013f90 <_printf_i+0x160>
 8014042:	2301      	movs	r3, #1
 8014044:	4632      	mov	r2, r6
 8014046:	4649      	mov	r1, r9
 8014048:	4640      	mov	r0, r8
 801404a:	47d0      	blx	sl
 801404c:	3001      	adds	r0, #1
 801404e:	d09d      	beq.n	8013f8c <_printf_i+0x15c>
 8014050:	3501      	adds	r5, #1
 8014052:	68e3      	ldr	r3, [r4, #12]
 8014054:	9903      	ldr	r1, [sp, #12]
 8014056:	1a5b      	subs	r3, r3, r1
 8014058:	42ab      	cmp	r3, r5
 801405a:	dcf2      	bgt.n	8014042 <_printf_i+0x212>
 801405c:	e7eb      	b.n	8014036 <_printf_i+0x206>
 801405e:	2500      	movs	r5, #0
 8014060:	f104 0619 	add.w	r6, r4, #25
 8014064:	e7f5      	b.n	8014052 <_printf_i+0x222>
 8014066:	bf00      	nop
 8014068:	08014b16 	.word	0x08014b16
 801406c:	08014b27 	.word	0x08014b27

08014070 <__sflush_r>:
 8014070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014078:	0716      	lsls	r6, r2, #28
 801407a:	4605      	mov	r5, r0
 801407c:	460c      	mov	r4, r1
 801407e:	d454      	bmi.n	801412a <__sflush_r+0xba>
 8014080:	684b      	ldr	r3, [r1, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	dc02      	bgt.n	801408c <__sflush_r+0x1c>
 8014086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014088:	2b00      	cmp	r3, #0
 801408a:	dd48      	ble.n	801411e <__sflush_r+0xae>
 801408c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801408e:	2e00      	cmp	r6, #0
 8014090:	d045      	beq.n	801411e <__sflush_r+0xae>
 8014092:	2300      	movs	r3, #0
 8014094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014098:	682f      	ldr	r7, [r5, #0]
 801409a:	6a21      	ldr	r1, [r4, #32]
 801409c:	602b      	str	r3, [r5, #0]
 801409e:	d030      	beq.n	8014102 <__sflush_r+0x92>
 80140a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	0759      	lsls	r1, r3, #29
 80140a6:	d505      	bpl.n	80140b4 <__sflush_r+0x44>
 80140a8:	6863      	ldr	r3, [r4, #4]
 80140aa:	1ad2      	subs	r2, r2, r3
 80140ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80140ae:	b10b      	cbz	r3, 80140b4 <__sflush_r+0x44>
 80140b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80140b2:	1ad2      	subs	r2, r2, r3
 80140b4:	2300      	movs	r3, #0
 80140b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140b8:	6a21      	ldr	r1, [r4, #32]
 80140ba:	4628      	mov	r0, r5
 80140bc:	47b0      	blx	r6
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	89a3      	ldrh	r3, [r4, #12]
 80140c2:	d106      	bne.n	80140d2 <__sflush_r+0x62>
 80140c4:	6829      	ldr	r1, [r5, #0]
 80140c6:	291d      	cmp	r1, #29
 80140c8:	d82b      	bhi.n	8014122 <__sflush_r+0xb2>
 80140ca:	4a2a      	ldr	r2, [pc, #168]	@ (8014174 <__sflush_r+0x104>)
 80140cc:	410a      	asrs	r2, r1
 80140ce:	07d6      	lsls	r6, r2, #31
 80140d0:	d427      	bmi.n	8014122 <__sflush_r+0xb2>
 80140d2:	2200      	movs	r2, #0
 80140d4:	6062      	str	r2, [r4, #4]
 80140d6:	04d9      	lsls	r1, r3, #19
 80140d8:	6922      	ldr	r2, [r4, #16]
 80140da:	6022      	str	r2, [r4, #0]
 80140dc:	d504      	bpl.n	80140e8 <__sflush_r+0x78>
 80140de:	1c42      	adds	r2, r0, #1
 80140e0:	d101      	bne.n	80140e6 <__sflush_r+0x76>
 80140e2:	682b      	ldr	r3, [r5, #0]
 80140e4:	b903      	cbnz	r3, 80140e8 <__sflush_r+0x78>
 80140e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80140e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140ea:	602f      	str	r7, [r5, #0]
 80140ec:	b1b9      	cbz	r1, 801411e <__sflush_r+0xae>
 80140ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140f2:	4299      	cmp	r1, r3
 80140f4:	d002      	beq.n	80140fc <__sflush_r+0x8c>
 80140f6:	4628      	mov	r0, r5
 80140f8:	f7ff fca0 	bl	8013a3c <_free_r>
 80140fc:	2300      	movs	r3, #0
 80140fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8014100:	e00d      	b.n	801411e <__sflush_r+0xae>
 8014102:	2301      	movs	r3, #1
 8014104:	4628      	mov	r0, r5
 8014106:	47b0      	blx	r6
 8014108:	4602      	mov	r2, r0
 801410a:	1c50      	adds	r0, r2, #1
 801410c:	d1c9      	bne.n	80140a2 <__sflush_r+0x32>
 801410e:	682b      	ldr	r3, [r5, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d0c6      	beq.n	80140a2 <__sflush_r+0x32>
 8014114:	2b1d      	cmp	r3, #29
 8014116:	d001      	beq.n	801411c <__sflush_r+0xac>
 8014118:	2b16      	cmp	r3, #22
 801411a:	d11e      	bne.n	801415a <__sflush_r+0xea>
 801411c:	602f      	str	r7, [r5, #0]
 801411e:	2000      	movs	r0, #0
 8014120:	e022      	b.n	8014168 <__sflush_r+0xf8>
 8014122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014126:	b21b      	sxth	r3, r3
 8014128:	e01b      	b.n	8014162 <__sflush_r+0xf2>
 801412a:	690f      	ldr	r7, [r1, #16]
 801412c:	2f00      	cmp	r7, #0
 801412e:	d0f6      	beq.n	801411e <__sflush_r+0xae>
 8014130:	0793      	lsls	r3, r2, #30
 8014132:	680e      	ldr	r6, [r1, #0]
 8014134:	bf08      	it	eq
 8014136:	694b      	ldreq	r3, [r1, #20]
 8014138:	600f      	str	r7, [r1, #0]
 801413a:	bf18      	it	ne
 801413c:	2300      	movne	r3, #0
 801413e:	eba6 0807 	sub.w	r8, r6, r7
 8014142:	608b      	str	r3, [r1, #8]
 8014144:	f1b8 0f00 	cmp.w	r8, #0
 8014148:	dde9      	ble.n	801411e <__sflush_r+0xae>
 801414a:	6a21      	ldr	r1, [r4, #32]
 801414c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801414e:	4643      	mov	r3, r8
 8014150:	463a      	mov	r2, r7
 8014152:	4628      	mov	r0, r5
 8014154:	47b0      	blx	r6
 8014156:	2800      	cmp	r0, #0
 8014158:	dc08      	bgt.n	801416c <__sflush_r+0xfc>
 801415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801415e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014162:	81a3      	strh	r3, [r4, #12]
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416c:	4407      	add	r7, r0
 801416e:	eba8 0800 	sub.w	r8, r8, r0
 8014172:	e7e7      	b.n	8014144 <__sflush_r+0xd4>
 8014174:	dfbffffe 	.word	0xdfbffffe

08014178 <_fflush_r>:
 8014178:	b538      	push	{r3, r4, r5, lr}
 801417a:	690b      	ldr	r3, [r1, #16]
 801417c:	4605      	mov	r5, r0
 801417e:	460c      	mov	r4, r1
 8014180:	b913      	cbnz	r3, 8014188 <_fflush_r+0x10>
 8014182:	2500      	movs	r5, #0
 8014184:	4628      	mov	r0, r5
 8014186:	bd38      	pop	{r3, r4, r5, pc}
 8014188:	b118      	cbz	r0, 8014192 <_fflush_r+0x1a>
 801418a:	6a03      	ldr	r3, [r0, #32]
 801418c:	b90b      	cbnz	r3, 8014192 <_fflush_r+0x1a>
 801418e:	f7ff f9d7 	bl	8013540 <__sinit>
 8014192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d0f3      	beq.n	8014182 <_fflush_r+0xa>
 801419a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801419c:	07d0      	lsls	r0, r2, #31
 801419e:	d404      	bmi.n	80141aa <_fflush_r+0x32>
 80141a0:	0599      	lsls	r1, r3, #22
 80141a2:	d402      	bmi.n	80141aa <_fflush_r+0x32>
 80141a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141a6:	f7ff fc38 	bl	8013a1a <__retarget_lock_acquire_recursive>
 80141aa:	4628      	mov	r0, r5
 80141ac:	4621      	mov	r1, r4
 80141ae:	f7ff ff5f 	bl	8014070 <__sflush_r>
 80141b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141b4:	07da      	lsls	r2, r3, #31
 80141b6:	4605      	mov	r5, r0
 80141b8:	d4e4      	bmi.n	8014184 <_fflush_r+0xc>
 80141ba:	89a3      	ldrh	r3, [r4, #12]
 80141bc:	059b      	lsls	r3, r3, #22
 80141be:	d4e1      	bmi.n	8014184 <_fflush_r+0xc>
 80141c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141c2:	f7ff fc2b 	bl	8013a1c <__retarget_lock_release_recursive>
 80141c6:	e7dd      	b.n	8014184 <_fflush_r+0xc>

080141c8 <__swhatbuf_r>:
 80141c8:	b570      	push	{r4, r5, r6, lr}
 80141ca:	460c      	mov	r4, r1
 80141cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141d0:	2900      	cmp	r1, #0
 80141d2:	b096      	sub	sp, #88	@ 0x58
 80141d4:	4615      	mov	r5, r2
 80141d6:	461e      	mov	r6, r3
 80141d8:	da0d      	bge.n	80141f6 <__swhatbuf_r+0x2e>
 80141da:	89a3      	ldrh	r3, [r4, #12]
 80141dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80141e0:	f04f 0100 	mov.w	r1, #0
 80141e4:	bf14      	ite	ne
 80141e6:	2340      	movne	r3, #64	@ 0x40
 80141e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80141ec:	2000      	movs	r0, #0
 80141ee:	6031      	str	r1, [r6, #0]
 80141f0:	602b      	str	r3, [r5, #0]
 80141f2:	b016      	add	sp, #88	@ 0x58
 80141f4:	bd70      	pop	{r4, r5, r6, pc}
 80141f6:	466a      	mov	r2, sp
 80141f8:	f000 f87c 	bl	80142f4 <_fstat_r>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	dbec      	blt.n	80141da <__swhatbuf_r+0x12>
 8014200:	9901      	ldr	r1, [sp, #4]
 8014202:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014206:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801420a:	4259      	negs	r1, r3
 801420c:	4159      	adcs	r1, r3
 801420e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014212:	e7eb      	b.n	80141ec <__swhatbuf_r+0x24>

08014214 <__smakebuf_r>:
 8014214:	898b      	ldrh	r3, [r1, #12]
 8014216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014218:	079d      	lsls	r5, r3, #30
 801421a:	4606      	mov	r6, r0
 801421c:	460c      	mov	r4, r1
 801421e:	d507      	bpl.n	8014230 <__smakebuf_r+0x1c>
 8014220:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014224:	6023      	str	r3, [r4, #0]
 8014226:	6123      	str	r3, [r4, #16]
 8014228:	2301      	movs	r3, #1
 801422a:	6163      	str	r3, [r4, #20]
 801422c:	b003      	add	sp, #12
 801422e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014230:	ab01      	add	r3, sp, #4
 8014232:	466a      	mov	r2, sp
 8014234:	f7ff ffc8 	bl	80141c8 <__swhatbuf_r>
 8014238:	9f00      	ldr	r7, [sp, #0]
 801423a:	4605      	mov	r5, r0
 801423c:	4639      	mov	r1, r7
 801423e:	4630      	mov	r0, r6
 8014240:	f7ff f810 	bl	8013264 <_malloc_r>
 8014244:	b948      	cbnz	r0, 801425a <__smakebuf_r+0x46>
 8014246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801424a:	059a      	lsls	r2, r3, #22
 801424c:	d4ee      	bmi.n	801422c <__smakebuf_r+0x18>
 801424e:	f023 0303 	bic.w	r3, r3, #3
 8014252:	f043 0302 	orr.w	r3, r3, #2
 8014256:	81a3      	strh	r3, [r4, #12]
 8014258:	e7e2      	b.n	8014220 <__smakebuf_r+0xc>
 801425a:	89a3      	ldrh	r3, [r4, #12]
 801425c:	6020      	str	r0, [r4, #0]
 801425e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014262:	81a3      	strh	r3, [r4, #12]
 8014264:	9b01      	ldr	r3, [sp, #4]
 8014266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801426a:	b15b      	cbz	r3, 8014284 <__smakebuf_r+0x70>
 801426c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014270:	4630      	mov	r0, r6
 8014272:	f000 f851 	bl	8014318 <_isatty_r>
 8014276:	b128      	cbz	r0, 8014284 <__smakebuf_r+0x70>
 8014278:	89a3      	ldrh	r3, [r4, #12]
 801427a:	f023 0303 	bic.w	r3, r3, #3
 801427e:	f043 0301 	orr.w	r3, r3, #1
 8014282:	81a3      	strh	r3, [r4, #12]
 8014284:	89a3      	ldrh	r3, [r4, #12]
 8014286:	431d      	orrs	r5, r3
 8014288:	81a5      	strh	r5, [r4, #12]
 801428a:	e7cf      	b.n	801422c <__smakebuf_r+0x18>

0801428c <_putc_r>:
 801428c:	b570      	push	{r4, r5, r6, lr}
 801428e:	460d      	mov	r5, r1
 8014290:	4614      	mov	r4, r2
 8014292:	4606      	mov	r6, r0
 8014294:	b118      	cbz	r0, 801429e <_putc_r+0x12>
 8014296:	6a03      	ldr	r3, [r0, #32]
 8014298:	b90b      	cbnz	r3, 801429e <_putc_r+0x12>
 801429a:	f7ff f951 	bl	8013540 <__sinit>
 801429e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142a0:	07d8      	lsls	r0, r3, #31
 80142a2:	d405      	bmi.n	80142b0 <_putc_r+0x24>
 80142a4:	89a3      	ldrh	r3, [r4, #12]
 80142a6:	0599      	lsls	r1, r3, #22
 80142a8:	d402      	bmi.n	80142b0 <_putc_r+0x24>
 80142aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142ac:	f7ff fbb5 	bl	8013a1a <__retarget_lock_acquire_recursive>
 80142b0:	68a3      	ldr	r3, [r4, #8]
 80142b2:	3b01      	subs	r3, #1
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	60a3      	str	r3, [r4, #8]
 80142b8:	da05      	bge.n	80142c6 <_putc_r+0x3a>
 80142ba:	69a2      	ldr	r2, [r4, #24]
 80142bc:	4293      	cmp	r3, r2
 80142be:	db12      	blt.n	80142e6 <_putc_r+0x5a>
 80142c0:	b2eb      	uxtb	r3, r5
 80142c2:	2b0a      	cmp	r3, #10
 80142c4:	d00f      	beq.n	80142e6 <_putc_r+0x5a>
 80142c6:	6823      	ldr	r3, [r4, #0]
 80142c8:	1c5a      	adds	r2, r3, #1
 80142ca:	6022      	str	r2, [r4, #0]
 80142cc:	701d      	strb	r5, [r3, #0]
 80142ce:	b2ed      	uxtb	r5, r5
 80142d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142d2:	07da      	lsls	r2, r3, #31
 80142d4:	d405      	bmi.n	80142e2 <_putc_r+0x56>
 80142d6:	89a3      	ldrh	r3, [r4, #12]
 80142d8:	059b      	lsls	r3, r3, #22
 80142da:	d402      	bmi.n	80142e2 <_putc_r+0x56>
 80142dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142de:	f7ff fb9d 	bl	8013a1c <__retarget_lock_release_recursive>
 80142e2:	4628      	mov	r0, r5
 80142e4:	bd70      	pop	{r4, r5, r6, pc}
 80142e6:	4629      	mov	r1, r5
 80142e8:	4622      	mov	r2, r4
 80142ea:	4630      	mov	r0, r6
 80142ec:	f7ff fa19 	bl	8013722 <__swbuf_r>
 80142f0:	4605      	mov	r5, r0
 80142f2:	e7ed      	b.n	80142d0 <_putc_r+0x44>

080142f4 <_fstat_r>:
 80142f4:	b538      	push	{r3, r4, r5, lr}
 80142f6:	4d07      	ldr	r5, [pc, #28]	@ (8014314 <_fstat_r+0x20>)
 80142f8:	2300      	movs	r3, #0
 80142fa:	4604      	mov	r4, r0
 80142fc:	4608      	mov	r0, r1
 80142fe:	4611      	mov	r1, r2
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	f7f0 fab5 	bl	8004870 <_fstat>
 8014306:	1c43      	adds	r3, r0, #1
 8014308:	d102      	bne.n	8014310 <_fstat_r+0x1c>
 801430a:	682b      	ldr	r3, [r5, #0]
 801430c:	b103      	cbz	r3, 8014310 <_fstat_r+0x1c>
 801430e:	6023      	str	r3, [r4, #0]
 8014310:	bd38      	pop	{r3, r4, r5, pc}
 8014312:	bf00      	nop
 8014314:	24000ee4 	.word	0x24000ee4

08014318 <_isatty_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4d06      	ldr	r5, [pc, #24]	@ (8014334 <_isatty_r+0x1c>)
 801431c:	2300      	movs	r3, #0
 801431e:	4604      	mov	r4, r0
 8014320:	4608      	mov	r0, r1
 8014322:	602b      	str	r3, [r5, #0]
 8014324:	f7f0 fab4 	bl	8004890 <_isatty>
 8014328:	1c43      	adds	r3, r0, #1
 801432a:	d102      	bne.n	8014332 <_isatty_r+0x1a>
 801432c:	682b      	ldr	r3, [r5, #0]
 801432e:	b103      	cbz	r3, 8014332 <_isatty_r+0x1a>
 8014330:	6023      	str	r3, [r4, #0]
 8014332:	bd38      	pop	{r3, r4, r5, pc}
 8014334:	24000ee4 	.word	0x24000ee4

08014338 <_init>:
 8014338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801433a:	bf00      	nop
 801433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801433e:	bc08      	pop	{r3}
 8014340:	469e      	mov	lr, r3
 8014342:	4770      	bx	lr

08014344 <_fini>:
 8014344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014346:	bf00      	nop
 8014348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801434a:	bc08      	pop	{r3}
 801434c:	469e      	mov	lr, r3
 801434e:	4770      	bx	lr
