
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011250  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080114f0  080114f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a14  08011a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011a1c  08011a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011a24  08011a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08011a2c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f00  240000c0  08011ae8  000130c0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000fc0  08011ae8  00013fc0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f809  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ee6  00000000  00000000  000428f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  000477e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012f8  00000000  00000000  00049070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f6a5  00000000  00000000  0004a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025982  00000000  00000000  00089a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177daa  00000000  00000000  000af38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00227139  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008634  00000000  00000000  0022717c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0022f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080114d8 	.word	0x080114d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	080114d8 	.word	0x080114d8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <_ZN9InterruptC1Ev+0x1c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08011880 	.word	0x08011880

08000a08 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a16:	f00f fe99 	bl	801074c <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a1a:	4905      	ldr	r1, [pc, #20]	@ (8000a30 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	080114f0 	.word	0x080114f0
 8000a30:	240000dc 	.word	0x240000dc

08000a34 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4610      	mov	r0, r2
 8000a46:	4798      	blx	r3
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240000dc 	.word	0x240000dc

08000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000a58:	687b      	ldr	r3, [r7, #4]
  }
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	111b      	asrs	r3, r3, #4
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	815a      	strh	r2, [r3, #10]
  }
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 ff3f 	bl	8001928 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
  }
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  }
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	f023 0303 	bic.w	r3, r3, #3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	e000      	b.n	8000b26 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000b24:	2300      	movs	r3, #0
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	e000      	b.n	8000b3a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    return _begin;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
  }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fee7 	bl	8001940 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000b72:	4603      	mov	r3, r0
  }
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f000 f864 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000bac:	bf00      	nop
  }
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	1acb      	subs	r3, r1, r3
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f84a 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
  }
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	bf94      	ite	ls
 8000c26:	2301      	movls	r3, #1
 8000c28:	2300      	movhi	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
  }
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe1 	bl	8000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e008      	b.n	8000c6c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
    return _right;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
  }
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000c94:	2105      	movs	r1, #5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f886 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bdb0      	pop	{r4, r5, r7, pc}

08000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f871 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000ce4:	2106      	movs	r1, #6
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f85e 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f84b 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f83a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000d46:	2104      	movs	r1, #4
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f82d 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fde9 	bl	8001928 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
  }
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f81a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8d5 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d7c:	687b      	ldr	r3, [r7, #4]
  }
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000d8e:	2120      	movs	r1, #32
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f809 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8c4 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d9e:	687b      	ldr	r3, [r7, #4]
  }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a1a      	ldrb	r2, [r3, #8]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	721a      	strb	r2, [r3, #8]
  }
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fef3 	bl	8000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3310      	adds	r3, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff8c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return _pool;
 8000e1c:	687b      	ldr	r3, [r7, #4]
  }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    return _data;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3310      	adds	r3, #16
  }
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000e42:	b084      	sub	sp, #16
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	f107 001c 	add.w	r0, r7, #28
 8000e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	461c      	mov	r4, r3
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3310      	adds	r3, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e78:	b004      	add	sp, #16
 8000e7a:	4770      	bx	lr

08000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00f fae0 	bl	801044c <malloc>
 8000e8c:	4603      	mov	r3, r0
  }
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    free(p);
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f00f fadb 	bl	801045c <free>
  }
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff fe53 	bl	8000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8000ebe:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e017      	b.n	8000efa <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdc4 	bl	8000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	e005      	b.n	8000ef2 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fde0 	bl	8000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffcd 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  _head = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f54:	d904      	bls.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b39      	cmp	r3, #57	@ 0x39
 8000f5a:	d801      	bhi.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8000f6e:	b590      	push	{r4, r7, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fc      	ldr	r4, [r7, #12]
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdf4 	bl	8000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8000f94:	f104 0308 	add.w	r3, r4, #8
 8000f98:	463a      	mov	r2, r7
 8000f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9e:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d303      	bcc.n	8000fd4 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
      return;
 8000fd2:	e00b      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	1c58      	adds	r0, r3, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	6048      	str	r0, [r1, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e000      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8000fea:	bf00      	nop
  }
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    append('\0');
 8000ffe:	2100      	movs	r1, #0
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffd3 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0108 	add.w	r1, r3, #8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff fdca 	bl	8000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
  }
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff86 	bl	8000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	e000      	b.n	8001082 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08011524 	.word	0x08011524

08001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6011      	str	r1, [r2, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
  }
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 80010c0:	2300      	movs	r3, #0
  }
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	e005      	b.n	8001130 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  }
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	080010cf 	.word	0x080010cf

08001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    return _code;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
  }
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d81b      	bhi.n	80011a0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001189 	.word	0x08001189
 8001174:	08001199 	.word	0x08001199
 8001178:	08001195 	.word	0x08001195
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
 8001184:	0800118d 	.word	0x0800118d
      case Ok:
        return "Ok";
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800118a:	e00a      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 800118e:	e008      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001192:	e006      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 8001196:	e004      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800119a:	e002      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 800119e:	e000      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	08011528 	.word	0x08011528
 80011b4:	0801152c 	.word	0x0801152c
 80011b8:	08011534 	.word	0x08011534
 80011bc:	08011540 	.word	0x08011540
 80011c0:	08011550 	.word	0x08011550
 80011c4:	08011560 	.word	0x08011560
 80011c8:	08011570 	.word	0x08011570

080011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2232      	movs	r2, #50	@ 0x32
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f818 	bl	8001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80011f8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	e00c      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e003      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800121e:	e7ec      	b.n	80011fa <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8001238:	2304      	movs	r3, #4
 800123a:	e000      	b.n	800123e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 800123c:	2300      	movs	r3, #0
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001240:	4413      	add	r3, r2
  }
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08011574 	.word	0x08011574

08001254 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	2210      	movs	r2, #16
 8001278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800127c:	f7ff fbda 	bl	8000a34 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <__io_putchar+0x20>)
 8001296:	f00a fc20 	bl	800bada <HAL_UART_Transmit>
	  return ch;
 800129a:	687b      	ldr	r3, [r7, #4]
	}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000480 	.word	0x24000480

080012a8 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b08d      	sub	sp, #52	@ 0x34
 80012ae:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80012b0:	4852      	ldr	r0, [pc, #328]	@ (80013fc <_Z14readJsonConfigv+0x154>)
 80012b2:	f00f fabb 	bl	801082c <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80012b6:	4852      	ldr	r0, [pc, #328]	@ (8001400 <_Z14readJsonConfigv+0x158>)
 80012b8:	f00f fab8 	bl	801082c <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80012bc:	2200      	movs	r2, #0
 80012be:	4951      	ldr	r1, [pc, #324]	@ (8001404 <_Z14readJsonConfigv+0x15c>)
 80012c0:	4851      	ldr	r0, [pc, #324]	@ (8001408 <_Z14readJsonConfigv+0x160>)
 80012c2:	f00e fac9 	bl	800f858 <f_mount>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80012d6:	484d      	ldr	r0, [pc, #308]	@ (800140c <_Z14readJsonConfigv+0x164>)
 80012d8:	f00f fa38 	bl	801074c <iprintf>
    	Error_Handler();
 80012dc:	f000 fb18 	bl	8001910 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80012e0:	e087      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80012e2:	2201      	movs	r2, #1
 80012e4:	494a      	ldr	r1, [pc, #296]	@ (8001410 <_Z14readJsonConfigv+0x168>)
 80012e6:	484b      	ldr	r0, [pc, #300]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80012e8:	f00e fafc 	bl	800f8e4 <f_open>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 80012fc:	4846      	ldr	r0, [pc, #280]	@ (8001418 <_Z14readJsonConfigv+0x170>)
 80012fe:	f00f fa95 	bl	801082c <puts>
			Error_Handler();
 8001302:	f000 fb05 	bl	8001910 <Error_Handler>
}
 8001306:	e074      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		}
 8001308:	466b      	mov	r3, sp
 800130a:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 800130c:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	4841      	ldr	r0, [pc, #260]	@ (800141c <_Z14readJsonConfigv+0x174>)
 8001316:	f00f fa19 	bl	801074c <iprintf>
			char rtext[length];
 800131a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800131c:	1e4b      	subs	r3, r1, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	460a      	mov	r2, r1
 8001322:	2300      	movs	r3, #0
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	460a      	mov	r2, r1
 800133e:	2300      	movs	r3, #0
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	00eb      	lsls	r3, r5, #3
 800134e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001352:	00e2      	lsls	r2, r4, #3
 8001354:	460b      	mov	r3, r1
 8001356:	3307      	adds	r3, #7
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	ebad 0d03 	sub.w	sp, sp, r3
 8001360:	466b      	mov	r3, sp
 8001362:	3300      	adds	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	4829      	ldr	r0, [pc, #164]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800136e:	f00e fc73 	bl	800fc58 <f_read>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <_Z14readJsonConfigv+0xe2>
				printf("	JSON config file read FAILURE\n");
 8001382:	4827      	ldr	r0, [pc, #156]	@ (8001420 <_Z14readJsonConfigv+0x178>)
 8001384:	f00f fa52 	bl	801082c <puts>
 8001388:	e02f      	b.n	80013ea <_Z14readJsonConfigv+0x142>
				printf("	JSON config file read SUCCESS!\n");
 800138a:	4826      	ldr	r0, [pc, #152]	@ (8001424 <_Z14readJsonConfigv+0x17c>)
 800138c:	f00f fa4e 	bl	801082c <puts>
				strJson.reserve(length + 1);
 8001390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001392:	3301      	adds	r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4824      	ldr	r0, [pc, #144]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 8001398:	f00e ffb1 	bl	80102fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a0:	e017      	b.n	80013d2 <_Z14readJsonConfigv+0x12a>
			    	strJson = strJson + rtext[i];
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a6:	4413      	add	r3, r2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	491e      	ldr	r1, [pc, #120]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fb12 	bl	80019da <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013be:	f00e ff2f 	bl	8010220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e ff24 	bl	8010214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ce:	3301      	adds	r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbe3      	blt.n	80013a2 <_Z14readJsonConfigv+0xfa>
			    printf("\n%s\n", strJson.c_str());
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013dc:	f00e fff2 	bl	80103c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <_Z14readJsonConfigv+0x184>)
 80013e6:	f00f f9b1 	bl	801074c <iprintf>
			f_close(&SDFile);
 80013ea:	480a      	ldr	r0, [pc, #40]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80013ec:	f00e fdf1 	bl	800ffd2 <f_close>
 80013f0:	46b5      	mov	sp, r6
}
 80013f2:	bf00      	nop
 80013f4:	3734      	adds	r7, #52	@ 0x34
 80013f6:	46bd      	mov	sp, r7
 80013f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013fc:	08011584 	.word	0x08011584
 8001400:	080115a8 	.word	0x080115a8
 8001404:	240007d0 	.word	0x240007d0
 8001408:	240007d4 	.word	0x240007d4
 800140c:	080115c8 	.word	0x080115c8
 8001410:	080115e4 	.word	0x080115e4
 8001414:	24000a04 	.word	0x24000a04
 8001418:	080115f0 	.word	0x080115f0
 800141c:	08011614 	.word	0x08011614
 8001420:	08011638 	.word	0x08011638
 8001424:	08011658 	.word	0x08011658
 8001428:	24000330 	.word	0x24000330
 800142c:	08011678 	.word	0x08011678

08001430 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001436:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <_Z15deserialiseJSONv+0xa0>)
 8001438:	f00f f9f8 	bl	801082c <puts>

    const char *json = strJson.c_str();
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <_Z15deserialiseJSONv+0xa4>)
 800143e:	f00e ffc1 	bl	80103c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001442:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff febf 	bl	80011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800144e:	7a3a      	ldrb	r2, [r7, #8]
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	4821      	ldr	r0, [pc, #132]	@ (80014d8 <_Z15deserialiseJSONv+0xa8>)
 8001454:	f000 fad7 	bl	8001a06 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001458:	4603      	mov	r3, r0
 800145a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <_Z15deserialiseJSONv+0xac>)
 800145e:	f00f f975 	bl	801074c <iprintf>

    switch (error.code())
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe6b 	bl	8001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800146a:	4603      	mov	r3, r0
 800146c:	2b03      	cmp	r3, #3
 800146e:	d011      	beq.n	8001494 <_Z15deserialiseJSONv+0x64>
 8001470:	2b03      	cmp	r3, #3
 8001472:	dc16      	bgt.n	80014a2 <_Z15deserialiseJSONv+0x72>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <_Z15deserialiseJSONv+0x4e>
 8001478:	2b02      	cmp	r3, #2
 800147a:	d004      	beq.n	8001486 <_Z15deserialiseJSONv+0x56>
 800147c:	e011      	b.n	80014a2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <_Z15deserialiseJSONv+0xb0>)
 8001480:	f00f f9d4 	bl	801082c <puts>
            break;
 8001484:	e01f      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8001486:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <_Z15deserialiseJSONv+0xb4>)
 8001488:	f00f f9d0 	bl	801082c <puts>
            configError = true;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
            break;
 8001492:	e018      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001494:	4815      	ldr	r0, [pc, #84]	@ (80014ec <_Z15deserialiseJSONv+0xbc>)
 8001496:	f00f f9c9 	bl	801082c <puts>
            configError = true;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
            break;
 80014a0:	e011      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80014a2:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <_Z15deserialiseJSONv+0xc0>)
 80014a4:	f00f f952 	bl	801074c <iprintf>
            printf(error.c_str());
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe54 	bl	8001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00f f94a 	bl	801074c <iprintf>
            printf("\n");
 80014b8:	200a      	movs	r0, #10
 80014ba:	f00f f959 	bl	8010770 <putchar>
            configError = true;
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
            break;
 80014c4:	bf00      	nop
    }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08011680 	.word	0x08011680
 80014d4:	24000330 	.word	0x24000330
 80014d8:	24000350 	.word	0x24000350
 80014dc:	080116a4 	.word	0x080116a4
 80014e0:	080116c0 	.word	0x080116c0
 80014e4:	080116dc 	.word	0x080116dc
 80014e8:	24000380 	.word	0x24000380
 80014ec:	080116ec 	.word	0x080116ec
 80014f0:	08011700 	.word	0x08011700

080014f4 <_Z5setupv>:

void setup()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <_Z5setupv+0x14>)
 80014fa:	f00f f997 	bl	801082c <puts>

     // initialise the Remora comms
    comms.init();
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <_Z5setupv+0x18>)
 8001500:	f002 faa4 	bl	8003a4c <_ZN11RemoraComms4initEv>
    //comms.start();
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0801171c 	.word	0x0801171c
 800150c:	24000514 	.word	0x24000514

08001510 <main>:


int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <main+0x90>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d11b      	bne.n	8001564 <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <main+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001540:	f3bf 8f4f 	dsb	sy
}
 8001544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001546:	f3bf 8f6f 	isb	sy
}
 800154a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <main+0x90>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a13      	ldr	r2, [pc, #76]	@ (80015a0 <main+0x90>)
 8001552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001556:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001558:	f3bf 8f4f 	dsb	sy
}
 800155c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800155e:	f3bf 8f6f 	isb	sy
}
 8001562:	e000      	b.n	8001566 <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001564:	bf00      	nop
	SCB_EnableICache();
	HAL_Init();
 8001566:	f002 fc8b 	bl	8003e80 <HAL_Init>
	SystemClock_Config();
 800156a:	f000 f81f 	bl	80015ac <_Z18SystemClock_Configv>

	MX_GPIO_Init(); // for SD card detect
 800156e:	f000 f973 	bl	8001858 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001572:	f000 f911 	bl	8001798 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();
 8001576:	f000 f8e3 	bl	8001740 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800157a:	f00c f993 	bl	800d8a4 <MX_FATFS_Init>


	printf("Remora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <main+0x94>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	2201      	movs	r2, #1
 8001586:	2100      	movs	r1, #0
 8001588:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <main+0x98>)
 800158a:	f00f f8df 	bl	801074c <iprintf>

	readJsonConfig();
 800158e:	f7ff fe8b 	bl	80012a8 <_Z14readJsonConfigv>
	deserialiseJSON();
 8001592:	f7ff ff4d 	bl	8001430 <_Z15deserialiseJSONv>
	setup();
 8001596:	f7ff ffad 	bl	80014f4 <_Z5setupv>

	while (1)
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <main+0x8a>
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	0801176c 	.word	0x0801176c
 80015a8:	08011740 	.word	0x08011740

080015ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09e      	sub	sp, #120	@ 0x78
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b6:	224c      	movs	r2, #76	@ 0x4c
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00f fa30 	bl	8010a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00f fa29 	bl	8010a20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f004 fcb0 	bl	8005f34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	4a55      	ldr	r2, [pc, #340]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b52      	ldr	r3, [pc, #328]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a51      	ldr	r2, [pc, #324]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 80015f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001606:	bf00      	nop
 8001608:	4b4b      	ldr	r3, [pc, #300]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f3      	bne.n	8001608 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <_Z18SystemClock_Configv+0x190>)
 8001622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001626:	4a45      	ldr	r2, [pc, #276]	@ (800173c <_Z18SystemClock_Configv+0x190>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001630:	4b42      	ldr	r3, [pc, #264]	@ (800173c <_Z18SystemClock_Configv+0x190>)
 8001632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a3c      	ldr	r2, [pc, #240]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 8001648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	4a35      	ldr	r2, [pc, #212]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <_Z18SystemClock_Configv+0x188>)
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001670:	bf00      	nop
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <_Z18SystemClock_Configv+0x18c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f3      	bne.n	8001672 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800168a:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <_Z18SystemClock_Configv+0x190>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	4a2a      	ldr	r2, [pc, #168]	@ (800173c <_Z18SystemClock_Configv+0x190>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800169a:	2301      	movs	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	2302      	movs	r3, #2
 80016aa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80016ac:	2305      	movs	r3, #5
 80016ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016b0:	23c0      	movs	r3, #192	@ 0xc0
 80016b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016bc:	2302      	movs	r3, #2
 80016be:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016c0:	2308      	movs	r3, #8
 80016c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fc69 	bl	8005fa8 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80016e6:	f000 f913 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ea:	233f      	movs	r3, #63	@ 0x3f
 80016ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2303      	movs	r3, #3
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016fe:	2340      	movs	r3, #64	@ 0x40
 8001700:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001708:	2340      	movs	r3, #64	@ 0x40
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f8a2 	bl	800685c <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8001728:	f000 f8f2 	bl	8001910 <Error_Handler>
  }
}
 800172c:	bf00      	nop
 800172e:	3778      	adds	r7, #120	@ 0x78
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58000400 	.word	0x58000400
 8001738:	58024800 	.word	0x58024800
 800173c:	58024400 	.word	0x58024400

08001740 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001752:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001756:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800175a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800175e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001768:	2208      	movs	r2, #8
 800176a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800176e:	f008 f8ff 	bl	8009970 <HAL_SD_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf14      	ite	ne
 8001778:	2301      	movne	r3, #1
 800177a:	2300      	moveq	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8001782:	4804      	ldr	r0, [pc, #16]	@ (8001794 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8001784:	f00f f852 	bl	801082c <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	24000404 	.word	0x24000404
 8001790:	52007000 	.word	0x52007000
 8001794:	08011774 	.word	0x08011774

08001798 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800179e:	4a2d      	ldr	r2, [pc, #180]	@ (8001854 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e0:	481b      	ldr	r0, [pc, #108]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017e2:	f00a f92a 	bl	800ba3a <HAL_UART_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80017f6:	f000 f88b 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4814      	ldr	r0, [pc, #80]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017fe:	f00b f9bc 	bl	800cb7a <HAL_UARTEx_SetTxFifoThreshold>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf14      	ite	ne
 8001808:	2301      	movne	r3, #1
 800180a:	2300      	moveq	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001812:	f000 f87d 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800181a:	f00b f9ec 	bl	800cbf6 <HAL_UARTEx_SetRxFifoThreshold>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800182e:	f000 f86f 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001834:	f00b f968 	bl	800cb08 <HAL_UARTEx_DisableFifoMode>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001848:	f000 f862 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24000480 	.word	0x24000480
 8001854:	40011000 	.word	0x40011000

08001858 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186e:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 8001876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b0:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <_ZL12MX_GPIO_Initv+0xb0>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e6:	2310      	movs	r3, #16
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <_ZL12MX_GPIO_Initv+0xb4>)
 80018fa:	f004 f96b 	bl	8005bd4 <HAL_GPIO_Init>

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	58024400 	.word	0x58024400
 800190c:	58020800 	.word	0x58020800

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <Error_Handler+0x14>)
 8001916:	f00e ff19 	bl	801074c <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800191a:	b672      	cpsid	i
}
 800191c:	bf00      	nop

  __disable_irq();
  while (1)
 800191e:	bf00      	nop
 8001920:	e7fd      	b.n	800191e <Error_Handler+0xe>
 8001922:	bf00      	nop
 8001924:	08011784 	.word	0x08011784

08001928 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
  }
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001948:	2110      	movs	r1, #16
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f974 	bl	8000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8001950:	4603      	mov	r3, r0
  }
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f85c 	bl	8001a26 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b08b      	sub	sp, #44	@ 0x2c
 800199a:	af02      	add	r7, sp, #8
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4621      	mov	r1, r4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f865 	bl	8001a76 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f103 0408 	add.w	r4, r3, #8
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f842 	bl	8001a44 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fa39 	bl	8000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}

080019da <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f00e fd07 	bl	80103fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	461a      	mov	r2, r3
 80019f4:	2101      	movs	r1, #1
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f00e fcda 	bl	80103b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 80019fc:	bf00      	nop
    }
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8001a12:	793a      	ldrb	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f839 	bl	8001a8e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	601a      	str	r2, [r3, #0]
  }
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff f844 	bl	8000ade <_ZN19ArduinoJson6101_11010addPaddingEj>
 8001a56:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	6979      	ldr	r1, [r7, #20]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f848 	bl	8001af2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8001a62:	4603      	mov	r3, r0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4619      	mov	r1, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff f848 	bl	8000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	7039      	strb	r1, [r7, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8001a8e:	b5b0      	push	{r4, r5, r7, lr}
 8001a90:	b08a      	sub	sp, #40	@ 0x28
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff f9a9 	bl	8000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff f9b7 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f000 f831 	bl	8001b10 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8001aae:	4605      	mov	r5, r0
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff f9af 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f837 	bl	8001b2e <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	793b      	ldrb	r3, [r7, #4]
 8001ac4:	f107 0010 	add.w	r0, r7, #16
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4613      	mov	r3, r2
 8001acc:	462a      	mov	r2, r5
 8001ace:	4621      	mov	r1, r4
 8001ad0:	f000 f83c 	bl	8001b4c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff f9a8 	bl	8000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f845 	bl	8001b72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bdb0      	pop	{r4, r5, r7, pc}

08001af2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6839      	ldr	r1, [r7, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f9bb 	bl	8000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8001b06:	4603      	mov	r3, r0
  }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff faa4 	bl	800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f863 	bl	8001c08 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8001b5a:	7e3b      	ldrb	r3, [r7, #24]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f85f 	bl	8001c28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f871 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	f107 020c 	add.w	r2, r7, #12
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fab7 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8001baa:	2300      	movs	r3, #0
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	e022      	b.n	8001c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f932 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b5b      	cmp	r3, #91	@ 0x5b
 8001bc4:	d002      	beq.n	8001bcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8001bc6:	2b7b      	cmp	r3, #123	@ 0x7b
 8001bc8:	d00a      	beq.n	8001be0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8001bca:	e013      	b.n	8001bf4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f7ff f8c9 	bl	8000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f94d 	bl	8001e76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	e00f      	b.n	8001c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f7ff f8d0 	bl	8000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fa6a 	bl	80020c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	e005      	b.n	8001c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fc27 	bl	800244a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	bf00      	nop
  }
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fa08 	bl	800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  }
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	7e3a      	ldrb	r2, [r7, #24]
 8001c4c:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	739a      	strb	r2, [r3, #14]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8d9 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c76:	f200 80c7 	bhi.w	8001e08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8001c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001d41 	.word	0x08001d41
 8001c84:	08001e09 	.word	0x08001e09
 8001c88:	08001e09 	.word	0x08001e09
 8001c8c:	08001e09 	.word	0x08001e09
 8001c90:	08001e09 	.word	0x08001e09
 8001c94:	08001e09 	.word	0x08001e09
 8001c98:	08001e09 	.word	0x08001e09
 8001c9c:	08001e09 	.word	0x08001e09
 8001ca0:	08001e09 	.word	0x08001e09
 8001ca4:	08001d51 	.word	0x08001d51
 8001ca8:	08001d51 	.word	0x08001d51
 8001cac:	08001e09 	.word	0x08001e09
 8001cb0:	08001e09 	.word	0x08001e09
 8001cb4:	08001d51 	.word	0x08001d51
 8001cb8:	08001e09 	.word	0x08001e09
 8001cbc:	08001e09 	.word	0x08001e09
 8001cc0:	08001e09 	.word	0x08001e09
 8001cc4:	08001e09 	.word	0x08001e09
 8001cc8:	08001e09 	.word	0x08001e09
 8001ccc:	08001e09 	.word	0x08001e09
 8001cd0:	08001e09 	.word	0x08001e09
 8001cd4:	08001e09 	.word	0x08001e09
 8001cd8:	08001e09 	.word	0x08001e09
 8001cdc:	08001e09 	.word	0x08001e09
 8001ce0:	08001e09 	.word	0x08001e09
 8001ce4:	08001e09 	.word	0x08001e09
 8001ce8:	08001e09 	.word	0x08001e09
 8001cec:	08001e09 	.word	0x08001e09
 8001cf0:	08001e09 	.word	0x08001e09
 8001cf4:	08001e09 	.word	0x08001e09
 8001cf8:	08001e09 	.word	0x08001e09
 8001cfc:	08001e09 	.word	0x08001e09
 8001d00:	08001d51 	.word	0x08001d51
 8001d04:	08001e09 	.word	0x08001e09
 8001d08:	08001e09 	.word	0x08001e09
 8001d0c:	08001e09 	.word	0x08001e09
 8001d10:	08001e09 	.word	0x08001e09
 8001d14:	08001e09 	.word	0x08001e09
 8001d18:	08001e09 	.word	0x08001e09
 8001d1c:	08001e09 	.word	0x08001e09
 8001d20:	08001e09 	.word	0x08001e09
 8001d24:	08001e09 	.word	0x08001e09
 8001d28:	08001e09 	.word	0x08001e09
 8001d2c:	08001e09 	.word	0x08001e09
 8001d30:	08001e09 	.word	0x08001e09
 8001d34:	08001e09 	.word	0x08001e09
 8001d38:	08001e09 	.word	0x08001e09
 8001d3c:	08001d59 	.word	0x08001d59
          return DeserializationError::IncompleteInput;
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f9cb 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001d4c:	7b3b      	ldrb	r3, [r7, #12]
 8001d4e:	e064      	b.n	8001e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fb99 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8001d56:	e05f      	b.n	8001e18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fb95 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f860 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d68:	d002      	beq.n	8001d70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8001d6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d6c:	d02a      	beq.n	8001dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8001d6e:	e042      	b.n	8001df6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fb89 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8001d76:	2300      	movs	r3, #0
 8001d78:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f852 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001d84:	7f7b      	ldrb	r3, [r7, #29]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d107      	bne.n	8001d9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f9a6 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001d96:	7c3b      	ldrb	r3, [r7, #16]
 8001d98:	e03f      	b.n	8001e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8001d9a:	7f7b      	ldrb	r3, [r7, #29]
 8001d9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d9e:	d107      	bne.n	8001db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fb6e 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8001dac:	bf00      	nop
              break;
 8001dae:	e02a      	b.n	8001e06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8001db0:	7f7b      	ldrb	r3, [r7, #29]
 8001db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001db4:	bf0c      	ite	eq
 8001db6:	2301      	moveq	r3, #1
 8001db8:	2300      	movne	r3, #0
 8001dba:	77fb      	strb	r3, [r7, #31]
                move();
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fb63 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8001dc2:	e7da      	b.n	8001d7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb5f 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f82a 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001dd4:	7fbb      	ldrb	r3, [r7, #30]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f97e 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001de6:	7d3b      	ldrb	r3, [r7, #20]
 8001de8:	e017      	b.n	8001e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8001dea:	7fbb      	ldrb	r3, [r7, #30]
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d000      	beq.n	8001df2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8001df0:	e7e8      	b.n	8001dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8001df2:	bf00      	nop
              break;
 8001df4:	e007      	b.n	8001e06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f970 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001e02:	7e3b      	ldrb	r3, [r7, #24]
 8001e04:	e009      	b.n	8001e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8001e06:	e007      	b.n	8001e18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f967 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001e14:	7f3b      	ldrb	r3, [r7, #28]
 8001e16:	e000      	b.n	8001e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8001e18:	e728      	b.n	8001c6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop

08001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7b9b      	ldrb	r3, [r3, #14]
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d017      	beq.n	8001e6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f93a 	bl	80010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	735a      	strb	r2, [r3, #13]
 8001e50:	e008      	b.n	8001e64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f91e 	bl	8001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	739a      	strb	r2, [r3, #14]
    return _current;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7b5b      	ldrb	r3, [r3, #13]
  }
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b098      	sub	sp, #96	@ 0x60
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f927 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001e94:	7c3b      	ldrb	r3, [r7, #16]
 8001e96:	e111      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e9c:	235b      	movs	r3, #91	@ 0x5b
 8001e9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8001ea2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ea4:	f7ff ffbe 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e003      	b.n	8001eca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8001ec2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ec4:	f000 fae0 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8001ec8:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f901 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ee0:	7d3b      	ldrb	r3, [r7, #20]
 8001ee2:	e0eb      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff febd 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f903 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8001f12:	2300      	movs	r3, #0
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8001f1e:	7b3b      	ldrb	r3, [r7, #12]
 8001f20:	e0cc      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f26:	235d      	movs	r3, #93	@ 0x5d
 8001f28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8001f2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f2e:	f7ff ff79 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e003      	b.n	8001f54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8001f4c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f4e:	f000 fa9b 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8001f52:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f8bf 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f68:	e0a8      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f7fe ffc6 	bl	8000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8001f76:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8001f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	2103      	movs	r1, #3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8ac 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f8e:	e095      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8001f9c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fde7 	bl	8001b72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b1b      	ldrb	r3, [r3, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8001fb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb8:	f107 020c 	add.w	r2, r7, #12
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f8a0 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8001fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8001fe4:	7b3b      	ldrb	r3, [r7, #12]
 8001fe6:	e069      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fe3b 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8001ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f881 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002016:	2300      	movs	r3, #0
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002022:	7b3b      	ldrb	r3, [r7, #12]
 8002024:	e04a      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800202a:	235d      	movs	r3, #93	@ 0x5d
 800202c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002030:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002032:	f7ff fef7 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800203e:	4293      	cmp	r3, r2
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 800204c:	2300      	movs	r3, #0
 800204e:	e003      	b.n	8002058 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002050:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002052:	f000 fa19 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002056:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 800205c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f83d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002068:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800206c:	e026      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	643b      	str	r3, [r7, #64]	@ 0x40
 8002072:	232c      	movs	r3, #44	@ 0x2c
 8002074:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002078:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800207a:	f7ff fed3 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002086:	4293      	cmp	r3, r2
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8002094:	2300      	movs	r3, #0
 8002096:	e003      	b.n	80020a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002098:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800209a:	f000 f9f5 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800209e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f43f af5f 	beq.w	8001f6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 80020ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f815 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020b8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 80020bc:	4618      	mov	r0, r3
 80020be:	3760      	adds	r7, #96	@ 0x60
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b0a3      	sub	sp, #140	@ 0x8c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7b1b      	ldrb	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	2105      	movs	r1, #5
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f800 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020e2:	7c3b      	ldrb	r3, [r7, #16]
 80020e4:	e1ad      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020ec:	237b      	movs	r3, #123	@ 0x7b
 80020ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 80020f2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80020f6:	f7ff fe95 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002102:	4293      	cmp	r3, r2
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8002110:	2300      	movs	r3, #0
 8002112:	e004      	b.n	800211e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8002114:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002118:	f000 f9b6 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800211c:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ffd7 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002134:	7d3b      	ldrb	r3, [r7, #20]
 8002136:	e184      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd93 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800213e:	4603      	mov	r3, r0
 8002140:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002142:	f107 0318 	add.w	r3, r7, #24
 8002146:	f107 020c 	add.w	r2, r7, #12
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ffd9 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8002166:	2300      	movs	r3, #0
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	e165      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800217a:	237d      	movs	r3, #125	@ 0x7d
 800217c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8002180:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002182:	f7ff fe4f 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800218e:	4293      	cmp	r3, r2
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 800219c:	2300      	movs	r3, #0
 800219e:	e003      	b.n	80021a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80021a0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80021a2:	f000 f971 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80021a6:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff95 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80021b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021bc:	e141      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f7fe fe72 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80021ca:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 80021ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 80021d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021da:	2103      	movs	r1, #3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ff80 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80021e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021e6:	e12c      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f957 	bl	80024a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 80021f4:	4603      	mov	r3, r0
 80021f6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80021f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021fc:	f107 020c 	add.w	r2, r7, #12
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ff7e 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 800221c:	2300      	movs	r3, #0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	e10a      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 800222c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb91 	bl	800195a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8002238:	4603      	mov	r3, r0
 800223a:	4619      	mov	r1, r3
 800223c:	4620      	mov	r0, r4
 800223e:	f7fe fc24 	bl	8000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fd0e 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002248:	4603      	mov	r3, r0
 800224a:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 800224c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe ff54 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8002270:	2300      	movs	r3, #0
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	e0e0      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	673b      	str	r3, [r7, #112]	@ 0x70
 8002284:	233a      	movs	r3, #58	@ 0x3a
 8002286:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 800228a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800228c:	f7ff fdca 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002298:	4293      	cmp	r3, r2
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 80022a6:	2300      	movs	r3, #0
 80022a8:	e003      	b.n	80022b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 80022aa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80022ac:	f000 f8ec 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80022b0:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 80022bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe ff0d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80022c8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022cc:	e0b9      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7b1b      	ldrb	r3, [r3, #12]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 80022da:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80022de:	f7fe fbb7 	bl	8000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fc43 	bl	8001b72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80022ec:	4603      	mov	r3, r0
 80022ee:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7b1b      	ldrb	r3, [r3, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 80022fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002300:	f107 020c 	add.w	r2, r7, #12
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fefc 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800230c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8002312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8002320:	2300      	movs	r3, #0
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 800232c:	7b3b      	ldrb	r3, [r7, #12]
 800232e:	e088      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fc97 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002336:	4603      	mov	r3, r0
 8002338:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800233a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800233e:	f107 020c 	add.w	r2, r7, #12
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fedd 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800234a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 800235e:	2300      	movs	r3, #0
 8002360:	f083 0301 	eor.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	e069      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002372:	237d      	movs	r3, #125	@ 0x7d
 8002374:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8002378:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800237a:	f7ff fd53 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002386:	4293      	cmp	r3, r2
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 8002394:	2300      	movs	r3, #0
 8002396:	e003      	b.n	80023a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 8002398:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800239a:	f000 f875 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800239e:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 80023a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fe99 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80023b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023b4:	e045      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ba:	232c      	movs	r3, #44	@ 0x2c
 80023bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 80023c0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023c2:	f7ff fd2f 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023ce:	4293      	cmp	r3, r2
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 80023dc:	2300      	movs	r3, #0
 80023de:	e003      	b.n	80023e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 80023e0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023e2:	f000 f851 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80023e6:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 80023f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fe72 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80023fe:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002402:	e01e      	b.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fc2d 	bl	8001c64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800240a:	4603      	mov	r3, r0
 800240c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800240e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002412:	f107 020c 	add.w	r2, r7, #12
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fe73 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800241e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8002424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 8002432:	2300      	movs	r3, #0
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f43f aebf 	beq.w	80021be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8002440:	7b3b      	ldrb	r3, [r7, #12]
  }
 8002442:	4618      	mov	r0, r3
 8002444:	378c      	adds	r7, #140	@ 0x8c
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}

0800244a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fce5 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800245a:	4603      	mov	r3, r0
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f83f 	bl	80024e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f84c 	bl	8002508 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8002470:	4603      	mov	r3, r0
 8002472:	e005      	b.n	8002480 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f881 	bl	800257e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 800247c:	4603      	mov	r3, r0
 800247e:	bf00      	nop
  }
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	739a      	strb	r2, [r3, #14]
  }
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fcb9 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f813 	bl	80024e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f92f 	bl	8002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80024c8:	4603      	mov	r3, r0
 80024ca:	e005      	b.n	80024d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f9c1 	bl	8002856 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 80024d4:	4603      	mov	r3, r0
 80024d6:	bf00      	nop
  }
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b27      	cmp	r3, #39	@ 0x27
 80024ee:	d002      	beq.n	80024f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b22      	cmp	r3, #34	@ 0x22
 80024f4:	d101      	bne.n	80024fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 80024fa:	2300      	movs	r3, #0
  }
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f904 	bl	8002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 800251e:	4603      	mov	r3, r0
 8002520:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fde9 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 8002546:	2300      	movs	r3, #0
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8002552:	7b3b      	ldrb	r3, [r7, #12]
 8002554:	e00f      	b.n	8002576 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f9fe 	bl	800195a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 800255e:	4603      	mov	r3, r0
 8002560:	4619      	mov	r1, r3
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f7fe fbea 	bl	8000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8002568:	f107 031c 	add.w	r3, r7, #28
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fdb7 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002574:	7f3b      	ldrb	r3, [r7, #28]
  }
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b0a0      	sub	sp, #128	@ 0x80
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fc48 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800259a:	e013      	b.n	80025c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff73 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 80025a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 80025ac:	3380      	adds	r3, #128	@ 0x80
 80025ae:	443b      	add	r3, r7
 80025b0:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80025b4:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fc33 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80025be:	4603      	mov	r3, r0
 80025c0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 80025c4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f9af 	bl	800292c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80025d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80025da:	d801      	bhi.n	80025e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1da      	bne.n	800259c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 80025e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025ea:	3380      	adds	r3, #128	@ 0x80
 80025ec:	443b      	add	r3, r7
 80025ee:	2200      	movs	r2, #0
 80025f0:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 80025f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025f8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 80025fc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002600:	2b74      	cmp	r3, #116	@ 0x74
 8002602:	d114      	bne.n	800262e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8002604:	2101      	movs	r1, #1
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f7fe fb3e 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 800260c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002610:	2b04      	cmp	r3, #4
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800261a:	461a      	mov	r2, r3
 800261c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fd5d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002628:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800262c:	e077      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 800262e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002632:	2b66      	cmp	r3, #102	@ 0x66
 8002634:	d114      	bne.n	8002660 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8002636:	2100      	movs	r1, #0
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f7fe fb25 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 800263e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002642:	2b05      	cmp	r3, #5
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800264c:	461a      	mov	r2, r3
 800264e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fd44 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800265a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800265e:	e05e      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8002660:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002664:	2b6e      	cmp	r3, #110	@ 0x6e
 8002666:	d110      	bne.n	800268a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8002668:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800266c:	2b04      	cmp	r3, #4
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8002676:	461a      	mov	r2, r3
 8002678:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fd2f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002684:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002688:	e049      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f97b 	bl	8002990 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fb7c 	bl	8002d9c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d021      	beq.n	80026ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	dc2f      	bgt.n	800270e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d00f      	beq.n	80026d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 80026b2:	2b07      	cmp	r3, #7
 80026b4:	d12b      	bne.n	800270e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 80026b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f7fe fb1f 	bl	8000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 80026c0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fd0b 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80026cc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80026d0:	e025      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 80026d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f7fe fafe 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 80026dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fcfd 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80026e8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80026ec:	e017      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 80026ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80026f2:	eeb0 0b47 	vmov.f64	d0, d7
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7fe fadb 	bl	8000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 80026fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fced 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002708:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800270c:	e007      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 800270e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fce4 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800271a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 800271e:	4618      	mov	r0, r3
 8002720:	3780      	adds	r7, #128	@ 0x80
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8002726:	b580      	push	{r7, lr}
 8002728:	b08c      	sub	sp, #48	@ 0x30
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f103 0208 	add.w	r2, r3, #8
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fc85 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fb6e 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe9a 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fb65 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe91 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8002766:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800276a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800276e:	429a      	cmp	r2, r3
 8002770:	d04f      	beq.n	8002812 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8002772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 800277a:	f107 0318 	add.w	r3, r7, #24
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fcae 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002786:	7e3b      	ldrb	r3, [r7, #24]
 8002788:	e061      	b.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 800278a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800278e:	2b5c      	cmp	r3, #92	@ 0x5c
 8002790:	d136      	bne.n	8002800 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fb46 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 800279e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fc98 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027b2:	7f3b      	ldrb	r3, [r7, #28]
 80027b4:	e04b      	b.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 80027b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027ba:	2b75      	cmp	r3, #117	@ 0x75
 80027bc:	d108      	bne.n	80027d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2104      	movs	r1, #4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc8c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ce:	e03e      	b.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 80027d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fd07 	bl	80011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 80027e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fc77 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027f8:	e029      	b.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fe44 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 8002800:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fbce 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 8002810:	e7a0      	b.n	8002754 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8002812:	bf00      	nop
    result = builder.complete();
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fbec 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 800281e:	4602      	mov	r2, r0
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 800282c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002830:	2103      	movs	r1, #3
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc55 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002838:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800283c:	e007      	b.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 800283e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fc4c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800284a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 800284e:	4618      	mov	r0, r3
 8002850:	3730      	adds	r7, #48	@ 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8002856:	b580      	push	{r7, lr}
 8002858:	b08a      	sub	sp, #40	@ 0x28
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 0208 	add.w	r2, r3, #8
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fbed 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fad6 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 800287e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8002886:	f107 0318 	add.w	r3, r7, #24
 800288a:	2101      	movs	r1, #1
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fc28 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002892:	7e3b      	ldrb	r3, [r7, #24]
 8002894:	e046      	b.n	8002924 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f846 	bl	800292c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d019      	beq.n	80028da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fdee 	bl	8002488 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 80028ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fb78 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fab1 	bl	8001e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 80028c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f82d 	bl	800292c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e6      	bne.n	80028a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 80028d8:	e007      	b.n	80028ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fbfe 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028e6:	7f3b      	ldrb	r3, [r7, #28]
 80028e8:	e01c      	b.n	8002924 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb81 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	2103      	movs	r1, #3
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fbea 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800290e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002912:	e007      	b.n	8002924 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8002914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fbe1 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002920:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	@ 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2239      	movs	r2, #57	@ 0x39
 800293a:	2130      	movs	r1, #48	@ 0x30
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fa39 	bl	8002db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002942:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11a      	bne.n	800297e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	227a      	movs	r2, #122	@ 0x7a
 800294c:	215f      	movs	r1, #95	@ 0x5f
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa30 	bl	8002db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d111      	bne.n	800297e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	225a      	movs	r2, #90	@ 0x5a
 800295e:	2141      	movs	r1, #65	@ 0x41
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fa27 	bl	8002db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002966:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002970:	d005      	beq.n	800297e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b2d      	cmp	r3, #45	@ 0x2d
 8002976:	d002      	beq.n	800297e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b2e      	cmp	r3, #46	@ 0x2e
 800297c:	d101      	bne.n	8002982 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8002982:	2300      	movs	r3, #0
  }
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0000      	movs	r0, r0
	...

08002990 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b0a2      	sub	sp, #136	@ 0x88
 8002996:	af02      	add	r7, sp, #8
 8002998:	6478      	str	r0, [r7, #68]	@ 0x44
 800299a:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 80029a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80029a8:	d008      	beq.n	80029bc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 80029aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80029ac:	d10a      	bne.n	80029c4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 80029b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b6:	3301      	adds	r3, #1
 80029b8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80029ba:	e003      	b.n	80029c4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 80029bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029be:	3301      	adds	r3, #1
 80029c0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80029c2:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 80029c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80029ca:	d003      	beq.n	80029d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 80029cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80029d2:	d109      	bne.n	80029e8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 80029d4:	f000 fa08 	bl	8002de8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 80029d8:	eeb0 7b40 	vmov.f64	d7, d0
 80029dc:	eeb0 0b47 	vmov.f64	d0, d7
 80029e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80029e2:	f000 fa0f 	bl	8002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80029e6:	e1d4      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 80029e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b69      	cmp	r3, #105	@ 0x69
 80029ee:	d003      	beq.n	80029f8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 80029f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b49      	cmp	r3, #73	@ 0x49
 80029f6:	d114      	bne.n	8002a22 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 80029f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8002a00:	f000 fa16 	bl	8002e30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002a04:	eeb0 7b40 	vmov.f64	d7, d0
 8002a08:	eeb1 7b47 	vneg.f64	d7, d7
 8002a0c:	e003      	b.n	8002a16 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8002a0e:	f000 fa0f 	bl	8002e30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002a12:	eeb0 7b40 	vmov.f64	d7, d0
 8002a16:	eeb0 0b47 	vmov.f64	d0, d7
 8002a1a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a1c:	f000 f9f2 	bl	8002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002a20:	e1b7      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8002a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa8d 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a3e:	d001      	beq.n	8002a44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8002a4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a4c:	f000 f9fe 	bl	8002e4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002a50:	e19f      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8002a70:	e054      	b.n	8002b1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8002a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3b30      	subs	r3, #48	@ 0x30
 8002a78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8002a7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a80:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002a84:	49b2      	ldr	r1, [pc, #712]	@ (8002d50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8002a86:	418b      	sbcs	r3, r1
 8002a88:	d251      	bcs.n	8002b2e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8002a8a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002aa0:	0090      	lsls	r0, r2, #2
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	eb12 0804 	adds.w	r8, r2, r4
 8002aaa:	eb43 0905 	adc.w	r9, r3, r5
 8002aae:	eb18 0308 	adds.w	r3, r8, r8
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	eb49 0309 	adc.w	r3, r9, r9
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002abe:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8002ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002acc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8002adc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ae0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4291      	cmp	r1, r2
 8002ae8:	4629      	mov	r1, r5
 8002aea:	eb71 0303 	sbcs.w	r3, r1, r3
 8002aee:	d320      	bcc.n	8002b32 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8002af0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002af4:	2200      	movs	r2, #0
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002afa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002afe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002b02:	4621      	mov	r1, r4
 8002b04:	1851      	adds	r1, r2, r1
 8002b06:	6139      	str	r1, [r7, #16]
 8002b08:	4629      	mov	r1, r5
 8002b0a:	414b      	adcs	r3, r1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b12:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8002b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b18:	3301      	adds	r3, #1
 8002b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fa10 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1a2      	bne.n	8002a72 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8002b2c:	e002      	b.n	8002b34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8002b32:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8002b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11b      	bne.n	8002b74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8002b3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b48:	f000 f99c 	bl	8002e84 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8002b4c:	e121      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002b4e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b52:	f04f 020a 	mov.w	r2, #10
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f7fd fdcd 	bl	80006f8 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8002b66:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8002b74:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b7c:	d2e7      	bcs.n	8002b4e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002b7e:	e009      	b.n	8002b94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8002b80:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	3301      	adds	r3, #1
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f9d4 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ed      	bne.n	8002b80 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002baa:	d14c      	bne.n	8002c46 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	3301      	adds	r3, #1
 8002bb0:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002bb2:	e040      	b.n	8002c36 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8002bb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bb8:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002bbc:	4965      	ldr	r1, [pc, #404]	@ (8002d54 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8002bbe:	418b      	sbcs	r3, r1
 8002bc0:	d236      	bcs.n	8002c30 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002bc2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002bd8:	0090      	lsls	r0, r2, #2
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	eb12 0a04 	adds.w	sl, r2, r4
 8002be2:	eb43 0b05 	adc.w	fp, r3, r5
 8002be6:	eb1a 030a 	adds.w	r3, sl, sl
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	eb4b 030b 	adc.w	r3, fp, fp
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bf6:	4652      	mov	r2, sl
 8002bf8:	465b      	mov	r3, fp
 8002bfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bfc:	7809      	ldrb	r1, [r1, #0]
 8002bfe:	3930      	subs	r1, #48	@ 0x30
 8002c00:	b2c9      	uxtb	r1, r1
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	2000      	movs	r0, #0
 8002c06:	6239      	str	r1, [r7, #32]
 8002c08:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c0e:	4621      	mov	r1, r4
 8002c10:	1851      	adds	r1, r2, r1
 8002c12:	6039      	str	r1, [r7, #0]
 8002c14:	4629      	mov	r1, r5
 8002c16:	414b      	adcs	r3, r1
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c1e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8002c22:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8002c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c32:	3301      	adds	r3, #1
 8002c34:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f983 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1b6      	bne.n	8002bb4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8002c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b65      	cmp	r3, #101	@ 0x65
 8002c50:	d003      	beq.n	8002c5a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8002c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b45      	cmp	r3, #69	@ 0x45
 8002c58:	d164      	bne.n	8002d24 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c6c:	d106      	bne.n	8002c7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8002c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c76:	3301      	adds	r3, #1
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7a:	e044      	b.n	8002d06 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b2b      	cmp	r3, #43	@ 0x2b
 8002c82:	d140      	bne.n	8002d06 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8002c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c86:	3301      	adds	r3, #1
 8002c88:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8002c8a:	e03c      	b.n	8002d06 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8002c8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	461a      	mov	r2, r3
 8002c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	3b30      	subs	r3, #48	@ 0x30
 8002c9e:	4413      	add	r3, r2
 8002ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8002ca2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8002ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ca8:	4413      	add	r3, r2
 8002caa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002cae:	dd27      	ble.n	8002d00 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8002cb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8002cb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8002cc0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8002d40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8002cc4:	e001      	b.n	8002cca <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8002cc6:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8002d48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8002cca:	eeb0 0b47 	vmov.f64	d0, d7
 8002cce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002cd0:	f000 f898 	bl	8002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002cd4:	e05d      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8002cd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8002cde:	f000 f8a7 	bl	8002e30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002ce2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ce6:	eeb1 7b47 	vneg.f64	d7, d7
 8002cea:	e003      	b.n	8002cf4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8002cec:	f000 f8a0 	bl	8002e30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002cf0:	eeb0 7b40 	vmov.f64	d7, d0
 8002cf4:	eeb0 0b47 	vmov.f64	d0, d7
 8002cf8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002cfa:	f000 f883 	bl	8002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002cfe:	e048      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8002d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d02:	3301      	adds	r3, #1
 8002d04:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f91b 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ba      	bne.n	8002c8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8002d16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8002d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d20:	425b      	negs	r3, r3
 8002d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8002d24:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d2a:	4413      	add	r3, r2
 8002d2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8002d36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d38:	f000 f888 	bl	8002e4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002d3c:	e029      	b.n	8002d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8002d3e:	bf00      	nop
 8002d40:	00000000 	.word	0x00000000
 8002d44:	80000000 	.word	0x80000000
	...
 8002d50:	19999999 	.word	0x19999999
 8002d54:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8002d58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d5c:	f7fd fc96 	bl	800068c <__aeabi_ul2d>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002d66:	ec43 2b10 	vmov	d0, r2, r3
 8002d6a:	f000 f8ac 	bl	8002ec6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8002d6e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8002d72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8002d7a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002d7e:	eeb1 7b47 	vneg.f64	d7, d7
 8002d82:	e001      	b.n	8002d88 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8002d84:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002d88:	eeb0 0b47 	vmov.f64	d0, d7
 8002d8c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d8e:	f000 f839 	bl	8002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8002d92:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d94:	3780      	adds	r7, #128	@ 0x80
 8002d96:	46bd      	mov	sp, r7
 8002d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d9c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    return _type;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7c1b      	ldrb	r3, [r3, #16]
  }
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	71bb      	strb	r3, [r7, #6]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8002dc6:	79ba      	ldrb	r2, [r7, #6]
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d805      	bhi.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d801      	bhi.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8002dda:	2300      	movs	r3, #0
  }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8002dec:	2100      	movs	r1, #0
 8002dee:	4804      	ldr	r0, [pc, #16]	@ (8002e00 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8002df0:	f000 f8b9 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002df4:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002df8:	eeb0 0b47 	vmov.f64	d0, d7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	7ff80000 	.word	0x7ff80000

08002e04 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	ed87 0b00 	vstr	d0, [r7]
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e16:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	741a      	strb	r2, [r3, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8002e34:	2100      	movs	r1, #0
 8002e36:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8002e38:	f000 f895 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002e3c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002e40:	eeb0 0b47 	vmov.f64	d0, d7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	7ff00000 	.word	0x7ff00000

08002e4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9c1 2300 	strd	r2, r3, [r1]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	741a      	strb	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e96:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8002e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e9e:	f7fd fbf5 	bl	800068c <__aeabi_ul2d>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8002eac:	7e3b      	ldrb	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	e000      	b.n	8002eb8 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ed0:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	dd1d      	ble.n	8002f14 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
 8002edc:	e016      	b.n	8002f0c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f860 	bl	8002fb0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8002ef0:	eeb0 6b40 	vmov.f64	d6, d0
 8002ef4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ef8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002efc:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	105b      	asrs	r3, r3, #1
 8002f04:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 8002f12:	e01f      	b.n	8002f54 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	425b      	negs	r3, r3
 8002f18:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75bb      	strb	r3, [r7, #22]
 8002f1e:	e016      	b.n	8002f4e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8002f2a:	7dbb      	ldrb	r3, [r7, #22]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f8a3 	bl	8003078 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8002f32:	eeb0 6b40 	vmov.f64	d6, d0
 8002f36:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f3e:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	105b      	asrs	r3, r3, #1
 8002f46:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	75bb      	strb	r3, [r7, #22]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e5      	bne.n	8002f20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8002f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f58:	ec43 2b17 	vmov	d7, r2, r3
  }
 8002f5c:	eeb0 0b47 	vmov.f64	d0, d7
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8002f66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	469a      	mov	sl, r3
 8002f78:	4693      	mov	fp, r2
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	4653      	mov	r3, sl
 8002f84:	2200      	movs	r2, #0
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	2000      	movs	r0, #0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	ea42 0804 	orr.w	r8, r2, r4
 8002f92:	ea43 0905 	orr.w	r9, r3, r5
 8002f96:	4640      	mov	r0, r8
 8002f98:	4649      	mov	r1, r9
 8002f9a:	f000 f913 	bl	80031c4 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8002f9e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002fa2:	eeb0 0b47 	vmov.f64	d0, d7
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002fb0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3bf 8f5b 	dmb	ish
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d031      	beq.n	8003036 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 8002fd2:	481f      	ldr	r0, [pc, #124]	@ (8003050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8002fd4:	f00d f885 	bl	80100e2 <__cxa_guard_acquire>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d026      	beq.n	8003036 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8002fe8:	491a      	ldr	r1, [pc, #104]	@ (8003054 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8002fea:	481b      	ldr	r0, [pc, #108]	@ (8003058 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8002fec:	f7ff ffbb 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002ff0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8002ff4:	4b19      	ldr	r3, [pc, #100]	@ (800305c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8002ff6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8002ffa:	4919      	ldr	r1, [pc, #100]	@ (8003060 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8002ffc:	4819      	ldr	r0, [pc, #100]	@ (8003064 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8002ffe:	f7ff ffb2 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003002:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003006:	4b15      	ldr	r3, [pc, #84]	@ (800305c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003008:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 800300c:	4916      	ldr	r1, [pc, #88]	@ (8003068 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 800300e:	4817      	ldr	r0, [pc, #92]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8003010:	f7ff ffa9 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003014:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800301a:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 800301e:	4914      	ldr	r1, [pc, #80]	@ (8003070 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8003020:	4814      	ldr	r0, [pc, #80]	@ (8003074 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8003022:	f7ff ffa0 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003026:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800302a:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800302c:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003030:	4807      	ldr	r0, [pc, #28]	@ (8003050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003032:	f00d f862 	bl	80100fa <__cxa_guard_release>
    return factors[index];
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003046:	eeb0 0b47 	vmov.f64	d0, d7
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	24000770 	.word	0x24000770
 8003054:	b5056e17 	.word	0xb5056e17
 8003058:	4693b8b5 	.word	0x4693b8b5
 800305c:	24000008 	.word	0x24000008
 8003060:	e93ff9f5 	.word	0xe93ff9f5
 8003064:	4d384f03 	.word	0x4d384f03
 8003068:	f9301d32 	.word	0xf9301d32
 800306c:	5a827748 	.word	0x5a827748
 8003070:	7f73bf3c 	.word	0x7f73bf3c
 8003074:	75154fdd 	.word	0x75154fdd

08003078 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003080:	4b3c      	ldr	r3, [pc, #240]	@ (8003174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3bf 8f5b 	dmb	ish
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d05e      	beq.n	8003158 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 800309a:	4836      	ldr	r0, [pc, #216]	@ (8003174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 800309c:	f00d f821 	bl	80100e2 <__cxa_guard_acquire>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d053      	beq.n	8003158 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 80030b0:	4931      	ldr	r1, [pc, #196]	@ (8003178 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 80030b2:	4832      	ldr	r0, [pc, #200]	@ (800317c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 80030b4:	f7ff ff57 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030b8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030bc:	4b30      	ldr	r3, [pc, #192]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030be:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 80030c2:	4930      	ldr	r1, [pc, #192]	@ (8003184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 80030c4:	4830      	ldr	r0, [pc, #192]	@ (8003188 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 80030c6:	f7ff ff4e 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030ca:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030d0:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80030d4:	492d      	ldr	r1, [pc, #180]	@ (800318c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80030d6:	482e      	ldr	r0, [pc, #184]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80030d8:	f7ff ff45 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030dc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030e0:	4b27      	ldr	r3, [pc, #156]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030e2:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80030e6:	492b      	ldr	r1, [pc, #172]	@ (8003194 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80030e8:	482b      	ldr	r0, [pc, #172]	@ (8003198 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80030ea:	f7ff ff3c 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030ee:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030f2:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030f4:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 80030f8:	4928      	ldr	r1, [pc, #160]	@ (800319c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 80030fa:	4829      	ldr	r0, [pc, #164]	@ (80031a0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 80030fc:	f7ff ff33 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003100:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003106:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 800310a:	4926      	ldr	r1, [pc, #152]	@ (80031a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 800310c:	4826      	ldr	r0, [pc, #152]	@ (80031a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 800310e:	f7ff ff2a 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003112:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003118:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 800311c:	4923      	ldr	r1, [pc, #140]	@ (80031ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 800311e:	4824      	ldr	r0, [pc, #144]	@ (80031b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8003120:	f7ff ff21 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003124:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800312a:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 800312e:	4921      	ldr	r1, [pc, #132]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8003130:	4821      	ldr	r0, [pc, #132]	@ (80031b8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8003132:	f7ff ff18 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003136:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800313c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8003140:	491e      	ldr	r1, [pc, #120]	@ (80031bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8003142:	481f      	ldr	r0, [pc, #124]	@ (80031c0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8003144:	f7ff ff0f 	bl	8002f66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003148:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800314e:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003152:	4808      	ldr	r0, [pc, #32]	@ (8003174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003154:	f00c ffd1 	bl	80100fa <__cxa_guard_release>
    return factors[index];
 8003158:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003168:	eeb0 0b47 	vmov.f64	d0, d7
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	240007c0 	.word	0x240007c0
 8003178:	9999999a 	.word	0x9999999a
 800317c:	3fb99999 	.word	0x3fb99999
 8003180:	24000778 	.word	0x24000778
 8003184:	47ae147b 	.word	0x47ae147b
 8003188:	3f847ae1 	.word	0x3f847ae1
 800318c:	eb1c432d 	.word	0xeb1c432d
 8003190:	3f1a36e2 	.word	0x3f1a36e2
 8003194:	e2308c3a 	.word	0xe2308c3a
 8003198:	3e45798e 	.word	0x3e45798e
 800319c:	97d889bc 	.word	0x97d889bc
 80031a0:	3c9cd2b2 	.word	0x3c9cd2b2
 80031a4:	d5a8a733 	.word	0xd5a8a733
 80031a8:	3949f623 	.word	0x3949f623
 80031ac:	44f4a73d 	.word	0x44f4a73d
 80031b0:	32a50ffd 	.word	0x32a50ffd
 80031b4:	cf8c979d 	.word	0xcf8c979d
 80031b8:	255bba08 	.word	0x255bba08
 80031bc:	64ac6f43 	.word	0x64ac6f43
 80031c0:	0ac80628 	.word	0x0ac80628

080031c4 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80031ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80031d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031da:	ec43 2b17 	vmov	d7, r2, r3
}
 80031de:	eeb0 0b47 	vmov.f64	d0, d7
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <_ZN11RemoraCommsD1Ev+0x20>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fb7f 	bl	8003900 <_ZN6ModuleD1Ev>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	080118cc 	.word	0x080118cc

08003210 <_ZN11RemoraCommsD0Ev>:
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffe7 	bl	80031ec <_ZN11RemoraCommsD1Ev>
 800321e:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f00c ff5b 	bl	80100de <_ZdlPvj>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d125      	bne.n	8003290 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324a:	4293      	cmp	r3, r2
 800324c:	d120      	bne.n	8003290 <_Z41__static_initialization_and_destruction_0ii+0x5c>
std::string strJson;
 800324e:	481b      	ldr	r0, [pc, #108]	@ (80032bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003250:	f00c ffd9 	bl	8010206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8003254:	4622      	mov	r2, r4
 8003256:	f242 7110 	movw	r1, #10000	@ 0x2710
 800325a:	4819      	ldr	r0, [pc, #100]	@ (80032c0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800325c:	f7fe fb9b 	bl	8001996 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8003260:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fb87 	bl	8001978 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800326a:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800326c:	2200      	movs	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fb7f 	bl	8001978 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800327a:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800327c:	2200      	movs	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
RemoraComms comms(ptrRxData, ptrTxData, SPI1);
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b12      	ldr	r3, [pc, #72]	@ (80032d4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800328a:	4813      	ldr	r0, [pc, #76]	@ (80032d8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800328c:	f000 fbb8 	bl	8003a00 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80032a0:	480d      	ldr	r0, [pc, #52]	@ (80032d8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80032a2:	f7ff ffa3 	bl	80031ec <_ZN11RemoraCommsD1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80032a6:	4806      	ldr	r0, [pc, #24]	@ (80032c0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80032a8:	f000 f818 	bl	80032dc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 80032ac:	4803      	ldr	r0, [pc, #12]	@ (80032bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80032ae:	f00c ffb1 	bl	8010214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	24000330 	.word	0x24000330
 80032c0:	24000348 	.word	0x24000348
 80032c4:	24000370 	.word	0x24000370
 80032c8:	24000378 	.word	0x24000378
 80032cc:	24000000 	.word	0x24000000
 80032d0:	24000004 	.word	0x24000004
 80032d4:	40013000 	.word	0x40013000
 80032d8:	24000514 	.word	0x24000514

080032dc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    freePool();
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f805 	bl	80032f4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 80032fc:	687c      	ldr	r4, [r7, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3308      	adds	r3, #8
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fd86 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003308:	4603      	mov	r3, r0
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fc1e 	bl	8000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8003310:	4603      	mov	r3, r0
 8003312:	4619      	mov	r1, r3
 8003314:	4620      	mov	r0, r4
 8003316:	f000 f804 	bl	8003322 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}

08003322 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fdb0 	bl	8000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0
 8003342:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff ff74 	bl	8003234 <_Z41__static_initialization_and_destruction_0ii>
 800334c:	bd80      	pop	{r7, pc}

0800334e <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 800334e:	b580      	push	{r7, lr}
 8003350:	af00      	add	r7, sp, #0
 8003352:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003356:	2000      	movs	r0, #0
 8003358:	f7ff ff6c 	bl	8003234 <_Z41__static_initialization_and_destruction_0ii>
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <HAL_MspInit+0x30>)
 8003368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800336c:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <HAL_MspInit+0x30>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_MspInit+0x30>)
 8003378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	58024400 	.word	0x58024400

08003394 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0bc      	sub	sp, #240	@ 0xf0
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	22c0      	movs	r2, #192	@ 0xc0
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f00d fb33 	bl	8010a20 <memset>
  if(hsd->Instance==SDMMC1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3c      	ldr	r2, [pc, #240]	@ (80034b0 <HAL_SD_MspInit+0x11c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d171      	bne.n	80034a8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80033c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d4:	f107 0318 	add.w	r3, r7, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fdcb 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80033e4:	f7fe fa94 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80033e8:	4b32      	ldr	r3, [pc, #200]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 80033ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033ee:	4a31      	ldr	r2, [pc, #196]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80033f8:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 80033fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	4b2b      	ldr	r3, [pc, #172]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800340c:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003416:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 8003418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 8003426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342a:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_SD_MspInit+0x120>)
 8003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003442:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800345c:	230c      	movs	r3, #12
 800345e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003462:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003466:	4619      	mov	r1, r3
 8003468:	4813      	ldr	r0, [pc, #76]	@ (80034b8 <HAL_SD_MspInit+0x124>)
 800346a:	f002 fbb3 	bl	8005bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800346e:	2304      	movs	r3, #4
 8003470:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003486:	230c      	movs	r3, #12
 8003488:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800348c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003490:	4619      	mov	r1, r3
 8003492:	480a      	ldr	r0, [pc, #40]	@ (80034bc <HAL_SD_MspInit+0x128>)
 8003494:	f002 fb9e 	bl	8005bd4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	2031      	movs	r0, #49	@ 0x31
 800349e:	f000 fe8c 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80034a2:	2031      	movs	r0, #49	@ 0x31
 80034a4:	f000 fea3 	bl	80041ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80034a8:	bf00      	nop
 80034aa:	37f0      	adds	r7, #240	@ 0xf0
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	52007000 	.word	0x52007000
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58020800 	.word	0x58020800
 80034bc:	58020c00 	.word	0x58020c00

080034c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0ba      	sub	sp, #232	@ 0xe8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	22c0      	movs	r2, #192	@ 0xc0
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f00d fa9d 	bl	8010a20 <memset>
  if(huart->Instance==USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <HAL_UART_MspInit+0xc8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d146      	bne.n	800357e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034f0:	f04f 0201 	mov.w	r2, #1
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003502:	f107 0310 	add.w	r3, r7, #16
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fd34 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003512:	f7fe f9fd 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_UART_MspInit+0xcc>)
 8003518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_UART_MspInit+0xcc>)
 800351e:	f043 0310 	orr.w	r3, r3, #16
 8003522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_UART_MspInit+0xcc>)
 8003528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_UART_MspInit+0xcc>)
 8003536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353a:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_UART_MspInit+0xcc>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_UART_MspInit+0xcc>)
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003552:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800356c:	2307      	movs	r3, #7
 800356e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	@ (8003590 <HAL_UART_MspInit+0xd0>)
 800357a:	f002 fb2b 	bl	8005bd4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800357e:	bf00      	nop
 8003580:	37e8      	adds	r7, #232	@ 0xe8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40011000 	.word	0x40011000
 800358c:	58024400 	.word	0x58024400
 8003590:	58020000 	.word	0x58020000

08003594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <NMI_Handler+0x4>

0800359c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <HardFault_Handler+0x4>

080035a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <MemManage_Handler+0x4>

080035ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <BusFault_Handler+0x4>

080035b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <UsageFault_Handler+0x4>

080035bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ea:	f000 fcbb 	bl	8003f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <SDMMC1_IRQHandler+0x10>)
 8003622:	f006 fc15 	bl	8009e50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	24000404 	.word	0x24000404

08003630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	return 1;
 8003634:	2301      	movs	r3, #1
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_kill>:

int _kill(int pid, int sig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800364a:	f00d fa8b 	bl	8010b64 <__errno>
 800364e:	4603      	mov	r3, r0
 8003650:	2216      	movs	r2, #22
 8003652:	601a      	str	r2, [r3, #0]
	return -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_exit>:

void _exit (int status)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ffe7 	bl	8003640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <_exit+0x12>

08003676 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e00a      	b.n	800369e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003688:	f3af 8000 	nop.w
 800368c:	4601      	mov	r1, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	60ba      	str	r2, [r7, #8]
 8003694:	b2ca      	uxtb	r2, r1
 8003696:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	dbf0      	blt.n	8003688 <_read+0x12>
	}

return len;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e009      	b.n	80036d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	60ba      	str	r2, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fdda 	bl	8001284 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	dbf1      	blt.n	80036c2 <_write+0x12>
	}
	return len;
 80036de:	687b      	ldr	r3, [r7, #4]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_close>:

int _close(int file)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	return -1;
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003710:	605a      	str	r2, [r3, #4]
	return 0;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_isatty>:

int _isatty(int file)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	return 1;
 8003728:	2301      	movs	r3, #1
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
	return 0;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003758:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <_sbrk+0x5c>)
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <_sbrk+0x60>)
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003764:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <_sbrk+0x64>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <_sbrk+0x64>)
 800376e:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <_sbrk+0x68>)
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003772:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <_sbrk+0x64>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d207      	bcs.n	8003790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003780:	f00d f9f0 	bl	8010b64 <__errno>
 8003784:	4603      	mov	r3, r0
 8003786:	220c      	movs	r2, #12
 8003788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	e009      	b.n	80037a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003790:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <_sbrk+0x64>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003796:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <_sbrk+0x64>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	4a05      	ldr	r2, [pc, #20]	@ (80037b4 <_sbrk+0x64>)
 80037a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	24080000 	.word	0x24080000
 80037b0:	00000400 	.word	0x00000400
 80037b4:	240007c4 	.word	0x240007c4
 80037b8:	24000fc0 	.word	0x24000fc0

080037bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037c0:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <SystemInit+0xe4>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <SystemInit+0xe4>)
 80037c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037d0:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <SystemInit+0xe8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d807      	bhi.n	80037ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037dc:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <SystemInit+0xe8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <SystemInit+0xe8>)
 80037e6:	f043 0307 	orr.w	r3, r3, #7
 80037ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037ec:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <SystemInit+0xec>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <SystemInit+0xec>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037f8:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <SystemInit+0xec>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037fe:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <SystemInit+0xec>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4929      	ldr	r1, [pc, #164]	@ (80038a8 <SystemInit+0xec>)
 8003804:	4b29      	ldr	r3, [pc, #164]	@ (80038ac <SystemInit+0xf0>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800380a:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <SystemInit+0xe8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003816:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <SystemInit+0xe8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 030f 	bic.w	r3, r3, #15
 800381e:	4a21      	ldr	r2, [pc, #132]	@ (80038a4 <SystemInit+0xe8>)
 8003820:	f043 0307 	orr.w	r3, r3, #7
 8003824:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <SystemInit+0xec>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800382c:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <SystemInit+0xec>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003832:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <SystemInit+0xec>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <SystemInit+0xec>)
 800383a:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <SystemInit+0xf4>)
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800383e:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <SystemInit+0xec>)
 8003840:	4a1c      	ldr	r2, [pc, #112]	@ (80038b4 <SystemInit+0xf8>)
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003844:	4b18      	ldr	r3, [pc, #96]	@ (80038a8 <SystemInit+0xec>)
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <SystemInit+0xfc>)
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800384a:	4b17      	ldr	r3, [pc, #92]	@ (80038a8 <SystemInit+0xec>)
 800384c:	2200      	movs	r2, #0
 800384e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003850:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <SystemInit+0xec>)
 8003852:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <SystemInit+0xfc>)
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <SystemInit+0xec>)
 8003858:	2200      	movs	r2, #0
 800385a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800385c:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <SystemInit+0xec>)
 800385e:	4a16      	ldr	r2, [pc, #88]	@ (80038b8 <SystemInit+0xfc>)
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003862:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <SystemInit+0xec>)
 8003864:	2200      	movs	r2, #0
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <SystemInit+0xec>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0e      	ldr	r2, [pc, #56]	@ (80038a8 <SystemInit+0xec>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <SystemInit+0xec>)
 8003876:	2200      	movs	r2, #0
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <SystemInit+0x100>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <SystemInit+0x104>)
 8003880:	4013      	ands	r3, r2
 8003882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003886:	d202      	bcs.n	800388e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003888:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <SystemInit+0x108>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <SystemInit+0x10c>)
 8003890:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003894:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00
 80038a4:	52002000 	.word	0x52002000
 80038a8:	58024400 	.word	0x58024400
 80038ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80038b0:	02020200 	.word	0x02020200
 80038b4:	01ff0000 	.word	0x01ff0000
 80038b8:	01010280 	.word	0x01010280
 80038bc:	5c001000 	.word	0x5c001000
 80038c0:	ffff0000 	.word	0xffff0000
 80038c4:	51008108 	.word	0x51008108
 80038c8:	52004000 	.word	0x52004000

080038cc <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <_ZN6ModuleC1Ev+0x2c>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 80038e6:	4805      	ldr	r0, [pc, #20]	@ (80038fc <_ZN6ModuleC1Ev+0x30>)
 80038e8:	f00c ffa0 	bl	801082c <puts>
}
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	0801189c 	.word	0x0801189c
 80038fc:	0801178c 	.word	0x0801178c

08003900 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4a04      	ldr	r2, [pc, #16]	@ (800391c <_ZN6ModuleD1Ev+0x1c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	0801189c 	.word	0x0801189c

08003920 <_ZN6ModuleD0Ev>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ffe9 	bl	8003900 <_ZN6ModuleD1Ev>
 800392e:	2114      	movs	r1, #20
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f00c fbd4 	bl	80100de <_ZdlPvj>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_ZN6Module9configureEv>:
void Module::configure(){}
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd f818 	bl	80009e8 <_ZN9InterruptC1Ev>
 80039b8:	4a07      	ldr	r2, [pc, #28]	@ (80039d8 <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4619      	mov	r1, r3
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f7fd f81d 	bl	8000a08 <_ZN9Interrupt8RegisterEiPS_>
}
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	080118c0 	.word	0x080118c0

080039dc <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3318      	adds	r3, #24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4610      	mov	r0, r2
 80039f4:	4798      	blx	r3
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5b 	bl	80038cc <_ZN6ModuleC1Ev>
 8003a16:	4a0c      	ldr	r2, [pc, #48]	@ (8003a48 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	220a      	movs	r2, #10
 8003a3a:	849a      	strh	r2, [r3, #36]	@ 0x24


}
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	080118cc 	.word	0x080118cc

08003a4c <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b0bd      	sub	sp, #244	@ 0xf4
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a64:	f107 0318 	add.w	r3, r7, #24
 8003a68:	22c0      	movs	r2, #192	@ 0xc0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f00c ffd7 	bl	8010a20 <memset>

    if(this->spiHandle.Instance == SPI1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	4ab1      	ldr	r2, [pc, #708]	@ (8003d3c <_ZN11RemoraComms4initEv+0x2f0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f040 8116 	bne.w	8003caa <_ZN11RemoraComms4initEv+0x25e>
    {
        printf("Initialising SPI1 slave\n");
 8003a7e:	48b0      	ldr	r0, [pc, #704]	@ (8003d40 <_ZN11RemoraComms4initEv+0x2f4>)
 8003a80:	f00c fed4 	bl	801082c <puts>

		// Initializes the peripherals clock
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003a90:	2302      	movs	r3, #2
 8003a92:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003a94:	230c      	movs	r3, #12
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
		PeriphClkInitStruct.PLL2.PLL2P = 1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
		PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
		PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003aa4:	23c0      	movs	r3, #192	@ 0xc0
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
		PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
		PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8003ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ab4:	67bb      	str	r3, [r7, #120]	@ 0x78

		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003ab6:	f107 0318 	add.w	r3, r7, #24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 fa5a 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>

		// Peripheral clock enable
		__HAL_RCC_SPI1_CLK_ENABLE();
 8003ac0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac6:	4a9f      	ldr	r2, [pc, #636]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003ac8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003acc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]

		printf("Initialising GPIO for SPI\n");
 8003ade:	489a      	ldr	r0, [pc, #616]	@ (8003d48 <_ZN11RemoraComms4initEv+0x2fc>)
 8003ae0:	f00c fea4 	bl	801082c <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b97      	ldr	r3, [pc, #604]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aea:	4a96      	ldr	r2, [pc, #600]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003af4:	4b93      	ldr	r3, [pc, #588]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */

	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b02:	23f0      	movs	r3, #240	@ 0xf0
 8003b04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003b24:	4619      	mov	r1, r3
 8003b26:	4889      	ldr	r0, [pc, #548]	@ (8003d4c <_ZN11RemoraComms4initEv+0x300>)
 8003b28:	f002 f854 	bl	8005bd4 <HAL_GPIO_Init>

        this->spiHandle.Init.Mode           = SPI_MODE_SLAVE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            = SPI_NSS_HARD_INPUT;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         = SPI_TIMODE_DISABLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  = 0x0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54

        this->spiHandle.Init.NSSPMode 		= SPI_NSS_PULSE_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 	= SPI_NSS_POLARITY_LOW;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 	= SPI_FIFO_THRESHOLD_01DATA;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 		= SPI_IO_SWAP_DISABLE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3328      	adds	r3, #40	@ 0x28
 8003baa:	4618      	mov	r0, r3
 8003bac:	f007 fb44 	bl	800b238 <HAL_SPI_Init>

        printf("Initialising DMA for SPI\n");
 8003bb0:	4867      	ldr	r0, [pc, #412]	@ (8003d50 <_ZN11RemoraComms4initEv+0x304>)
 8003bb2:	f00c fe3b 	bl	801082c <puts>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8003bb6:	4b63      	ldr	r3, [pc, #396]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bbc:	4a61      	ldr	r2, [pc, #388]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d54 <_ZN11RemoraComms4initEv+0x308>)
 8003bd8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2226      	movs	r2, #38	@ 0x26
 8003be0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2240      	movs	r2, #64	@ 0x40
 8003be8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c14:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	33b0      	adds	r3, #176	@ 0xb0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 faf9 	bl	8004224 <HAL_DMA_Init>

        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <_ZN11RemoraComms4initEv+0x30c>)
 8003c4e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2225      	movs	r2, #37	@ 0x25
 8003c56:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c70:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c8a:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fabd 	bl	8004224 <HAL_DMA_Init>
    }

	// Interrupt pin is the NSS pin
    // Configure GPIO pin : PA_4

    GPIO_InitStruct = {0};
 8003caa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cba:	4b22      	ldr	r3, [pc, #136]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc0:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cca:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <_ZN11RemoraComms4initEv+0x2f8>)
 8003ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4816      	ldr	r0, [pc, #88]	@ (8003d4c <_ZN11RemoraComms4initEv+0x300>)
 8003cf4:	f001 ff6e 	bl	8005bd4 <HAL_GPIO_Init>

    interruptPtr = new ModuleInterrupt(this->irq, this);
 8003cf8:	2008      	movs	r0, #8
 8003cfa:	f00c fa01 	bl	8010100 <_Znwj>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461c      	mov	r4, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f7ff fe48 	bl	80039a4 <_ZN15ModuleInterruptC1EiP6Module>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621c      	str	r4, [r3, #32]
	HAL_NVIC_SetPriority(this->irq, 5, 0);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2105      	movs	r1, #5
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fa49 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irq);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa5d 	bl	80041ee <HAL_NVIC_EnableIRQ>

}
 8003d34:	bf00      	nop
 8003d36:	37f4      	adds	r7, #244	@ 0xf4
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	40013000 	.word	0x40013000
 8003d40:	080117e4 	.word	0x080117e4
 8003d44:	58024400 	.word	0x58024400
 8003d48:	080117fc 	.word	0x080117fc
 8003d4c:	58020000 	.word	0x58020000
 8003d50:	08011818 	.word	0x08011818
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028

08003d5c <_ZN11RemoraComms15handleInterruptEv>:
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
}


void RemoraComms::handleInterrupt()
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	//printf("RemoraComms interrupt\n");

	switch (this->spiRxBuffer.header)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3219 	ldr.w	r3, [r3, #537]	@ 0x219
 8003d6a:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <_ZN11RemoraComms15handleInterruptEv+0xb4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <_ZN11RemoraComms15handleInterruptEv+0x1c>
 8003d70:	4a28      	ldr	r2, [pc, #160]	@ (8003e14 <_ZN11RemoraComms15handleInterruptEv+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <_ZN11RemoraComms15handleInterruptEv+0x2e>
 8003d76:	e02a      	b.n	8003dce <_ZN11RemoraComms15handleInterruptEv+0x72>
	{
	  case PRU_READ:
		this->SPIdata = true;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
		this->rejectCnt = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
		// READ so do nothing with the received data
		break;
 8003d88:	e032      	b.n	8003df0 <_ZN11RemoraComms15handleInterruptEv+0x94>

	  case PRU_WRITE:
		this->SPIdata = true;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
		this->rejectCnt = 0;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9a:	b672      	cpsid	i
}
 8003d9c:	bf00      	nop
		// Do it the slower way. This does not seem to impact performance but not great to stay in ISR context for longer.. :-(

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e00e      	b.n	8003dc2 <_ZN11RemoraComms15handleInterruptEv+0x66>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	440b      	add	r3, r1
 8003dae:	f203 2319 	addw	r3, r3, #537	@ 0x219
 8003db2:	7819      	ldrb	r1, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	460a      	mov	r2, r1
 8003dba:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dc6:	dded      	ble.n	8003da4 <_ZN11RemoraComms15handleInterruptEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc8:	b662      	cpsie	i
}
 8003dca:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 8003dcc:	e010      	b.n	8003df0 <_ZN11RemoraComms15handleInterruptEv+0x94>

	  default:
		this->rejectCnt++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
		if (this->rejectCnt > 5)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d903      	bls.n	8003df0 <_ZN11RemoraComms15handleInterruptEv+0x94>
		{
			this->SPIdataError = true;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
		}
		// reset SPI somehow
	}

	HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f203 2219 	addw	r2, r3, #537	@ 0x219
 8003e02:	2340      	movs	r3, #64	@ 0x40
 8003e04:	f007 fb46 	bl	800b494 <HAL_SPI_TransmitReceive_DMA>
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	72656164 	.word	0x72656164
 8003e14:	77726974 	.word	0x77726974

08003e18 <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e30:	f7ff fcc4 	bl	80037bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e34:	480c      	ldr	r0, [pc, #48]	@ (8003e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e36:	490d      	ldr	r1, [pc, #52]	@ (8003e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e38:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f00c fe89 	bl	8010b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e5e:	f7fd fb57 	bl	8001510 <main>
  bx  lr
 8003e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e6c:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8003e70:	08011a2c 	.word	0x08011a2c
  ldr r2, =_sbss
 8003e74:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8003e78:	24000fc0 	.word	0x24000fc0

08003e7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e7c:	e7fe      	b.n	8003e7c <ADC3_IRQHandler>
	...

08003e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e86:	2003      	movs	r0, #3
 8003e88:	f000 f98c 	bl	80041a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e8c:	f002 fe9c 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_Init+0x68>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	4913      	ldr	r1, [pc, #76]	@ (8003eec <HAL_Init+0x6c>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <HAL_Init+0x68>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <HAL_Init+0x6c>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef0 <HAL_Init+0x70>)
 8003ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <HAL_Init+0x74>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eca:	200f      	movs	r0, #15
 8003ecc:	f000 f814 	bl	8003ef8 <HAL_InitTick>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e002      	b.n	8003ee0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003eda:	f7ff fa41 	bl	8003360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	08011884 	.word	0x08011884
 8003ef0:	24000054 	.word	0x24000054
 8003ef4:	24000050 	.word	0x24000050

08003ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <HAL_InitTick+0x60>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e021      	b.n	8003f50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <HAL_InitTick+0x64>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <HAL_InitTick+0x60>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f971 	bl	800420a <HAL_SYSTICK_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e00e      	b.n	8003f50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0f      	cmp	r3, #15
 8003f36:	d80a      	bhi.n	8003f4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	f000 f93b 	bl	80041ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f44:	4a06      	ldr	r2, [pc, #24]	@ (8003f60 <HAL_InitTick+0x68>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	2400005c 	.word	0x2400005c
 8003f5c:	24000050 	.word	0x24000050
 8003f60:	24000058 	.word	0x24000058

08003f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_IncTick+0x20>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_IncTick+0x24>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	4a04      	ldr	r2, [pc, #16]	@ (8003f88 <HAL_IncTick+0x24>)
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2400005c 	.word	0x2400005c
 8003f88:	240007c8 	.word	0x240007c8

08003f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_GetTick+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	240007c8 	.word	0x240007c8

08003fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7ff ffee 	bl	8003f8c <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d005      	beq.n	8003fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <HAL_Delay+0x44>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fca:	bf00      	nop
 8003fcc:	f7ff ffde 	bl	8003f8c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d8f7      	bhi.n	8003fcc <HAL_Delay+0x28>
  {
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2400005c 	.word	0x2400005c

08003fec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_GetREVID+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	5c001000 	.word	0x5c001000

08004004 <__NVIC_SetPriorityGrouping>:
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <__NVIC_SetPriorityGrouping+0x40>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	4313      	orrs	r3, r2
 8004030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004032:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <__NVIC_SetPriorityGrouping+0x40>)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	60d3      	str	r3, [r2, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00
 8004048:	05fa0000 	.word	0x05fa0000

0800404c <__NVIC_GetPriorityGrouping>:
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__NVIC_GetPriorityGrouping+0x18>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f003 0307 	and.w	r3, r3, #7
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_EnableIRQ>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db0b      	blt.n	8004092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4907      	ldr	r1, [pc, #28]	@ (80040a0 <__NVIC_EnableIRQ+0x38>)
 8004082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2001      	movs	r0, #1
 800408a:	fa00 f202 	lsl.w	r2, r0, r2
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	@ (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	@ (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	@ 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	@ 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004170:	d301      	bcc.n	8004176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004172:	2301      	movs	r3, #1
 8004174:	e00f      	b.n	8004196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004176:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <SysTick_Config+0x40>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417e:	210f      	movs	r1, #15
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f7ff ff8e 	bl	80040a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <SysTick_Config+0x40>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418e:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <SysTick_Config+0x40>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e000e010 	.word	0xe000e010

080041a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff29 	bl	8004004 <__NVIC_SetPriorityGrouping>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041c8:	f7ff ff40 	bl	800404c <__NVIC_GetPriorityGrouping>
 80041cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff90 	bl	80040f8 <NVIC_EncodePriority>
 80041d8:	4602      	mov	r2, r0
 80041da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff5f 	bl	80040a4 <__NVIC_SetPriority>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff33 	bl	8004068 <__NVIC_EnableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffa4 	bl	8004160 <SysTick_Config>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7ff feae 	bl	8003f8c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e316      	b.n	800486a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a66      	ldr	r2, [pc, #408]	@ (80043dc <HAL_DMA_Init+0x1b8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04a      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a65      	ldr	r2, [pc, #404]	@ (80043e0 <HAL_DMA_Init+0x1bc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d045      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a63      	ldr	r2, [pc, #396]	@ (80043e4 <HAL_DMA_Init+0x1c0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a62      	ldr	r2, [pc, #392]	@ (80043e8 <HAL_DMA_Init+0x1c4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d03b      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a60      	ldr	r2, [pc, #384]	@ (80043ec <HAL_DMA_Init+0x1c8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5f      	ldr	r2, [pc, #380]	@ (80043f0 <HAL_DMA_Init+0x1cc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d031      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5d      	ldr	r2, [pc, #372]	@ (80043f4 <HAL_DMA_Init+0x1d0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5c      	ldr	r2, [pc, #368]	@ (80043f8 <HAL_DMA_Init+0x1d4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d027      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a5a      	ldr	r2, [pc, #360]	@ (80043fc <HAL_DMA_Init+0x1d8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a59      	ldr	r2, [pc, #356]	@ (8004400 <HAL_DMA_Init+0x1dc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01d      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a57      	ldr	r2, [pc, #348]	@ (8004404 <HAL_DMA_Init+0x1e0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a56      	ldr	r2, [pc, #344]	@ (8004408 <HAL_DMA_Init+0x1e4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a54      	ldr	r2, [pc, #336]	@ (800440c <HAL_DMA_Init+0x1e8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a53      	ldr	r2, [pc, #332]	@ (8004410 <HAL_DMA_Init+0x1ec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a51      	ldr	r2, [pc, #324]	@ (8004414 <HAL_DMA_Init+0x1f0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_Init+0xb8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a50      	ldr	r2, [pc, #320]	@ (8004418 <HAL_DMA_Init+0x1f4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_DMA_Init+0xbc>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_DMA_Init+0xbe>
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 813b 	beq.w	800455e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a37      	ldr	r2, [pc, #220]	@ (80043dc <HAL_DMA_Init+0x1b8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04a      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a36      	ldr	r2, [pc, #216]	@ (80043e0 <HAL_DMA_Init+0x1bc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d045      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a34      	ldr	r2, [pc, #208]	@ (80043e4 <HAL_DMA_Init+0x1c0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d040      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a33      	ldr	r2, [pc, #204]	@ (80043e8 <HAL_DMA_Init+0x1c4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d03b      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a31      	ldr	r2, [pc, #196]	@ (80043ec <HAL_DMA_Init+0x1c8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <HAL_DMA_Init+0x1cc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d031      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2e      	ldr	r2, [pc, #184]	@ (80043f4 <HAL_DMA_Init+0x1d0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2d      	ldr	r2, [pc, #180]	@ (80043f8 <HAL_DMA_Init+0x1d4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d027      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <HAL_DMA_Init+0x1d8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2a      	ldr	r2, [pc, #168]	@ (8004400 <HAL_DMA_Init+0x1dc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a28      	ldr	r2, [pc, #160]	@ (8004404 <HAL_DMA_Init+0x1e0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a27      	ldr	r2, [pc, #156]	@ (8004408 <HAL_DMA_Init+0x1e4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a25      	ldr	r2, [pc, #148]	@ (800440c <HAL_DMA_Init+0x1e8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a24      	ldr	r2, [pc, #144]	@ (8004410 <HAL_DMA_Init+0x1ec>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_Init+0x174>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a22      	ldr	r2, [pc, #136]	@ (8004414 <HAL_DMA_Init+0x1f0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_Init+0x174>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <HAL_DMA_Init+0x1f4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <HAL_DMA_Init+0x186>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e007      	b.n	80043ba <HAL_DMA_Init+0x196>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043ba:	e02f      	b.n	800441c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043bc:	f7ff fde6 	bl	8003f8c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d928      	bls.n	800441c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e246      	b.n	800486a <HAL_DMA_Init+0x646>
 80043dc:	40020010 	.word	0x40020010
 80043e0:	40020028 	.word	0x40020028
 80043e4:	40020040 	.word	0x40020040
 80043e8:	40020058 	.word	0x40020058
 80043ec:	40020070 	.word	0x40020070
 80043f0:	40020088 	.word	0x40020088
 80043f4:	400200a0 	.word	0x400200a0
 80043f8:	400200b8 	.word	0x400200b8
 80043fc:	40020410 	.word	0x40020410
 8004400:	40020428 	.word	0x40020428
 8004404:	40020440 	.word	0x40020440
 8004408:	40020458 	.word	0x40020458
 800440c:	40020470 	.word	0x40020470
 8004410:	40020488 	.word	0x40020488
 8004414:	400204a0 	.word	0x400204a0
 8004418:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1c8      	bne.n	80043bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4b83      	ldr	r3, [pc, #524]	@ (8004644 <HAL_DMA_Init+0x420>)
 8004436:	4013      	ands	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004442:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	2b04      	cmp	r3, #4
 800446e:	d107      	bne.n	8004480 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	4313      	orrs	r3, r2
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004480:	4b71      	ldr	r3, [pc, #452]	@ (8004648 <HAL_DMA_Init+0x424>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b71      	ldr	r3, [pc, #452]	@ (800464c <HAL_DMA_Init+0x428>)
 8004486:	4013      	ands	r3, r2
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448c:	d328      	bcc.n	80044e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b28      	cmp	r3, #40	@ 0x28
 8004494:	d903      	bls.n	800449e <HAL_DMA_Init+0x27a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b2e      	cmp	r3, #46	@ 0x2e
 800449c:	d917      	bls.n	80044ce <HAL_DMA_Init+0x2aa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80044a4:	d903      	bls.n	80044ae <HAL_DMA_Init+0x28a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b42      	cmp	r3, #66	@ 0x42
 80044ac:	d90f      	bls.n	80044ce <HAL_DMA_Init+0x2aa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b46      	cmp	r3, #70	@ 0x46
 80044b4:	d903      	bls.n	80044be <HAL_DMA_Init+0x29a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b48      	cmp	r3, #72	@ 0x48
 80044bc:	d907      	bls.n	80044ce <HAL_DMA_Init+0x2aa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80044c4:	d905      	bls.n	80044d2 <HAL_DMA_Init+0x2ae>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b52      	cmp	r3, #82	@ 0x52
 80044cc:	d801      	bhi.n	80044d2 <HAL_DMA_Init+0x2ae>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_DMA_Init+0x2b0>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	2b04      	cmp	r3, #4
 8004508:	d117      	bne.n	800453a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 f9cf 	bl	80058c0 <DMA_CheckFifoParam>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2240      	movs	r2, #64	@ 0x40
 800452c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e197      	b.n	800486a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f001 f90a 	bl	800575c <DMA_CalcBaseAndBitshift>
 8004548:	4603      	mov	r3, r0
 800454a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	223f      	movs	r2, #63	@ 0x3f
 8004556:	409a      	lsls	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e0cd      	b.n	80046fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3b      	ldr	r2, [pc, #236]	@ (8004650 <HAL_DMA_Init+0x42c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a39      	ldr	r2, [pc, #228]	@ (8004654 <HAL_DMA_Init+0x430>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a38      	ldr	r2, [pc, #224]	@ (8004658 <HAL_DMA_Init+0x434>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a36      	ldr	r2, [pc, #216]	@ (800465c <HAL_DMA_Init+0x438>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <HAL_DMA_Init+0x43c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a33      	ldr	r2, [pc, #204]	@ (8004664 <HAL_DMA_Init+0x440>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <HAL_DMA_Init+0x444>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_Init+0x38a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	@ (800466c <HAL_DMA_Init+0x448>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_DMA_Init+0x38e>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_Init+0x390>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8097 	beq.w	80046e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a24      	ldr	r2, [pc, #144]	@ (8004650 <HAL_DMA_Init+0x42c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d021      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a22      	ldr	r2, [pc, #136]	@ (8004654 <HAL_DMA_Init+0x430>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01c      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a21      	ldr	r2, [pc, #132]	@ (8004658 <HAL_DMA_Init+0x434>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d017      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <HAL_DMA_Init+0x438>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d012      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004660 <HAL_DMA_Init+0x43c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00d      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <HAL_DMA_Init+0x440>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d008      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004668 <HAL_DMA_Init+0x444>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <HAL_DMA_Init+0x3e4>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <HAL_DMA_Init+0x448>)
 8004606:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <HAL_DMA_Init+0x44c>)
 8004624:	4013      	ands	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d021      	beq.n	8004674 <HAL_DMA_Init+0x450>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b80      	cmp	r3, #128	@ 0x80
 8004636:	d102      	bne.n	800463e <HAL_DMA_Init+0x41a>
 8004638:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800463c:	e01b      	b.n	8004676 <HAL_DMA_Init+0x452>
 800463e:	2300      	movs	r3, #0
 8004640:	e019      	b.n	8004676 <HAL_DMA_Init+0x452>
 8004642:	bf00      	nop
 8004644:	fe10803f 	.word	0xfe10803f
 8004648:	5c001000 	.word	0x5c001000
 800464c:	ffff0000 	.word	0xffff0000
 8004650:	58025408 	.word	0x58025408
 8004654:	5802541c 	.word	0x5802541c
 8004658:	58025430 	.word	0x58025430
 800465c:	58025444 	.word	0x58025444
 8004660:	58025458 	.word	0x58025458
 8004664:	5802546c 	.word	0x5802546c
 8004668:	58025480 	.word	0x58025480
 800466c:	58025494 	.word	0x58025494
 8004670:	fffe000f 	.word	0xfffe000f
 8004674:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68d2      	ldr	r2, [r2, #12]
 800467a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800467c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004684:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800468c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800469c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004874 <HAL_DMA_Init+0x650>)
 80046bc:	4413      	add	r3, r2
 80046be:	4a6e      	ldr	r2, [pc, #440]	@ (8004878 <HAL_DMA_Init+0x654>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f001 f845 	bl	800575c <DMA_CalcBaseAndBitshift>
 80046d2:	4603      	mov	r3, r0
 80046d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e008      	b.n	80046fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2203      	movs	r2, #3
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0b7      	b.n	800486a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5f      	ldr	r2, [pc, #380]	@ (800487c <HAL_DMA_Init+0x658>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d072      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5d      	ldr	r2, [pc, #372]	@ (8004880 <HAL_DMA_Init+0x65c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d06d      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5c      	ldr	r2, [pc, #368]	@ (8004884 <HAL_DMA_Init+0x660>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d068      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5a      	ldr	r2, [pc, #360]	@ (8004888 <HAL_DMA_Init+0x664>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d063      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a59      	ldr	r2, [pc, #356]	@ (800488c <HAL_DMA_Init+0x668>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d05e      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a57      	ldr	r2, [pc, #348]	@ (8004890 <HAL_DMA_Init+0x66c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d059      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a56      	ldr	r2, [pc, #344]	@ (8004894 <HAL_DMA_Init+0x670>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d054      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a54      	ldr	r2, [pc, #336]	@ (8004898 <HAL_DMA_Init+0x674>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d04f      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a53      	ldr	r2, [pc, #332]	@ (800489c <HAL_DMA_Init+0x678>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d04a      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a51      	ldr	r2, [pc, #324]	@ (80048a0 <HAL_DMA_Init+0x67c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d045      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a50      	ldr	r2, [pc, #320]	@ (80048a4 <HAL_DMA_Init+0x680>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d040      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a4e      	ldr	r2, [pc, #312]	@ (80048a8 <HAL_DMA_Init+0x684>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d03b      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4d      	ldr	r2, [pc, #308]	@ (80048ac <HAL_DMA_Init+0x688>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d036      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <HAL_DMA_Init+0x68c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d031      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a4a      	ldr	r2, [pc, #296]	@ (80048b4 <HAL_DMA_Init+0x690>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d02c      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a48      	ldr	r2, [pc, #288]	@ (80048b8 <HAL_DMA_Init+0x694>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d027      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a47      	ldr	r2, [pc, #284]	@ (80048bc <HAL_DMA_Init+0x698>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a45      	ldr	r2, [pc, #276]	@ (80048c0 <HAL_DMA_Init+0x69c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a44      	ldr	r2, [pc, #272]	@ (80048c4 <HAL_DMA_Init+0x6a0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a42      	ldr	r2, [pc, #264]	@ (80048c8 <HAL_DMA_Init+0x6a4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a41      	ldr	r2, [pc, #260]	@ (80048cc <HAL_DMA_Init+0x6a8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3f      	ldr	r2, [pc, #252]	@ (80048d0 <HAL_DMA_Init+0x6ac>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3e      	ldr	r2, [pc, #248]	@ (80048d4 <HAL_DMA_Init+0x6b0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_Init+0x5c6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3c      	ldr	r2, [pc, #240]	@ (80048d8 <HAL_DMA_Init+0x6b4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_DMA_Init+0x5ca>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_DMA_Init+0x5cc>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d032      	beq.n	800485a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 f8df 	bl	80059b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b80      	cmp	r3, #128	@ 0x80
 8004800:	d102      	bne.n	8004808 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800481c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_DMA_Init+0x624>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b08      	cmp	r3, #8
 800482c:	d80c      	bhi.n	8004848 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 f95c 	bl	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	e008      	b.n	800485a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	a7fdabf8 	.word	0xa7fdabf8
 8004878:	cccccccd 	.word	0xcccccccd
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
 80048bc:	58025408 	.word	0x58025408
 80048c0:	5802541c 	.word	0x5802541c
 80048c4:	58025430 	.word	0x58025430
 80048c8:	58025444 	.word	0x58025444
 80048cc:	58025458 	.word	0x58025458
 80048d0:	5802546c 	.word	0x5802546c
 80048d4:	58025480 	.word	0x58025480
 80048d8:	58025494 	.word	0x58025494

080048dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e226      	b.n	8004d46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_DMA_Start_IT+0x2a>
 8004902:	2302      	movs	r3, #2
 8004904:	e21f      	b.n	8004d46 <HAL_DMA_Start_IT+0x46a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 820a 	bne.w	8004d30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a68      	ldr	r2, [pc, #416]	@ (8004ad0 <HAL_DMA_Start_IT+0x1f4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d04a      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a66      	ldr	r2, [pc, #408]	@ (8004ad4 <HAL_DMA_Start_IT+0x1f8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d045      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a65      	ldr	r2, [pc, #404]	@ (8004ad8 <HAL_DMA_Start_IT+0x1fc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d040      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a63      	ldr	r2, [pc, #396]	@ (8004adc <HAL_DMA_Start_IT+0x200>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d03b      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a62      	ldr	r2, [pc, #392]	@ (8004ae0 <HAL_DMA_Start_IT+0x204>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d036      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a60      	ldr	r2, [pc, #384]	@ (8004ae4 <HAL_DMA_Start_IT+0x208>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d031      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5f      	ldr	r2, [pc, #380]	@ (8004ae8 <HAL_DMA_Start_IT+0x20c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d02c      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5d      	ldr	r2, [pc, #372]	@ (8004aec <HAL_DMA_Start_IT+0x210>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d027      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5c      	ldr	r2, [pc, #368]	@ (8004af0 <HAL_DMA_Start_IT+0x214>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a5a      	ldr	r2, [pc, #360]	@ (8004af4 <HAL_DMA_Start_IT+0x218>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01d      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a59      	ldr	r2, [pc, #356]	@ (8004af8 <HAL_DMA_Start_IT+0x21c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d018      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a57      	ldr	r2, [pc, #348]	@ (8004afc <HAL_DMA_Start_IT+0x220>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a56      	ldr	r2, [pc, #344]	@ (8004b00 <HAL_DMA_Start_IT+0x224>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a54      	ldr	r2, [pc, #336]	@ (8004b04 <HAL_DMA_Start_IT+0x228>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a53      	ldr	r2, [pc, #332]	@ (8004b08 <HAL_DMA_Start_IT+0x22c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_DMA_Start_IT+0xee>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a51      	ldr	r2, [pc, #324]	@ (8004b0c <HAL_DMA_Start_IT+0x230>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <HAL_DMA_Start_IT+0x100>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e007      	b.n	80049ec <HAL_DMA_Start_IT+0x110>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fd06 	bl	8005404 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a34      	ldr	r2, [pc, #208]	@ (8004ad0 <HAL_DMA_Start_IT+0x1f4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04a      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a33      	ldr	r2, [pc, #204]	@ (8004ad4 <HAL_DMA_Start_IT+0x1f8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d045      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a31      	ldr	r2, [pc, #196]	@ (8004ad8 <HAL_DMA_Start_IT+0x1fc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d040      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a30      	ldr	r2, [pc, #192]	@ (8004adc <HAL_DMA_Start_IT+0x200>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d03b      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae0 <HAL_DMA_Start_IT+0x204>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d036      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae4 <HAL_DMA_Start_IT+0x208>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae8 <HAL_DMA_Start_IT+0x20c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02c      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_DMA_Start_IT+0x210>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d027      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a28      	ldr	r2, [pc, #160]	@ (8004af0 <HAL_DMA_Start_IT+0x214>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d022      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a27      	ldr	r2, [pc, #156]	@ (8004af4 <HAL_DMA_Start_IT+0x218>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01d      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a25      	ldr	r2, [pc, #148]	@ (8004af8 <HAL_DMA_Start_IT+0x21c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a24      	ldr	r2, [pc, #144]	@ (8004afc <HAL_DMA_Start_IT+0x220>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a22      	ldr	r2, [pc, #136]	@ (8004b00 <HAL_DMA_Start_IT+0x224>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	@ (8004b04 <HAL_DMA_Start_IT+0x228>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	@ (8004b08 <HAL_DMA_Start_IT+0x22c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_Start_IT+0x1bc>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <HAL_DMA_Start_IT+0x230>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Start_IT+0x1c0>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_DMA_Start_IT+0x1c2>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d036      	beq.n	8004b10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 021e 	bic.w	r2, r3, #30
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0216 	orr.w	r2, r2, #22
 8004ab4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03e      	beq.n	8004b3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0208 	orr.w	r2, r2, #8
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e035      	b.n	8004b3c <HAL_DMA_Start_IT+0x260>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 020e 	bic.w	r2, r3, #14
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 020a 	orr.w	r2, r2, #10
 8004b22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0204 	orr.w	r2, r2, #4
 8004b3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a83      	ldr	r2, [pc, #524]	@ (8004d50 <HAL_DMA_Start_IT+0x474>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d072      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a82      	ldr	r2, [pc, #520]	@ (8004d54 <HAL_DMA_Start_IT+0x478>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d06d      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a80      	ldr	r2, [pc, #512]	@ (8004d58 <HAL_DMA_Start_IT+0x47c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d068      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7f      	ldr	r2, [pc, #508]	@ (8004d5c <HAL_DMA_Start_IT+0x480>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d063      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7d      	ldr	r2, [pc, #500]	@ (8004d60 <HAL_DMA_Start_IT+0x484>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d05e      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7c      	ldr	r2, [pc, #496]	@ (8004d64 <HAL_DMA_Start_IT+0x488>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d059      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d68 <HAL_DMA_Start_IT+0x48c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d054      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a79      	ldr	r2, [pc, #484]	@ (8004d6c <HAL_DMA_Start_IT+0x490>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d04f      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a77      	ldr	r2, [pc, #476]	@ (8004d70 <HAL_DMA_Start_IT+0x494>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a76      	ldr	r2, [pc, #472]	@ (8004d74 <HAL_DMA_Start_IT+0x498>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a74      	ldr	r2, [pc, #464]	@ (8004d78 <HAL_DMA_Start_IT+0x49c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a73      	ldr	r2, [pc, #460]	@ (8004d7c <HAL_DMA_Start_IT+0x4a0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a71      	ldr	r2, [pc, #452]	@ (8004d80 <HAL_DMA_Start_IT+0x4a4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a70      	ldr	r2, [pc, #448]	@ (8004d84 <HAL_DMA_Start_IT+0x4a8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8004d88 <HAL_DMA_Start_IT+0x4ac>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d8c <HAL_DMA_Start_IT+0x4b0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6b      	ldr	r2, [pc, #428]	@ (8004d90 <HAL_DMA_Start_IT+0x4b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6a      	ldr	r2, [pc, #424]	@ (8004d94 <HAL_DMA_Start_IT+0x4b8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a68      	ldr	r2, [pc, #416]	@ (8004d98 <HAL_DMA_Start_IT+0x4bc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a67      	ldr	r2, [pc, #412]	@ (8004d9c <HAL_DMA_Start_IT+0x4c0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_DMA_Start_IT+0x4c4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a64      	ldr	r2, [pc, #400]	@ (8004da4 <HAL_DMA_Start_IT+0x4c8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a62      	ldr	r2, [pc, #392]	@ (8004da8 <HAL_DMA_Start_IT+0x4cc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_DMA_Start_IT+0x350>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a61      	ldr	r2, [pc, #388]	@ (8004dac <HAL_DMA_Start_IT+0x4d0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_DMA_Start_IT+0x354>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_DMA_Start_IT+0x356>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a37      	ldr	r2, [pc, #220]	@ (8004d50 <HAL_DMA_Start_IT+0x474>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d04a      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a36      	ldr	r2, [pc, #216]	@ (8004d54 <HAL_DMA_Start_IT+0x478>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d045      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a34      	ldr	r2, [pc, #208]	@ (8004d58 <HAL_DMA_Start_IT+0x47c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d040      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a33      	ldr	r2, [pc, #204]	@ (8004d5c <HAL_DMA_Start_IT+0x480>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a31      	ldr	r2, [pc, #196]	@ (8004d60 <HAL_DMA_Start_IT+0x484>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a30      	ldr	r2, [pc, #192]	@ (8004d64 <HAL_DMA_Start_IT+0x488>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d031      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2e      	ldr	r2, [pc, #184]	@ (8004d68 <HAL_DMA_Start_IT+0x48c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02c      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d6c <HAL_DMA_Start_IT+0x490>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d027      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d70 <HAL_DMA_Start_IT+0x494>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2a      	ldr	r2, [pc, #168]	@ (8004d74 <HAL_DMA_Start_IT+0x498>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a28      	ldr	r2, [pc, #160]	@ (8004d78 <HAL_DMA_Start_IT+0x49c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a27      	ldr	r2, [pc, #156]	@ (8004d7c <HAL_DMA_Start_IT+0x4a0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a25      	ldr	r2, [pc, #148]	@ (8004d80 <HAL_DMA_Start_IT+0x4a4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a24      	ldr	r2, [pc, #144]	@ (8004d84 <HAL_DMA_Start_IT+0x4a8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	@ (8004d88 <HAL_DMA_Start_IT+0x4ac>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_DMA_Start_IT+0x430>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_DMA_Start_IT+0x4b0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <HAL_DMA_Start_IT+0x442>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e012      	b.n	8004d44 <HAL_DMA_Start_IT+0x468>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e009      	b.n	8004d44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40020010 	.word	0x40020010
 8004d54:	40020028 	.word	0x40020028
 8004d58:	40020040 	.word	0x40020040
 8004d5c:	40020058 	.word	0x40020058
 8004d60:	40020070 	.word	0x40020070
 8004d64:	40020088 	.word	0x40020088
 8004d68:	400200a0 	.word	0x400200a0
 8004d6c:	400200b8 	.word	0x400200b8
 8004d70:	40020410 	.word	0x40020410
 8004d74:	40020428 	.word	0x40020428
 8004d78:	40020440 	.word	0x40020440
 8004d7c:	40020458 	.word	0x40020458
 8004d80:	40020470 	.word	0x40020470
 8004d84:	40020488 	.word	0x40020488
 8004d88:	400204a0 	.word	0x400204a0
 8004d8c:	400204b8 	.word	0x400204b8
 8004d90:	58025408 	.word	0x58025408
 8004d94:	5802541c 	.word	0x5802541c
 8004d98:	58025430 	.word	0x58025430
 8004d9c:	58025444 	.word	0x58025444
 8004da0:	58025458 	.word	0x58025458
 8004da4:	5802546c 	.word	0x5802546c
 8004da8:	58025480 	.word	0x58025480
 8004dac:	58025494 	.word	0x58025494

08004db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004db8:	f7ff f8e8 	bl	8003f8c <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e2dc      	b.n	8005382 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d008      	beq.n	8004de6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	@ 0x80
 8004dd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e2cd      	b.n	8005382 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a76      	ldr	r2, [pc, #472]	@ (8004fc4 <HAL_DMA_Abort+0x214>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a74      	ldr	r2, [pc, #464]	@ (8004fc8 <HAL_DMA_Abort+0x218>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a73      	ldr	r2, [pc, #460]	@ (8004fcc <HAL_DMA_Abort+0x21c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a71      	ldr	r2, [pc, #452]	@ (8004fd0 <HAL_DMA_Abort+0x220>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a70      	ldr	r2, [pc, #448]	@ (8004fd4 <HAL_DMA_Abort+0x224>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd8 <HAL_DMA_Abort+0x228>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6d      	ldr	r2, [pc, #436]	@ (8004fdc <HAL_DMA_Abort+0x22c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6b      	ldr	r2, [pc, #428]	@ (8004fe0 <HAL_DMA_Abort+0x230>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe4 <HAL_DMA_Abort+0x234>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a68      	ldr	r2, [pc, #416]	@ (8004fe8 <HAL_DMA_Abort+0x238>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a67      	ldr	r2, [pc, #412]	@ (8004fec <HAL_DMA_Abort+0x23c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a65      	ldr	r2, [pc, #404]	@ (8004ff0 <HAL_DMA_Abort+0x240>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a64      	ldr	r2, [pc, #400]	@ (8004ff4 <HAL_DMA_Abort+0x244>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a62      	ldr	r2, [pc, #392]	@ (8004ff8 <HAL_DMA_Abort+0x248>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a61      	ldr	r2, [pc, #388]	@ (8004ffc <HAL_DMA_Abort+0x24c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_Abort+0xd6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a5f      	ldr	r2, [pc, #380]	@ (8005000 <HAL_DMA_Abort+0x250>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_DMA_Abort+0xda>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_DMA_Abort+0xdc>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 021e 	bic.w	r2, r2, #30
 8004e9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e00a      	b.n	8004ece <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 020e 	bic.w	r2, r2, #14
 8004ec6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc4 <HAL_DMA_Abort+0x214>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d072      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc8 <HAL_DMA_Abort+0x218>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d06d      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a39      	ldr	r2, [pc, #228]	@ (8004fcc <HAL_DMA_Abort+0x21c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d068      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a37      	ldr	r2, [pc, #220]	@ (8004fd0 <HAL_DMA_Abort+0x220>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d063      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a36      	ldr	r2, [pc, #216]	@ (8004fd4 <HAL_DMA_Abort+0x224>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d05e      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a34      	ldr	r2, [pc, #208]	@ (8004fd8 <HAL_DMA_Abort+0x228>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d059      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a33      	ldr	r2, [pc, #204]	@ (8004fdc <HAL_DMA_Abort+0x22c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d054      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a31      	ldr	r2, [pc, #196]	@ (8004fe0 <HAL_DMA_Abort+0x230>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04f      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a30      	ldr	r2, [pc, #192]	@ (8004fe4 <HAL_DMA_Abort+0x234>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d04a      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe8 <HAL_DMA_Abort+0x238>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d045      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2d      	ldr	r2, [pc, #180]	@ (8004fec <HAL_DMA_Abort+0x23c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d040      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <HAL_DMA_Abort+0x240>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d03b      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff4 <HAL_DMA_Abort+0x244>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d036      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a28      	ldr	r2, [pc, #160]	@ (8004ff8 <HAL_DMA_Abort+0x248>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a27      	ldr	r2, [pc, #156]	@ (8004ffc <HAL_DMA_Abort+0x24c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d02c      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a25      	ldr	r2, [pc, #148]	@ (8005000 <HAL_DMA_Abort+0x250>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d027      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a24      	ldr	r2, [pc, #144]	@ (8005004 <HAL_DMA_Abort+0x254>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <HAL_DMA_Abort+0x258>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_DMA_Abort+0x25c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	@ (8005010 <HAL_DMA_Abort+0x260>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005014 <HAL_DMA_Abort+0x264>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <HAL_DMA_Abort+0x268>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_DMA_Abort+0x26c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_DMA_Abort+0x20e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <HAL_DMA_Abort+0x270>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d132      	bne.n	8005024 <HAL_DMA_Abort+0x274>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e031      	b.n	8005026 <HAL_DMA_Abort+0x276>
 8004fc2:	bf00      	nop
 8004fc4:	40020010 	.word	0x40020010
 8004fc8:	40020028 	.word	0x40020028
 8004fcc:	40020040 	.word	0x40020040
 8004fd0:	40020058 	.word	0x40020058
 8004fd4:	40020070 	.word	0x40020070
 8004fd8:	40020088 	.word	0x40020088
 8004fdc:	400200a0 	.word	0x400200a0
 8004fe0:	400200b8 	.word	0x400200b8
 8004fe4:	40020410 	.word	0x40020410
 8004fe8:	40020428 	.word	0x40020428
 8004fec:	40020440 	.word	0x40020440
 8004ff0:	40020458 	.word	0x40020458
 8004ff4:	40020470 	.word	0x40020470
 8004ff8:	40020488 	.word	0x40020488
 8004ffc:	400204a0 	.word	0x400204a0
 8005000:	400204b8 	.word	0x400204b8
 8005004:	58025408 	.word	0x58025408
 8005008:	5802541c 	.word	0x5802541c
 800500c:	58025430 	.word	0x58025430
 8005010:	58025444 	.word	0x58025444
 8005014:	58025458 	.word	0x58025458
 8005018:	5802546c 	.word	0x5802546c
 800501c:	58025480 	.word	0x58025480
 8005020:	58025494 	.word	0x58025494
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005038:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6d      	ldr	r2, [pc, #436]	@ (80051f4 <HAL_DMA_Abort+0x444>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6b      	ldr	r2, [pc, #428]	@ (80051f8 <HAL_DMA_Abort+0x448>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6a      	ldr	r2, [pc, #424]	@ (80051fc <HAL_DMA_Abort+0x44c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a68      	ldr	r2, [pc, #416]	@ (8005200 <HAL_DMA_Abort+0x450>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a67      	ldr	r2, [pc, #412]	@ (8005204 <HAL_DMA_Abort+0x454>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a65      	ldr	r2, [pc, #404]	@ (8005208 <HAL_DMA_Abort+0x458>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a64      	ldr	r2, [pc, #400]	@ (800520c <HAL_DMA_Abort+0x45c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a62      	ldr	r2, [pc, #392]	@ (8005210 <HAL_DMA_Abort+0x460>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a61      	ldr	r2, [pc, #388]	@ (8005214 <HAL_DMA_Abort+0x464>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5f      	ldr	r2, [pc, #380]	@ (8005218 <HAL_DMA_Abort+0x468>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5e      	ldr	r2, [pc, #376]	@ (800521c <HAL_DMA_Abort+0x46c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5c      	ldr	r2, [pc, #368]	@ (8005220 <HAL_DMA_Abort+0x470>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005224 <HAL_DMA_Abort+0x474>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a59      	ldr	r2, [pc, #356]	@ (8005228 <HAL_DMA_Abort+0x478>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a58      	ldr	r2, [pc, #352]	@ (800522c <HAL_DMA_Abort+0x47c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_DMA_Abort+0x32a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a56      	ldr	r2, [pc, #344]	@ (8005230 <HAL_DMA_Abort+0x480>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <HAL_DMA_Abort+0x33c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e007      	b.n	80050fc <HAL_DMA_Abort+0x34c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80050fc:	e013      	b.n	8005126 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050fe:	f7fe ff45 	bl	8003f8c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b05      	cmp	r3, #5
 800510a:	d90c      	bls.n	8005126 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2203      	movs	r2, #3
 8005116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e12d      	b.n	8005382 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2f      	ldr	r2, [pc, #188]	@ (80051f4 <HAL_DMA_Abort+0x444>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04a      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2d      	ldr	r2, [pc, #180]	@ (80051f8 <HAL_DMA_Abort+0x448>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d045      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2c      	ldr	r2, [pc, #176]	@ (80051fc <HAL_DMA_Abort+0x44c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d040      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2a      	ldr	r2, [pc, #168]	@ (8005200 <HAL_DMA_Abort+0x450>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d03b      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a29      	ldr	r2, [pc, #164]	@ (8005204 <HAL_DMA_Abort+0x454>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d036      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a27      	ldr	r2, [pc, #156]	@ (8005208 <HAL_DMA_Abort+0x458>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a26      	ldr	r2, [pc, #152]	@ (800520c <HAL_DMA_Abort+0x45c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d02c      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a24      	ldr	r2, [pc, #144]	@ (8005210 <HAL_DMA_Abort+0x460>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a23      	ldr	r2, [pc, #140]	@ (8005214 <HAL_DMA_Abort+0x464>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <HAL_DMA_Abort+0x468>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01d      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a20      	ldr	r2, [pc, #128]	@ (800521c <HAL_DMA_Abort+0x46c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005220 <HAL_DMA_Abort+0x470>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005224 <HAL_DMA_Abort+0x474>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_DMA_Abort+0x478>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	@ (800522c <HAL_DMA_Abort+0x47c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_DMA_Abort+0x422>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <HAL_DMA_Abort+0x480>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_DMA_Abort+0x426>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_DMA_Abort+0x428>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02b      	beq.n	8005234 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	223f      	movs	r2, #63	@ 0x3f
 80051ec:	409a      	lsls	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	e02a      	b.n	800524a <HAL_DMA_Abort+0x49a>
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020028 	.word	0x40020028
 80051fc:	40020040 	.word	0x40020040
 8005200:	40020058 	.word	0x40020058
 8005204:	40020070 	.word	0x40020070
 8005208:	40020088 	.word	0x40020088
 800520c:	400200a0 	.word	0x400200a0
 8005210:	400200b8 	.word	0x400200b8
 8005214:	40020410 	.word	0x40020410
 8005218:	40020428 	.word	0x40020428
 800521c:	40020440 	.word	0x40020440
 8005220:	40020458 	.word	0x40020458
 8005224:	40020470 	.word	0x40020470
 8005228:	40020488 	.word	0x40020488
 800522c:	400204a0 	.word	0x400204a0
 8005230:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005238:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4f      	ldr	r2, [pc, #316]	@ (800538c <HAL_DMA_Abort+0x5dc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d072      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a4d      	ldr	r2, [pc, #308]	@ (8005390 <HAL_DMA_Abort+0x5e0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d06d      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a4c      	ldr	r2, [pc, #304]	@ (8005394 <HAL_DMA_Abort+0x5e4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d068      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a4a      	ldr	r2, [pc, #296]	@ (8005398 <HAL_DMA_Abort+0x5e8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d063      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a49      	ldr	r2, [pc, #292]	@ (800539c <HAL_DMA_Abort+0x5ec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d05e      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a47      	ldr	r2, [pc, #284]	@ (80053a0 <HAL_DMA_Abort+0x5f0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d059      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a46      	ldr	r2, [pc, #280]	@ (80053a4 <HAL_DMA_Abort+0x5f4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d054      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a44      	ldr	r2, [pc, #272]	@ (80053a8 <HAL_DMA_Abort+0x5f8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04f      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a43      	ldr	r2, [pc, #268]	@ (80053ac <HAL_DMA_Abort+0x5fc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a41      	ldr	r2, [pc, #260]	@ (80053b0 <HAL_DMA_Abort+0x600>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a40      	ldr	r2, [pc, #256]	@ (80053b4 <HAL_DMA_Abort+0x604>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3e      	ldr	r2, [pc, #248]	@ (80053b8 <HAL_DMA_Abort+0x608>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a3d      	ldr	r2, [pc, #244]	@ (80053bc <HAL_DMA_Abort+0x60c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3b      	ldr	r2, [pc, #236]	@ (80053c0 <HAL_DMA_Abort+0x610>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <HAL_DMA_Abort+0x614>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a38      	ldr	r2, [pc, #224]	@ (80053c8 <HAL_DMA_Abort+0x618>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a37      	ldr	r2, [pc, #220]	@ (80053cc <HAL_DMA_Abort+0x61c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <HAL_DMA_Abort+0x620>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a34      	ldr	r2, [pc, #208]	@ (80053d4 <HAL_DMA_Abort+0x624>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a32      	ldr	r2, [pc, #200]	@ (80053d8 <HAL_DMA_Abort+0x628>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <HAL_DMA_Abort+0x62c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <HAL_DMA_Abort+0x630>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2e      	ldr	r2, [pc, #184]	@ (80053e4 <HAL_DMA_Abort+0x634>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_Abort+0x58a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2c      	ldr	r2, [pc, #176]	@ (80053e8 <HAL_DMA_Abort+0x638>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_DMA_Abort+0x58e>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_DMA_Abort+0x590>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800534c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005364:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800536e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	58025408 	.word	0x58025408
 80053d0:	5802541c 	.word	0x5802541c
 80053d4:	58025430 	.word	0x58025430
 80053d8:	58025444 	.word	0x58025444
 80053dc:	58025458 	.word	0x58025458
 80053e0:	5802546c 	.word	0x5802546c
 80053e4:	58025480 	.word	0x58025480
 80053e8:	58025494 	.word	0x58025494

080053ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7f      	ldr	r2, [pc, #508]	@ (8005620 <DMA_SetConfig+0x21c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d072      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a7d      	ldr	r2, [pc, #500]	@ (8005624 <DMA_SetConfig+0x220>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d06d      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7c      	ldr	r2, [pc, #496]	@ (8005628 <DMA_SetConfig+0x224>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d068      	beq.n	800550e <DMA_SetConfig+0x10a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7a      	ldr	r2, [pc, #488]	@ (800562c <DMA_SetConfig+0x228>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d063      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a79      	ldr	r2, [pc, #484]	@ (8005630 <DMA_SetConfig+0x22c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d05e      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a77      	ldr	r2, [pc, #476]	@ (8005634 <DMA_SetConfig+0x230>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d059      	beq.n	800550e <DMA_SetConfig+0x10a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a76      	ldr	r2, [pc, #472]	@ (8005638 <DMA_SetConfig+0x234>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d054      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a74      	ldr	r2, [pc, #464]	@ (800563c <DMA_SetConfig+0x238>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04f      	beq.n	800550e <DMA_SetConfig+0x10a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a73      	ldr	r2, [pc, #460]	@ (8005640 <DMA_SetConfig+0x23c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04a      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a71      	ldr	r2, [pc, #452]	@ (8005644 <DMA_SetConfig+0x240>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d045      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a70      	ldr	r2, [pc, #448]	@ (8005648 <DMA_SetConfig+0x244>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d040      	beq.n	800550e <DMA_SetConfig+0x10a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	@ (800564c <DMA_SetConfig+0x248>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d03b      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6d      	ldr	r2, [pc, #436]	@ (8005650 <DMA_SetConfig+0x24c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d036      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a6b      	ldr	r2, [pc, #428]	@ (8005654 <DMA_SetConfig+0x250>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d031      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005658 <DMA_SetConfig+0x254>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d02c      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a68      	ldr	r2, [pc, #416]	@ (800565c <DMA_SetConfig+0x258>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d027      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a67      	ldr	r2, [pc, #412]	@ (8005660 <DMA_SetConfig+0x25c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a65      	ldr	r2, [pc, #404]	@ (8005664 <DMA_SetConfig+0x260>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a64      	ldr	r2, [pc, #400]	@ (8005668 <DMA_SetConfig+0x264>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a62      	ldr	r2, [pc, #392]	@ (800566c <DMA_SetConfig+0x268>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a61      	ldr	r2, [pc, #388]	@ (8005670 <DMA_SetConfig+0x26c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005674 <DMA_SetConfig+0x270>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <DMA_SetConfig+0x10a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005678 <DMA_SetConfig+0x274>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <DMA_SetConfig+0x10a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a5c      	ldr	r2, [pc, #368]	@ (800567c <DMA_SetConfig+0x278>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <DMA_SetConfig+0x10e>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <DMA_SetConfig+0x110>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005520:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005532:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a39      	ldr	r2, [pc, #228]	@ (8005620 <DMA_SetConfig+0x21c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d04a      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a38      	ldr	r2, [pc, #224]	@ (8005624 <DMA_SetConfig+0x220>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d045      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a36      	ldr	r2, [pc, #216]	@ (8005628 <DMA_SetConfig+0x224>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d040      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a35      	ldr	r2, [pc, #212]	@ (800562c <DMA_SetConfig+0x228>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d03b      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a33      	ldr	r2, [pc, #204]	@ (8005630 <DMA_SetConfig+0x22c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d036      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a32      	ldr	r2, [pc, #200]	@ (8005634 <DMA_SetConfig+0x230>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d031      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a30      	ldr	r2, [pc, #192]	@ (8005638 <DMA_SetConfig+0x234>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02c      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2f      	ldr	r2, [pc, #188]	@ (800563c <DMA_SetConfig+0x238>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d027      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2d      	ldr	r2, [pc, #180]	@ (8005640 <DMA_SetConfig+0x23c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d022      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2c      	ldr	r2, [pc, #176]	@ (8005644 <DMA_SetConfig+0x240>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d01d      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <DMA_SetConfig+0x244>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a29      	ldr	r2, [pc, #164]	@ (800564c <DMA_SetConfig+0x248>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <DMA_SetConfig+0x24c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a26      	ldr	r2, [pc, #152]	@ (8005654 <DMA_SetConfig+0x250>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a24      	ldr	r2, [pc, #144]	@ (8005658 <DMA_SetConfig+0x254>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <DMA_SetConfig+0x1d0>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a23      	ldr	r2, [pc, #140]	@ (800565c <DMA_SetConfig+0x258>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d101      	bne.n	80055d8 <DMA_SetConfig+0x1d4>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <DMA_SetConfig+0x1d6>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d059      	beq.n	8005692 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	223f      	movs	r2, #63	@ 0x3f
 80055e8:	409a      	lsls	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b40      	cmp	r3, #64	@ 0x40
 800560c:	d138      	bne.n	8005680 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800561e:	e086      	b.n	800572e <DMA_SetConfig+0x32a>
 8005620:	40020010 	.word	0x40020010
 8005624:	40020028 	.word	0x40020028
 8005628:	40020040 	.word	0x40020040
 800562c:	40020058 	.word	0x40020058
 8005630:	40020070 	.word	0x40020070
 8005634:	40020088 	.word	0x40020088
 8005638:	400200a0 	.word	0x400200a0
 800563c:	400200b8 	.word	0x400200b8
 8005640:	40020410 	.word	0x40020410
 8005644:	40020428 	.word	0x40020428
 8005648:	40020440 	.word	0x40020440
 800564c:	40020458 	.word	0x40020458
 8005650:	40020470 	.word	0x40020470
 8005654:	40020488 	.word	0x40020488
 8005658:	400204a0 	.word	0x400204a0
 800565c:	400204b8 	.word	0x400204b8
 8005660:	58025408 	.word	0x58025408
 8005664:	5802541c 	.word	0x5802541c
 8005668:	58025430 	.word	0x58025430
 800566c:	58025444 	.word	0x58025444
 8005670:	58025458 	.word	0x58025458
 8005674:	5802546c 	.word	0x5802546c
 8005678:	58025480 	.word	0x58025480
 800567c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
}
 8005690:	e04d      	b.n	800572e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a29      	ldr	r2, [pc, #164]	@ (800573c <DMA_SetConfig+0x338>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a27      	ldr	r2, [pc, #156]	@ (8005740 <DMA_SetConfig+0x33c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a26      	ldr	r2, [pc, #152]	@ (8005744 <DMA_SetConfig+0x340>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a24      	ldr	r2, [pc, #144]	@ (8005748 <DMA_SetConfig+0x344>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a23      	ldr	r2, [pc, #140]	@ (800574c <DMA_SetConfig+0x348>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a21      	ldr	r2, [pc, #132]	@ (8005750 <DMA_SetConfig+0x34c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a20      	ldr	r2, [pc, #128]	@ (8005754 <DMA_SetConfig+0x350>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <DMA_SetConfig+0x2de>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005758 <DMA_SetConfig+0x354>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <DMA_SetConfig+0x2e2>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <DMA_SetConfig+0x2e4>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2201      	movs	r2, #1
 80056f6:	409a      	lsls	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	d108      	bne.n	800571e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	60da      	str	r2, [r3, #12]
}
 800571c:	e007      	b.n	800572e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	58025408 	.word	0x58025408
 8005740:	5802541c 	.word	0x5802541c
 8005744:	58025430 	.word	0x58025430
 8005748:	58025444 	.word	0x58025444
 800574c:	58025458 	.word	0x58025458
 8005750:	5802546c 	.word	0x5802546c
 8005754:	58025480 	.word	0x58025480
 8005758:	58025494 	.word	0x58025494

0800575c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a42      	ldr	r2, [pc, #264]	@ (8005874 <DMA_CalcBaseAndBitshift+0x118>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d04a      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	@ (8005878 <DMA_CalcBaseAndBitshift+0x11c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d045      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3f      	ldr	r2, [pc, #252]	@ (800587c <DMA_CalcBaseAndBitshift+0x120>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d040      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3e      	ldr	r2, [pc, #248]	@ (8005880 <DMA_CalcBaseAndBitshift+0x124>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d03b      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3c      	ldr	r2, [pc, #240]	@ (8005884 <DMA_CalcBaseAndBitshift+0x128>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d036      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3b      	ldr	r2, [pc, #236]	@ (8005888 <DMA_CalcBaseAndBitshift+0x12c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d031      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a39      	ldr	r2, [pc, #228]	@ (800588c <DMA_CalcBaseAndBitshift+0x130>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02c      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a38      	ldr	r2, [pc, #224]	@ (8005890 <DMA_CalcBaseAndBitshift+0x134>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d027      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a36      	ldr	r2, [pc, #216]	@ (8005894 <DMA_CalcBaseAndBitshift+0x138>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d022      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a35      	ldr	r2, [pc, #212]	@ (8005898 <DMA_CalcBaseAndBitshift+0x13c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d01d      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a33      	ldr	r2, [pc, #204]	@ (800589c <DMA_CalcBaseAndBitshift+0x140>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a32      	ldr	r2, [pc, #200]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x144>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x148>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2f      	ldr	r2, [pc, #188]	@ (80058a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2d      	ldr	r2, [pc, #180]	@ (80058ac <DMA_CalcBaseAndBitshift+0x150>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <DMA_CalcBaseAndBitshift+0xa8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	@ (80058b0 <DMA_CalcBaseAndBitshift+0x154>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <DMA_CalcBaseAndBitshift+0xac>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <DMA_CalcBaseAndBitshift+0xae>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d024      	beq.n	8005858 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	3b10      	subs	r3, #16
 8005816:	4a27      	ldr	r2, [pc, #156]	@ (80058b4 <DMA_CalcBaseAndBitshift+0x158>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	4a24      	ldr	r2, [pc, #144]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005828:	5cd3      	ldrb	r3, [r2, r3]
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d908      	bls.n	8005848 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <DMA_CalcBaseAndBitshift+0x160>)
 800583e:	4013      	ands	r3, r2
 8005840:	1d1a      	adds	r2, r3, #4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	659a      	str	r2, [r3, #88]	@ 0x58
 8005846:	e00d      	b.n	8005864 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	4b1b      	ldr	r3, [pc, #108]	@ (80058bc <DMA_CalcBaseAndBitshift+0x160>)
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6593      	str	r3, [r2, #88]	@ 0x58
 8005856:	e005      	b.n	8005864 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	aaaaaaab 	.word	0xaaaaaaab
 80058b8:	080118e8 	.word	0x080118e8
 80058bc:	fffffc00 	.word	0xfffffc00

080058c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d120      	bne.n	8005916 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d858      	bhi.n	800598e <DMA_CheckFifoParam+0xce>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <DMA_CheckFifoParam+0x24>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	08005907 	.word	0x08005907
 80058ec:	080058f5 	.word	0x080058f5
 80058f0:	0800598f 	.word	0x0800598f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d048      	beq.n	8005992 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005904:	e045      	b.n	8005992 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800590e:	d142      	bne.n	8005996 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005914:	e03f      	b.n	8005996 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591e:	d123      	bne.n	8005968 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	2b03      	cmp	r3, #3
 8005926:	d838      	bhi.n	800599a <DMA_CheckFifoParam+0xda>
 8005928:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <DMA_CheckFifoParam+0x70>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005941 	.word	0x08005941
 8005934:	08005947 	.word	0x08005947
 8005938:	08005941 	.word	0x08005941
 800593c:	08005959 	.word	0x08005959
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
        break;
 8005944:	e030      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d025      	beq.n	800599e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005956:	e022      	b.n	800599e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005960:	d11f      	bne.n	80059a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005966:	e01c      	b.n	80059a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	2b02      	cmp	r3, #2
 800596e:	d902      	bls.n	8005976 <DMA_CheckFifoParam+0xb6>
 8005970:	2b03      	cmp	r3, #3
 8005972:	d003      	beq.n	800597c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005974:	e018      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
        break;
 800597a:	e015      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
    break;
 800598c:	e00b      	b.n	80059a6 <DMA_CheckFifoParam+0xe6>
        break;
 800598e:	bf00      	nop
 8005990:	e00a      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005992:	bf00      	nop
 8005994:	e008      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005996:	bf00      	nop
 8005998:	e006      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        break;
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        break;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
        break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <DMA_CheckFifoParam+0xe8>
    break;
 80059a6:	bf00      	nop
    }
  }

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop

080059b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a38      	ldr	r2, [pc, #224]	@ (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d022      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a36      	ldr	r2, [pc, #216]	@ (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01d      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a35      	ldr	r2, [pc, #212]	@ (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d018      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a33      	ldr	r2, [pc, #204]	@ (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a32      	ldr	r2, [pc, #200]	@ (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a30      	ldr	r2, [pc, #192]	@ (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3b08      	subs	r3, #8
 8005a28:	4a28      	ldr	r2, [pc, #160]	@ (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4b26      	ldr	r3, [pc, #152]	@ (8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a24      	ldr	r2, [pc, #144]	@ (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a54:	e024      	b.n	8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	3b10      	subs	r3, #16
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d806      	bhi.n	8005a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d902      	bls.n	8005a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4b18      	ldr	r3, [pc, #96]	@ (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2201      	movs	r2, #1
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	58025408 	.word	0x58025408
 8005ab0:	5802541c 	.word	0x5802541c
 8005ab4:	58025430 	.word	0x58025430
 8005ab8:	58025444 	.word	0x58025444
 8005abc:	58025458 	.word	0x58025458
 8005ac0:	5802546c 	.word	0x5802546c
 8005ac4:	58025480 	.word	0x58025480
 8005ac8:	58025494 	.word	0x58025494
 8005acc:	cccccccd 	.word	0xcccccccd
 8005ad0:	16009600 	.word	0x16009600
 8005ad4:	58025880 	.word	0x58025880
 8005ad8:	aaaaaaab 	.word	0xaaaaaaab
 8005adc:	400204b8 	.word	0x400204b8
 8005ae0:	4002040f 	.word	0x4002040f
 8005ae4:	10008200 	.word	0x10008200
 8005ae8:	40020880 	.word	0x40020880

08005aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d04a      	beq.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d847      	bhi.n	8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	@ (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a24      	ldr	r2, [pc, #144]	@ (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01d      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a22      	ldr	r2, [pc, #136]	@ (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	@ (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d101      	bne.n	8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4b17      	ldr	r3, [pc, #92]	@ (8005bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a15      	ldr	r2, [pc, #84]	@ (8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b74:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b76:	e009      	b.n	8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4b14      	ldr	r3, [pc, #80]	@ (8005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a11      	ldr	r2, [pc, #68]	@ (8005bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	2201      	movs	r2, #1
 8005b92:	409a      	lsls	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494
 8005bc4:	1600963f 	.word	0x1600963f
 8005bc8:	58025940 	.word	0x58025940
 8005bcc:	1000823f 	.word	0x1000823f
 8005bd0:	40020940 	.word	0x40020940

08005bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b089      	sub	sp, #36	@ 0x24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005be2:	4b89      	ldr	r3, [pc, #548]	@ (8005e08 <HAL_GPIO_Init+0x234>)
 8005be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005be6:	e194      	b.n	8005f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	2101      	movs	r1, #1
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8186 	beq.w	8005f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d005      	beq.n	8005c18 <HAL_GPIO_Init+0x44>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d130      	bne.n	8005c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	2203      	movs	r2, #3
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c4e:	2201      	movs	r2, #1
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0201 	and.w	r2, r3, #1
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d017      	beq.n	8005cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d123      	bne.n	8005d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	08da      	lsrs	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3208      	adds	r2, #8
 8005cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	220f      	movs	r2, #15
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	08da      	lsrs	r2, r3, #3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3208      	adds	r2, #8
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	2203      	movs	r2, #3
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0203 	and.w	r2, r3, #3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80e0 	beq.w	8005f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <HAL_GPIO_Init+0x238>)
 8005d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d52:	4a2e      	ldr	r2, [pc, #184]	@ (8005e0c <HAL_GPIO_Init+0x238>)
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e0c <HAL_GPIO_Init+0x238>)
 8005d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d6a:	4a29      	ldr	r2, [pc, #164]	@ (8005e10 <HAL_GPIO_Init+0x23c>)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	3302      	adds	r3, #2
 8005d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	220f      	movs	r2, #15
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a20      	ldr	r2, [pc, #128]	@ (8005e14 <HAL_GPIO_Init+0x240>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d052      	beq.n	8005e3c <HAL_GPIO_Init+0x268>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_GPIO_Init+0x244>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d031      	beq.n	8005e02 <HAL_GPIO_Init+0x22e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <HAL_GPIO_Init+0x248>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d02b      	beq.n	8005dfe <HAL_GPIO_Init+0x22a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e20 <HAL_GPIO_Init+0x24c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d025      	beq.n	8005dfa <HAL_GPIO_Init+0x226>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <HAL_GPIO_Init+0x250>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01f      	beq.n	8005df6 <HAL_GPIO_Init+0x222>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <HAL_GPIO_Init+0x254>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d019      	beq.n	8005df2 <HAL_GPIO_Init+0x21e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_GPIO_Init+0x258>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_GPIO_Init+0x21a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <HAL_GPIO_Init+0x25c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00d      	beq.n	8005dea <HAL_GPIO_Init+0x216>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <HAL_GPIO_Init+0x260>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <HAL_GPIO_Init+0x212>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <HAL_GPIO_Init+0x264>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_GPIO_Init+0x20e>
 8005dde:	2309      	movs	r3, #9
 8005de0:	e02d      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005de2:	230a      	movs	r3, #10
 8005de4:	e02b      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005de6:	2308      	movs	r3, #8
 8005de8:	e029      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005dea:	2307      	movs	r3, #7
 8005dec:	e027      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005dee:	2306      	movs	r3, #6
 8005df0:	e025      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005df2:	2305      	movs	r3, #5
 8005df4:	e023      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005df6:	2304      	movs	r3, #4
 8005df8:	e021      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e01f      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e01d      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e01b      	b.n	8005e3e <HAL_GPIO_Init+0x26a>
 8005e06:	bf00      	nop
 8005e08:	58000080 	.word	0x58000080
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	58000400 	.word	0x58000400
 8005e14:	58020000 	.word	0x58020000
 8005e18:	58020400 	.word	0x58020400
 8005e1c:	58020800 	.word	0x58020800
 8005e20:	58020c00 	.word	0x58020c00
 8005e24:	58021000 	.word	0x58021000
 8005e28:	58021400 	.word	0x58021400
 8005e2c:	58021800 	.word	0x58021800
 8005e30:	58021c00 	.word	0x58021c00
 8005e34:	58022000 	.word	0x58022000
 8005e38:	58022400 	.word	0x58022400
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	f002 0203 	and.w	r2, r2, #3
 8005e44:	0092      	lsls	r2, r2, #2
 8005e46:	4093      	lsls	r3, r2
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e4e:	4938      	ldr	r1, [pc, #224]	@ (8005f30 <HAL_GPIO_Init+0x35c>)
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	089b      	lsrs	r3, r3, #2
 8005e54:	3302      	adds	r3, #2
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f47f ae63 	bne.w	8005be8 <HAL_GPIO_Init+0x14>
  }
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	3724      	adds	r7, #36	@ 0x24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	58000400 	.word	0x58000400

08005f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f3c:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d00a      	beq.n	8005f5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f48:	4b16      	ldr	r3, [pc, #88]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d001      	beq.n	8005f5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01f      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e01d      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f5e:	4b11      	ldr	r3, [pc, #68]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f023 0207 	bic.w	r2, r3, #7
 8005f66:	490f      	ldr	r1, [pc, #60]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f6e:	f7fe f80d 	bl	8003f8c <HAL_GetTick>
 8005f72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f74:	e009      	b.n	8005f8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f76:	f7fe f809 	bl	8003f8c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f84:	d901      	bls.n	8005f8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e007      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f8a:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f96:	d1ee      	bne.n	8005f76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58024800 	.word	0x58024800

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	@ 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f000 bc48 	b.w	800684c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8088 	beq.w	80060da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fca:	4b99      	ldr	r3, [pc, #612]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd4:	4b96      	ldr	r3, [pc, #600]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d007      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x48>
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	2b18      	cmp	r3, #24
 8005fe4:	d111      	bne.n	800600a <HAL_RCC_OscConfig+0x62>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d10c      	bne.n	800600a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d06d      	beq.n	80060d8 <HAL_RCC_OscConfig+0x130>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d169      	bne.n	80060d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f000 bc21 	b.w	800684c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x7a>
 8006014:	4b86      	ldr	r3, [pc, #536]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a85      	ldr	r2, [pc, #532]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e02e      	b.n	8006080 <HAL_RCC_OscConfig+0xd8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10c      	bne.n	8006044 <HAL_RCC_OscConfig+0x9c>
 800602a:	4b81      	ldr	r3, [pc, #516]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a80      	ldr	r2, [pc, #512]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a7d      	ldr	r2, [pc, #500]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800603c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e01d      	b.n	8006080 <HAL_RCC_OscConfig+0xd8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0xc0>
 800604e:	4b78      	ldr	r3, [pc, #480]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a77      	ldr	r2, [pc, #476]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b75      	ldr	r3, [pc, #468]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a74      	ldr	r2, [pc, #464]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0xd8>
 8006068:	4b71      	ldr	r3, [pc, #452]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a70      	ldr	r2, [pc, #448]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800606e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b6e      	ldr	r3, [pc, #440]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6d      	ldr	r2, [pc, #436]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800607a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fd ff80 	bl	8003f8c <HAL_GetTick>
 800608c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006090:	f7fd ff7c 	bl	8003f8c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	@ 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e3d4      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060a2:	4b63      	ldr	r3, [pc, #396]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0xe8>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fd ff6c 	bl	8003f8c <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fd ff68 	bl	8003f8c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	@ 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e3c0      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060ca:	4b59      	ldr	r3, [pc, #356]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x110>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80ca 	beq.w	800627c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e8:	4b51      	ldr	r3, [pc, #324]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_RCC_OscConfig+0x166>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	2b18      	cmp	r3, #24
 8006102:	d156      	bne.n	80061b2 <HAL_RCC_OscConfig+0x20a>
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d151      	bne.n	80061b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610e:	4b48      	ldr	r3, [pc, #288]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x17e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e392      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006126:	4b42      	ldr	r3, [pc, #264]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0219 	bic.w	r2, r3, #25
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	493f      	ldr	r1, [pc, #252]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fd ff28 	bl	8003f8c <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006140:	f7fd ff24 	bl	8003f8c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e37c      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006152:	4b37      	ldr	r3, [pc, #220]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615e:	f7fd ff45 	bl	8003fec <HAL_GetREVID>
 8006162:	4603      	mov	r3, r0
 8006164:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006168:	4293      	cmp	r3, r2
 800616a:	d817      	bhi.n	800619c <HAL_RCC_OscConfig+0x1f4>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	d108      	bne.n	8006186 <HAL_RCC_OscConfig+0x1de>
 8006174:	4b2e      	ldr	r3, [pc, #184]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800617c:	4a2c      	ldr	r2, [pc, #176]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800617e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006182:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006184:	e07a      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006186:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	031b      	lsls	r3, r3, #12
 8006194:	4926      	ldr	r1, [pc, #152]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006196:	4313      	orrs	r3, r2
 8006198:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800619a:	e06f      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619c:	4b24      	ldr	r3, [pc, #144]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	4921      	ldr	r1, [pc, #132]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061b0:	e064      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d047      	beq.n	800624a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 0219 	bic.w	r2, r3, #25
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	491a      	ldr	r1, [pc, #104]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd fede 	bl	8003f8c <HAL_GetTick>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fd feda 	bl	8003f8c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e332      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e6:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f2:	f7fd fefb 	bl	8003fec <HAL_GetREVID>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d819      	bhi.n	8006234 <HAL_RCC_OscConfig+0x28c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	d108      	bne.n	800621a <HAL_RCC_OscConfig+0x272>
 8006208:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006210:	4a07      	ldr	r2, [pc, #28]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 8006212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006216:	6053      	str	r3, [r2, #4]
 8006218:	e030      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	031b      	lsls	r3, r3, #12
 8006228:	4901      	ldr	r1, [pc, #4]	@ (8006230 <HAL_RCC_OscConfig+0x288>)
 800622a:	4313      	orrs	r3, r2
 800622c:	604b      	str	r3, [r1, #4]
 800622e:	e025      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
 8006230:	58024400 	.word	0x58024400
 8006234:	4b9a      	ldr	r3, [pc, #616]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	4997      	ldr	r1, [pc, #604]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006244:	4313      	orrs	r3, r2
 8006246:	604b      	str	r3, [r1, #4]
 8006248:	e018      	b.n	800627c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624a:	4b95      	ldr	r3, [pc, #596]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a94      	ldr	r2, [pc, #592]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fd fe99 	bl	8003f8c <HAL_GetTick>
 800625a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625e:	f7fd fe95 	bl	8003f8c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e2ed      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006270:	4b8b      	ldr	r3, [pc, #556]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f0      	bne.n	800625e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80a9 	beq.w	80063dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800628a:	4b85      	ldr	r3, [pc, #532]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006292:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006294:	4b82      	ldr	r3, [pc, #520]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d007      	beq.n	80062b0 <HAL_RCC_OscConfig+0x308>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b18      	cmp	r3, #24
 80062a4:	d13a      	bne.n	800631c <HAL_RCC_OscConfig+0x374>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d135      	bne.n	800631c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062b0:	4b7b      	ldr	r3, [pc, #492]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_OscConfig+0x320>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e2c1      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062c8:	f7fd fe90 	bl	8003fec <HAL_GetREVID>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d817      	bhi.n	8006306 <HAL_RCC_OscConfig+0x35e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d108      	bne.n	80062f0 <HAL_RCC_OscConfig+0x348>
 80062de:	4b70      	ldr	r3, [pc, #448]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062e6:	4a6e      	ldr	r2, [pc, #440]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80062e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ee:	e075      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062f0:	4b6b      	ldr	r3, [pc, #428]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	069b      	lsls	r3, r3, #26
 80062fe:	4968      	ldr	r1, [pc, #416]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006300:	4313      	orrs	r3, r2
 8006302:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006304:	e06a      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006306:	4b66      	ldr	r3, [pc, #408]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	4962      	ldr	r1, [pc, #392]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006316:	4313      	orrs	r3, r2
 8006318:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800631a:	e05f      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d042      	beq.n	80063aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006324:	4b5e      	ldr	r3, [pc, #376]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a5d      	ldr	r2, [pc, #372]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800632a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fd fe2c 	bl	8003f8c <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006338:	f7fd fe28 	bl	8003f8c <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e280      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800634a:	4b55      	ldr	r3, [pc, #340]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006356:	f7fd fe49 	bl	8003fec <HAL_GetREVID>
 800635a:	4603      	mov	r3, r0
 800635c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006360:	4293      	cmp	r3, r2
 8006362:	d817      	bhi.n	8006394 <HAL_RCC_OscConfig+0x3ec>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	2b20      	cmp	r3, #32
 800636a:	d108      	bne.n	800637e <HAL_RCC_OscConfig+0x3d6>
 800636c:	4b4c      	ldr	r3, [pc, #304]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006374:	4a4a      	ldr	r2, [pc, #296]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006376:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800637a:	6053      	str	r3, [r2, #4]
 800637c:	e02e      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
 800637e:	4b48      	ldr	r3, [pc, #288]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	069b      	lsls	r3, r3, #26
 800638c:	4944      	ldr	r1, [pc, #272]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800638e:	4313      	orrs	r3, r2
 8006390:	604b      	str	r3, [r1, #4]
 8006392:	e023      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
 8006394:	4b42      	ldr	r3, [pc, #264]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	061b      	lsls	r3, r3, #24
 80063a2:	493f      	ldr	r1, [pc, #252]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60cb      	str	r3, [r1, #12]
 80063a8:	e018      	b.n	80063dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063aa:	4b3d      	ldr	r3, [pc, #244]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a3c      	ldr	r2, [pc, #240]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fd fde9 	bl	8003f8c <HAL_GetTick>
 80063ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063be:	f7fd fde5 	bl	8003f8c <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e23d      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063d0:	4b33      	ldr	r3, [pc, #204]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d036      	beq.n	8006456 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f0:	4b2b      	ldr	r3, [pc, #172]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f4:	4a2a      	ldr	r2, [pc, #168]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fd fdc6 	bl	8003f8c <HAL_GetTick>
 8006400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006404:	f7fd fdc2 	bl	8003f8c <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e21a      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006416:	4b22      	ldr	r3, [pc, #136]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x45c>
 8006422:	e018      	b.n	8006456 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006424:	4b1e      	ldr	r3, [pc, #120]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fd fdac 	bl	8003f8c <HAL_GetTick>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006438:	f7fd fda8 	bl	8003f8c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e200      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800644a:	4b15      	ldr	r3, [pc, #84]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800644c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d039      	beq.n	80064d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800646a:	4b0d      	ldr	r3, [pc, #52]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a0c      	ldr	r2, [pc, #48]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006474:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006476:	f7fd fd89 	bl	8003f8c <HAL_GetTick>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800647e:	f7fd fd85 	bl	8003f8c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e1dd      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <HAL_RCC_OscConfig+0x4f8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f0      	beq.n	800647e <HAL_RCC_OscConfig+0x4d6>
 800649c:	e01b      	b.n	80064d6 <HAL_RCC_OscConfig+0x52e>
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a4:	4b9b      	ldr	r3, [pc, #620]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a9a      	ldr	r2, [pc, #616]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80064aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064b0:	f7fd fd6c 	bl	8003f8c <HAL_GetTick>
 80064b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064b8:	f7fd fd68 	bl	8003f8c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e1c0      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064ca:	4b92      	ldr	r3, [pc, #584]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8081 	beq.w	80065e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006718 <HAL_RCC_OscConfig+0x770>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a8b      	ldr	r2, [pc, #556]	@ (8006718 <HAL_RCC_OscConfig+0x770>)
 80064ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f0:	f7fd fd4c 	bl	8003f8c <HAL_GetTick>
 80064f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f8:	f7fd fd48 	bl	8003f8c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	@ 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e1a0      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800650a:	4b83      	ldr	r3, [pc, #524]	@ (8006718 <HAL_RCC_OscConfig+0x770>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d106      	bne.n	800652c <HAL_RCC_OscConfig+0x584>
 800651e:	4b7d      	ldr	r3, [pc, #500]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a7c      	ldr	r2, [pc, #496]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
 800652a:	e02d      	b.n	8006588 <HAL_RCC_OscConfig+0x5e0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10c      	bne.n	800654e <HAL_RCC_OscConfig+0x5a6>
 8006534:	4b77      	ldr	r3, [pc, #476]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006538:	4a76      	ldr	r2, [pc, #472]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006540:	4b74      	ldr	r3, [pc, #464]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	4a73      	ldr	r2, [pc, #460]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006546:	f023 0304 	bic.w	r3, r3, #4
 800654a:	6713      	str	r3, [r2, #112]	@ 0x70
 800654c:	e01c      	b.n	8006588 <HAL_RCC_OscConfig+0x5e0>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b05      	cmp	r3, #5
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0x5c8>
 8006556:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655a:	4a6e      	ldr	r2, [pc, #440]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800655c:	f043 0304 	orr.w	r3, r3, #4
 8006560:	6713      	str	r3, [r2, #112]	@ 0x70
 8006562:	4b6c      	ldr	r3, [pc, #432]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006566:	4a6b      	ldr	r2, [pc, #428]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6713      	str	r3, [r2, #112]	@ 0x70
 800656e:	e00b      	b.n	8006588 <HAL_RCC_OscConfig+0x5e0>
 8006570:	4b68      	ldr	r3, [pc, #416]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006574:	4a67      	ldr	r2, [pc, #412]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	6713      	str	r3, [r2, #112]	@ 0x70
 800657c:	4b65      	ldr	r3, [pc, #404]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800657e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006580:	4a64      	ldr	r2, [pc, #400]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006582:	f023 0304 	bic.w	r3, r3, #4
 8006586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006590:	f7fd fcfc 	bl	8003f8c <HAL_GetTick>
 8006594:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006598:	f7fd fcf8 	bl	8003f8c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e14e      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065ae:	4b59      	ldr	r3, [pc, #356]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ee      	beq.n	8006598 <HAL_RCC_OscConfig+0x5f0>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065bc:	f7fd fce6 	bl	8003f8c <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065c2:	e00a      	b.n	80065da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c4:	f7fd fce2 	bl	8003f8c <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e138      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065da:	4b4e      	ldr	r3, [pc, #312]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1ee      	bne.n	80065c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 812d 	beq.w	800684a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065f0:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065f8:	2b18      	cmp	r3, #24
 80065fa:	f000 80bd 	beq.w	8006778 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	2b02      	cmp	r3, #2
 8006604:	f040 809e 	bne.w	8006744 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b42      	ldr	r3, [pc, #264]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a41      	ldr	r2, [pc, #260]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fd fcba 	bl	8003f8c <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fd fcb6 	bl	8003f8c <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e10e      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800662e:	4b39      	ldr	r3, [pc, #228]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800663a:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800663c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800663e:	4b37      	ldr	r3, [pc, #220]	@ (800671c <HAL_RCC_OscConfig+0x774>)
 8006640:	4013      	ands	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800664a:	0112      	lsls	r2, r2, #4
 800664c:	430a      	orrs	r2, r1
 800664e:	4931      	ldr	r1, [pc, #196]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	628b      	str	r3, [r1, #40]	@ 0x28
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	3b01      	subs	r3, #1
 800665a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006662:	3b01      	subs	r3, #1
 8006664:	025b      	lsls	r3, r3, #9
 8006666:	b29b      	uxth	r3, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	3b01      	subs	r3, #1
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006684:	4923      	ldr	r1, [pc, #140]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800668a:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	4a21      	ldr	r2, [pc, #132]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006696:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800669a:	4b21      	ldr	r3, [pc, #132]	@ (8006720 <HAL_RCC_OscConfig+0x778>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066a2:	00d2      	lsls	r2, r2, #3
 80066a4:	491b      	ldr	r1, [pc, #108]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ae:	f023 020c 	bic.w	r2, r3, #12
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	4917      	ldr	r1, [pc, #92]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066bc:	4b15      	ldr	r3, [pc, #84]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	f023 0202 	bic.w	r2, r3, #2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c8:	4912      	ldr	r1, [pc, #72]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066ce:	4b11      	ldr	r3, [pc, #68]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d2:	4a10      	ldr	r2, [pc, #64]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	4a0d      	ldr	r2, [pc, #52]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80066f2:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a07      	ldr	r2, [pc, #28]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066fe:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <HAL_RCC_OscConfig+0x76c>)
 8006704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fd fc3f 	bl	8003f8c <HAL_GetTick>
 800670e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006710:	e011      	b.n	8006736 <HAL_RCC_OscConfig+0x78e>
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	58024800 	.word	0x58024800
 800671c:	fffffc0c 	.word	0xfffffc0c
 8006720:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fd fc32 	bl	8003f8c <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e08a      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006736:	4b47      	ldr	r3, [pc, #284]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x77c>
 8006742:	e082      	b.n	800684a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006744:	4b43      	ldr	r3, [pc, #268]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a42      	ldr	r2, [pc, #264]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fd fc1c 	bl	8003f8c <HAL_GetTick>
 8006754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006758:	f7fd fc18 	bl	8003f8c <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e070      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800676a:	4b3a      	ldr	r3, [pc, #232]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x7b0>
 8006776:	e068      	b.n	800684a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006778:	4b36      	ldr	r3, [pc, #216]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800677e:	4b35      	ldr	r3, [pc, #212]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006782:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	2b01      	cmp	r3, #1
 800678a:	d031      	beq.n	80067f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f003 0203 	and.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006796:	429a      	cmp	r2, r3
 8006798:	d12a      	bne.n	80067f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d122      	bne.n	80067f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d11a      	bne.n	80067f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	0a5b      	lsrs	r3, r3, #9
 80067be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d111      	bne.n	80067f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067da:	429a      	cmp	r2, r3
 80067dc:	d108      	bne.n	80067f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d001      	beq.n	80067f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e02b      	b.n	800684c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80067f4:	4b17      	ldr	r3, [pc, #92]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 80067f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	429a      	cmp	r2, r3
 8006808:	d01f      	beq.n	800684a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800680a:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4a11      	ldr	r2, [pc, #68]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006816:	f7fd fbb9 	bl	8003f8c <HAL_GetTick>
 800681a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800681c:	bf00      	nop
 800681e:	f7fd fbb5 	bl	8003f8c <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	4293      	cmp	r3, r2
 8006828:	d0f9      	beq.n	800681e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800682a:	4b0a      	ldr	r3, [pc, #40]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800682c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800682e:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <HAL_RCC_OscConfig+0x8b0>)
 8006830:	4013      	ands	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006836:	00d2      	lsls	r2, r2, #3
 8006838:	4906      	ldr	r1, [pc, #24]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 800683a:	4313      	orrs	r3, r2
 800683c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800683e:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	4a04      	ldr	r2, [pc, #16]	@ (8006854 <HAL_RCC_OscConfig+0x8ac>)
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3730      	adds	r7, #48	@ 0x30
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	58024400 	.word	0x58024400
 8006858:	ffff0007 	.word	0xffff0007

0800685c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e19c      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006870:	4b8a      	ldr	r3, [pc, #552]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d910      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687e:	4b87      	ldr	r3, [pc, #540]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 020f 	bic.w	r2, r3, #15
 8006886:	4985      	ldr	r1, [pc, #532]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b83      	ldr	r3, [pc, #524]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e184      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d908      	bls.n	80068ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068bc:	4b78      	ldr	r3, [pc, #480]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	4975      	ldr	r1, [pc, #468]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d010      	beq.n	80068fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	4b70      	ldr	r3, [pc, #448]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d908      	bls.n	80068fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ea:	4b6d      	ldr	r3, [pc, #436]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	496a      	ldr	r1, [pc, #424]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	4b64      	ldr	r3, [pc, #400]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006914:	429a      	cmp	r2, r3
 8006916:	d908      	bls.n	800692a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006918:	4b61      	ldr	r3, [pc, #388]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	495e      	ldr	r1, [pc, #376]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006926:	4313      	orrs	r3, r2
 8006928:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	4b59      	ldr	r3, [pc, #356]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006942:	429a      	cmp	r2, r3
 8006944:	d908      	bls.n	8006958 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006946:	4b56      	ldr	r3, [pc, #344]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4953      	ldr	r1, [pc, #332]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	429a      	cmp	r2, r3
 8006972:	d908      	bls.n	8006986 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006974:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f023 020f 	bic.w	r2, r3, #15
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4947      	ldr	r1, [pc, #284]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006982:	4313      	orrs	r3, r2
 8006984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d055      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006992:	4b43      	ldr	r3, [pc, #268]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4940      	ldr	r1, [pc, #256]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d107      	bne.n	80069bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ac:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d121      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0f6      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d107      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069c4:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d115      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0ea      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d107      	bne.n	80069ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069dc:	4b30      	ldr	r3, [pc, #192]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0de      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ec:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0d6      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069fc:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f023 0207 	bic.w	r2, r3, #7
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4925      	ldr	r1, [pc, #148]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fd fabd 	bl	8003f8c <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a16:	f7fd fab9 	bl	8003f8c <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e0be      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d1eb      	bne.n	8006a16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d010      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	4b14      	ldr	r3, [pc, #80]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d208      	bcs.n	8006a6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5a:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f023 020f 	bic.w	r2, r3, #15
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	490e      	ldr	r1, [pc, #56]	@ (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d214      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7a:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 020f 	bic.w	r2, r3, #15
 8006a82:	4906      	ldr	r1, [pc, #24]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8a:	4b04      	ldr	r3, [pc, #16]	@ (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d005      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e086      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
 8006a9c:	52002000 	.word	0x52002000
 8006aa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d208      	bcs.n	8006ad2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4939      	ldr	r1, [pc, #228]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	4b34      	ldr	r3, [pc, #208]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d208      	bcs.n	8006b00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aee:	4b31      	ldr	r3, [pc, #196]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	492e      	ldr	r1, [pc, #184]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	4b28      	ldr	r3, [pc, #160]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d208      	bcs.n	8006b2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	4922      	ldr	r1, [pc, #136]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d208      	bcs.n	8006b5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4917      	ldr	r1, [pc, #92]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b5c:	f000 f834 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	4912      	ldr	r1, [pc, #72]	@ (8006bb8 <HAL_RCC_ClockConfig+0x35c>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
 8006b78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb8 <HAL_RCC_ClockConfig+0x35c>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	4a0a      	ldr	r2, [pc, #40]	@ (8006bbc <HAL_RCC_ClockConfig+0x360>)
 8006b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b94:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc0 <HAL_RCC_ClockConfig+0x364>)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <HAL_RCC_ClockConfig+0x368>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd f9aa 	bl	8003ef8 <HAL_InitTick>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	08011884 	.word	0x08011884
 8006bbc:	24000054 	.word	0x24000054
 8006bc0:	24000050 	.word	0x24000050
 8006bc4:	24000058 	.word	0x24000058

08006bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	@ 0x24
 8006bcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bce:	4bb3      	ldr	r3, [pc, #716]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd6:	2b18      	cmp	r3, #24
 8006bd8:	f200 8155 	bhi.w	8006e86 <HAL_RCC_GetSysClockFreq+0x2be>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c49 	.word	0x08006c49
 8006be8:	08006e87 	.word	0x08006e87
 8006bec:	08006e87 	.word	0x08006e87
 8006bf0:	08006e87 	.word	0x08006e87
 8006bf4:	08006e87 	.word	0x08006e87
 8006bf8:	08006e87 	.word	0x08006e87
 8006bfc:	08006e87 	.word	0x08006e87
 8006c00:	08006e87 	.word	0x08006e87
 8006c04:	08006c6f 	.word	0x08006c6f
 8006c08:	08006e87 	.word	0x08006e87
 8006c0c:	08006e87 	.word	0x08006e87
 8006c10:	08006e87 	.word	0x08006e87
 8006c14:	08006e87 	.word	0x08006e87
 8006c18:	08006e87 	.word	0x08006e87
 8006c1c:	08006e87 	.word	0x08006e87
 8006c20:	08006e87 	.word	0x08006e87
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006e87 	.word	0x08006e87
 8006c2c:	08006e87 	.word	0x08006e87
 8006c30:	08006e87 	.word	0x08006e87
 8006c34:	08006e87 	.word	0x08006e87
 8006c38:	08006e87 	.word	0x08006e87
 8006c3c:	08006e87 	.word	0x08006e87
 8006c40:	08006e87 	.word	0x08006e87
 8006c44:	08006c7b 	.word	0x08006c7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c48:	4b94      	ldr	r3, [pc, #592]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c54:	4b91      	ldr	r3, [pc, #580]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	08db      	lsrs	r3, r3, #3
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	4a90      	ldr	r2, [pc, #576]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c66:	e111      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c68:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c6a:	61bb      	str	r3, [r7, #24]
      break;
 8006c6c:	e10e      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c70:	61bb      	str	r3, [r7, #24]
      break;
 8006c72:	e10b      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c74:	4b8c      	ldr	r3, [pc, #560]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c76:	61bb      	str	r3, [r7, #24]
      break;
 8006c78:	e108      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c7a:	4b88      	ldr	r3, [pc, #544]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c84:	4b85      	ldr	r3, [pc, #532]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c90:	4b82      	ldr	r3, [pc, #520]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c9a:	4b80      	ldr	r3, [pc, #512]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80e1 	beq.w	8006e80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f000 8083 	beq.w	8006dcc <HAL_RCC_GetSysClockFreq+0x204>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f200 80a1 	bhi.w	8006e10 <HAL_RCC_GetSysClockFreq+0x248>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x114>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d056      	beq.n	8006d88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cda:	e099      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b62      	ldr	r3, [pc, #392]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006d42:	e087      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006eb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b51      	ldr	r3, [pc, #324]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d86:	e065      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b40      	ldr	r3, [pc, #256]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dca:	e043      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b2f      	ldr	r3, [pc, #188]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006df2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e0e:	e021      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b1e      	ldr	r3, [pc, #120]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e54:	4b11      	ldr	r3, [pc, #68]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	0a5b      	lsrs	r3, r3, #9
 8006e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e5e:	3301      	adds	r3, #1
 8006e60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e78:	ee17 3a90 	vmov	r3, s15
 8006e7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61bb      	str	r3, [r7, #24]
      break;
 8006e84:	e002      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e86:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e88:	61bb      	str	r3, [r7, #24]
      break;
 8006e8a:	bf00      	nop
  }

  return sysclockfreq;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3724      	adds	r7, #36	@ 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	03d09000 	.word	0x03d09000
 8006ea4:	003d0900 	.word	0x003d0900
 8006ea8:	017d7840 	.word	0x017d7840
 8006eac:	46000000 	.word	0x46000000
 8006eb0:	4c742400 	.word	0x4c742400
 8006eb4:	4a742400 	.word	0x4a742400
 8006eb8:	4bbebc20 	.word	0x4bbebc20

08006ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ec2:	f7ff fe81 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	0a1b      	lsrs	r3, r3, #8
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	490f      	ldr	r1, [pc, #60]	@ (8006f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	4a09      	ldr	r2, [pc, #36]	@ (8006f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eea:	5cd3      	ldrb	r3, [r2, r3]
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	4a07      	ldr	r2, [pc, #28]	@ (8006f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ef8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006efa:	4a07      	ldr	r2, [pc, #28]	@ (8006f18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f00:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	08011884 	.word	0x08011884
 8006f14:	24000054 	.word	0x24000054
 8006f18:	24000050 	.word	0x24000050

08006f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f20:	f7ff ffcc 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4904      	ldr	r1, [pc, #16]	@ (8006f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f32:	5ccb      	ldrb	r3, [r1, r3]
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	58024400 	.word	0x58024400
 8006f44:	08011884 	.word	0x08011884

08006f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f4c:	f7ff ffb6 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4904      	ldr	r1, [pc, #16]	@ (8006f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	08011884 	.word	0x08011884

08006f74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f78:	b0ca      	sub	sp, #296	@ 0x128
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f98:	2500      	movs	r5, #0
 8006f9a:	ea54 0305 	orrs.w	r3, r4, r5
 8006f9e:	d049      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006faa:	d02f      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006fac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fb0:	d828      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb6:	d01a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fbc:	d822      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc6:	d007      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fc8:	e01c      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fca:	4bb8      	ldr	r3, [pc, #736]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	4ab7      	ldr	r2, [pc, #732]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fd6:	e01a      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fdc:	3308      	adds	r3, #8
 8006fde:	2102      	movs	r1, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f002 fb61 	bl	80096a8 <RCCEx_PLL2_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fec:	e00f      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	3328      	adds	r3, #40	@ 0x28
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 fc08 	bl	800980c <RCCEx_PLL3_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007002:	e004      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800700a:	e000      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800700c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007016:	4ba5      	ldr	r3, [pc, #660]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007024:	4aa1      	ldr	r2, [pc, #644]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007026:	430b      	orrs	r3, r1
 8007028:	6513      	str	r3, [r2, #80]	@ 0x50
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007040:	f04f 0900 	mov.w	r9, #0
 8007044:	ea58 0309 	orrs.w	r3, r8, r9
 8007048:	d047      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	2b04      	cmp	r3, #4
 8007052:	d82a      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007054:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007071 	.word	0x08007071
 8007060:	0800707f 	.word	0x0800707f
 8007064:	08007095 	.word	0x08007095
 8007068:	080070b3 	.word	0x080070b3
 800706c:	080070b3 	.word	0x080070b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007070:	4b8e      	ldr	r3, [pc, #568]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	4a8d      	ldr	r2, [pc, #564]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800707a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800707c:	e01a      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007082:	3308      	adds	r3, #8
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f002 fb0e 	bl	80096a8 <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007092:	e00f      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007098:	3328      	adds	r3, #40	@ 0x28
 800709a:	2100      	movs	r1, #0
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fbb5 	bl	800980c <RCCEx_PLL3_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070a8:	e004      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80070b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070bc:	4b7b      	ldr	r3, [pc, #492]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c0:	f023 0107 	bic.w	r1, r3, #7
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	4a78      	ldr	r2, [pc, #480]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80070e6:	f04f 0b00 	mov.w	fp, #0
 80070ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80070ee:	d04c      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070fa:	d030      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007100:	d829      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007102:	2bc0      	cmp	r3, #192	@ 0xc0
 8007104:	d02d      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007106:	2bc0      	cmp	r3, #192	@ 0xc0
 8007108:	d825      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800710a:	2b80      	cmp	r3, #128	@ 0x80
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800710e:	2b80      	cmp	r3, #128	@ 0x80
 8007110:	d821      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d007      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800711a:	e01c      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4b63      	ldr	r3, [pc, #396]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	4a62      	ldr	r2, [pc, #392]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007128:	e01c      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	3308      	adds	r3, #8
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f002 fab8 	bl	80096a8 <RCCEx_PLL2_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800713e:	e011      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	3328      	adds	r3, #40	@ 0x28
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f002 fb5f 	bl	800980c <RCCEx_PLL3_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007154:	e006      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800716c:	4b4f      	ldr	r3, [pc, #316]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007170:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800717a:	4a4c      	ldr	r2, [pc, #304]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800717c:	430b      	orrs	r3, r1
 800717e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007180:	e003      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007196:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800719a:	2300      	movs	r3, #0
 800719c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80071a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80071a4:	460b      	mov	r3, r1
 80071a6:	4313      	orrs	r3, r2
 80071a8:	d053      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071b6:	d035      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80071b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071bc:	d82e      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071c2:	d031      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071c8:	d828      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ce:	d01a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80071d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d4:	d822      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80071da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071de:	d007      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80071e0:	e01c      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e2:	4b32      	ldr	r3, [pc, #200]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a31      	ldr	r2, [pc, #196]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ee:	e01c      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	3308      	adds	r3, #8
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 fa55 	bl	80096a8 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007204:	e011      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	3328      	adds	r3, #40	@ 0x28
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f002 fafc 	bl	800980c <RCCEx_PLL3_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800721a:	e006      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007222:	e002      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007232:	4b1e      	ldr	r3, [pc, #120]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007236:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007242:	4a1a      	ldr	r2, [pc, #104]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007244:	430b      	orrs	r3, r1
 8007246:	6593      	str	r3, [r2, #88]	@ 0x58
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800725e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007268:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800726c:	460b      	mov	r3, r1
 800726e:	4313      	orrs	r3, r2
 8007270:	d056      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800727a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800727e:	d038      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007284:	d831      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007286:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800728a:	d034      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800728c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007290:	d82b      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007292:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007296:	d01d      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800729c:	d825      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80072a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80072a8:	e01f      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b0:	4ba2      	ldr	r3, [pc, #648]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b4:	4aa1      	ldr	r2, [pc, #644]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072bc:	e01c      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c2:	3308      	adds	r3, #8
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f002 f9ee 	bl	80096a8 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072d2:	e011      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d8:	3328      	adds	r3, #40	@ 0x28
 80072da:	2100      	movs	r1, #0
 80072dc:	4618      	mov	r0, r3
 80072de:	f002 fa95 	bl	800980c <RCCEx_PLL3_Config>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007300:	4b8e      	ldr	r3, [pc, #568]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007304:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007310:	4a8a      	ldr	r2, [pc, #552]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007312:	430b      	orrs	r3, r1
 8007314:	6593      	str	r3, [r2, #88]	@ 0x58
 8007316:	e003      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800732c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007336:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800733a:	460b      	mov	r3, r1
 800733c:	4313      	orrs	r3, r2
 800733e:	d03a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007346:	2b30      	cmp	r3, #48	@ 0x30
 8007348:	d01f      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800734a:	2b30      	cmp	r3, #48	@ 0x30
 800734c:	d819      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800734e:	2b20      	cmp	r3, #32
 8007350:	d00c      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d815      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d019      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800735a:	2b10      	cmp	r3, #16
 800735c:	d111      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735e:	4b77      	ldr	r3, [pc, #476]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	4a76      	ldr	r2, [pc, #472]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800736a:	e011      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	3308      	adds	r3, #8
 8007372:	2102      	movs	r1, #2
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f997 	bl	80096a8 <RCCEx_PLL2_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007380:	e006      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007398:	4b68      	ldr	r3, [pc, #416]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800739a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073a6:	4a65      	ldr	r2, [pc, #404]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073a8:	430b      	orrs	r3, r1
 80073aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073c6:	2300      	movs	r3, #0
 80073c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d051      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073e0:	d035      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073e6:	d82e      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073ec:	d031      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073f2:	d828      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f8:	d01a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073fe:	d822      	bhi.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007408:	d007      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800740a:	e01c      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4b4b      	ldr	r3, [pc, #300]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	4a4a      	ldr	r2, [pc, #296]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007418:	e01c      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741e:	3308      	adds	r3, #8
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f002 f940 	bl	80096a8 <RCCEx_PLL2_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800742e:	e011      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	3328      	adds	r3, #40	@ 0x28
 8007436:	2100      	movs	r1, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f002 f9e7 	bl	800980c <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007444:	e006      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744c:	e002      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800745c:	4b37      	ldr	r3, [pc, #220]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007460:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800746a:	4a34      	ldr	r2, [pc, #208]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800746c:	430b      	orrs	r3, r1
 800746e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007470:	e003      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007486:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800748a:	2300      	movs	r3, #0
 800748c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007490:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007494:	460b      	mov	r3, r1
 8007496:	4313      	orrs	r3, r2
 8007498:	d056      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074a4:	d033      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074aa:	d82c      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074b0:	d02f      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80074b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074b6:	d826      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074bc:	d02b      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80074be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074c2:	d820      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c8:	d012      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80074ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ce:	d81a      	bhi.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d022      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d8:	d115      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	3308      	adds	r3, #8
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 f8e0 	bl	80096a8 <RCCEx_PLL2_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074ee:	e015      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	3328      	adds	r3, #40	@ 0x28
 80074f6:	2101      	movs	r1, #1
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 f987 	bl	800980c <RCCEx_PLL3_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007504:	e00a      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800750c:	e006      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800750e:	bf00      	nop
 8007510:	e004      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007512:	bf00      	nop
 8007514:	e002      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007516:	bf00      	nop
 8007518:	e000      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800751a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10d      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007524:	4b05      	ldr	r3, [pc, #20]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007528:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007532:	4a02      	ldr	r2, [pc, #8]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007534:	430b      	orrs	r3, r1
 8007536:	6513      	str	r3, [r2, #80]	@ 0x50
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800753a:	bf00      	nop
 800753c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007558:	2300      	movs	r3, #0
 800755a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800755e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007562:	460b      	mov	r3, r1
 8007564:	4313      	orrs	r3, r2
 8007566:	d055      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007574:	d033      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800757a:	d82c      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d02f      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007586:	d826      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007588:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800758c:	d02b      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800758e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007592:	d820      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007598:	d012      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800759a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800759e:	d81a      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d022      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80075a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a8:	d115      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ae:	3308      	adds	r3, #8
 80075b0:	2101      	movs	r1, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f002 f878 	bl	80096a8 <RCCEx_PLL2_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075be:	e015      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c4:	3328      	adds	r3, #40	@ 0x28
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f002 f91f 	bl	800980c <RCCEx_PLL3_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075d4:	e00a      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075dc:	e006      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075f4:	4ba3      	ldr	r3, [pc, #652]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007604:	4a9f      	ldr	r2, [pc, #636]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007606:	430b      	orrs	r3, r1
 8007608:	6593      	str	r3, [r2, #88]	@ 0x58
 800760a:	e003      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007624:	2300      	movs	r3, #0
 8007626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800762a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800762e:	460b      	mov	r3, r1
 8007630:	4313      	orrs	r3, r2
 8007632:	d037      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800763e:	d00e      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007644:	d816      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d018      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800764a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764e:	d111      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007650:	4b8c      	ldr	r3, [pc, #560]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	4a8b      	ldr	r2, [pc, #556]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800765a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800765c:	e00f      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007662:	3308      	adds	r3, #8
 8007664:	2101      	movs	r1, #1
 8007666:	4618      	mov	r0, r3
 8007668:	f002 f81e 	bl	80096a8 <RCCEx_PLL2_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007672:	e004      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800767a:	e000      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800767c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007686:	4b7f      	ldr	r3, [pc, #508]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007694:	4a7b      	ldr	r2, [pc, #492]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007696:	430b      	orrs	r3, r1
 8007698:	6513      	str	r3, [r2, #80]	@ 0x50
 800769a:	e003      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d039      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d81c      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80076ce:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	08007711 	.word	0x08007711
 80076d8:	080076e5 	.word	0x080076e5
 80076dc:	080076f3 	.word	0x080076f3
 80076e0:	08007711 	.word	0x08007711
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e4:	4b67      	ldr	r3, [pc, #412]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	4a66      	ldr	r2, [pc, #408]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076f0:	e00f      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	3308      	adds	r3, #8
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 ffd4 	bl	80096a8 <RCCEx_PLL2_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007706:	e004      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800770e:	e000      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800771a:	4b5a      	ldr	r3, [pc, #360]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800771c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771e:	f023 0103 	bic.w	r1, r3, #3
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007728:	4a56      	ldr	r2, [pc, #344]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800772a:	430b      	orrs	r3, r1
 800772c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800772e:	e003      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007744:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800774e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007752:	460b      	mov	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	f000 809f 	beq.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800775a:	4b4b      	ldr	r3, [pc, #300]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a4a      	ldr	r2, [pc, #296]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007766:	f7fc fc11 	bl	8003f8c <HAL_GetTick>
 800776a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800776e:	e00b      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007770:	f7fc fc0c 	bl	8003f8c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b64      	cmp	r3, #100	@ 0x64
 800777e:	d903      	bls.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007786:	e005      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007788:	4b3f      	ldr	r3, [pc, #252]	@ (8007888 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ed      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007798:	2b00      	cmp	r3, #0
 800779a:	d179      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800779e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077a8:	4053      	eors	r3, r2
 80077aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d015      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077b2:	4b34      	ldr	r3, [pc, #208]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077be:	4b31      	ldr	r3, [pc, #196]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	4a30      	ldr	r2, [pc, #192]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80077dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	d118      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fc fbce 	bl	8003f8c <HAL_GetTick>
 80077f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f4:	e00d      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fc fbc9 	bl	8003f8c <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007810:	e005      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007812:	4b1c      	ldr	r3, [pc, #112]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0eb      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800781e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007822:	2b00      	cmp	r3, #0
 8007824:	d129      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800782e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007836:	d10e      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007838:	4b12      	ldr	r3, [pc, #72]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007848:	091a      	lsrs	r2, r3, #4
 800784a:	4b10      	ldr	r3, [pc, #64]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800784c:	4013      	ands	r3, r2
 800784e:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007850:	430b      	orrs	r3, r1
 8007852:	6113      	str	r3, [r2, #16]
 8007854:	e005      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007856:	4b0b      	ldr	r3, [pc, #44]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	4a0a      	ldr	r2, [pc, #40]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800785c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007860:	6113      	str	r3, [r2, #16]
 8007862:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007864:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800786e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007872:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007874:	430b      	orrs	r3, r1
 8007876:	6713      	str	r3, [r2, #112]	@ 0x70
 8007878:	e00e      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800787a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007882:	e009      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007884:	58024400 	.word	0x58024400
 8007888:	58024800 	.word	0x58024800
 800788c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f002 0301 	and.w	r3, r2, #1
 80078a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f000 8089 	beq.w	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078c0:	2b28      	cmp	r3, #40	@ 0x28
 80078c2:	d86b      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80078c4:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080079a5 	.word	0x080079a5
 80078d0:	0800799d 	.word	0x0800799d
 80078d4:	0800799d 	.word	0x0800799d
 80078d8:	0800799d 	.word	0x0800799d
 80078dc:	0800799d 	.word	0x0800799d
 80078e0:	0800799d 	.word	0x0800799d
 80078e4:	0800799d 	.word	0x0800799d
 80078e8:	0800799d 	.word	0x0800799d
 80078ec:	08007971 	.word	0x08007971
 80078f0:	0800799d 	.word	0x0800799d
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	0800799d 	.word	0x0800799d
 80078fc:	0800799d 	.word	0x0800799d
 8007900:	0800799d 	.word	0x0800799d
 8007904:	0800799d 	.word	0x0800799d
 8007908:	0800799d 	.word	0x0800799d
 800790c:	08007987 	.word	0x08007987
 8007910:	0800799d 	.word	0x0800799d
 8007914:	0800799d 	.word	0x0800799d
 8007918:	0800799d 	.word	0x0800799d
 800791c:	0800799d 	.word	0x0800799d
 8007920:	0800799d 	.word	0x0800799d
 8007924:	0800799d 	.word	0x0800799d
 8007928:	0800799d 	.word	0x0800799d
 800792c:	080079a5 	.word	0x080079a5
 8007930:	0800799d 	.word	0x0800799d
 8007934:	0800799d 	.word	0x0800799d
 8007938:	0800799d 	.word	0x0800799d
 800793c:	0800799d 	.word	0x0800799d
 8007940:	0800799d 	.word	0x0800799d
 8007944:	0800799d 	.word	0x0800799d
 8007948:	0800799d 	.word	0x0800799d
 800794c:	080079a5 	.word	0x080079a5
 8007950:	0800799d 	.word	0x0800799d
 8007954:	0800799d 	.word	0x0800799d
 8007958:	0800799d 	.word	0x0800799d
 800795c:	0800799d 	.word	0x0800799d
 8007960:	0800799d 	.word	0x0800799d
 8007964:	0800799d 	.word	0x0800799d
 8007968:	0800799d 	.word	0x0800799d
 800796c:	080079a5 	.word	0x080079a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	3308      	adds	r3, #8
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fe95 	bl	80096a8 <RCCEx_PLL2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007984:	e00f      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	3328      	adds	r3, #40	@ 0x28
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f001 ff3c 	bl	800980c <RCCEx_PLL3_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800799a:	e004      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079a2:	e000      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80079a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079ae:	4bbf      	ldr	r3, [pc, #764]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079bc:	4abb      	ldr	r2, [pc, #748]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079be:	430b      	orrs	r3, r1
 80079c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80079c2:	e003      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f002 0302 	and.w	r3, r2, #2
 80079d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079dc:	2300      	movs	r3, #0
 80079de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80079e6:	460b      	mov	r3, r1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d041      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d824      	bhi.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a15 	.word	0x08007a15
 8007a04:	08007a2b 	.word	0x08007a2b
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a18:	3308      	adds	r3, #8
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 fe43 	bl	80096a8 <RCCEx_PLL2_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a28:	e00f      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	3328      	adds	r3, #40	@ 0x28
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 feea 	bl	800980c <RCCEx_PLL3_Config>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a3e:	e004      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a46:	e000      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a52:	4b96      	ldr	r3, [pc, #600]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a56:	f023 0107 	bic.w	r1, r3, #7
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a60:	4a92      	ldr	r2, [pc, #584]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a66:	e003      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f002 0304 	and.w	r3, r2, #4
 8007a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a80:	2300      	movs	r3, #0
 8007a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	d044      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d825      	bhi.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007af1 	.word	0x08007af1
 8007aa8:	08007abd 	.word	0x08007abd
 8007aac:	08007ad3 	.word	0x08007ad3
 8007ab0:	08007af1 	.word	0x08007af1
 8007ab4:	08007af1 	.word	0x08007af1
 8007ab8:	08007af1 	.word	0x08007af1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fdef 	bl	80096a8 <RCCEx_PLL2_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ad0:	e00f      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	3328      	adds	r3, #40	@ 0x28
 8007ad8:	2101      	movs	r1, #1
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fe96 	bl	800980c <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ae6:	e004      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aee:	e000      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007afa:	4b6c      	ldr	r3, [pc, #432]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afe:	f023 0107 	bic.w	r1, r3, #7
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0a:	4a68      	ldr	r2, [pc, #416]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b10:	e003      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f002 0320 	and.w	r3, r2, #32
 8007b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b34:	460b      	mov	r3, r1
 8007b36:	4313      	orrs	r3, r2
 8007b38:	d055      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b46:	d033      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b4c:	d82c      	bhi.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b52:	d02f      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b58:	d826      	bhi.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b5e:	d02b      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b64:	d820      	bhi.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b6a:	d012      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b70:	d81a      	bhi.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d022      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b7a:	d115      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	3308      	adds	r3, #8
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 fd8f 	bl	80096a8 <RCCEx_PLL2_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b90:	e015      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	3328      	adds	r3, #40	@ 0x28
 8007b98:	2102      	movs	r1, #2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 fe36 	bl	800980c <RCCEx_PLL3_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ba6:	e00a      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bae:	e006      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb0:	bf00      	nop
 8007bb2:	e004      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb4:	bf00      	nop
 8007bb6:	e002      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bb8:	bf00      	nop
 8007bba:	e000      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bc6:	4b39      	ldr	r3, [pc, #228]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd6:	4a35      	ldr	r2, [pc, #212]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bdc:	e003      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4313      	orrs	r3, r2
 8007c04:	d058      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c12:	d033      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007c14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c18:	d82c      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1e:	d02f      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c24:	d826      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c2a:	d02b      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c30:	d820      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c36:	d012      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c3c:	d81a      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d022      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c46:	d115      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fd29 	bl	80096a8 <RCCEx_PLL2_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c5c:	e015      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	3328      	adds	r3, #40	@ 0x28
 8007c64:	2102      	movs	r1, #2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fdd0 	bl	800980c <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c72:	e00a      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7a:	e006      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c7c:	bf00      	nop
 8007c7e:	e004      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c80:	bf00      	nop
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10e      	bne.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c92:	4b06      	ldr	r3, [pc, #24]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ca2:	4a02      	ldr	r2, [pc, #8]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca8:	e006      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007caa:	bf00      	nop
 8007cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d055      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ce0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ce4:	d033      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007ce6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cea:	d82c      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf0:	d02f      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf6:	d826      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cfc:	d02b      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007cfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d02:	d820      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d08:	d012      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007d0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d0e:	d81a      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d022      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d18:	d115      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3308      	adds	r3, #8
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fcc0 	bl	80096a8 <RCCEx_PLL2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d2e:	e015      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	3328      	adds	r3, #40	@ 0x28
 8007d36:	2102      	movs	r1, #2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fd67 	bl	800980c <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d44:	e00a      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d4c:	e006      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d64:	4ba1      	ldr	r3, [pc, #644]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d74:	4a9d      	ldr	r2, [pc, #628]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d7a:	e003      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f002 0308 	and.w	r3, r2, #8
 8007d90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	d01e      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db0:	d10c      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db6:	3328      	adds	r3, #40	@ 0x28
 8007db8:	2102      	movs	r1, #2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fd26 	bl	800980c <RCCEx_PLL3_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007dcc:	4b87      	ldr	r3, [pc, #540]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ddc:	4a83      	ldr	r2, [pc, #524]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dde:	430b      	orrs	r3, r1
 8007de0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f002 0310 	and.w	r3, r2, #16
 8007dee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007df2:	2300      	movs	r3, #0
 8007df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007df8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	d01e      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0e:	d10c      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e14:	3328      	adds	r3, #40	@ 0x28
 8007e16:	2102      	movs	r1, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 fcf7 	bl	800980c <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e2a:	4b70      	ldr	r3, [pc, #448]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d03e      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6c:	d022      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e72:	d81b      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d00b      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e7e:	e015      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	3308      	adds	r3, #8
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fc0d 	bl	80096a8 <RCCEx_PLL2_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e94:	e00f      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9a:	3328      	adds	r3, #40	@ 0x28
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 fcb4 	bl	800980c <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ece:	4a47      	ldr	r2, [pc, #284]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed4:	e003      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007eea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eec:	2300      	movs	r3, #0
 8007eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ef0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d03b      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f06:	d01f      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007f08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f0c:	d818      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f12:	d003      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007f14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f18:	d007      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007f1a:	e011      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1c:	4b33      	ldr	r3, [pc, #204]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	4a32      	ldr	r2, [pc, #200]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f28:	e00f      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	3328      	adds	r3, #40	@ 0x28
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fc6a 	bl	800980c <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f3e:	e004      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f46:	e000      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f52:	4b26      	ldr	r3, [pc, #152]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	4a22      	ldr	r2, [pc, #136]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f68:	e003      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f80:	2300      	movs	r3, #0
 8007f82:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d034      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f9c:	d007      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f9e:	e011      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa0:	4b12      	ldr	r3, [pc, #72]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	4a11      	ldr	r2, [pc, #68]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fac:	e00e      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fb76 	bl	80096a8 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fc2:	e003      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe2:	4a02      	ldr	r2, [pc, #8]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fe8:	e006      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007fea:	bf00      	nop
 8007fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008006:	2300      	movs	r3, #0
 8008008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800800a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800800e:	460b      	mov	r3, r1
 8008010:	4313      	orrs	r3, r2
 8008012:	d00c      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008018:	3328      	adds	r3, #40	@ 0x28
 800801a:	2102      	movs	r1, #2
 800801c:	4618      	mov	r0, r3
 800801e:	f001 fbf5 	bl	800980c <RCCEx_PLL3_Config>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800803a:	663b      	str	r3, [r7, #96]	@ 0x60
 800803c:	2300      	movs	r3, #0
 800803e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008040:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008044:	460b      	mov	r3, r1
 8008046:	4313      	orrs	r3, r2
 8008048:	d038      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008056:	d018      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805c:	d811      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800805e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008062:	d014      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008068:	d80b      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d011      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800806e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4bc3      	ldr	r3, [pc, #780]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4ac2      	ldr	r2, [pc, #776]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008080:	e008      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008088:	e004      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800808a:	bf00      	nop
 800808c:	e002      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800808e:	bf00      	nop
 8008090:	e000      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10b      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800809c:	4bb9      	ldr	r3, [pc, #740]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800809e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ac:	4ab5      	ldr	r2, [pc, #724]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ae:	430b      	orrs	r3, r1
 80080b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80080b2:	e003      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080ca:	2300      	movs	r3, #0
 80080cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080d2:	460b      	mov	r3, r1
 80080d4:	4313      	orrs	r3, r2
 80080d6:	d009      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080d8:	4baa      	ldr	r3, [pc, #680]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e6:	4aa7      	ldr	r2, [pc, #668]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80080f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080fa:	2300      	movs	r3, #0
 80080fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80080fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008102:	460b      	mov	r3, r1
 8008104:	4313      	orrs	r3, r2
 8008106:	d00a      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008108:	4b9e      	ldr	r3, [pc, #632]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008114:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008118:	4a9a      	ldr	r2, [pc, #616]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800811a:	430b      	orrs	r3, r1
 800811c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800812a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800812c:	2300      	movs	r3, #0
 800812e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008130:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008134:	460b      	mov	r3, r1
 8008136:	4313      	orrs	r3, r2
 8008138:	d009      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800813a:	4b92      	ldr	r3, [pc, #584]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800813c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008148:	4a8e      	ldr	r2, [pc, #568]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800814e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800815a:	643b      	str	r3, [r7, #64]	@ 0x40
 800815c:	2300      	movs	r3, #0
 800815e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008160:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008164:	460b      	mov	r3, r1
 8008166:	4313      	orrs	r3, r2
 8008168:	d00e      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800816a:	4b86      	ldr	r3, [pc, #536]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	4a85      	ldr	r2, [pc, #532]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008170:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008174:	6113      	str	r3, [r2, #16]
 8008176:	4b83      	ldr	r3, [pc, #524]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008178:	6919      	ldr	r1, [r3, #16]
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008182:	4a80      	ldr	r2, [pc, #512]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008184:	430b      	orrs	r3, r1
 8008186:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800819a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800819e:	460b      	mov	r3, r1
 80081a0:	4313      	orrs	r3, r2
 80081a2:	d009      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081a4:	4b77      	ldr	r3, [pc, #476]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	4a74      	ldr	r2, [pc, #464]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081b4:	430b      	orrs	r3, r1
 80081b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c6:	2300      	movs	r3, #0
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081ce:	460b      	mov	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	d00a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081d4:	4b6b      	ldr	r3, [pc, #428]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081e4:	4a67      	ldr	r2, [pc, #412]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	2100      	movs	r1, #0
 80081f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008200:	460b      	mov	r3, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	d011      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820a:	3308      	adds	r3, #8
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fa4a 	bl	80096a8 <RCCEx_PLL2_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800821a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	2100      	movs	r1, #0
 8008234:	6239      	str	r1, [r7, #32]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
 800823c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d011      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824a:	3308      	adds	r3, #8
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fa2a 	bl	80096a8 <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	2100      	movs	r1, #0
 8008274:	61b9      	str	r1, [r7, #24]
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008280:	460b      	mov	r3, r1
 8008282:	4313      	orrs	r3, r2
 8008284:	d011      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	3308      	adds	r3, #8
 800828c:	2102      	movs	r1, #2
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fa0a 	bl	80096a8 <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800829a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	2100      	movs	r1, #0
 80082b4:	6139      	str	r1, [r7, #16]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d011      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	3328      	adds	r3, #40	@ 0x28
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 fa9c 	bl	800980c <RCCEx_PLL3_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	2100      	movs	r1, #0
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d011      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830a:	3328      	adds	r3, #40	@ 0x28
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fa7c 	bl	800980c <RCCEx_PLL3_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800831a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	2100      	movs	r1, #0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008340:	460b      	mov	r3, r1
 8008342:	4313      	orrs	r3, r2
 8008344:	d011      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834a:	3328      	adds	r3, #40	@ 0x28
 800834c:	2102      	movs	r1, #2
 800834e:	4618      	mov	r0, r3
 8008350:	f001 fa5c 	bl	800980c <RCCEx_PLL3_Config>
 8008354:	4603      	mov	r3, r0
 8008356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800836a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
}
 8008378:	4618      	mov	r0, r3
 800837a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800837e:	46bd      	mov	sp, r7
 8008380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008384:	58024400 	.word	0x58024400

08008388 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b090      	sub	sp, #64	@ 0x40
 800838c:	af00      	add	r7, sp, #0
 800838e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008396:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800839a:	430b      	orrs	r3, r1
 800839c:	f040 8094 	bne.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80083a0:	4b9e      	ldr	r3, [pc, #632]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	f200 8087 	bhi.w	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80083b2:	a201      	add	r2, pc, #4	@ (adr r2, 80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083cd 	.word	0x080083cd
 80083bc:	080083f5 	.word	0x080083f5
 80083c0:	0800841d 	.word	0x0800841d
 80083c4:	080084b9 	.word	0x080084b9
 80083c8:	08008445 	.word	0x08008445
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083cc:	4b93      	ldr	r3, [pc, #588]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d8:	d108      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 f810 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e8:	f000 bd45 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f0:	f000 bd41 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083f4:	4b89      	ldr	r3, [pc, #548]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008400:	d108      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0318 	add.w	r3, r7, #24
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fd54 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008410:	f000 bd31 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008418:	f000 bd2d 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800841c:	4b7f      	ldr	r3, [pc, #508]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008428:	d108      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800842a:	f107 030c 	add.w	r3, r7, #12
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fe94 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008438:	f000 bd1d 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008440:	f000 bd19 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008444:	4b75      	ldr	r3, [pc, #468]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008448:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800844e:	4b73      	ldr	r3, [pc, #460]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b04      	cmp	r3, #4
 8008458:	d10c      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800845a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008460:	4b6e      	ldr	r3, [pc, #440]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	08db      	lsrs	r3, r3, #3
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	4a6d      	ldr	r2, [pc, #436]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008472:	e01f      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008474:	4b69      	ldr	r3, [pc, #420]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008480:	d106      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008488:	d102      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800848a:	4b66      	ldr	r3, [pc, #408]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800848c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800848e:	e011      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008490:	4b62      	ldr	r3, [pc, #392]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800849c:	d106      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800849e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a4:	d102      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084a6:	4b60      	ldr	r3, [pc, #384]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084b0:	f000 bce1 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084b4:	f000 bcdf 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084b8:	4b5c      	ldr	r3, [pc, #368]	@ (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084bc:	f000 bcdb 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c4:	f000 bcd7 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80084c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80084d0:	430b      	orrs	r3, r1
 80084d2:	f040 80ad 	bne.w	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80084d6:	4b51      	ldr	r3, [pc, #324]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80084de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e6:	d056      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ee:	f200 8090 	bhi.w	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80084f6:	f000 8088 	beq.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80084fe:	f200 8088 	bhi.w	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	2b80      	cmp	r3, #128	@ 0x80
 8008506:	d032      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	2b80      	cmp	r3, #128	@ 0x80
 800850c:	f200 8081 	bhi.w	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2b40      	cmp	r3, #64	@ 0x40
 800851a:	d014      	beq.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800851c:	e079      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800851e:	4b3f      	ldr	r3, [pc, #252]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800852a:	d108      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800852c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008530:	4618      	mov	r0, r3
 8008532:	f000 ff67 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853a:	f000 bc9c 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008542:	f000 bc98 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008546:	4b35      	ldr	r3, [pc, #212]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800854e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008552:	d108      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008554:	f107 0318 	add.w	r3, r7, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fcab 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008562:	f000 bc88 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856a:	f000 bc84 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800856e:	4b2b      	ldr	r3, [pc, #172]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800857a:	d108      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857c:	f107 030c 	add.w	r3, r7, #12
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fdeb 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858a:	f000 bc74 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008592:	f000 bc70 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008596:	4b21      	ldr	r3, [pc, #132]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085a0:	4b1e      	ldr	r3, [pc, #120]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d10c      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80085ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b2:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	4a18      	ldr	r2, [pc, #96]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085be:	fa22 f303 	lsr.w	r3, r2, r3
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c4:	e01f      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085c6:	4b15      	ldr	r3, [pc, #84]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085dc:	4b11      	ldr	r3, [pc, #68]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e0:	e011      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085e2:	4b0e      	ldr	r3, [pc, #56]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ee:	d106      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80085f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085f6:	d102      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085fc:	e003      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008602:	f000 bc38 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008606:	f000 bc36 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800860a:	4b08      	ldr	r3, [pc, #32]	@ (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800860e:	f000 bc32 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008616:	f000 bc2e 	b.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800861a:	bf00      	nop
 800861c:	58024400 	.word	0x58024400
 8008620:	03d09000 	.word	0x03d09000
 8008624:	003d0900 	.word	0x003d0900
 8008628:	017d7840 	.word	0x017d7840
 800862c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008634:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008638:	430b      	orrs	r3, r1
 800863a:	f040 809c 	bne.w	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800863e:	4b9e      	ldr	r3, [pc, #632]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008642:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008646:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800864e:	d054      	beq.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008656:	f200 808b 	bhi.w	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008660:	f000 8083 	beq.w	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800866a:	f200 8081 	bhi.w	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008674:	d02f      	beq.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800867c:	d878      	bhi.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800868a:	d012      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800868c:	e070      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868e:	4b8a      	ldr	r3, [pc, #552]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800869a:	d107      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 feaf 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086aa:	e3e4      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b0:	e3e1      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b2:	4b81      	ldr	r3, [pc, #516]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086be:	d107      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c0:	f107 0318 	add.w	r3, r7, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fbf5 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ce:	e3d2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d4:	e3cf      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086d6:	4b78      	ldr	r3, [pc, #480]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086e2:	d107      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fd37 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f2:	e3c0      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f8:	e3bd      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086fa:	4b6f      	ldr	r3, [pc, #444]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008702:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008704:	4b6c      	ldr	r3, [pc, #432]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b04      	cmp	r3, #4
 800870e:	d10c      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008716:	4b68      	ldr	r3, [pc, #416]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	08db      	lsrs	r3, r3, #3
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	4a66      	ldr	r2, [pc, #408]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008728:	e01e      	b.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800872a:	4b63      	ldr	r3, [pc, #396]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008736:	d106      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873e:	d102      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008740:	4b5f      	ldr	r3, [pc, #380]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008744:	e010      	b.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008746:	4b5c      	ldr	r3, [pc, #368]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800874e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008752:	d106      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800875a:	d102      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800875c:	4b59      	ldr	r3, [pc, #356]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008760:	e002      	b.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008766:	e386      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008768:	e385      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800876a:	4b57      	ldr	r3, [pc, #348]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876e:	e382      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e37f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800877a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800877e:	430b      	orrs	r3, r1
 8008780:	f040 80a7 	bne.w	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008784:	4b4c      	ldr	r3, [pc, #304]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008788:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800878c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008794:	d055      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800879c:	f200 8096 	bhi.w	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087a6:	f000 8084 	beq.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087b0:	f200 808c 	bhi.w	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087ba:	d030      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c2:	f200 8083 	bhi.w	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087d2:	d012      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80087d4:	e07a      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087d6:	4b38      	ldr	r3, [pc, #224]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087e2:	d107      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fe0b 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f2:	e340      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f8:	e33d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087fa:	4b2f      	ldr	r3, [pc, #188]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008806:	d107      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008808:	f107 0318 	add.w	r3, r7, #24
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fb51 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008816:	e32e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881c:	e32b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800881e:	4b26      	ldr	r3, [pc, #152]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882a:	d107      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882c:	f107 030c 	add.w	r3, r7, #12
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fc93 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883a:	e31c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008840:	e319      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008842:	4b1d      	ldr	r3, [pc, #116]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800884c:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b04      	cmp	r3, #4
 8008856:	d10c      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800885e:	4b16      	ldr	r3, [pc, #88]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	08db      	lsrs	r3, r3, #3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008870:	e01e      	b.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008872:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800887a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887e:	d106      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008886:	d102      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008888:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800888c:	e010      	b.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800888e:	4b0a      	ldr	r3, [pc, #40]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800889a:	d106      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800889c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a2:	d102      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088a4:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088a8:	e002      	b.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088ae:	e2e2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088b0:	e2e1      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088b2:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b6:	e2de      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088b8:	58024400 	.word	0x58024400
 80088bc:	03d09000 	.word	0x03d09000
 80088c0:	003d0900 	.word	0x003d0900
 80088c4:	017d7840 	.word	0x017d7840
 80088c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d0:	e2d1      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80088da:	430b      	orrs	r3, r1
 80088dc:	f040 809c 	bne.w	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80088e0:	4b93      	ldr	r3, [pc, #588]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80088e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f0:	d054      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f8:	f200 808b 	bhi.w	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008902:	f000 8083 	beq.w	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800890c:	f200 8081 	bhi.w	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008916:	d02f      	beq.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800891e:	d878      	bhi.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800892c:	d012      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800892e:	e070      	b.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008930:	4b7f      	ldr	r3, [pc, #508]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800893c:	d107      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800893e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fd5e 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894c:	e293      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008952:	e290      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008954:	4b76      	ldr	r3, [pc, #472]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800895c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008962:	f107 0318 	add.w	r3, r7, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 faa4 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008970:	e281      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008976:	e27e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008978:	4b6d      	ldr	r3, [pc, #436]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008984:	d107      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008986:	f107 030c 	add.w	r3, r7, #12
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fbe6 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008994:	e26f      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899a:	e26c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800899c:	4b64      	ldr	r3, [pc, #400]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800899e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a6:	4b62      	ldr	r3, [pc, #392]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d10c      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	08db      	lsrs	r3, r3, #3
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	4a5c      	ldr	r2, [pc, #368]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ca:	e01e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089cc:	4b58      	ldr	r3, [pc, #352]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d8:	d106      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80089da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089e0:	d102      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089e2:	4b55      	ldr	r3, [pc, #340]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e6:	e010      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e8:	4b51      	ldr	r3, [pc, #324]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089f4:	d106      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fc:	d102      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089fe:	4b4f      	ldr	r3, [pc, #316]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a02:	e002      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a08:	e235      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a0a:	e234      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e231      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a16:	e22e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a20:	430b      	orrs	r3, r1
 8008a22:	f040 808f 	bne.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008a26:	4b42      	ldr	r3, [pc, #264]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a36:	d06b      	beq.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a3e:	d874      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a46:	d056      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a4e:	d86c      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a56:	d03b      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a5e:	d864      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a66:	d021      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a6e:	d85c      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a7c:	d004      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008a7e:	e054      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a80:	f7fe fa4c 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8008a84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a86:	e1f6      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a88:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fa0a 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e1e7      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e1e4      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aac:	4b20      	ldr	r3, [pc, #128]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab8:	d107      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aba:	f107 030c 	add.w	r3, r7, #12
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb4c 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac8:	e1d5      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ace:	e1d2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ad0:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008adc:	4b14      	ldr	r3, [pc, #80]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	4a13      	ldr	r2, [pc, #76]	@ (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e1c2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e1bf      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008af6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b02:	d102      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b08:	e1b5      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0e:	e1b2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b10:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1c:	d102      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008b1e:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b22:	e1a8      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b28:	e1a5      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e1a2      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	003d0900 	.word	0x003d0900
 8008b3c:	017d7840 	.word	0x017d7840
 8008b40:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b48:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	d173      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008b50:	4b9c      	ldr	r3, [pc, #624]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b60:	d02f      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b68:	d863      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b76:	d012      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008b78:	e05b      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b7a:	4b92      	ldr	r3, [pc, #584]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b86:	d107      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b88:	f107 0318 	add.w	r3, r7, #24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f991 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b96:	e16e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9c:	e16b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9e:	4b89      	ldr	r3, [pc, #548]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008baa:	d107      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fad3 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bba:	e15c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc0:	e159      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bc2:	4b80      	ldr	r3, [pc, #512]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bcc:	4b7d      	ldr	r3, [pc, #500]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d10c      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bde:	4b79      	ldr	r3, [pc, #484]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	08db      	lsrs	r3, r3, #3
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	4a77      	ldr	r2, [pc, #476]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bf0:	e01e      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bf2:	4b74      	ldr	r3, [pc, #464]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c06:	d102      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c08:	4b70      	ldr	r3, [pc, #448]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c0c:	e010      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c1a:	d106      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c22:	d102      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c24:	4b6a      	ldr	r3, [pc, #424]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c28:	e002      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c2e:	e122      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c30:	e121      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e11e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c40:	430b      	orrs	r3, r1
 8008c42:	d133      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c44:	4b5f      	ldr	r3, [pc, #380]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5a:	d012      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008c5c:	e023      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c5e:	4b59      	ldr	r3, [pc, #356]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c6a:	d107      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fbc7 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7a:	e0fc      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c80:	e0f9      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c82:	4b50      	ldr	r3, [pc, #320]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8e:	d107      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f90d 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9e:	e0ea      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e0e7      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008caa:	e0e4      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	f040 808d 	bne.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008cba:	4b42      	ldr	r3, [pc, #264]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008cc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cca:	d06b      	beq.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cd2:	d874      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cda:	d056      	beq.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce2:	d86c      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cea:	d03b      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cf2:	d864      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cfa:	d021      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d02:	d85c      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d004      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d10:	d004      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008d12:	e054      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008d14:	f000 f8b8 	bl	8008e88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d1a:	e0ac      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d1c:	4b29      	ldr	r3, [pc, #164]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d28:	d107      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2a:	f107 0318 	add.w	r3, r7, #24
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f8c0 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d38:	e09d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3e:	e09a      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d40:	4b20      	ldr	r3, [pc, #128]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4c:	d107      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fa02 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d5c:	e08b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d62:	e088      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d64:	4b17      	ldr	r3, [pc, #92]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d109      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d70:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	08db      	lsrs	r3, r3, #3
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	4a13      	ldr	r2, [pc, #76]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d82:	e078      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e075      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d96:	d102      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008d98:	4b0c      	ldr	r3, [pc, #48]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d9c:	e06b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da2:	e068      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008da4:	4b07      	ldr	r3, [pc, #28]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db0:	d102      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008db2:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008db6:	e05e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e05b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc2:	e058      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	03d09000 	.word	0x03d09000
 8008dcc:	003d0900 	.word	0x003d0900
 8008dd0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	d148      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008de0:	4b27      	ldr	r3, [pc, #156]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008de8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df0:	d02a      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df8:	d838      	bhi.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e06:	d00d      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008e08:	e030      	b.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e16:	d102      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008e18:	4b1a      	ldr	r3, [pc, #104]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1c:	e02b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e22:	e028      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e24:	4b16      	ldr	r3, [pc, #88]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e30:	d107      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fae4 	bl	8009404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e40:	e019      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e46:	e016      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e48:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e56:	f107 0318 	add.w	r3, r7, #24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f82a 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e64:	e007      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e001      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3740      	adds	r7, #64	@ 0x40
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	58024400 	.word	0x58024400
 8008e84:	017d7840 	.word	0x017d7840

08008e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e8c:	f7fe f816 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4b06      	ldr	r3, [pc, #24]	@ (8008eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	4904      	ldr	r1, [pc, #16]	@ (8008eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	08011884 	.word	0x08011884

08008eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	@ 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008ec6:	4b9f      	ldr	r3, [pc, #636]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	0b1b      	lsrs	r3, r3, #12
 8008ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed6:	091b      	lsrs	r3, r3, #4
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ede:	4b99      	ldr	r3, [pc, #612]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	08db      	lsrs	r3, r3, #3
 8008ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8111 	beq.w	8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	f000 8083 	beq.w	8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	f200 80a1 	bhi.w	8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d056      	beq.n	8008fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008f1e:	e099      	b.n	8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f20:	4b88      	ldr	r3, [pc, #544]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d02d      	beq.n	8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f2c:	4b85      	ldr	r3, [pc, #532]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	08db      	lsrs	r3, r3, #3
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	4a84      	ldr	r2, [pc, #528]	@ (8009148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f56:	4b7b      	ldr	r3, [pc, #492]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800914c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f86:	e087      	b.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800914c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fca:	e065      	b.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fde:	4b59      	ldr	r3, [pc, #356]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800914c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800900e:	e043      	b.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800901e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009022:	4b48      	ldr	r3, [pc, #288]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	ed97 6a03 	vldr	s12, [r7, #12]
 8009036:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800914c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800903a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009052:	e021      	b.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b37      	ldr	r3, [pc, #220]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a03 	vldr	s12, [r7, #12]
 800907a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800914c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009098:	4b2a      	ldr	r3, [pc, #168]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909c:	0a5b      	lsrs	r3, r3, #9
 800909e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090be:	ee17 2a90 	vmov	r2, s15
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80090c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ec:	ee17 2a90 	vmov	r2, s15
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80090f4:	4b13      	ldr	r3, [pc, #76]	@ (8009144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f8:	0e1b      	lsrs	r3, r3, #24
 80090fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800910a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911a:	ee17 2a90 	vmov	r2, s15
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009122:	e008      	b.n	8009136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
}
 8009136:	bf00      	nop
 8009138:	3724      	adds	r7, #36	@ 0x24
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	58024400 	.word	0x58024400
 8009148:	03d09000 	.word	0x03d09000
 800914c:	46000000 	.word	0x46000000
 8009150:	4c742400 	.word	0x4c742400
 8009154:	4a742400 	.word	0x4a742400
 8009158:	4bbebc20 	.word	0x4bbebc20

0800915c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800915c:	b480      	push	{r7}
 800915e:	b089      	sub	sp, #36	@ 0x24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009164:	4ba1      	ldr	r3, [pc, #644]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009168:	f003 0303 	and.w	r3, r3, #3
 800916c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800916e:	4b9f      	ldr	r3, [pc, #636]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009172:	0d1b      	lsrs	r3, r3, #20
 8009174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800917a:	4b9c      	ldr	r3, [pc, #624]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	0a1b      	lsrs	r3, r3, #8
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009186:	4b99      	ldr	r3, [pc, #612]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	08db      	lsrs	r3, r3, #3
 800918c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8111 	beq.w	80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	f000 8083 	beq.w	80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	f200 80a1 	bhi.w	80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d056      	beq.n	8009274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80091c6:	e099      	b.n	80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091c8:	4b88      	ldr	r3, [pc, #544]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d02d      	beq.n	8009230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091d4:	4b85      	ldr	r3, [pc, #532]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	08db      	lsrs	r3, r3, #3
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	4a84      	ldr	r2, [pc, #528]	@ (80093f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80091e0:	fa22 f303 	lsr.w	r3, r2, r3
 80091e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	ee07 3a90 	vmov	s15, r3
 80091ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fe:	4b7b      	ldr	r3, [pc, #492]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009212:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800922e:	e087      	b.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800923e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009242:	4b6a      	ldr	r3, [pc, #424]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009252:	ed97 6a03 	vldr	s12, [r7, #12]
 8009256:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800925a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009272:	e065      	b.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009286:	4b59      	ldr	r3, [pc, #356]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009296:	ed97 6a03 	vldr	s12, [r7, #12]
 800929a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800929e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092b6:	e043      	b.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80092c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ca:	4b48      	ldr	r3, [pc, #288]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092da:	ed97 6a03 	vldr	s12, [r7, #12]
 80092de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092fa:	e021      	b.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b37      	ldr	r3, [pc, #220]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800933e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009340:	4b2a      	ldr	r3, [pc, #168]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009344:	0a5b      	lsrs	r3, r3, #9
 8009346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935a:	edd7 6a07 	vldr	s13, [r7, #28]
 800935e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009366:	ee17 2a90 	vmov	r2, s15
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800936e:	4b1f      	ldr	r3, [pc, #124]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	0c1b      	lsrs	r3, r3, #16
 8009374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009388:	edd7 6a07 	vldr	s13, [r7, #28]
 800938c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009394:	ee17 2a90 	vmov	r2, s15
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800939c:	4b13      	ldr	r3, [pc, #76]	@ (80093ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a0:	0e1b      	lsrs	r3, r3, #24
 80093a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093c2:	ee17 2a90 	vmov	r2, s15
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80093ca:	e008      	b.n	80093de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	609a      	str	r2, [r3, #8]
}
 80093de:	bf00      	nop
 80093e0:	3724      	adds	r7, #36	@ 0x24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	58024400 	.word	0x58024400
 80093f0:	03d09000 	.word	0x03d09000
 80093f4:	46000000 	.word	0x46000000
 80093f8:	4c742400 	.word	0x4c742400
 80093fc:	4a742400 	.word	0x4a742400
 8009400:	4bbebc20 	.word	0x4bbebc20

08009404 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009404:	b480      	push	{r7}
 8009406:	b089      	sub	sp, #36	@ 0x24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800940c:	4ba0      	ldr	r3, [pc, #640]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800940e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009410:	f003 0303 	and.w	r3, r3, #3
 8009414:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009416:	4b9e      	ldr	r3, [pc, #632]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941a:	091b      	lsrs	r3, r3, #4
 800941c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009420:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009422:	4b9b      	ldr	r3, [pc, #620]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800942c:	4b98      	ldr	r3, [pc, #608]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800942e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009430:	08db      	lsrs	r3, r3, #3
 8009432:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009444:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8111 	beq.w	8009672 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b02      	cmp	r3, #2
 8009454:	f000 8083 	beq.w	800955e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b02      	cmp	r3, #2
 800945c:	f200 80a1 	bhi.w	80095a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d056      	beq.n	800951a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800946c:	e099      	b.n	80095a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800946e:	4b88      	ldr	r3, [pc, #544]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d02d      	beq.n	80094d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800947a:	4b85      	ldr	r3, [pc, #532]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	08db      	lsrs	r3, r3, #3
 8009480:	f003 0303 	and.w	r3, r3, #3
 8009484:	4a83      	ldr	r2, [pc, #524]	@ (8009694 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009486:	fa22 f303 	lsr.w	r3, r2, r3
 800948a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	ee07 3a90 	vmov	s15, r3
 800949c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a4:	4b7a      	ldr	r3, [pc, #488]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094d4:	e087      	b.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	ee07 3a90 	vmov	s15, r3
 80094dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800969c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e8:	4b69      	ldr	r3, [pc, #420]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f0:	ee07 3a90 	vmov	s15, r3
 80094f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800950c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009518:	e065      	b.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	ee07 3a90 	vmov	s15, r3
 8009520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009524:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80096a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952c:	4b58      	ldr	r3, [pc, #352]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800952e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009540:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800955c:	e043      	b.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009568:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80096a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800956c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009570:	4b47      	ldr	r3, [pc, #284]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009578:	ee07 3a90 	vmov	s15, r3
 800957c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009580:	ed97 6a03 	vldr	s12, [r7, #12]
 8009584:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a0:	e021      	b.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800969c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b4:	4b36      	ldr	r3, [pc, #216]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80095e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ea:	0a5b      	lsrs	r3, r3, #9
 80095ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009600:	edd7 6a07 	vldr	s13, [r7, #28]
 8009604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800960c:	ee17 2a90 	vmov	r2, s15
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009614:	4b1e      	ldr	r3, [pc, #120]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009618:	0c1b      	lsrs	r3, r3, #16
 800961a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800962a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800962e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800963a:	ee17 2a90 	vmov	r2, s15
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009642:	4b13      	ldr	r3, [pc, #76]	@ (8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009646:	0e1b      	lsrs	r3, r3, #24
 8009648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800965c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009668:	ee17 2a90 	vmov	r2, s15
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009670:	e008      	b.n	8009684 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	609a      	str	r2, [r3, #8]
}
 8009684:	bf00      	nop
 8009686:	3724      	adds	r7, #36	@ 0x24
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	58024400 	.word	0x58024400
 8009694:	03d09000 	.word	0x03d09000
 8009698:	46000000 	.word	0x46000000
 800969c:	4c742400 	.word	0x4c742400
 80096a0:	4a742400 	.word	0x4a742400
 80096a4:	4bbebc20 	.word	0x4bbebc20

080096a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096b6:	4b53      	ldr	r3, [pc, #332]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d101      	bne.n	80096c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e099      	b.n	80097fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a4e      	ldr	r2, [pc, #312]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80096cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d2:	f7fa fc5b 	bl	8003f8c <HAL_GetTick>
 80096d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096d8:	e008      	b.n	80096ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096da:	f7fa fc57 	bl	8003f8c <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d901      	bls.n	80096ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e086      	b.n	80097fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096ec:	4b45      	ldr	r3, [pc, #276]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f0      	bne.n	80096da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80096f8:	4b42      	ldr	r3, [pc, #264]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	031b      	lsls	r3, r3, #12
 8009706:	493f      	ldr	r1, [pc, #252]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009708:	4313      	orrs	r3, r2
 800970a:	628b      	str	r3, [r1, #40]	@ 0x28
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	3b01      	subs	r3, #1
 8009712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	3b01      	subs	r3, #1
 800971c:	025b      	lsls	r3, r3, #9
 800971e:	b29b      	uxth	r3, r3
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	3b01      	subs	r3, #1
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800972e:	431a      	orrs	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	3b01      	subs	r3, #1
 8009736:	061b      	lsls	r3, r3, #24
 8009738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800973c:	4931      	ldr	r1, [pc, #196]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 800973e:	4313      	orrs	r3, r2
 8009740:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009742:	4b30      	ldr	r3, [pc, #192]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	492d      	ldr	r1, [pc, #180]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009750:	4313      	orrs	r3, r2
 8009752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009754:	4b2b      	ldr	r3, [pc, #172]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009758:	f023 0220 	bic.w	r2, r3, #32
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	4928      	ldr	r1, [pc, #160]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009762:	4313      	orrs	r3, r2
 8009764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009766:	4b27      	ldr	r3, [pc, #156]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	4a26      	ldr	r2, [pc, #152]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 800976c:	f023 0310 	bic.w	r3, r3, #16
 8009770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009772:	4b24      	ldr	r3, [pc, #144]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009776:	4b24      	ldr	r3, [pc, #144]	@ (8009808 <RCCEx_PLL2_Config+0x160>)
 8009778:	4013      	ands	r3, r2
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	69d2      	ldr	r2, [r2, #28]
 800977e:	00d2      	lsls	r2, r2, #3
 8009780:	4920      	ldr	r1, [pc, #128]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009782:	4313      	orrs	r3, r2
 8009784:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009786:	4b1f      	ldr	r3, [pc, #124]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	4a1e      	ldr	r2, [pc, #120]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 800978c:	f043 0310 	orr.w	r3, r3, #16
 8009790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009798:	4b1a      	ldr	r3, [pc, #104]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 800979a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979c:	4a19      	ldr	r2, [pc, #100]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 800979e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097a4:	e00f      	b.n	80097c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d106      	bne.n	80097ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80097ac:	4b15      	ldr	r3, [pc, #84]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	4a14      	ldr	r2, [pc, #80]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097b8:	e005      	b.n	80097c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80097ba:	4b12      	ldr	r3, [pc, #72]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	4a11      	ldr	r2, [pc, #68]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097d2:	f7fa fbdb 	bl	8003f8c <HAL_GetTick>
 80097d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097d8:	e008      	b.n	80097ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097da:	f7fa fbd7 	bl	8003f8c <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e006      	b.n	80097fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097ec:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <RCCEx_PLL2_Config+0x15c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0f0      	beq.n	80097da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
 8009808:	ffff0007 	.word	0xffff0007

0800980c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800981a:	4b53      	ldr	r3, [pc, #332]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d101      	bne.n	800982a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e099      	b.n	800995e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800982a:	4b4f      	ldr	r3, [pc, #316]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a4e      	ldr	r2, [pc, #312]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009836:	f7fa fba9 	bl	8003f8c <HAL_GetTick>
 800983a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800983c:	e008      	b.n	8009850 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800983e:	f7fa fba5 	bl	8003f8c <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e086      	b.n	800995e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009850:	4b45      	ldr	r3, [pc, #276]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f0      	bne.n	800983e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800985c:	4b42      	ldr	r3, [pc, #264]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	051b      	lsls	r3, r3, #20
 800986a:	493f      	ldr	r1, [pc, #252]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 800986c:	4313      	orrs	r3, r2
 800986e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	3b01      	subs	r3, #1
 8009876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	3b01      	subs	r3, #1
 8009880:	025b      	lsls	r3, r3, #9
 8009882:	b29b      	uxth	r3, r3
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	3b01      	subs	r3, #1
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	3b01      	subs	r3, #1
 800989a:	061b      	lsls	r3, r3, #24
 800989c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098a0:	4931      	ldr	r1, [pc, #196]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098a6:	4b30      	ldr	r3, [pc, #192]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	492d      	ldr	r1, [pc, #180]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80098b8:	4b2b      	ldr	r3, [pc, #172]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	4928      	ldr	r1, [pc, #160]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098ca:	4b27      	ldr	r3, [pc, #156]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	4a26      	ldr	r2, [pc, #152]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098d6:	4b24      	ldr	r3, [pc, #144]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098da:	4b24      	ldr	r3, [pc, #144]	@ (800996c <RCCEx_PLL3_Config+0x160>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	69d2      	ldr	r2, [r2, #28]
 80098e2:	00d2      	lsls	r2, r2, #3
 80098e4:	4920      	ldr	r1, [pc, #128]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009902:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009908:	e00f      	b.n	800992a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d106      	bne.n	800991e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009910:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009916:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800991a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800991c:	e005      	b.n	800992a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800991e:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009922:	4a11      	ldr	r2, [pc, #68]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009928:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800992a:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a0e      	ldr	r2, [pc, #56]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009936:	f7fa fb29 	bl	8003f8c <HAL_GetTick>
 800993a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800993c:	e008      	b.n	8009950 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800993e:	f7fa fb25 	bl	8003f8c <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d901      	bls.n	8009950 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e006      	b.n	800995e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009950:	4b05      	ldr	r3, [pc, #20]	@ (8009968 <RCCEx_PLL3_Config+0x15c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0f0      	beq.n	800993e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	58024400 	.word	0x58024400
 800996c:	ffff0007 	.word	0xffff0007

08009970 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	@ 0x28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e075      	b.n	8009a6e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d105      	bne.n	800999a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7f9 fcfd 	bl	8003394 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f868 	bl	8009a78 <HAL_SD_InitCard>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e05d      	b.n	8009a6e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fdaf 	bl	800a51c <HAL_SD_GetCardStatus>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e052      	b.n	8009a6e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80099c8:	7e3b      	ldrb	r3, [r7, #24]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80099ce:	7e7b      	ldrb	r3, [r7, #25]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d10a      	bne.n	80099f2 <HAL_SD_Init+0x82>
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d102      	bne.n	80099e8 <HAL_SD_Init+0x78>
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80099f0:	e00b      	b.n	8009a0a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d104      	bne.n	8009a04 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a00:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a02:	e002      	b.n	8009a0a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fe6d 	bl	800a6f0 <HAL_SD_ConfigWideBusOperation>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e026      	b.n	8009a6e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009a20:	f7fa fab4 	bl	8003f8c <HAL_GetTick>
 8009a24:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a26:	e011      	b.n	8009a4c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a28:	f7fa fab0 	bl	8003f8c <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d109      	bne.n	8009a4c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e010      	b.n	8009a6e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 ff61 	bl	800a914 <HAL_SD_GetCardState>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d1e7      	bne.n	8009a28 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	@ 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b08d      	sub	sp, #52	@ 0x34
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009a90:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009a94:	f04f 0100 	mov.w	r1, #0
 8009a98:	f7fe fc76 	bl	8008388 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e070      	b.n	8009b9a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	4a39      	ldr	r2, [pc, #228]	@ (8009ba4 <HAL_SD_InitCard+0x12c>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	091b      	lsrs	r3, r3, #4
 8009ac4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681c      	ldr	r4, [r3, #0]
 8009aca:	466a      	mov	r2, sp
 8009acc:	f107 0318 	add.w	r3, r7, #24
 8009ad0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ad4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ad8:	f107 030c 	add.w	r3, r7, #12
 8009adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f003 f916 	bl	800cd10 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f003 f959 	bl	800cda0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009b06:	4a28      	ldr	r2, [pc, #160]	@ (8009ba8 <HAL_SD_InitCard+0x130>)
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0e:	3301      	adds	r3, #1
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fa fa47 	bl	8003fa4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 ffea 	bl	800aaf0 <SD_PowerON>
 8009b1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e02e      	b.n	8009b9a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 ff09 	bl	800a954 <SD_InitCard>
 8009b42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00b      	beq.n	8009b62 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e01b      	b.n	8009b9a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f003 f9ae 	bl	800cecc <SDMMC_CmdBlockLength>
 8009b70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00f      	beq.n	8009b98 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8009bac <HAL_SD_InitCard+0x134>)
 8009b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	372c      	adds	r7, #44	@ 0x2c
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd90      	pop	{r4, r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	014f8b59 	.word	0x014f8b59
 8009ba8:	00012110 	.word	0x00012110
 8009bac:	1fe00fff 	.word	0x1fe00fff

08009bb0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	@ 0x30
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d107      	bne.n	8009bd8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bcc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e08d      	b.n	8009cf4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	f040 8086 	bne.w	8009cf2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	441a      	add	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d907      	bls.n	8009c0a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bfe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e074      	b.n	8009cf4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2203      	movs	r2, #3
 8009c0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2200      	movs	r2, #0
 8009c18:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	025a      	lsls	r2, r3, #9
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d002      	beq.n	8009c36 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	025b      	lsls	r3, r3, #9
 8009c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c36:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	025b      	lsls	r3, r3, #9
 8009c40:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c42:	2390      	movs	r3, #144	@ 0x90
 8009c44:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c46:	2302      	movs	r3, #2
 8009c48:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f107 0210 	add.w	r2, r7, #16
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f003 f909 	bl	800ce74 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c70:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d90a      	bls.n	8009c9e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2282      	movs	r2, #130	@ 0x82
 8009c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c94:	4618      	mov	r0, r3
 8009c96:	f003 f95f 	bl	800cf58 <SDMMC_CmdReadMultiBlock>
 8009c9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009c9c:	e009      	b.n	8009cb2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2281      	movs	r2, #129	@ 0x81
 8009ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009caa:	4618      	mov	r0, r3
 8009cac:	f003 f931 	bl	800cf12 <SDMMC_CmdReadSingleBlock>
 8009cb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d012      	beq.n	8009cde <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8009cfc <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e00a      	b.n	8009cf4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009cec:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e000      	b.n	8009cf4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009cf2:	2302      	movs	r3, #2
  }
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3730      	adds	r7, #48	@ 0x30
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	1fe00fff 	.word	0x1fe00fff

08009d00 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08c      	sub	sp, #48	@ 0x30
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d107      	bne.n	8009d28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e08d      	b.n	8009e44 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	f040 8086 	bne.w	8009e42 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	441a      	add	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d907      	bls.n	8009d5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e074      	b.n	8009e44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	025a      	lsls	r2, r3, #9
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d002      	beq.n	8009d86 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	025b      	lsls	r3, r3, #9
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d86:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	025b      	lsls	r3, r3, #9
 8009d90:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009d92:	2390      	movs	r3, #144	@ 0x90
 8009d94:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f107 0210 	add.w	r2, r7, #16
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f003 f861 	bl	800ce74 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dc0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d90a      	bls.n	8009dee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	22a0      	movs	r2, #160	@ 0xa0
 8009ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009de4:	4618      	mov	r0, r3
 8009de6:	f003 f8fd 	bl	800cfe4 <SDMMC_CmdWriteMultiBlock>
 8009dea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009dec:	e009      	b.n	8009e02 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2290      	movs	r2, #144	@ 0x90
 8009df2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f003 f8cf 	bl	800cf9e <SDMMC_CmdWriteSingleBlock>
 8009e00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d012      	beq.n	8009e2e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8009e4c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	431a      	orrs	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e00a      	b.n	8009e44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8009e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e000      	b.n	8009e44 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009e42:	2302      	movs	r3, #2
  }
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3730      	adds	r7, #48	@ 0x30
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	1fe00fff 	.word	0x1fe00fff

08009e50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_SD_IRQHandler+0x2e>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 f926 	bl	800b0c8 <SD_Read_IT>
 8009e7c:	e19a      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 80ac 	beq.w	8009fe6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b59      	ldr	r3, [pc, #356]	@ (800a008 <HAL_SD_IRQHandler+0x1b8>)
 8009ea4:	400b      	ands	r3, r1
 8009ea6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ec6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d038      	beq.n	8009f44 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <HAL_SD_IRQHandler+0x96>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f003 f89e 	bl	800d02c <SDMMC_CmdStopTransfer>
 8009ef0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f95b 	bl	800a1c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800a00c <HAL_SD_IRQHandler+0x1bc>)
 8009f10:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <HAL_SD_IRQHandler+0xe4>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f003 fd2b 	bl	800d990 <HAL_SD_RxCpltCallback>
 8009f3a:	e13b      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f003 fd1d 	bl	800d97c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f42:	e137      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8132 	beq.w	800a1b4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2200      	movs	r2, #0
 8009f56:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2200      	movs	r2, #0
 8009f66:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <HAL_SD_IRQHandler+0x12c>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d011      	beq.n	8009fa0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f003 f853 	bl	800d02c <SDMMC_CmdStopTransfer>
 8009f86:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f910 	bl	800a1c0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d104      	bne.n	8009fc2 <HAL_SD_IRQHandler+0x172>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f003 fcda 	bl	800d97c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <HAL_SD_IRQHandler+0x18e>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80eb 	beq.w	800a1b4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f003 fcd6 	bl	800d990 <HAL_SD_RxCpltCallback>
}
 8009fe4:	e0e6      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00d      	beq.n	800a010 <HAL_SD_IRQHandler+0x1c0>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0308 	and.w	r3, r3, #8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 f8a8 	bl	800b154 <SD_Write_IT>
 800a004:	e0d6      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
 800a006:	bf00      	nop
 800a008:	ffff3ec5 	.word	0xffff3ec5
 800a00c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a016:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 809d 	beq.w	800a15a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d005      	beq.n	800a03a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a032:	f043 0202 	orr.w	r2, r3, #2
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a040:	f003 0308 	and.w	r3, r3, #8
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a04c:	f043 0208 	orr.w	r2, r3, #8
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a066:	f043 0220 	orr.w	r2, r3, #32
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a080:	f043 0210 	orr.w	r2, r3, #16
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a4b      	ldr	r2, [pc, #300]	@ (800a1bc <HAL_SD_IRQHandler+0x36c>)
 800a08e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a09e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0ae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a0be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68da      	ldr	r2, [r3, #12]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a0ce:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f002 ffa9 	bl	800d02c <SDMMC_CmdStopTransfer>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0f4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f851 	bl	800a1c0 <HAL_SD_ErrorCallback>
}
 800a11e:	e049      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a126:	2b00      	cmp	r3, #0
 800a128:	d044      	beq.n	800a1b4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d040      	beq.n	800a1b4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a140:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f834 	bl	800a1c0 <HAL_SD_ErrorCallback>
}
 800a158:	e02c      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d025      	beq.n	800a1b4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a170:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10c      	bne.n	800a19a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 f84a 	bl	800b224 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a190:	e010      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 f832 	bl	800b1fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a198:	e00c      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f003 0320 	and.w	r3, r3, #32
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 f833 	bl	800b210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a1aa:	e003      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 f81b 	bl	800b1e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a1b2:	e7ff      	b.n	800a1b4 <HAL_SD_IRQHandler+0x364>
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	18000f3a 	.word	0x18000f3a

0800a1c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1e2:	0f9b      	lsrs	r3, r3, #30
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ee:	0e9b      	lsrs	r3, r3, #26
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a200:	0e1b      	lsrs	r3, r3, #24
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a212:	0c1b      	lsrs	r3, r3, #16
 800a214:	b2da      	uxtb	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a21e:	0a1b      	lsrs	r3, r3, #8
 800a220:	b2da      	uxtb	r2, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a234:	0d1b      	lsrs	r3, r3, #20
 800a236:	b29a      	uxth	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a240:	0c1b      	lsrs	r3, r3, #16
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a252:	0bdb      	lsrs	r3, r3, #15
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a264:	0b9b      	lsrs	r3, r3, #14
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a276:	0b5b      	lsrs	r3, r3, #13
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a288:	0b1b      	lsrs	r3, r3, #12
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	b2da      	uxtb	r2, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2200      	movs	r2, #0
 800a29a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d163      	bne.n	800a36c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a8:	009a      	lsls	r2, r3, #2
 800a2aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a2b4:	0f92      	lsrs	r2, r2, #30
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2c0:	0edb      	lsrs	r3, r3, #27
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d2:	0e1b      	lsrs	r3, r3, #24
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e4:	0d5b      	lsrs	r3, r3, #21
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f6:	0c9b      	lsrs	r3, r3, #18
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a308:	0bdb      	lsrs	r3, r3, #15
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f003 0307 	and.w	r3, r3, #7
 800a310:	b2da      	uxtb	r2, r3
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	7e1b      	ldrb	r3, [r3, #24]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	3302      	adds	r3, #2
 800a32c:	2201      	movs	r2, #1
 800a32e:	fa02 f303 	lsl.w	r3, r2, r3
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a336:	fb03 f202 	mul.w	r2, r3, r2
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	7a1b      	ldrb	r3, [r3, #8]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 030f 	and.w	r3, r3, #15
 800a348:	2201      	movs	r2, #1
 800a34a:	409a      	lsls	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a358:	0a52      	lsrs	r2, r2, #9
 800a35a:	fb03 f202 	mul.w	r2, r3, r2
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a368:	655a      	str	r2, [r3, #84]	@ 0x54
 800a36a:	e031      	b.n	800a3d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a370:	2b01      	cmp	r3, #1
 800a372:	d11d      	bne.n	800a3b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	431a      	orrs	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	3301      	adds	r3, #1
 800a390:	029a      	lsls	r2, r3, #10
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3ae:	e00f      	b.n	800a3d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a58      	ldr	r2, [pc, #352]	@ (800a518 <HAL_SD_GetCardCSD+0x344>)
 800a3b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e09d      	b.n	800a50c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d4:	0b9b      	lsrs	r3, r3, #14
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e6:	09db      	lsrs	r3, r3, #7
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a408:	0fdb      	lsrs	r3, r3, #31
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a414:	0f5b      	lsrs	r3, r3, #29
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a426:	0e9b      	lsrs	r3, r3, #26
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a438:	0d9b      	lsrs	r3, r3, #22
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	b2da      	uxtb	r2, r3
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a44a:	0d5b      	lsrs	r3, r3, #21
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	b2da      	uxtb	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a466:	0c1b      	lsrs	r3, r3, #16
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a47a:	0bdb      	lsrs	r3, r3, #15
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a48e:	0b9b      	lsrs	r3, r3, #14
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4a2:	0b5b      	lsrs	r3, r3, #13
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4b6:	0b1b      	lsrs	r3, r3, #12
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4ca:	0a9b      	lsrs	r3, r3, #10
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	1fe00fff 	.word	0x1fe00fff

0800a51c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b094      	sub	sp, #80	@ 0x50
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b03      	cmp	r3, #3
 800a536:	d101      	bne.n	800a53c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e0a7      	b.n	800a68c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a53c:	f107 0308 	add.w	r3, r7, #8
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fb62 	bl	800ac0c <SD_SendSDStatus>
 800a548:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d011      	beq.n	800a574 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a4f      	ldr	r2, [pc, #316]	@ (800a694 <HAL_SD_GetCardStatus+0x178>)
 800a556:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a55c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a572:	e070      	b.n	800a656 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	099b      	lsrs	r3, r3, #6
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	095b      	lsrs	r3, r3, #5
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	0a1b      	lsrs	r3, r3, #8
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	0e1b      	lsrs	r3, r3, #24
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	061a      	lsls	r2, r3, #24
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	021b      	lsls	r3, r3, #8
 800a5b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a5ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0a1b      	lsrs	r3, r3, #8
 800a5c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	0e1b      	lsrs	r3, r3, #24
 800a5ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	0d1b      	lsrs	r3, r3, #20
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	0c1b      	lsrs	r3, r3, #16
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	b29b      	uxth	r3, r3
 800a602:	b2db      	uxtb	r3, r3
 800a604:	b29b      	uxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b29a      	uxth	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	0a9b      	lsrs	r3, r3, #10
 800a612:	b2db      	uxtb	r3, r3
 800a614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	0a1b      	lsrs	r3, r3, #8
 800a622:	b2db      	uxtb	r3, r3
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	091b      	lsrs	r3, r3, #4
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	b2da      	uxtb	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	0e1b      	lsrs	r3, r3, #24
 800a650:	b2da      	uxtb	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 fc34 	bl	800cecc <SDMMC_CmdBlockLength>
 800a664:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00d      	beq.n	800a688 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a08      	ldr	r2, [pc, #32]	@ (800a694 <HAL_SD_GetCardStatus+0x178>)
 800a672:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a678:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a688:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3750      	adds	r7, #80	@ 0x50
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	1fe00fff 	.word	0x1fe00fff

0800a698 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b08d      	sub	sp, #52	@ 0x34
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2203      	movs	r2, #3
 800a704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d02e      	beq.n	800a76e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a716:	d106      	bne.n	800a726 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a71c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	635a      	str	r2, [r3, #52]	@ 0x34
 800a724:	e029      	b.n	800a77a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a72c:	d10a      	bne.n	800a744 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fb64 	bl	800adfc <SD_WideBus_Enable>
 800a734:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	431a      	orrs	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	635a      	str	r2, [r3, #52]	@ 0x34
 800a742:	e01a      	b.n	800a77a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fba1 	bl	800ae92 <SD_WideBus_Disable>
 800a750:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	431a      	orrs	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a75e:	e00c      	b.n	800a77a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a764:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	635a      	str	r2, [r3, #52]	@ 0x34
 800a76c:	e005      	b.n	800a77a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a772:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a5f      	ldr	r2, [pc, #380]	@ (800a904 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a788:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a790:	e096      	b.n	800a8c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a792:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a796:	f04f 0100 	mov.w	r1, #0
 800a79a:	f7fd fdf5 	bl	8008388 <HAL_RCCEx_GetPeriphCLKFreq>
 800a79e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8083 	beq.w	800a8ae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695a      	ldr	r2, [r3, #20]
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4950      	ldr	r1, [pc, #320]	@ (800a908 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a7c6:	fba1 1303 	umull	r1, r3, r1, r3
 800a7ca:	0e1b      	lsrs	r3, r3, #24
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d303      	bcc.n	800a7d8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	e05a      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e0:	d103      	bne.n	800a7ea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	61bb      	str	r3, [r7, #24]
 800a7e8:	e051      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f2:	d126      	bne.n	800a842 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10e      	bne.n	800a81a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	4a43      	ldr	r2, [pc, #268]	@ (800a90c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d906      	bls.n	800a812 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	4a40      	ldr	r2, [pc, #256]	@ (800a908 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a808:	fba2 2303 	umull	r2, r3, r2, r3
 800a80c:	0e5b      	lsrs	r3, r3, #25
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	e03d      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	61bb      	str	r3, [r7, #24]
 800a818:	e039      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	69fa      	ldr	r2, [r7, #28]
 800a822:	fbb2 f3f3 	udiv	r3, r2, r3
 800a826:	4a39      	ldr	r2, [pc, #228]	@ (800a90c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d906      	bls.n	800a83a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	4a36      	ldr	r2, [pc, #216]	@ (800a908 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	0e5b      	lsrs	r3, r3, #25
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	e029      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	e025      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10e      	bne.n	800a868 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	4a30      	ldr	r2, [pc, #192]	@ (800a910 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d906      	bls.n	800a860 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	4a2c      	ldr	r2, [pc, #176]	@ (800a908 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a856:	fba2 2303 	umull	r2, r3, r2, r3
 800a85a:	0e1b      	lsrs	r3, r3, #24
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	e016      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	e012      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	69fa      	ldr	r2, [r7, #28]
 800a870:	fbb2 f3f3 	udiv	r3, r2, r3
 800a874:	4a26      	ldr	r2, [pc, #152]	@ (800a910 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d906      	bls.n	800a888 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	4a22      	ldr	r2, [pc, #136]	@ (800a908 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	0e1b      	lsrs	r3, r3, #24
 800a884:	61bb      	str	r3, [r7, #24]
 800a886:	e002      	b.n	800a88e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681c      	ldr	r4, [r3, #0]
 800a892:	466a      	mov	r2, sp
 800a894:	f107 0314 	add.w	r3, r7, #20
 800a898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a89c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f002 fa32 	bl	800cd10 <SDMMC_Init>
 800a8ac:	e008      	b.n	800a8c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f002 faff 	bl	800cecc <SDMMC_CmdBlockLength>
 800a8ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00c      	beq.n	800a8f0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a0a      	ldr	r2, [pc, #40]	@ (800a904 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a8dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	372c      	adds	r7, #44	@ 0x2c
 800a900:	46bd      	mov	sp, r7
 800a902:	bd90      	pop	{r4, r7, pc}
 800a904:	1fe00fff 	.word	0x1fe00fff
 800a908:	55e63b89 	.word	0x55e63b89
 800a90c:	02faf080 	.word	0x02faf080
 800a910:	017d7840 	.word	0x017d7840

0800a914 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a920:	f107 030c 	add.w	r3, r7, #12
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa40 	bl	800adac <SD_SendStatus>
 800a92c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d005      	beq.n	800a940 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0a5b      	lsrs	r3, r3, #9
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a94a:	693b      	ldr	r3, [r7, #16]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b090      	sub	sp, #64	@ 0x40
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a960:	f7f9 fb14 	bl	8003f8c <HAL_GetTick>
 800a964:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f002 fa29 	bl	800cdc2 <SDMMC_GetPowerState>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a976:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a97a:	e0b5      	b.n	800aae8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a980:	2b03      	cmp	r3, #3
 800a982:	d02e      	beq.n	800a9e2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	f002 fc74 	bl	800d276 <SDMMC_CmdSendCID>
 800a98e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <SD_InitCard+0x46>
    {
      return errorstate;
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	e0a6      	b.n	800aae8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f002 fa54 	bl	800ce4e <SDMMC_GetResponse>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2104      	movs	r1, #4
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 fa4b 	bl	800ce4e <SDMMC_GetResponse>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2108      	movs	r1, #8
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f002 fa42 	bl	800ce4e <SDMMC_GetResponse>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	210c      	movs	r1, #12
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 fa39 	bl	800ce4e <SDMMC_GetResponse>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d01d      	beq.n	800aa26 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a9ea:	e019      	b.n	800aa20 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f107 020a 	add.w	r2, r7, #10
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f002 fc7c 	bl	800d2f4 <SDMMC_CmdSetRelAdd>
 800a9fc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <SD_InitCard+0xb4>
      {
        return errorstate;
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	e06f      	b.n	800aae8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800aa08:	f7f9 fac0 	bl	8003f8c <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3287 	movw	r2, #4999	@ 0x1387
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d902      	bls.n	800aa20 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800aa1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa1e:	e063      	b.n	800aae8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800aa20:	897b      	ldrh	r3, [r7, #10]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0e2      	beq.n	800a9ec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d036      	beq.n	800aa9c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa2e:	897b      	ldrh	r3, [r7, #10]
 800aa30:	461a      	mov	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa3e:	041b      	lsls	r3, r3, #16
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f002 fc36 	bl	800d2b4 <SDMMC_CmdSendCSD>
 800aa48:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <SD_InitCard+0x100>
    {
      return errorstate;
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	e049      	b.n	800aae8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f002 f9f7 	bl	800ce4e <SDMMC_GetResponse>
 800aa60:	4602      	mov	r2, r0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 f9ee 	bl	800ce4e <SDMMC_GetResponse>
 800aa72:	4602      	mov	r2, r0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2108      	movs	r1, #8
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f002 f9e5 	bl	800ce4e <SDMMC_GetResponse>
 800aa84:	4602      	mov	r2, r0
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	210c      	movs	r1, #12
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 f9dc 	bl	800ce4e <SDMMC_GetResponse>
 800aa96:	4602      	mov	r2, r0
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2104      	movs	r1, #4
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f002 f9d3 	bl	800ce4e <SDMMC_GetResponse>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	0d1a      	lsrs	r2, r3, #20
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aab0:	f107 030c 	add.w	r3, r7, #12
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff fb8c 	bl	800a1d4 <HAL_SD_GetCardCSD>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aac6:	e00f      	b.n	800aae8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad0:	041b      	lsls	r3, r3, #16
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f002 fae5 	bl	800d0a4 <SDMMC_CmdSelDesel>
 800aada:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <SD_InitCard+0x192>
  {
    return errorstate;
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	e000      	b.n	800aae8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3740      	adds	r7, #64	@ 0x40
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f002 faee 	bl	800d0ea <SDMMC_CmdGoIdleState>
 800ab0e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	e072      	b.n	800ac00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 fb01 	bl	800d126 <SDMMC_CmdOperCond>
 800ab24:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab2c:	d10d      	bne.n	800ab4a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f002 fad6 	bl	800d0ea <SDMMC_CmdGoIdleState>
 800ab3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d004      	beq.n	800ab50 <SD_PowerON+0x60>
    {
      return errorstate;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	e05a      	b.n	800ac00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d137      	bne.n	800abc8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 fb01 	bl	800d166 <SDMMC_CmdAppCommand>
 800ab64:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02d      	beq.n	800abc8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab70:	e046      	b.n	800ac00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2100      	movs	r1, #0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f002 faf4 	bl	800d166 <SDMMC_CmdAppCommand>
 800ab7e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <SD_PowerON+0x9a>
    {
      return errorstate;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	e03a      	b.n	800ac00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	491e      	ldr	r1, [pc, #120]	@ (800ac08 <SD_PowerON+0x118>)
 800ab90:	4618      	mov	r0, r3
 800ab92:	f002 fb0b 	bl	800d1ac <SDMMC_CmdAppOperCommand>
 800ab96:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aba2:	e02d      	b.n	800ac00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f002 f94f 	bl	800ce4e <SDMMC_GetResponse>
 800abb0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	0fdb      	lsrs	r3, r3, #31
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <SD_PowerON+0xce>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <SD_PowerON+0xd0>
 800abbe:	2300      	movs	r3, #0
 800abc0:	613b      	str	r3, [r7, #16]

    count++;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800abce:	4293      	cmp	r3, r2
 800abd0:	d802      	bhi.n	800abd8 <SD_PowerON+0xe8>
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0cc      	beq.n	800ab72 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800abde:	4293      	cmp	r3, r2
 800abe0:	d902      	bls.n	800abe8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800abe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800abe6:	e00b      	b.n	800ac00 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	c1100000 	.word	0xc1100000

0800ac0c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	@ 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ac16:	f7f9 f9b9 	bl	8003f8c <HAL_GetTick>
 800ac1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f002 f911 	bl	800ce4e <SDMMC_GetResponse>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac36:	d102      	bne.n	800ac3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac3c:	e0b0      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2140      	movs	r1, #64	@ 0x40
 800ac44:	4618      	mov	r0, r3
 800ac46:	f002 f941 	bl	800cecc <SDMMC_CmdBlockLength>
 800ac4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d005      	beq.n	800ac5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	e0a0      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac66:	041b      	lsls	r3, r3, #16
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f002 fa7b 	bl	800d166 <SDMMC_CmdAppCommand>
 800ac70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d005      	beq.n	800ac84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	e08d      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ac8a:	2340      	movs	r3, #64	@ 0x40
 800ac8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ac8e:	2360      	movs	r3, #96	@ 0x60
 800ac90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac92:	2302      	movs	r3, #2
 800ac94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f107 0208 	add.w	r2, r7, #8
 800aca6:	4611      	mov	r1, r2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f002 f8e3 	bl	800ce74 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f002 fb63 	bl	800d37e <SDMMC_CmdStatusRegister>
 800acb8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d02b      	beq.n	800ad18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	e069      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d013      	beq.n	800ad02 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800acda:	2300      	movs	r3, #0
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acde:	e00d      	b.n	800acfc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 f83d 	bl	800cd64 <SDMMC_ReadFIFO>
 800acea:	4602      	mov	r2, r0
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	601a      	str	r2, [r3, #0]
        pData++;
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	3304      	adds	r3, #4
 800acf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800acf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf8:	3301      	adds	r3, #1
 800acfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	2b07      	cmp	r3, #7
 800ad00:	d9ee      	bls.n	800ace0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ad02:	f7f9 f943 	bl	8003f8c <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d102      	bne.n	800ad18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ad12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad16:	e043      	b.n	800ada0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0d2      	beq.n	800accc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ad34:	2308      	movs	r3, #8
 800ad36:	e033      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	e02a      	b.n	800ada0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad50:	f003 0320 	and.w	r3, r3, #32
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d017      	beq.n	800ad88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ad58:	2320      	movs	r3, #32
 800ad5a:	e021      	b.n	800ada0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 ffff 	bl	800cd64 <SDMMC_ReadFIFO>
 800ad66:	4602      	mov	r2, r0
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	601a      	str	r2, [r3, #0]
    pData++;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	3304      	adds	r3, #4
 800ad70:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ad72:	f7f9 f90b 	bl	8003f8c <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad80:	d102      	bne.n	800ad88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ad82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad86:	e00b      	b.n	800ada0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e2      	bne.n	800ad5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a03      	ldr	r2, [pc, #12]	@ (800ada8 <SD_SendSDStatus+0x19c>)
 800ad9c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3730      	adds	r7, #48	@ 0x30
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	18000f3a 	.word	0x18000f3a

0800adac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800adbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800adc0:	e018      	b.n	800adf4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adca:	041b      	lsls	r3, r3, #16
 800adcc:	4619      	mov	r1, r3
 800adce:	4610      	mov	r0, r2
 800add0:	f002 fab2 	bl	800d338 <SDMMC_CmdSendStatus>
 800add4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	e009      	b.n	800adf4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f002 f831 	bl	800ce4e <SDMMC_GetResponse>
 800adec:	4602      	mov	r2, r0
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2100      	movs	r1, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f002 f81b 	bl	800ce4e <SDMMC_GetResponse>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae22:	d102      	bne.n	800ae2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae28:	e02f      	b.n	800ae8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae2a:	f107 030c 	add.w	r3, r7, #12
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f879 	bl	800af28 <SD_FindSCR>
 800ae36:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	e023      	b.n	800ae8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01c      	beq.n	800ae86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f002 f984 	bl	800d166 <SDMMC_CmdAppCommand>
 800ae5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	e00f      	b.n	800ae8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2102      	movs	r1, #2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f002 f9bb 	bl	800d1ec <SDMMC_CmdBusWidth>
 800ae76:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	e003      	b.n	800ae8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	e001      	b.n	800ae8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f001 ffd0 	bl	800ce4e <SDMMC_GetResponse>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aeb8:	d102      	bne.n	800aec0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aeba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aebe:	e02f      	b.n	800af20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f82e 	bl	800af28 <SD_FindSCR>
 800aecc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	e023      	b.n	800af20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d01c      	beq.n	800af1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeea:	041b      	lsls	r3, r3, #16
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f002 f939 	bl	800d166 <SDMMC_CmdAppCommand>
 800aef4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	e00f      	b.n	800af20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f002 f970 	bl	800d1ec <SDMMC_CmdBusWidth>
 800af0c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	e003      	b.n	800af20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af18:	2300      	movs	r3, #0
 800af1a:	e001      	b.n	800af20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af1c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08e      	sub	sp, #56	@ 0x38
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af32:	f7f9 f82b 	bl	8003f8c <HAL_GetTick>
 800af36:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2108      	movs	r1, #8
 800af4e:	4618      	mov	r0, r3
 800af50:	f001 ffbc 	bl	800cecc <SDMMC_CmdBlockLength>
 800af54:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5e:	e0ad      	b.n	800b0bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af68:	041b      	lsls	r3, r3, #16
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f002 f8fa 	bl	800d166 <SDMMC_CmdAppCommand>
 800af72:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	e09e      	b.n	800b0bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af7e:	f04f 33ff 	mov.w	r3, #4294967295
 800af82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800af84:	2308      	movs	r3, #8
 800af86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800af88:	2330      	movs	r3, #48	@ 0x30
 800af8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af8c:	2302      	movs	r3, #2
 800af8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af90:	2300      	movs	r3, #0
 800af92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af94:	2301      	movs	r3, #1
 800af96:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f107 0210 	add.w	r2, r7, #16
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f001 ff66 	bl	800ce74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4618      	mov	r0, r3
 800afae:	f002 f940 	bl	800d232 <SDMMC_CmdSendSCR>
 800afb2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800afb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d027      	beq.n	800b00a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800afba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbc:	e07e      	b.n	800b0bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d113      	bne.n	800aff4 <SD_FindSCR+0xcc>
 800afcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d110      	bne.n	800aff4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 fec4 	bl	800cd64 <SDMMC_ReadFIFO>
 800afdc:	4603      	mov	r3, r0
 800afde:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f001 febd 	bl	800cd64 <SDMMC_ReadFIFO>
 800afea:	4603      	mov	r3, r0
 800afec:	60fb      	str	r3, [r7, #12]
      index++;
 800afee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff0:	3301      	adds	r3, #1
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aff4:	f7f8 ffca 	bl	8003f8c <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b002:	d102      	bne.n	800b00a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b008:	e058      	b.n	800b0bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b010:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b014:	4013      	ands	r3, r2
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0d1      	beq.n	800afbe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d005      	beq.n	800b034 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2208      	movs	r2, #8
 800b02e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b030:	2308      	movs	r3, #8
 800b032:	e043      	b.n	800b0bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2202      	movs	r2, #2
 800b048:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b04a:	2302      	movs	r3, #2
 800b04c:	e036      	b.n	800b0bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2220      	movs	r2, #32
 800b062:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b064:	2320      	movs	r3, #32
 800b066:	e029      	b.n	800b0bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a15      	ldr	r2, [pc, #84]	@ (800b0c4 <SD_FindSCR+0x19c>)
 800b06e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	061a      	lsls	r2, r3, #24
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b07c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	0a1b      	lsrs	r3, r3, #8
 800b082:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b086:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	0e1b      	lsrs	r3, r3, #24
 800b08c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b090:	601a      	str	r2, [r3, #0]
    scr++;
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	3304      	adds	r3, #4
 800b096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	061a      	lsls	r2, r3, #24
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	0a1b      	lsrs	r3, r3, #8
 800b0aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b0ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	0e1b      	lsrs	r3, r3, #24
 800b0b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3738      	adds	r7, #56	@ 0x38
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	18000f3a 	.word	0x18000f3a

0800b0c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0da:	2b1f      	cmp	r3, #31
 800b0dc:	d936      	bls.n	800b14c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e027      	b.n	800b134 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 fe3b 	bl	800cd64 <SDMMC_ReadFIFO>
 800b0ee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	0a1b      	lsrs	r3, r3, #8
 800b102:	b2da      	uxtb	r2, r3
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	3301      	adds	r3, #1
 800b10c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	0c1b      	lsrs	r3, r3, #16
 800b112:	b2da      	uxtb	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	0e1b      	lsrs	r3, r3, #24
 800b122:	b2da      	uxtb	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3301      	adds	r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	3301      	adds	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2b07      	cmp	r3, #7
 800b138:	d9d4      	bls.n	800b0e4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	f1a3 0220 	sub.w	r2, r3, #32
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b14c:	bf00      	nop
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	2b1f      	cmp	r3, #31
 800b168:	d93a      	bls.n	800b1e0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	e02b      	b.n	800b1c8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	021a      	lsls	r2, r3, #8
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	4313      	orrs	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	3301      	adds	r3, #1
 800b18c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	041a      	lsls	r2, r3, #16
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	3301      	adds	r3, #1
 800b19e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	061a      	lsls	r2, r3, #24
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f107 020c 	add.w	r2, r7, #12
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 fdde 	bl	800cd7e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b07      	cmp	r3, #7
 800b1cc:	d9d0      	bls.n	800b170 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	f1a3 0220 	sub.w	r2, r3, #32
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	621a      	str	r2, [r3, #32]
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e10f      	b.n	800b46a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a87      	ldr	r2, [pc, #540]	@ (800b474 <HAL_SPI_Init+0x23c>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00f      	beq.n	800b27a <HAL_SPI_Init+0x42>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a86      	ldr	r2, [pc, #536]	@ (800b478 <HAL_SPI_Init+0x240>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d00a      	beq.n	800b27a <HAL_SPI_Init+0x42>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a84      	ldr	r2, [pc, #528]	@ (800b47c <HAL_SPI_Init+0x244>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d005      	beq.n	800b27a <HAL_SPI_Init+0x42>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	2b0f      	cmp	r3, #15
 800b274:	d901      	bls.n	800b27a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e0f7      	b.n	800b46a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fbc2 	bl	800ba04 <SPI_GetPacketSize>
 800b280:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a7b      	ldr	r2, [pc, #492]	@ (800b474 <HAL_SPI_Init+0x23c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00c      	beq.n	800b2a6 <HAL_SPI_Init+0x6e>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a79      	ldr	r2, [pc, #484]	@ (800b478 <HAL_SPI_Init+0x240>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <HAL_SPI_Init+0x6e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a78      	ldr	r2, [pc, #480]	@ (800b47c <HAL_SPI_Init+0x244>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d002      	beq.n	800b2a6 <HAL_SPI_Init+0x6e>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b08      	cmp	r3, #8
 800b2a4:	d811      	bhi.n	800b2ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2aa:	4a72      	ldr	r2, [pc, #456]	@ (800b474 <HAL_SPI_Init+0x23c>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d009      	beq.n	800b2c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a70      	ldr	r2, [pc, #448]	@ (800b478 <HAL_SPI_Init+0x240>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d004      	beq.n	800b2c4 <HAL_SPI_Init+0x8c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a6f      	ldr	r2, [pc, #444]	@ (800b47c <HAL_SPI_Init+0x244>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d104      	bne.n	800b2ce <HAL_SPI_Init+0x96>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b10      	cmp	r3, #16
 800b2c8:	d901      	bls.n	800b2ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e0cd      	b.n	800b46a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f8cc 	bl	800b480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f022 0201 	bic.w	r2, r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b30a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b314:	d119      	bne.n	800b34a <HAL_SPI_Init+0x112>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b31e:	d103      	bne.n	800b328 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b324:	2b00      	cmp	r3, #0
 800b326:	d008      	beq.n	800b33a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10c      	bne.n	800b34a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b338:	d107      	bne.n	800b34a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b348:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <HAL_SPI_Init+0x13e>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	2b06      	cmp	r3, #6
 800b35c:	d90b      	bls.n	800b376 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e007      	b.n	800b386 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b384:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	69da      	ldr	r2, [r3, #28]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38e:	431a      	orrs	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b398:	ea42 0103 	orr.w	r1, r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68da      	ldr	r2, [r3, #12]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	431a      	orrs	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3e6:	ea42 0103 	orr.w	r1, r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d113      	bne.n	800b426 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b410:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b424:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f022 0201 	bic.w	r2, r2, #1
 800b434:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	40013000 	.word	0x40013000
 800b478:	40003800 	.word	0x40003800
 800b47c:	40003c00 	.word	0x40003c00

0800b480 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d001      	beq.n	800b4b2 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e18a      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b4be:	887b      	ldrh	r3, [r7, #2]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e17f      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d101      	bne.n	800b4d6 <HAL_SPI_TransmitReceive_DMA+0x42>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e178      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	887a      	ldrh	r2, [r7, #2]
 800b4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	887a      	ldrh	r2, [r7, #2]
 800b500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	887a      	ldrh	r2, [r7, #2]
 800b50e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	887a      	ldrh	r2, [r7, #2]
 800b516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b534:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b544:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	2b0f      	cmp	r3, #15
 800b54c:	d905      	bls.n	800b55a <HAL_SPI_TransmitReceive_DMA+0xc6>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b558:	d10f      	bne.n	800b57a <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b55e:	2b07      	cmp	r3, #7
 800b560:	d911      	bls.n	800b586 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b56c:	d00b      	beq.n	800b586 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b572:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b578:	d005      	beq.n	800b586 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e120      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	2b07      	cmp	r3, #7
 800b58c:	d840      	bhi.n	800b610 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b598:	d109      	bne.n	800b5ae <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	105b      	asrs	r3, r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5b8:	d109      	bne.n	800b5ce <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	109b      	asrs	r3, r3, #2
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5d8:	d109      	bne.n	800b5ee <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	105b      	asrs	r3, r3, #1
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5f8:	d12e      	bne.n	800b658 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3303      	adds	r3, #3
 800b604:	109b      	asrs	r3, r3, #2
 800b606:	b29a      	uxth	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b60e:	e023      	b.n	800b658 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	2b0f      	cmp	r3, #15
 800b616:	d81f      	bhi.n	800b658 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b622:	d109      	bne.n	800b638 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	3301      	adds	r3, #1
 800b62e:	105b      	asrs	r3, r3, #1
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b642:	d109      	bne.n	800b658 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	3301      	adds	r3, #1
 800b64e:	105b      	asrs	r3, r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b65c:	4a5c      	ldr	r2, [pc, #368]	@ (800b7d0 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800b65e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b664:	4a5b      	ldr	r2, [pc, #364]	@ (800b7d4 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800b666:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b66c:	4a5a      	ldr	r2, [pc, #360]	@ (800b7d8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b66e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b674:	2200      	movs	r2, #0
 800b676:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3330      	adds	r3, #48	@ 0x30
 800b682:	4619      	mov	r1, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b688:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b690:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b692:	f7f9 f923 	bl	80048dc <HAL_DMA_Start_IT>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d011      	beq.n	800b6c0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6a2:	f043 0210 	orr.w	r2, r3, #16
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e083      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689a      	ldr	r2, [r3, #8]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6ce:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6dc:	2200      	movs	r2, #0
 800b6de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6ec:	4a3a      	ldr	r2, [pc, #232]	@ (800b7d8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b6ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3320      	adds	r3, #32
 800b700:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b708:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b70a:	f7f9 f8e7 	bl	80048dc <HAL_DMA_Start_IT>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d016      	beq.n	800b742 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f9 fb49 	bl	8004db0 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b724:	f043 0210 	orr.w	r2, r3, #16
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e042      	b.n	800b7c8 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b74c:	d108      	bne.n	800b760 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6859      	ldr	r1, [r3, #4]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	4b20      	ldr	r3, [pc, #128]	@ (800b7dc <HAL_SPI_TransmitReceive_DMA+0x348>)
 800b75a:	400b      	ands	r3, r1
 800b75c:	6053      	str	r3, [r2, #4]
 800b75e:	e009      	b.n	800b774 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	4b1d      	ldr	r3, [pc, #116]	@ (800b7dc <HAL_SPI_TransmitReceive_DMA+0x348>)
 800b768:	4013      	ands	r3, r2
 800b76a:	8879      	ldrh	r1, [r7, #2]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	6812      	ldr	r2, [r2, #0]
 800b770:	430b      	orrs	r3, r1
 800b772:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b782:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691a      	ldr	r2, [r3, #16]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800b792:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0201 	orr.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7ac:	d107      	bne.n	800b7be <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7bc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	0800b863 	.word	0x0800b863
 800b7d4:	0800b81d 	.word	0x0800b81d
 800b7d8:	0800b87f 	.word	0x0800b87f
 800b7dc:	ffff0000 	.word	0xffff0000

0800b7e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b828:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b07      	cmp	r3, #7
 800b834:	d011      	beq.n	800b85a <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b840:	d103      	bne.n	800b84a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff ffcc 	bl	800b7e0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b848:	e007      	b.n	800b85a <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	691a      	ldr	r2, [r3, #16]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f042 0208 	orr.w	r2, r2, #8
 800b858:	611a      	str	r2, [r3, #16]
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b86e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff ffbf 	bl	800b7f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b88a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7f9 fdad 	bl	80053ec <HAL_DMA_GetError>
 800b892:	4603      	mov	r3, r0
 800b894:	2b02      	cmp	r3, #2
 800b896:	d011      	beq.n	800b8bc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f813 	bl	800b8c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8a4:	f043 0210 	orr.w	r2, r3, #16
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff ffa6 	bl	800b808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	699a      	ldr	r2, [r3, #24]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f042 0208 	orr.w	r2, r2, #8
 800b8e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0210 	orr.w	r2, r2, #16
 800b8f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 0201 	bic.w	r2, r2, #1
 800b902:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6919      	ldr	r1, [r3, #16]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b3c      	ldr	r3, [pc, #240]	@ (800ba00 <SPI_CloseTransfer+0x13c>)
 800b910:	400b      	ands	r3, r1
 800b912:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b922:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	d014      	beq.n	800b95a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00f      	beq.n	800b95a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b940:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	699a      	ldr	r2, [r3, #24]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f042 0220 	orr.w	r2, r2, #32
 800b958:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b03      	cmp	r3, #3
 800b964:	d014      	beq.n	800b990 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00f      	beq.n	800b990 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b976:	f043 0204 	orr.w	r2, r3, #4
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	699a      	ldr	r2, [r3, #24]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b98e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9a0:	f043 0201 	orr.w	r2, r3, #1
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	699a      	ldr	r2, [r3, #24]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00f      	beq.n	800b9e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9ca:	f043 0208 	orr.w	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	699a      	ldr	r2, [r3, #24]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b9f4:	bf00      	nop
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	fffffc90 	.word	0xfffffc90

0800ba04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba10:	095b      	lsrs	r3, r3, #5
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	3307      	adds	r3, #7
 800ba22:	08db      	lsrs	r3, r3, #3
 800ba24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e042      	b.n	800bad2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7f7 fd2e 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2224      	movs	r2, #36	@ 0x24
 800ba68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f022 0201 	bic.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fe1f 	bl	800c6c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f8b4 	bl	800bbf8 <UART_SetConfig>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e01b      	b.n	800bad2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800baa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	689a      	ldr	r2, [r3, #8]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f042 0201 	orr.w	r2, r2, #1
 800bac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fe9e 	bl	800c80c <UART_CheckIdleState>
 800bad0:	4603      	mov	r3, r0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b08a      	sub	sp, #40	@ 0x28
 800bade:	af02      	add	r7, sp, #8
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	603b      	str	r3, [r7, #0]
 800bae6:	4613      	mov	r3, r2
 800bae8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d17b      	bne.n	800bbec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <HAL_UART_Transmit+0x26>
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e074      	b.n	800bbee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2221      	movs	r2, #33	@ 0x21
 800bb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb14:	f7f8 fa3a 	bl	8003f8c <HAL_GetTick>
 800bb18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	88fa      	ldrh	r2, [r7, #6]
 800bb1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	88fa      	ldrh	r2, [r7, #6]
 800bb26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb32:	d108      	bne.n	800bb46 <HAL_UART_Transmit+0x6c>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	e003      	b.n	800bb4e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb4e:	e030      	b.n	800bbb2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2200      	movs	r2, #0
 800bb58:	2180      	movs	r1, #128	@ 0x80
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 ff00 	bl	800c960 <UART_WaitOnFlagUntilTimeout>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d005      	beq.n	800bb72 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e03d      	b.n	800bbee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10b      	bne.n	800bb90 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	e007      	b.n	800bba0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	781a      	ldrb	r2, [r3, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1c8      	bne.n	800bb50 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2140      	movs	r1, #64	@ 0x40
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 fec9 	bl	800c960 <UART_WaitOnFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e006      	b.n	800bbee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e000      	b.n	800bbee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bbec:	2302      	movs	r3, #2
  }
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3720      	adds	r7, #32
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbfc:	b092      	sub	sp, #72	@ 0x48
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	431a      	orrs	r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	431a      	orrs	r2, r3
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	4bbe      	ldr	r3, [pc, #760]	@ (800bf20 <UART_SetConfig+0x328>)
 800bc28:	4013      	ands	r3, r2
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	6812      	ldr	r2, [r2, #0]
 800bc2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc30:	430b      	orrs	r3, r1
 800bc32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4ab3      	ldr	r2, [pc, #716]	@ (800bf24 <UART_SetConfig+0x32c>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d004      	beq.n	800bc64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc60:	4313      	orrs	r3, r2
 800bc62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	4baf      	ldr	r3, [pc, #700]	@ (800bf28 <UART_SetConfig+0x330>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	f023 010f 	bic.w	r1, r3, #15
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4aa6      	ldr	r2, [pc, #664]	@ (800bf2c <UART_SetConfig+0x334>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d177      	bne.n	800bd88 <UART_SetConfig+0x190>
 800bc98:	4ba5      	ldr	r3, [pc, #660]	@ (800bf30 <UART_SetConfig+0x338>)
 800bc9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bca0:	2b28      	cmp	r3, #40	@ 0x28
 800bca2:	d86d      	bhi.n	800bd80 <UART_SetConfig+0x188>
 800bca4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <UART_SetConfig+0xb4>)
 800bca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcaa:	bf00      	nop
 800bcac:	0800bd51 	.word	0x0800bd51
 800bcb0:	0800bd81 	.word	0x0800bd81
 800bcb4:	0800bd81 	.word	0x0800bd81
 800bcb8:	0800bd81 	.word	0x0800bd81
 800bcbc:	0800bd81 	.word	0x0800bd81
 800bcc0:	0800bd81 	.word	0x0800bd81
 800bcc4:	0800bd81 	.word	0x0800bd81
 800bcc8:	0800bd81 	.word	0x0800bd81
 800bccc:	0800bd59 	.word	0x0800bd59
 800bcd0:	0800bd81 	.word	0x0800bd81
 800bcd4:	0800bd81 	.word	0x0800bd81
 800bcd8:	0800bd81 	.word	0x0800bd81
 800bcdc:	0800bd81 	.word	0x0800bd81
 800bce0:	0800bd81 	.word	0x0800bd81
 800bce4:	0800bd81 	.word	0x0800bd81
 800bce8:	0800bd81 	.word	0x0800bd81
 800bcec:	0800bd61 	.word	0x0800bd61
 800bcf0:	0800bd81 	.word	0x0800bd81
 800bcf4:	0800bd81 	.word	0x0800bd81
 800bcf8:	0800bd81 	.word	0x0800bd81
 800bcfc:	0800bd81 	.word	0x0800bd81
 800bd00:	0800bd81 	.word	0x0800bd81
 800bd04:	0800bd81 	.word	0x0800bd81
 800bd08:	0800bd81 	.word	0x0800bd81
 800bd0c:	0800bd69 	.word	0x0800bd69
 800bd10:	0800bd81 	.word	0x0800bd81
 800bd14:	0800bd81 	.word	0x0800bd81
 800bd18:	0800bd81 	.word	0x0800bd81
 800bd1c:	0800bd81 	.word	0x0800bd81
 800bd20:	0800bd81 	.word	0x0800bd81
 800bd24:	0800bd81 	.word	0x0800bd81
 800bd28:	0800bd81 	.word	0x0800bd81
 800bd2c:	0800bd71 	.word	0x0800bd71
 800bd30:	0800bd81 	.word	0x0800bd81
 800bd34:	0800bd81 	.word	0x0800bd81
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bd81 	.word	0x0800bd81
 800bd40:	0800bd81 	.word	0x0800bd81
 800bd44:	0800bd81 	.word	0x0800bd81
 800bd48:	0800bd81 	.word	0x0800bd81
 800bd4c:	0800bd79 	.word	0x0800bd79
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd56:	e222      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd58:	2304      	movs	r3, #4
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5e:	e21e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd60:	2308      	movs	r3, #8
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd66:	e21a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd68:	2310      	movs	r3, #16
 800bd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd6e:	e216      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd70:	2320      	movs	r3, #32
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd76:	e212      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd78:	2340      	movs	r3, #64	@ 0x40
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7e:	e20e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd80:	2380      	movs	r3, #128	@ 0x80
 800bd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd86:	e20a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a69      	ldr	r2, [pc, #420]	@ (800bf34 <UART_SetConfig+0x33c>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d130      	bne.n	800bdf4 <UART_SetConfig+0x1fc>
 800bd92:	4b67      	ldr	r3, [pc, #412]	@ (800bf30 <UART_SetConfig+0x338>)
 800bd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd96:	f003 0307 	and.w	r3, r3, #7
 800bd9a:	2b05      	cmp	r3, #5
 800bd9c:	d826      	bhi.n	800bdec <UART_SetConfig+0x1f4>
 800bd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <UART_SetConfig+0x1ac>)
 800bda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda4:	0800bdbd 	.word	0x0800bdbd
 800bda8:	0800bdc5 	.word	0x0800bdc5
 800bdac:	0800bdcd 	.word	0x0800bdcd
 800bdb0:	0800bdd5 	.word	0x0800bdd5
 800bdb4:	0800bddd 	.word	0x0800bddd
 800bdb8:	0800bde5 	.word	0x0800bde5
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc2:	e1ec      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bdc4:	2304      	movs	r3, #4
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdca:	e1e8      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bdcc:	2308      	movs	r3, #8
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd2:	e1e4      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bdd4:	2310      	movs	r3, #16
 800bdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdda:	e1e0      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bddc:	2320      	movs	r3, #32
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde2:	e1dc      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bde4:	2340      	movs	r3, #64	@ 0x40
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdea:	e1d8      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bdec:	2380      	movs	r3, #128	@ 0x80
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf2:	e1d4      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a4f      	ldr	r2, [pc, #316]	@ (800bf38 <UART_SetConfig+0x340>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d130      	bne.n	800be60 <UART_SetConfig+0x268>
 800bdfe:	4b4c      	ldr	r3, [pc, #304]	@ (800bf30 <UART_SetConfig+0x338>)
 800be00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	2b05      	cmp	r3, #5
 800be08:	d826      	bhi.n	800be58 <UART_SetConfig+0x260>
 800be0a:	a201      	add	r2, pc, #4	@ (adr r2, 800be10 <UART_SetConfig+0x218>)
 800be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be10:	0800be29 	.word	0x0800be29
 800be14:	0800be31 	.word	0x0800be31
 800be18:	0800be39 	.word	0x0800be39
 800be1c:	0800be41 	.word	0x0800be41
 800be20:	0800be49 	.word	0x0800be49
 800be24:	0800be51 	.word	0x0800be51
 800be28:	2300      	movs	r3, #0
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e1b6      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be30:	2304      	movs	r3, #4
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e1b2      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be38:	2308      	movs	r3, #8
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e1ae      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be40:	2310      	movs	r3, #16
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be46:	e1aa      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be48:	2320      	movs	r3, #32
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4e:	e1a6      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be50:	2340      	movs	r3, #64	@ 0x40
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be56:	e1a2      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be58:	2380      	movs	r3, #128	@ 0x80
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5e:	e19e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a35      	ldr	r2, [pc, #212]	@ (800bf3c <UART_SetConfig+0x344>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d130      	bne.n	800becc <UART_SetConfig+0x2d4>
 800be6a:	4b31      	ldr	r3, [pc, #196]	@ (800bf30 <UART_SetConfig+0x338>)
 800be6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be6e:	f003 0307 	and.w	r3, r3, #7
 800be72:	2b05      	cmp	r3, #5
 800be74:	d826      	bhi.n	800bec4 <UART_SetConfig+0x2cc>
 800be76:	a201      	add	r2, pc, #4	@ (adr r2, 800be7c <UART_SetConfig+0x284>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800be95 	.word	0x0800be95
 800be80:	0800be9d 	.word	0x0800be9d
 800be84:	0800bea5 	.word	0x0800bea5
 800be88:	0800bead 	.word	0x0800bead
 800be8c:	0800beb5 	.word	0x0800beb5
 800be90:	0800bebd 	.word	0x0800bebd
 800be94:	2300      	movs	r3, #0
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9a:	e180      	b.n	800c19e <UART_SetConfig+0x5a6>
 800be9c:	2304      	movs	r3, #4
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea2:	e17c      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bea4:	2308      	movs	r3, #8
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beaa:	e178      	b.n	800c19e <UART_SetConfig+0x5a6>
 800beac:	2310      	movs	r3, #16
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb2:	e174      	b.n	800c19e <UART_SetConfig+0x5a6>
 800beb4:	2320      	movs	r3, #32
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e170      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bebc:	2340      	movs	r3, #64	@ 0x40
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e16c      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bec4:	2380      	movs	r3, #128	@ 0x80
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e168      	b.n	800c19e <UART_SetConfig+0x5a6>
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf40 <UART_SetConfig+0x348>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d142      	bne.n	800bf5c <UART_SetConfig+0x364>
 800bed6:	4b16      	ldr	r3, [pc, #88]	@ (800bf30 <UART_SetConfig+0x338>)
 800bed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	2b05      	cmp	r3, #5
 800bee0:	d838      	bhi.n	800bf54 <UART_SetConfig+0x35c>
 800bee2:	a201      	add	r2, pc, #4	@ (adr r2, 800bee8 <UART_SetConfig+0x2f0>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bf01 	.word	0x0800bf01
 800beec:	0800bf09 	.word	0x0800bf09
 800bef0:	0800bf11 	.word	0x0800bf11
 800bef4:	0800bf19 	.word	0x0800bf19
 800bef8:	0800bf45 	.word	0x0800bf45
 800befc:	0800bf4d 	.word	0x0800bf4d
 800bf00:	2300      	movs	r3, #0
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf06:	e14a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf08:	2304      	movs	r3, #4
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0e:	e146      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf10:	2308      	movs	r3, #8
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf16:	e142      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf18:	2310      	movs	r3, #16
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1e:	e13e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf20:	cfff69f3 	.word	0xcfff69f3
 800bf24:	58000c00 	.word	0x58000c00
 800bf28:	11fff4ff 	.word	0x11fff4ff
 800bf2c:	40011000 	.word	0x40011000
 800bf30:	58024400 	.word	0x58024400
 800bf34:	40004400 	.word	0x40004400
 800bf38:	40004800 	.word	0x40004800
 800bf3c:	40004c00 	.word	0x40004c00
 800bf40:	40005000 	.word	0x40005000
 800bf44:	2320      	movs	r3, #32
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4a:	e128      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf4c:	2340      	movs	r3, #64	@ 0x40
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf52:	e124      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf54:	2380      	movs	r3, #128	@ 0x80
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf5a:	e120      	b.n	800c19e <UART_SetConfig+0x5a6>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4acb      	ldr	r2, [pc, #812]	@ (800c290 <UART_SetConfig+0x698>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d176      	bne.n	800c054 <UART_SetConfig+0x45c>
 800bf66:	4bcb      	ldr	r3, [pc, #812]	@ (800c294 <UART_SetConfig+0x69c>)
 800bf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf6e:	2b28      	cmp	r3, #40	@ 0x28
 800bf70:	d86c      	bhi.n	800c04c <UART_SetConfig+0x454>
 800bf72:	a201      	add	r2, pc, #4	@ (adr r2, 800bf78 <UART_SetConfig+0x380>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800c01d 	.word	0x0800c01d
 800bf7c:	0800c04d 	.word	0x0800c04d
 800bf80:	0800c04d 	.word	0x0800c04d
 800bf84:	0800c04d 	.word	0x0800c04d
 800bf88:	0800c04d 	.word	0x0800c04d
 800bf8c:	0800c04d 	.word	0x0800c04d
 800bf90:	0800c04d 	.word	0x0800c04d
 800bf94:	0800c04d 	.word	0x0800c04d
 800bf98:	0800c025 	.word	0x0800c025
 800bf9c:	0800c04d 	.word	0x0800c04d
 800bfa0:	0800c04d 	.word	0x0800c04d
 800bfa4:	0800c04d 	.word	0x0800c04d
 800bfa8:	0800c04d 	.word	0x0800c04d
 800bfac:	0800c04d 	.word	0x0800c04d
 800bfb0:	0800c04d 	.word	0x0800c04d
 800bfb4:	0800c04d 	.word	0x0800c04d
 800bfb8:	0800c02d 	.word	0x0800c02d
 800bfbc:	0800c04d 	.word	0x0800c04d
 800bfc0:	0800c04d 	.word	0x0800c04d
 800bfc4:	0800c04d 	.word	0x0800c04d
 800bfc8:	0800c04d 	.word	0x0800c04d
 800bfcc:	0800c04d 	.word	0x0800c04d
 800bfd0:	0800c04d 	.word	0x0800c04d
 800bfd4:	0800c04d 	.word	0x0800c04d
 800bfd8:	0800c035 	.word	0x0800c035
 800bfdc:	0800c04d 	.word	0x0800c04d
 800bfe0:	0800c04d 	.word	0x0800c04d
 800bfe4:	0800c04d 	.word	0x0800c04d
 800bfe8:	0800c04d 	.word	0x0800c04d
 800bfec:	0800c04d 	.word	0x0800c04d
 800bff0:	0800c04d 	.word	0x0800c04d
 800bff4:	0800c04d 	.word	0x0800c04d
 800bff8:	0800c03d 	.word	0x0800c03d
 800bffc:	0800c04d 	.word	0x0800c04d
 800c000:	0800c04d 	.word	0x0800c04d
 800c004:	0800c04d 	.word	0x0800c04d
 800c008:	0800c04d 	.word	0x0800c04d
 800c00c:	0800c04d 	.word	0x0800c04d
 800c010:	0800c04d 	.word	0x0800c04d
 800c014:	0800c04d 	.word	0x0800c04d
 800c018:	0800c045 	.word	0x0800c045
 800c01c:	2301      	movs	r3, #1
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c022:	e0bc      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c024:	2304      	movs	r3, #4
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02a:	e0b8      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c02c:	2308      	movs	r3, #8
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c032:	e0b4      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c034:	2310      	movs	r3, #16
 800c036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03a:	e0b0      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c03c:	2320      	movs	r3, #32
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c042:	e0ac      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c044:	2340      	movs	r3, #64	@ 0x40
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04a:	e0a8      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c04c:	2380      	movs	r3, #128	@ 0x80
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e0a4      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a8f      	ldr	r2, [pc, #572]	@ (800c298 <UART_SetConfig+0x6a0>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d130      	bne.n	800c0c0 <UART_SetConfig+0x4c8>
 800c05e:	4b8d      	ldr	r3, [pc, #564]	@ (800c294 <UART_SetConfig+0x69c>)
 800c060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	2b05      	cmp	r3, #5
 800c068:	d826      	bhi.n	800c0b8 <UART_SetConfig+0x4c0>
 800c06a:	a201      	add	r2, pc, #4	@ (adr r2, 800c070 <UART_SetConfig+0x478>)
 800c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c070:	0800c089 	.word	0x0800c089
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c099 	.word	0x0800c099
 800c07c:	0800c0a1 	.word	0x0800c0a1
 800c080:	0800c0a9 	.word	0x0800c0a9
 800c084:	0800c0b1 	.word	0x0800c0b1
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08e:	e086      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c090:	2304      	movs	r3, #4
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c096:	e082      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c098:	2308      	movs	r3, #8
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09e:	e07e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a6:	e07a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0a8:	2320      	movs	r3, #32
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ae:	e076      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0b0:	2340      	movs	r3, #64	@ 0x40
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b6:	e072      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0b8:	2380      	movs	r3, #128	@ 0x80
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0be:	e06e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a75      	ldr	r2, [pc, #468]	@ (800c29c <UART_SetConfig+0x6a4>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d130      	bne.n	800c12c <UART_SetConfig+0x534>
 800c0ca:	4b72      	ldr	r3, [pc, #456]	@ (800c294 <UART_SetConfig+0x69c>)
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ce:	f003 0307 	and.w	r3, r3, #7
 800c0d2:	2b05      	cmp	r3, #5
 800c0d4:	d826      	bhi.n	800c124 <UART_SetConfig+0x52c>
 800c0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0dc <UART_SetConfig+0x4e4>)
 800c0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0dc:	0800c0f5 	.word	0x0800c0f5
 800c0e0:	0800c0fd 	.word	0x0800c0fd
 800c0e4:	0800c105 	.word	0x0800c105
 800c0e8:	0800c10d 	.word	0x0800c10d
 800c0ec:	0800c115 	.word	0x0800c115
 800c0f0:	0800c11d 	.word	0x0800c11d
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fa:	e050      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c102:	e04c      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c104:	2308      	movs	r3, #8
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10a:	e048      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c10c:	2310      	movs	r3, #16
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c112:	e044      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c114:	2320      	movs	r3, #32
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11a:	e040      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c11c:	2340      	movs	r3, #64	@ 0x40
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c122:	e03c      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c124:	2380      	movs	r3, #128	@ 0x80
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e038      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a5b      	ldr	r2, [pc, #364]	@ (800c2a0 <UART_SetConfig+0x6a8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d130      	bne.n	800c198 <UART_SetConfig+0x5a0>
 800c136:	4b57      	ldr	r3, [pc, #348]	@ (800c294 <UART_SetConfig+0x69c>)
 800c138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c13a:	f003 0307 	and.w	r3, r3, #7
 800c13e:	2b05      	cmp	r3, #5
 800c140:	d826      	bhi.n	800c190 <UART_SetConfig+0x598>
 800c142:	a201      	add	r2, pc, #4	@ (adr r2, 800c148 <UART_SetConfig+0x550>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c161 	.word	0x0800c161
 800c14c:	0800c169 	.word	0x0800c169
 800c150:	0800c171 	.word	0x0800c171
 800c154:	0800c179 	.word	0x0800c179
 800c158:	0800c181 	.word	0x0800c181
 800c15c:	0800c189 	.word	0x0800c189
 800c160:	2302      	movs	r3, #2
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c166:	e01a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c168:	2304      	movs	r3, #4
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e016      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c170:	2308      	movs	r3, #8
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c176:	e012      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c178:	2310      	movs	r3, #16
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e00e      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c180:	2320      	movs	r3, #32
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e00a      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c188:	2340      	movs	r3, #64	@ 0x40
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e006      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c190:	2380      	movs	r3, #128	@ 0x80
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e002      	b.n	800c19e <UART_SetConfig+0x5a6>
 800c198:	2380      	movs	r3, #128	@ 0x80
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a3f      	ldr	r2, [pc, #252]	@ (800c2a0 <UART_SetConfig+0x6a8>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	f040 80f8 	bne.w	800c39a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	dc46      	bgt.n	800c240 <UART_SetConfig+0x648>
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	f2c0 8082 	blt.w	800c2bc <UART_SetConfig+0x6c4>
 800c1b8:	3b02      	subs	r3, #2
 800c1ba:	2b1e      	cmp	r3, #30
 800c1bc:	d87e      	bhi.n	800c2bc <UART_SetConfig+0x6c4>
 800c1be:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c4 <UART_SetConfig+0x5cc>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c247 	.word	0x0800c247
 800c1c8:	0800c2bd 	.word	0x0800c2bd
 800c1cc:	0800c24f 	.word	0x0800c24f
 800c1d0:	0800c2bd 	.word	0x0800c2bd
 800c1d4:	0800c2bd 	.word	0x0800c2bd
 800c1d8:	0800c2bd 	.word	0x0800c2bd
 800c1dc:	0800c25f 	.word	0x0800c25f
 800c1e0:	0800c2bd 	.word	0x0800c2bd
 800c1e4:	0800c2bd 	.word	0x0800c2bd
 800c1e8:	0800c2bd 	.word	0x0800c2bd
 800c1ec:	0800c2bd 	.word	0x0800c2bd
 800c1f0:	0800c2bd 	.word	0x0800c2bd
 800c1f4:	0800c2bd 	.word	0x0800c2bd
 800c1f8:	0800c2bd 	.word	0x0800c2bd
 800c1fc:	0800c26f 	.word	0x0800c26f
 800c200:	0800c2bd 	.word	0x0800c2bd
 800c204:	0800c2bd 	.word	0x0800c2bd
 800c208:	0800c2bd 	.word	0x0800c2bd
 800c20c:	0800c2bd 	.word	0x0800c2bd
 800c210:	0800c2bd 	.word	0x0800c2bd
 800c214:	0800c2bd 	.word	0x0800c2bd
 800c218:	0800c2bd 	.word	0x0800c2bd
 800c21c:	0800c2bd 	.word	0x0800c2bd
 800c220:	0800c2bd 	.word	0x0800c2bd
 800c224:	0800c2bd 	.word	0x0800c2bd
 800c228:	0800c2bd 	.word	0x0800c2bd
 800c22c:	0800c2bd 	.word	0x0800c2bd
 800c230:	0800c2bd 	.word	0x0800c2bd
 800c234:	0800c2bd 	.word	0x0800c2bd
 800c238:	0800c2bd 	.word	0x0800c2bd
 800c23c:	0800c2af 	.word	0x0800c2af
 800c240:	2b40      	cmp	r3, #64	@ 0x40
 800c242:	d037      	beq.n	800c2b4 <UART_SetConfig+0x6bc>
 800c244:	e03a      	b.n	800c2bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c246:	f7fc fe1f 	bl	8008e88 <HAL_RCCEx_GetD3PCLK1Freq>
 800c24a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c24c:	e03c      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c252:	4618      	mov	r0, r3
 800c254:	f7fc fe2e 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c25c:	e034      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c25e:	f107 0318 	add.w	r3, r7, #24
 800c262:	4618      	mov	r0, r3
 800c264:	f7fc ff7a 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c26c:	e02c      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c26e:	4b09      	ldr	r3, [pc, #36]	@ (800c294 <UART_SetConfig+0x69c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0320 	and.w	r3, r3, #32
 800c276:	2b00      	cmp	r3, #0
 800c278:	d016      	beq.n	800c2a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c27a:	4b06      	ldr	r3, [pc, #24]	@ (800c294 <UART_SetConfig+0x69c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	08db      	lsrs	r3, r3, #3
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	4a07      	ldr	r2, [pc, #28]	@ (800c2a4 <UART_SetConfig+0x6ac>)
 800c286:	fa22 f303 	lsr.w	r3, r2, r3
 800c28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c28c:	e01c      	b.n	800c2c8 <UART_SetConfig+0x6d0>
 800c28e:	bf00      	nop
 800c290:	40011400 	.word	0x40011400
 800c294:	58024400 	.word	0x58024400
 800c298:	40007800 	.word	0x40007800
 800c29c:	40007c00 	.word	0x40007c00
 800c2a0:	58000c00 	.word	0x58000c00
 800c2a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c2a8:	4b9d      	ldr	r3, [pc, #628]	@ (800c520 <UART_SetConfig+0x928>)
 800c2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ac:	e00c      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2ae:	4b9d      	ldr	r3, [pc, #628]	@ (800c524 <UART_SetConfig+0x92c>)
 800c2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b2:	e009      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ba:	e005      	b.n	800c2c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 81de 	beq.w	800c68c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d4:	4a94      	ldr	r2, [pc, #592]	@ (800c528 <UART_SetConfig+0x930>)
 800c2d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	4413      	add	r3, r2
 800c2ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d305      	bcc.n	800c300 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d903      	bls.n	800c308 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c306:	e1c1      	b.n	800c68c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c30a:	2200      	movs	r2, #0
 800c30c:	60bb      	str	r3, [r7, #8]
 800c30e:	60fa      	str	r2, [r7, #12]
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c314:	4a84      	ldr	r2, [pc, #528]	@ (800c528 <UART_SetConfig+0x930>)
 800c316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	2200      	movs	r2, #0
 800c31e:	603b      	str	r3, [r7, #0]
 800c320:	607a      	str	r2, [r7, #4]
 800c322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c32a:	f7f4 f9e5 	bl	80006f8 <__aeabi_uldivmod>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	4610      	mov	r0, r2
 800c334:	4619      	mov	r1, r3
 800c336:	f04f 0200 	mov.w	r2, #0
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	020b      	lsls	r3, r1, #8
 800c340:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c344:	0202      	lsls	r2, r0, #8
 800c346:	6979      	ldr	r1, [r7, #20]
 800c348:	6849      	ldr	r1, [r1, #4]
 800c34a:	0849      	lsrs	r1, r1, #1
 800c34c:	2000      	movs	r0, #0
 800c34e:	460c      	mov	r4, r1
 800c350:	4605      	mov	r5, r0
 800c352:	eb12 0804 	adds.w	r8, r2, r4
 800c356:	eb43 0905 	adc.w	r9, r3, r5
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	469a      	mov	sl, r3
 800c362:	4693      	mov	fp, r2
 800c364:	4652      	mov	r2, sl
 800c366:	465b      	mov	r3, fp
 800c368:	4640      	mov	r0, r8
 800c36a:	4649      	mov	r1, r9
 800c36c:	f7f4 f9c4 	bl	80006f8 <__aeabi_uldivmod>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4613      	mov	r3, r2
 800c376:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c37e:	d308      	bcc.n	800c392 <UART_SetConfig+0x79a>
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c386:	d204      	bcs.n	800c392 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c38e:	60da      	str	r2, [r3, #12]
 800c390:	e17c      	b.n	800c68c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c398:	e178      	b.n	800c68c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3a2:	f040 80c5 	bne.w	800c530 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c3a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	2b20      	cmp	r3, #32
 800c3ac:	dc48      	bgt.n	800c440 <UART_SetConfig+0x848>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	db7b      	blt.n	800c4aa <UART_SetConfig+0x8b2>
 800c3b2:	2b20      	cmp	r3, #32
 800c3b4:	d879      	bhi.n	800c4aa <UART_SetConfig+0x8b2>
 800c3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3bc <UART_SetConfig+0x7c4>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c447 	.word	0x0800c447
 800c3c0:	0800c44f 	.word	0x0800c44f
 800c3c4:	0800c4ab 	.word	0x0800c4ab
 800c3c8:	0800c4ab 	.word	0x0800c4ab
 800c3cc:	0800c457 	.word	0x0800c457
 800c3d0:	0800c4ab 	.word	0x0800c4ab
 800c3d4:	0800c4ab 	.word	0x0800c4ab
 800c3d8:	0800c4ab 	.word	0x0800c4ab
 800c3dc:	0800c467 	.word	0x0800c467
 800c3e0:	0800c4ab 	.word	0x0800c4ab
 800c3e4:	0800c4ab 	.word	0x0800c4ab
 800c3e8:	0800c4ab 	.word	0x0800c4ab
 800c3ec:	0800c4ab 	.word	0x0800c4ab
 800c3f0:	0800c4ab 	.word	0x0800c4ab
 800c3f4:	0800c4ab 	.word	0x0800c4ab
 800c3f8:	0800c4ab 	.word	0x0800c4ab
 800c3fc:	0800c477 	.word	0x0800c477
 800c400:	0800c4ab 	.word	0x0800c4ab
 800c404:	0800c4ab 	.word	0x0800c4ab
 800c408:	0800c4ab 	.word	0x0800c4ab
 800c40c:	0800c4ab 	.word	0x0800c4ab
 800c410:	0800c4ab 	.word	0x0800c4ab
 800c414:	0800c4ab 	.word	0x0800c4ab
 800c418:	0800c4ab 	.word	0x0800c4ab
 800c41c:	0800c4ab 	.word	0x0800c4ab
 800c420:	0800c4ab 	.word	0x0800c4ab
 800c424:	0800c4ab 	.word	0x0800c4ab
 800c428:	0800c4ab 	.word	0x0800c4ab
 800c42c:	0800c4ab 	.word	0x0800c4ab
 800c430:	0800c4ab 	.word	0x0800c4ab
 800c434:	0800c4ab 	.word	0x0800c4ab
 800c438:	0800c4ab 	.word	0x0800c4ab
 800c43c:	0800c49d 	.word	0x0800c49d
 800c440:	2b40      	cmp	r3, #64	@ 0x40
 800c442:	d02e      	beq.n	800c4a2 <UART_SetConfig+0x8aa>
 800c444:	e031      	b.n	800c4aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c446:	f7fa fd69 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 800c44a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c44c:	e033      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c44e:	f7fa fd7b 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 800c452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c454:	e02f      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fc fd2a 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c464:	e027      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c466:	f107 0318 	add.w	r3, r7, #24
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fc fe76 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c474:	e01f      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c476:	4b2d      	ldr	r3, [pc, #180]	@ (800c52c <UART_SetConfig+0x934>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d009      	beq.n	800c496 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c482:	4b2a      	ldr	r3, [pc, #168]	@ (800c52c <UART_SetConfig+0x934>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	08db      	lsrs	r3, r3, #3
 800c488:	f003 0303 	and.w	r3, r3, #3
 800c48c:	4a24      	ldr	r2, [pc, #144]	@ (800c520 <UART_SetConfig+0x928>)
 800c48e:	fa22 f303 	lsr.w	r3, r2, r3
 800c492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c494:	e00f      	b.n	800c4b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c496:	4b22      	ldr	r3, [pc, #136]	@ (800c520 <UART_SetConfig+0x928>)
 800c498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c49a:	e00c      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c49c:	4b21      	ldr	r3, [pc, #132]	@ (800c524 <UART_SetConfig+0x92c>)
 800c49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4a0:	e009      	b.n	800c4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4a8:	e005      	b.n	800c4b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c4b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 80e7 	beq.w	800c68c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	4a19      	ldr	r2, [pc, #100]	@ (800c528 <UART_SetConfig+0x930>)
 800c4c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4d0:	005a      	lsls	r2, r3, #1
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	085b      	lsrs	r3, r3, #1
 800c4d8:	441a      	add	r2, r3
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d916      	bls.n	800c518 <UART_SetConfig+0x920>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4f0:	d212      	bcs.n	800c518 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f023 030f 	bic.w	r3, r3, #15
 800c4fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	b29b      	uxth	r3, r3
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	b29a      	uxth	r2, r3
 800c508:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c50a:	4313      	orrs	r3, r2
 800c50c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c514:	60da      	str	r2, [r3, #12]
 800c516:	e0b9      	b.n	800c68c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c51e:	e0b5      	b.n	800c68c <UART_SetConfig+0xa94>
 800c520:	03d09000 	.word	0x03d09000
 800c524:	003d0900 	.word	0x003d0900
 800c528:	080118f0 	.word	0x080118f0
 800c52c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c530:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c534:	2b20      	cmp	r3, #32
 800c536:	dc49      	bgt.n	800c5cc <UART_SetConfig+0x9d4>
 800c538:	2b00      	cmp	r3, #0
 800c53a:	db7c      	blt.n	800c636 <UART_SetConfig+0xa3e>
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	d87a      	bhi.n	800c636 <UART_SetConfig+0xa3e>
 800c540:	a201      	add	r2, pc, #4	@ (adr r2, 800c548 <UART_SetConfig+0x950>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c5d3 	.word	0x0800c5d3
 800c54c:	0800c5db 	.word	0x0800c5db
 800c550:	0800c637 	.word	0x0800c637
 800c554:	0800c637 	.word	0x0800c637
 800c558:	0800c5e3 	.word	0x0800c5e3
 800c55c:	0800c637 	.word	0x0800c637
 800c560:	0800c637 	.word	0x0800c637
 800c564:	0800c637 	.word	0x0800c637
 800c568:	0800c5f3 	.word	0x0800c5f3
 800c56c:	0800c637 	.word	0x0800c637
 800c570:	0800c637 	.word	0x0800c637
 800c574:	0800c637 	.word	0x0800c637
 800c578:	0800c637 	.word	0x0800c637
 800c57c:	0800c637 	.word	0x0800c637
 800c580:	0800c637 	.word	0x0800c637
 800c584:	0800c637 	.word	0x0800c637
 800c588:	0800c603 	.word	0x0800c603
 800c58c:	0800c637 	.word	0x0800c637
 800c590:	0800c637 	.word	0x0800c637
 800c594:	0800c637 	.word	0x0800c637
 800c598:	0800c637 	.word	0x0800c637
 800c59c:	0800c637 	.word	0x0800c637
 800c5a0:	0800c637 	.word	0x0800c637
 800c5a4:	0800c637 	.word	0x0800c637
 800c5a8:	0800c637 	.word	0x0800c637
 800c5ac:	0800c637 	.word	0x0800c637
 800c5b0:	0800c637 	.word	0x0800c637
 800c5b4:	0800c637 	.word	0x0800c637
 800c5b8:	0800c637 	.word	0x0800c637
 800c5bc:	0800c637 	.word	0x0800c637
 800c5c0:	0800c637 	.word	0x0800c637
 800c5c4:	0800c637 	.word	0x0800c637
 800c5c8:	0800c629 	.word	0x0800c629
 800c5cc:	2b40      	cmp	r3, #64	@ 0x40
 800c5ce:	d02e      	beq.n	800c62e <UART_SetConfig+0xa36>
 800c5d0:	e031      	b.n	800c636 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5d2:	f7fa fca3 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 800c5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5d8:	e033      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5da:	f7fa fcb5 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 800c5de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5e0:	e02f      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fc fc64 	bl	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f0:	e027      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5f2:	f107 0318 	add.w	r3, r7, #24
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fc fdb0 	bl	800915c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c600:	e01f      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c602:	4b2d      	ldr	r3, [pc, #180]	@ (800c6b8 <UART_SetConfig+0xac0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0320 	and.w	r3, r3, #32
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c60e:	4b2a      	ldr	r3, [pc, #168]	@ (800c6b8 <UART_SetConfig+0xac0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	08db      	lsrs	r3, r3, #3
 800c614:	f003 0303 	and.w	r3, r3, #3
 800c618:	4a28      	ldr	r2, [pc, #160]	@ (800c6bc <UART_SetConfig+0xac4>)
 800c61a:	fa22 f303 	lsr.w	r3, r2, r3
 800c61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c620:	e00f      	b.n	800c642 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c622:	4b26      	ldr	r3, [pc, #152]	@ (800c6bc <UART_SetConfig+0xac4>)
 800c624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c626:	e00c      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c628:	4b25      	ldr	r3, [pc, #148]	@ (800c6c0 <UART_SetConfig+0xac8>)
 800c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c62c:	e009      	b.n	800c642 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c634:	e005      	b.n	800c642 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c640:	bf00      	nop
    }

    if (pclk != 0U)
 800c642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d021      	beq.n	800c68c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6c4 <UART_SetConfig+0xacc>)
 800c64e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c652:	461a      	mov	r2, r3
 800c654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c656:	fbb3 f2f2 	udiv	r2, r3, r2
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	085b      	lsrs	r3, r3, #1
 800c660:	441a      	add	r2, r3
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	2b0f      	cmp	r3, #15
 800c670:	d909      	bls.n	800c686 <UART_SetConfig+0xa8e>
 800c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c678:	d205      	bcs.n	800c686 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60da      	str	r2, [r3, #12]
 800c684:	e002      	b.n	800c68c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2201      	movs	r2, #1
 800c690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	2201      	movs	r2, #1
 800c698:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c6a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3748      	adds	r7, #72	@ 0x48
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6b6:	bf00      	nop
 800c6b8:	58024400 	.word	0x58024400
 800c6bc:	03d09000 	.word	0x03d09000
 800c6c0:	003d0900 	.word	0x003d0900
 800c6c4:	080118f0 	.word	0x080118f0

0800c6c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00a      	beq.n	800c6f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	430a      	orrs	r2, r1
 800c712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c718:	f003 0302 	and.w	r3, r3, #2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00a      	beq.n	800c736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	430a      	orrs	r2, r1
 800c734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c73a:	f003 0304 	and.w	r3, r3, #4
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00a      	beq.n	800c758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	430a      	orrs	r2, r1
 800c756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c75c:	f003 0310 	and.w	r3, r3, #16
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00a      	beq.n	800c77a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	430a      	orrs	r2, r1
 800c778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d01a      	beq.n	800c7de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7c6:	d10a      	bne.n	800c7de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	605a      	str	r2, [r3, #4]
  }
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b098      	sub	sp, #96	@ 0x60
 800c810:	af02      	add	r7, sp, #8
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c81c:	f7f7 fbb6 	bl	8003f8c <HAL_GetTick>
 800c820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0308 	and.w	r3, r3, #8
 800c82c:	2b08      	cmp	r3, #8
 800c82e:	d12f      	bne.n	800c890 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c838:	2200      	movs	r2, #0
 800c83a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f88e 	bl	800c960 <UART_WaitOnFlagUntilTimeout>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d022      	beq.n	800c890 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c852:	e853 3f00 	ldrex	r3, [r3]
 800c856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c85e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	461a      	mov	r2, r3
 800c866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c868:	647b      	str	r3, [r7, #68]	@ 0x44
 800c86a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c870:	e841 2300 	strex	r3, r2, [r1]
 800c874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1e6      	bne.n	800c84a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2220      	movs	r2, #32
 800c880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e063      	b.n	800c958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0304 	and.w	r3, r3, #4
 800c89a:	2b04      	cmp	r3, #4
 800c89c:	d149      	bne.n	800c932 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c89e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f857 	bl	800c960 <UART_WaitOnFlagUntilTimeout>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d03c      	beq.n	800c932 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f023 0301 	bic.w	r3, r3, #1
 800c900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c90a:	61fa      	str	r2, [r7, #28]
 800c90c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	69b9      	ldr	r1, [r7, #24]
 800c910:	69fa      	ldr	r2, [r7, #28]
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	617b      	str	r3, [r7, #20]
   return(result);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e5      	bne.n	800c8ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2220      	movs	r2, #32
 800c922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e012      	b.n	800c958 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2220      	movs	r2, #32
 800c936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2220      	movs	r2, #32
 800c93e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3758      	adds	r7, #88	@ 0x58
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	4613      	mov	r3, r2
 800c96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c970:	e04f      	b.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c978:	d04b      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c97a:	f7f7 fb07 	bl	8003f8c <HAL_GetTick>
 800c97e:	4602      	mov	r2, r0
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	429a      	cmp	r2, r3
 800c988:	d302      	bcc.n	800c990 <UART_WaitOnFlagUntilTimeout+0x30>
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e04e      	b.n	800ca32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d037      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b80      	cmp	r3, #128	@ 0x80
 800c9a6:	d034      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2b40      	cmp	r3, #64	@ 0x40
 800c9ac:	d031      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
 800c9b8:	2b08      	cmp	r3, #8
 800c9ba:	d110      	bne.n	800c9de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2208      	movs	r2, #8
 800c9c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f839 	bl	800ca3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2208      	movs	r2, #8
 800c9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e029      	b.n	800ca32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9ec:	d111      	bne.n	800ca12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f81f 	bl	800ca3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e00f      	b.n	800ca32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69da      	ldr	r2, [r3, #28]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	bf0c      	ite	eq
 800ca22:	2301      	moveq	r3, #1
 800ca24:	2300      	movne	r3, #0
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	461a      	mov	r2, r3
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d0a0      	beq.n	800c972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b095      	sub	sp, #84	@ 0x54
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca4c:	e853 3f00 	ldrex	r3, [r3]
 800ca50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca6a:	e841 2300 	strex	r3, r2, [r1]
 800ca6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1e6      	bne.n	800ca44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	6a3b      	ldr	r3, [r7, #32]
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	4b1e      	ldr	r3, [pc, #120]	@ (800cb04 <UART_EndRxTransfer+0xc8>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3308      	adds	r3, #8
 800ca94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca9e:	e841 2300 	strex	r3, r2, [r1]
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1e5      	bne.n	800ca76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d118      	bne.n	800cae4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	e853 3f00 	ldrex	r3, [r3]
 800cabe:	60bb      	str	r3, [r7, #8]
   return(result);
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	f023 0310 	bic.w	r3, r3, #16
 800cac6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	461a      	mov	r2, r3
 800cace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cad0:	61bb      	str	r3, [r7, #24]
 800cad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad4:	6979      	ldr	r1, [r7, #20]
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	e841 2300 	strex	r3, r2, [r1]
 800cadc:	613b      	str	r3, [r7, #16]
   return(result);
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e6      	bne.n	800cab2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800caf8:	bf00      	nop
 800cafa:	3754      	adds	r7, #84	@ 0x54
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	effffffe 	.word	0xeffffffe

0800cb08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d101      	bne.n	800cb1e <HAL_UARTEx_DisableFifoMode+0x16>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e027      	b.n	800cb6e <HAL_UARTEx_DisableFifoMode+0x66>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2224      	movs	r2, #36	@ 0x24
 800cb2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f022 0201 	bic.w	r2, r2, #1
 800cb44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cb4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d101      	bne.n	800cb92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb8e:	2302      	movs	r3, #2
 800cb90:	e02d      	b.n	800cbee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2224      	movs	r2, #36	@ 0x24
 800cb9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 0201 	bic.w	r2, r2, #1
 800cbb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f850 	bl	800cc74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2220      	movs	r2, #32
 800cbe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d101      	bne.n	800cc0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	e02d      	b.n	800cc6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2224      	movs	r2, #36	@ 0x24
 800cc1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f022 0201 	bic.w	r2, r2, #1
 800cc34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f812 	bl	800cc74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
	...

0800cc74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d108      	bne.n	800cc96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc94:	e031      	b.n	800ccfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc96:	2310      	movs	r3, #16
 800cc98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc9a:	2310      	movs	r3, #16
 800cc9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	0e5b      	lsrs	r3, r3, #25
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 0307 	and.w	r3, r3, #7
 800ccac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	0f5b      	lsrs	r3, r3, #29
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0307 	and.w	r3, r3, #7
 800ccbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	7b3a      	ldrb	r2, [r7, #12]
 800ccc2:	4911      	ldr	r1, [pc, #68]	@ (800cd08 <UARTEx_SetNbDataToProcess+0x94>)
 800ccc4:	5c8a      	ldrb	r2, [r1, r2]
 800ccc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ccca:	7b3a      	ldrb	r2, [r7, #12]
 800cccc:	490f      	ldr	r1, [pc, #60]	@ (800cd0c <UARTEx_SetNbDataToProcess+0x98>)
 800ccce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	7b7a      	ldrb	r2, [r7, #13]
 800cce0:	4909      	ldr	r1, [pc, #36]	@ (800cd08 <UARTEx_SetNbDataToProcess+0x94>)
 800cce2:	5c8a      	ldrb	r2, [r1, r2]
 800cce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cce8:	7b7a      	ldrb	r2, [r7, #13]
 800ccea:	4908      	ldr	r1, [pc, #32]	@ (800cd0c <UARTEx_SetNbDataToProcess+0x98>)
 800ccec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccee:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ccfa:	bf00      	nop
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	08011908 	.word	0x08011908
 800cd0c:	08011910 	.word	0x08011910

0800cd10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd10:	b084      	sub	sp, #16
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	f107 001c 	add.w	r0, r7, #28
 800cd1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cd26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cd28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cd2a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800cd2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800cd32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800cd36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	4b07      	ldr	r3, [pc, #28]	@ (800cd60 <SDMMC_Init+0x50>)
 800cd44:	4013      	ands	r3, r2
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3714      	adds	r7, #20
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	b004      	add	sp, #16
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	ffc02c00 	.word	0xffc02c00

0800cd64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f043 0203 	orr.w	r2, r3, #3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0303 	and.w	r3, r3, #3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cdfe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ce04:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ce0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	4b06      	ldr	r3, [pc, #24]	@ (800ce30 <SDMMC_SendCommand+0x50>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	fffee0c0 	.word	0xfffee0c0

0800ce34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	b2db      	uxtb	r3, r3
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b085      	sub	sp, #20
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3314      	adds	r3, #20
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	4413      	add	r3, r2
 800ce62:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ce9a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cea0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cea6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	431a      	orrs	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cebe:	2300      	movs	r3, #0

}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ceda:	2310      	movs	r3, #16
 800cedc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cee4:	2300      	movs	r3, #0
 800cee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ceec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ff73 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cefa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cefe:	2110      	movs	r1, #16
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fa5f 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800cf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf08:	69fb      	ldr	r3, [r7, #28]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3720      	adds	r7, #32
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b088      	sub	sp, #32
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf20:	2311      	movs	r3, #17
 800cf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf34:	f107 0308 	add.w	r3, r7, #8
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ff50 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cf40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf44:	2111      	movs	r1, #17
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa3c 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800cf4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3720      	adds	r7, #32
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cf66:	2312      	movs	r3, #18
 800cf68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff ff2d 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cf86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf8a:	2112      	movs	r1, #18
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fa19 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800cf92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf94:	69fb      	ldr	r3, [r7, #28]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3720      	adds	r7, #32
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b088      	sub	sp, #32
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cfac:	2318      	movs	r3, #24
 800cfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff ff0a 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cfcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfd0:	2118      	movs	r1, #24
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9f6 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800cfd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfda:	69fb      	ldr	r3, [r7, #28]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cff2:	2319      	movs	r3, #25
 800cff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cffc:	2300      	movs	r3, #0
 800cffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d006:	f107 0308 	add.w	r3, r7, #8
 800d00a:	4619      	mov	r1, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff fee7 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d012:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d016:	2119      	movs	r1, #25
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f9d3 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d020:	69fb      	ldr	r3, [r7, #28]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3720      	adds	r7, #32
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d034:	2300      	movs	r3, #0
 800d036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d038:	230c      	movs	r3, #12
 800d03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d03c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d042:	2300      	movs	r3, #0
 800d044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d04a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff feb8 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d070:	4a0b      	ldr	r2, [pc, #44]	@ (800d0a0 <SDMMC_CmdStopTransfer+0x74>)
 800d072:	210c      	movs	r1, #12
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f9a5 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d07a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d08e:	d101      	bne.n	800d094 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d090:	2300      	movs	r3, #0
 800d092:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d094:	69fb      	ldr	r3, [r7, #28]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3720      	adds	r7, #32
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	05f5e100 	.word	0x05f5e100

0800d0a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d0b2:	2307      	movs	r3, #7
 800d0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c6:	f107 0308 	add.w	r3, r7, #8
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fe87 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d0d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0d6:	2107      	movs	r1, #7
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f973 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b088      	sub	sp, #32
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0fe:	2300      	movs	r3, #0
 800d100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d108:	f107 0308 	add.w	r3, r7, #8
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff fe66 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fb97 	bl	800d848 <SDMMC_GetCmdError>
 800d11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11c:	69fb      	ldr	r3, [r7, #28]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b088      	sub	sp, #32
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d12e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d134:	2308      	movs	r3, #8
 800d136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d13e:	2300      	movs	r3, #0
 800d140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff fe46 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fb29 	bl	800d7ac <SDMMC_GetCmdResp7>
 800d15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d15c:	69fb      	ldr	r3, [r7, #28]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b088      	sub	sp, #32
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d174:	2337      	movs	r3, #55	@ 0x37
 800d176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d17e:	2300      	movs	r3, #0
 800d180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d188:	f107 0308 	add.w	r3, r7, #8
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff fe26 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d194:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d198:	2137      	movs	r1, #55	@ 0x37
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f912 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3720      	adds	r7, #32
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b088      	sub	sp, #32
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d1ba:	2329      	movs	r3, #41	@ 0x29
 800d1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ce:	f107 0308 	add.w	r3, r7, #8
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff fe03 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa2e 	bl	800d63c <SDMMC_GetCmdResp3>
 800d1e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1e2:	69fb      	ldr	r3, [r7, #28]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3720      	adds	r7, #32
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d1fa:	2306      	movs	r3, #6
 800d1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d204:	2300      	movs	r3, #0
 800d206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d20c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fde3 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d21a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d21e:	2106      	movs	r1, #6
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f8cf 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d228:	69fb      	ldr	r3, [r7, #28]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b088      	sub	sp, #32
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d23e:	2333      	movs	r3, #51	@ 0x33
 800d240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d248:	2300      	movs	r3, #0
 800d24a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d24c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d252:	f107 0308 	add.w	r3, r7, #8
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff fdc1 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d25e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d262:	2133      	movs	r1, #51	@ 0x33
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f8ad 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d26a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d26c:	69fb      	ldr	r3, [r7, #28]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3720      	adds	r7, #32
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b088      	sub	sp, #32
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d282:	2302      	movs	r3, #2
 800d284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d286:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d28a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d28c:	2300      	movs	r3, #0
 800d28e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d294:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff fd9f 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f980 	bl	800d5a8 <SDMMC_GetCmdResp2>
 800d2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d2c2:	2309      	movs	r3, #9
 800d2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff fd7f 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f960 	bl	800d5a8 <SDMMC_GetCmdResp2>
 800d2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2ea:	69fb      	ldr	r3, [r7, #28]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3720      	adds	r7, #32
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d302:	2303      	movs	r3, #3
 800d304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d316:	f107 0308 	add.w	r3, r7, #8
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff fd5f 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	2103      	movs	r1, #3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f9c8 	bl	800d6bc <SDMMC_GetCmdResp6>
 800d32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d32e:	69fb      	ldr	r3, [r7, #28]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3720      	adds	r7, #32
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d346:	230d      	movs	r3, #13
 800d348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d34a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fd3d 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d36a:	210d      	movs	r1, #13
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f829 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d374:	69fb      	ldr	r3, [r7, #28]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3720      	adds	r7, #32
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b088      	sub	sp, #32
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d38a:	230d      	movs	r3, #13
 800d38c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d38e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d39c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d39e:	f107 0308 	add.w	r3, r7, #8
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fd1b 	bl	800cde0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d3aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ae:	210d      	movs	r1, #13
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f807 	bl	800d3c4 <SDMMC_GetCmdResp1>
 800d3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3b8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d3d2:	4b70      	ldr	r3, [pc, #448]	@ (800d594 <SDMMC_GetCmdResp1+0x1d0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a70      	ldr	r2, [pc, #448]	@ (800d598 <SDMMC_GetCmdResp1+0x1d4>)
 800d3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3dc:	0a5a      	lsrs	r2, r3, #9
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	fb02 f303 	mul.w	r3, r2, r3
 800d3e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	1e5a      	subs	r2, r3, #1
 800d3ea:	61fa      	str	r2, [r7, #28]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3f4:	e0c9      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	4b67      	ldr	r3, [pc, #412]	@ (800d59c <SDMMC_GetCmdResp1+0x1d8>)
 800d400:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0ef      	beq.n	800d3e6 <SDMMC_GetCmdResp1+0x22>
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1ea      	bne.n	800d3e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2204      	movs	r2, #4
 800d420:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d422:	2304      	movs	r3, #4
 800d424:	e0b1      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2201      	movs	r2, #1
 800d436:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d438:	2301      	movs	r3, #1
 800d43a:	e0a6      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4a58      	ldr	r2, [pc, #352]	@ (800d5a0 <SDMMC_GetCmdResp1+0x1dc>)
 800d440:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f7ff fcf6 	bl	800ce34 <SDMMC_GetCommandResponse>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d001      	beq.n	800d456 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d452:	2301      	movs	r3, #1
 800d454:	e099      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d456:	2100      	movs	r1, #0
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f7ff fcf8 	bl	800ce4e <SDMMC_GetResponse>
 800d45e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4b50      	ldr	r3, [pc, #320]	@ (800d5a4 <SDMMC_GetCmdResp1+0x1e0>)
 800d464:	4013      	ands	r3, r2
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e08d      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2b00      	cmp	r3, #0
 800d472:	da02      	bge.n	800d47a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d474:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d478:	e087      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d484:	2340      	movs	r3, #64	@ 0x40
 800d486:	e080      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d492:	2380      	movs	r3, #128	@ 0x80
 800d494:	e079      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d4a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4a4:	e071      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4b4:	e069      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4c4:	e061      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4d4:	e059      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4e4:	e051      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d4f4:	e049      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d500:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d504:	e041      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d514:	e039      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d524:	e031      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d530:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d534:	e029      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d540:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d544:	e021      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d550:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d554:	e019      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d560:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d564:	e011      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d570:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d574:	e009      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f003 0308 	and.w	r3, r3, #8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d580:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d584:	e001      	b.n	800d58a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d586:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	24000050 	.word	0x24000050
 800d598:	10624dd3 	.word	0x10624dd3
 800d59c:	00200045 	.word	0x00200045
 800d5a0:	002000c5 	.word	0x002000c5
 800d5a4:	fdffe008 	.word	0xfdffe008

0800d5a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d5b0:	4b1f      	ldr	r3, [pc, #124]	@ (800d630 <SDMMC_GetCmdResp2+0x88>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a1f      	ldr	r2, [pc, #124]	@ (800d634 <SDMMC_GetCmdResp2+0x8c>)
 800d5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ba:	0a5b      	lsrs	r3, r3, #9
 800d5bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5c0:	fb02 f303 	mul.w	r3, r2, r3
 800d5c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	1e5a      	subs	r2, r3, #1
 800d5ca:	60fa      	str	r2, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5d4:	e026      	b.n	800d624 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0ef      	beq.n	800d5c6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1ea      	bne.n	800d5c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5f4:	f003 0304 	and.w	r3, r3, #4
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2204      	movs	r2, #4
 800d600:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d602:	2304      	movs	r3, #4
 800d604:	e00e      	b.n	800d624 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d004      	beq.n	800d61c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d618:	2301      	movs	r3, #1
 800d61a:	e003      	b.n	800d624 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a06      	ldr	r2, [pc, #24]	@ (800d638 <SDMMC_GetCmdResp2+0x90>)
 800d620:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr
 800d630:	24000050 	.word	0x24000050
 800d634:	10624dd3 	.word	0x10624dd3
 800d638:	002000c5 	.word	0x002000c5

0800d63c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d644:	4b1a      	ldr	r3, [pc, #104]	@ (800d6b0 <SDMMC_GetCmdResp3+0x74>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a1a      	ldr	r2, [pc, #104]	@ (800d6b4 <SDMMC_GetCmdResp3+0x78>)
 800d64a:	fba2 2303 	umull	r2, r3, r2, r3
 800d64e:	0a5b      	lsrs	r3, r3, #9
 800d650:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d654:	fb02 f303 	mul.w	r3, r2, r3
 800d658:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	1e5a      	subs	r2, r3, #1
 800d65e:	60fa      	str	r2, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d664:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d668:	e01b      	b.n	800d6a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d66e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0ef      	beq.n	800d65a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1ea      	bne.n	800d65a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2204      	movs	r2, #4
 800d694:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d696:	2304      	movs	r3, #4
 800d698:	e003      	b.n	800d6a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a06      	ldr	r2, [pc, #24]	@ (800d6b8 <SDMMC_GetCmdResp3+0x7c>)
 800d69e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	24000050 	.word	0x24000050
 800d6b4:	10624dd3 	.word	0x10624dd3
 800d6b8:	002000c5 	.word	0x002000c5

0800d6bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d6ca:	4b35      	ldr	r3, [pc, #212]	@ (800d7a0 <SDMMC_GetCmdResp6+0xe4>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a35      	ldr	r2, [pc, #212]	@ (800d7a4 <SDMMC_GetCmdResp6+0xe8>)
 800d6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6d4:	0a5b      	lsrs	r3, r3, #9
 800d6d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6da:	fb02 f303 	mul.w	r3, r2, r3
 800d6de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	1e5a      	subs	r2, r3, #1
 800d6e4:	61fa      	str	r2, [r7, #28]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d6ee:	e052      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d0ef      	beq.n	800d6e0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1ea      	bne.n	800d6e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d70e:	f003 0304 	and.w	r3, r3, #4
 800d712:	2b00      	cmp	r3, #0
 800d714:	d004      	beq.n	800d720 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2204      	movs	r2, #4
 800d71a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d71c:	2304      	movs	r3, #4
 800d71e:	e03a      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d004      	beq.n	800d736 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2201      	movs	r2, #1
 800d730:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d732:	2301      	movs	r3, #1
 800d734:	e02f      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff fb7c 	bl	800ce34 <SDMMC_GetCommandResponse>
 800d73c:	4603      	mov	r3, r0
 800d73e:	461a      	mov	r2, r3
 800d740:	7afb      	ldrb	r3, [r7, #11]
 800d742:	4293      	cmp	r3, r2
 800d744:	d001      	beq.n	800d74a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d746:	2301      	movs	r3, #1
 800d748:	e025      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4a16      	ldr	r2, [pc, #88]	@ (800d7a8 <SDMMC_GetCmdResp6+0xec>)
 800d74e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d750:	2100      	movs	r1, #0
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f7ff fb7b 	bl	800ce4e <SDMMC_GetResponse>
 800d758:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	0c1b      	lsrs	r3, r3, #16
 800d768:	b29a      	uxth	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d76e:	2300      	movs	r3, #0
 800d770:	e011      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d77c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d780:	e009      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d78c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d790:	e001      	b.n	800d796 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d792:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d796:	4618      	mov	r0, r3
 800d798:	3720      	adds	r7, #32
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	24000050 	.word	0x24000050
 800d7a4:	10624dd3 	.word	0x10624dd3
 800d7a8:	002000c5 	.word	0x002000c5

0800d7ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7b4:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <SDMMC_GetCmdResp7+0x94>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a22      	ldr	r2, [pc, #136]	@ (800d844 <SDMMC_GetCmdResp7+0x98>)
 800d7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d7be:	0a5b      	lsrs	r3, r3, #9
 800d7c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7c4:	fb02 f303 	mul.w	r3, r2, r3
 800d7c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	1e5a      	subs	r2, r3, #1
 800d7ce:	60fa      	str	r2, [r7, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d102      	bne.n	800d7da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7d8:	e02c      	b.n	800d834 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0ef      	beq.n	800d7ca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1ea      	bne.n	800d7ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f8:	f003 0304 	and.w	r3, r3, #4
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d004      	beq.n	800d80a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2204      	movs	r2, #4
 800d804:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d806:	2304      	movs	r3, #4
 800d808:	e014      	b.n	800d834 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	2b00      	cmp	r3, #0
 800d814:	d004      	beq.n	800d820 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e009      	b.n	800d834 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2240      	movs	r2, #64	@ 0x40
 800d830:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d832:	2300      	movs	r3, #0

}
 800d834:	4618      	mov	r0, r3
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	24000050 	.word	0x24000050
 800d844:	10624dd3 	.word	0x10624dd3

0800d848 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d850:	4b11      	ldr	r3, [pc, #68]	@ (800d898 <SDMMC_GetCmdError+0x50>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a11      	ldr	r2, [pc, #68]	@ (800d89c <SDMMC_GetCmdError+0x54>)
 800d856:	fba2 2303 	umull	r2, r3, r2, r3
 800d85a:	0a5b      	lsrs	r3, r3, #9
 800d85c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d860:	fb02 f303 	mul.w	r3, r2, r3
 800d864:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	1e5a      	subs	r2, r3, #1
 800d86a:	60fa      	str	r2, [r7, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d870:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d874:	e009      	b.n	800d88a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d87a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0f1      	beq.n	800d866 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a06      	ldr	r2, [pc, #24]	@ (800d8a0 <SDMMC_GetCmdError+0x58>)
 800d886:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	24000050 	.word	0x24000050
 800d89c:	10624dd3 	.word	0x10624dd3
 800d8a0:	002000c5 	.word	0x002000c5

0800d8a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d8a8:	4904      	ldr	r1, [pc, #16]	@ (800d8bc <MX_FATFS_Init+0x18>)
 800d8aa:	4805      	ldr	r0, [pc, #20]	@ (800d8c0 <MX_FATFS_Init+0x1c>)
 800d8ac:	f002 fc08 	bl	80100c0 <FATFS_LinkDriver>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <MX_FATFS_Init+0x20>)
 800d8b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d8b8:	bf00      	nop
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	240007d0 	.word	0x240007d0
 800d8c0:	08011918 	.word	0x08011918
 800d8c4:	240007cc 	.word	0x240007cc

0800d8c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d8cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	68f9      	ldr	r1, [r7, #12]
 800d8ee:	4806      	ldr	r0, [pc, #24]	@ (800d908 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d8f0:	f7fc f95e 	bl	8009bb0 <HAL_SD_ReadBlocks_DMA>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d001      	beq.n	800d8fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	24000404 	.word	0x24000404

0800d90c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	68f9      	ldr	r1, [r7, #12]
 800d922:	4806      	ldr	r0, [pc, #24]	@ (800d93c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d924:	f7fc f9ec 	bl	8009d00 <HAL_SD_WriteBlocks_DMA>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	24000404 	.word	0x24000404

0800d940 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d944:	4805      	ldr	r0, [pc, #20]	@ (800d95c <BSP_SD_GetCardState+0x1c>)
 800d946:	f7fc ffe5 	bl	800a914 <HAL_SD_GetCardState>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b04      	cmp	r3, #4
 800d94e:	bf14      	ite	ne
 800d950:	2301      	movne	r3, #1
 800d952:	2300      	moveq	r3, #0
 800d954:	b2db      	uxtb	r3, r3
}
 800d956:	4618      	mov	r0, r3
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	24000404 	.word	0x24000404

0800d960 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d968:	6879      	ldr	r1, [r7, #4]
 800d96a:	4803      	ldr	r0, [pc, #12]	@ (800d978 <BSP_SD_GetCardInfo+0x18>)
 800d96c:	f7fc fe94 	bl	800a698 <HAL_SD_GetCardInfo>
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	24000404 	.word	0x24000404

0800d97c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d984:	f000 fa14 	bl	800ddb0 <BSP_SD_WriteCpltCallback>
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d998:	f000 fa16 	bl	800ddc8 <BSP_SD_ReadCpltCallback>
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d9ac:	f7f6 faee 	bl	8003f8c <HAL_GetTick>
 800d9b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d9b2:	e006      	b.n	800d9c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9b4:	f7ff ffc4 	bl	800d940 <BSP_SD_GetCardState>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e009      	b.n	800d9d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d9c2:	f7f6 fae3 	bl	8003f8c <HAL_GetTick>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d8f0      	bhi.n	800d9b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d9d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800da18 <SD_CheckStatus+0x38>)
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d9f0:	f7ff ffa6 	bl	800d940 <BSP_SD_GetCardState>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d107      	bne.n	800da0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d9fa:	4b07      	ldr	r3, [pc, #28]	@ (800da18 <SD_CheckStatus+0x38>)
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	f023 0301 	bic.w	r3, r3, #1
 800da04:	b2da      	uxtb	r2, r3
 800da06:	4b04      	ldr	r3, [pc, #16]	@ (800da18 <SD_CheckStatus+0x38>)
 800da08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800da0a:	4b03      	ldr	r3, [pc, #12]	@ (800da18 <SD_CheckStatus+0x38>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	b2db      	uxtb	r3, r3
}
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	2400005d 	.word	0x2400005d

0800da1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff ffd9 	bl	800d9e0 <SD_CheckStatus>
 800da2e:	4603      	mov	r3, r0
 800da30:	461a      	mov	r2, r3
 800da32:	4b04      	ldr	r3, [pc, #16]	@ (800da44 <SD_initialize+0x28>)
 800da34:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800da36:	4b03      	ldr	r3, [pc, #12]	@ (800da44 <SD_initialize+0x28>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	b2db      	uxtb	r3, r3
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	2400005d 	.word	0x2400005d

0800da48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff ffc3 	bl	800d9e0 <SD_CheckStatus>
 800da5a:	4603      	mov	r3, r0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60b9      	str	r1, [r7, #8]
 800da6c:	607a      	str	r2, [r7, #4]
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da78:	f247 5030 	movw	r0, #30000	@ 0x7530
 800da7c:	f7ff ff92 	bl	800d9a4 <SD_CheckStatusWithTimeout>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	da01      	bge.n	800da8a <SD_read+0x26>
  {
    return res;
 800da86:	7ffb      	ldrb	r3, [r7, #31]
 800da88:	e08b      	b.n	800dba2 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f003 0303 	and.w	r3, r3, #3
 800da90:	2b00      	cmp	r3, #0
 800da92:	d13b      	bne.n	800db0c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	68b8      	ldr	r0, [r7, #8]
 800da9a:	f7ff ff1d 	bl	800d8d8 <BSP_SD_ReadBlocks_DMA>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d17d      	bne.n	800dba0 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800daa4:	4b41      	ldr	r3, [pc, #260]	@ (800dbac <SD_read+0x148>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800daaa:	f7f6 fa6f 	bl	8003f8c <HAL_GetTick>
 800daae:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dab0:	bf00      	nop
 800dab2:	4b3e      	ldr	r3, [pc, #248]	@ (800dbac <SD_read+0x148>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d108      	bne.n	800dacc <SD_read+0x68>
 800daba:	f7f6 fa67 	bl	8003f8c <HAL_GetTick>
 800dabe:	4602      	mov	r2, r0
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dac8:	4293      	cmp	r3, r2
 800daca:	d9f2      	bls.n	800dab2 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800dacc:	4b37      	ldr	r3, [pc, #220]	@ (800dbac <SD_read+0x148>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d102      	bne.n	800dada <SD_read+0x76>
      {
        res = RES_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	77fb      	strb	r3, [r7, #31]
 800dad8:	e062      	b.n	800dba0 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800dada:	4b34      	ldr	r3, [pc, #208]	@ (800dbac <SD_read+0x148>)
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dae0:	f7f6 fa54 	bl	8003f8c <HAL_GetTick>
 800dae4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dae6:	e007      	b.n	800daf8 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dae8:	f7ff ff2a 	bl	800d940 <BSP_SD_GetCardState>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d102      	bne.n	800daf8 <SD_read+0x94>
          {
            res = RES_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800daf6:	e053      	b.n	800dba0 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800daf8:	f7f6 fa48 	bl	8003f8c <HAL_GetTick>
 800dafc:	4602      	mov	r2, r0
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	f247 522f 	movw	r2, #29999	@ 0x752f
 800db06:	4293      	cmp	r3, r2
 800db08:	d9ee      	bls.n	800dae8 <SD_read+0x84>
 800db0a:	e049      	b.n	800dba0 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800db0c:	2300      	movs	r3, #0
 800db0e:	61bb      	str	r3, [r7, #24]
 800db10:	e037      	b.n	800db82 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	4619      	mov	r1, r3
 800db1c:	4824      	ldr	r0, [pc, #144]	@ (800dbb0 <SD_read+0x14c>)
 800db1e:	f7ff fedb 	bl	800d8d8 <BSP_SD_ReadBlocks_DMA>
 800db22:	4603      	mov	r3, r0
 800db24:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800db26:	7fbb      	ldrb	r3, [r7, #30]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d12f      	bne.n	800db8c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800db2c:	f7f6 fa2e 	bl	8003f8c <HAL_GetTick>
 800db30:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800db32:	bf00      	nop
 800db34:	4b1d      	ldr	r3, [pc, #116]	@ (800dbac <SD_read+0x148>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d108      	bne.n	800db4e <SD_read+0xea>
 800db3c:	f7f6 fa26 	bl	8003f8c <HAL_GetTick>
 800db40:	4602      	mov	r2, r0
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	f247 522f 	movw	r2, #29999	@ 0x752f
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d9f2      	bls.n	800db34 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 800db4e:	4b17      	ldr	r3, [pc, #92]	@ (800dbac <SD_read+0x148>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <SD_read+0xf8>
          {
            res = RES_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	77fb      	strb	r3, [r7, #31]
            break;
 800db5a:	e018      	b.n	800db8e <SD_read+0x12a>
          }
          ReadStatus = 0;
 800db5c:	4b13      	ldr	r3, [pc, #76]	@ (800dbac <SD_read+0x148>)
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	4a12      	ldr	r2, [pc, #72]	@ (800dbb0 <SD_read+0x14c>)
 800db66:	4618      	mov	r0, r3
 800db68:	4611      	mov	r1, r2
 800db6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db6e:	461a      	mov	r2, r3
 800db70:	f003 f825 	bl	8010bbe <memcpy>
          buff += BLOCKSIZE;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800db7a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	3301      	adds	r3, #1
 800db80:	61bb      	str	r3, [r7, #24]
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d8c3      	bhi.n	800db12 <SD_read+0xae>
 800db8a:	e000      	b.n	800db8e <SD_read+0x12a>
        }
        else
        {
          break;
 800db8c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	429a      	cmp	r2, r3
 800db94:	d104      	bne.n	800dba0 <SD_read+0x13c>
 800db96:	7fbb      	ldrb	r3, [r7, #30]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <SD_read+0x13c>
        res = RES_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 800dba0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	24000e38 	.word	0x24000e38
 800dbb0:	24000c34 	.word	0x24000c34

0800dbb4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	607a      	str	r2, [r7, #4]
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800dbc8:	4b4b      	ldr	r3, [pc, #300]	@ (800dcf8 <SD_write+0x144>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dbce:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dbd2:	f7ff fee7 	bl	800d9a4 <SD_CheckStatusWithTimeout>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	da01      	bge.n	800dbe0 <SD_write+0x2c>
  {
    return res;
 800dbdc:	7ffb      	ldrb	r3, [r7, #31]
 800dbde:	e087      	b.n	800dcf0 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	f003 0303 	and.w	r3, r3, #3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d138      	bne.n	800dc5c <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	68b8      	ldr	r0, [r7, #8]
 800dbf0:	f7ff fe8c 	bl	800d90c <BSP_SD_WriteBlocks_DMA>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d179      	bne.n	800dcee <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dbfa:	f7f6 f9c7 	bl	8003f8c <HAL_GetTick>
 800dbfe:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dc00:	bf00      	nop
 800dc02:	4b3d      	ldr	r3, [pc, #244]	@ (800dcf8 <SD_write+0x144>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d108      	bne.n	800dc1c <SD_write+0x68>
 800dc0a:	f7f6 f9bf 	bl	8003f8c <HAL_GetTick>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d9f2      	bls.n	800dc02 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800dc1c:	4b36      	ldr	r3, [pc, #216]	@ (800dcf8 <SD_write+0x144>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <SD_write+0x76>
      {
        res = RES_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	77fb      	strb	r3, [r7, #31]
 800dc28:	e061      	b.n	800dcee <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 800dc2a:	4b33      	ldr	r3, [pc, #204]	@ (800dcf8 <SD_write+0x144>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dc30:	f7f6 f9ac 	bl	8003f8c <HAL_GetTick>
 800dc34:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dc36:	e007      	b.n	800dc48 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc38:	f7ff fe82 	bl	800d940 <BSP_SD_GetCardState>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d102      	bne.n	800dc48 <SD_write+0x94>
          {
            res = RES_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	77fb      	strb	r3, [r7, #31]
            break;
 800dc46:	e052      	b.n	800dcee <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dc48:	f7f6 f9a0 	bl	8003f8c <HAL_GetTick>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d9ee      	bls.n	800dc38 <SD_write+0x84>
 800dc5a:	e048      	b.n	800dcee <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61bb      	str	r3, [r7, #24]
 800dc60:	e034      	b.n	800dccc <SD_write+0x118>
      {
        WriteStatus = 0;
 800dc62:	4b25      	ldr	r3, [pc, #148]	@ (800dcf8 <SD_write+0x144>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800dc68:	4a24      	ldr	r2, [pc, #144]	@ (800dcfc <SD_write+0x148>)
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	4610      	mov	r0, r2
 800dc6e:	4619      	mov	r1, r3
 800dc70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc74:	461a      	mov	r2, r3
 800dc76:	f002 ffa2 	bl	8010bbe <memcpy>
        buff += BLOCKSIZE;
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800dc80:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	481b      	ldr	r0, [pc, #108]	@ (800dcfc <SD_write+0x148>)
 800dc8e:	f7ff fe3d 	bl	800d90c <BSP_SD_WriteBlocks_DMA>
 800dc92:	4603      	mov	r3, r0
 800dc94:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800dc96:	7fbb      	ldrb	r3, [r7, #30]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d11c      	bne.n	800dcd6 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800dc9c:	f7f6 f976 	bl	8003f8c <HAL_GetTick>
 800dca0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dca2:	bf00      	nop
 800dca4:	4b14      	ldr	r3, [pc, #80]	@ (800dcf8 <SD_write+0x144>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d108      	bne.n	800dcbe <SD_write+0x10a>
 800dcac:	f7f6 f96e 	bl	8003f8c <HAL_GetTick>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d9f2      	bls.n	800dca4 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 800dcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf8 <SD_write+0x144>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d009      	beq.n	800dcda <SD_write+0x126>
      for (i = 0; i < count; i++)
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	61bb      	str	r3, [r7, #24]
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d8c6      	bhi.n	800dc62 <SD_write+0xae>
 800dcd4:	e002      	b.n	800dcdc <SD_write+0x128>
          }

        }
        else
        {
          break;
 800dcd6:	bf00      	nop
 800dcd8:	e000      	b.n	800dcdc <SD_write+0x128>
            break;
 800dcda:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d104      	bne.n	800dcee <SD_write+0x13a>
 800dce4:	7fbb      	ldrb	r3, [r7, #30]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d101      	bne.n	800dcee <SD_write+0x13a>
        res = RES_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 800dcee:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3720      	adds	r7, #32
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	24000e34 	.word	0x24000e34
 800dcfc:	24000c34 	.word	0x24000c34

0800dd00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08c      	sub	sp, #48	@ 0x30
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	603a      	str	r2, [r7, #0]
 800dd0a:	71fb      	strb	r3, [r7, #7]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd16:	4b25      	ldr	r3, [pc, #148]	@ (800ddac <SD_ioctl+0xac>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <SD_ioctl+0x28>
 800dd24:	2303      	movs	r3, #3
 800dd26:	e03c      	b.n	800dda2 <SD_ioctl+0xa2>

  switch (cmd)
 800dd28:	79bb      	ldrb	r3, [r7, #6]
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d834      	bhi.n	800dd98 <SD_ioctl+0x98>
 800dd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd34 <SD_ioctl+0x34>)
 800dd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd34:	0800dd45 	.word	0x0800dd45
 800dd38:	0800dd4d 	.word	0x0800dd4d
 800dd3c:	0800dd65 	.word	0x0800dd65
 800dd40:	0800dd7f 	.word	0x0800dd7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd4a:	e028      	b.n	800dd9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd4c:	f107 0308 	add.w	r3, r7, #8
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fe05 	bl	800d960 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd56:	6a3a      	ldr	r2, [r7, #32]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd62:	e01c      	b.n	800dd9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd64:	f107 0308 	add.w	r3, r7, #8
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7ff fdf9 	bl	800d960 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dd76:	2300      	movs	r3, #0
 800dd78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd7c:	e00f      	b.n	800dd9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd7e:	f107 0308 	add.w	r3, r7, #8
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7ff fdec 	bl	800d960 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8a:	0a5a      	lsrs	r2, r3, #9
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd96:	e002      	b.n	800dd9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800dd9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3730      	adds	r7, #48	@ 0x30
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	2400005d 	.word	0x2400005d

0800ddb0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ddb4:	4b03      	ldr	r3, [pc, #12]	@ (800ddc4 <BSP_SD_WriteCpltCallback+0x14>)
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	601a      	str	r2, [r3, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	24000e34 	.word	0x24000e34

0800ddc8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ddcc:	4b03      	ldr	r3, [pc, #12]	@ (800dddc <BSP_SD_ReadCpltCallback+0x14>)
 800ddce:	2201      	movs	r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	24000e38 	.word	0x24000e38

0800dde0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	4a08      	ldr	r2, [pc, #32]	@ (800de10 <disk_status+0x30>)
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	79fa      	ldrb	r2, [r7, #7]
 800ddf8:	4905      	ldr	r1, [pc, #20]	@ (800de10 <disk_status+0x30>)
 800ddfa:	440a      	add	r2, r1
 800ddfc:	7a12      	ldrb	r2, [r2, #8]
 800ddfe:	4610      	mov	r0, r2
 800de00:	4798      	blx	r3
 800de02:	4603      	mov	r3, r0
 800de04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	24000e64 	.word	0x24000e64

0800de14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	4a0e      	ldr	r2, [pc, #56]	@ (800de60 <disk_initialize+0x4c>)
 800de26:	5cd3      	ldrb	r3, [r2, r3]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d114      	bne.n	800de56 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	4a0c      	ldr	r2, [pc, #48]	@ (800de60 <disk_initialize+0x4c>)
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	79fa      	ldrb	r2, [r7, #7]
 800de3a:	4909      	ldr	r1, [pc, #36]	@ (800de60 <disk_initialize+0x4c>)
 800de3c:	440a      	add	r2, r1
 800de3e:	7a12      	ldrb	r2, [r2, #8]
 800de40:	4610      	mov	r0, r2
 800de42:	4798      	blx	r3
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d103      	bne.n	800de56 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	4a03      	ldr	r2, [pc, #12]	@ (800de60 <disk_initialize+0x4c>)
 800de52:	2101      	movs	r1, #1
 800de54:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800de56:	7bfb      	ldrb	r3, [r7, #15]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	24000e64 	.word	0x24000e64

0800de64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de64:	b590      	push	{r4, r7, lr}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	4603      	mov	r3, r0
 800de72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	4a0a      	ldr	r2, [pc, #40]	@ (800dea0 <disk_read+0x3c>)
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4413      	add	r3, r2
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	689c      	ldr	r4, [r3, #8]
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	4a07      	ldr	r2, [pc, #28]	@ (800dea0 <disk_read+0x3c>)
 800de84:	4413      	add	r3, r2
 800de86:	7a18      	ldrb	r0, [r3, #8]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	68b9      	ldr	r1, [r7, #8]
 800de8e:	47a0      	blx	r4
 800de90:	4603      	mov	r3, r0
 800de92:	75fb      	strb	r3, [r7, #23]
  return res;
 800de94:	7dfb      	ldrb	r3, [r7, #23]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd90      	pop	{r4, r7, pc}
 800de9e:	bf00      	nop
 800dea0:	24000e64 	.word	0x24000e64

0800dea4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b087      	sub	sp, #28
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60b9      	str	r1, [r7, #8]
 800deac:	607a      	str	r2, [r7, #4]
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	4a0a      	ldr	r2, [pc, #40]	@ (800dee0 <disk_write+0x3c>)
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	68dc      	ldr	r4, [r3, #12]
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
 800dec2:	4a07      	ldr	r2, [pc, #28]	@ (800dee0 <disk_write+0x3c>)
 800dec4:	4413      	add	r3, r2
 800dec6:	7a18      	ldrb	r0, [r3, #8]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	47a0      	blx	r4
 800ded0:	4603      	mov	r3, r0
 800ded2:	75fb      	strb	r3, [r7, #23]
  return res;
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd90      	pop	{r4, r7, pc}
 800dede:	bf00      	nop
 800dee0:	24000e64 	.word	0x24000e64

0800dee4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	4603      	mov	r3, r0
 800deec:	603a      	str	r2, [r7, #0]
 800deee:	71fb      	strb	r3, [r7, #7]
 800def0:	460b      	mov	r3, r1
 800def2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	4a09      	ldr	r2, [pc, #36]	@ (800df1c <disk_ioctl+0x38>)
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	79fa      	ldrb	r2, [r7, #7]
 800df02:	4906      	ldr	r1, [pc, #24]	@ (800df1c <disk_ioctl+0x38>)
 800df04:	440a      	add	r2, r1
 800df06:	7a10      	ldrb	r0, [r2, #8]
 800df08:	79b9      	ldrb	r1, [r7, #6]
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4798      	blx	r3
 800df0e:	4603      	mov	r3, r0
 800df10:	73fb      	strb	r3, [r7, #15]
  return res;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	24000e64 	.word	0x24000e64

0800df20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3301      	adds	r3, #1
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df30:	89fb      	ldrh	r3, [r7, #14]
 800df32:	021b      	lsls	r3, r3, #8
 800df34:	b21a      	sxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	b21b      	sxth	r3, r3
 800df3c:	4313      	orrs	r3, r2
 800df3e:	b21b      	sxth	r3, r3
 800df40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df42:	89fb      	ldrh	r3, [r7, #14]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3714      	adds	r7, #20
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3303      	adds	r3, #3
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	3202      	adds	r2, #2
 800df68:	7812      	ldrb	r2, [r2, #0]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	021b      	lsls	r3, r3, #8
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	3201      	adds	r2, #1
 800df76:	7812      	ldrb	r2, [r2, #0]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	7812      	ldrb	r2, [r2, #0]
 800df84:	4313      	orrs	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]
	return rv;
 800df88:	68fb      	ldr	r3, [r7, #12]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800df96:	b480      	push	{r7}
 800df98:	b083      	sub	sp, #12
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	460b      	mov	r3, r1
 800dfa0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	887a      	ldrh	r2, [r7, #2]
 800dfaa:	b2d2      	uxtb	r2, r2
 800dfac:	701a      	strb	r2, [r3, #0]
 800dfae:	887b      	ldrh	r3, [r7, #2]
 800dfb0:	0a1b      	lsrs	r3, r3, #8
 800dfb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	1c5a      	adds	r2, r3, #1
 800dfb8:	607a      	str	r2, [r7, #4]
 800dfba:	887a      	ldrh	r2, [r7, #2]
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	701a      	strb	r2, [r3, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	701a      	strb	r2, [r3, #0]
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	0a1b      	lsrs	r3, r3, #8
 800dfe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	b2d2      	uxtb	r2, r2
 800dff2:	701a      	strb	r2, [r3, #0]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	0a1b      	lsrs	r3, r3, #8
 800dff8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	b2d2      	uxtb	r2, r2
 800e004:	701a      	strb	r2, [r3, #0]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	0a1b      	lsrs	r3, r3, #8
 800e00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	b2d2      	uxtb	r2, r2
 800e016:	701a      	strb	r2, [r3, #0]
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00d      	beq.n	800e05a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	1c53      	adds	r3, r2, #1
 800e042:	613b      	str	r3, [r7, #16]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	1c59      	adds	r1, r3, #1
 800e048:	6179      	str	r1, [r7, #20]
 800e04a:	7812      	ldrb	r2, [r2, #0]
 800e04c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3b01      	subs	r3, #1
 800e052:	607b      	str	r3, [r7, #4]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1f1      	bne.n	800e03e <mem_cpy+0x1a>
	}
}
 800e05a:	bf00      	nop
 800e05c:	371c      	adds	r7, #28
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e066:	b480      	push	{r7}
 800e068:	b087      	sub	sp, #28
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	60f8      	str	r0, [r7, #12]
 800e06e:	60b9      	str	r1, [r7, #8]
 800e070:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	617a      	str	r2, [r7, #20]
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	b2d2      	uxtb	r2, r2
 800e080:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3b01      	subs	r3, #1
 800e086:	607b      	str	r3, [r7, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1f3      	bne.n	800e076 <mem_set+0x10>
}
 800e08e:	bf00      	nop
 800e090:	bf00      	nop
 800e092:	371c      	adds	r7, #28
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e09c:	b480      	push	{r7}
 800e09e:	b089      	sub	sp, #36	@ 0x24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	61fb      	str	r3, [r7, #28]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	61fa      	str	r2, [r7, #28]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	61ba      	str	r2, [r7, #24]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	1acb      	subs	r3, r1, r3
 800e0c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	607b      	str	r3, [r7, #4]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <mem_cmp+0x40>
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0eb      	beq.n	800e0b4 <mem_cmp+0x18>

	return r;
 800e0dc:	697b      	ldr	r3, [r7, #20]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3724      	adds	r7, #36	@ 0x24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e0ea:	b480      	push	{r7}
 800e0ec:	b083      	sub	sp, #12
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e0f4:	e002      	b.n	800e0fc <chk_chr+0x12>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	607b      	str	r3, [r7, #4]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d005      	beq.n	800e110 <chk_chr+0x26>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d1f2      	bne.n	800e0f6 <chk_chr+0xc>
	return *str;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	781b      	ldrb	r3, [r3, #0]
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	60bb      	str	r3, [r7, #8]
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e029      	b.n	800e188 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e134:	4a27      	ldr	r2, [pc, #156]	@ (800e1d4 <chk_lock+0xb4>)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	011b      	lsls	r3, r3, #4
 800e13a:	4413      	add	r3, r2
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d01d      	beq.n	800e17e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e142:	4a24      	ldr	r2, [pc, #144]	@ (800e1d4 <chk_lock+0xb4>)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	011b      	lsls	r3, r3, #4
 800e148:	4413      	add	r3, r2
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	429a      	cmp	r2, r3
 800e152:	d116      	bne.n	800e182 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e154:	4a1f      	ldr	r2, [pc, #124]	@ (800e1d4 <chk_lock+0xb4>)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	011b      	lsls	r3, r3, #4
 800e15a:	4413      	add	r3, r2
 800e15c:	3304      	adds	r3, #4
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e164:	429a      	cmp	r2, r3
 800e166:	d10c      	bne.n	800e182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e168:	4a1a      	ldr	r2, [pc, #104]	@ (800e1d4 <chk_lock+0xb4>)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	011b      	lsls	r3, r3, #4
 800e16e:	4413      	add	r3, r2
 800e170:	3308      	adds	r3, #8
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e178:	429a      	cmp	r2, r3
 800e17a:	d102      	bne.n	800e182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e17c:	e007      	b.n	800e18e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3301      	adds	r3, #1
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d9d2      	bls.n	800e134 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2b02      	cmp	r3, #2
 800e192:	d109      	bne.n	800e1a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d102      	bne.n	800e1a0 <chk_lock+0x80>
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d101      	bne.n	800e1a4 <chk_lock+0x84>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	e010      	b.n	800e1c6 <chk_lock+0xa6>
 800e1a4:	2312      	movs	r3, #18
 800e1a6:	e00e      	b.n	800e1c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d108      	bne.n	800e1c0 <chk_lock+0xa0>
 800e1ae:	4a09      	ldr	r2, [pc, #36]	@ (800e1d4 <chk_lock+0xb4>)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	4413      	add	r3, r2
 800e1b6:	330c      	adds	r3, #12
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1be:	d101      	bne.n	800e1c4 <chk_lock+0xa4>
 800e1c0:	2310      	movs	r3, #16
 800e1c2:	e000      	b.n	800e1c6 <chk_lock+0xa6>
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	24000e44 	.word	0x24000e44

0800e1d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	607b      	str	r3, [r7, #4]
 800e1e2:	e002      	b.n	800e1ea <enq_lock+0x12>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	607b      	str	r3, [r7, #4]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d806      	bhi.n	800e1fe <enq_lock+0x26>
 800e1f0:	4a09      	ldr	r2, [pc, #36]	@ (800e218 <enq_lock+0x40>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	4413      	add	r3, r2
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1f2      	bne.n	800e1e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b02      	cmp	r3, #2
 800e202:	bf14      	ite	ne
 800e204:	2301      	movne	r3, #1
 800e206:	2300      	moveq	r3, #0
 800e208:	b2db      	uxtb	r3, r3
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	24000e44 	.word	0x24000e44

0800e21c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e226:	2300      	movs	r3, #0
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	e01f      	b.n	800e26c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e22c:	4a41      	ldr	r2, [pc, #260]	@ (800e334 <inc_lock+0x118>)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	011b      	lsls	r3, r3, #4
 800e232:	4413      	add	r3, r2
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d113      	bne.n	800e266 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e23e:	4a3d      	ldr	r2, [pc, #244]	@ (800e334 <inc_lock+0x118>)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	011b      	lsls	r3, r3, #4
 800e244:	4413      	add	r3, r2
 800e246:	3304      	adds	r3, #4
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e24e:	429a      	cmp	r2, r3
 800e250:	d109      	bne.n	800e266 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e252:	4a38      	ldr	r2, [pc, #224]	@ (800e334 <inc_lock+0x118>)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	4413      	add	r3, r2
 800e25a:	3308      	adds	r3, #8
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e262:	429a      	cmp	r2, r3
 800e264:	d006      	beq.n	800e274 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3301      	adds	r3, #1
 800e26a:	60fb      	str	r3, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d9dc      	bls.n	800e22c <inc_lock+0x10>
 800e272:	e000      	b.n	800e276 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e274:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d132      	bne.n	800e2e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e27c:	2300      	movs	r3, #0
 800e27e:	60fb      	str	r3, [r7, #12]
 800e280:	e002      	b.n	800e288 <inc_lock+0x6c>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3301      	adds	r3, #1
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d806      	bhi.n	800e29c <inc_lock+0x80>
 800e28e:	4a29      	ldr	r2, [pc, #164]	@ (800e334 <inc_lock+0x118>)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	4413      	add	r3, r2
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1f2      	bne.n	800e282 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d101      	bne.n	800e2a6 <inc_lock+0x8a>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e040      	b.n	800e328 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	4922      	ldr	r1, [pc, #136]	@ (800e334 <inc_lock+0x118>)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	011b      	lsls	r3, r3, #4
 800e2b0:	440b      	add	r3, r1
 800e2b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	491e      	ldr	r1, [pc, #120]	@ (800e334 <inc_lock+0x118>)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	011b      	lsls	r3, r3, #4
 800e2be:	440b      	add	r3, r1
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	695a      	ldr	r2, [r3, #20]
 800e2c8:	491a      	ldr	r1, [pc, #104]	@ (800e334 <inc_lock+0x118>)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	440b      	add	r3, r1
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e2d4:	4a17      	ldr	r2, [pc, #92]	@ (800e334 <inc_lock+0x118>)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	011b      	lsls	r3, r3, #4
 800e2da:	4413      	add	r3, r2
 800e2dc:	330c      	adds	r3, #12
 800e2de:	2200      	movs	r2, #0
 800e2e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d009      	beq.n	800e2fc <inc_lock+0xe0>
 800e2e8:	4a12      	ldr	r2, [pc, #72]	@ (800e334 <inc_lock+0x118>)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	011b      	lsls	r3, r3, #4
 800e2ee:	4413      	add	r3, r2
 800e2f0:	330c      	adds	r3, #12
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <inc_lock+0xe0>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e015      	b.n	800e328 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d108      	bne.n	800e314 <inc_lock+0xf8>
 800e302:	4a0c      	ldr	r2, [pc, #48]	@ (800e334 <inc_lock+0x118>)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	011b      	lsls	r3, r3, #4
 800e308:	4413      	add	r3, r2
 800e30a:	330c      	adds	r3, #12
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	3301      	adds	r3, #1
 800e310:	b29a      	uxth	r2, r3
 800e312:	e001      	b.n	800e318 <inc_lock+0xfc>
 800e314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e318:	4906      	ldr	r1, [pc, #24]	@ (800e334 <inc_lock+0x118>)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	011b      	lsls	r3, r3, #4
 800e31e:	440b      	add	r3, r1
 800e320:	330c      	adds	r3, #12
 800e322:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3301      	adds	r3, #1
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr
 800e334:	24000e44 	.word	0x24000e44

0800e338 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3b01      	subs	r3, #1
 800e344:	607b      	str	r3, [r7, #4]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d825      	bhi.n	800e398 <dec_lock+0x60>
		n = Files[i].ctr;
 800e34c:	4a17      	ldr	r2, [pc, #92]	@ (800e3ac <dec_lock+0x74>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	011b      	lsls	r3, r3, #4
 800e352:	4413      	add	r3, r2
 800e354:	330c      	adds	r3, #12
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e35a:	89fb      	ldrh	r3, [r7, #14]
 800e35c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e360:	d101      	bne.n	800e366 <dec_lock+0x2e>
 800e362:	2300      	movs	r3, #0
 800e364:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e366:	89fb      	ldrh	r3, [r7, #14]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <dec_lock+0x3a>
 800e36c:	89fb      	ldrh	r3, [r7, #14]
 800e36e:	3b01      	subs	r3, #1
 800e370:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e372:	4a0e      	ldr	r2, [pc, #56]	@ (800e3ac <dec_lock+0x74>)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	4413      	add	r3, r2
 800e37a:	330c      	adds	r3, #12
 800e37c:	89fa      	ldrh	r2, [r7, #14]
 800e37e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e380:	89fb      	ldrh	r3, [r7, #14]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d105      	bne.n	800e392 <dec_lock+0x5a>
 800e386:	4a09      	ldr	r2, [pc, #36]	@ (800e3ac <dec_lock+0x74>)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	011b      	lsls	r3, r3, #4
 800e38c:	4413      	add	r3, r2
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	737b      	strb	r3, [r7, #13]
 800e396:	e001      	b.n	800e39c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e398:	2302      	movs	r3, #2
 800e39a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e39c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3714      	adds	r7, #20
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	24000e44 	.word	0x24000e44

0800e3b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	60fb      	str	r3, [r7, #12]
 800e3bc:	e010      	b.n	800e3e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e3be:	4a0d      	ldr	r2, [pc, #52]	@ (800e3f4 <clear_lock+0x44>)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	4413      	add	r3, r2
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d105      	bne.n	800e3da <clear_lock+0x2a>
 800e3ce:	4a09      	ldr	r2, [pc, #36]	@ (800e3f4 <clear_lock+0x44>)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	011b      	lsls	r3, r3, #4
 800e3d4:	4413      	add	r3, r2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	60fb      	str	r3, [r7, #12]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d9eb      	bls.n	800e3be <clear_lock+0xe>
	}
}
 800e3e6:	bf00      	nop
 800e3e8:	bf00      	nop
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	24000e44 	.word	0x24000e44

0800e3f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b086      	sub	sp, #24
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e400:	2300      	movs	r3, #0
 800e402:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	78db      	ldrb	r3, [r3, #3]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d034      	beq.n	800e476 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e410:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	7858      	ldrb	r0, [r3, #1]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e41c:	2301      	movs	r3, #1
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	f7ff fd40 	bl	800dea4 <disk_write>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d002      	beq.n	800e430 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	73fb      	strb	r3, [r7, #15]
 800e42e:	e022      	b.n	800e476 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	1ad2      	subs	r2, r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	699b      	ldr	r3, [r3, #24]
 800e442:	429a      	cmp	r2, r3
 800e444:	d217      	bcs.n	800e476 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	789b      	ldrb	r3, [r3, #2]
 800e44a:	613b      	str	r3, [r7, #16]
 800e44c:	e010      	b.n	800e470 <sync_window+0x78>
					wsect += fs->fsize;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	4413      	add	r3, r2
 800e456:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	7858      	ldrb	r0, [r3, #1]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e462:	2301      	movs	r3, #1
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	f7ff fd1d 	bl	800dea4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	613b      	str	r3, [r7, #16]
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d8eb      	bhi.n	800e44e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e476:	7bfb      	ldrb	r3, [r7, #15]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e48a:	2300      	movs	r3, #0
 800e48c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	429a      	cmp	r2, r3
 800e496:	d01b      	beq.n	800e4d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff ffad 	bl	800e3f8 <sync_window>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e4a2:	7bfb      	ldrb	r3, [r7, #15]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d113      	bne.n	800e4d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7858      	ldrb	r0, [r3, #1]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	f7ff fcd5 	bl	800de64 <disk_read>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d004      	beq.n	800e4ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff ff87 	bl	800e3f8 <sync_window>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e4ee:	7bfb      	ldrb	r3, [r7, #15]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d158      	bne.n	800e5a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d148      	bne.n	800e58e <sync_fs+0xb2>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	791b      	ldrb	r3, [r3, #4]
 800e500:	2b01      	cmp	r3, #1
 800e502:	d144      	bne.n	800e58e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3330      	adds	r3, #48	@ 0x30
 800e508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e50c:	2100      	movs	r1, #0
 800e50e:	4618      	mov	r0, r3
 800e510:	f7ff fda9 	bl	800e066 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3330      	adds	r3, #48	@ 0x30
 800e518:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e51c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fd38 	bl	800df96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3330      	adds	r3, #48	@ 0x30
 800e52a:	4921      	ldr	r1, [pc, #132]	@ (800e5b0 <sync_fs+0xd4>)
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff fd4d 	bl	800dfcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3330      	adds	r3, #48	@ 0x30
 800e536:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e53a:	491e      	ldr	r1, [pc, #120]	@ (800e5b4 <sync_fs+0xd8>)
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff fd45 	bl	800dfcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3330      	adds	r3, #48	@ 0x30
 800e546:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f7ff fd3b 	bl	800dfcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3330      	adds	r3, #48	@ 0x30
 800e55a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7ff fd31 	bl	800dfcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	69db      	ldr	r3, [r3, #28]
 800e56e:	1c5a      	adds	r2, r3, #1
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7858      	ldrb	r0, [r3, #1]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e582:	2301      	movs	r3, #1
 800e584:	f7ff fc8e 	bl	800dea4 <disk_write>
			fs->fsi_flag = 0;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	785b      	ldrb	r3, [r3, #1]
 800e592:	2200      	movs	r2, #0
 800e594:	2100      	movs	r1, #0
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff fca4 	bl	800dee4 <disk_ioctl>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <sync_fs+0xca>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	41615252 	.word	0x41615252
 800e5b4:	61417272 	.word	0x61417272

0800e5b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	3b02      	subs	r3, #2
 800e5c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	695b      	ldr	r3, [r3, #20]
 800e5cc:	3b02      	subs	r3, #2
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d301      	bcc.n	800e5d8 <clust2sect+0x20>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e008      	b.n	800e5ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	895b      	ldrh	r3, [r3, #10]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	fb03 f202 	mul.w	r2, r3, r2
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e8:	4413      	add	r3, r2
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d904      	bls.n	800e616 <get_fat+0x20>
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d302      	bcc.n	800e61c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e616:	2301      	movs	r3, #1
 800e618:	617b      	str	r3, [r7, #20]
 800e61a:	e08e      	b.n	800e73a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e61c:	f04f 33ff 	mov.w	r3, #4294967295
 800e620:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	2b03      	cmp	r3, #3
 800e628:	d061      	beq.n	800e6ee <get_fat+0xf8>
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	dc7b      	bgt.n	800e726 <get_fat+0x130>
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d002      	beq.n	800e638 <get_fat+0x42>
 800e632:	2b02      	cmp	r3, #2
 800e634:	d041      	beq.n	800e6ba <get_fat+0xc4>
 800e636:	e076      	b.n	800e726 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	085b      	lsrs	r3, r3, #1
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	4413      	add	r3, r2
 800e644:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	6a1a      	ldr	r2, [r3, #32]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	0a5b      	lsrs	r3, r3, #9
 800e64e:	4413      	add	r3, r2
 800e650:	4619      	mov	r1, r3
 800e652:	6938      	ldr	r0, [r7, #16]
 800e654:	f7ff ff14 	bl	800e480 <move_window>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d166      	bne.n	800e72c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	60fa      	str	r2, [r7, #12]
 800e664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	4413      	add	r3, r2
 800e66c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e670:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6a1a      	ldr	r2, [r3, #32]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	0a5b      	lsrs	r3, r3, #9
 800e67a:	4413      	add	r3, r2
 800e67c:	4619      	mov	r1, r3
 800e67e:	6938      	ldr	r0, [r7, #16]
 800e680:	f7ff fefe 	bl	800e480 <move_window>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d152      	bne.n	800e730 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	4413      	add	r3, r2
 800e694:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e698:	021b      	lsls	r3, r3, #8
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <get_fat+0xba>
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	091b      	lsrs	r3, r3, #4
 800e6ae:	e002      	b.n	800e6b6 <get_fat+0xc0>
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6b6:	617b      	str	r3, [r7, #20]
			break;
 800e6b8:	e03f      	b.n	800e73a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6a1a      	ldr	r2, [r3, #32]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	0a1b      	lsrs	r3, r3, #8
 800e6c2:	4413      	add	r3, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6938      	ldr	r0, [r7, #16]
 800e6c8:	f7ff feda 	bl	800e480 <move_window>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d130      	bne.n	800e734 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e6e0:	4413      	add	r3, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff fc1c 	bl	800df20 <ld_word>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	617b      	str	r3, [r7, #20]
			break;
 800e6ec:	e025      	b.n	800e73a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	6a1a      	ldr	r2, [r3, #32]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	09db      	lsrs	r3, r3, #7
 800e6f6:	4413      	add	r3, r2
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6938      	ldr	r0, [r7, #16]
 800e6fc:	f7ff fec0 	bl	800e480 <move_window>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d118      	bne.n	800e738 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e714:	4413      	add	r3, r2
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fc1a 	bl	800df50 <ld_dword>
 800e71c:	4603      	mov	r3, r0
 800e71e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e722:	617b      	str	r3, [r7, #20]
			break;
 800e724:	e009      	b.n	800e73a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e726:	2301      	movs	r3, #1
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	e006      	b.n	800e73a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e72c:	bf00      	nop
 800e72e:	e004      	b.n	800e73a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e730:	bf00      	nop
 800e732:	e002      	b.n	800e73a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e734:	bf00      	nop
 800e736:	e000      	b.n	800e73a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e738:	bf00      	nop
		}
	}

	return val;
 800e73a:	697b      	ldr	r3, [r7, #20]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e744:	b590      	push	{r4, r7, lr}
 800e746:	b089      	sub	sp, #36	@ 0x24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e750:	2302      	movs	r3, #2
 800e752:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b01      	cmp	r3, #1
 800e758:	f240 80d9 	bls.w	800e90e <put_fat+0x1ca>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	429a      	cmp	r2, r3
 800e764:	f080 80d3 	bcs.w	800e90e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	f000 8096 	beq.w	800e89e <put_fat+0x15a>
 800e772:	2b03      	cmp	r3, #3
 800e774:	f300 80cb 	bgt.w	800e90e <put_fat+0x1ca>
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d002      	beq.n	800e782 <put_fat+0x3e>
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d06e      	beq.n	800e85e <put_fat+0x11a>
 800e780:	e0c5      	b.n	800e90e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	61bb      	str	r3, [r7, #24]
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	085b      	lsrs	r3, r3, #1
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	4413      	add	r3, r2
 800e78e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6a1a      	ldr	r2, [r3, #32]
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	0a5b      	lsrs	r3, r3, #9
 800e798:	4413      	add	r3, r2
 800e79a:	4619      	mov	r1, r3
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f7ff fe6f 	bl	800e480 <move_window>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7a6:	7ffb      	ldrb	r3, [r7, #31]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f040 80a9 	bne.w	800e900 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	1c59      	adds	r1, r3, #1
 800e7b8:	61b9      	str	r1, [r7, #24]
 800e7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7be:	4413      	add	r3, r2
 800e7c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	f003 0301 	and.w	r3, r3, #1
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00d      	beq.n	800e7e8 <put_fat+0xa4>
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	b25b      	sxtb	r3, r3
 800e7d2:	f003 030f 	and.w	r3, r3, #15
 800e7d6:	b25a      	sxtb	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	011b      	lsls	r3, r3, #4
 800e7de:	b25b      	sxtb	r3, r3
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	b25b      	sxtb	r3, r3
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	e001      	b.n	800e7ec <put_fat+0xa8>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6a1a      	ldr	r2, [r3, #32]
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	0a5b      	lsrs	r3, r3, #9
 800e7fe:	4413      	add	r3, r2
 800e800:	4619      	mov	r1, r3
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f7ff fe3c 	bl	800e480 <move_window>
 800e808:	4603      	mov	r3, r0
 800e80a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e80c:	7ffb      	ldrb	r3, [r7, #31]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d178      	bne.n	800e904 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e81e:	4413      	add	r3, r2
 800e820:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d003      	beq.n	800e834 <put_fat+0xf0>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	091b      	lsrs	r3, r3, #4
 800e830:	b2db      	uxtb	r3, r3
 800e832:	e00e      	b.n	800e852 <put_fat+0x10e>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	b25b      	sxtb	r3, r3
 800e83a:	f023 030f 	bic.w	r3, r3, #15
 800e83e:	b25a      	sxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	b25b      	sxtb	r3, r3
 800e846:	f003 030f 	and.w	r3, r3, #15
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	4313      	orrs	r3, r2
 800e84e:	b25b      	sxtb	r3, r3
 800e850:	b2db      	uxtb	r3, r3
 800e852:	697a      	ldr	r2, [r7, #20]
 800e854:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2201      	movs	r2, #1
 800e85a:	70da      	strb	r2, [r3, #3]
			break;
 800e85c:	e057      	b.n	800e90e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6a1a      	ldr	r2, [r3, #32]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	0a1b      	lsrs	r3, r3, #8
 800e866:	4413      	add	r3, r2
 800e868:	4619      	mov	r1, r3
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f7ff fe08 	bl	800e480 <move_window>
 800e870:	4603      	mov	r3, r0
 800e872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e874:	7ffb      	ldrb	r3, [r7, #31]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d146      	bne.n	800e908 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e888:	4413      	add	r3, r2
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	b292      	uxth	r2, r2
 800e88e:	4611      	mov	r1, r2
 800e890:	4618      	mov	r0, r3
 800e892:	f7ff fb80 	bl	800df96 <st_word>
			fs->wflag = 1;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	70da      	strb	r2, [r3, #3]
			break;
 800e89c:	e037      	b.n	800e90e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6a1a      	ldr	r2, [r3, #32]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	09db      	lsrs	r3, r3, #7
 800e8a6:	4413      	add	r3, r2
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff fde8 	bl	800e480 <move_window>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8b4:	7ffb      	ldrb	r3, [r7, #31]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d128      	bne.n	800e90c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e8ce:	4413      	add	r3, r2
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff fb3d 	bl	800df50 <ld_dword>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e8dc:	4323      	orrs	r3, r4
 800e8de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e8ee:	4413      	add	r3, r2
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fb6a 	bl	800dfcc <st_dword>
			fs->wflag = 1;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	70da      	strb	r2, [r3, #3]
			break;
 800e8fe:	e006      	b.n	800e90e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e900:	bf00      	nop
 800e902:	e004      	b.n	800e90e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e904:	bf00      	nop
 800e906:	e002      	b.n	800e90e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e908:	bf00      	nop
 800e90a:	e000      	b.n	800e90e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e90c:	bf00      	nop
		}
	}
	return res;
 800e90e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3724      	adds	r7, #36	@ 0x24
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}

0800e918 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d904      	bls.n	800e93e <remove_chain+0x26>
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	695b      	ldr	r3, [r3, #20]
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d301      	bcc.n	800e942 <remove_chain+0x2a>
 800e93e:	2302      	movs	r3, #2
 800e940:	e04b      	b.n	800e9da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00c      	beq.n	800e962 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e948:	f04f 32ff 	mov.w	r2, #4294967295
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	69b8      	ldr	r0, [r7, #24]
 800e950:	f7ff fef8 	bl	800e744 <put_fat>
 800e954:	4603      	mov	r3, r0
 800e956:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e958:	7ffb      	ldrb	r3, [r7, #31]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <remove_chain+0x4a>
 800e95e:	7ffb      	ldrb	r3, [r7, #31]
 800e960:	e03b      	b.n	800e9da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e962:	68b9      	ldr	r1, [r7, #8]
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff fe46 	bl	800e5f6 <get_fat>
 800e96a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d031      	beq.n	800e9d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d101      	bne.n	800e97c <remove_chain+0x64>
 800e978:	2302      	movs	r3, #2
 800e97a:	e02e      	b.n	800e9da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e982:	d101      	bne.n	800e988 <remove_chain+0x70>
 800e984:	2301      	movs	r3, #1
 800e986:	e028      	b.n	800e9da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e988:	2200      	movs	r2, #0
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	69b8      	ldr	r0, [r7, #24]
 800e98e:	f7ff fed9 	bl	800e744 <put_fat>
 800e992:	4603      	mov	r3, r0
 800e994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e996:	7ffb      	ldrb	r3, [r7, #31]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <remove_chain+0x88>
 800e99c:	7ffb      	ldrb	r3, [r7, #31]
 800e99e:	e01c      	b.n	800e9da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	691a      	ldr	r2, [r3, #16]
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	3b02      	subs	r3, #2
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d20b      	bcs.n	800e9c6 <remove_chain+0xae>
			fs->free_clst++;
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	791b      	ldrb	r3, [r3, #4]
 800e9bc:	f043 0301 	orr.w	r3, r3, #1
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	695b      	ldr	r3, [r3, #20]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d3c6      	bcc.n	800e962 <remove_chain+0x4a>
 800e9d4:	e000      	b.n	800e9d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e9d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3720      	adds	r7, #32
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b088      	sub	sp, #32
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10d      	bne.n	800ea14 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <create_chain+0x2c>
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	69ba      	ldr	r2, [r7, #24]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d31b      	bcc.n	800ea46 <create_chain+0x64>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	61bb      	str	r3, [r7, #24]
 800ea12:	e018      	b.n	800ea46 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ea14:	6839      	ldr	r1, [r7, #0]
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fded 	bl	800e5f6 <get_fat>
 800ea1c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d801      	bhi.n	800ea28 <create_chain+0x46>
 800ea24:	2301      	movs	r3, #1
 800ea26:	e070      	b.n	800eb0a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2e:	d101      	bne.n	800ea34 <create_chain+0x52>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	e06a      	b.n	800eb0a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d201      	bcs.n	800ea42 <create_chain+0x60>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	e063      	b.n	800eb0a <create_chain+0x128>
		scl = clst;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	695b      	ldr	r3, [r3, #20]
 800ea54:	69fa      	ldr	r2, [r7, #28]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d307      	bcc.n	800ea6a <create_chain+0x88>
				ncl = 2;
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea5e:	69fa      	ldr	r2, [r7, #28]
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d901      	bls.n	800ea6a <create_chain+0x88>
 800ea66:	2300      	movs	r3, #0
 800ea68:	e04f      	b.n	800eb0a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea6a:	69f9      	ldr	r1, [r7, #28]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fdc2 	bl	800e5f6 <get_fat>
 800ea72:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00e      	beq.n	800ea98 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d003      	beq.n	800ea88 <create_chain+0xa6>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea86:	d101      	bne.n	800ea8c <create_chain+0xaa>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	e03e      	b.n	800eb0a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea8c:	69fa      	ldr	r2, [r7, #28]
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d1da      	bne.n	800ea4a <create_chain+0x68>
 800ea94:	2300      	movs	r3, #0
 800ea96:	e038      	b.n	800eb0a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea98:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9e:	69f9      	ldr	r1, [r7, #28]
 800eaa0:	6938      	ldr	r0, [r7, #16]
 800eaa2:	f7ff fe4f 	bl	800e744 <put_fat>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d109      	bne.n	800eac4 <create_chain+0xe2>
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d006      	beq.n	800eac4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eab6:	69fa      	ldr	r2, [r7, #28]
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	6938      	ldr	r0, [r7, #16]
 800eabc:	f7ff fe42 	bl	800e744 <put_fat>
 800eac0:	4603      	mov	r3, r0
 800eac2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d116      	bne.n	800eaf8 <create_chain+0x116>
		fs->last_clst = ncl;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	69fa      	ldr	r2, [r7, #28]
 800eace:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	691a      	ldr	r2, [r3, #16]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	3b02      	subs	r3, #2
 800eada:	429a      	cmp	r2, r3
 800eadc:	d804      	bhi.n	800eae8 <create_chain+0x106>
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	1e5a      	subs	r2, r3, #1
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	791b      	ldrb	r3, [r3, #4]
 800eaec:	f043 0301 	orr.w	r3, r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	711a      	strb	r2, [r3, #4]
 800eaf6:	e007      	b.n	800eb08 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d102      	bne.n	800eb04 <create_chain+0x122>
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e000      	b.n	800eb06 <create_chain+0x124>
 800eb04:	2301      	movs	r3, #1
 800eb06:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eb08:	69fb      	ldr	r3, [r7, #28]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3720      	adds	r7, #32
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b087      	sub	sp, #28
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb26:	3304      	adds	r3, #4
 800eb28:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	0a5b      	lsrs	r3, r3, #9
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	8952      	ldrh	r2, [r2, #10]
 800eb32:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	1d1a      	adds	r2, r3, #4
 800eb3c:	613a      	str	r2, [r7, #16]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d101      	bne.n	800eb4c <clmt_clust+0x3a>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e010      	b.n	800eb6e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d307      	bcc.n	800eb64 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	617b      	str	r3, [r7, #20]
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb62:	e7e9      	b.n	800eb38 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eb64:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	4413      	add	r3, r2
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b086      	sub	sp, #24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb90:	d204      	bcs.n	800eb9c <dir_sdi+0x22>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	f003 031f 	and.w	r3, r3, #31
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb9c:	2302      	movs	r3, #2
 800eb9e:	e063      	b.n	800ec68 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <dir_sdi+0x46>
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	d902      	bls.n	800ebc0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebbe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10c      	bne.n	800ebe0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	095b      	lsrs	r3, r3, #5
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	8912      	ldrh	r2, [r2, #8]
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d301      	bcc.n	800ebd6 <dir_sdi+0x5c>
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	e048      	b.n	800ec68 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	61da      	str	r2, [r3, #28]
 800ebde:	e029      	b.n	800ec34 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	895b      	ldrh	r3, [r3, #10]
 800ebe4:	025b      	lsls	r3, r3, #9
 800ebe6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebe8:	e019      	b.n	800ec1e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6979      	ldr	r1, [r7, #20]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff fd01 	bl	800e5f6 <get_fat>
 800ebf4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfc:	d101      	bne.n	800ec02 <dir_sdi+0x88>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e032      	b.n	800ec68 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d904      	bls.n	800ec12 <dir_sdi+0x98>
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	697a      	ldr	r2, [r7, #20]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d301      	bcc.n	800ec16 <dir_sdi+0x9c>
 800ec12:	2302      	movs	r3, #2
 800ec14:	e028      	b.n	800ec68 <dir_sdi+0xee>
			ofs -= csz;
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec1e:	683a      	ldr	r2, [r7, #0]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d2e1      	bcs.n	800ebea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ec26:	6979      	ldr	r1, [r7, #20]
 800ec28:	6938      	ldr	r0, [r7, #16]
 800ec2a:	f7ff fcc5 	bl	800e5b8 <clust2sect>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	69db      	ldr	r3, [r3, #28]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <dir_sdi+0xcc>
 800ec42:	2302      	movs	r3, #2
 800ec44:	e010      	b.n	800ec68 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	69da      	ldr	r2, [r3, #28]
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	0a5b      	lsrs	r3, r3, #9
 800ec4e:	441a      	add	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec60:	441a      	add	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3718      	adds	r7, #24
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	695b      	ldr	r3, [r3, #20]
 800ec84:	3320      	adds	r3, #32
 800ec86:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	69db      	ldr	r3, [r3, #28]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d003      	beq.n	800ec98 <dir_next+0x28>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec96:	d301      	bcc.n	800ec9c <dir_next+0x2c>
 800ec98:	2304      	movs	r3, #4
 800ec9a:	e0aa      	b.n	800edf2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f040 8098 	bne.w	800edd8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	1c5a      	adds	r2, r3, #1
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	699b      	ldr	r3, [r3, #24]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10b      	bne.n	800ecd2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	095b      	lsrs	r3, r3, #5
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	8912      	ldrh	r2, [r2, #8]
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	f0c0 8088 	bcc.w	800edd8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	61da      	str	r2, [r3, #28]
 800ecce:	2304      	movs	r3, #4
 800ecd0:	e08f      	b.n	800edf2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	0a5b      	lsrs	r3, r3, #9
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	8952      	ldrh	r2, [r2, #10]
 800ecda:	3a01      	subs	r2, #1
 800ecdc:	4013      	ands	r3, r2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d17a      	bne.n	800edd8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	699b      	ldr	r3, [r3, #24]
 800ece8:	4619      	mov	r1, r3
 800ecea:	4610      	mov	r0, r2
 800ecec:	f7ff fc83 	bl	800e5f6 <get_fat>
 800ecf0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d801      	bhi.n	800ecfc <dir_next+0x8c>
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e07a      	b.n	800edf2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d101      	bne.n	800ed08 <dir_next+0x98>
 800ed04:	2301      	movs	r3, #1
 800ed06:	e074      	b.n	800edf2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	695b      	ldr	r3, [r3, #20]
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d358      	bcc.n	800edc4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d104      	bne.n	800ed22 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	61da      	str	r2, [r3, #28]
 800ed1e:	2304      	movs	r3, #4
 800ed20:	e067      	b.n	800edf2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4610      	mov	r0, r2
 800ed2c:	f7ff fe59 	bl	800e9e2 <create_chain>
 800ed30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d101      	bne.n	800ed3c <dir_next+0xcc>
 800ed38:	2307      	movs	r3, #7
 800ed3a:	e05a      	b.n	800edf2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d101      	bne.n	800ed46 <dir_next+0xd6>
 800ed42:	2302      	movs	r3, #2
 800ed44:	e055      	b.n	800edf2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4c:	d101      	bne.n	800ed52 <dir_next+0xe2>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e04f      	b.n	800edf2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff fb50 	bl	800e3f8 <sync_window>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <dir_next+0xf2>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e047      	b.n	800edf2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3330      	adds	r3, #48	@ 0x30
 800ed66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff f97a 	bl	800e066 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed72:	2300      	movs	r3, #0
 800ed74:	613b      	str	r3, [r7, #16]
 800ed76:	6979      	ldr	r1, [r7, #20]
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f7ff fc1d 	bl	800e5b8 <clust2sect>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ed84:	e012      	b.n	800edac <dir_next+0x13c>
						fs->wflag = 1;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f7ff fb33 	bl	800e3f8 <sync_window>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <dir_next+0x12c>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e02a      	b.n	800edf2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	613b      	str	r3, [r7, #16]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	895b      	ldrh	r3, [r3, #10]
 800edb0:	461a      	mov	r2, r3
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d3e6      	bcc.n	800ed86 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	1ad2      	subs	r2, r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800edca:	6979      	ldr	r1, [r7, #20]
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7ff fbf3 	bl	800e5b8 <clust2sect>
 800edd2:	4602      	mov	r2, r0
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edea:	441a      	add	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3718      	adds	r7, #24
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b086      	sub	sp, #24
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7ff feb4 	bl	800eb7a <dir_sdi>
 800ee12:	4603      	mov	r3, r0
 800ee14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d12b      	bne.n	800ee74 <dir_alloc+0x7a>
		n = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	69db      	ldr	r3, [r3, #28]
 800ee24:	4619      	mov	r1, r3
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff fb2a 	bl	800e480 <move_window>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d11d      	bne.n	800ee72 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a1b      	ldr	r3, [r3, #32]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2be5      	cmp	r3, #229	@ 0xe5
 800ee3e:	d004      	beq.n	800ee4a <dir_alloc+0x50>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a1b      	ldr	r3, [r3, #32]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d107      	bne.n	800ee5a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	613b      	str	r3, [r7, #16]
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d102      	bne.n	800ee5e <dir_alloc+0x64>
 800ee58:	e00c      	b.n	800ee74 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee5e:	2101      	movs	r1, #1
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff ff05 	bl	800ec70 <dir_next>
 800ee66:	4603      	mov	r3, r0
 800ee68:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d0d7      	beq.n	800ee20 <dir_alloc+0x26>
 800ee70:	e000      	b.n	800ee74 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ee72:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee74:	7dfb      	ldrb	r3, [r7, #23]
 800ee76:	2b04      	cmp	r3, #4
 800ee78:	d101      	bne.n	800ee7e <dir_alloc+0x84>
 800ee7a:	2307      	movs	r3, #7
 800ee7c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	331a      	adds	r3, #26
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff f842 	bl	800df20 <ld_word>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d109      	bne.n	800eebc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	3314      	adds	r3, #20
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff f837 	bl	800df20 <ld_word>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	041b      	lsls	r3, r3, #16
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eebc:	68fb      	ldr	r3, [r7, #12]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	60f8      	str	r0, [r7, #12]
 800eece:	60b9      	str	r1, [r7, #8]
 800eed0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	331a      	adds	r3, #26
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	b292      	uxth	r2, r2
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff f85a 	bl	800df96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d109      	bne.n	800eefe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f103 0214 	add.w	r2, r3, #20
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	0c1b      	lsrs	r3, r3, #16
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7ff f84c 	bl	800df96 <st_word>
	}
}
 800eefe:	bf00      	nop
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b086      	sub	sp, #24
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef14:	2100      	movs	r1, #0
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fe2f 	bl	800eb7a <dir_sdi>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <dir_find+0x24>
 800ef26:	7dfb      	ldrb	r3, [r7, #23]
 800ef28:	e03e      	b.n	800efa8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	69db      	ldr	r3, [r3, #28]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6938      	ldr	r0, [r7, #16]
 800ef32:	f7ff faa5 	bl	800e480 <move_window>
 800ef36:	4603      	mov	r3, r0
 800ef38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef3a:	7dfb      	ldrb	r3, [r7, #23]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d12f      	bne.n	800efa0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a1b      	ldr	r3, [r3, #32]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d102      	bne.n	800ef54 <dir_find+0x4e>
 800ef4e:	2304      	movs	r3, #4
 800ef50:	75fb      	strb	r3, [r7, #23]
 800ef52:	e028      	b.n	800efa6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6a1b      	ldr	r3, [r3, #32]
 800ef58:	330b      	adds	r3, #11
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a1b      	ldr	r3, [r3, #32]
 800ef6a:	330b      	adds	r3, #11
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 0308 	and.w	r3, r3, #8
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10a      	bne.n	800ef8c <dir_find+0x86>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a18      	ldr	r0, [r3, #32]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3324      	adds	r3, #36	@ 0x24
 800ef7e:	220b      	movs	r2, #11
 800ef80:	4619      	mov	r1, r3
 800ef82:	f7ff f88b 	bl	800e09c <mem_cmp>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00b      	beq.n	800efa4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff fe6e 	bl	800ec70 <dir_next>
 800ef94:	4603      	mov	r3, r0
 800ef96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ef98:	7dfb      	ldrb	r3, [r7, #23]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d0c5      	beq.n	800ef2a <dir_find+0x24>
 800ef9e:	e002      	b.n	800efa6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800efa0:	bf00      	nop
 800efa2:	e000      	b.n	800efa6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efa4:	bf00      	nop

	return res;
 800efa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800efbe:	2101      	movs	r1, #1
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff ff1a 	bl	800edfa <dir_alloc>
 800efc6:	4603      	mov	r3, r0
 800efc8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800efca:	7bfb      	ldrb	r3, [r7, #15]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d11c      	bne.n	800f00a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	4619      	mov	r1, r3
 800efd6:	68b8      	ldr	r0, [r7, #8]
 800efd8:	f7ff fa52 	bl	800e480 <move_window>
 800efdc:	4603      	mov	r3, r0
 800efde:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d111      	bne.n	800f00a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a1b      	ldr	r3, [r3, #32]
 800efea:	2220      	movs	r2, #32
 800efec:	2100      	movs	r1, #0
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff f839 	bl	800e066 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6a18      	ldr	r0, [r3, #32]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3324      	adds	r3, #36	@ 0x24
 800effc:	220b      	movs	r2, #11
 800effe:	4619      	mov	r1, r3
 800f000:	f7ff f810 	bl	800e024 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	2201      	movs	r2, #1
 800f008:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	3324      	adds	r3, #36	@ 0x24
 800f028:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f02a:	220b      	movs	r2, #11
 800f02c:	2120      	movs	r1, #32
 800f02e:	68b8      	ldr	r0, [r7, #8]
 800f030:	f7ff f819 	bl	800e066 <mem_set>
	si = i = 0; ni = 8;
 800f034:	2300      	movs	r3, #0
 800f036:	613b      	str	r3, [r7, #16]
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	61fb      	str	r3, [r7, #28]
 800f03c:	2308      	movs	r3, #8
 800f03e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	61fa      	str	r2, [r7, #28]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	4413      	add	r3, r2
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f04e:	7efb      	ldrb	r3, [r7, #27]
 800f050:	2b20      	cmp	r3, #32
 800f052:	d94e      	bls.n	800f0f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f054:	7efb      	ldrb	r3, [r7, #27]
 800f056:	2b2f      	cmp	r3, #47	@ 0x2f
 800f058:	d006      	beq.n	800f068 <create_name+0x54>
 800f05a:	7efb      	ldrb	r3, [r7, #27]
 800f05c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f05e:	d110      	bne.n	800f082 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f060:	e002      	b.n	800f068 <create_name+0x54>
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	3301      	adds	r3, #1
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	4413      	add	r3, r2
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b2f      	cmp	r3, #47	@ 0x2f
 800f072:	d0f6      	beq.n	800f062 <create_name+0x4e>
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	4413      	add	r3, r2
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f07e:	d0f0      	beq.n	800f062 <create_name+0x4e>
			break;
 800f080:	e038      	b.n	800f0f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f082:	7efb      	ldrb	r3, [r7, #27]
 800f084:	2b2e      	cmp	r3, #46	@ 0x2e
 800f086:	d003      	beq.n	800f090 <create_name+0x7c>
 800f088:	693a      	ldr	r2, [r7, #16]
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d30c      	bcc.n	800f0aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2b0b      	cmp	r3, #11
 800f094:	d002      	beq.n	800f09c <create_name+0x88>
 800f096:	7efb      	ldrb	r3, [r7, #27]
 800f098:	2b2e      	cmp	r3, #46	@ 0x2e
 800f09a:	d001      	beq.n	800f0a0 <create_name+0x8c>
 800f09c:	2306      	movs	r3, #6
 800f09e:	e044      	b.n	800f12a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f0a0:	2308      	movs	r3, #8
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	230b      	movs	r3, #11
 800f0a6:	617b      	str	r3, [r7, #20]
			continue;
 800f0a8:	e022      	b.n	800f0f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f0aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	da04      	bge.n	800f0bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f0b2:	7efb      	ldrb	r3, [r7, #27]
 800f0b4:	3b80      	subs	r3, #128	@ 0x80
 800f0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f134 <create_name+0x120>)
 800f0b8:	5cd3      	ldrb	r3, [r2, r3]
 800f0ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f0bc:	7efb      	ldrb	r3, [r7, #27]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	481d      	ldr	r0, [pc, #116]	@ (800f138 <create_name+0x124>)
 800f0c2:	f7ff f812 	bl	800e0ea <chk_chr>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <create_name+0xbc>
 800f0cc:	2306      	movs	r3, #6
 800f0ce:	e02c      	b.n	800f12a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f0d0:	7efb      	ldrb	r3, [r7, #27]
 800f0d2:	2b60      	cmp	r3, #96	@ 0x60
 800f0d4:	d905      	bls.n	800f0e2 <create_name+0xce>
 800f0d6:	7efb      	ldrb	r3, [r7, #27]
 800f0d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800f0da:	d802      	bhi.n	800f0e2 <create_name+0xce>
 800f0dc:	7efb      	ldrb	r3, [r7, #27]
 800f0de:	3b20      	subs	r3, #32
 800f0e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	613a      	str	r2, [r7, #16]
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	7efa      	ldrb	r2, [r7, #27]
 800f0ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f0f0:	e7a6      	b.n	800f040 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f0f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	441a      	add	r2, r3
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <create_name+0xf4>
 800f104:	2306      	movs	r3, #6
 800f106:	e010      	b.n	800f12a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	2be5      	cmp	r3, #229	@ 0xe5
 800f10e:	d102      	bne.n	800f116 <create_name+0x102>
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	2205      	movs	r2, #5
 800f114:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f116:	7efb      	ldrb	r3, [r7, #27]
 800f118:	2b20      	cmp	r3, #32
 800f11a:	d801      	bhi.n	800f120 <create_name+0x10c>
 800f11c:	2204      	movs	r2, #4
 800f11e:	e000      	b.n	800f122 <create_name+0x10e>
 800f120:	2200      	movs	r2, #0
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	330b      	adds	r3, #11
 800f126:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f128:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3720      	adds	r7, #32
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	0801192c 	.word	0x0801192c
 800f138:	08011834 	.word	0x08011834

0800f13c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f150:	e002      	b.n	800f158 <follow_path+0x1c>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f15e:	d0f8      	beq.n	800f152 <follow_path+0x16>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	2b5c      	cmp	r3, #92	@ 0x5c
 800f166:	d0f4      	beq.n	800f152 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	2200      	movs	r2, #0
 800f16c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b1f      	cmp	r3, #31
 800f174:	d80a      	bhi.n	800f18c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2280      	movs	r2, #128	@ 0x80
 800f17a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f17e:	2100      	movs	r1, #0
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fcfa 	bl	800eb7a <dir_sdi>
 800f186:	4603      	mov	r3, r0
 800f188:	75fb      	strb	r3, [r7, #23]
 800f18a:	e043      	b.n	800f214 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f18c:	463b      	mov	r3, r7
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff ff3f 	bl	800f014 <create_name>
 800f196:	4603      	mov	r3, r0
 800f198:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d134      	bne.n	800f20a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff feb0 	bl	800ef06 <dir_find>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f1b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f1b2:	7dfb      	ldrb	r3, [r7, #23]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00a      	beq.n	800f1ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f1b8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ba:	2b04      	cmp	r3, #4
 800f1bc:	d127      	bne.n	800f20e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	f003 0304 	and.w	r3, r3, #4
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d122      	bne.n	800f20e <follow_path+0xd2>
 800f1c8:	2305      	movs	r3, #5
 800f1ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f1cc:	e01f      	b.n	800f20e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f1ce:	7afb      	ldrb	r3, [r7, #11]
 800f1d0:	f003 0304 	and.w	r3, r3, #4
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11c      	bne.n	800f212 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	799b      	ldrb	r3, [r3, #6]
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f1e4:	2305      	movs	r3, #5
 800f1e6:	75fb      	strb	r3, [r7, #23]
 800f1e8:	e014      	b.n	800f214 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f8:	4413      	add	r3, r2
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7ff fe43 	bl	800ee88 <ld_clust>
 800f202:	4602      	mov	r2, r0
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f208:	e7c0      	b.n	800f18c <follow_path+0x50>
			if (res != FR_OK) break;
 800f20a:	bf00      	nop
 800f20c:	e002      	b.n	800f214 <follow_path+0xd8>
				break;
 800f20e:	bf00      	nop
 800f210:	e000      	b.n	800f214 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f212:	bf00      	nop
			}
		}
	}

	return res;
 800f214:	7dfb      	ldrb	r3, [r7, #23]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3718      	adds	r7, #24
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f21e:	b480      	push	{r7}
 800f220:	b087      	sub	sp, #28
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f226:	f04f 33ff 	mov.w	r3, #4294967295
 800f22a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d031      	beq.n	800f298 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	617b      	str	r3, [r7, #20]
 800f23a:	e002      	b.n	800f242 <get_ldnumber+0x24>
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	3301      	adds	r3, #1
 800f240:	617b      	str	r3, [r7, #20]
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b20      	cmp	r3, #32
 800f248:	d903      	bls.n	800f252 <get_ldnumber+0x34>
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f250:	d1f4      	bne.n	800f23c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b3a      	cmp	r3, #58	@ 0x3a
 800f258:	d11c      	bne.n	800f294 <get_ldnumber+0x76>
			tp = *path;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	60fa      	str	r2, [r7, #12]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	3b30      	subs	r3, #48	@ 0x30
 800f26a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2b09      	cmp	r3, #9
 800f270:	d80e      	bhi.n	800f290 <get_ldnumber+0x72>
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	429a      	cmp	r2, r3
 800f278:	d10a      	bne.n	800f290 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d107      	bne.n	800f290 <get_ldnumber+0x72>
					vol = (int)i;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	3301      	adds	r3, #1
 800f288:	617b      	str	r3, [r7, #20]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	e002      	b.n	800f29a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f294:	2300      	movs	r3, #0
 800f296:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f298:	693b      	ldr	r3, [r7, #16]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	371c      	adds	r7, #28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
	...

0800f2a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	70da      	strb	r2, [r3, #3]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f2be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7ff f8dc 	bl	800e480 <move_window>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <check_fs+0x2a>
 800f2ce:	2304      	movs	r3, #4
 800f2d0:	e038      	b.n	800f344 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3330      	adds	r3, #48	@ 0x30
 800f2d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fe fe20 	bl	800df20 <ld_word>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d001      	beq.n	800f2f0 <check_fs+0x48>
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e029      	b.n	800f344 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f2f6:	2be9      	cmp	r3, #233	@ 0xe9
 800f2f8:	d009      	beq.n	800f30e <check_fs+0x66>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f300:	2beb      	cmp	r3, #235	@ 0xeb
 800f302:	d11e      	bne.n	800f342 <check_fs+0x9a>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f30a:	2b90      	cmp	r3, #144	@ 0x90
 800f30c:	d119      	bne.n	800f342 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3330      	adds	r3, #48	@ 0x30
 800f312:	3336      	adds	r3, #54	@ 0x36
 800f314:	4618      	mov	r0, r3
 800f316:	f7fe fe1b 	bl	800df50 <ld_dword>
 800f31a:	4603      	mov	r3, r0
 800f31c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f320:	4a0a      	ldr	r2, [pc, #40]	@ (800f34c <check_fs+0xa4>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d101      	bne.n	800f32a <check_fs+0x82>
 800f326:	2300      	movs	r3, #0
 800f328:	e00c      	b.n	800f344 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3330      	adds	r3, #48	@ 0x30
 800f32e:	3352      	adds	r3, #82	@ 0x52
 800f330:	4618      	mov	r0, r3
 800f332:	f7fe fe0d 	bl	800df50 <ld_dword>
 800f336:	4603      	mov	r3, r0
 800f338:	4a05      	ldr	r2, [pc, #20]	@ (800f350 <check_fs+0xa8>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d101      	bne.n	800f342 <check_fs+0x9a>
 800f33e:	2300      	movs	r3, #0
 800f340:	e000      	b.n	800f344 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f342:	2302      	movs	r3, #2
}
 800f344:	4618      	mov	r0, r3
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	00544146 	.word	0x00544146
 800f350:	33544146 	.word	0x33544146

0800f354 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b096      	sub	sp, #88	@ 0x58
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	4613      	mov	r3, r2
 800f360:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2200      	movs	r2, #0
 800f366:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff ff58 	bl	800f21e <get_ldnumber>
 800f36e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f372:	2b00      	cmp	r3, #0
 800f374:	da01      	bge.n	800f37a <find_volume+0x26>
 800f376:	230b      	movs	r3, #11
 800f378:	e22d      	b.n	800f7d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f37a:	4aa1      	ldr	r2, [pc, #644]	@ (800f600 <find_volume+0x2ac>)
 800f37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f382:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <find_volume+0x3a>
 800f38a:	230c      	movs	r3, #12
 800f38c:	e223      	b.n	800f7d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f392:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	f023 0301 	bic.w	r3, r3, #1
 800f39a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01a      	beq.n	800f3da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a6:	785b      	ldrb	r3, [r3, #1]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fe fd19 	bl	800dde0 <disk_status>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f3b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10c      	bne.n	800f3da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d007      	beq.n	800f3d6 <find_volume+0x82>
 800f3c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3ca:	f003 0304 	and.w	r3, r3, #4
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f3d2:	230a      	movs	r3, #10
 800f3d4:	e1ff      	b.n	800f7d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	e1fd      	b.n	800f7d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fd11 	bl	800de14 <disk_initialize>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f3f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b00      	cmp	r3, #0
 800f402:	d001      	beq.n	800f408 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f404:	2303      	movs	r3, #3
 800f406:	e1e6      	b.n	800f7d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f408:	79fb      	ldrb	r3, [r7, #7]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d007      	beq.n	800f41e <find_volume+0xca>
 800f40e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f412:	f003 0304 	and.w	r3, r3, #4
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f41a:	230a      	movs	r3, #10
 800f41c:	e1db      	b.n	800f7d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f424:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f426:	f7ff ff3f 	bl	800f2a8 <check_fs>
 800f42a:	4603      	mov	r3, r0
 800f42c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f430:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f434:	2b02      	cmp	r3, #2
 800f436:	d149      	bne.n	800f4cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f438:	2300      	movs	r3, #0
 800f43a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f43c:	e01e      	b.n	800f47c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f446:	011b      	lsls	r3, r3, #4
 800f448:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f44c:	4413      	add	r3, r2
 800f44e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f452:	3304      	adds	r3, #4
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d006      	beq.n	800f468 <find_volume+0x114>
 800f45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f45c:	3308      	adds	r3, #8
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe fd76 	bl	800df50 <ld_dword>
 800f464:	4602      	mov	r2, r0
 800f466:	e000      	b.n	800f46a <find_volume+0x116>
 800f468:	2200      	movs	r2, #0
 800f46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	3358      	adds	r3, #88	@ 0x58
 800f470:	443b      	add	r3, r7
 800f472:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f478:	3301      	adds	r3, #1
 800f47a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f47e:	2b03      	cmp	r3, #3
 800f480:	d9dd      	bls.n	800f43e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f482:	2300      	movs	r3, #0
 800f484:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <find_volume+0x13e>
 800f48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f48e:	3b01      	subs	r3, #1
 800f490:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	3358      	adds	r3, #88	@ 0x58
 800f498:	443b      	add	r3, r7
 800f49a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f49e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d005      	beq.n	800f4b2 <find_volume+0x15e>
 800f4a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4aa:	f7ff fefd 	bl	800f2a8 <check_fs>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	e000      	b.n	800f4b4 <find_volume+0x160>
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d905      	bls.n	800f4cc <find_volume+0x178>
 800f4c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c8:	2b03      	cmp	r3, #3
 800f4ca:	d9e2      	bls.n	800f492 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f4cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4d0:	2b04      	cmp	r3, #4
 800f4d2:	d101      	bne.n	800f4d8 <find_volume+0x184>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e17e      	b.n	800f7d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f4d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d901      	bls.n	800f4e4 <find_volume+0x190>
 800f4e0:	230d      	movs	r3, #13
 800f4e2:	e178      	b.n	800f7d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	3330      	adds	r3, #48	@ 0x30
 800f4e8:	330b      	adds	r3, #11
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe fd18 	bl	800df20 <ld_word>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4f6:	d001      	beq.n	800f4fc <find_volume+0x1a8>
 800f4f8:	230d      	movs	r3, #13
 800f4fa:	e16c      	b.n	800f7d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	3330      	adds	r3, #48	@ 0x30
 800f500:	3316      	adds	r3, #22
 800f502:	4618      	mov	r0, r3
 800f504:	f7fe fd0c 	bl	800df20 <ld_word>
 800f508:	4603      	mov	r3, r0
 800f50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <find_volume+0x1cc>
 800f512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f514:	3330      	adds	r3, #48	@ 0x30
 800f516:	3324      	adds	r3, #36	@ 0x24
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fe fd19 	bl	800df50 <ld_dword>
 800f51e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f522:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f524:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f528:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f532:	789b      	ldrb	r3, [r3, #2]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d005      	beq.n	800f544 <find_volume+0x1f0>
 800f538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f53a:	789b      	ldrb	r3, [r3, #2]
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d001      	beq.n	800f544 <find_volume+0x1f0>
 800f540:	230d      	movs	r3, #13
 800f542:	e148      	b.n	800f7d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f546:	789b      	ldrb	r3, [r3, #2]
 800f548:	461a      	mov	r2, r3
 800f54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f54c:	fb02 f303 	mul.w	r3, r2, r3
 800f550:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f558:	461a      	mov	r2, r3
 800f55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f560:	895b      	ldrh	r3, [r3, #10]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d008      	beq.n	800f578 <find_volume+0x224>
 800f566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f568:	895b      	ldrh	r3, [r3, #10]
 800f56a:	461a      	mov	r2, r3
 800f56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56e:	895b      	ldrh	r3, [r3, #10]
 800f570:	3b01      	subs	r3, #1
 800f572:	4013      	ands	r3, r2
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <find_volume+0x228>
 800f578:	230d      	movs	r3, #13
 800f57a:	e12c      	b.n	800f7d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f57e:	3330      	adds	r3, #48	@ 0x30
 800f580:	3311      	adds	r3, #17
 800f582:	4618      	mov	r0, r3
 800f584:	f7fe fccc 	bl	800df20 <ld_word>
 800f588:	4603      	mov	r3, r0
 800f58a:	461a      	mov	r2, r3
 800f58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f592:	891b      	ldrh	r3, [r3, #8]
 800f594:	f003 030f 	and.w	r3, r3, #15
 800f598:	b29b      	uxth	r3, r3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <find_volume+0x24e>
 800f59e:	230d      	movs	r3, #13
 800f5a0:	e119      	b.n	800f7d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a4:	3330      	adds	r3, #48	@ 0x30
 800f5a6:	3313      	adds	r3, #19
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fe fcb9 	bl	800df20 <ld_word>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d106      	bne.n	800f5c6 <find_volume+0x272>
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ba:	3330      	adds	r3, #48	@ 0x30
 800f5bc:	3320      	adds	r3, #32
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fe fcc6 	bl	800df50 <ld_dword>
 800f5c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	3330      	adds	r3, #48	@ 0x30
 800f5ca:	330e      	adds	r3, #14
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fca7 	bl	800df20 <ld_word>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f5d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <find_volume+0x28c>
 800f5dc:	230d      	movs	r3, #13
 800f5de:	e0fa      	b.n	800f7d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f5e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f5e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5e4:	4413      	add	r3, r2
 800f5e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5e8:	8912      	ldrh	r2, [r2, #8]
 800f5ea:	0912      	lsrs	r2, r2, #4
 800f5ec:	b292      	uxth	r2, r2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f5f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d204      	bcs.n	800f604 <find_volume+0x2b0>
 800f5fa:	230d      	movs	r3, #13
 800f5fc:	e0eb      	b.n	800f7d6 <find_volume+0x482>
 800f5fe:	bf00      	nop
 800f600:	24000e3c 	.word	0x24000e3c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f60c:	8952      	ldrh	r2, [r2, #10]
 800f60e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f612:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <find_volume+0x2ca>
 800f61a:	230d      	movs	r3, #13
 800f61c:	e0db      	b.n	800f7d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800f61e:	2303      	movs	r3, #3
 800f620:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f626:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d802      	bhi.n	800f634 <find_volume+0x2e0>
 800f62e:	2302      	movs	r3, #2
 800f630:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f636:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d802      	bhi.n	800f644 <find_volume+0x2f0>
 800f63e:	2301      	movs	r3, #1
 800f640:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	1c9a      	adds	r2, r3, #2
 800f648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f650:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f652:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f656:	441a      	add	r2, r3
 800f658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f65c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f660:	441a      	add	r2, r3
 800f662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f664:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f666:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d11e      	bne.n	800f6ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f670:	3330      	adds	r3, #48	@ 0x30
 800f672:	332a      	adds	r3, #42	@ 0x2a
 800f674:	4618      	mov	r0, r3
 800f676:	f7fe fc53 	bl	800df20 <ld_word>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <find_volume+0x330>
 800f680:	230d      	movs	r3, #13
 800f682:	e0a8      	b.n	800f7d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f686:	891b      	ldrh	r3, [r3, #8]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <find_volume+0x33c>
 800f68c:	230d      	movs	r3, #13
 800f68e:	e0a2      	b.n	800f7d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f692:	3330      	adds	r3, #48	@ 0x30
 800f694:	332c      	adds	r3, #44	@ 0x2c
 800f696:	4618      	mov	r0, r3
 800f698:	f7fe fc5a 	bl	800df50 <ld_dword>
 800f69c:	4602      	mov	r2, r0
 800f69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6aa:	e01f      	b.n	800f6ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ae:	891b      	ldrh	r3, [r3, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d101      	bne.n	800f6b8 <find_volume+0x364>
 800f6b4:	230d      	movs	r3, #13
 800f6b6:	e08e      	b.n	800f7d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ba:	6a1a      	ldr	r2, [r3, #32]
 800f6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6be:	441a      	add	r2, r3
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d103      	bne.n	800f6d4 <find_volume+0x380>
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ce:	695b      	ldr	r3, [r3, #20]
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	e00a      	b.n	800f6ea <find_volume+0x396>
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d6:	695a      	ldr	r2, [r3, #20]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	005b      	lsls	r3, r3, #1
 800f6dc:	4413      	add	r3, r2
 800f6de:	085a      	lsrs	r2, r3, #1
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e2:	695b      	ldr	r3, [r3, #20]
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f6ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ee:	699a      	ldr	r2, [r3, #24]
 800f6f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f6f6:	0a5b      	lsrs	r3, r3, #9
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d201      	bcs.n	800f700 <find_volume+0x3ac>
 800f6fc:	230d      	movs	r3, #13
 800f6fe:	e06a      	b.n	800f7d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f702:	f04f 32ff 	mov.w	r2, #4294967295
 800f706:	611a      	str	r2, [r3, #16]
 800f708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70a:	691a      	ldr	r2, [r3, #16]
 800f70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f712:	2280      	movs	r2, #128	@ 0x80
 800f714:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f716:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f71a:	2b03      	cmp	r3, #3
 800f71c:	d149      	bne.n	800f7b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f720:	3330      	adds	r3, #48	@ 0x30
 800f722:	3330      	adds	r3, #48	@ 0x30
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe fbfb 	bl	800df20 <ld_word>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d140      	bne.n	800f7b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f732:	3301      	adds	r3, #1
 800f734:	4619      	mov	r1, r3
 800f736:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f738:	f7fe fea2 	bl	800e480 <move_window>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d137      	bne.n	800f7b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f744:	2200      	movs	r2, #0
 800f746:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74a:	3330      	adds	r3, #48	@ 0x30
 800f74c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f750:	4618      	mov	r0, r3
 800f752:	f7fe fbe5 	bl	800df20 <ld_word>
 800f756:	4603      	mov	r3, r0
 800f758:	461a      	mov	r2, r3
 800f75a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f75e:	429a      	cmp	r2, r3
 800f760:	d127      	bne.n	800f7b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f764:	3330      	adds	r3, #48	@ 0x30
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe fbf2 	bl	800df50 <ld_dword>
 800f76c:	4603      	mov	r3, r0
 800f76e:	4a1c      	ldr	r2, [pc, #112]	@ (800f7e0 <find_volume+0x48c>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d11e      	bne.n	800f7b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f776:	3330      	adds	r3, #48	@ 0x30
 800f778:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fe fbe7 	bl	800df50 <ld_dword>
 800f782:	4603      	mov	r3, r0
 800f784:	4a17      	ldr	r2, [pc, #92]	@ (800f7e4 <find_volume+0x490>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d113      	bne.n	800f7b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78c:	3330      	adds	r3, #48	@ 0x30
 800f78e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe fbdc 	bl	800df50 <ld_dword>
 800f798:	4602      	mov	r2, r0
 800f79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a0:	3330      	adds	r3, #48	@ 0x30
 800f7a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe fbd2 	bl	800df50 <ld_dword>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f7b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f7e8 <find_volume+0x494>)
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	4b09      	ldr	r3, [pc, #36]	@ (800f7e8 <find_volume+0x494>)
 800f7c4:	801a      	strh	r2, [r3, #0]
 800f7c6:	4b08      	ldr	r3, [pc, #32]	@ (800f7e8 <find_volume+0x494>)
 800f7c8:	881a      	ldrh	r2, [r3, #0]
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f7ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f7d0:	f7fe fdee 	bl	800e3b0 <clear_lock>
#endif
	return FR_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3758      	adds	r7, #88	@ 0x58
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	41615252 	.word	0x41615252
 800f7e4:	61417272 	.word	0x61417272
 800f7e8:	24000e40 	.word	0x24000e40

0800f7ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f7f6:	2309      	movs	r3, #9
 800f7f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01c      	beq.n	800f83a <validate+0x4e>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d018      	beq.n	800f83a <validate+0x4e>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d013      	beq.n	800f83a <validate+0x4e>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	889a      	ldrh	r2, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	88db      	ldrh	r3, [r3, #6]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d10c      	bne.n	800f83a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	785b      	ldrb	r3, [r3, #1]
 800f826:	4618      	mov	r0, r3
 800f828:	f7fe fada 	bl	800dde0 <disk_status>
 800f82c:	4603      	mov	r3, r0
 800f82e:	f003 0301 	and.w	r3, r3, #1
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <validate+0x4e>
			res = FR_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <validate+0x5a>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	e000      	b.n	800f848 <validate+0x5c>
 800f846:	2300      	movs	r3, #0
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	6013      	str	r3, [r2, #0]
	return res;
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
	...

0800f858 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b088      	sub	sp, #32
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	4613      	mov	r3, r2
 800f864:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f86a:	f107 0310 	add.w	r3, r7, #16
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fcd5 	bl	800f21e <get_ldnumber>
 800f874:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	da01      	bge.n	800f880 <f_mount+0x28>
 800f87c:	230b      	movs	r3, #11
 800f87e:	e02b      	b.n	800f8d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f880:	4a17      	ldr	r2, [pc, #92]	@ (800f8e0 <f_mount+0x88>)
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f888:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d005      	beq.n	800f89c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f890:	69b8      	ldr	r0, [r7, #24]
 800f892:	f7fe fd8d 	bl	800e3b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	2200      	movs	r2, #0
 800f89a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d002      	beq.n	800f8a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	490d      	ldr	r1, [pc, #52]	@ (800f8e0 <f_mount+0x88>)
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <f_mount+0x66>
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d001      	beq.n	800f8c2 <f_mount+0x6a>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e00a      	b.n	800f8d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f8c2:	f107 010c 	add.w	r1, r7, #12
 800f8c6:	f107 0308 	add.w	r3, r7, #8
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7ff fd41 	bl	800f354 <find_volume>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3720      	adds	r7, #32
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	24000e3c 	.word	0x24000e3c

0800f8e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b098      	sub	sp, #96	@ 0x60
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <f_open+0x18>
 800f8f8:	2309      	movs	r3, #9
 800f8fa:	e1a9      	b.n	800fc50 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f902:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f904:	79fa      	ldrb	r2, [r7, #7]
 800f906:	f107 0110 	add.w	r1, r7, #16
 800f90a:	f107 0308 	add.w	r3, r7, #8
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff fd20 	bl	800f354 <find_volume>
 800f914:	4603      	mov	r3, r0
 800f916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800f91a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f040 818d 	bne.w	800fc3e <f_open+0x35a>
		dj.obj.fs = fs;
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	f107 0314 	add.w	r3, r7, #20
 800f92e:	4611      	mov	r1, r2
 800f930:	4618      	mov	r0, r3
 800f932:	f7ff fc03 	bl	800f13c <follow_path>
 800f936:	4603      	mov	r3, r0
 800f938:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f93c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f940:	2b00      	cmp	r3, #0
 800f942:	d118      	bne.n	800f976 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f944:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f948:	b25b      	sxtb	r3, r3
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	da03      	bge.n	800f956 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f94e:	2306      	movs	r3, #6
 800f950:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f954:	e00f      	b.n	800f976 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	bf8c      	ite	hi
 800f95c:	2301      	movhi	r3, #1
 800f95e:	2300      	movls	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	461a      	mov	r2, r3
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	4611      	mov	r1, r2
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fe fbd8 	bl	800e120 <chk_lock>
 800f970:	4603      	mov	r3, r0
 800f972:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	f003 031c 	and.w	r3, r3, #28
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d07f      	beq.n	800fa80 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f984:	2b00      	cmp	r3, #0
 800f986:	d017      	beq.n	800f9b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f988:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f98c:	2b04      	cmp	r3, #4
 800f98e:	d10e      	bne.n	800f9ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f990:	f7fe fc22 	bl	800e1d8 <enq_lock>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d006      	beq.n	800f9a8 <f_open+0xc4>
 800f99a:	f107 0314 	add.w	r3, r7, #20
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff fb06 	bl	800efb0 <dir_register>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	e000      	b.n	800f9aa <f_open+0xc6>
 800f9a8:	2312      	movs	r3, #18
 800f9aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f9ae:	79fb      	ldrb	r3, [r7, #7]
 800f9b0:	f043 0308 	orr.w	r3, r3, #8
 800f9b4:	71fb      	strb	r3, [r7, #7]
 800f9b6:	e010      	b.n	800f9da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f9b8:	7ebb      	ldrb	r3, [r7, #26]
 800f9ba:	f003 0311 	and.w	r3, r3, #17
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d003      	beq.n	800f9ca <f_open+0xe6>
					res = FR_DENIED;
 800f9c2:	2307      	movs	r3, #7
 800f9c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f9c8:	e007      	b.n	800f9da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f9ca:	79fb      	ldrb	r3, [r7, #7]
 800f9cc:	f003 0304 	and.w	r3, r3, #4
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <f_open+0xf6>
 800f9d4:	2308      	movs	r3, #8
 800f9d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f9da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d168      	bne.n	800fab4 <f_open+0x1d0>
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	f003 0308 	and.w	r3, r3, #8
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d063      	beq.n	800fab4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800f9ec:	f7fd ff6c 	bl	800d8c8 <get_fattime>
 800f9f0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f4:	330e      	adds	r3, #14
 800f9f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fe fae7 	bl	800dfcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa00:	3316      	adds	r3, #22
 800fa02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe fae1 	bl	800dfcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0c:	330b      	adds	r3, #11
 800fa0e:	2220      	movs	r2, #32
 800fa10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa16:	4611      	mov	r1, r2
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7ff fa35 	bl	800ee88 <ld_clust>
 800fa1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fa24:	2200      	movs	r2, #0
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff fa4d 	bl	800eec6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fa2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa2e:	331c      	adds	r3, #28
 800fa30:	2100      	movs	r1, #0
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe faca 	bl	800dfcc <st_dword>
					fs->wflag = 1;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fa3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d037      	beq.n	800fab4 <f_open+0x1d0>
						dw = fs->winsect;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa48:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fa4a:	f107 0314 	add.w	r3, r7, #20
 800fa4e:	2200      	movs	r2, #0
 800fa50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fe ff60 	bl	800e918 <remove_chain>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fa5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d126      	bne.n	800fab4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fe fd08 	bl	800e480 <move_window>
 800fa70:	4603      	mov	r3, r0
 800fa72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fa7a:	3a01      	subs	r2, #1
 800fa7c:	60da      	str	r2, [r3, #12]
 800fa7e:	e019      	b.n	800fab4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fa80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d115      	bne.n	800fab4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fa88:	7ebb      	ldrb	r3, [r7, #26]
 800fa8a:	f003 0310 	and.w	r3, r3, #16
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d003      	beq.n	800fa9a <f_open+0x1b6>
					res = FR_NO_FILE;
 800fa92:	2304      	movs	r3, #4
 800fa94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fa98:	e00c      	b.n	800fab4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fa9a:	79fb      	ldrb	r3, [r7, #7]
 800fa9c:	f003 0302 	and.w	r3, r3, #2
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d007      	beq.n	800fab4 <f_open+0x1d0>
 800faa4:	7ebb      	ldrb	r3, [r7, #26]
 800faa6:	f003 0301 	and.w	r3, r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <f_open+0x1d0>
						res = FR_DENIED;
 800faae:	2307      	movs	r3, #7
 800fab0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fab4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d126      	bne.n	800fb0a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fabc:	79fb      	ldrb	r3, [r7, #7]
 800fabe:	f003 0308 	and.w	r3, r3, #8
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d003      	beq.n	800face <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fac6:	79fb      	ldrb	r3, [r7, #7]
 800fac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800facc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	bf8c      	ite	hi
 800fae2:	2301      	movhi	r3, #1
 800fae4:	2300      	movls	r3, #0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	461a      	mov	r2, r3
 800faea:	f107 0314 	add.w	r3, r7, #20
 800faee:	4611      	mov	r1, r2
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fb93 	bl	800e21c <inc_lock>
 800faf6:	4602      	mov	r2, r0
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d102      	bne.n	800fb0a <f_open+0x226>
 800fb04:	2302      	movs	r3, #2
 800fb06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f040 8095 	bne.w	800fc3e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb18:	4611      	mov	r1, r2
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff f9b4 	bl	800ee88 <ld_clust>
 800fb20:	4602      	mov	r2, r0
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb28:	331c      	adds	r3, #28
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fe fa10 	bl	800df50 <ld_dword>
 800fb30:	4602      	mov	r2, r0
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb3c:	693a      	ldr	r2, [r7, #16]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	88da      	ldrh	r2, [r3, #6]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	79fa      	ldrb	r2, [r7, #7]
 800fb4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	3330      	adds	r3, #48	@ 0x30
 800fb66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe fa7a 	bl	800e066 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	f003 0320 	and.w	r3, r3, #32
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d060      	beq.n	800fc3e <f_open+0x35a>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d05c      	beq.n	800fc3e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	68da      	ldr	r2, [r3, #12]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	895b      	ldrh	r3, [r3, #10]
 800fb90:	025b      	lsls	r3, r3, #9
 800fb92:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800fba0:	e016      	b.n	800fbd0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fe fd25 	bl	800e5f6 <get_fat>
 800fbac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fbae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d802      	bhi.n	800fbba <f_open+0x2d6>
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc0:	d102      	bne.n	800fbc8 <f_open+0x2e4>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fbca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d103      	bne.n	800fbe0 <f_open+0x2fc>
 800fbd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fbda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d8e0      	bhi.n	800fba2 <f_open+0x2be>
				}
				fp->clust = clst;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbe4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d127      	bne.n	800fc3e <f_open+0x35a>
 800fbee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d022      	beq.n	800fc3e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe fcdb 	bl	800e5b8 <clust2sect>
 800fc02:	6478      	str	r0, [r7, #68]	@ 0x44
 800fc04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d103      	bne.n	800fc12 <f_open+0x32e>
						res = FR_INT_ERR;
 800fc0a:	2302      	movs	r3, #2
 800fc0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc10:	e015      	b.n	800fc3e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc14:	0a5a      	lsrs	r2, r3, #9
 800fc16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc18:	441a      	add	r2, r3
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	7858      	ldrb	r0, [r3, #1]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6a1a      	ldr	r2, [r3, #32]
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	f7fe f919 	bl	800de64 <disk_read>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <f_open+0x35a>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <f_open+0x368>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3760      	adds	r7, #96	@ 0x60
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08e      	sub	sp, #56	@ 0x38
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f107 0214 	add.w	r2, r7, #20
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fdb7 	bl	800f7ec <validate>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fc84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d107      	bne.n	800fc9c <f_read+0x44>
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	7d5b      	ldrb	r3, [r3, #21]
 800fc90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fc94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d002      	beq.n	800fca2 <f_read+0x4a>
 800fc9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fca0:	e115      	b.n	800fece <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	7d1b      	ldrb	r3, [r3, #20]
 800fca6:	f003 0301 	and.w	r3, r3, #1
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d101      	bne.n	800fcb2 <f_read+0x5a>
 800fcae:	2307      	movs	r3, #7
 800fcb0:	e10d      	b.n	800fece <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68da      	ldr	r2, [r3, #12]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	f240 80fe 	bls.w	800fec4 <f_read+0x26c>
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fccc:	e0fa      	b.n	800fec4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f040 80c6 	bne.w	800fe68 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	699b      	ldr	r3, [r3, #24]
 800fce0:	0a5b      	lsrs	r3, r3, #9
 800fce2:	697a      	ldr	r2, [r7, #20]
 800fce4:	8952      	ldrh	r2, [r2, #10]
 800fce6:	3a01      	subs	r2, #1
 800fce8:	4013      	ands	r3, r2
 800fcea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d12f      	bne.n	800fd52 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d103      	bne.n	800fd02 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	689b      	ldr	r3, [r3, #8]
 800fcfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd00:	e013      	b.n	800fd2a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d007      	beq.n	800fd1a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7fe fefe 	bl	800eb12 <clmt_clust>
 800fd16:	6338      	str	r0, [r7, #48]	@ 0x30
 800fd18:	e007      	b.n	800fd2a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	69db      	ldr	r3, [r3, #28]
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	f7fe fc67 	bl	800e5f6 <get_fat>
 800fd28:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d804      	bhi.n	800fd3a <f_read+0xe2>
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2202      	movs	r2, #2
 800fd34:	755a      	strb	r2, [r3, #21]
 800fd36:	2302      	movs	r3, #2
 800fd38:	e0c9      	b.n	800fece <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd40:	d104      	bne.n	800fd4c <f_read+0xf4>
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2201      	movs	r2, #1
 800fd46:	755a      	strb	r2, [r3, #21]
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e0c0      	b.n	800fece <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd50:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd52:	697a      	ldr	r2, [r7, #20]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	f7fe fc2c 	bl	800e5b8 <clust2sect>
 800fd60:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d104      	bne.n	800fd72 <f_read+0x11a>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	755a      	strb	r2, [r3, #21]
 800fd6e:	2302      	movs	r3, #2
 800fd70:	e0ad      	b.n	800fece <f_read+0x276>
			sect += csect;
 800fd72:	69ba      	ldr	r2, [r7, #24]
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	4413      	add	r3, r2
 800fd78:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	0a5b      	lsrs	r3, r3, #9
 800fd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d039      	beq.n	800fdfa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fd86:	69fa      	ldr	r2, [r7, #28]
 800fd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8a:	4413      	add	r3, r2
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	8952      	ldrh	r2, [r2, #10]
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d905      	bls.n	800fda0 <f_read+0x148>
					cc = fs->csize - csect;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	895b      	ldrh	r3, [r3, #10]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	7858      	ldrb	r0, [r3, #1]
 800fda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda6:	69ba      	ldr	r2, [r7, #24]
 800fda8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdaa:	f7fe f85b 	bl	800de64 <disk_read>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <f_read+0x166>
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	755a      	strb	r2, [r3, #21]
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e087      	b.n	800fece <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7d1b      	ldrb	r3, [r3, #20]
 800fdc2:	b25b      	sxtb	r3, r3
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	da14      	bge.n	800fdf2 <f_read+0x19a>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6a1a      	ldr	r2, [r3, #32]
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d90d      	bls.n	800fdf2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1a      	ldr	r2, [r3, #32]
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	025b      	lsls	r3, r3, #9
 800fde0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fde2:	18d0      	adds	r0, r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	3330      	adds	r3, #48	@ 0x30
 800fde8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdec:	4619      	mov	r1, r3
 800fdee:	f7fe f919 	bl	800e024 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf4:	025b      	lsls	r3, r3, #9
 800fdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fdf8:	e050      	b.n	800fe9c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	69ba      	ldr	r2, [r7, #24]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d02e      	beq.n	800fe62 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	7d1b      	ldrb	r3, [r3, #20]
 800fe08:	b25b      	sxtb	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	da18      	bge.n	800fe40 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	7858      	ldrb	r0, [r3, #1]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6a1a      	ldr	r2, [r3, #32]
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	f7fe f841 	bl	800dea4 <disk_write>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d004      	beq.n	800fe32 <f_read+0x1da>
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	755a      	strb	r2, [r3, #21]
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e04d      	b.n	800fece <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	7d1b      	ldrb	r3, [r3, #20]
 800fe36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	7858      	ldrb	r0, [r3, #1]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	f7fe f809 	bl	800de64 <disk_read>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d004      	beq.n	800fe62 <f_read+0x20a>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	755a      	strb	r2, [r3, #21]
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e035      	b.n	800fece <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	69ba      	ldr	r2, [r7, #24]
 800fe66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe70:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fe74:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fe76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d901      	bls.n	800fe82 <f_read+0x22a>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	699b      	ldr	r3, [r3, #24]
 800fe8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe90:	4413      	add	r3, r2
 800fe92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe94:	4619      	mov	r1, r3
 800fe96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe98:	f7fe f8c4 	bl	800e024 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fe9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea0:	4413      	add	r3, r2
 800fea2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	699a      	ldr	r2, [r3, #24]
 800fea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feaa:	441a      	add	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	619a      	str	r2, [r3, #24]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb6:	441a      	add	r2, r3
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f47f af01 	bne.w	800fcce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3738      	adds	r7, #56	@ 0x38
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b086      	sub	sp, #24
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f107 0208 	add.w	r2, r7, #8
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff fc80 	bl	800f7ec <validate>
 800feec:	4603      	mov	r3, r0
 800feee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fef0:	7dfb      	ldrb	r3, [r7, #23]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d168      	bne.n	800ffc8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	7d1b      	ldrb	r3, [r3, #20]
 800fefa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d062      	beq.n	800ffc8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	7d1b      	ldrb	r3, [r3, #20]
 800ff06:	b25b      	sxtb	r3, r3
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da15      	bge.n	800ff38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	7858      	ldrb	r0, [r3, #1]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a1a      	ldr	r2, [r3, #32]
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	f7fd ffc2 	bl	800dea4 <disk_write>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <f_sync+0x54>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e04f      	b.n	800ffca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	7d1b      	ldrb	r3, [r3, #20]
 800ff2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff32:	b2da      	uxtb	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ff38:	f7fd fcc6 	bl	800d8c8 <get_fattime>
 800ff3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff44:	4619      	mov	r1, r3
 800ff46:	4610      	mov	r0, r2
 800ff48:	f7fe fa9a 	bl	800e480 <move_window>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d138      	bne.n	800ffc8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	330b      	adds	r3, #11
 800ff60:	781a      	ldrb	r2, [r3, #0]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	330b      	adds	r3, #11
 800ff66:	f042 0220 	orr.w	r2, r2, #32
 800ff6a:	b2d2      	uxtb	r2, r2
 800ff6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6818      	ldr	r0, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	461a      	mov	r2, r3
 800ff78:	68f9      	ldr	r1, [r7, #12]
 800ff7a:	f7fe ffa4 	bl	800eec6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f103 021c 	add.w	r2, r3, #28
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	4619      	mov	r1, r3
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	f7fe f81e 	bl	800dfcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3316      	adds	r3, #22
 800ff94:	6939      	ldr	r1, [r7, #16]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe f818 	bl	800dfcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	3312      	adds	r3, #18
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fd fff7 	bl	800df96 <st_word>
					fs->wflag = 1;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fe fa93 	bl	800e4dc <sync_fs>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	7d1b      	ldrb	r3, [r3, #20]
 800ffbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7ff ff7b 	bl	800fed6 <f_sync>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d118      	bne.n	801001c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f107 0208 	add.w	r2, r7, #8
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff fbfa 	bl	800f7ec <validate>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d10c      	bne.n	801001c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe f996 	bl	800e338 <dec_lock>
 801000c:	4603      	mov	r3, r0
 801000e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d102      	bne.n	801001c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801001c:	7bfb      	ldrb	r3, [r7, #15]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
	...

08010028 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010028:	b480      	push	{r7}
 801002a:	b087      	sub	sp, #28
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	4613      	mov	r3, r2
 8010034:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010036:	2301      	movs	r3, #1
 8010038:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801003a:	2300      	movs	r3, #0
 801003c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801003e:	4b1f      	ldr	r3, [pc, #124]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010040:	7a5b      	ldrb	r3, [r3, #9]
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	d131      	bne.n	80100ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010048:	4b1c      	ldr	r3, [pc, #112]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 801004a:	7a5b      	ldrb	r3, [r3, #9]
 801004c:	b2db      	uxtb	r3, r3
 801004e:	461a      	mov	r2, r3
 8010050:	4b1a      	ldr	r3, [pc, #104]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010052:	2100      	movs	r1, #0
 8010054:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010056:	4b19      	ldr	r3, [pc, #100]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010058:	7a5b      	ldrb	r3, [r3, #9]
 801005a:	b2db      	uxtb	r3, r3
 801005c:	4a17      	ldr	r2, [pc, #92]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010066:	4b15      	ldr	r3, [pc, #84]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010068:	7a5b      	ldrb	r3, [r3, #9]
 801006a:	b2db      	uxtb	r3, r3
 801006c:	461a      	mov	r2, r3
 801006e:	4b13      	ldr	r3, [pc, #76]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010070:	4413      	add	r3, r2
 8010072:	79fa      	ldrb	r2, [r7, #7]
 8010074:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010076:	4b11      	ldr	r3, [pc, #68]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010078:	7a5b      	ldrb	r3, [r3, #9]
 801007a:	b2db      	uxtb	r3, r3
 801007c:	1c5a      	adds	r2, r3, #1
 801007e:	b2d1      	uxtb	r1, r2
 8010080:	4a0e      	ldr	r2, [pc, #56]	@ (80100bc <FATFS_LinkDriverEx+0x94>)
 8010082:	7251      	strb	r1, [r2, #9]
 8010084:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010086:	7dbb      	ldrb	r3, [r7, #22]
 8010088:	3330      	adds	r3, #48	@ 0x30
 801008a:	b2da      	uxtb	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	3301      	adds	r3, #1
 8010094:	223a      	movs	r2, #58	@ 0x3a
 8010096:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	3302      	adds	r3, #2
 801009c:	222f      	movs	r2, #47	@ 0x2f
 801009e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	3303      	adds	r3, #3
 80100a4:	2200      	movs	r2, #0
 80100a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80100ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	371c      	adds	r7, #28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	24000e64 	.word	0x24000e64

080100c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80100ca:	2200      	movs	r2, #0
 80100cc:	6839      	ldr	r1, [r7, #0]
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f7ff ffaa 	bl	8010028 <FATFS_LinkDriverEx>
 80100d4:	4603      	mov	r3, r0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <_ZdlPvj>:
 80100de:	f000 b99c 	b.w	801041a <_ZdlPv>

080100e2 <__cxa_guard_acquire>:
 80100e2:	6802      	ldr	r2, [r0, #0]
 80100e4:	07d2      	lsls	r2, r2, #31
 80100e6:	4603      	mov	r3, r0
 80100e8:	d405      	bmi.n	80100f6 <__cxa_guard_acquire+0x14>
 80100ea:	7842      	ldrb	r2, [r0, #1]
 80100ec:	b102      	cbz	r2, 80100f0 <__cxa_guard_acquire+0xe>
 80100ee:	deff      	udf	#255	@ 0xff
 80100f0:	2001      	movs	r0, #1
 80100f2:	7058      	strb	r0, [r3, #1]
 80100f4:	4770      	bx	lr
 80100f6:	2000      	movs	r0, #0
 80100f8:	4770      	bx	lr

080100fa <__cxa_guard_release>:
 80100fa:	2301      	movs	r3, #1
 80100fc:	6003      	str	r3, [r0, #0]
 80100fe:	4770      	bx	lr

08010100 <_Znwj>:
 8010100:	2801      	cmp	r0, #1
 8010102:	bf38      	it	cc
 8010104:	2001      	movcc	r0, #1
 8010106:	b510      	push	{r4, lr}
 8010108:	4604      	mov	r4, r0
 801010a:	4620      	mov	r0, r4
 801010c:	f000 f99e 	bl	801044c <malloc>
 8010110:	b100      	cbz	r0, 8010114 <_Znwj+0x14>
 8010112:	bd10      	pop	{r4, pc}
 8010114:	f000 f984 	bl	8010420 <_ZSt15get_new_handlerv>
 8010118:	b908      	cbnz	r0, 801011e <_Znwj+0x1e>
 801011a:	f000 f98f 	bl	801043c <abort>
 801011e:	4780      	blx	r0
 8010120:	e7f3      	b.n	801010a <_Znwj+0xa>

08010122 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8010122:	b10a      	cbz	r2, 8010128 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8010124:	f000 bd4b 	b.w	8010bbe <memcpy>
 8010128:	4770      	bx	lr

0801012a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801012a:	f850 3b08 	ldr.w	r3, [r0], #8
 801012e:	1a1b      	subs	r3, r3, r0
 8010130:	4258      	negs	r0, r3
 8010132:	4158      	adcs	r0, r3
 8010134:	4770      	bx	lr
	...

08010138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010138:	b508      	push	{r3, lr}
 801013a:	680b      	ldr	r3, [r1, #0]
 801013c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010140:	d302      	bcc.n	8010148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8010142:	480d      	ldr	r0, [pc, #52]	@ (8010178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8010144:	f000 f977 	bl	8010436 <_ZSt20__throw_length_errorPKc>
 8010148:	4293      	cmp	r3, r2
 801014a:	d90b      	bls.n	8010164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801014c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8010150:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8010154:	d206      	bcs.n	8010164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010156:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801015a:	bf2a      	itet	cs
 801015c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8010160:	6008      	strcc	r0, [r1, #0]
 8010162:	600b      	strcs	r3, [r1, #0]
 8010164:	6808      	ldr	r0, [r1, #0]
 8010166:	3001      	adds	r0, #1
 8010168:	d501      	bpl.n	801016e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801016a:	f000 f961 	bl	8010430 <_ZSt17__throw_bad_allocv>
 801016e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010172:	f7ff bfc5 	b.w	8010100 <_Znwj>
 8010176:	bf00      	nop
 8010178:	080119ac 	.word	0x080119ac

0801017c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801017c:	b510      	push	{r4, lr}
 801017e:	4604      	mov	r4, r0
 8010180:	f7ff ffd3 	bl	801012a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010184:	b920      	cbnz	r0, 8010190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8010186:	6820      	ldr	r0, [r4, #0]
 8010188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801018c:	f000 b945 	b.w	801041a <_ZdlPv>
 8010190:	bd10      	pop	{r4, pc}

08010192 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8010192:	6840      	ldr	r0, [r0, #4]
 8010194:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8010198:	3901      	subs	r1, #1
 801019a:	1a09      	subs	r1, r1, r0
 801019c:	4291      	cmp	r1, r2
 801019e:	b508      	push	{r3, lr}
 80101a0:	d202      	bcs.n	80101a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 f947 	bl	8010436 <_ZSt20__throw_length_errorPKc>
 80101a8:	bd08      	pop	{r3, pc}

080101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80101aa:	2a01      	cmp	r2, #1
 80101ac:	b410      	push	{r4}
 80101ae:	d104      	bne.n	80101ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80101b0:	780a      	ldrb	r2, [r1, #0]
 80101b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b6:	7002      	strb	r2, [r0, #0]
 80101b8:	4770      	bx	lr
 80101ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101be:	f7ff bfb0 	b.w	8010122 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080101c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80101c2:	2a01      	cmp	r2, #1
 80101c4:	b430      	push	{r4, r5}
 80101c6:	d103      	bne.n	80101d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80101c8:	780b      	ldrb	r3, [r1, #0]
 80101ca:	7003      	strb	r3, [r0, #0]
 80101cc:	bc30      	pop	{r4, r5}
 80101ce:	4770      	bx	lr
 80101d0:	2a00      	cmp	r2, #0
 80101d2:	d0fb      	beq.n	80101cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80101d4:	bc30      	pop	{r4, r5}
 80101d6:	f000 bc09 	b.w	80109ec <memmove>

080101da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80101da:	460b      	mov	r3, r1
 80101dc:	2b01      	cmp	r3, #1
 80101de:	b410      	push	{r4}
 80101e0:	4611      	mov	r1, r2
 80101e2:	4604      	mov	r4, r0
 80101e4:	d103      	bne.n	80101ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80101e6:	7022      	strb	r2, [r4, #0]
 80101e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ec:	4770      	bx	lr
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d0fa      	beq.n	80101e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80101f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f6:	461a      	mov	r2, r3
 80101f8:	f000 bc12 	b.w	8010a20 <memset>

080101fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80101fc:	b508      	push	{r3, lr}
 80101fe:	1a52      	subs	r2, r2, r1
 8010200:	f7ff ffd3 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010204:	bd08      	pop	{r3, pc}

08010206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8010206:	f100 0208 	add.w	r2, r0, #8
 801020a:	6002      	str	r2, [r0, #0]
 801020c:	2200      	movs	r2, #0
 801020e:	6042      	str	r2, [r0, #4]
 8010210:	7202      	strb	r2, [r0, #8]
 8010212:	4770      	bx	lr

08010214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010214:	b510      	push	{r4, lr}
 8010216:	4604      	mov	r4, r0
 8010218:	f7ff ffb0 	bl	801017c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801021c:	4620      	mov	r0, r4
 801021e:	bd10      	pop	{r4, pc}

08010220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8010220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010222:	460c      	mov	r4, r1
 8010224:	4605      	mov	r5, r0
 8010226:	f7ff ff80 	bl	801012a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801022a:	4606      	mov	r6, r0
 801022c:	4620      	mov	r0, r4
 801022e:	f7ff ff7c 	bl	801012a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010232:	b190      	cbz	r0, 801025a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8010234:	42a5      	cmp	r5, r4
 8010236:	d00a      	beq.n	801024e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010238:	6862      	ldr	r2, [r4, #4]
 801023a:	b11a      	cbz	r2, 8010244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801023c:	6821      	ldr	r1, [r4, #0]
 801023e:	6828      	ldr	r0, [r5, #0]
 8010240:	f7ff ffb3 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010244:	6863      	ldr	r3, [r4, #4]
 8010246:	682a      	ldr	r2, [r5, #0]
 8010248:	606b      	str	r3, [r5, #4]
 801024a:	2100      	movs	r1, #0
 801024c:	54d1      	strb	r1, [r2, r3]
 801024e:	6822      	ldr	r2, [r4, #0]
 8010250:	2300      	movs	r3, #0
 8010252:	6063      	str	r3, [r4, #4]
 8010254:	7013      	strb	r3, [r2, #0]
 8010256:	4628      	mov	r0, r5
 8010258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801025a:	b90e      	cbnz	r6, 8010260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801025c:	6828      	ldr	r0, [r5, #0]
 801025e:	68af      	ldr	r7, [r5, #8]
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	602b      	str	r3, [r5, #0]
 8010264:	6863      	ldr	r3, [r4, #4]
 8010266:	606b      	str	r3, [r5, #4]
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	60ab      	str	r3, [r5, #8]
 801026c:	b110      	cbz	r0, 8010274 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801026e:	6020      	str	r0, [r4, #0]
 8010270:	60a7      	str	r7, [r4, #8]
 8010272:	e7ec      	b.n	801024e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010274:	f104 0308 	add.w	r3, r4, #8
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	e7e8      	b.n	801024e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801027c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801027c:	b510      	push	{r4, lr}
 801027e:	4604      	mov	r4, r0
 8010280:	f7ff ff53 	bl	801012a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010284:	b908      	cbnz	r0, 801028a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8010286:	68a0      	ldr	r0, [r4, #8]
 8010288:	bd10      	pop	{r4, pc}
 801028a:	200f      	movs	r0, #15
 801028c:	e7fc      	b.n	8010288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801028e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801028e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010292:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010294:	461f      	mov	r7, r3
 8010296:	6843      	ldr	r3, [r0, #4]
 8010298:	eb01 0802 	add.w	r8, r1, r2
 801029c:	1ab2      	subs	r2, r6, r2
 801029e:	441a      	add	r2, r3
 80102a0:	4604      	mov	r4, r0
 80102a2:	460d      	mov	r5, r1
 80102a4:	eba3 0908 	sub.w	r9, r3, r8
 80102a8:	9201      	str	r2, [sp, #4]
 80102aa:	f7ff ffe7 	bl	801027c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80102ae:	a901      	add	r1, sp, #4
 80102b0:	4602      	mov	r2, r0
 80102b2:	4620      	mov	r0, r4
 80102b4:	f7ff ff40 	bl	8010138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80102b8:	4682      	mov	sl, r0
 80102ba:	b11d      	cbz	r5, 80102c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80102bc:	6821      	ldr	r1, [r4, #0]
 80102be:	462a      	mov	r2, r5
 80102c0:	f7ff ff73 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80102c4:	b137      	cbz	r7, 80102d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80102c6:	b12e      	cbz	r6, 80102d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80102c8:	4632      	mov	r2, r6
 80102ca:	4639      	mov	r1, r7
 80102cc:	eb0a 0005 	add.w	r0, sl, r5
 80102d0:	f7ff ff6b 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80102d4:	f1b9 0f00 	cmp.w	r9, #0
 80102d8:	d007      	beq.n	80102ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80102da:	6821      	ldr	r1, [r4, #0]
 80102dc:	4435      	add	r5, r6
 80102de:	464a      	mov	r2, r9
 80102e0:	4441      	add	r1, r8
 80102e2:	eb0a 0005 	add.w	r0, sl, r5
 80102e6:	f7ff ff60 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80102ea:	4620      	mov	r0, r4
 80102ec:	f7ff ff46 	bl	801017c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80102f0:	9b01      	ldr	r3, [sp, #4]
 80102f2:	f8c4 a000 	str.w	sl, [r4]
 80102f6:	60a3      	str	r3, [r4, #8]
 80102f8:	b002      	add	sp, #8
 80102fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080102fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80102fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010300:	4604      	mov	r4, r0
 8010302:	9101      	str	r1, [sp, #4]
 8010304:	f7ff ffba 	bl	801027c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8010308:	9b01      	ldr	r3, [sp, #4]
 801030a:	4283      	cmp	r3, r0
 801030c:	4602      	mov	r2, r0
 801030e:	d90f      	bls.n	8010330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8010310:	a901      	add	r1, sp, #4
 8010312:	4620      	mov	r0, r4
 8010314:	f7ff ff10 	bl	8010138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010318:	6862      	ldr	r2, [r4, #4]
 801031a:	6821      	ldr	r1, [r4, #0]
 801031c:	3201      	adds	r2, #1
 801031e:	4605      	mov	r5, r0
 8010320:	f7ff ff43 	bl	80101aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010324:	4620      	mov	r0, r4
 8010326:	f7ff ff29 	bl	801017c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801032a:	9b01      	ldr	r3, [sp, #4]
 801032c:	6025      	str	r5, [r4, #0]
 801032e:	60a3      	str	r3, [r4, #8]
 8010330:	b003      	add	sp, #12
 8010332:	bd30      	pop	{r4, r5, pc}

08010334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8010334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010338:	4616      	mov	r6, r2
 801033a:	461d      	mov	r5, r3
 801033c:	4604      	mov	r4, r0
 801033e:	4b1b      	ldr	r3, [pc, #108]	@ (80103ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8010340:	462a      	mov	r2, r5
 8010342:	460f      	mov	r7, r1
 8010344:	4631      	mov	r1, r6
 8010346:	f7ff ff24 	bl	8010192 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801034a:	4620      	mov	r0, r4
 801034c:	f7ff ff96 	bl	801027c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8010350:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010354:	eba5 0806 	sub.w	r8, r5, r6
 8010358:	44c8      	add	r8, r9
 801035a:	4540      	cmp	r0, r8
 801035c:	d31d      	bcc.n	801039a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801035e:	19f3      	adds	r3, r6, r7
 8010360:	ebb9 0203 	subs.w	r2, r9, r3
 8010364:	d007      	beq.n	8010376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010366:	42ae      	cmp	r6, r5
 8010368:	d005      	beq.n	8010376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801036a:	6820      	ldr	r0, [r4, #0]
 801036c:	4438      	add	r0, r7
 801036e:	1981      	adds	r1, r0, r6
 8010370:	4428      	add	r0, r5
 8010372:	f7ff ff26 	bl	80101c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010376:	b135      	cbz	r5, 8010386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801037e:	4629      	mov	r1, r5
 8010380:	4438      	add	r0, r7
 8010382:	f7ff ff2a 	bl	80101da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	f8c4 8004 	str.w	r8, [r4, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	4620      	mov	r0, r4
 8010390:	f803 2008 	strb.w	r2, [r3, r8]
 8010394:	b003      	add	sp, #12
 8010396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801039a:	9500      	str	r5, [sp, #0]
 801039c:	2300      	movs	r3, #0
 801039e:	4632      	mov	r2, r6
 80103a0:	4639      	mov	r1, r7
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7ff ff73 	bl	801028e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80103a8:	e7e5      	b.n	8010376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80103aa:	bf00      	nop
 80103ac:	080119c4 	.word	0x080119c4

080103b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80103b0:	b507      	push	{r0, r1, r2, lr}
 80103b2:	9200      	str	r2, [sp, #0]
 80103b4:	460b      	mov	r3, r1
 80103b6:	2200      	movs	r2, #0
 80103b8:	6841      	ldr	r1, [r0, #4]
 80103ba:	f7ff ffbb 	bl	8010334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80103be:	b003      	add	sp, #12
 80103c0:	f85d fb04 	ldr.w	pc, [sp], #4

080103c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80103c4:	6800      	ldr	r0, [r0, #0]
 80103c6:	4770      	bx	lr

080103c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80103c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103ca:	1a53      	subs	r3, r2, r1
 80103cc:	2b0f      	cmp	r3, #15
 80103ce:	4604      	mov	r4, r0
 80103d0:	460d      	mov	r5, r1
 80103d2:	4616      	mov	r6, r2
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	d906      	bls.n	80103e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80103d8:	2200      	movs	r2, #0
 80103da:	a901      	add	r1, sp, #4
 80103dc:	f7ff feac 	bl	8010138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80103e0:	9b01      	ldr	r3, [sp, #4]
 80103e2:	6020      	str	r0, [r4, #0]
 80103e4:	60a3      	str	r3, [r4, #8]
 80103e6:	4632      	mov	r2, r6
 80103e8:	4629      	mov	r1, r5
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	f7ff ff06 	bl	80101fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80103f0:	9b01      	ldr	r3, [sp, #4]
 80103f2:	6822      	ldr	r2, [r4, #0]
 80103f4:	6063      	str	r3, [r4, #4]
 80103f6:	2100      	movs	r1, #0
 80103f8:	54d1      	strb	r1, [r2, r3]
 80103fa:	b002      	add	sp, #8
 80103fc:	bd70      	pop	{r4, r5, r6, pc}

080103fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80103fe:	f100 0208 	add.w	r2, r0, #8
 8010402:	b510      	push	{r4, lr}
 8010404:	6002      	str	r2, [r0, #0]
 8010406:	e9d1 1200 	ldrd	r1, r2, [r1]
 801040a:	4604      	mov	r4, r0
 801040c:	f04f 0300 	mov.w	r3, #0
 8010410:	440a      	add	r2, r1
 8010412:	f7ff ffd9 	bl	80103c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8010416:	4620      	mov	r0, r4
 8010418:	bd10      	pop	{r4, pc}

0801041a <_ZdlPv>:
 801041a:	f000 b81f 	b.w	801045c <free>
	...

08010420 <_ZSt15get_new_handlerv>:
 8010420:	4b02      	ldr	r3, [pc, #8]	@ (801042c <_ZSt15get_new_handlerv+0xc>)
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	f3bf 8f5b 	dmb	ish
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	24000e70 	.word	0x24000e70

08010430 <_ZSt17__throw_bad_allocv>:
 8010430:	b508      	push	{r3, lr}
 8010432:	f000 f803 	bl	801043c <abort>

08010436 <_ZSt20__throw_length_errorPKc>:
 8010436:	b508      	push	{r3, lr}
 8010438:	f000 f800 	bl	801043c <abort>

0801043c <abort>:
 801043c:	b508      	push	{r3, lr}
 801043e:	2006      	movs	r0, #6
 8010440:	f000 fb1e 	bl	8010a80 <raise>
 8010444:	2001      	movs	r0, #1
 8010446:	f7f3 f90b 	bl	8003660 <_exit>
	...

0801044c <malloc>:
 801044c:	4b02      	ldr	r3, [pc, #8]	@ (8010458 <malloc+0xc>)
 801044e:	4601      	mov	r1, r0
 8010450:	6818      	ldr	r0, [r3, #0]
 8010452:	f000 b82d 	b.w	80104b0 <_malloc_r>
 8010456:	bf00      	nop
 8010458:	2400006c 	.word	0x2400006c

0801045c <free>:
 801045c:	4b02      	ldr	r3, [pc, #8]	@ (8010468 <free+0xc>)
 801045e:	4601      	mov	r1, r0
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f000 bbbb 	b.w	8010bdc <_free_r>
 8010466:	bf00      	nop
 8010468:	2400006c 	.word	0x2400006c

0801046c <sbrk_aligned>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	4e0f      	ldr	r6, [pc, #60]	@ (80104ac <sbrk_aligned+0x40>)
 8010470:	460c      	mov	r4, r1
 8010472:	6831      	ldr	r1, [r6, #0]
 8010474:	4605      	mov	r5, r0
 8010476:	b911      	cbnz	r1, 801047e <sbrk_aligned+0x12>
 8010478:	f000 fb52 	bl	8010b20 <_sbrk_r>
 801047c:	6030      	str	r0, [r6, #0]
 801047e:	4621      	mov	r1, r4
 8010480:	4628      	mov	r0, r5
 8010482:	f000 fb4d 	bl	8010b20 <_sbrk_r>
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	d103      	bne.n	8010492 <sbrk_aligned+0x26>
 801048a:	f04f 34ff 	mov.w	r4, #4294967295
 801048e:	4620      	mov	r0, r4
 8010490:	bd70      	pop	{r4, r5, r6, pc}
 8010492:	1cc4      	adds	r4, r0, #3
 8010494:	f024 0403 	bic.w	r4, r4, #3
 8010498:	42a0      	cmp	r0, r4
 801049a:	d0f8      	beq.n	801048e <sbrk_aligned+0x22>
 801049c:	1a21      	subs	r1, r4, r0
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 fb3e 	bl	8010b20 <_sbrk_r>
 80104a4:	3001      	adds	r0, #1
 80104a6:	d1f2      	bne.n	801048e <sbrk_aligned+0x22>
 80104a8:	e7ef      	b.n	801048a <sbrk_aligned+0x1e>
 80104aa:	bf00      	nop
 80104ac:	24000e74 	.word	0x24000e74

080104b0 <_malloc_r>:
 80104b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104b4:	1ccd      	adds	r5, r1, #3
 80104b6:	f025 0503 	bic.w	r5, r5, #3
 80104ba:	3508      	adds	r5, #8
 80104bc:	2d0c      	cmp	r5, #12
 80104be:	bf38      	it	cc
 80104c0:	250c      	movcc	r5, #12
 80104c2:	2d00      	cmp	r5, #0
 80104c4:	4606      	mov	r6, r0
 80104c6:	db01      	blt.n	80104cc <_malloc_r+0x1c>
 80104c8:	42a9      	cmp	r1, r5
 80104ca:	d904      	bls.n	80104d6 <_malloc_r+0x26>
 80104cc:	230c      	movs	r3, #12
 80104ce:	6033      	str	r3, [r6, #0]
 80104d0:	2000      	movs	r0, #0
 80104d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80105ac <_malloc_r+0xfc>
 80104da:	f000 f869 	bl	80105b0 <__malloc_lock>
 80104de:	f8d8 3000 	ldr.w	r3, [r8]
 80104e2:	461c      	mov	r4, r3
 80104e4:	bb44      	cbnz	r4, 8010538 <_malloc_r+0x88>
 80104e6:	4629      	mov	r1, r5
 80104e8:	4630      	mov	r0, r6
 80104ea:	f7ff ffbf 	bl	801046c <sbrk_aligned>
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	4604      	mov	r4, r0
 80104f2:	d158      	bne.n	80105a6 <_malloc_r+0xf6>
 80104f4:	f8d8 4000 	ldr.w	r4, [r8]
 80104f8:	4627      	mov	r7, r4
 80104fa:	2f00      	cmp	r7, #0
 80104fc:	d143      	bne.n	8010586 <_malloc_r+0xd6>
 80104fe:	2c00      	cmp	r4, #0
 8010500:	d04b      	beq.n	801059a <_malloc_r+0xea>
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	4639      	mov	r1, r7
 8010506:	4630      	mov	r0, r6
 8010508:	eb04 0903 	add.w	r9, r4, r3
 801050c:	f000 fb08 	bl	8010b20 <_sbrk_r>
 8010510:	4581      	cmp	r9, r0
 8010512:	d142      	bne.n	801059a <_malloc_r+0xea>
 8010514:	6821      	ldr	r1, [r4, #0]
 8010516:	1a6d      	subs	r5, r5, r1
 8010518:	4629      	mov	r1, r5
 801051a:	4630      	mov	r0, r6
 801051c:	f7ff ffa6 	bl	801046c <sbrk_aligned>
 8010520:	3001      	adds	r0, #1
 8010522:	d03a      	beq.n	801059a <_malloc_r+0xea>
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	442b      	add	r3, r5
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	f8d8 3000 	ldr.w	r3, [r8]
 801052e:	685a      	ldr	r2, [r3, #4]
 8010530:	bb62      	cbnz	r2, 801058c <_malloc_r+0xdc>
 8010532:	f8c8 7000 	str.w	r7, [r8]
 8010536:	e00f      	b.n	8010558 <_malloc_r+0xa8>
 8010538:	6822      	ldr	r2, [r4, #0]
 801053a:	1b52      	subs	r2, r2, r5
 801053c:	d420      	bmi.n	8010580 <_malloc_r+0xd0>
 801053e:	2a0b      	cmp	r2, #11
 8010540:	d917      	bls.n	8010572 <_malloc_r+0xc2>
 8010542:	1961      	adds	r1, r4, r5
 8010544:	42a3      	cmp	r3, r4
 8010546:	6025      	str	r5, [r4, #0]
 8010548:	bf18      	it	ne
 801054a:	6059      	strne	r1, [r3, #4]
 801054c:	6863      	ldr	r3, [r4, #4]
 801054e:	bf08      	it	eq
 8010550:	f8c8 1000 	streq.w	r1, [r8]
 8010554:	5162      	str	r2, [r4, r5]
 8010556:	604b      	str	r3, [r1, #4]
 8010558:	4630      	mov	r0, r6
 801055a:	f000 f82f 	bl	80105bc <__malloc_unlock>
 801055e:	f104 000b 	add.w	r0, r4, #11
 8010562:	1d23      	adds	r3, r4, #4
 8010564:	f020 0007 	bic.w	r0, r0, #7
 8010568:	1ac2      	subs	r2, r0, r3
 801056a:	bf1c      	itt	ne
 801056c:	1a1b      	subne	r3, r3, r0
 801056e:	50a3      	strne	r3, [r4, r2]
 8010570:	e7af      	b.n	80104d2 <_malloc_r+0x22>
 8010572:	6862      	ldr	r2, [r4, #4]
 8010574:	42a3      	cmp	r3, r4
 8010576:	bf0c      	ite	eq
 8010578:	f8c8 2000 	streq.w	r2, [r8]
 801057c:	605a      	strne	r2, [r3, #4]
 801057e:	e7eb      	b.n	8010558 <_malloc_r+0xa8>
 8010580:	4623      	mov	r3, r4
 8010582:	6864      	ldr	r4, [r4, #4]
 8010584:	e7ae      	b.n	80104e4 <_malloc_r+0x34>
 8010586:	463c      	mov	r4, r7
 8010588:	687f      	ldr	r7, [r7, #4]
 801058a:	e7b6      	b.n	80104fa <_malloc_r+0x4a>
 801058c:	461a      	mov	r2, r3
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	42a3      	cmp	r3, r4
 8010592:	d1fb      	bne.n	801058c <_malloc_r+0xdc>
 8010594:	2300      	movs	r3, #0
 8010596:	6053      	str	r3, [r2, #4]
 8010598:	e7de      	b.n	8010558 <_malloc_r+0xa8>
 801059a:	230c      	movs	r3, #12
 801059c:	6033      	str	r3, [r6, #0]
 801059e:	4630      	mov	r0, r6
 80105a0:	f000 f80c 	bl	80105bc <__malloc_unlock>
 80105a4:	e794      	b.n	80104d0 <_malloc_r+0x20>
 80105a6:	6005      	str	r5, [r0, #0]
 80105a8:	e7d6      	b.n	8010558 <_malloc_r+0xa8>
 80105aa:	bf00      	nop
 80105ac:	24000e78 	.word	0x24000e78

080105b0 <__malloc_lock>:
 80105b0:	4801      	ldr	r0, [pc, #4]	@ (80105b8 <__malloc_lock+0x8>)
 80105b2:	f000 bb02 	b.w	8010bba <__retarget_lock_acquire_recursive>
 80105b6:	bf00      	nop
 80105b8:	24000fbc 	.word	0x24000fbc

080105bc <__malloc_unlock>:
 80105bc:	4801      	ldr	r0, [pc, #4]	@ (80105c4 <__malloc_unlock+0x8>)
 80105be:	f000 bafd 	b.w	8010bbc <__retarget_lock_release_recursive>
 80105c2:	bf00      	nop
 80105c4:	24000fbc 	.word	0x24000fbc

080105c8 <std>:
 80105c8:	2300      	movs	r3, #0
 80105ca:	b510      	push	{r4, lr}
 80105cc:	4604      	mov	r4, r0
 80105ce:	e9c0 3300 	strd	r3, r3, [r0]
 80105d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105d6:	6083      	str	r3, [r0, #8]
 80105d8:	8181      	strh	r1, [r0, #12]
 80105da:	6643      	str	r3, [r0, #100]	@ 0x64
 80105dc:	81c2      	strh	r2, [r0, #14]
 80105de:	6183      	str	r3, [r0, #24]
 80105e0:	4619      	mov	r1, r3
 80105e2:	2208      	movs	r2, #8
 80105e4:	305c      	adds	r0, #92	@ 0x5c
 80105e6:	f000 fa1b 	bl	8010a20 <memset>
 80105ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <std+0x58>)
 80105ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <std+0x5c>)
 80105f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010628 <std+0x60>)
 80105f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105f6:	4b0d      	ldr	r3, [pc, #52]	@ (801062c <std+0x64>)
 80105f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80105fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010630 <std+0x68>)
 80105fc:	6224      	str	r4, [r4, #32]
 80105fe:	429c      	cmp	r4, r3
 8010600:	d006      	beq.n	8010610 <std+0x48>
 8010602:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010606:	4294      	cmp	r4, r2
 8010608:	d002      	beq.n	8010610 <std+0x48>
 801060a:	33d0      	adds	r3, #208	@ 0xd0
 801060c:	429c      	cmp	r4, r3
 801060e:	d105      	bne.n	801061c <std+0x54>
 8010610:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010618:	f000 bace 	b.w	8010bb8 <__retarget_lock_init_recursive>
 801061c:	bd10      	pop	{r4, pc}
 801061e:	bf00      	nop
 8010620:	0801083d 	.word	0x0801083d
 8010624:	0801085f 	.word	0x0801085f
 8010628:	08010897 	.word	0x08010897
 801062c:	080108bb 	.word	0x080108bb
 8010630:	24000e7c 	.word	0x24000e7c

08010634 <stdio_exit_handler>:
 8010634:	4a02      	ldr	r2, [pc, #8]	@ (8010640 <stdio_exit_handler+0xc>)
 8010636:	4903      	ldr	r1, [pc, #12]	@ (8010644 <stdio_exit_handler+0x10>)
 8010638:	4803      	ldr	r0, [pc, #12]	@ (8010648 <stdio_exit_handler+0x14>)
 801063a:	f000 b869 	b.w	8010710 <_fwalk_sglue>
 801063e:	bf00      	nop
 8010640:	24000060 	.word	0x24000060
 8010644:	08011319 	.word	0x08011319
 8010648:	24000070 	.word	0x24000070

0801064c <cleanup_stdio>:
 801064c:	6841      	ldr	r1, [r0, #4]
 801064e:	4b0c      	ldr	r3, [pc, #48]	@ (8010680 <cleanup_stdio+0x34>)
 8010650:	4299      	cmp	r1, r3
 8010652:	b510      	push	{r4, lr}
 8010654:	4604      	mov	r4, r0
 8010656:	d001      	beq.n	801065c <cleanup_stdio+0x10>
 8010658:	f000 fe5e 	bl	8011318 <_fflush_r>
 801065c:	68a1      	ldr	r1, [r4, #8]
 801065e:	4b09      	ldr	r3, [pc, #36]	@ (8010684 <cleanup_stdio+0x38>)
 8010660:	4299      	cmp	r1, r3
 8010662:	d002      	beq.n	801066a <cleanup_stdio+0x1e>
 8010664:	4620      	mov	r0, r4
 8010666:	f000 fe57 	bl	8011318 <_fflush_r>
 801066a:	68e1      	ldr	r1, [r4, #12]
 801066c:	4b06      	ldr	r3, [pc, #24]	@ (8010688 <cleanup_stdio+0x3c>)
 801066e:	4299      	cmp	r1, r3
 8010670:	d004      	beq.n	801067c <cleanup_stdio+0x30>
 8010672:	4620      	mov	r0, r4
 8010674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010678:	f000 be4e 	b.w	8011318 <_fflush_r>
 801067c:	bd10      	pop	{r4, pc}
 801067e:	bf00      	nop
 8010680:	24000e7c 	.word	0x24000e7c
 8010684:	24000ee4 	.word	0x24000ee4
 8010688:	24000f4c 	.word	0x24000f4c

0801068c <global_stdio_init.part.0>:
 801068c:	b510      	push	{r4, lr}
 801068e:	4b0b      	ldr	r3, [pc, #44]	@ (80106bc <global_stdio_init.part.0+0x30>)
 8010690:	4c0b      	ldr	r4, [pc, #44]	@ (80106c0 <global_stdio_init.part.0+0x34>)
 8010692:	4a0c      	ldr	r2, [pc, #48]	@ (80106c4 <global_stdio_init.part.0+0x38>)
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	4620      	mov	r0, r4
 8010698:	2200      	movs	r2, #0
 801069a:	2104      	movs	r1, #4
 801069c:	f7ff ff94 	bl	80105c8 <std>
 80106a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106a4:	2201      	movs	r2, #1
 80106a6:	2109      	movs	r1, #9
 80106a8:	f7ff ff8e 	bl	80105c8 <std>
 80106ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106b0:	2202      	movs	r2, #2
 80106b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106b6:	2112      	movs	r1, #18
 80106b8:	f7ff bf86 	b.w	80105c8 <std>
 80106bc:	24000fb4 	.word	0x24000fb4
 80106c0:	24000e7c 	.word	0x24000e7c
 80106c4:	08010635 	.word	0x08010635

080106c8 <__sfp_lock_acquire>:
 80106c8:	4801      	ldr	r0, [pc, #4]	@ (80106d0 <__sfp_lock_acquire+0x8>)
 80106ca:	f000 ba76 	b.w	8010bba <__retarget_lock_acquire_recursive>
 80106ce:	bf00      	nop
 80106d0:	24000fbd 	.word	0x24000fbd

080106d4 <__sfp_lock_release>:
 80106d4:	4801      	ldr	r0, [pc, #4]	@ (80106dc <__sfp_lock_release+0x8>)
 80106d6:	f000 ba71 	b.w	8010bbc <__retarget_lock_release_recursive>
 80106da:	bf00      	nop
 80106dc:	24000fbd 	.word	0x24000fbd

080106e0 <__sinit>:
 80106e0:	b510      	push	{r4, lr}
 80106e2:	4604      	mov	r4, r0
 80106e4:	f7ff fff0 	bl	80106c8 <__sfp_lock_acquire>
 80106e8:	6a23      	ldr	r3, [r4, #32]
 80106ea:	b11b      	cbz	r3, 80106f4 <__sinit+0x14>
 80106ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106f0:	f7ff bff0 	b.w	80106d4 <__sfp_lock_release>
 80106f4:	4b04      	ldr	r3, [pc, #16]	@ (8010708 <__sinit+0x28>)
 80106f6:	6223      	str	r3, [r4, #32]
 80106f8:	4b04      	ldr	r3, [pc, #16]	@ (801070c <__sinit+0x2c>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1f5      	bne.n	80106ec <__sinit+0xc>
 8010700:	f7ff ffc4 	bl	801068c <global_stdio_init.part.0>
 8010704:	e7f2      	b.n	80106ec <__sinit+0xc>
 8010706:	bf00      	nop
 8010708:	0801064d 	.word	0x0801064d
 801070c:	24000fb4 	.word	0x24000fb4

08010710 <_fwalk_sglue>:
 8010710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010714:	4607      	mov	r7, r0
 8010716:	4688      	mov	r8, r1
 8010718:	4614      	mov	r4, r2
 801071a:	2600      	movs	r6, #0
 801071c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010720:	f1b9 0901 	subs.w	r9, r9, #1
 8010724:	d505      	bpl.n	8010732 <_fwalk_sglue+0x22>
 8010726:	6824      	ldr	r4, [r4, #0]
 8010728:	2c00      	cmp	r4, #0
 801072a:	d1f7      	bne.n	801071c <_fwalk_sglue+0xc>
 801072c:	4630      	mov	r0, r6
 801072e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d907      	bls.n	8010748 <_fwalk_sglue+0x38>
 8010738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801073c:	3301      	adds	r3, #1
 801073e:	d003      	beq.n	8010748 <_fwalk_sglue+0x38>
 8010740:	4629      	mov	r1, r5
 8010742:	4638      	mov	r0, r7
 8010744:	47c0      	blx	r8
 8010746:	4306      	orrs	r6, r0
 8010748:	3568      	adds	r5, #104	@ 0x68
 801074a:	e7e9      	b.n	8010720 <_fwalk_sglue+0x10>

0801074c <iprintf>:
 801074c:	b40f      	push	{r0, r1, r2, r3}
 801074e:	b507      	push	{r0, r1, r2, lr}
 8010750:	4906      	ldr	r1, [pc, #24]	@ (801076c <iprintf+0x20>)
 8010752:	ab04      	add	r3, sp, #16
 8010754:	6808      	ldr	r0, [r1, #0]
 8010756:	f853 2b04 	ldr.w	r2, [r3], #4
 801075a:	6881      	ldr	r1, [r0, #8]
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	f000 fab1 	bl	8010cc4 <_vfiprintf_r>
 8010762:	b003      	add	sp, #12
 8010764:	f85d eb04 	ldr.w	lr, [sp], #4
 8010768:	b004      	add	sp, #16
 801076a:	4770      	bx	lr
 801076c:	2400006c 	.word	0x2400006c

08010770 <putchar>:
 8010770:	4b02      	ldr	r3, [pc, #8]	@ (801077c <putchar+0xc>)
 8010772:	4601      	mov	r1, r0
 8010774:	6818      	ldr	r0, [r3, #0]
 8010776:	6882      	ldr	r2, [r0, #8]
 8010778:	f000 be58 	b.w	801142c <_putc_r>
 801077c:	2400006c 	.word	0x2400006c

08010780 <_puts_r>:
 8010780:	6a03      	ldr	r3, [r0, #32]
 8010782:	b570      	push	{r4, r5, r6, lr}
 8010784:	6884      	ldr	r4, [r0, #8]
 8010786:	4605      	mov	r5, r0
 8010788:	460e      	mov	r6, r1
 801078a:	b90b      	cbnz	r3, 8010790 <_puts_r+0x10>
 801078c:	f7ff ffa8 	bl	80106e0 <__sinit>
 8010790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010792:	07db      	lsls	r3, r3, #31
 8010794:	d405      	bmi.n	80107a2 <_puts_r+0x22>
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	0598      	lsls	r0, r3, #22
 801079a:	d402      	bmi.n	80107a2 <_puts_r+0x22>
 801079c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801079e:	f000 fa0c 	bl	8010bba <__retarget_lock_acquire_recursive>
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	0719      	lsls	r1, r3, #28
 80107a6:	d502      	bpl.n	80107ae <_puts_r+0x2e>
 80107a8:	6923      	ldr	r3, [r4, #16]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d135      	bne.n	801081a <_puts_r+0x9a>
 80107ae:	4621      	mov	r1, r4
 80107b0:	4628      	mov	r0, r5
 80107b2:	f000 f8c5 	bl	8010940 <__swsetup_r>
 80107b6:	b380      	cbz	r0, 801081a <_puts_r+0x9a>
 80107b8:	f04f 35ff 	mov.w	r5, #4294967295
 80107bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107be:	07da      	lsls	r2, r3, #31
 80107c0:	d405      	bmi.n	80107ce <_puts_r+0x4e>
 80107c2:	89a3      	ldrh	r3, [r4, #12]
 80107c4:	059b      	lsls	r3, r3, #22
 80107c6:	d402      	bmi.n	80107ce <_puts_r+0x4e>
 80107c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107ca:	f000 f9f7 	bl	8010bbc <__retarget_lock_release_recursive>
 80107ce:	4628      	mov	r0, r5
 80107d0:	bd70      	pop	{r4, r5, r6, pc}
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	da04      	bge.n	80107e0 <_puts_r+0x60>
 80107d6:	69a2      	ldr	r2, [r4, #24]
 80107d8:	429a      	cmp	r2, r3
 80107da:	dc17      	bgt.n	801080c <_puts_r+0x8c>
 80107dc:	290a      	cmp	r1, #10
 80107de:	d015      	beq.n	801080c <_puts_r+0x8c>
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	6022      	str	r2, [r4, #0]
 80107e6:	7019      	strb	r1, [r3, #0]
 80107e8:	68a3      	ldr	r3, [r4, #8]
 80107ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107ee:	3b01      	subs	r3, #1
 80107f0:	60a3      	str	r3, [r4, #8]
 80107f2:	2900      	cmp	r1, #0
 80107f4:	d1ed      	bne.n	80107d2 <_puts_r+0x52>
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	da11      	bge.n	801081e <_puts_r+0x9e>
 80107fa:	4622      	mov	r2, r4
 80107fc:	210a      	movs	r1, #10
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f85f 	bl	80108c2 <__swbuf_r>
 8010804:	3001      	adds	r0, #1
 8010806:	d0d7      	beq.n	80107b8 <_puts_r+0x38>
 8010808:	250a      	movs	r5, #10
 801080a:	e7d7      	b.n	80107bc <_puts_r+0x3c>
 801080c:	4622      	mov	r2, r4
 801080e:	4628      	mov	r0, r5
 8010810:	f000 f857 	bl	80108c2 <__swbuf_r>
 8010814:	3001      	adds	r0, #1
 8010816:	d1e7      	bne.n	80107e8 <_puts_r+0x68>
 8010818:	e7ce      	b.n	80107b8 <_puts_r+0x38>
 801081a:	3e01      	subs	r6, #1
 801081c:	e7e4      	b.n	80107e8 <_puts_r+0x68>
 801081e:	6823      	ldr	r3, [r4, #0]
 8010820:	1c5a      	adds	r2, r3, #1
 8010822:	6022      	str	r2, [r4, #0]
 8010824:	220a      	movs	r2, #10
 8010826:	701a      	strb	r2, [r3, #0]
 8010828:	e7ee      	b.n	8010808 <_puts_r+0x88>
	...

0801082c <puts>:
 801082c:	4b02      	ldr	r3, [pc, #8]	@ (8010838 <puts+0xc>)
 801082e:	4601      	mov	r1, r0
 8010830:	6818      	ldr	r0, [r3, #0]
 8010832:	f7ff bfa5 	b.w	8010780 <_puts_r>
 8010836:	bf00      	nop
 8010838:	2400006c 	.word	0x2400006c

0801083c <__sread>:
 801083c:	b510      	push	{r4, lr}
 801083e:	460c      	mov	r4, r1
 8010840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010844:	f000 f946 	bl	8010ad4 <_read_r>
 8010848:	2800      	cmp	r0, #0
 801084a:	bfab      	itete	ge
 801084c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801084e:	89a3      	ldrhlt	r3, [r4, #12]
 8010850:	181b      	addge	r3, r3, r0
 8010852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010856:	bfac      	ite	ge
 8010858:	6563      	strge	r3, [r4, #84]	@ 0x54
 801085a:	81a3      	strhlt	r3, [r4, #12]
 801085c:	bd10      	pop	{r4, pc}

0801085e <__swrite>:
 801085e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010862:	461f      	mov	r7, r3
 8010864:	898b      	ldrh	r3, [r1, #12]
 8010866:	05db      	lsls	r3, r3, #23
 8010868:	4605      	mov	r5, r0
 801086a:	460c      	mov	r4, r1
 801086c:	4616      	mov	r6, r2
 801086e:	d505      	bpl.n	801087c <__swrite+0x1e>
 8010870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010874:	2302      	movs	r3, #2
 8010876:	2200      	movs	r2, #0
 8010878:	f000 f91a 	bl	8010ab0 <_lseek_r>
 801087c:	89a3      	ldrh	r3, [r4, #12]
 801087e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010886:	81a3      	strh	r3, [r4, #12]
 8010888:	4632      	mov	r2, r6
 801088a:	463b      	mov	r3, r7
 801088c:	4628      	mov	r0, r5
 801088e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010892:	f000 b955 	b.w	8010b40 <_write_r>

08010896 <__sseek>:
 8010896:	b510      	push	{r4, lr}
 8010898:	460c      	mov	r4, r1
 801089a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089e:	f000 f907 	bl	8010ab0 <_lseek_r>
 80108a2:	1c43      	adds	r3, r0, #1
 80108a4:	89a3      	ldrh	r3, [r4, #12]
 80108a6:	bf15      	itete	ne
 80108a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80108aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80108ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80108b2:	81a3      	strheq	r3, [r4, #12]
 80108b4:	bf18      	it	ne
 80108b6:	81a3      	strhne	r3, [r4, #12]
 80108b8:	bd10      	pop	{r4, pc}

080108ba <__sclose>:
 80108ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108be:	f000 b8e7 	b.w	8010a90 <_close_r>

080108c2 <__swbuf_r>:
 80108c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c4:	460e      	mov	r6, r1
 80108c6:	4614      	mov	r4, r2
 80108c8:	4605      	mov	r5, r0
 80108ca:	b118      	cbz	r0, 80108d4 <__swbuf_r+0x12>
 80108cc:	6a03      	ldr	r3, [r0, #32]
 80108ce:	b90b      	cbnz	r3, 80108d4 <__swbuf_r+0x12>
 80108d0:	f7ff ff06 	bl	80106e0 <__sinit>
 80108d4:	69a3      	ldr	r3, [r4, #24]
 80108d6:	60a3      	str	r3, [r4, #8]
 80108d8:	89a3      	ldrh	r3, [r4, #12]
 80108da:	071a      	lsls	r2, r3, #28
 80108dc:	d501      	bpl.n	80108e2 <__swbuf_r+0x20>
 80108de:	6923      	ldr	r3, [r4, #16]
 80108e0:	b943      	cbnz	r3, 80108f4 <__swbuf_r+0x32>
 80108e2:	4621      	mov	r1, r4
 80108e4:	4628      	mov	r0, r5
 80108e6:	f000 f82b 	bl	8010940 <__swsetup_r>
 80108ea:	b118      	cbz	r0, 80108f4 <__swbuf_r+0x32>
 80108ec:	f04f 37ff 	mov.w	r7, #4294967295
 80108f0:	4638      	mov	r0, r7
 80108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	6922      	ldr	r2, [r4, #16]
 80108f8:	1a98      	subs	r0, r3, r2
 80108fa:	6963      	ldr	r3, [r4, #20]
 80108fc:	b2f6      	uxtb	r6, r6
 80108fe:	4283      	cmp	r3, r0
 8010900:	4637      	mov	r7, r6
 8010902:	dc05      	bgt.n	8010910 <__swbuf_r+0x4e>
 8010904:	4621      	mov	r1, r4
 8010906:	4628      	mov	r0, r5
 8010908:	f000 fd06 	bl	8011318 <_fflush_r>
 801090c:	2800      	cmp	r0, #0
 801090e:	d1ed      	bne.n	80108ec <__swbuf_r+0x2a>
 8010910:	68a3      	ldr	r3, [r4, #8]
 8010912:	3b01      	subs	r3, #1
 8010914:	60a3      	str	r3, [r4, #8]
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	1c5a      	adds	r2, r3, #1
 801091a:	6022      	str	r2, [r4, #0]
 801091c:	701e      	strb	r6, [r3, #0]
 801091e:	6962      	ldr	r2, [r4, #20]
 8010920:	1c43      	adds	r3, r0, #1
 8010922:	429a      	cmp	r2, r3
 8010924:	d004      	beq.n	8010930 <__swbuf_r+0x6e>
 8010926:	89a3      	ldrh	r3, [r4, #12]
 8010928:	07db      	lsls	r3, r3, #31
 801092a:	d5e1      	bpl.n	80108f0 <__swbuf_r+0x2e>
 801092c:	2e0a      	cmp	r6, #10
 801092e:	d1df      	bne.n	80108f0 <__swbuf_r+0x2e>
 8010930:	4621      	mov	r1, r4
 8010932:	4628      	mov	r0, r5
 8010934:	f000 fcf0 	bl	8011318 <_fflush_r>
 8010938:	2800      	cmp	r0, #0
 801093a:	d0d9      	beq.n	80108f0 <__swbuf_r+0x2e>
 801093c:	e7d6      	b.n	80108ec <__swbuf_r+0x2a>
	...

08010940 <__swsetup_r>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	4b29      	ldr	r3, [pc, #164]	@ (80109e8 <__swsetup_r+0xa8>)
 8010944:	4605      	mov	r5, r0
 8010946:	6818      	ldr	r0, [r3, #0]
 8010948:	460c      	mov	r4, r1
 801094a:	b118      	cbz	r0, 8010954 <__swsetup_r+0x14>
 801094c:	6a03      	ldr	r3, [r0, #32]
 801094e:	b90b      	cbnz	r3, 8010954 <__swsetup_r+0x14>
 8010950:	f7ff fec6 	bl	80106e0 <__sinit>
 8010954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010958:	0719      	lsls	r1, r3, #28
 801095a:	d422      	bmi.n	80109a2 <__swsetup_r+0x62>
 801095c:	06da      	lsls	r2, r3, #27
 801095e:	d407      	bmi.n	8010970 <__swsetup_r+0x30>
 8010960:	2209      	movs	r2, #9
 8010962:	602a      	str	r2, [r5, #0]
 8010964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	f04f 30ff 	mov.w	r0, #4294967295
 801096e:	e033      	b.n	80109d8 <__swsetup_r+0x98>
 8010970:	0758      	lsls	r0, r3, #29
 8010972:	d512      	bpl.n	801099a <__swsetup_r+0x5a>
 8010974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010976:	b141      	cbz	r1, 801098a <__swsetup_r+0x4a>
 8010978:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801097c:	4299      	cmp	r1, r3
 801097e:	d002      	beq.n	8010986 <__swsetup_r+0x46>
 8010980:	4628      	mov	r0, r5
 8010982:	f000 f92b 	bl	8010bdc <_free_r>
 8010986:	2300      	movs	r3, #0
 8010988:	6363      	str	r3, [r4, #52]	@ 0x34
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010990:	81a3      	strh	r3, [r4, #12]
 8010992:	2300      	movs	r3, #0
 8010994:	6063      	str	r3, [r4, #4]
 8010996:	6923      	ldr	r3, [r4, #16]
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	89a3      	ldrh	r3, [r4, #12]
 801099c:	f043 0308 	orr.w	r3, r3, #8
 80109a0:	81a3      	strh	r3, [r4, #12]
 80109a2:	6923      	ldr	r3, [r4, #16]
 80109a4:	b94b      	cbnz	r3, 80109ba <__swsetup_r+0x7a>
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80109ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109b0:	d003      	beq.n	80109ba <__swsetup_r+0x7a>
 80109b2:	4621      	mov	r1, r4
 80109b4:	4628      	mov	r0, r5
 80109b6:	f000 fcfd 	bl	80113b4 <__smakebuf_r>
 80109ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109be:	f013 0201 	ands.w	r2, r3, #1
 80109c2:	d00a      	beq.n	80109da <__swsetup_r+0x9a>
 80109c4:	2200      	movs	r2, #0
 80109c6:	60a2      	str	r2, [r4, #8]
 80109c8:	6962      	ldr	r2, [r4, #20]
 80109ca:	4252      	negs	r2, r2
 80109cc:	61a2      	str	r2, [r4, #24]
 80109ce:	6922      	ldr	r2, [r4, #16]
 80109d0:	b942      	cbnz	r2, 80109e4 <__swsetup_r+0xa4>
 80109d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80109d6:	d1c5      	bne.n	8010964 <__swsetup_r+0x24>
 80109d8:	bd38      	pop	{r3, r4, r5, pc}
 80109da:	0799      	lsls	r1, r3, #30
 80109dc:	bf58      	it	pl
 80109de:	6962      	ldrpl	r2, [r4, #20]
 80109e0:	60a2      	str	r2, [r4, #8]
 80109e2:	e7f4      	b.n	80109ce <__swsetup_r+0x8e>
 80109e4:	2000      	movs	r0, #0
 80109e6:	e7f7      	b.n	80109d8 <__swsetup_r+0x98>
 80109e8:	2400006c 	.word	0x2400006c

080109ec <memmove>:
 80109ec:	4288      	cmp	r0, r1
 80109ee:	b510      	push	{r4, lr}
 80109f0:	eb01 0402 	add.w	r4, r1, r2
 80109f4:	d902      	bls.n	80109fc <memmove+0x10>
 80109f6:	4284      	cmp	r4, r0
 80109f8:	4623      	mov	r3, r4
 80109fa:	d807      	bhi.n	8010a0c <memmove+0x20>
 80109fc:	1e43      	subs	r3, r0, #1
 80109fe:	42a1      	cmp	r1, r4
 8010a00:	d008      	beq.n	8010a14 <memmove+0x28>
 8010a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a0a:	e7f8      	b.n	80109fe <memmove+0x12>
 8010a0c:	4402      	add	r2, r0
 8010a0e:	4601      	mov	r1, r0
 8010a10:	428a      	cmp	r2, r1
 8010a12:	d100      	bne.n	8010a16 <memmove+0x2a>
 8010a14:	bd10      	pop	{r4, pc}
 8010a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a1e:	e7f7      	b.n	8010a10 <memmove+0x24>

08010a20 <memset>:
 8010a20:	4402      	add	r2, r0
 8010a22:	4603      	mov	r3, r0
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d100      	bne.n	8010a2a <memset+0xa>
 8010a28:	4770      	bx	lr
 8010a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a2e:	e7f9      	b.n	8010a24 <memset+0x4>

08010a30 <_raise_r>:
 8010a30:	291f      	cmp	r1, #31
 8010a32:	b538      	push	{r3, r4, r5, lr}
 8010a34:	4605      	mov	r5, r0
 8010a36:	460c      	mov	r4, r1
 8010a38:	d904      	bls.n	8010a44 <_raise_r+0x14>
 8010a3a:	2316      	movs	r3, #22
 8010a3c:	6003      	str	r3, [r0, #0]
 8010a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a46:	b112      	cbz	r2, 8010a4e <_raise_r+0x1e>
 8010a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a4c:	b94b      	cbnz	r3, 8010a62 <_raise_r+0x32>
 8010a4e:	4628      	mov	r0, r5
 8010a50:	f000 f864 	bl	8010b1c <_getpid_r>
 8010a54:	4622      	mov	r2, r4
 8010a56:	4601      	mov	r1, r0
 8010a58:	4628      	mov	r0, r5
 8010a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a5e:	f000 b84b 	b.w	8010af8 <_kill_r>
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d00a      	beq.n	8010a7c <_raise_r+0x4c>
 8010a66:	1c59      	adds	r1, r3, #1
 8010a68:	d103      	bne.n	8010a72 <_raise_r+0x42>
 8010a6a:	2316      	movs	r3, #22
 8010a6c:	6003      	str	r3, [r0, #0]
 8010a6e:	2001      	movs	r0, #1
 8010a70:	e7e7      	b.n	8010a42 <_raise_r+0x12>
 8010a72:	2100      	movs	r1, #0
 8010a74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a78:	4620      	mov	r0, r4
 8010a7a:	4798      	blx	r3
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	e7e0      	b.n	8010a42 <_raise_r+0x12>

08010a80 <raise>:
 8010a80:	4b02      	ldr	r3, [pc, #8]	@ (8010a8c <raise+0xc>)
 8010a82:	4601      	mov	r1, r0
 8010a84:	6818      	ldr	r0, [r3, #0]
 8010a86:	f7ff bfd3 	b.w	8010a30 <_raise_r>
 8010a8a:	bf00      	nop
 8010a8c:	2400006c 	.word	0x2400006c

08010a90 <_close_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4d06      	ldr	r5, [pc, #24]	@ (8010aac <_close_r+0x1c>)
 8010a94:	2300      	movs	r3, #0
 8010a96:	4604      	mov	r4, r0
 8010a98:	4608      	mov	r0, r1
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	f7f2 fe24 	bl	80036e8 <_close>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d102      	bne.n	8010aaa <_close_r+0x1a>
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	b103      	cbz	r3, 8010aaa <_close_r+0x1a>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	24000fb8 	.word	0x24000fb8

08010ab0 <_lseek_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	4d07      	ldr	r5, [pc, #28]	@ (8010ad0 <_lseek_r+0x20>)
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	4608      	mov	r0, r1
 8010ab8:	4611      	mov	r1, r2
 8010aba:	2200      	movs	r2, #0
 8010abc:	602a      	str	r2, [r5, #0]
 8010abe:	461a      	mov	r2, r3
 8010ac0:	f7f2 fe39 	bl	8003736 <_lseek>
 8010ac4:	1c43      	adds	r3, r0, #1
 8010ac6:	d102      	bne.n	8010ace <_lseek_r+0x1e>
 8010ac8:	682b      	ldr	r3, [r5, #0]
 8010aca:	b103      	cbz	r3, 8010ace <_lseek_r+0x1e>
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	bd38      	pop	{r3, r4, r5, pc}
 8010ad0:	24000fb8 	.word	0x24000fb8

08010ad4 <_read_r>:
 8010ad4:	b538      	push	{r3, r4, r5, lr}
 8010ad6:	4d07      	ldr	r5, [pc, #28]	@ (8010af4 <_read_r+0x20>)
 8010ad8:	4604      	mov	r4, r0
 8010ada:	4608      	mov	r0, r1
 8010adc:	4611      	mov	r1, r2
 8010ade:	2200      	movs	r2, #0
 8010ae0:	602a      	str	r2, [r5, #0]
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	f7f2 fdc7 	bl	8003676 <_read>
 8010ae8:	1c43      	adds	r3, r0, #1
 8010aea:	d102      	bne.n	8010af2 <_read_r+0x1e>
 8010aec:	682b      	ldr	r3, [r5, #0]
 8010aee:	b103      	cbz	r3, 8010af2 <_read_r+0x1e>
 8010af0:	6023      	str	r3, [r4, #0]
 8010af2:	bd38      	pop	{r3, r4, r5, pc}
 8010af4:	24000fb8 	.word	0x24000fb8

08010af8 <_kill_r>:
 8010af8:	b538      	push	{r3, r4, r5, lr}
 8010afa:	4d07      	ldr	r5, [pc, #28]	@ (8010b18 <_kill_r+0x20>)
 8010afc:	2300      	movs	r3, #0
 8010afe:	4604      	mov	r4, r0
 8010b00:	4608      	mov	r0, r1
 8010b02:	4611      	mov	r1, r2
 8010b04:	602b      	str	r3, [r5, #0]
 8010b06:	f7f2 fd9b 	bl	8003640 <_kill>
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	d102      	bne.n	8010b14 <_kill_r+0x1c>
 8010b0e:	682b      	ldr	r3, [r5, #0]
 8010b10:	b103      	cbz	r3, 8010b14 <_kill_r+0x1c>
 8010b12:	6023      	str	r3, [r4, #0]
 8010b14:	bd38      	pop	{r3, r4, r5, pc}
 8010b16:	bf00      	nop
 8010b18:	24000fb8 	.word	0x24000fb8

08010b1c <_getpid_r>:
 8010b1c:	f7f2 bd88 	b.w	8003630 <_getpid>

08010b20 <_sbrk_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d06      	ldr	r5, [pc, #24]	@ (8010b3c <_sbrk_r+0x1c>)
 8010b24:	2300      	movs	r3, #0
 8010b26:	4604      	mov	r4, r0
 8010b28:	4608      	mov	r0, r1
 8010b2a:	602b      	str	r3, [r5, #0]
 8010b2c:	f7f2 fe10 	bl	8003750 <_sbrk>
 8010b30:	1c43      	adds	r3, r0, #1
 8010b32:	d102      	bne.n	8010b3a <_sbrk_r+0x1a>
 8010b34:	682b      	ldr	r3, [r5, #0]
 8010b36:	b103      	cbz	r3, 8010b3a <_sbrk_r+0x1a>
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	24000fb8 	.word	0x24000fb8

08010b40 <_write_r>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	4d07      	ldr	r5, [pc, #28]	@ (8010b60 <_write_r+0x20>)
 8010b44:	4604      	mov	r4, r0
 8010b46:	4608      	mov	r0, r1
 8010b48:	4611      	mov	r1, r2
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	602a      	str	r2, [r5, #0]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	f7f2 fdae 	bl	80036b0 <_write>
 8010b54:	1c43      	adds	r3, r0, #1
 8010b56:	d102      	bne.n	8010b5e <_write_r+0x1e>
 8010b58:	682b      	ldr	r3, [r5, #0]
 8010b5a:	b103      	cbz	r3, 8010b5e <_write_r+0x1e>
 8010b5c:	6023      	str	r3, [r4, #0]
 8010b5e:	bd38      	pop	{r3, r4, r5, pc}
 8010b60:	24000fb8 	.word	0x24000fb8

08010b64 <__errno>:
 8010b64:	4b01      	ldr	r3, [pc, #4]	@ (8010b6c <__errno+0x8>)
 8010b66:	6818      	ldr	r0, [r3, #0]
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	2400006c 	.word	0x2400006c

08010b70 <__libc_init_array>:
 8010b70:	b570      	push	{r4, r5, r6, lr}
 8010b72:	4d0d      	ldr	r5, [pc, #52]	@ (8010ba8 <__libc_init_array+0x38>)
 8010b74:	4c0d      	ldr	r4, [pc, #52]	@ (8010bac <__libc_init_array+0x3c>)
 8010b76:	1b64      	subs	r4, r4, r5
 8010b78:	10a4      	asrs	r4, r4, #2
 8010b7a:	2600      	movs	r6, #0
 8010b7c:	42a6      	cmp	r6, r4
 8010b7e:	d109      	bne.n	8010b94 <__libc_init_array+0x24>
 8010b80:	4d0b      	ldr	r5, [pc, #44]	@ (8010bb0 <__libc_init_array+0x40>)
 8010b82:	4c0c      	ldr	r4, [pc, #48]	@ (8010bb4 <__libc_init_array+0x44>)
 8010b84:	f000 fca8 	bl	80114d8 <_init>
 8010b88:	1b64      	subs	r4, r4, r5
 8010b8a:	10a4      	asrs	r4, r4, #2
 8010b8c:	2600      	movs	r6, #0
 8010b8e:	42a6      	cmp	r6, r4
 8010b90:	d105      	bne.n	8010b9e <__libc_init_array+0x2e>
 8010b92:	bd70      	pop	{r4, r5, r6, pc}
 8010b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b98:	4798      	blx	r3
 8010b9a:	3601      	adds	r6, #1
 8010b9c:	e7ee      	b.n	8010b7c <__libc_init_array+0xc>
 8010b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ba2:	4798      	blx	r3
 8010ba4:	3601      	adds	r6, #1
 8010ba6:	e7f2      	b.n	8010b8e <__libc_init_array+0x1e>
 8010ba8:	08011a1c 	.word	0x08011a1c
 8010bac:	08011a1c 	.word	0x08011a1c
 8010bb0:	08011a1c 	.word	0x08011a1c
 8010bb4:	08011a24 	.word	0x08011a24

08010bb8 <__retarget_lock_init_recursive>:
 8010bb8:	4770      	bx	lr

08010bba <__retarget_lock_acquire_recursive>:
 8010bba:	4770      	bx	lr

08010bbc <__retarget_lock_release_recursive>:
 8010bbc:	4770      	bx	lr

08010bbe <memcpy>:
 8010bbe:	440a      	add	r2, r1
 8010bc0:	4291      	cmp	r1, r2
 8010bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010bc6:	d100      	bne.n	8010bca <memcpy+0xc>
 8010bc8:	4770      	bx	lr
 8010bca:	b510      	push	{r4, lr}
 8010bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bd4:	4291      	cmp	r1, r2
 8010bd6:	d1f9      	bne.n	8010bcc <memcpy+0xe>
 8010bd8:	bd10      	pop	{r4, pc}
	...

08010bdc <_free_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4605      	mov	r5, r0
 8010be0:	2900      	cmp	r1, #0
 8010be2:	d041      	beq.n	8010c68 <_free_r+0x8c>
 8010be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010be8:	1f0c      	subs	r4, r1, #4
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bfb8      	it	lt
 8010bee:	18e4      	addlt	r4, r4, r3
 8010bf0:	f7ff fcde 	bl	80105b0 <__malloc_lock>
 8010bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c6c <_free_r+0x90>)
 8010bf6:	6813      	ldr	r3, [r2, #0]
 8010bf8:	b933      	cbnz	r3, 8010c08 <_free_r+0x2c>
 8010bfa:	6063      	str	r3, [r4, #4]
 8010bfc:	6014      	str	r4, [r2, #0]
 8010bfe:	4628      	mov	r0, r5
 8010c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c04:	f7ff bcda 	b.w	80105bc <__malloc_unlock>
 8010c08:	42a3      	cmp	r3, r4
 8010c0a:	d908      	bls.n	8010c1e <_free_r+0x42>
 8010c0c:	6820      	ldr	r0, [r4, #0]
 8010c0e:	1821      	adds	r1, r4, r0
 8010c10:	428b      	cmp	r3, r1
 8010c12:	bf01      	itttt	eq
 8010c14:	6819      	ldreq	r1, [r3, #0]
 8010c16:	685b      	ldreq	r3, [r3, #4]
 8010c18:	1809      	addeq	r1, r1, r0
 8010c1a:	6021      	streq	r1, [r4, #0]
 8010c1c:	e7ed      	b.n	8010bfa <_free_r+0x1e>
 8010c1e:	461a      	mov	r2, r3
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	b10b      	cbz	r3, 8010c28 <_free_r+0x4c>
 8010c24:	42a3      	cmp	r3, r4
 8010c26:	d9fa      	bls.n	8010c1e <_free_r+0x42>
 8010c28:	6811      	ldr	r1, [r2, #0]
 8010c2a:	1850      	adds	r0, r2, r1
 8010c2c:	42a0      	cmp	r0, r4
 8010c2e:	d10b      	bne.n	8010c48 <_free_r+0x6c>
 8010c30:	6820      	ldr	r0, [r4, #0]
 8010c32:	4401      	add	r1, r0
 8010c34:	1850      	adds	r0, r2, r1
 8010c36:	4283      	cmp	r3, r0
 8010c38:	6011      	str	r1, [r2, #0]
 8010c3a:	d1e0      	bne.n	8010bfe <_free_r+0x22>
 8010c3c:	6818      	ldr	r0, [r3, #0]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	6053      	str	r3, [r2, #4]
 8010c42:	4408      	add	r0, r1
 8010c44:	6010      	str	r0, [r2, #0]
 8010c46:	e7da      	b.n	8010bfe <_free_r+0x22>
 8010c48:	d902      	bls.n	8010c50 <_free_r+0x74>
 8010c4a:	230c      	movs	r3, #12
 8010c4c:	602b      	str	r3, [r5, #0]
 8010c4e:	e7d6      	b.n	8010bfe <_free_r+0x22>
 8010c50:	6820      	ldr	r0, [r4, #0]
 8010c52:	1821      	adds	r1, r4, r0
 8010c54:	428b      	cmp	r3, r1
 8010c56:	bf04      	itt	eq
 8010c58:	6819      	ldreq	r1, [r3, #0]
 8010c5a:	685b      	ldreq	r3, [r3, #4]
 8010c5c:	6063      	str	r3, [r4, #4]
 8010c5e:	bf04      	itt	eq
 8010c60:	1809      	addeq	r1, r1, r0
 8010c62:	6021      	streq	r1, [r4, #0]
 8010c64:	6054      	str	r4, [r2, #4]
 8010c66:	e7ca      	b.n	8010bfe <_free_r+0x22>
 8010c68:	bd38      	pop	{r3, r4, r5, pc}
 8010c6a:	bf00      	nop
 8010c6c:	24000e78 	.word	0x24000e78

08010c70 <__sfputc_r>:
 8010c70:	6893      	ldr	r3, [r2, #8]
 8010c72:	3b01      	subs	r3, #1
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	b410      	push	{r4}
 8010c78:	6093      	str	r3, [r2, #8]
 8010c7a:	da08      	bge.n	8010c8e <__sfputc_r+0x1e>
 8010c7c:	6994      	ldr	r4, [r2, #24]
 8010c7e:	42a3      	cmp	r3, r4
 8010c80:	db01      	blt.n	8010c86 <__sfputc_r+0x16>
 8010c82:	290a      	cmp	r1, #10
 8010c84:	d103      	bne.n	8010c8e <__sfputc_r+0x1e>
 8010c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c8a:	f7ff be1a 	b.w	80108c2 <__swbuf_r>
 8010c8e:	6813      	ldr	r3, [r2, #0]
 8010c90:	1c58      	adds	r0, r3, #1
 8010c92:	6010      	str	r0, [r2, #0]
 8010c94:	7019      	strb	r1, [r3, #0]
 8010c96:	4608      	mov	r0, r1
 8010c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <__sfputs_r>:
 8010c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	460f      	mov	r7, r1
 8010ca4:	4614      	mov	r4, r2
 8010ca6:	18d5      	adds	r5, r2, r3
 8010ca8:	42ac      	cmp	r4, r5
 8010caa:	d101      	bne.n	8010cb0 <__sfputs_r+0x12>
 8010cac:	2000      	movs	r0, #0
 8010cae:	e007      	b.n	8010cc0 <__sfputs_r+0x22>
 8010cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb4:	463a      	mov	r2, r7
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f7ff ffda 	bl	8010c70 <__sfputc_r>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	d1f3      	bne.n	8010ca8 <__sfputs_r+0xa>
 8010cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cc4 <_vfiprintf_r>:
 8010cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc8:	460d      	mov	r5, r1
 8010cca:	b09d      	sub	sp, #116	@ 0x74
 8010ccc:	4614      	mov	r4, r2
 8010cce:	4698      	mov	r8, r3
 8010cd0:	4606      	mov	r6, r0
 8010cd2:	b118      	cbz	r0, 8010cdc <_vfiprintf_r+0x18>
 8010cd4:	6a03      	ldr	r3, [r0, #32]
 8010cd6:	b90b      	cbnz	r3, 8010cdc <_vfiprintf_r+0x18>
 8010cd8:	f7ff fd02 	bl	80106e0 <__sinit>
 8010cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cde:	07d9      	lsls	r1, r3, #31
 8010ce0:	d405      	bmi.n	8010cee <_vfiprintf_r+0x2a>
 8010ce2:	89ab      	ldrh	r3, [r5, #12]
 8010ce4:	059a      	lsls	r2, r3, #22
 8010ce6:	d402      	bmi.n	8010cee <_vfiprintf_r+0x2a>
 8010ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cea:	f7ff ff66 	bl	8010bba <__retarget_lock_acquire_recursive>
 8010cee:	89ab      	ldrh	r3, [r5, #12]
 8010cf0:	071b      	lsls	r3, r3, #28
 8010cf2:	d501      	bpl.n	8010cf8 <_vfiprintf_r+0x34>
 8010cf4:	692b      	ldr	r3, [r5, #16]
 8010cf6:	b99b      	cbnz	r3, 8010d20 <_vfiprintf_r+0x5c>
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	f7ff fe20 	bl	8010940 <__swsetup_r>
 8010d00:	b170      	cbz	r0, 8010d20 <_vfiprintf_r+0x5c>
 8010d02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d04:	07dc      	lsls	r4, r3, #31
 8010d06:	d504      	bpl.n	8010d12 <_vfiprintf_r+0x4e>
 8010d08:	f04f 30ff 	mov.w	r0, #4294967295
 8010d0c:	b01d      	add	sp, #116	@ 0x74
 8010d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d12:	89ab      	ldrh	r3, [r5, #12]
 8010d14:	0598      	lsls	r0, r3, #22
 8010d16:	d4f7      	bmi.n	8010d08 <_vfiprintf_r+0x44>
 8010d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d1a:	f7ff ff4f 	bl	8010bbc <__retarget_lock_release_recursive>
 8010d1e:	e7f3      	b.n	8010d08 <_vfiprintf_r+0x44>
 8010d20:	2300      	movs	r3, #0
 8010d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d24:	2320      	movs	r3, #32
 8010d26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d2e:	2330      	movs	r3, #48	@ 0x30
 8010d30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ee0 <_vfiprintf_r+0x21c>
 8010d34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d38:	f04f 0901 	mov.w	r9, #1
 8010d3c:	4623      	mov	r3, r4
 8010d3e:	469a      	mov	sl, r3
 8010d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d44:	b10a      	cbz	r2, 8010d4a <_vfiprintf_r+0x86>
 8010d46:	2a25      	cmp	r2, #37	@ 0x25
 8010d48:	d1f9      	bne.n	8010d3e <_vfiprintf_r+0x7a>
 8010d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d4e:	d00b      	beq.n	8010d68 <_vfiprintf_r+0xa4>
 8010d50:	465b      	mov	r3, fp
 8010d52:	4622      	mov	r2, r4
 8010d54:	4629      	mov	r1, r5
 8010d56:	4630      	mov	r0, r6
 8010d58:	f7ff ffa1 	bl	8010c9e <__sfputs_r>
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	f000 80a7 	beq.w	8010eb0 <_vfiprintf_r+0x1ec>
 8010d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d64:	445a      	add	r2, fp
 8010d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d68:	f89a 3000 	ldrb.w	r3, [sl]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f000 809f 	beq.w	8010eb0 <_vfiprintf_r+0x1ec>
 8010d72:	2300      	movs	r3, #0
 8010d74:	f04f 32ff 	mov.w	r2, #4294967295
 8010d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d7c:	f10a 0a01 	add.w	sl, sl, #1
 8010d80:	9304      	str	r3, [sp, #16]
 8010d82:	9307      	str	r3, [sp, #28]
 8010d84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d88:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d8a:	4654      	mov	r4, sl
 8010d8c:	2205      	movs	r2, #5
 8010d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d92:	4853      	ldr	r0, [pc, #332]	@ (8010ee0 <_vfiprintf_r+0x21c>)
 8010d94:	f7ef faa4 	bl	80002e0 <memchr>
 8010d98:	9a04      	ldr	r2, [sp, #16]
 8010d9a:	b9d8      	cbnz	r0, 8010dd4 <_vfiprintf_r+0x110>
 8010d9c:	06d1      	lsls	r1, r2, #27
 8010d9e:	bf44      	itt	mi
 8010da0:	2320      	movmi	r3, #32
 8010da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010da6:	0713      	lsls	r3, r2, #28
 8010da8:	bf44      	itt	mi
 8010daa:	232b      	movmi	r3, #43	@ 0x2b
 8010dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010db0:	f89a 3000 	ldrb.w	r3, [sl]
 8010db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010db6:	d015      	beq.n	8010de4 <_vfiprintf_r+0x120>
 8010db8:	9a07      	ldr	r2, [sp, #28]
 8010dba:	4654      	mov	r4, sl
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	f04f 0c0a 	mov.w	ip, #10
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dc8:	3b30      	subs	r3, #48	@ 0x30
 8010dca:	2b09      	cmp	r3, #9
 8010dcc:	d94b      	bls.n	8010e66 <_vfiprintf_r+0x1a2>
 8010dce:	b1b0      	cbz	r0, 8010dfe <_vfiprintf_r+0x13a>
 8010dd0:	9207      	str	r2, [sp, #28]
 8010dd2:	e014      	b.n	8010dfe <_vfiprintf_r+0x13a>
 8010dd4:	eba0 0308 	sub.w	r3, r0, r8
 8010dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	9304      	str	r3, [sp, #16]
 8010de0:	46a2      	mov	sl, r4
 8010de2:	e7d2      	b.n	8010d8a <_vfiprintf_r+0xc6>
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	1d19      	adds	r1, r3, #4
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	9103      	str	r1, [sp, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bfbb      	ittet	lt
 8010df0:	425b      	neglt	r3, r3
 8010df2:	f042 0202 	orrlt.w	r2, r2, #2
 8010df6:	9307      	strge	r3, [sp, #28]
 8010df8:	9307      	strlt	r3, [sp, #28]
 8010dfa:	bfb8      	it	lt
 8010dfc:	9204      	strlt	r2, [sp, #16]
 8010dfe:	7823      	ldrb	r3, [r4, #0]
 8010e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e02:	d10a      	bne.n	8010e1a <_vfiprintf_r+0x156>
 8010e04:	7863      	ldrb	r3, [r4, #1]
 8010e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e08:	d132      	bne.n	8010e70 <_vfiprintf_r+0x1ac>
 8010e0a:	9b03      	ldr	r3, [sp, #12]
 8010e0c:	1d1a      	adds	r2, r3, #4
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	9203      	str	r2, [sp, #12]
 8010e12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e16:	3402      	adds	r4, #2
 8010e18:	9305      	str	r3, [sp, #20]
 8010e1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ef0 <_vfiprintf_r+0x22c>
 8010e1e:	7821      	ldrb	r1, [r4, #0]
 8010e20:	2203      	movs	r2, #3
 8010e22:	4650      	mov	r0, sl
 8010e24:	f7ef fa5c 	bl	80002e0 <memchr>
 8010e28:	b138      	cbz	r0, 8010e3a <_vfiprintf_r+0x176>
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	eba0 000a 	sub.w	r0, r0, sl
 8010e30:	2240      	movs	r2, #64	@ 0x40
 8010e32:	4082      	lsls	r2, r0
 8010e34:	4313      	orrs	r3, r2
 8010e36:	3401      	adds	r4, #1
 8010e38:	9304      	str	r3, [sp, #16]
 8010e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e3e:	4829      	ldr	r0, [pc, #164]	@ (8010ee4 <_vfiprintf_r+0x220>)
 8010e40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e44:	2206      	movs	r2, #6
 8010e46:	f7ef fa4b 	bl	80002e0 <memchr>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d03f      	beq.n	8010ece <_vfiprintf_r+0x20a>
 8010e4e:	4b26      	ldr	r3, [pc, #152]	@ (8010ee8 <_vfiprintf_r+0x224>)
 8010e50:	bb1b      	cbnz	r3, 8010e9a <_vfiprintf_r+0x1d6>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	3307      	adds	r3, #7
 8010e56:	f023 0307 	bic.w	r3, r3, #7
 8010e5a:	3308      	adds	r3, #8
 8010e5c:	9303      	str	r3, [sp, #12]
 8010e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e60:	443b      	add	r3, r7
 8010e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e64:	e76a      	b.n	8010d3c <_vfiprintf_r+0x78>
 8010e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e6a:	460c      	mov	r4, r1
 8010e6c:	2001      	movs	r0, #1
 8010e6e:	e7a8      	b.n	8010dc2 <_vfiprintf_r+0xfe>
 8010e70:	2300      	movs	r3, #0
 8010e72:	3401      	adds	r4, #1
 8010e74:	9305      	str	r3, [sp, #20]
 8010e76:	4619      	mov	r1, r3
 8010e78:	f04f 0c0a 	mov.w	ip, #10
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e82:	3a30      	subs	r2, #48	@ 0x30
 8010e84:	2a09      	cmp	r2, #9
 8010e86:	d903      	bls.n	8010e90 <_vfiprintf_r+0x1cc>
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d0c6      	beq.n	8010e1a <_vfiprintf_r+0x156>
 8010e8c:	9105      	str	r1, [sp, #20]
 8010e8e:	e7c4      	b.n	8010e1a <_vfiprintf_r+0x156>
 8010e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e94:	4604      	mov	r4, r0
 8010e96:	2301      	movs	r3, #1
 8010e98:	e7f0      	b.n	8010e7c <_vfiprintf_r+0x1b8>
 8010e9a:	ab03      	add	r3, sp, #12
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4b12      	ldr	r3, [pc, #72]	@ (8010eec <_vfiprintf_r+0x228>)
 8010ea2:	a904      	add	r1, sp, #16
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f3af 8000 	nop.w
 8010eaa:	4607      	mov	r7, r0
 8010eac:	1c78      	adds	r0, r7, #1
 8010eae:	d1d6      	bne.n	8010e5e <_vfiprintf_r+0x19a>
 8010eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010eb2:	07d9      	lsls	r1, r3, #31
 8010eb4:	d405      	bmi.n	8010ec2 <_vfiprintf_r+0x1fe>
 8010eb6:	89ab      	ldrh	r3, [r5, #12]
 8010eb8:	059a      	lsls	r2, r3, #22
 8010eba:	d402      	bmi.n	8010ec2 <_vfiprintf_r+0x1fe>
 8010ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ebe:	f7ff fe7d 	bl	8010bbc <__retarget_lock_release_recursive>
 8010ec2:	89ab      	ldrh	r3, [r5, #12]
 8010ec4:	065b      	lsls	r3, r3, #25
 8010ec6:	f53f af1f 	bmi.w	8010d08 <_vfiprintf_r+0x44>
 8010eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ecc:	e71e      	b.n	8010d0c <_vfiprintf_r+0x48>
 8010ece:	ab03      	add	r3, sp, #12
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	462a      	mov	r2, r5
 8010ed4:	4b05      	ldr	r3, [pc, #20]	@ (8010eec <_vfiprintf_r+0x228>)
 8010ed6:	a904      	add	r1, sp, #16
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f000 f879 	bl	8010fd0 <_printf_i>
 8010ede:	e7e4      	b.n	8010eaa <_vfiprintf_r+0x1e6>
 8010ee0:	080119e1 	.word	0x080119e1
 8010ee4:	080119eb 	.word	0x080119eb
 8010ee8:	00000000 	.word	0x00000000
 8010eec:	08010c9f 	.word	0x08010c9f
 8010ef0:	080119e7 	.word	0x080119e7

08010ef4 <_printf_common>:
 8010ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef8:	4616      	mov	r6, r2
 8010efa:	4698      	mov	r8, r3
 8010efc:	688a      	ldr	r2, [r1, #8]
 8010efe:	690b      	ldr	r3, [r1, #16]
 8010f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f04:	4293      	cmp	r3, r2
 8010f06:	bfb8      	it	lt
 8010f08:	4613      	movlt	r3, r2
 8010f0a:	6033      	str	r3, [r6, #0]
 8010f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f10:	4607      	mov	r7, r0
 8010f12:	460c      	mov	r4, r1
 8010f14:	b10a      	cbz	r2, 8010f1a <_printf_common+0x26>
 8010f16:	3301      	adds	r3, #1
 8010f18:	6033      	str	r3, [r6, #0]
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	0699      	lsls	r1, r3, #26
 8010f1e:	bf42      	ittt	mi
 8010f20:	6833      	ldrmi	r3, [r6, #0]
 8010f22:	3302      	addmi	r3, #2
 8010f24:	6033      	strmi	r3, [r6, #0]
 8010f26:	6825      	ldr	r5, [r4, #0]
 8010f28:	f015 0506 	ands.w	r5, r5, #6
 8010f2c:	d106      	bne.n	8010f3c <_printf_common+0x48>
 8010f2e:	f104 0a19 	add.w	sl, r4, #25
 8010f32:	68e3      	ldr	r3, [r4, #12]
 8010f34:	6832      	ldr	r2, [r6, #0]
 8010f36:	1a9b      	subs	r3, r3, r2
 8010f38:	42ab      	cmp	r3, r5
 8010f3a:	dc26      	bgt.n	8010f8a <_printf_common+0x96>
 8010f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f40:	6822      	ldr	r2, [r4, #0]
 8010f42:	3b00      	subs	r3, #0
 8010f44:	bf18      	it	ne
 8010f46:	2301      	movne	r3, #1
 8010f48:	0692      	lsls	r2, r2, #26
 8010f4a:	d42b      	bmi.n	8010fa4 <_printf_common+0xb0>
 8010f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f50:	4641      	mov	r1, r8
 8010f52:	4638      	mov	r0, r7
 8010f54:	47c8      	blx	r9
 8010f56:	3001      	adds	r0, #1
 8010f58:	d01e      	beq.n	8010f98 <_printf_common+0xa4>
 8010f5a:	6823      	ldr	r3, [r4, #0]
 8010f5c:	6922      	ldr	r2, [r4, #16]
 8010f5e:	f003 0306 	and.w	r3, r3, #6
 8010f62:	2b04      	cmp	r3, #4
 8010f64:	bf02      	ittt	eq
 8010f66:	68e5      	ldreq	r5, [r4, #12]
 8010f68:	6833      	ldreq	r3, [r6, #0]
 8010f6a:	1aed      	subeq	r5, r5, r3
 8010f6c:	68a3      	ldr	r3, [r4, #8]
 8010f6e:	bf0c      	ite	eq
 8010f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f74:	2500      	movne	r5, #0
 8010f76:	4293      	cmp	r3, r2
 8010f78:	bfc4      	itt	gt
 8010f7a:	1a9b      	subgt	r3, r3, r2
 8010f7c:	18ed      	addgt	r5, r5, r3
 8010f7e:	2600      	movs	r6, #0
 8010f80:	341a      	adds	r4, #26
 8010f82:	42b5      	cmp	r5, r6
 8010f84:	d11a      	bne.n	8010fbc <_printf_common+0xc8>
 8010f86:	2000      	movs	r0, #0
 8010f88:	e008      	b.n	8010f9c <_printf_common+0xa8>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	4652      	mov	r2, sl
 8010f8e:	4641      	mov	r1, r8
 8010f90:	4638      	mov	r0, r7
 8010f92:	47c8      	blx	r9
 8010f94:	3001      	adds	r0, #1
 8010f96:	d103      	bne.n	8010fa0 <_printf_common+0xac>
 8010f98:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa0:	3501      	adds	r5, #1
 8010fa2:	e7c6      	b.n	8010f32 <_printf_common+0x3e>
 8010fa4:	18e1      	adds	r1, r4, r3
 8010fa6:	1c5a      	adds	r2, r3, #1
 8010fa8:	2030      	movs	r0, #48	@ 0x30
 8010faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fae:	4422      	add	r2, r4
 8010fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fb8:	3302      	adds	r3, #2
 8010fba:	e7c7      	b.n	8010f4c <_printf_common+0x58>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	4641      	mov	r1, r8
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	47c8      	blx	r9
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	d0e6      	beq.n	8010f98 <_printf_common+0xa4>
 8010fca:	3601      	adds	r6, #1
 8010fcc:	e7d9      	b.n	8010f82 <_printf_common+0x8e>
	...

08010fd0 <_printf_i>:
 8010fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd4:	7e0f      	ldrb	r7, [r1, #24]
 8010fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fd8:	2f78      	cmp	r7, #120	@ 0x78
 8010fda:	4691      	mov	r9, r2
 8010fdc:	4680      	mov	r8, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	469a      	mov	sl, r3
 8010fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fe6:	d807      	bhi.n	8010ff8 <_printf_i+0x28>
 8010fe8:	2f62      	cmp	r7, #98	@ 0x62
 8010fea:	d80a      	bhi.n	8011002 <_printf_i+0x32>
 8010fec:	2f00      	cmp	r7, #0
 8010fee:	f000 80d2 	beq.w	8011196 <_printf_i+0x1c6>
 8010ff2:	2f58      	cmp	r7, #88	@ 0x58
 8010ff4:	f000 80b9 	beq.w	801116a <_printf_i+0x19a>
 8010ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011000:	e03a      	b.n	8011078 <_printf_i+0xa8>
 8011002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011006:	2b15      	cmp	r3, #21
 8011008:	d8f6      	bhi.n	8010ff8 <_printf_i+0x28>
 801100a:	a101      	add	r1, pc, #4	@ (adr r1, 8011010 <_printf_i+0x40>)
 801100c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011010:	08011069 	.word	0x08011069
 8011014:	0801107d 	.word	0x0801107d
 8011018:	08010ff9 	.word	0x08010ff9
 801101c:	08010ff9 	.word	0x08010ff9
 8011020:	08010ff9 	.word	0x08010ff9
 8011024:	08010ff9 	.word	0x08010ff9
 8011028:	0801107d 	.word	0x0801107d
 801102c:	08010ff9 	.word	0x08010ff9
 8011030:	08010ff9 	.word	0x08010ff9
 8011034:	08010ff9 	.word	0x08010ff9
 8011038:	08010ff9 	.word	0x08010ff9
 801103c:	0801117d 	.word	0x0801117d
 8011040:	080110a7 	.word	0x080110a7
 8011044:	08011137 	.word	0x08011137
 8011048:	08010ff9 	.word	0x08010ff9
 801104c:	08010ff9 	.word	0x08010ff9
 8011050:	0801119f 	.word	0x0801119f
 8011054:	08010ff9 	.word	0x08010ff9
 8011058:	080110a7 	.word	0x080110a7
 801105c:	08010ff9 	.word	0x08010ff9
 8011060:	08010ff9 	.word	0x08010ff9
 8011064:	0801113f 	.word	0x0801113f
 8011068:	6833      	ldr	r3, [r6, #0]
 801106a:	1d1a      	adds	r2, r3, #4
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	6032      	str	r2, [r6, #0]
 8011070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011078:	2301      	movs	r3, #1
 801107a:	e09d      	b.n	80111b8 <_printf_i+0x1e8>
 801107c:	6833      	ldr	r3, [r6, #0]
 801107e:	6820      	ldr	r0, [r4, #0]
 8011080:	1d19      	adds	r1, r3, #4
 8011082:	6031      	str	r1, [r6, #0]
 8011084:	0606      	lsls	r6, r0, #24
 8011086:	d501      	bpl.n	801108c <_printf_i+0xbc>
 8011088:	681d      	ldr	r5, [r3, #0]
 801108a:	e003      	b.n	8011094 <_printf_i+0xc4>
 801108c:	0645      	lsls	r5, r0, #25
 801108e:	d5fb      	bpl.n	8011088 <_printf_i+0xb8>
 8011090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011094:	2d00      	cmp	r5, #0
 8011096:	da03      	bge.n	80110a0 <_printf_i+0xd0>
 8011098:	232d      	movs	r3, #45	@ 0x2d
 801109a:	426d      	negs	r5, r5
 801109c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110a0:	4859      	ldr	r0, [pc, #356]	@ (8011208 <_printf_i+0x238>)
 80110a2:	230a      	movs	r3, #10
 80110a4:	e011      	b.n	80110ca <_printf_i+0xfa>
 80110a6:	6821      	ldr	r1, [r4, #0]
 80110a8:	6833      	ldr	r3, [r6, #0]
 80110aa:	0608      	lsls	r0, r1, #24
 80110ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80110b0:	d402      	bmi.n	80110b8 <_printf_i+0xe8>
 80110b2:	0649      	lsls	r1, r1, #25
 80110b4:	bf48      	it	mi
 80110b6:	b2ad      	uxthmi	r5, r5
 80110b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80110ba:	4853      	ldr	r0, [pc, #332]	@ (8011208 <_printf_i+0x238>)
 80110bc:	6033      	str	r3, [r6, #0]
 80110be:	bf14      	ite	ne
 80110c0:	230a      	movne	r3, #10
 80110c2:	2308      	moveq	r3, #8
 80110c4:	2100      	movs	r1, #0
 80110c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110ca:	6866      	ldr	r6, [r4, #4]
 80110cc:	60a6      	str	r6, [r4, #8]
 80110ce:	2e00      	cmp	r6, #0
 80110d0:	bfa2      	ittt	ge
 80110d2:	6821      	ldrge	r1, [r4, #0]
 80110d4:	f021 0104 	bicge.w	r1, r1, #4
 80110d8:	6021      	strge	r1, [r4, #0]
 80110da:	b90d      	cbnz	r5, 80110e0 <_printf_i+0x110>
 80110dc:	2e00      	cmp	r6, #0
 80110de:	d04b      	beq.n	8011178 <_printf_i+0x1a8>
 80110e0:	4616      	mov	r6, r2
 80110e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80110e6:	fb03 5711 	mls	r7, r3, r1, r5
 80110ea:	5dc7      	ldrb	r7, [r0, r7]
 80110ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110f0:	462f      	mov	r7, r5
 80110f2:	42bb      	cmp	r3, r7
 80110f4:	460d      	mov	r5, r1
 80110f6:	d9f4      	bls.n	80110e2 <_printf_i+0x112>
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d10b      	bne.n	8011114 <_printf_i+0x144>
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	07df      	lsls	r7, r3, #31
 8011100:	d508      	bpl.n	8011114 <_printf_i+0x144>
 8011102:	6923      	ldr	r3, [r4, #16]
 8011104:	6861      	ldr	r1, [r4, #4]
 8011106:	4299      	cmp	r1, r3
 8011108:	bfde      	ittt	le
 801110a:	2330      	movle	r3, #48	@ 0x30
 801110c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011114:	1b92      	subs	r2, r2, r6
 8011116:	6122      	str	r2, [r4, #16]
 8011118:	f8cd a000 	str.w	sl, [sp]
 801111c:	464b      	mov	r3, r9
 801111e:	aa03      	add	r2, sp, #12
 8011120:	4621      	mov	r1, r4
 8011122:	4640      	mov	r0, r8
 8011124:	f7ff fee6 	bl	8010ef4 <_printf_common>
 8011128:	3001      	adds	r0, #1
 801112a:	d14a      	bne.n	80111c2 <_printf_i+0x1f2>
 801112c:	f04f 30ff 	mov.w	r0, #4294967295
 8011130:	b004      	add	sp, #16
 8011132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011136:	6823      	ldr	r3, [r4, #0]
 8011138:	f043 0320 	orr.w	r3, r3, #32
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	4833      	ldr	r0, [pc, #204]	@ (801120c <_printf_i+0x23c>)
 8011140:	2778      	movs	r7, #120	@ 0x78
 8011142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	6831      	ldr	r1, [r6, #0]
 801114a:	061f      	lsls	r7, r3, #24
 801114c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011150:	d402      	bmi.n	8011158 <_printf_i+0x188>
 8011152:	065f      	lsls	r7, r3, #25
 8011154:	bf48      	it	mi
 8011156:	b2ad      	uxthmi	r5, r5
 8011158:	6031      	str	r1, [r6, #0]
 801115a:	07d9      	lsls	r1, r3, #31
 801115c:	bf44      	itt	mi
 801115e:	f043 0320 	orrmi.w	r3, r3, #32
 8011162:	6023      	strmi	r3, [r4, #0]
 8011164:	b11d      	cbz	r5, 801116e <_printf_i+0x19e>
 8011166:	2310      	movs	r3, #16
 8011168:	e7ac      	b.n	80110c4 <_printf_i+0xf4>
 801116a:	4827      	ldr	r0, [pc, #156]	@ (8011208 <_printf_i+0x238>)
 801116c:	e7e9      	b.n	8011142 <_printf_i+0x172>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	f023 0320 	bic.w	r3, r3, #32
 8011174:	6023      	str	r3, [r4, #0]
 8011176:	e7f6      	b.n	8011166 <_printf_i+0x196>
 8011178:	4616      	mov	r6, r2
 801117a:	e7bd      	b.n	80110f8 <_printf_i+0x128>
 801117c:	6833      	ldr	r3, [r6, #0]
 801117e:	6825      	ldr	r5, [r4, #0]
 8011180:	6961      	ldr	r1, [r4, #20]
 8011182:	1d18      	adds	r0, r3, #4
 8011184:	6030      	str	r0, [r6, #0]
 8011186:	062e      	lsls	r6, r5, #24
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	d501      	bpl.n	8011190 <_printf_i+0x1c0>
 801118c:	6019      	str	r1, [r3, #0]
 801118e:	e002      	b.n	8011196 <_printf_i+0x1c6>
 8011190:	0668      	lsls	r0, r5, #25
 8011192:	d5fb      	bpl.n	801118c <_printf_i+0x1bc>
 8011194:	8019      	strh	r1, [r3, #0]
 8011196:	2300      	movs	r3, #0
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	4616      	mov	r6, r2
 801119c:	e7bc      	b.n	8011118 <_printf_i+0x148>
 801119e:	6833      	ldr	r3, [r6, #0]
 80111a0:	1d1a      	adds	r2, r3, #4
 80111a2:	6032      	str	r2, [r6, #0]
 80111a4:	681e      	ldr	r6, [r3, #0]
 80111a6:	6862      	ldr	r2, [r4, #4]
 80111a8:	2100      	movs	r1, #0
 80111aa:	4630      	mov	r0, r6
 80111ac:	f7ef f898 	bl	80002e0 <memchr>
 80111b0:	b108      	cbz	r0, 80111b6 <_printf_i+0x1e6>
 80111b2:	1b80      	subs	r0, r0, r6
 80111b4:	6060      	str	r0, [r4, #4]
 80111b6:	6863      	ldr	r3, [r4, #4]
 80111b8:	6123      	str	r3, [r4, #16]
 80111ba:	2300      	movs	r3, #0
 80111bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111c0:	e7aa      	b.n	8011118 <_printf_i+0x148>
 80111c2:	6923      	ldr	r3, [r4, #16]
 80111c4:	4632      	mov	r2, r6
 80111c6:	4649      	mov	r1, r9
 80111c8:	4640      	mov	r0, r8
 80111ca:	47d0      	blx	sl
 80111cc:	3001      	adds	r0, #1
 80111ce:	d0ad      	beq.n	801112c <_printf_i+0x15c>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	079b      	lsls	r3, r3, #30
 80111d4:	d413      	bmi.n	80111fe <_printf_i+0x22e>
 80111d6:	68e0      	ldr	r0, [r4, #12]
 80111d8:	9b03      	ldr	r3, [sp, #12]
 80111da:	4298      	cmp	r0, r3
 80111dc:	bfb8      	it	lt
 80111de:	4618      	movlt	r0, r3
 80111e0:	e7a6      	b.n	8011130 <_printf_i+0x160>
 80111e2:	2301      	movs	r3, #1
 80111e4:	4632      	mov	r2, r6
 80111e6:	4649      	mov	r1, r9
 80111e8:	4640      	mov	r0, r8
 80111ea:	47d0      	blx	sl
 80111ec:	3001      	adds	r0, #1
 80111ee:	d09d      	beq.n	801112c <_printf_i+0x15c>
 80111f0:	3501      	adds	r5, #1
 80111f2:	68e3      	ldr	r3, [r4, #12]
 80111f4:	9903      	ldr	r1, [sp, #12]
 80111f6:	1a5b      	subs	r3, r3, r1
 80111f8:	42ab      	cmp	r3, r5
 80111fa:	dcf2      	bgt.n	80111e2 <_printf_i+0x212>
 80111fc:	e7eb      	b.n	80111d6 <_printf_i+0x206>
 80111fe:	2500      	movs	r5, #0
 8011200:	f104 0619 	add.w	r6, r4, #25
 8011204:	e7f5      	b.n	80111f2 <_printf_i+0x222>
 8011206:	bf00      	nop
 8011208:	080119f2 	.word	0x080119f2
 801120c:	08011a03 	.word	0x08011a03

08011210 <__sflush_r>:
 8011210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011218:	0716      	lsls	r6, r2, #28
 801121a:	4605      	mov	r5, r0
 801121c:	460c      	mov	r4, r1
 801121e:	d454      	bmi.n	80112ca <__sflush_r+0xba>
 8011220:	684b      	ldr	r3, [r1, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dc02      	bgt.n	801122c <__sflush_r+0x1c>
 8011226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011228:	2b00      	cmp	r3, #0
 801122a:	dd48      	ble.n	80112be <__sflush_r+0xae>
 801122c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801122e:	2e00      	cmp	r6, #0
 8011230:	d045      	beq.n	80112be <__sflush_r+0xae>
 8011232:	2300      	movs	r3, #0
 8011234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011238:	682f      	ldr	r7, [r5, #0]
 801123a:	6a21      	ldr	r1, [r4, #32]
 801123c:	602b      	str	r3, [r5, #0]
 801123e:	d030      	beq.n	80112a2 <__sflush_r+0x92>
 8011240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011242:	89a3      	ldrh	r3, [r4, #12]
 8011244:	0759      	lsls	r1, r3, #29
 8011246:	d505      	bpl.n	8011254 <__sflush_r+0x44>
 8011248:	6863      	ldr	r3, [r4, #4]
 801124a:	1ad2      	subs	r2, r2, r3
 801124c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801124e:	b10b      	cbz	r3, 8011254 <__sflush_r+0x44>
 8011250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011252:	1ad2      	subs	r2, r2, r3
 8011254:	2300      	movs	r3, #0
 8011256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011258:	6a21      	ldr	r1, [r4, #32]
 801125a:	4628      	mov	r0, r5
 801125c:	47b0      	blx	r6
 801125e:	1c43      	adds	r3, r0, #1
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	d106      	bne.n	8011272 <__sflush_r+0x62>
 8011264:	6829      	ldr	r1, [r5, #0]
 8011266:	291d      	cmp	r1, #29
 8011268:	d82b      	bhi.n	80112c2 <__sflush_r+0xb2>
 801126a:	4a2a      	ldr	r2, [pc, #168]	@ (8011314 <__sflush_r+0x104>)
 801126c:	410a      	asrs	r2, r1
 801126e:	07d6      	lsls	r6, r2, #31
 8011270:	d427      	bmi.n	80112c2 <__sflush_r+0xb2>
 8011272:	2200      	movs	r2, #0
 8011274:	6062      	str	r2, [r4, #4]
 8011276:	04d9      	lsls	r1, r3, #19
 8011278:	6922      	ldr	r2, [r4, #16]
 801127a:	6022      	str	r2, [r4, #0]
 801127c:	d504      	bpl.n	8011288 <__sflush_r+0x78>
 801127e:	1c42      	adds	r2, r0, #1
 8011280:	d101      	bne.n	8011286 <__sflush_r+0x76>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	b903      	cbnz	r3, 8011288 <__sflush_r+0x78>
 8011286:	6560      	str	r0, [r4, #84]	@ 0x54
 8011288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801128a:	602f      	str	r7, [r5, #0]
 801128c:	b1b9      	cbz	r1, 80112be <__sflush_r+0xae>
 801128e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011292:	4299      	cmp	r1, r3
 8011294:	d002      	beq.n	801129c <__sflush_r+0x8c>
 8011296:	4628      	mov	r0, r5
 8011298:	f7ff fca0 	bl	8010bdc <_free_r>
 801129c:	2300      	movs	r3, #0
 801129e:	6363      	str	r3, [r4, #52]	@ 0x34
 80112a0:	e00d      	b.n	80112be <__sflush_r+0xae>
 80112a2:	2301      	movs	r3, #1
 80112a4:	4628      	mov	r0, r5
 80112a6:	47b0      	blx	r6
 80112a8:	4602      	mov	r2, r0
 80112aa:	1c50      	adds	r0, r2, #1
 80112ac:	d1c9      	bne.n	8011242 <__sflush_r+0x32>
 80112ae:	682b      	ldr	r3, [r5, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d0c6      	beq.n	8011242 <__sflush_r+0x32>
 80112b4:	2b1d      	cmp	r3, #29
 80112b6:	d001      	beq.n	80112bc <__sflush_r+0xac>
 80112b8:	2b16      	cmp	r3, #22
 80112ba:	d11e      	bne.n	80112fa <__sflush_r+0xea>
 80112bc:	602f      	str	r7, [r5, #0]
 80112be:	2000      	movs	r0, #0
 80112c0:	e022      	b.n	8011308 <__sflush_r+0xf8>
 80112c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112c6:	b21b      	sxth	r3, r3
 80112c8:	e01b      	b.n	8011302 <__sflush_r+0xf2>
 80112ca:	690f      	ldr	r7, [r1, #16]
 80112cc:	2f00      	cmp	r7, #0
 80112ce:	d0f6      	beq.n	80112be <__sflush_r+0xae>
 80112d0:	0793      	lsls	r3, r2, #30
 80112d2:	680e      	ldr	r6, [r1, #0]
 80112d4:	bf08      	it	eq
 80112d6:	694b      	ldreq	r3, [r1, #20]
 80112d8:	600f      	str	r7, [r1, #0]
 80112da:	bf18      	it	ne
 80112dc:	2300      	movne	r3, #0
 80112de:	eba6 0807 	sub.w	r8, r6, r7
 80112e2:	608b      	str	r3, [r1, #8]
 80112e4:	f1b8 0f00 	cmp.w	r8, #0
 80112e8:	dde9      	ble.n	80112be <__sflush_r+0xae>
 80112ea:	6a21      	ldr	r1, [r4, #32]
 80112ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112ee:	4643      	mov	r3, r8
 80112f0:	463a      	mov	r2, r7
 80112f2:	4628      	mov	r0, r5
 80112f4:	47b0      	blx	r6
 80112f6:	2800      	cmp	r0, #0
 80112f8:	dc08      	bgt.n	801130c <__sflush_r+0xfc>
 80112fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011302:	81a3      	strh	r3, [r4, #12]
 8011304:	f04f 30ff 	mov.w	r0, #4294967295
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130c:	4407      	add	r7, r0
 801130e:	eba8 0800 	sub.w	r8, r8, r0
 8011312:	e7e7      	b.n	80112e4 <__sflush_r+0xd4>
 8011314:	dfbffffe 	.word	0xdfbffffe

08011318 <_fflush_r>:
 8011318:	b538      	push	{r3, r4, r5, lr}
 801131a:	690b      	ldr	r3, [r1, #16]
 801131c:	4605      	mov	r5, r0
 801131e:	460c      	mov	r4, r1
 8011320:	b913      	cbnz	r3, 8011328 <_fflush_r+0x10>
 8011322:	2500      	movs	r5, #0
 8011324:	4628      	mov	r0, r5
 8011326:	bd38      	pop	{r3, r4, r5, pc}
 8011328:	b118      	cbz	r0, 8011332 <_fflush_r+0x1a>
 801132a:	6a03      	ldr	r3, [r0, #32]
 801132c:	b90b      	cbnz	r3, 8011332 <_fflush_r+0x1a>
 801132e:	f7ff f9d7 	bl	80106e0 <__sinit>
 8011332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0f3      	beq.n	8011322 <_fflush_r+0xa>
 801133a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801133c:	07d0      	lsls	r0, r2, #31
 801133e:	d404      	bmi.n	801134a <_fflush_r+0x32>
 8011340:	0599      	lsls	r1, r3, #22
 8011342:	d402      	bmi.n	801134a <_fflush_r+0x32>
 8011344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011346:	f7ff fc38 	bl	8010bba <__retarget_lock_acquire_recursive>
 801134a:	4628      	mov	r0, r5
 801134c:	4621      	mov	r1, r4
 801134e:	f7ff ff5f 	bl	8011210 <__sflush_r>
 8011352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011354:	07da      	lsls	r2, r3, #31
 8011356:	4605      	mov	r5, r0
 8011358:	d4e4      	bmi.n	8011324 <_fflush_r+0xc>
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	059b      	lsls	r3, r3, #22
 801135e:	d4e1      	bmi.n	8011324 <_fflush_r+0xc>
 8011360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011362:	f7ff fc2b 	bl	8010bbc <__retarget_lock_release_recursive>
 8011366:	e7dd      	b.n	8011324 <_fflush_r+0xc>

08011368 <__swhatbuf_r>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011370:	2900      	cmp	r1, #0
 8011372:	b096      	sub	sp, #88	@ 0x58
 8011374:	4615      	mov	r5, r2
 8011376:	461e      	mov	r6, r3
 8011378:	da0d      	bge.n	8011396 <__swhatbuf_r+0x2e>
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011380:	f04f 0100 	mov.w	r1, #0
 8011384:	bf14      	ite	ne
 8011386:	2340      	movne	r3, #64	@ 0x40
 8011388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801138c:	2000      	movs	r0, #0
 801138e:	6031      	str	r1, [r6, #0]
 8011390:	602b      	str	r3, [r5, #0]
 8011392:	b016      	add	sp, #88	@ 0x58
 8011394:	bd70      	pop	{r4, r5, r6, pc}
 8011396:	466a      	mov	r2, sp
 8011398:	f000 f87c 	bl	8011494 <_fstat_r>
 801139c:	2800      	cmp	r0, #0
 801139e:	dbec      	blt.n	801137a <__swhatbuf_r+0x12>
 80113a0:	9901      	ldr	r1, [sp, #4]
 80113a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113aa:	4259      	negs	r1, r3
 80113ac:	4159      	adcs	r1, r3
 80113ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113b2:	e7eb      	b.n	801138c <__swhatbuf_r+0x24>

080113b4 <__smakebuf_r>:
 80113b4:	898b      	ldrh	r3, [r1, #12]
 80113b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113b8:	079d      	lsls	r5, r3, #30
 80113ba:	4606      	mov	r6, r0
 80113bc:	460c      	mov	r4, r1
 80113be:	d507      	bpl.n	80113d0 <__smakebuf_r+0x1c>
 80113c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	6123      	str	r3, [r4, #16]
 80113c8:	2301      	movs	r3, #1
 80113ca:	6163      	str	r3, [r4, #20]
 80113cc:	b003      	add	sp, #12
 80113ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d0:	ab01      	add	r3, sp, #4
 80113d2:	466a      	mov	r2, sp
 80113d4:	f7ff ffc8 	bl	8011368 <__swhatbuf_r>
 80113d8:	9f00      	ldr	r7, [sp, #0]
 80113da:	4605      	mov	r5, r0
 80113dc:	4639      	mov	r1, r7
 80113de:	4630      	mov	r0, r6
 80113e0:	f7ff f866 	bl	80104b0 <_malloc_r>
 80113e4:	b948      	cbnz	r0, 80113fa <__smakebuf_r+0x46>
 80113e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ea:	059a      	lsls	r2, r3, #22
 80113ec:	d4ee      	bmi.n	80113cc <__smakebuf_r+0x18>
 80113ee:	f023 0303 	bic.w	r3, r3, #3
 80113f2:	f043 0302 	orr.w	r3, r3, #2
 80113f6:	81a3      	strh	r3, [r4, #12]
 80113f8:	e7e2      	b.n	80113c0 <__smakebuf_r+0xc>
 80113fa:	89a3      	ldrh	r3, [r4, #12]
 80113fc:	6020      	str	r0, [r4, #0]
 80113fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011402:	81a3      	strh	r3, [r4, #12]
 8011404:	9b01      	ldr	r3, [sp, #4]
 8011406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801140a:	b15b      	cbz	r3, 8011424 <__smakebuf_r+0x70>
 801140c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011410:	4630      	mov	r0, r6
 8011412:	f000 f851 	bl	80114b8 <_isatty_r>
 8011416:	b128      	cbz	r0, 8011424 <__smakebuf_r+0x70>
 8011418:	89a3      	ldrh	r3, [r4, #12]
 801141a:	f023 0303 	bic.w	r3, r3, #3
 801141e:	f043 0301 	orr.w	r3, r3, #1
 8011422:	81a3      	strh	r3, [r4, #12]
 8011424:	89a3      	ldrh	r3, [r4, #12]
 8011426:	431d      	orrs	r5, r3
 8011428:	81a5      	strh	r5, [r4, #12]
 801142a:	e7cf      	b.n	80113cc <__smakebuf_r+0x18>

0801142c <_putc_r>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	460d      	mov	r5, r1
 8011430:	4614      	mov	r4, r2
 8011432:	4606      	mov	r6, r0
 8011434:	b118      	cbz	r0, 801143e <_putc_r+0x12>
 8011436:	6a03      	ldr	r3, [r0, #32]
 8011438:	b90b      	cbnz	r3, 801143e <_putc_r+0x12>
 801143a:	f7ff f951 	bl	80106e0 <__sinit>
 801143e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011440:	07d8      	lsls	r0, r3, #31
 8011442:	d405      	bmi.n	8011450 <_putc_r+0x24>
 8011444:	89a3      	ldrh	r3, [r4, #12]
 8011446:	0599      	lsls	r1, r3, #22
 8011448:	d402      	bmi.n	8011450 <_putc_r+0x24>
 801144a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801144c:	f7ff fbb5 	bl	8010bba <__retarget_lock_acquire_recursive>
 8011450:	68a3      	ldr	r3, [r4, #8]
 8011452:	3b01      	subs	r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	60a3      	str	r3, [r4, #8]
 8011458:	da05      	bge.n	8011466 <_putc_r+0x3a>
 801145a:	69a2      	ldr	r2, [r4, #24]
 801145c:	4293      	cmp	r3, r2
 801145e:	db12      	blt.n	8011486 <_putc_r+0x5a>
 8011460:	b2eb      	uxtb	r3, r5
 8011462:	2b0a      	cmp	r3, #10
 8011464:	d00f      	beq.n	8011486 <_putc_r+0x5a>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	6022      	str	r2, [r4, #0]
 801146c:	701d      	strb	r5, [r3, #0]
 801146e:	b2ed      	uxtb	r5, r5
 8011470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011472:	07da      	lsls	r2, r3, #31
 8011474:	d405      	bmi.n	8011482 <_putc_r+0x56>
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	059b      	lsls	r3, r3, #22
 801147a:	d402      	bmi.n	8011482 <_putc_r+0x56>
 801147c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801147e:	f7ff fb9d 	bl	8010bbc <__retarget_lock_release_recursive>
 8011482:	4628      	mov	r0, r5
 8011484:	bd70      	pop	{r4, r5, r6, pc}
 8011486:	4629      	mov	r1, r5
 8011488:	4622      	mov	r2, r4
 801148a:	4630      	mov	r0, r6
 801148c:	f7ff fa19 	bl	80108c2 <__swbuf_r>
 8011490:	4605      	mov	r5, r0
 8011492:	e7ed      	b.n	8011470 <_putc_r+0x44>

08011494 <_fstat_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d07      	ldr	r5, [pc, #28]	@ (80114b4 <_fstat_r+0x20>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	4611      	mov	r1, r2
 80114a0:	602b      	str	r3, [r5, #0]
 80114a2:	f7f2 f92d 	bl	8003700 <_fstat>
 80114a6:	1c43      	adds	r3, r0, #1
 80114a8:	d102      	bne.n	80114b0 <_fstat_r+0x1c>
 80114aa:	682b      	ldr	r3, [r5, #0]
 80114ac:	b103      	cbz	r3, 80114b0 <_fstat_r+0x1c>
 80114ae:	6023      	str	r3, [r4, #0]
 80114b0:	bd38      	pop	{r3, r4, r5, pc}
 80114b2:	bf00      	nop
 80114b4:	24000fb8 	.word	0x24000fb8

080114b8 <_isatty_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d06      	ldr	r5, [pc, #24]	@ (80114d4 <_isatty_r+0x1c>)
 80114bc:	2300      	movs	r3, #0
 80114be:	4604      	mov	r4, r0
 80114c0:	4608      	mov	r0, r1
 80114c2:	602b      	str	r3, [r5, #0]
 80114c4:	f7f2 f92c 	bl	8003720 <_isatty>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d102      	bne.n	80114d2 <_isatty_r+0x1a>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	b103      	cbz	r3, 80114d2 <_isatty_r+0x1a>
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	24000fb8 	.word	0x24000fb8

080114d8 <_init>:
 80114d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114da:	bf00      	nop
 80114dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114de:	bc08      	pop	{r3}
 80114e0:	469e      	mov	lr, r3
 80114e2:	4770      	bx	lr

080114e4 <_fini>:
 80114e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114e6:	bf00      	nop
 80114e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ea:	bc08      	pop	{r3}
 80114ec:	469e      	mov	lr, r3
 80114ee:	4770      	bx	lr
