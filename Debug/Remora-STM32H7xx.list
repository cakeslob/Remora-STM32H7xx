
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dd7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d5c  0801e020  0801e020  0001f020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ed7c  0801ed7c  0001fd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801ed84  0801ed84  0001fd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ed90  0801ed90  0001fd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0801ed94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bc8  24000088  0801ee1c  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c50  0801ee1c  00020c50  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c419e  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d9ab  00000000  00000000  000e4254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000048e8  00000000  00000000  000f1c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000037a3  00000000  00000000  000f64e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004976b  00000000  00000000  000f9c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00053f18  00000000  00000000  001433f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001af34f  00000000  00000000  0019730e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0034665d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00016a88  00000000  00000000  003466a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0035d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e004 	.word	0x0801e004

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0801e004 	.word	0x0801e004

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c feca 	bl	800db20 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0801e924 	.word	0x0801e924

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f01b fdbc 	bl	801c92a <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0801e8f4 	.word	0x0801e8f4
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0801e8f4 	.word	0x0801e8f4

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f01b fd65 	bl	801c92a <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f011 fd4a 	bl	801295c <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f01c fa3d 	bl	801d348 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f017 f848 	bl	8017ff4 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f01c f9e0 	bl	801d348 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f011 fcc3 	bl	801295c <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f01c f9b6 	bl	801d348 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f00f f951 	bl	80102dc <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f f915 	bl	80102dc <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f01c f93c 	bl	801d348 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f00f f8ca 	bl	80102dc <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0801e020 	.word	0x0801e020
 8001160:	0801e03c 	.word	0x0801e03c
 8001164:	0801e058 	.word	0x0801e058
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0801e074 	.word	0x0801e074
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f01b fbe3 	bl	801c94c <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e ffe0 	bl	801017a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00e fff4 	bl	80101ae <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f01b fbc0 	bl	801c94c <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00e ffbd 	bl	801017a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f00e ffd1 	bl	80101ae <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f01b fb9d 	bl	801c94c <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f00e ff9a 	bl	801017a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f00e ffae 	bl	80101ae <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f01c f804 	bl	801d348 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0801e0a4 	.word	0x0801e0a4

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f010 fe21 	bl	8012134 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f010 fdf5 	bl	8012134 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f00f fb38 	bl	8010bd4 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00e f9f1 	bl	80101ae <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f01b fa63 	bl	801d348 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00e f990 	bl	80101ae <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0801e0b4 	.word	0x0801e0b4

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f00e fd5a 	bl	8010994 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00f f985 	bl	8011210 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00e fe5a 	bl	8010bd4 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa89 	bl	800245c <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa84 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0801e8e8 	.word	0x0801e8e8

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f01a fccc 	bl	801c98a <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00b fcd8 	bl	800dae8 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0801e924 	.word	0x0801e924

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f01a fd53 	bl	801cca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	761a      	strb	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3330      	adds	r3, #48	@ 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
 8002228:	e005      	b.n	8002236 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f806 	bl	8002248 <_ZN3Pin9configPinEv>
}
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8002250:	4868      	ldr	r0, [pc, #416]	@ (80023f4 <_ZN3Pin9configPinEv+0x1ac>)
 8002252:	f01b f879 	bl	801d348 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8002256:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <_ZN3Pin9configPinEv+0x1b0>)
 8002258:	f107 0420 	add.w	r4, r7, #32
 800225c:	461d      	mov	r5, r3
 800225e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f01a fcaf 	bl	801cbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002270:	4603      	mov	r3, r0
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b50      	cmp	r3, #80	@ 0x50
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05e      	beq.n	8002340 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f01a fca1 	bl	801cbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800228c:	4603      	mov	r3, r0
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b41      	subs	r3, #65	@ 0x41
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f01a fc96 	bl	801cbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022a2:	4603      	mov	r3, r0
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3b30      	subs	r3, #48	@ 0x30
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f01a fc8b 	bl	801cbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022b8:	4603      	mov	r3, r0
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3b30      	subs	r3, #48	@ 0x30
 80022be:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 80022c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d80b      	bhi.n	80022de <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8b9b      	ldrh	r3, [r3, #28]
 80022ca:	461a      	mov	r2, r3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022d6:	4413      	add	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8b9b      	ldrh	r3, [r3, #28]
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	4093      	lsls	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e9b      	ldrb	r3, [r3, #26]
 80022f2:	3341      	adds	r3, #65	@ 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	4840      	ldr	r0, [pc, #256]	@ (80023fc <_ZN3Pin9configPinEv+0x1b4>)
 80022fa:	f01a ffb5 	bl	801d268 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8b9b      	ldrh	r3, [r3, #28]
 8002302:	4619      	mov	r1, r3
 8002304:	483e      	ldr	r0, [pc, #248]	@ (8002400 <_ZN3Pin9configPinEv+0x1b8>)
 8002306:	f01a ffaf 	bl	801d268 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e9b      	ldrb	r3, [r3, #26]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	@ 0x38
 8002312:	443b      	add	r3, r7
 8002314:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e9b      	ldrb	r3, [r3, #26]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d861      	bhi.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
 8002324:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <_ZN3Pin9configPinEv+0xe4>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	08002349 	.word	0x08002349
 8002330:	08002369 	.word	0x08002369
 8002334:	08002389 	.word	0x08002389
 8002338:	080023a9 	.word	0x080023a9
 800233c:	080023c9 	.word	0x080023c9
        printf("  Invalid port and pin definition\n");
 8002340:	4830      	ldr	r0, [pc, #192]	@ (8002404 <_ZN3Pin9configPinEv+0x1bc>)
 8002342:	f01b f801 	bl	801d348 <puts>
 8002346:	e052      	b.n	80023ee <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
            break;
 8002366:	e03f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
            break;
 8002386:	e02f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8002388:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
            break;
 80023a6:	e01f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ae:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
            break;
 80023c6:	e00f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
            break;
 80023e6:	bf00      	nop
    }

    this->initPin();
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f80f 	bl	800240c <_ZN3Pin7initPinEv>
}
 80023ee:	3738      	adds	r7, #56	@ 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	0801e11c 	.word	0x0801e11c
 80023f8:	0801e170 	.word	0x0801e170
 80023fc:	0801e150 	.word	0x0801e150
 8002400:	0801e164 	.word	0x0801e164
 8002404:	0801e12c 	.word	0x0801e12c
 8002408:	58024400 	.word	0x58024400

0800240c <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8bdb      	ldrh	r3, [r3, #30]
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	f010 fc4c 	bl	8012cbc <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8bdb      	ldrh	r3, [r3, #30]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3330      	adds	r3, #48	@ 0x30
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f010 fa84 	bl	801295c <HAL_GPIO_Init>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <_ZN9InterruptC1Ev+0x1c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	0801e954 	.word	0x0801e954

0800247c <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 800248a:	f01a feed 	bl	801d268 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800248e:	4905      	ldr	r1, [pc, #20]	@ (80024a4 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0801e184 	.word	0x0801e184
 80024a4:	240000a4 	.word	0x240000a4

080024a8 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a02      	ldr	r2, [pc, #8]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024b8:	4610      	mov	r0, r2
 80024ba:	4798      	blx	r3
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	240000a4 	.word	0x240000a4

080024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a02      	ldr	r2, [pc, #8]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024d4:	4610      	mov	r0, r2
 80024d6:	4798      	blx	r3
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	240000a4 	.word	0x240000a4

080024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f0:	4610      	mov	r0, r2
 80024f2:	4798      	blx	r3
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	240000a4 	.word	0x240000a4

080024fc <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800250a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	240000a4 	.word	0x240000a4

08002518 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8002526:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	240000a4 	.word	0x240000a4

08002534 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a02      	ldr	r2, [pc, #8]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8002542:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	240000a4 	.word	0x240000a4

08002550 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8002554:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8002568:	f7ff fff2 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f002 f948 	bl	8004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8002578:	4603      	mov	r3, r0
 800257a:	e004      	b.n	8002586 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fd ff0f 	bl	80003a0 <strlen>
 8002582:	4603      	mov	r3, r0
 8002584:	bf00      	nop
      }
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f01a fcaf 	bl	801cefc <malloc>
 800259e:	4603      	mov	r3, r0
  }
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    free(ptr);
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f01a fcaa 	bl	801cf0c <free>
  }
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f01a fd52 	bl	801d078 <realloc>
 80025d4:	4603      	mov	r3, r0
  }
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	24000000 	.word	0x24000000

080025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3309      	adds	r3, #9
  }
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	d301      	bcc.n	8002622 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 800261e:	2300      	movs	r3, #0
 8002620:	e01b      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffe6 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002628:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d201      	bcs.n	8002636 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002632:	2300      	movs	r3, #0
 8002634:	e011      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	4798      	blx	r3
 8002642:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29a      	uxth	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2201      	movs	r2, #1
 8002656:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002658:	68bb      	ldr	r3, [r7, #8]
  }
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8002662:	b5b0      	push	{r4, r5, r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d20e      	bcs.n	8002694 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3308      	adds	r3, #8
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	687d      	ldr	r5, [r7, #4]
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f7ff ffb7 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	4628      	mov	r0, r5
 800268e:	47a0      	blx	r4
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e001      	b.n	8002698 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    if (newNode)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	80da      	strh	r2, [r3, #6]
 80026a6:	e006      	b.n	80026b6 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    return newNode;
 80026b6:	697b      	ldr	r3, [r7, #20]
  }
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bdb0      	pop	{r4, r5, r7, pc}

080026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4798      	blx	r3
  }
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	721a      	strb	r2, [r3, #8]
  }
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    return !str_;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
  }
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    return size_;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
  }
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    return str_;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
  }
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800276a:	e00a      	b.n	8002782 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff9f 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	601a      	str	r2, [r3, #0]
    strings_ = node;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
  }
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e029      	b.n	8002824 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3308      	adds	r3, #8
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11f      	bne.n	800281a <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e003      	b.n	8002810 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f7ff ff54 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002818:	e008      	b.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d2      	bne.n	80027d0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 800282a:	e000      	b.n	800282e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 800282c:	bf00      	nop
    }
  }
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	2301      	movs	r3, #1
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	f7ff ff4c 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8002860:	68fc      	ldr	r4, [r7, #12]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f7fd fd99 	bl	80003a0 <strlen>
 800286e:	4602      	mov	r2, r0
 8002870:	e000      	b.n	8002874 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8002872:	2200      	movs	r2, #0
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ff31 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    return str_.data();
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff58 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8002898:	4603      	mov	r3, r0
  }
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
    return s.str_;
 80028aa:	687b      	ldr	r3, [r7, #4]
  }
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028cc:	809a      	strh	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
  }
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
  }
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f805 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002934:	4603      	mov	r3, r0
  }
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
  }
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
    return p;
 8002960:	683b      	ldr	r3, [r7, #0]
  }
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8002998:	79fa      	ldrb	r2, [r7, #7]
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	4013      	ands	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    return p;
 80029d6:	683b      	ldr	r3, [r7, #0]
  }
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ffe1 	bl	80029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	711a      	strb	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a00:	80da      	strh	r2, [r3, #6]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    return next_;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	88db      	ldrh	r3, [r3, #6]
  }
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	80da      	strh	r2, [r3, #6]
  }
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f85f 	bl	8002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e000      	b.n	8002a5c <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 8002a5a:	2300      	movs	r3, #0
  }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f85f 	bl	8002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	e000      	b.n	8002a7e <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8002a7c:	2300      	movs	r3, #0
  }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f86c 	bl	8002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e000      	b.n	8002aa0 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8002a9e:	2300      	movs	r3, #0
  }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffe8 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002ab6:	4603      	mov	r3, r0
  }
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d008      	beq.n	8002ae8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8002ad6:	e013      	b.n	8002b00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff feb6 	bl	8002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8002ae6:	e00e      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	88da      	ldrh	r2, [r3, #6]
 8002af6:	2300      	movs	r3, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fea5 	bl	8004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 8002afe:	e002      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe97 	bl	8002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
  }
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	2160      	movs	r1, #96	@ 0x60
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff22 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b44:	4603      	mov	r3, r0
  }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff13 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b62:	4603      	mov	r3, r0
  }
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
  }
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	711a      	strb	r2, [r3, #4]
  }
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	701a      	strb	r2, [r3, #0]
  }
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f805 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8002be0:	2301      	movs	r3, #1
  }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
  }
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c22:	805a      	strh	r2, [r3, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffe5 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f7ff fe79 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	805a      	strh	r2, [r3, #2]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ffdd 	bl	8002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8002c78:	687b      	ldr	r3, [r7, #4]
  }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ffbd 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	2004      	movs	r0, #4
 8002cb0:	f7ff fe51 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	805a      	strh	r2, [r3, #2]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffdd 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8002cc8:	687b      	ldr	r3, [r7, #4]
  }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	849a      	strh	r2, [r3, #36]	@ 0x24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	711a      	strb	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3308      	adds	r3, #8
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ffca 	bl	8002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	330c      	adds	r3, #12
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ffd3 	bl	8002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd16 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f7ff fc43 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8002d86:	60f8      	str	r0, [r7, #12]
    if (!node)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	711a      	strb	r2, [r3, #4]
    return node;
 8002d94:	68fb      	ldr	r3, [r7, #12]
  }
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff fc55 	bl	8002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8002db8:	60b8      	str	r0, [r7, #8]
    if (!node)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	711a      	strb	r2, [r3, #4]
    return node;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  }
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f7ff fc6d 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f103 0008 	add.w	r0, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	f7ff fcd7 	bl	80027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 020c 	add.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f001 fd24 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fc8e 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f103 020c 	add.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f001 fd3f 	bl	80048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    return data_;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
  }
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    return resources_;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
  }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    return resources_;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
  }
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
    return data_;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
  }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	463b      	mov	r3, r7
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8002f26:	463b      	mov	r3, r7
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fd13 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002f2e:	60f8      	str	r0, [r7, #12]
    return !!data;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
  }
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fcb2 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	1d38      	adds	r0, r7, #4
 8002f68:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f6c:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f78:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fcce 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff8a 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc98 	bl	80028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8002fce:	4603      	mov	r3, r0
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f936 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8002fee:	687b      	ldr	r3, [r7, #4]
  }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    if (!data_)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff76 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8003058:	e011      	b.n	800307e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f919 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	ca06      	ldmia	r2, {r1, r2}
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff70 	bl	8002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
    return iterator();
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff57 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    return resources_;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
  }
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fc2f 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003110:	4603      	mov	r3, r0
  }
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdf8 	bl	8002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3338      	adds	r3, #56	@ 0x38
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc56 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe7d 	bl	8002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe54 	bl	8002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3338      	adds	r3, #56	@ 0x38
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd0d 	bl	8002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    return &resources_;
 8003184:	687b      	ldr	r3, [r7, #4]
  }
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    return &data_;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3338      	adds	r3, #56	@ 0x38
  }
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
    return &data_;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3338      	adds	r3, #56	@ 0x38
  }
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f93e 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fbdd 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e00d      	b.n	800320e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	ca06      	ldmia	r2, {r1, r2}
 80031fc:	f000 f867 	bl	80032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fbda 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800320a:	4603      	mov	r3, r0
 800320c:	bf00      	nop
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fbe5 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	e001      	b.n	800324c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	80da      	strh	r2, [r3, #6]
}
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	88db      	ldrh	r3, [r3, #6]
 8003268:	4619      	mov	r1, r3
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f000 f965 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	809a      	strh	r2, [r3, #4]
  if (slot_)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fbbe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	80da      	strh	r2, [r3, #6]
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f941 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032b8:	4601      	mov	r1, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ffa8 	bl	8003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	1d38      	adds	r0, r7, #4
 80032d8:	e880 0006 	stmia.w	r0, {r1, r2}
 80032dc:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	885b      	ldrh	r3, [r3, #2]
 80032e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	885b      	ldrh	r3, [r3, #2]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6838      	ldr	r0, [r7, #0]
 80032f2:	f000 f922 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032f6:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 80032f8:	697c      	ldr	r4, [r7, #20]
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fb6a 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003302:	4603      	mov	r3, r0
 8003304:	4619      	mov	r1, r3
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff fb8c 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fb61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 800331c:	e00f      	b.n	800333e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb58 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fb50 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	805a      	strh	r2, [r3, #2]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8003346:	b082      	sub	sp, #8
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	1d38      	adds	r0, r7, #4
 8003352:	e880 0006 	stmia.w	r0, {r1, r2}
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fb47 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8003360:	4604      	mov	r4, r0
 8003362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fb35 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4619      	mov	r1, r3
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fb57 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	885b      	ldrh	r3, [r3, #2]
 800337a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800337e:	4293      	cmp	r3, r2
 8003380:	d01a      	beq.n	80033b8 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	4619      	mov	r1, r3
 8003388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800338a:	f000 f8d6 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 800338e:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003390:	697c      	ldr	r4, [r7, #20]
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fb1e 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800339a:	4603      	mov	r3, r0
 800339c:	4619      	mov	r1, r3
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fb40 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 80033a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fb14 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 80033b6:	e010      	b.n	80033da <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fb0b 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 80033c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fb02 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	805a      	strh	r2, [r3, #2]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033e4:	b002      	add	sp, #8
 80033e6:	4770      	bx	lr

080033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  auto next = head_;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 80033f8:	e01b      	b.n	8003432 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 80033fe:	8afb      	ldrh	r3, [r7, #22]
 8003400:	4619      	mov	r1, r3
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f000 f899 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003408:	6138      	str	r0, [r7, #16]
    next = slot->next();
 800340a:	6938      	ldr	r0, [r7, #16]
 800340c:	f7ff fafe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003410:	4603      	mov	r3, r0
 8003412:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003414:	683c      	ldr	r4, [r7, #0]
 8003416:	8aba      	ldrh	r2, [r7, #20]
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	4618      	mov	r0, r3
 8003420:	f001 faf1 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	e893 0006 	ldmia.w	r3, {r1, r2}
 800342c:	4620      	mov	r0, r4
 800342e:	f000 f851 	bl	80034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003438:	4293      	cmp	r3, r2
 800343a:	d1de      	bne.n	80033fa <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003442:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800344a:	805a      	strh	r2, [r3, #2]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f103 010c 	add.w	r1, r3, #12
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f001 faf0 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fb2e 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800347c:	4603      	mov	r3, r0
 800347e:	f083 0301 	eor.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	711a      	strb	r2, [r3, #4]
    return {};
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 facd 	bl	8004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8003494:	e01a      	b.n	80034cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fb2d 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	2008      	movs	r0, #8
 80034a6:	f7ff fa91 	bl	80029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 80034aa:	4604      	mov	r4, r0
 80034ac:	2c00      	cmp	r4, #0
 80034ae:	d002      	beq.n	80034b6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fa97 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fb29 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4621      	mov	r1, r4
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 fa9d 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fa82 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa1c 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f103 040c 	add.w	r4, r3, #12
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fa5e 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fb10 	bl	8004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 800350a:	4605      	mov	r5, r0
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fa61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4629      	mov	r1, r5
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fb10 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	e893 0006 	ldmia.w	r3, {r1, r2}
 800352c:	4620      	mov	r0, r4
 800352e:	f001 fb1d 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bdb0      	pop	{r4, r5, r7, pc}

0800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	330c      	adds	r3, #12
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb28 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 800355e:	b590      	push	{r4, r7, lr}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f103 010c 	add.w	r1, r3, #12
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa6b 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	4618      	mov	r0, r3
 8003582:	f001 faa9 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003586:	4603      	mov	r3, r0
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	711a      	strb	r2, [r3, #4]
    return {};
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fb27 	bl	8004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 800359e:	e011      	b.n	80035c4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 faa8 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461c      	mov	r4, r3
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 faad 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4621      	mov	r1, r4
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fb26 	bl	8004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f816 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80035e2:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 040c 	add.w	r4, r3, #12
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faa6 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003600:	4620      	mov	r0, r4
 8003602:	f001 fab3 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	330c      	adds	r3, #12
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fabe 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 800363c:	2000      	movs	r0, #0
 800363e:	f000 f819 	bl	8003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8003642:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 800364c:	2300      	movs	r3, #0
 800364e:	e00c      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d103      	bne.n	8003662 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	e003      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3302      	adds	r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8003668:	e7ec      	b.n	8003644 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8003684:	2304      	movs	r3, #4
 8003686:	e000      	b.n	800368a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8003688:	2300      	movs	r3, #0
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 800368c:	4413      	add	r3, r2
  }
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	0801e1b8 	.word	0x0801e1b8

080036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
    if (node_)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fb73 	bl	8002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
    if (!node_)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	211f      	movs	r1, #31
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb2d 	bl	8002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
  }
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f103 0108 	add.w	r1, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fa72 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4619      	mov	r1, r3
 800375a:	4620      	mov	r0, r4
 800375c:	f001 fa7d 	bl	8004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8003760:	6178      	str	r0, [r7, #20]
    if (!node) {
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d113      	bne.n	8003790 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	461a      	mov	r2, r3
 8003776:	f7ff fb12 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800377a:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6979      	ldr	r1, [r7, #20]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fae5 	bl	8002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e005      	b.n	800379c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	889b      	ldrh	r3, [r3, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800379c:	697b      	ldr	r3, [r7, #20]
  }
 800379e:	4618      	mov	r0, r3
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}

080037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 80037a6:	b590      	push	{r4, r7, lr}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	88d2      	ldrh	r2, [r2, #6]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	3301      	adds	r3, #1
 80037d8:	461a      	mov	r2, r3
 80037da:	f7ff fae0 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]
    if (node_)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80037ec:	78fc      	ldrb	r4, [r7, #3]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	1c58      	adds	r0, r3, #1
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6088      	str	r0, [r1, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	4622      	mov	r2, r4
 8003800:	721a      	strb	r2, [r3, #8]
  }
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
  }
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4413      	add	r3, r2
 8003840:	2200      	movs	r2, #0
 8003842:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f103 0108 	add.w	r1, r3, #8
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	2300      	movs	r3, #0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 fa11 	bl	8004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	463b      	mov	r3, r7
 8003868:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800386c:	463b      	mov	r3, r7
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f87c 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003874:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f91c 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fffb 	bl	8002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8003892:	4603      	mov	r3, r0
 8003894:	e000      	b.n	8003898 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8003896:	2300      	movs	r3, #0
  }
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f84f 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038b6:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f9ef 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80038c0:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7ff f8ba 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	e000      	b.n	80038d4 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 80038d2:	2300      	movs	r3, #0
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fb9e 	bl	800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f82c 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038fc:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f9cc 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003906:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff f8b9 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8003914:	4603      	mov	r3, r0
 8003916:	e000      	b.n	800391a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8003918:	2300      	movs	r3, #0
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fbce 	bl	80030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	791b      	ldrb	r3, [r3, #4]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f823 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	4619      	mov	r1, r3
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7ff fa4c 	bl	8002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2110      	movs	r1, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f813 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f7ff fe2c 	bl	80035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff f875 	bl	8002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800397a:	60f8      	str	r0, [r7, #12]
  if (collection)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fd2f 	bl	80033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	711a      	strb	r2, [r3, #4]
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	2110      	movs	r1, #16
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe ffed 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80039ae:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f7ff fe27 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80039c0:	4603      	mov	r3, r0
             : nullptr;
 80039c2:	e000      	b.n	80039c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70fb      	strb	r3, [r7, #3]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
    return code_;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
  }
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	24000004 	.word	0x24000004

08003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    return true;
 8003a34:	2301      	movs	r3, #1
  }
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
    return true;
 8003a4a:	2301      	movs	r3, #1
  }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    return true;
 8003a60:	2301      	movs	r3, #1
  }
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
    return true;
 8003a76:	2301      	movs	r3, #1
  }
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	220a      	movs	r2, #10
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ffe2 	bl	8003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
  }
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8003b10:	793b      	ldrb	r3, [r7, #4]
 8003b12:	737b      	strb	r3, [r7, #13]
 8003b14:	2300      	movs	r3, #0
 8003b16:	7b3a      	ldrb	r2, [r7, #12]
 8003b18:	f362 0307 	bfi	r3, r2, #0, #8
 8003b1c:	7b7a      	ldrb	r2, [r7, #13]
 8003b1e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fb03 	bl	8003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8003b54:	d305      	bcc.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b5c:	d201      	bcs.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b80:	d305      	bcc.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8003b88:	d201      	bcs.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ffb9 	bl	8003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
      return false;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e018      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ffc0 	bl	8003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	029a      	lsls	r2, r3, #10
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003c08:	461a      	mov	r2, r3
      codepoint_ =
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]
      return true;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e003      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
    return true;
 8003c18:	2301      	movs	r3, #1
  }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
  }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c48:	d904      	bls.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b39      	cmp	r3, #57	@ 0x39
 8003c4e:	d801      	bhi.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	ed87 0a00 	vstr	s0, [r7]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	e9c7 2300 	strd	r2, r3, [r7]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	e9c7 2300 	strd	r2, r3, [r7]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	ed87 0b00 	vstr	d0, [r7]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf2:	e9c1 2300 	strd	r2, r3, [r1]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffa3 	bl	8003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	ed87 0a00 	vstr	s0, [r7]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	ed97 0a00 	vldr	s0, [r7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff99 	bl	8003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	e9c7 2300 	strd	r2, r3, [r7]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f103 0108 	add.w	r1, r3, #8
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	f7ff ff93 	bl	8003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	e9c7 2300 	strd	r2, r3, [r7]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0108 	add.w	r1, r3, #8
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	f7ff ff8f 	bl	8003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	ed87 0b00 	vstr	d0, [r7]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	ed97 0b00 	vldr	d0, [r7]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff8c 	bl	8003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
    return type_;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
  }
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	ee07 3a90 	vmov	s15, r3
  }
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e4e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003e52:	eeb0 0b47 	vmov.f64	d0, d7
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8003e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e64:	b0a6      	sub	sp, #152	@ 0x98
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003e6a:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8003e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b2b      	cmp	r3, #43	@ 0x2b
 8003e78:	d008      	beq.n	8003e8c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8003e7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e7c:	d10a      	bne.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8003e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e86:	3301      	adds	r3, #1
 8003e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e8a:	e003      	b.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8e:	3301      	adds	r3, #1
 8003e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e92:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8003e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fece 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eb0:	d001      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8003ebc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ebe:	f7ff ff21 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8003ec2:	e1f5      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8003ee2:	e054      	b.n	8003f8e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3b30      	subs	r3, #48	@ 0x30
 8003eea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8003eee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ef2:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003ef6:	49ae      	ldr	r1, [pc, #696]	@ (80041b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8003ef8:	418b      	sbcs	r3, r1
 8003efa:	d251      	bcs.n	8003fa0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8003efc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0099      	lsls	r1, r3, #2
 8003f0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003f12:	0090      	lsls	r0, r2, #2
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	eb12 0804 	adds.w	r8, r2, r4
 8003f1c:	eb43 0905 	adc.w	r9, r3, r5
 8003f20:	eb18 0308 	adds.w	r3, r8, r8
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	eb49 0309 	adc.w	r3, r9, r9
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f30:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8003f34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f38:	2200      	movs	r2, #0
 8003f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f42:	460b      	mov	r3, r1
 8003f44:	43db      	mvns	r3, r3
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f48:	4613      	mov	r3, r2
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f52:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f56:	4621      	mov	r1, r4
 8003f58:	4291      	cmp	r1, r2
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f60:	d320      	bcc.n	8003fa4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8003f62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f66:	2200      	movs	r2, #0
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f74:	4621      	mov	r1, r4
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6139      	str	r1, [r7, #16]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f84:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fe51 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1a2      	bne.n	8003ee4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8003f9e:	e002      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa4:	bf00      	nop
  }

  if (*s == '\0') {
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d136      	bne.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8003fae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fbe:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8003fc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fc6:	2a01      	cmp	r2, #1
 8003fc8:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8003fcc:	d226      	bcs.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8003fce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4250      	negs	r0, r2
 8003fd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fe4:	f7ff feb4 	bl	8003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8003fe8:	e162      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8003fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ff0:	f7ff fec4 	bl	8003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8003ff4:	e15c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003ff6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003ffa:	f04f 020a 	mov.w	r2, #10
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f7fc fc9f 	bl	8000944 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800400e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004012:	b29b      	uxth	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 800401c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004024:	d2e7      	bcs.n	8003ff6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004026:	e009      	b.n	800403c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8004028:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800402c:	b29b      	uxth	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004038:	3301      	adds	r3, #1
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fdfa 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ed      	bne.n	8004028 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 800404c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b2e      	cmp	r3, #46	@ 0x2e
 8004052:	d14c      	bne.n	80040ee <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8004054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004056:	3301      	adds	r3, #1
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800405a:	e040      	b.n	80040de <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 800405c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004060:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004064:	4953      	ldr	r1, [pc, #332]	@ (80041b4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8004066:	418b      	sbcs	r3, r1
 8004068:	d236      	bcs.n	80040d8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800406a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004080:	0090      	lsls	r0, r2, #2
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	eb12 0a04 	adds.w	sl, r2, r4
 800408a:	eb43 0b05 	adc.w	fp, r3, r5
 800408e:	eb1a 030a 	adds.w	r3, sl, sl
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	eb4b 030b 	adc.w	r3, fp, fp
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800409e:	4652      	mov	r2, sl
 80040a0:	465b      	mov	r3, fp
 80040a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80040a4:	7809      	ldrb	r1, [r1, #0]
 80040a6:	3930      	subs	r1, #48	@ 0x30
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	b2c9      	uxtb	r1, r1
 80040ac:	2000      	movs	r0, #0
 80040ae:	6239      	str	r1, [r7, #32]
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80040b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040b6:	4621      	mov	r1, r4
 80040b8:	1851      	adds	r1, r2, r1
 80040ba:	6039      	str	r1, [r7, #0]
 80040bc:	4629      	mov	r1, r5
 80040be:	414b      	adcs	r3, r1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80040c6:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 80040ca:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	3301      	adds	r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80040de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fda9 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1b6      	bne.n	800405c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 80040f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b65      	cmp	r3, #101	@ 0x65
 80040fa:	d003      	beq.n	8004104 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 80040fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b45      	cmp	r3, #69	@ 0x45
 8004102:	d171      	bne.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	3301      	adds	r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8004110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b2d      	cmp	r3, #45	@ 0x2d
 8004116:	d106      	bne.n	8004126 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	3301      	adds	r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	e04f      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b2b      	cmp	r3, #43	@ 0x2b
 800412c:	d14b      	bne.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 800412e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004130:	3301      	adds	r3, #1
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8004134:	e047      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8004136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	461a      	mov	r2, r3
 8004144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	3b30      	subs	r3, #48	@ 0x30
 800414a:	4413      	add	r3, r2
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8004150:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004158:	4413      	add	r3, r2
 800415a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800415e:	dd2f      	ble.n	80041c0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8004160:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8004168:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8004170:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041b8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8004174:	e001      	b.n	800417a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8004176:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041bc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004180:	f7ff fdd1 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8004184:	e094      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8004186:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 800418e:	f000 fda7 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8004192:	eeb0 7b40 	vmov.f64	d7, d0
 8004196:	eeb1 7b47 	vneg.f64	d7, d7
 800419a:	e003      	b.n	80041a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 800419c:	f000 fda0 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 80041a0:	eeb0 7b40 	vmov.f64	d7, d0
 80041a4:	eeb0 0b47 	vmov.f64	d0, d7
 80041a8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80041aa:	f7ff fdfd 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80041ae:	e07f      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 80041b0:	19999999 	.word	0x19999999
 80041b4:	00019999 	.word	0x00019999
 80041b8:	80000000 	.word	0x80000000
 80041bc:	00000000 	.word	0x00000000
      }
      s++;
 80041c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c2:	3301      	adds	r3, #1
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80041c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fd35 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1af      	bne.n	8004136 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 80041d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 80041de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041e2:	425b      	negs	r3, r3
 80041e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 80041e8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80041ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f0:	4413      	add	r3, r2
 80041f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 80041fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004200:	f7ff fd80 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8004204:	e054      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8004206:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800420a:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 800420e:	db0a      	blt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004214:	2b26      	cmp	r3, #38	@ 0x26
 8004216:	dc06      	bgt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8004218:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800421c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004220:	f173 0300 	sbcs.w	r3, r3, #0
 8004224:	d301      	bcc.n	800422a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 800422a:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 800422c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004230:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8004238:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800423c:	f7fc fa3e 	bl	80006bc <__aeabi_ul2d>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004248:	ec43 2b10 	vmov	d0, r2, r3
 800424c:	f000 fd56 	bl	8004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8004250:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8004254:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 800425c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004260:	eeb1 7b47 	vneg.f64	d7, d7
 8004264:	e001      	b.n	800426a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8004266:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800426a:	eeb0 0b47 	vmov.f64	d0, d7
 800426e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004270:	f7ff fd9a 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8004274:	e01c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8004276:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800427a:	f7fc fb1d 	bl	80008b8 <__aeabi_ul2f>
 800427e:	4603      	mov	r3, r0
 8004280:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004284:	ee00 3a10 	vmov	s0, r3
 8004288:	f000 fd79 	bl	8004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 800428c:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8004290:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8004298:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800429c:	eef1 7a67 	vneg.f32	s15, s15
 80042a0:	e001      	b.n	80042a6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 80042a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80042a6:	eeb0 0a67 	vmov.f32	s0, s15
 80042aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042ac:	f7ff fd3b 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 80042b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042b2:	3798      	adds	r7, #152	@ 0x98
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop

080042bc <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	621a      	str	r2, [r3, #32]
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
	configError(false)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1d1c      	adds	r4, r3, #4
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	4618      	mov	r0, r3
 800430e:	f018 fb2e 	bl	801c96e <_ZNSaIcEC1Ev>
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	461a      	mov	r2, r3
 8004318:	4914      	ldr	r1, [pc, #80]	@ (800436c <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fd70 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f018 fb23 	bl	801c970 <_ZNSaIcED1Ev>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a10      	ldr	r2, [pc, #64]	@ (8004370 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 800432e:	61da      	str	r2, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f103 0420 	add.w	r4, r3, #32
 8004336:	f7fe f953 	bl	80025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 800433a:	4603      	mov	r3, r0
 800433c:	4619      	mov	r1, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f7fe feeb 	bl	800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3360      	adds	r3, #96	@ 0x60
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fea8 	bl	800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f80c 	bl	8004374 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f82b 	bl	80043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}
 800436c:	0801e210 	.word	0x0801e210
 8004370:	0801e214 	.word	0x0801e214

08004374 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f018 fc1f 	bl	801cbc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3320      	adds	r3, #32
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fee5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f903 	bl	800459c <_ZN17JsonConfigHandler16readFileContentsEv>
 8004396:	4603      	mov	r3, r0
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e003      	b.n	80043ae <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9c8 	bl	800473c <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b0a1      	sub	sp, #132	@ 0x84
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 808e 	bne.w	80044e8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 80043cc:	4848      	ldr	r0, [pc, #288]	@ (80044f0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 80043ce:	f018 ffbb 	bl	801d348 <puts>

    JsonArray Threads = doc["Threads"];
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0120 	add.w	r1, r3, #32
 80043d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043dc:	4a45      	ldr	r2, [pc, #276]	@ (80044f4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd38 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80043e4:	f107 031c 	add.w	r3, r7, #28
 80043e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd49 	bl	8004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	f107 021c 	add.w	r2, r7, #28
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fe1e 	bl	8003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8004404:	e05c      	b.n	80044c0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8004406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800440a:	f107 0210 	add.w	r2, r7, #16
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fdbd 	bl	8002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8004416:	68fc      	ldr	r4, [r7, #12]
 8004418:	463b      	mov	r3, r7
 800441a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd3f 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8004426:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800442a:	463a      	mov	r2, r7
 800442c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004430:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800443a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800443e:	4a2e      	ldr	r2, [pc, #184]	@ (80044f8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd3e 	bl	8004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004446:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd5e 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8004450:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800445c:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd60 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004464:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd80 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800446e:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8004470:	4923      	ldr	r1, [pc, #140]	@ (8004500 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8004472:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004474:	f7fb ff34 	bl	80002e0 <strcmp>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 800447e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004480:	4820      	ldr	r0, [pc, #128]	@ (8004504 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8004482:	f018 fef1 	bl	801d268 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff15 	bl	80042bc <_ZN6Remora11setBaseFreqEm>
 8004492:	e010      	b.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8004494:	491c      	ldr	r1, [pc, #112]	@ (8004508 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8004496:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004498:	f7fb ff22 	bl	80002e0 <strcmp>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 80044a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044a4:	4819      	ldr	r0, [pc, #100]	@ (800450c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 80044a6:	f018 fedf 	bl	801d268 <iprintf>
            remoraInstance->setServoFreq(freq);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff11 	bl	80042d8 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fd8c 	bl	8002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 80044c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044c4:	f107 021c 	add.w	r2, r7, #28
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fddb 	bl	8003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 80044d0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd6c 	bl	8002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d18f      	bne.n	8004406 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 80044e6:	e000      	b.n	80044ea <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 80044e8:	bf00      	nop
        }
    }
}
 80044ea:	3784      	adds	r7, #132	@ 0x84
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	0801e220 	.word	0x0801e220
 80044f4:	0801e240 	.word	0x0801e240
 80044f8:	0801e248 	.word	0x0801e248
 80044fc:	0801e250 	.word	0x0801e250
 8004500:	0801e25c 	.word	0x0801e25c
 8004504:	0801e264 	.word	0x0801e264
 8004508:	0801e28c 	.word	0x0801e28c
 800450c:	0801e294 	.word	0x0801e294

08004510 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b08f      	sub	sp, #60	@ 0x3c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f103 0120 	add.w	r1, r3, #32
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fc94 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8004536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004538:	f001 fc9a 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800453c:	4604      	mov	r4, r0
 800453e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004540:	f001 fca6 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004544:	4602      	mov	r2, r0
 8004546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800454a:	4621      	mov	r1, r4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fcb9 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8004552:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8004554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800455c:	f7fe fcdd 	bl	8002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8004560:	4603      	mov	r3, r0
 8004562:	bf00      	nop
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f103 0120 	add.w	r1, r3, #32
 800456e:	f107 0318 	add.w	r3, r7, #24
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc6d 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f107 0218 	add.w	r2, r7, #24
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fcff 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004588:	e002      	b.n	8004590 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fd34 	bl	8002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	373c      	adds	r7, #60	@ 0x3c
 8004594:	46bd      	mov	sp, r7
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	0801e2bc 	.word	0x0801e2bc

0800459c <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 800459c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a0:	b08f      	sub	sp, #60	@ 0x3c
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80045a6:	485a      	ldr	r0, [pc, #360]	@ (8004710 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 80045a8:	f018 fece 	bl	801d348 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80045ac:	4859      	ldr	r0, [pc, #356]	@ (8004714 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80045ae:	f018 fecb 	bl	801d348 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80045b2:	2200      	movs	r2, #0
 80045b4:	4958      	ldr	r1, [pc, #352]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80045b6:	4859      	ldr	r0, [pc, #356]	@ (800471c <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80045b8:	f017 fd74 	bl	801c0a4 <f_mount>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 80045cc:	4854      	ldr	r0, [pc, #336]	@ (8004720 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 80045ce:	f018 fe4b 	bl	801d268 <iprintf>
    	Error_Handler();
 80045d2:	f003 fc4b 	bl	8007e6c <Error_Handler>
 80045d6:	e094      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2201      	movs	r2, #1
 80045de:	4619      	mov	r1, r3
 80045e0:	4850      	ldr	r0, [pc, #320]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80045e2:	f017 fda5 	bl	801c130 <f_open>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80045f6:	484c      	ldr	r0, [pc, #304]	@ (8004728 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80045f8:	f018 fea6 	bl	801d348 <puts>
			Error_Handler();
 80045fc:	f003 fc36 	bl	8007e6c <Error_Handler>
 8004600:	e07f      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8004602:	466b      	mov	r3, sp
 8004604:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 800460c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460e:	4847      	ldr	r0, [pc, #284]	@ (800472c <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8004610:	f018 fe2a 	bl	801d268 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8004614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004616:	1e4b      	subs	r3, r1, #1
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461a:	460a      	mov	r2, r1
 800461c:	2300      	movs	r3, #0
 800461e:	4690      	mov	r8, r2
 8004620:	4699      	mov	r9, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004636:	460a      	mov	r2, r1
 8004638:	2300      	movs	r3, #0
 800463a:	4614      	mov	r4, r2
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	00eb      	lsls	r3, r5, #3
 8004648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	460b      	mov	r3, r1
 8004650:	3318      	adds	r3, #24
 8004652:	3307      	adds	r3, #7
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	ebad 0d03 	sub.w	sp, sp, r3
 800465c:	466b      	mov	r3, sp
 800465e:	331f      	adds	r3, #31
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8004666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	482d      	ldr	r0, [pc, #180]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004670:	f017 ff18 	bl	801c4a4 <f_read>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8004684:	482a      	ldr	r0, [pc, #168]	@ (8004730 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8004686:	f018 fe5f 	bl	801d348 <puts>
 800468a:	e036      	b.n	80046fa <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 800468c:	4829      	ldr	r0, [pc, #164]	@ (8004734 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 800468e:	f018 fe5b 	bl	801d348 <puts>
				jsonContent.reserve(length + 1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	3301      	adds	r3, #1
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f018 fa76 	bl	801cb8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a6:	e01a      	b.n	80046de <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1d19      	adds	r1, r3, #4
 80046ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	4413      	add	r3, r2
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fc88 	bl	8004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	f107 0210 	add.w	r2, r7, #16
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f018 f9f1 	bl	801cab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f018 f9e6 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	3301      	adds	r3, #1
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbe0      	blt.n	80046a8 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f018 faba 	bl	801cc64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4619      	mov	r1, r3
 80046f4:	4810      	ldr	r0, [pc, #64]	@ (8004738 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80046f6:	f018 fdb7 	bl	801d268 <iprintf>
			f_close(&SDFile);
 80046fa:	480a      	ldr	r0, [pc, #40]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80046fc:	f018 f88f 	bl	801c81e <f_close>
 8004700:	46b5      	mov	sp, r6
    }

	return true;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	373c      	adds	r7, #60	@ 0x3c
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800470e:	bf00      	nop
 8004710:	0801e2c4 	.word	0x0801e2c4
 8004714:	0801e2e8 	.word	0x0801e2e8
 8004718:	24000460 	.word	0x24000460
 800471c:	24000464 	.word	0x24000464
 8004720:	0801e308 	.word	0x0801e308
 8004724:	24000694 	.word	0x24000694
 8004728:	0801e324 	.word	0x0801e324
 800472c:	0801e348 	.word	0x0801e348
 8004730:	0801e36c 	.word	0x0801e36c
 8004734:	0801e38c 	.word	0x0801e38c
 8004738:	0801e3ac 	.word	0x0801e3ac

0800473c <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8004744:	482a      	ldr	r0, [pc, #168]	@ (80047f0 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8004746:	f018 fdff 	bl	801d348 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fd03 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0420 	add.w	r4, r3, #32
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f018 fa80 	bl	801cc64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004764:	4603      	mov	r3, r0
 8004766:	4619      	mov	r1, r3
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fc46 	bl	8004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 800476e:	4603      	mov	r3, r0
 8004770:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8004772:	4820      	ldr	r0, [pc, #128]	@ (80047f4 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8004774:	f018 fd78 	bl	801d268 <iprintf>

    switch (error.code())
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f936 	bl	80039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8004782:	4603      	mov	r3, r0
 8004784:	2b04      	cmp	r3, #4
 8004786:	d012      	beq.n	80047ae <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8004788:	2b04      	cmp	r3, #4
 800478a:	dc18      	bgt.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d004      	beq.n	800479e <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8004794:	e013      	b.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8004796:	4818      	ldr	r0, [pc, #96]	@ (80047f8 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8004798:	f018 fdd6 	bl	801d348 <puts>
            break;
 800479c:	e023      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800479e:	4817      	ldr	r0, [pc, #92]	@ (80047fc <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 80047a0:	f018 fdd2 	bl	801d348 <puts>
            configError = true;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047ac:	e01b      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80047ae:	4814      	ldr	r0, [pc, #80]	@ (8004800 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80047b0:	f018 fdca 	bl	801d348 <puts>
            configError = true;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047bc:	e013      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80047be:	4811      	ldr	r0, [pc, #68]	@ (8004804 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 80047c0:	f018 fd52 	bl	801d268 <iprintf>
            printf(error.c_str());
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f91d 	bl	8003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f018 fd49 	bl	801d268 <iprintf>
            printf("\n");
 80047d6:	200a      	movs	r0, #10
 80047d8:	f018 fd58 	bl	801d28c <putchar>
            configError = true;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047e4:	bf00      	nop
    }

    return true;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	0801e3b4 	.word	0x0801e3b4
 80047f4:	0801e3d8 	.word	0x0801e3d8
 80047f8:	0801e3f4 	.word	0x0801e3f4
 80047fc:	0801e410 	.word	0x0801e410
 8004800:	0801e420 	.word	0x0801e420
 8004804:	0801e434 	.word	0x0801e434

08004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004814:	e002      	b.n	800481c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	2200      	movs	r2, #0
 8004824:	72fa      	strb	r2, [r7, #11]
 8004826:	f107 020b 	add.w	r2, r7, #11
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fbf7 	bl	8005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004832:	4603      	mov	r3, r0
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1eb      	bne.n	8004816 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 800483e:	68fb      	ldr	r3, [r7, #12]
    }
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4611      	mov	r1, r2
 8004854:	461a      	mov	r2, r3
 8004856:	460b      	mov	r3, r1
 8004858:	80fb      	strh	r3, [r7, #6]
 800485a:	4613      	mov	r3, r2
 800485c:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	797b      	ldrb	r3, [r7, #5]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	f7fd ff3b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 800487e:	2300      	movs	r3, #0
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	e00b      	b.n	800489c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc40 	bl	8005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	3301      	adds	r3, #1
 800489a:	81fb      	strh	r3, [r7, #14]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3ee      	bcc.n	8004884 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00e      	beq.n	80048dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3304      	adds	r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a12      	ldr	r2, [r2, #32]
 80048ca:	4611      	mov	r1, r2
 80048cc:	6838      	ldr	r0, [r7, #0]
 80048ce:	4798      	blx	r3
      pools_ = preallocatedPools_;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048fe:	4619      	mov	r1, r3
 8004900:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004904:	440b      	add	r3, r1
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc2e 	bl	800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d017      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004924:	429a      	cmp	r2, r3
 8004926:	d011      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a11      	ldr	r1, [r2, #32]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	4798      	blx	r3
 800493e:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    return client.getData();
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fe fad0 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8004962:	4603      	mov	r3, r0
  }
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fe fa8d 	bl	8002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800497a:	4603      	mov	r3, r0
  }
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fe fa8d 	bl	8002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8004992:	4603      	mov	r3, r0
  }
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
  }
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
  }
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    return id_;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	889b      	ldrh	r3, [r3, #4]
  }
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
  }
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	809a      	strh	r2, [r3, #4]
  }
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a42:	809a      	strh	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d005      	beq.n	8004a76 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fbda 	bl	8005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004a74:	e02c      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fbec 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f822 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa6:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004aaa:	e011      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f000 fc14 	bl	80052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004ab4:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fc49 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004ac2:	e005      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbca 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004ace:	bf00      	nop
  }
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
  }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
  }
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
    return id_;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	889b      	ldrh	r3, [r3, #4]
  }
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	809a      	strh	r2, [r3, #4]
  }
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbf9 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4622      	mov	r2, r4
 8004b8a:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ffbf 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e012      	b.n	8004be4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	89ba      	ldrh	r2, [r7, #12]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbd8 	bl	8005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004be0:	4603      	mov	r3, r0
 8004be2:	bf00      	nop
  }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c00:	809a      	strh	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	809a      	strh	r2, [r3, #4]
  }
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fbe6 	bl	800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004c50:	bf00      	nop
}
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3308      	adds	r3, #8
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fbe6 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004c70:	4603      	mov	r3, r0
  }
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	f7fd fd26 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe f91f 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004cac:	4603      	mov	r3, r0
  }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004cc0:	6838      	ldr	r0, [r7, #0]
 8004cc2:	f000 fbf6 	bl	80054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fd fdea 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8004cea:	f000 fc0d 	bl	8005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004cee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004cf2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	7ff00000 	.word	0x7ff00000

08004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d06:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dd04      	ble.n	8004d18 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 8004d0e:	f000 fb51 	bl	80053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e003      	b.n	8004d20 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d18:	f000 fb70 	bl	80053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc02      	bgt.n	8004d2c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
 8004d30:	e019      	b.n	8004d66 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004d3c:	7dfa      	ldrb	r2, [r7, #23]
 8004d3e:	f107 0310 	add.w	r3, r7, #16
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fb45 	bl	80053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8004d4a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d56:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	105b      	asrs	r3, r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	3301      	adds	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e2      	bne.n	8004d32 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8004d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d74:	eeb0 0b47 	vmov.f64	d0, d7
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d88:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dd04      	ble.n	8004d9a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004d90:	f000 fbca 	bl	8005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8004d94:	4603      	mov	r3, r0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	e003      	b.n	8004da2 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d9a:	f000 fbd5 	bl	8005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dc02      	bgt.n	8004dae <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	425b      	negs	r3, r3
 8004dac:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e019      	b.n	8004de8 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbce 	bl	8005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8004dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8004dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd8:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	105b      	asrs	r3, r3, #1
 8004de0:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3301      	adds	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e2      	bne.n	8004db4 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	ee07 3a90 	vmov	s15, r3
}
 8004df4:	eeb0 0a67 	vmov.f32	s0, s15
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8004e0c:	68fc      	ldr	r4, [r7, #12]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f017 fdcc 	bl	801c9ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004e14:	4603      	mov	r3, r0
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f017 ff24 	bl	801cc68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8004e26:	480a      	ldr	r0, [pc, #40]	@ (8004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8004e28:	f017 fda9 	bl	801c97e <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f7fd fb97 	bl	8002560 <_ZNSt11char_traitsIcE6lengthEPKc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f922 	bl	800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e50:	0801e450 	.word	0x0801e450

08004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	@ 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb92 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	cb0c      	ldmia	r3, {r2, r3}
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fb9c 	bl	80055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f876 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004e9a:	bf00      	nop
  }
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb9b 	bl	80055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8004eb8:	bf00      	nop
  }
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08c      	sub	sp, #48	@ 0x30
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004edc:	f107 031c 	add.w	r3, r7, #28
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fba7 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004ee8:	466a      	mov	r2, sp
 8004eea:	f107 0320 	add.w	r3, r7, #32
 8004eee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ef2:	e882 0003 	stmia.w	r2, {r0, r1}
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f107 0214 	add.w	r2, r7, #20
 8004efc:	ca06      	ldmia	r2, {r1, r2}
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f973 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fba1 	bl	800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8004f1a:	4603      	mov	r3, r0
  }
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fbab 	bl	80056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004f4a:	466a      	mov	r2, sp
 8004f4c:	f107 0320 	add.w	r3, r7, #32
 8004f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f54:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f107 0214 	add.w	r2, r7, #20
 8004f5e:	ca06      	ldmia	r2, {r1, r2}
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f942 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	3728      	adds	r7, #40	@ 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fba5 	bl	80056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8004f7c:	4603      	mov	r3, r0
  }
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8004f86:	b590      	push	{r4, r7, lr}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8004f98:	6938      	ldr	r0, [r7, #16]
 8004f9a:	f000 ff69 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	6938      	ldr	r0, [r7, #16]
 8004fa2:	f000 ff75 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4621      	mov	r1, r4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd ff88 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8004fb4:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f107 0308 	add.w	r3, r7, #8
 8004fbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fc0:	f7fe fc6e 	bl	80038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8004fc4:	bf00      	nop
}
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f017 fe5f 	bl	801cca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2101      	movs	r1, #1
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f017 fe30 	bl	801cc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8004ff0:	bf00      	nop
    }
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fb80 	bl	800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800500a:	4602      	mov	r2, r0
 800500c:	463b      	mov	r3, r7
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fb85 	bl	8005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8005016:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f017 fcc8 	bl	801ca10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f000 fb61 	bl	8005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80050a0:	4603      	mov	r3, r0
 80050a2:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d911      	bls.n	80050ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	2200      	movs	r2, #0
 80050b0:	4619      	mov	r1, r3
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f017 fc8a 	bl	801c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f017 fc71 	bl	801c9a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f017 fc72 	bl	801c9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80050cc:	e005      	b.n	80050da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80050d2:	69f8      	ldr	r0, [r7, #28]
 80050d4:	f017 fc6a 	bl	801c9ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80050d8:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ffb1 	bl	8005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f017 fc5e 	bl	801c9a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80050ec:	4603      	mov	r3, r0
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f017 fcd1 	bl	801ca9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f017 fc57 	bl	801c9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffab 	bl	8005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
    if (slots_)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	4611      	mov	r1, r2
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	4798      	blx	r3
    slots_ = nullptr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	805a      	strh	r2, [r3, #2]
  }
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	00db      	lsls	r3, r3, #3
  }
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	683d      	ldr	r5, [r7, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685e      	ldr	r6, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	885b      	ldrh	r3, [r3, #2]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ffe2 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47a0      	blx	r4
 800519a:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	885a      	ldrh	r2, [r3, #2]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	801a      	strh	r2, [r3, #0]
  }
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4638      	mov	r0, r7
 80051c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e008      	b.n	80051e2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	463b      	mov	r3, r7
 80051d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051da:	f000 fad6 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80051de:	4603      	mov	r3, r0
 80051e0:	bf00      	nop
  }
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80051ea:	b082      	sub	sp, #8
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	1d38      	adds	r0, r7, #4
 80051f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80051fa:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3304      	adds	r3, #4
 8005200:	1d3a      	adds	r2, r7, #4
 8005202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005206:	e883 0003 	stmia.w	r3, {r0, r1}
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	330c      	adds	r3, #12
 800520e:	f107 021c 	add.w	r2, r7, #28
 8005212:	ca07      	ldmia	r2, {r0, r1, r2}
 8005214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	b002      	add	sp, #8
 8005226:	4770      	bx	lr

08005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	4619      	mov	r1, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f7ff fcb0 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005244:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 800524e:	89fb      	ldrh	r3, [r7, #14]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fc75 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8005262:	b5b0      	push	{r4, r5, r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005270:	3b01      	subs	r3, #1
 8005272:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	8afb      	ldrh	r3, [r7, #22]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	441a      	add	r2, r3
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 faad 	bl	80057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fc22 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005294:	4603      	mov	r3, r0
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f857 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80052a6:	e015      	b.n	80052d4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f863 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80052b2:	4605      	mov	r5, r0
 80052b4:	8afb      	ldrh	r3, [r7, #22]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fc27 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4423      	add	r3, r4
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	4629      	mov	r1, r5
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fc38 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d10b      	bne.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 faa1 	bl	800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f083 0301 	eor.w	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8005310:	2300      	movs	r3, #0
 8005312:	e01b      	b.n	800534c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800531c:	1c59      	adds	r1, r3, #1
 800531e:	b288      	uxth	r0, r1
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	8488      	strh	r0, [r1, #36]	@ 0x24
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005336:	d102      	bne.n	800533e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	3b01      	subs	r3, #1
 800533c:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f000 fabe 	bl	80058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 800534a:	68bb      	ldr	r3, [r7, #8]
  }
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005368:	809a      	strh	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
  }
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
  }
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 faa7 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 80053c4:	687b      	ldr	r3, [r7, #4]
  }
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0801e958 	.word	0x0801e958

080053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 faa1 	bl	8005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 80053ee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80053f2:	eeb0 0b47 	vmov.f64	d0, d7
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	4904      	ldr	r1, [pc, #16]	@ (8005418 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fa83 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 800540c:	687b      	ldr	r3, [r7, #4]
  }
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	0801e9a0 	.word	0x0801e9a0

0800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8005428:	2300      	movs	r3, #0
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7fd f956 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e01e      	b.n	800548c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f103 0108 	add.w	r1, r3, #8
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	88db      	ldrh	r3, [r3, #6]
 8005458:	461a      	mov	r2, r3
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fbea 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	466c      	mov	r4, sp
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005470:	e884 0003 	stmia.w	r4, {r0, r1}
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	ca07      	ldmia	r2, {r0, r1, r2}
 8005478:	f000 fa6a 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	e006      	b.n	8005494 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1dd      	bne.n	800544e <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005492:	2300      	movs	r3, #0
  }
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054a4:	687b      	ldr	r3, [r7, #4]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa7f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa86 	bl	80059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80054de:	4603      	mov	r3, r0
  }
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa6f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa82 	bl	8005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80054fe:	4603      	mov	r3, r0
  }
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005516:	f000 fa80 	bl	8005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 800551a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800551e:	eeb0 0b47 	vmov.f64	d0, d7
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	4904      	ldr	r1, [pc, #16]	@ (8005544 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa85 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005538:	687b      	ldr	r3, [r7, #4]
  }
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	0801e9e8 	.word	0x0801e9e8

08005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa75 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005558:	687b      	ldr	r3, [r7, #4]
  }
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0801ea00 	.word	0x0801ea00

08005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa6f 	bl	8005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8005582:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	f000 fa6f 	bl	8005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fa74 	bl	8005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 80055ac:	bf00      	nop
}
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80055b6:	b082      	sub	sp, #8
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	f107 0210 	add.w	r2, r7, #16
 80055d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80055da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	b002      	add	sp, #8
 80055ec:	4770      	bx	lr

080055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80055ee:	b590      	push	{r4, r7, lr}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f7ff ff71 	bl	80054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8005606:	4604      	mov	r4, r0
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f7ff ff5d 	bl	80054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800560e:	4602      	mov	r2, r0
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4621      	mov	r1, r4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fc54 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800561c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005628:	f7fe f95d 	bl	80038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 800562c:	bf00      	nop
}
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd90      	pop	{r4, r7, pc}

08005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f000 fa36 	bl	8005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fa3b 	bl	8005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8005652:	bf00      	nop
}
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800566c:	6938      	ldr	r0, [r7, #16]
 800566e:	f000 fcce 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8005672:	4604      	mov	r4, r0
 8005674:	6938      	ldr	r0, [r7, #16]
 8005676:	f000 fb58 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800567a:	4602      	mov	r2, r0
 800567c:	f107 0308 	add.w	r3, r7, #8
 8005680:	4621      	mov	r1, r4
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fbf3 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8005688:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005692:	f7fe f8e5 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}

080056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80056aa:	6838      	ldr	r0, [r7, #0]
 80056ac:	f000 fa1b 	bl	8005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa20 	bl	8005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 80056bc:	bf00      	nop
}
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f000 fc99 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80056dc:	4604      	mov	r4, r0
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 fb23 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4621      	mov	r1, r4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fd fbbe 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80056f2:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056fc:	f000 fa0d 	bl	8005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}

0800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005712:	687b      	ldr	r3, [r7, #4]
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 800572a:	6838      	ldr	r0, [r7, #0]
 800572c:	f7ff feb6 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005730:	4603      	mov	r3, r0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fa0f 	bl	8005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8005738:	4604      	mov	r4, r0
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe f9a0 	bl	8003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8005744:	7a38      	ldrb	r0, [r7, #8]
 8005746:	f7fe f9df 	bl	8003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800574a:	4603      	mov	r3, r0
 800574c:	81bb      	strh	r3, [r7, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4621      	mov	r1, r4
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa20 	bl	8005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8005758:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005762:	b5b0      	push	{r4, r5, r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800576c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa4a 	bl	8005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8005776:	462a      	mov	r2, r5
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa4f 	bl	8005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8005780:	4603      	mov	r3, r0
    }
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}

0800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800578a:	b580      	push	{r7, lr}
 800578c:	b088      	sub	sp, #32
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	4638      	mov	r0, r7
 8005794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8005798:	f107 0010 	add.w	r0, r7, #16
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	463b      	mov	r3, r7
 80057a6:	cb0c      	ldmia	r3, {r2, r3}
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	f000 fa47 	bl	8005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd f892 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80057be:	2300      	movs	r3, #0
 80057c0:	e00c      	b.n	80057dc <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	6a39      	ldr	r1, [r7, #32]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fd46 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd f8b3 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80057d8:	4603      	mov	r3, r0
 80057da:	bf00      	nop
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fdac 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80057fc:	e01a      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	885a      	ldrh	r2, [r3, #2]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d303      	bcc.n	8005812 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fda2 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005810:	e010      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	885b      	ldrh	r3, [r3, #2]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	b291      	uxth	r1, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	8051      	strh	r1, [r2, #2]
 800581e:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	89fb      	ldrh	r3, [r7, #14]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	89fa      	ldrh	r2, [r7, #14]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f988 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d101      	bne.n	8005854 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005850:	2300      	movs	r3, #0
 8005852:	e034      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d114      	bne.n	8005890 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	897a      	ldrh	r2, [r7, #10]
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	4611      	mov	r1, r2
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	4798      	blx	r3
 8005876:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 800587e:	2300      	movs	r3, #0
 8005880:	e01d      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f017 ff26 	bl	801d6da <memcpy>
 800588e:	e00f      	b.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6a11      	ldr	r1, [r2, #32]
 800589c:	897a      	ldrh	r2, [r7, #10]
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	4798      	blx	r3
 80058a4:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e006      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	897a      	ldrh	r2, [r7, #10]
 80058ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 80058bc:	2301      	movs	r3, #1
  }
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 80058c6:	b5b0      	push	{r4, r5, r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	460b      	mov	r3, r1
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	687d      	ldr	r5, [r7, #4]
 80058dc:	897b      	ldrh	r3, [r7, #10]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc38 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4619      	mov	r1, r3
 80058e8:	4628      	mov	r0, r5
 80058ea:	47a0      	blx	r4
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80058fa:	897a      	ldrh	r2, [r7, #10]
 80058fc:	e000      	b.n	8005900 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80058fe:	2200      	movs	r2, #0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	805a      	strh	r2, [r3, #2]
  }
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bdb0      	pop	{r4, r5, r7, pc}

08005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  return *p;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005942:	eeb0 0b47 	vmov.f64	d0, d7
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005950:	b082      	sub	sp, #8
 8005952:	b590      	push	{r4, r7, lr}
 8005954:	b089      	sub	sp, #36	@ 0x24
 8005956:	af00      	add	r7, sp, #0
 8005958:	1d3c      	adds	r4, r7, #4
 800595a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc fee4 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005968:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800596a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fede 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005974:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d001      	beq.n	8005982 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 800597e:	2300      	movs	r3, #0
 8005980:	e021      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e019      	b.n	80059bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb f9bb 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005992:	4603      	mov	r3, r0
 8005994:	461c      	mov	r4, r3
 8005996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800599a:	69f9      	ldr	r1, [r7, #28]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f9b3 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80059a2:	4603      	mov	r3, r0
 80059a4:	429c      	cmp	r4, r3
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e007      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3e1      	bcc.n	8005988 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 80059c4:	2301      	movs	r3, #1
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	@ 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059d0:	b002      	add	sp, #8
 80059d2:	4770      	bx	lr

080059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80059dc:	687b      	ldr	r3, [r7, #4]
  }
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fa79 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80059f8:	4603      	mov	r3, r0
  }
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
    return client.getData();
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd fa79 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8005a10:	4603      	mov	r3, r0
  }
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8005a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a30:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a34:	eeb0 0b47 	vmov.f64	d0, d7
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return *p;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	ee07 3a90 	vmov	s15, r3
}
 8005a70:	eeb0 0a67 	vmov.f32	s0, s15
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005a86:	687b      	ldr	r3, [r7, #4]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc fe1b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aba:	687b      	ldr	r3, [r7, #4]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc fe01 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aee:	687b      	ldr	r3, [r7, #4]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005b06:	2301      	movs	r3, #1
 8005b08:	2209      	movs	r2, #9
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fc fde7 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	463b      	mov	r3, r7
 8005b22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005b26:	463b      	mov	r3, r7
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ff1f 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005b2e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005b30:	463b      	mov	r3, r7
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe ff26 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005b38:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f902 	bl	8005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e000      	b.n	8005b4e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8005b4c:	2300      	movs	r3, #0
  }
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fc9c 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005b64:	4603      	mov	r3, r0
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f99e 	bl	8005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd fd9e 	bl	80036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b0a1      	sub	sp, #132	@ 0x84
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f999 	bl	8005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005baa:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8005bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8005bb2:	f107 0318 	add.w	r3, r7, #24
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd ff08 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005bbe:	7e3b      	ldrb	r3, [r7, #24]
 8005bc0:	e01f      	b.n	8005c02 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f996 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005bc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fd fac5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f997 	bl	8005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8005bde:	f107 001c 	add.w	r0, r7, #28
 8005be2:	797b      	ldrb	r3, [r7, #5]
 8005be4:	4622      	mov	r2, r4
 8005be6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005be8:	f000 f9ac 	bl	8005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005bec:	4603      	mov	r3, r0
 8005bee:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8005bf0:	f107 031c 	add.w	r3, r7, #28
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffc2 	bl	8005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7fd ff97 	bl	8003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8005c00:	7d3b      	ldrb	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3784      	adds	r7, #132	@ 0x84
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
    }
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08e      	sub	sp, #56	@ 0x38
 8005c42:	af02      	add	r7, sp, #8
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
 8005c48:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005c4c:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8005c50:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005c54:	f7fc fd5b 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fe2a 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005c64:	e05a      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	f107 030c 	add.w	r3, r7, #12
 8005c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fb13 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c7a:	e041      	b.n	8005d00 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8005c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d025      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fc fe4c 	bl	8002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f107 0314 	add.w	r3, r7, #20
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fc ff12 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005c9c:	f107 0320 	add.w	r3, r7, #32
 8005ca0:	f107 0214 	add.w	r2, r7, #20
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f985 	bl	8005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8005cac:	466a      	mov	r2, sp
 8005cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cc2:	f7ff fe45 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ce2:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8005ce6:	e019      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8005ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd faad 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fc fde9 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1b2      	bne.n	8005c7c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fdce 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	3730      	adds	r7, #48	@ 0x30
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d26:	b002      	add	sp, #8
 8005d28:	4770      	bx	lr

08005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f954 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f95b 	bl	8005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005d40:	4603      	mov	r3, r0
  }
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fd fe1d 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005d5e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	2b1a      	cmp	r3, #26
 8005d68:	d87c      	bhi.n	8005e64 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005e23 	.word	0x08005e23
 8005d74:	08005e31 	.word	0x08005e31
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005e65 	.word	0x08005e65
 8005d80:	08005e65 	.word	0x08005e65
 8005d84:	08005e65 	.word	0x08005e65
 8005d88:	08005de3 	.word	0x08005de3
 8005d8c:	08005e65 	.word	0x08005e65
 8005d90:	08005df1 	.word	0x08005df1
 8005d94:	08005e65 	.word	0x08005e65
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005e65 	.word	0x08005e65
 8005da0:	08005e65 	.word	0x08005e65
 8005da4:	08005e65 	.word	0x08005e65
 8005da8:	08005e65 	.word	0x08005e65
 8005dac:	08005e65 	.word	0x08005e65
 8005db0:	08005e65 	.word	0x08005e65
 8005db4:	08005e65 	.word	0x08005e65
 8005db8:	08005e65 	.word	0x08005e65
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e65 	.word	0x08005e65
 8005dc4:	08005e65 	.word	0x08005e65
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005e65 	.word	0x08005e65
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e53 	.word	0x08005e53
        return content_.asBoolean;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	e041      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f921 	bl	800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8005dec:	4603      	mov	r3, r0
 8005dee:	e03a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f92b 	bl	8006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	e033      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	f000 f933 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e02a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f000 f93d 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e021      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f949 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	e01a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f941 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	e012      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	edd3 7a00 	vldr	s15, [r3]
 8005e46:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4a:	f000 f94c 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e009      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	ed93 7b00 	vldr	d7, [r3]
 8005e58:	eeb0 0b47 	vmov.f64	d0, d7
 8005e5c:	f000 f95b 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8005e60:	4603      	mov	r3, r0
 8005e62:	e000      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8005e64:	2300      	movs	r3, #0
  }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f964 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 f96b 	bl	800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8005e86:	4603      	mov	r3, r0
  }
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f954 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 f967 	bl	8006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005ea6:	4603      	mov	r3, r0
  }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	e000      	b.n	8005ec6 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8005ec4:	4b04      	ldr	r3, [pc, #16]	@ (8005ed8 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	0801e210 	.word	0x0801e210

08005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fd f960 	bl	80031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8005eea:	4603      	mov	r3, r0
  }
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd f93d 	bl	800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8005f02:	4603      	mov	r3, r0
  }
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fbbf 	bl	80036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f92c 	bl	800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	619a      	str	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	713a      	strb	r2, [r7, #4]
 8005f50:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8005f52:	783b      	ldrb	r3, [r7, #0]
 8005f54:	4622      	mov	r2, r4
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f929 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa0d 	bl	800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f78:	68b8      	ldr	r0, [r7, #8]
 8005f7a:	f7fc fde8 	bl	8002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8005f8e:	f107 0318 	add.w	r3, r7, #24
 8005f92:	2103      	movs	r1, #3
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fd fd1a 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005f9a:	7e3b      	ldrb	r3, [r7, #24]
 8005f9c:	e007      	b.n	8005fae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8005f9e:	7dfa      	ldrb	r2, [r7, #23]
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fd fd11 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005fac:	7f3b      	ldrb	r3, [r7, #28]
  }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	@ 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}

08005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f000 f9ef 	bl	80063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fc fc6a 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8005fe8:	687b      	ldr	r3, [r7, #4]
  }
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9db 	bl	80063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8006004:	4603      	mov	r3, r0
  }
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffe2 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 800601c:	4603      	mov	r3, r0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f9d9 	bl	80063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8006024:	4603      	mov	r3, r0
  }
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9d9 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	e000      	b.n	8006048 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9d9 	bl	8006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	e000      	b.n	800606a <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800607c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006080:	f000 f9dc 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	e000      	b.n	8006090 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a6:	f000 f9e1 	bl	800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	e000      	b.n	80060b6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fec7 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9e6 	bl	80064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80060f4:	f000 fa1e 	bl	8006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 80060fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 3a90 	vmov	r3, s15
 800610a:	e000      	b.n	800610e <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006120:	ed97 0b00 	vldr	d0, [r7]
 8006124:	f000 fa34 	bl	8006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d006      	beq.n	800613c <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 800612e:	ed97 7b00 	vldr	d7, [r7]
 8006132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006136:	ee17 3a90 	vmov	r3, s15
 800613a:	e000      	b.n	800613e <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800614e:	687b      	ldr	r3, [r7, #4]
  }
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fa39 	bl	80065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 800616a:	4603      	mov	r3, r0
  }
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa49 	bl	8006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8006182:	4603      	mov	r3, r0
  }
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	713a      	strb	r2, [r7, #4]
 80061bc:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa36 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
    if (err)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e0d2      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa62 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b7b      	cmp	r3, #123	@ 0x7b
 80061dc:	f300 80ba 	bgt.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061e0:	2b5b      	cmp	r3, #91	@ 0x5b
 80061e2:	da04      	bge.n	80061ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 80061e4:	2b22      	cmp	r3, #34	@ 0x22
 80061e6:	d07b      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061e8:	2b27      	cmp	r3, #39	@ 0x27
 80061ea:	d079      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061ec:	e0b2      	b.n	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061ee:	3b5b      	subs	r3, #91	@ 0x5b
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	f200 80af 	bhi.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006281 	.word	0x08006281
 8006200:	08006355 	.word	0x08006355
 8006204:	08006355 	.word	0x08006355
 8006208:	08006355 	.word	0x08006355
 800620c:	08006355 	.word	0x08006355
 8006210:	08006355 	.word	0x08006355
 8006214:	08006355 	.word	0x08006355
 8006218:	08006355 	.word	0x08006355
 800621c:	08006355 	.word	0x08006355
 8006220:	08006355 	.word	0x08006355
 8006224:	08006355 	.word	0x08006355
 8006228:	08006327 	.word	0x08006327
 800622c:	08006355 	.word	0x08006355
 8006230:	08006355 	.word	0x08006355
 8006234:	08006355 	.word	0x08006355
 8006238:	08006355 	.word	0x08006355
 800623c:	08006355 	.word	0x08006355
 8006240:	08006355 	.word	0x08006355
 8006244:	08006355 	.word	0x08006355
 8006248:	08006349 	.word	0x08006349
 800624c:	08006355 	.word	0x08006355
 8006250:	08006355 	.word	0x08006355
 8006254:	08006355 	.word	0x08006355
 8006258:	08006355 	.word	0x08006355
 800625c:	08006355 	.word	0x08006355
 8006260:	08006305 	.word	0x08006305
 8006264:	08006355 	.word	0x08006355
 8006268:	08006355 	.word	0x08006355
 800626c:	08006355 	.word	0x08006355
 8006270:	08006355 	.word	0x08006355
 8006274:	08006355 	.word	0x08006355
 8006278:	08006355 	.word	0x08006355
 800627c:	080062b1 	.word	0x080062b1
        if (filter.allowArray())
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd fbdd 	bl	8003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7fc fcdc 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8006294:	4601      	mov	r1, r0
 8006296:	783b      	ldrb	r3, [r7, #0]
 8006298:	462a      	mov	r2, r5
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa15 	bl	80066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e069      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 80062a4:	7839      	ldrb	r1, [r7, #0]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa95 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80062ac:	4603      	mov	r3, r0
 80062ae:	e063      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd fbd0 	bl	8003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7fc fcec 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 80062c4:	4601      	mov	r1, r0
 80062c6:	783b      	ldrb	r3, [r7, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fac6 	bl	800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e051      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 80062d4:	7839      	ldrb	r1, [r7, #0]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fbac 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 80062dc:	4603      	mov	r3, r0
 80062de:	e04b      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fbc3 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fc1f 	bl	8006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e03e      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fc3b 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006300:	4603      	mov	r3, r0
 8006302:	e039      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fbb1 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8006312:	2101      	movs	r1, #1
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f7fc fc47 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800631a:	4919      	ldr	r1, [pc, #100]	@ (8006380 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc5f 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006322:	4603      	mov	r3, r0
 8006324:	e028      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd fba0 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8006334:	2100      	movs	r1, #0
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7fc fc36 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800633c:	4911      	ldr	r1, [pc, #68]	@ (8006384 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc4e 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006344:	4603      	mov	r3, r0
 8006346:	e017      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8006348:	490f      	ldr	r1, [pc, #60]	@ (8006388 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fc48 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006350:	4603      	mov	r3, r0
 8006352:	e011      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fb89 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc61 	bl	8006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 800636a:	4603      	mov	r3, r0
 800636c:	e004      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fd04 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8006374:	4603      	mov	r3, r0
 8006376:	bf00      	nop
  }
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}
 8006380:	0801e484 	.word	0x0801e484
 8006384:	0801e48c 	.word	0x0801e48c
 8006388:	0801e494 	.word	0x0801e494

0800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    return current_;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	791b      	ldrb	r3, [r3, #4]
  }
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80063ac:	687b      	ldr	r3, [r7, #4]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fcf6 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80063cc:	4603      	mov	r3, r0
  }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fd04 	bl	8006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 80063e4:	4603      	mov	r3, r0
  }
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80063f6:	f000 f8c2 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4293      	cmp	r3, r2
 8006400:	bf94      	ite	ls
 8006402:	2301      	movls	r3, #1
 8006404:	2300      	movhi	r3, #0
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 800641e:	2300      	movs	r3, #0
 8006420:	e008      	b.n	8006434 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006422:	f000 f8ac 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf2c      	ite	cs
 800642e:	2301      	movcs	r3, #1
 8006430:	2300      	movcc	r3, #0
 8006432:	b2db      	uxtb	r3, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006446:	f000 f89a 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800644a:	4603      	mov	r3, r0
 800644c:	2200      	movs	r2, #0
 800644e:	461c      	mov	r4, r3
 8006450:	4615      	mov	r5, r2
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	4294      	cmp	r4, r2
 8006458:	eb75 0303 	sbcs.w	r3, r5, r3
 800645c:	bf2c      	ite	cs
 800645e:	2301      	movcs	r3, #1
 8006460:	2300      	movcc	r3, #0
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bdb0      	pop	{r4, r5, r7, pc}

0800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da01      	bge.n	8006482 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 800647e:	2300      	movs	r3, #0
 8006480:	e00e      	b.n	80064a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006482:	f000 f87c 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006486:	4603      	mov	r3, r0
 8006488:	2200      	movs	r2, #0
 800648a:	461c      	mov	r4, r3
 800648c:	4615      	mov	r5, r2
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	4294      	cmp	r4, r2
 8006494:	eb75 0303 	sbcs.w	r3, r5, r3
 8006498:	bfac      	ite	ge
 800649a:	2301      	movge	r3, #1
 800649c:	2300      	movlt	r3, #0
 800649e:	b2db      	uxtb	r3, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}

080064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d82e      	bhi.n	8006518 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e3 	.word	0x080064e3
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	08006507 	.word	0x08006507
        return convertNumber<T>(value_.asFloat);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80064d6:	eeb0 0a67 	vmov.f32	s0, s15
 80064da:	f7ff fe04 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80064de:	4603      	mov	r3, r0
 80064e0:	e01b      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7ff fdd4 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80064f0:	4603      	mov	r3, r0
 80064f2:	e012      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7ff fdb8 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8006502:	4603      	mov	r3, r0
 8006504:	e009      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	ed93 7b02 	vldr	d7, [r3, #8]
 800650c:	eeb0 0b47 	vmov.f64	d0, d7
 8006510:	f7ff fe01 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8006514:	4603      	mov	r3, r0
 8006516:	e000      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8006518:	2300      	movs	r3, #0
  }
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
    return 0;
 8006528:	2300      	movs	r3, #0
  }
 800652a:	4618      	mov	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800653e:	f7ff fff1 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006542:	ee07 0a90 	vmov	s15, r0
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	ed97 7a01 	vldr	s14, [r7, #4]
 800654e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	db0d      	blt.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8006558:	2000      	movs	r0, #0
 800655a:	f000 fc63 	bl	8006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 800655e:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8006562:	edd7 7a01 	vldr	s15, [r7, #4]
 8006566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d801      	bhi.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
    return T(-1);
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800659a:	f7ff ffc3 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 800659e:	ee07 0a90 	vmov	s15, r0
 80065a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065a6:	ed97 6b00 	vldr	d6, [r7]
 80065aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b2:	db0e      	blt.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80065b4:	f7ff ffe3 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80065b8:	ee07 0a90 	vmov	s15, r0
 80065bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80065c0:	ed97 6b00 	vldr	d6, [r7]
 80065c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065cc:	d801      	bhi.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b085      	sub	sp, #20
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc2b 	bl	8006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 80065ee:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fc7d 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80065fa:	4602      	mov	r2, r0
    return VariantData::getMember(
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	9200      	str	r2, [sp, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fc29 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800660a:	4603      	mov	r3, r0
  }
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}

08006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fc67 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8006626:	4603      	mov	r3, r0
  }
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f82f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8006644:	2b00      	cmp	r3, #0
 8006646:	db1d      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006648:	2b20      	cmp	r3, #32
 800664a:	dc1b      	bgt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800664c:	2b09      	cmp	r3, #9
 800664e:	db19      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006650:	3b09      	subs	r3, #9
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800666a:	e00b      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8006674:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8006676:	e00b      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8006678:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800667a:	e009      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8006682:	e004      	b.n	800668e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800668e:	e7d3      	b.n	8006638 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	00800013 	.word	0x00800013

0800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3310      	adds	r3, #16
 80066a8:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	795b      	ldrb	r3, [r3, #5]
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ff1a 	bl	80074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	791b      	ldrb	r3, [r3, #4]
  }
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 80066ca:	b590      	push	{r4, r7, lr}
 80066cc:	b089      	sub	sp, #36	@ 0x24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	713a      	strb	r2, [r7, #4]
 80066d6:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80066d8:	463b      	mov	r3, r7
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fa03 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80066e6:	2305      	movs	r3, #5
 80066e8:	e071      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fbcf 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff9d 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80066f6:	4603      	mov	r3, r0
 80066f8:	77fb      	strb	r3, [r7, #31]
    if (err)
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	e064      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8006704:	215d      	movs	r1, #93	@ 0x5d
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fbce 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8006712:	2300      	movs	r3, #0
 8006714:	e05b      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	f107 0214 	add.w	r2, r7, #20
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fbdd 	bl	8006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8006728:	f107 0310 	add.w	r3, r7, #16
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd f97d 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01c      	beq.n	8006772 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4619      	mov	r1, r3
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7fc fd3f 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8006744:	61b8      	str	r0, [r7, #24]
        if (!value)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800674c:	2304      	movs	r3, #4
 800674e:	e03e      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8006750:	463b      	mov	r3, r7
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f9b4 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006758:	4603      	mov	r3, r0
 800675a:	4622      	mov	r2, r4
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fd26 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006764:	4603      	mov	r3, r0
 8006766:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800676e:	7ffb      	ldrb	r3, [r7, #31]
 8006770:	e02d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8006772:	463b      	mov	r3, r7
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd f9a3 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800677a:	4603      	mov	r3, r0
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fbbc 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006784:	4603      	mov	r3, r0
 8006786:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006788:	7ffb      	ldrb	r3, [r7, #31]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800678e:	7ffb      	ldrb	r3, [r7, #31]
 8006790:	e01d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff4c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006798:	4603      	mov	r3, r0
 800679a:	77fb      	strb	r3, [r7, #31]
      if (err)
 800679c:	7ffb      	ldrb	r3, [r7, #31]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80067a2:	7ffb      	ldrb	r3, [r7, #31]
 80067a4:	e013      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80067a6:	215d      	movs	r1, #93	@ 0x5d
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fb7d 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e00a      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80067b8:	212c      	movs	r1, #44	@ 0x2c
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fb74 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f083 0301 	eor.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ad      	beq.n	8006728 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80067cc:	2303      	movs	r3, #3
  }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	@ 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80067e0:	463b      	mov	r3, r7
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd f97f 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80067ee:	2305      	movs	r3, #5
 80067f0:	e030      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fb4b 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80067f8:	463b      	mov	r3, r7
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd f960 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006800:	4603      	mov	r3, r0
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb79 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	e01d      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff09 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	e013      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 800682c:	215d      	movs	r1, #93	@ 0x5d
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb3a 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800683a:	2300      	movs	r3, #0
 800683c:	e00a      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800683e:	212c      	movs	r1, #44	@ 0x2c
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb31 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006846:	4603      	mov	r3, r0
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0d2      	beq.n	80067f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8006852:	2303      	movs	r3, #3
  }
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b091      	sub	sp, #68	@ 0x44
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	713a      	strb	r2, [r7, #4]
 8006868:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800686a:	463b      	mov	r3, r7
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd f93a 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8006878:	2305      	movs	r3, #5
 800687a:	e0d7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fb06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fed4 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800688e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8006896:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800689a:	e0c7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 800689c:	217d      	movs	r1, #125	@ 0x7d
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb02 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e0be      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fbba 	bl	8007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80068c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068c6:	e0b1      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff feb1 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80068dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068e0:	e0a4      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80068e2:	213a      	movs	r1, #58	@ 0x3a
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fadf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e098      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc ff92 	bl	800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8006908:	f107 0214 	add.w	r2, r7, #20
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fba9 	bl	8007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd f886 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d040      	beq.n	80069a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8006926:	f107 0320 	add.w	r3, r7, #32
 800692a:	f107 0214 	add.w	r2, r7, #20
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f9c0 	bl	8004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	f107 0320 	add.w	r3, r7, #32
 8006940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f7fe ff21 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006948:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d111      	bne.n	8006974 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4618      	mov	r0, r3
 8006954:	f7fc fee6 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006958:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	461a      	mov	r2, r3
 8006960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f000 fb8c 	bl	8007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8006968:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8006970:	2304      	movs	r3, #4
 8006972:	e05b      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	4619      	mov	r1, r3
 800697a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800697c:	f7fc ffd6 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8006980:	463b      	mov	r3, r7
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd f89c 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006988:	4603      	mov	r3, r0
 800698a:	4622      	mov	r2, r4
 800698c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fc0e 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800699a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069a6:	e041      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 80069a8:	463b      	mov	r3, r7
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fd f888 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 faa1 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80069c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069cc:	e02e      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fe2e 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80069da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80069e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069e6:	e021      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80069e8:	217d      	movs	r1, #125	@ 0x7d
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa5c 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e018      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80069fa:	212c      	movs	r1, #44	@ 0x2c
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fa53 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f083 0301 	eor.w	r3, r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e00c      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fe0c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af43 	beq.w	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	373c      	adds	r7, #60	@ 0x3c
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006a3e:	463b      	mov	r3, r7
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd f850 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006a4c:	2305      	movs	r3, #5
 8006a4e:	e06d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa1c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fdea 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	e060      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8006a6a:	217d      	movs	r1, #125	@ 0x7d
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa1b 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e057      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb54 	bl	800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	e04d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fdcd 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	e043      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8006aa4:	213a      	movs	r1, #58	@ 0x3a
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9fe 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e037      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8006abc:	463b      	mov	r3, r7
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc fffe 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa17 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	e027      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fda7 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	e01d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8006af0:	217d      	movs	r1, #125	@ 0x7d
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9d8 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e014      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8006b02:	212c      	movs	r1, #44	@ 0x2c
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9cf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f083 0301 	eor.w	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e008      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fd88 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0a8      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
  }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fdd7 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb0b 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	e009      	b.n	8006b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fc fde1 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4619      	mov	r1, r3
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	f7fc f83f 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8006b6c:	2300      	movs	r3, #0
  }
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fd8c 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
    move();
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f980 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fd84 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
      move();
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f978 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8006b9e:	7bba      	ldrb	r2, [r7, #14]
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d016      	beq.n	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8006bac:	2302      	movs	r3, #2
 8006bae:	e013      	b.n	8006bd8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bb4:	d1eb      	bne.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fd70 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e0      	beq.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f95e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8006bd2:	e7dc      	b.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8006bd4:	bf00      	nop
    return DeserializationError::Ok;
 8006bd6:	2300      	movs	r3, #0
  }
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
    while (*s) {
 8006bea:	e016      	b.n	8006c1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fd55 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e011      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d001      	beq.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e00a      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	603b      	str	r3, [r7, #0]
      move();
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f93a 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e4      	bne.n	8006bec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 8006c22:	2300      	movs	r3, #0
  }
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fd2e 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c40:	4603      	mov	r3, r0
 8006c42:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c44:	e00f      	b.n	8006c66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f921 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8006c4c:	7fba      	ldrb	r2, [r7, #30]
 8006c4e:	7ffb      	ldrb	r3, [r7, #31]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	77f9      	strb	r1, [r7, #31]
 8006c54:	4619      	mov	r1, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	440b      	add	r3, r1
 8006c5a:	771a      	strb	r2, [r3, #28]
      c = current();
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fd1d 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c66:	7fbb      	ldrb	r3, [r7, #30]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fafb 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
 8006c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c78:	d801      	bhi.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e0      	bne.n	8006c46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 021c 	add.w	r2, r3, #28
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd f8e0 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd f894 	bl	8003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	3b01      	subs	r3, #1
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d85e      	bhi.n	8006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006cc9 	.word	0x08006cc9
 8006cc4:	08006d45 	.word	0x08006d45
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fd f89a 	bl	8003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6989      	ldr	r1, [r1, #24]
 8006cda:	9100      	str	r1, [sp, #0]
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f000 fae5 	bl	80072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e042      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006cec:	2304      	movs	r3, #4
 8006cee:	e040      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd f878 	bl	8003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	6989      	ldr	r1, [r1, #24]
 8006d02:	9100      	str	r1, [sp, #0]
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f000 fb13 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e02e      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d14:	2304      	movs	r3, #4
 8006d16:	e02c      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd f880 	bl	8003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 8006d22:	eef0 7a40 	vmov.f32	s15, s0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f000 fb3f 	bl	80073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e018      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d40:	2304      	movs	r3, #4
 8006d42:	e016      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd f879 	bl	8003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8006d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	4619      	mov	r1, r3
 8006d58:	eeb0 0b47 	vmov.f64	d0, d7
 8006d5c:	6838      	ldr	r0, [r7, #0]
 8006d5e:	f000 fb3d 	bl	80073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	e000      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8006d70:	2303      	movs	r3, #3
  }
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    char c = current();
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fc89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006d8e:	e007      	b.n	8006da0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f87c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fc80 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa5e 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8006dae:	2300      	movs	r3, #0
  }
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc f990 	bl	80030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8006dc6:	4603      	mov	r3, r0
  }
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb4c 	bl	8007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 8006dde:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006de2:	eeb0 0a67 	vmov.f32	s0, s15
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fb4c 	bl	8007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 8006dfe:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ffd7 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8006e0a:	4602      	mov	r2, r0
    return VariantData::getMember(
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9200      	str	r2, [sp, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f821 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8006e1a:	4603      	mov	r3, r0
  }
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd90      	pop	{r4, r7, pc}

08006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8006e2c:	4804      	ldr	r0, [pc, #16]	@ (8006e40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 8006e2e:	f7ff ffcf 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8006e32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e36:	eeb0 0a67 	vmov.f32	s0, s15
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	4f7fffff 	.word	0x4f7fffff

08006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fc f9a0 	bl	8003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8006e52:	4603      	mov	r3, r0
  }
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	4638      	mov	r0, r7
 8006e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e008      	b.n	8006e86 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e7e:	f000 fb16 	bl	80074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	bf00      	nop
  }
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3310      	adds	r3, #16
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb1c 	bl	80074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fbf1 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e003      	b.n	8006eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ffdb 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8006ed8:	2301      	movs	r3, #1
  }
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8006eec:	bf00      	nop
  }
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fb92 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	e07c      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fbbe 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b7b      	cmp	r3, #123	@ 0x7b
 8006f24:	dc71      	bgt.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f26:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f28:	da04      	bge.n	8006f34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8006f2a:	2b22      	cmp	r3, #34	@ 0x22
 8006f2c:	d056      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f2e:	2b27      	cmp	r3, #39	@ 0x27
 8006f30:	d054      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f32:	e06a      	b.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f34:	3b5b      	subs	r3, #91	@ 0x5b
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d867      	bhi.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	0800700b 	.word	0x0800700b
 8006f48:	0800700b 	.word	0x0800700b
 8006f4c:	0800700b 	.word	0x0800700b
 8006f50:	0800700b 	.word	0x0800700b
 8006f54:	0800700b 	.word	0x0800700b
 8006f58:	0800700b 	.word	0x0800700b
 8006f5c:	0800700b 	.word	0x0800700b
 8006f60:	0800700b 	.word	0x0800700b
 8006f64:	0800700b 	.word	0x0800700b
 8006f68:	0800700b 	.word	0x0800700b
 8006f6c:	08006ff3 	.word	0x08006ff3
 8006f70:	0800700b 	.word	0x0800700b
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800700b 	.word	0x0800700b
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	08006fff 	.word	0x08006fff
 8006f90:	0800700b 	.word	0x0800700b
 8006f94:	0800700b 	.word	0x0800700b
 8006f98:	0800700b 	.word	0x0800700b
 8006f9c:	0800700b 	.word	0x0800700b
 8006fa0:	0800700b 	.word	0x0800700b
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	0800700b 	.word	0x0800700b
 8006fac:	0800700b 	.word	0x0800700b
 8006fb0:	0800700b 	.word	0x0800700b
 8006fb4:	0800700b 	.word	0x0800700b
 8006fb8:	0800700b 	.word	0x0800700b
 8006fbc:	0800700b 	.word	0x0800700b
 8006fc0:	08006fd1 	.word	0x08006fd1
        return skipArray(nestingLimit);
 8006fc4:	7839      	ldrb	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fc05 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e021      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8006fd0:	7839      	ldrb	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fd2e 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	e01b      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fdca 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e016      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8006fe6:	490d      	ldr	r1, [pc, #52]	@ (800701c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdf9 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e010      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8006ff2:	490b      	ldr	r1, [pc, #44]	@ (8007020 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fdf3 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e00a      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8006ffe:	4909      	ldr	r1, [pc, #36]	@ (8007024 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fded 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007006:	4603      	mov	r3, r0
 8007008:	e004      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff feb6 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007010:	4603      	mov	r3, r0
 8007012:	bf00      	nop
  }
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	0801e484 	.word	0x0801e484
 8007020:	0801e48c 	.word	0x0801e48c
 8007024:	0801e494 	.word	0x0801e494

08007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fc fb5e 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fb2f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800703e:	4603      	mov	r3, r0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa6c 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f888 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8007052:	4603      	mov	r3, r0
 8007054:	e004      	b.n	8007060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa75 	bl	8007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 800705c:	4603      	mov	r3, r0
 800705e:	bf00      	nop
  }
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8007072:	bf00      	nop
  }
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc f9de 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fc7d 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e037      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80070b2:	f107 0310 	add.w	r3, r7, #16
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fc f9cb 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fc6a 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f083 0301 	eor.w	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e024      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 80070d8:	f107 0318 	add.w	r3, r7, #24
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fc86 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80070e2:	4603      	mov	r3, r0
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb fd6f 	bl	8002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f083 0301 	eor.w	r3, r3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e011      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f107 0218 	add.w	r2, r7, #24
 800710e:	ca06      	ldmia	r2, {r1, r2}
 8007110:	f7fc f919 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fc50 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800711e:	4603      	mov	r3, r0
 8007120:	bf00      	nop
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fab2 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007138:	4603      	mov	r3, r0
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f9ef 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fd15 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800714c:	4603      	mov	r3, r0
 800714e:	e004      	b.n	800715a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa31 	bl	80075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8007156:	4603      	mov	r3, r0
 8007158:	bf00      	nop
  }
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fd14 	bl	8003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fa91 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800717a:	4603      	mov	r3, r0
 800717c:	75bb      	strb	r3, [r7, #22]
    move();
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fe85 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fa89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
      move();
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fe7d 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8007194:	7dfa      	ldrb	r2, [r7, #23]
 8007196:	7dbb      	ldrb	r3, [r7, #22]
 8007198:	429a      	cmp	r2, r3
 800719a:	d051      	beq.n	8007240 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e05a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80071aa:	d140      	bne.n	800722e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fa75 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80071bc:	2302      	movs	r3, #2
 80071be:	e04d      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	2b75      	cmp	r3, #117	@ 0x75
 80071c4:	d125      	bne.n	8007212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fe61 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 80071cc:	f107 030a 	add.w	r3, r7, #10
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa0e 	bl	80075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 80071d8:	4603      	mov	r3, r0
 80071da:	757b      	strb	r3, [r7, #21]
          if (err)
 80071dc:	7d7b      	ldrb	r3, [r7, #21]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 80071e2:	7d7b      	ldrb	r3, [r7, #21]
 80071e4:	e03a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 80071e6:	897a      	ldrh	r2, [r7, #10]
 80071e8:	f107 030c 	add.w	r3, r7, #12
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc fce5 	bl	8003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d020      	beq.n	800723c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fd0f 	bl	8003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f000 fa2b 	bl	8007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8007210:	e7b8      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	4618      	mov	r0, r3
 8007216:	f7fc fa0c 	bl	8003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8007224:	2303      	movs	r3, #3
 8007226:	e019      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fe30 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7dfa      	ldrb	r2, [r7, #23]
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7fc fab6 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 800723a:	e7a3      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 800723c:	bf00      	nop
    for (;;) {
 800723e:	e7a1      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8007240:	bf00      	nop
    if (!stringBuilder_.isValid())
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc fae0 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800724a:	4603      	mov	r3, r0
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8007256:	2304      	movs	r3, #4
 8007258:	e000      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800725a:	2300      	movs	r3, #0
  }
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2239      	movs	r2, #57	@ 0x39
 8007272:	2130      	movs	r1, #48	@ 0x30
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fa7a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800727a:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10e      	bne.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b2b      	cmp	r3, #43	@ 0x2b
 8007284:	d00b      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	2b2d      	cmp	r3, #45	@ 0x2d
 800728a:	d008      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007290:	d005      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b65      	cmp	r3, #101	@ 0x65
 8007296:	d002      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	2b45      	cmp	r3, #69	@ 0x45
 800729c:	d101      	bne.n	80072a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 80072a2:	2300      	movs	r3, #0
  }
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 80072ac:	b5b0      	push	{r4, r5, r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 80072b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072bc:	f7ff f8be 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	220a      	movs	r2, #10
 80072ca:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e028      	b.n	8007326 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 80072d4:	f107 0310 	add.w	r3, r7, #16
 80072d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc f93f 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80072e0:	f107 0310 	add.w	r3, r7, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa5c 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f083 0301 	eor.w	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e016      	b.n	8007328 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	221a      	movs	r2, #26
 80072fe:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007300:	f107 0310 	add.w	r3, r7, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fa5d 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8007312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007316:	f107 0310 	add.w	r3, r7, #16
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fa5e 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007320:	4603      	mov	r3, r0
 8007322:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8007326:	2301      	movs	r3, #1
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bdb0      	pop	{r4, r5, r7, pc}

08007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007330:	b5b0      	push	{r4, r5, r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 800733c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007340:	f000 fa58 	bl	80077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	220c      	movs	r2, #12
 800734e:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e028      	b.n	80073aa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc f8fd 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007364:	f107 0310 	add.w	r3, r7, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fa1a 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800736e:	4603      	mov	r3, r0
 8007370:	f083 0301 	eor.w	r3, r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 800737a:	2300      	movs	r3, #0
 800737c:	e016      	b.n	80073ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	221c      	movs	r2, #28
 8007382:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007384:	f107 0310 	add.w	r3, r7, #16
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fa1b 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8007396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739a:	f107 0310 	add.w	r3, r7, #16
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa1c 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 80073aa:	2301      	movs	r3, #1
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}

080073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80073c0:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	220e      	movs	r2, #14
 80073c6:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	601a      	str	r2, [r3, #0]
    return true;
 80073ce:	2301      	movs	r3, #1
  }
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 80073dc:	b5b0      	push	{r4, r5, r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	ed87 0b00 	vstr	d0, [r7]
 80073e8:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 80073ea:	ed97 7b00 	vldr	d7, [r7]
 80073ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 80073f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80073fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073fe:	ed97 6b00 	vldr	d6, [r7]
 8007402:	eeb4 6b47 	vcmp.f64	d6, d7
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d106      	bne.n	800741a <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	220e      	movs	r2, #14
 8007410:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e028      	b.n	800746c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fc f89c 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f9b9 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007430:	4603      	mov	r3, r0
 8007432:	f083 0301 	eor.w	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 800743c:	2300      	movs	r3, #0
 800743e:	e016      	b.n	800746e <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	221e      	movs	r2, #30
 8007444:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007446:	f107 0314 	add.w	r3, r7, #20
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f9ba 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8007458:	e9d7 4500 	ldrd	r4, r5, [r7]
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f9bb 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007466:	4603      	mov	r3, r0
 8007468:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800746c:	2301      	movs	r3, #1
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bdb0      	pop	{r4, r5, r7, pc}

08007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	ee07 3a90 	vmov	s15, r3
}
 8007488:	eeb0 0a67 	vmov.f32	s0, s15
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb fe2d 	bl	80030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 80074a4:	4603      	mov	r3, r0
  }
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af02      	add	r7, sp, #8
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	4638      	mov	r0, r7
 80074b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7fb faf3 	bl	8002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	463b      	mov	r3, r7
 80074c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ca:	f7fd fe75 	bl	80051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 80074ce:	4603      	mov	r3, r0
  }
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	715a      	strb	r2, [r3, #5]
  }
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f99f 	bl	8007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8007502:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	715a      	strb	r2, [r3, #5]
  }
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b27      	cmp	r3, #39	@ 0x27
 800752c:	d002      	beq.n	8007534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b22      	cmp	r3, #34	@ 0x22
 8007532:	d101      	bne.n	8007538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8007538:	2300      	movs	r3, #0
  }
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
    char c = current();
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff f8a4 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f980 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d015      	beq.n	8007592 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fc91 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7bfa      	ldrb	r2, [r7, #15]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7fc f917 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f88f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f96b 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ea      	bne.n	8007566 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8007590:	e001      	b.n	8007596 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8007592:	2303      	movs	r3, #3
 8007594:	e00c      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fc f936 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800759e:	4603      	mov	r3, r0
 80075a0:	f083 0301 	eor.w	r3, r3, #1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 80075aa:	2304      	movs	r3, #4
 80075ac:	e000      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80075ae:	2300      	movs	r3, #0
  }
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
    char c = current();
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff f86b 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075ca:	e007      	b.n	80075dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fc5e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f862 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f93e 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 80075ea:	2300      	movs	r3, #0
  }
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    result = 0;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e025      	b.n	8007656 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f846 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800761a:	2302      	movs	r3, #2
 800761c:	e01f      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f944 	bl	80078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8007626:	4603      	mov	r3, r0
 8007628:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d901      	bls.n	8007634 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8007630:	2303      	movs	r3, #3
 8007632:	e014      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	b21a      	sxth	r2, r3
 800763c:	7b7b      	ldrb	r3, [r7, #13]
 800763e:	b21b      	sxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b21b      	sxth	r3, r3
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	801a      	strh	r2, [r3, #0]
      move();
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fc1f 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	3301      	adds	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b03      	cmp	r3, #3
 800765a:	d9d6      	bls.n	800760a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800765c:	2300      	movs	r3, #0
  }
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b7f      	cmp	r3, #127	@ 0x7f
 8007674:	d806      	bhi.n	8007684 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	6838      	ldr	r0, [r7, #0]
 800767e:	f7fc f892 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8007682:	e070      	b.n	8007766 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8007684:	f107 030c 	add.w	r3, r7, #12
 8007688:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	617a      	str	r2, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076a2:	b2d9      	uxtb	r1, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	617a      	str	r2, [r7, #20]
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	2b1f      	cmp	r3, #31
 80076b8:	d80a      	bhi.n	80076d0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 80076ba:	8a7b      	ldrh	r3, [r7, #18]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	617a      	str	r2, [r7, #20]
 80076ca:	460a      	mov	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e03e      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80076d0:	8a7b      	ldrh	r3, [r7, #18]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	617a      	str	r2, [r7, #20]
 80076e6:	460a      	mov	r2, r1
 80076e8:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 80076f0:	8a7b      	ldrh	r3, [r7, #18]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d80a      	bhi.n	800770c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 80076f6:	8a7b      	ldrh	r3, [r7, #18]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f063 031f 	orn	r3, r3, #31
 80076fe:	b2d9      	uxtb	r1, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	617a      	str	r2, [r7, #20]
 8007706:	460a      	mov	r2, r1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e020      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800771a:	b2d9      	uxtb	r1, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	617a      	str	r2, [r7, #20]
 8007722:	460a      	mov	r2, r1
 8007724:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800772c:	8a7b      	ldrh	r3, [r7, #18]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f063 030f 	orn	r3, r3, #15
 8007734:	b2d9      	uxtb	r1, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	617a      	str	r2, [r7, #20]
 800773c:	460a      	mov	r2, r1
 800773e:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8007740:	e005      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7fc f82c 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	3b01      	subs	r3, #1
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf14      	ite	ne
 800775c:	2301      	movne	r3, #1
 800775e:	2300      	moveq	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ed      	bne.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	4603      	mov	r3, r0
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	460b      	mov	r3, r1
 800777a:	71bb      	strb	r3, [r7, #6]
 800777c:	4613      	mov	r3, r2
 800777e:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8007780:	79ba      	ldrb	r2, [r7, #6]
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d805      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007788:	79fa      	ldrb	r2, [r7, #7]
 800778a:	797b      	ldrb	r3, [r7, #5]
 800778c:	429a      	cmp	r2, r3
 800778e:	d801      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8007794:	2300      	movs	r3, #0
  }
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
  }
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    return id_;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	889b      	ldrh	r3, [r3, #4]
  }
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    return ptr_;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
  }
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80077f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007800:	f000 f86e 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8007804:	4603      	mov	r3, r0
 8007806:	17da      	asrs	r2, r3, #31
 8007808:	4698      	mov	r8, r3
 800780a:	4691      	mov	r9, r2
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	4542      	cmp	r2, r8
 8007812:	eb73 0309 	sbcs.w	r3, r3, r9
 8007816:	db0d      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8007818:	f000 f86b 	bl	80078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800781c:	4603      	mov	r3, r0
 800781e:	17da      	asrs	r2, r3, #31
 8007820:	461c      	mov	r4, r3
 8007822:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	4294      	cmp	r4, r2
 800782a:	eb75 0303 	sbcs.w	r3, r5, r3
 800782e:	db01      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	1c59      	adds	r1, r3, #1
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6011      	str	r1, [r2, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
  }
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	2239      	movs	r2, #57	@ 0x39
 800786e:	2130      	movs	r1, #48	@ 0x30
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff7c 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d111      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	227a      	movs	r2, #122	@ 0x7a
 8007880:	215f      	movs	r1, #95	@ 0x5f
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff ff73 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	225a      	movs	r2, #90	@ 0x5a
 8007892:	2141      	movs	r1, #65	@ 0x41
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff6a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800789a:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 80078a4:	2300      	movs	r3, #0
  }
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	4603      	mov	r3, r0
 80078b6:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	d803      	bhi.n	80078c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	3b30      	subs	r3, #48	@ 0x30
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	e006      	b.n	80078d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f023 0320 	bic.w	r3, r3, #32
 80078cc:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	3b37      	subs	r3, #55	@ 0x37
 80078d2:	b2db      	uxtb	r3, r3
  }
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80078e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 80078f2:	b580      	push	{r7, lr}
 80078f4:	af00      	add	r7, sp, #0
    return T(~lowest());
 80078f6:	f7ff fff3 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 80078fa:	4603      	mov	r3, r0
 80078fc:	43db      	mvns	r3, r3
  }
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007912:	2201      	movs	r2, #1
 8007914:	4803      	ldr	r0, [pc, #12]	@ (8007924 <__io_putchar+0x20>)
 8007916:	f010 fd06 	bl	8018326 <HAL_UART_Transmit>
	  return ch;
 800791a:	687b      	ldr	r3, [r7, #4]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	24000374 	.word	0x24000374

08007928 <main>:
}

int main(void)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	MPU_Config();
 800792e:	f000 fa55 	bl	8007ddc <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 8007932:	f008 fa6f 	bl	800fe14 <HAL_Init>
	SystemClock_Config();
 8007936:	f000 f867 	bl	8007a08 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800793a:	f000 f92f 	bl	8007b9c <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800793e:	f3bf 8f4f 	dsb	sy
}
 8007942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800794a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a00 <main+0xd8>)
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007952:	f3bf 8f4f 	dsb	sy
}
 8007956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007958:	f3bf 8f6f 	isb	sy
}
 800795c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800795e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007960:	4b27      	ldr	r3, [pc, #156]	@ (8007a00 <main+0xd8>)
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11b      	bne.n	80079ae <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8007976:	f3bf 8f4f 	dsb	sy
}
 800797a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800797c:	f3bf 8f6f 	isb	sy
}
 8007980:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007982:	4b1f      	ldr	r3, [pc, #124]	@ (8007a00 <main+0xd8>)
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800798a:	f3bf 8f4f 	dsb	sy
}
 800798e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007990:	f3bf 8f6f 	isb	sy
}
 8007994:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007996:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <main+0xd8>)
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	4a19      	ldr	r2, [pc, #100]	@ (8007a00 <main+0xd8>)
 800799c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80079a2:	f3bf 8f4f 	dsb	sy
}
 80079a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80079a8:	f3bf 8f6f 	isb	sy
}
 80079ac:	e000      	b.n	80079b0 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80079ae:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 80079b0:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <main+0xdc>)
 80079b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079b6:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <main+0xdc>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079c0:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <main+0xdc>)
 80079c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 80079ce:	f000 f9a9 	bl	8007d24 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80079d2:	f000 f947 	bl	8007c64 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 80079d6:	f000 f919 	bl	8007c0c <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 80079da:	f012 fb89 	bl	801a0f0 <MX_FATFS_Init>

	Remora *remora = new Remora();
 80079de:	2030      	movs	r0, #48	@ 0x30
 80079e0:	f014 ffb4 	bl	801c94c <_Znwj>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461c      	mov	r4, r3
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe27 	bl	800863c <_ZN6RemoraC1Ev>
 80079ee:	607c      	str	r4, [r7, #4]
	remora->run();
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f84d 	bl	8008a90 <_ZN6Remora3runEv>
}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	58024400 	.word	0x58024400

08007a08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09e      	sub	sp, #120	@ 0x78
 8007a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a12:	224c      	movs	r2, #76	@ 0x4c
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f015 fd90 	bl	801d53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	2220      	movs	r2, #32
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f015 fd89 	bl	801d53c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f00b f960 	bl	8012cf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	4b56      	ldr	r3, [pc, #344]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	4a55      	ldr	r2, [pc, #340]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a40:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	4b52      	ldr	r3, [pc, #328]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	4a51      	ldr	r2, [pc, #324]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a54:	6193      	str	r3, [r2, #24]
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007a62:	bf00      	nop
 8007a64:	4b4b      	ldr	r3, [pc, #300]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f3      	bne.n	8007a64 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a7c:	4b46      	ldr	r3, [pc, #280]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a82:	4a45      	ldr	r2, [pc, #276]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a84:	f043 0302 	orr.w	r3, r3, #2
 8007a88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a8c:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aa8:	6193      	str	r3, [r2, #24]
 8007aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4b36      	ldr	r3, [pc, #216]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	4a35      	ldr	r2, [pc, #212]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ac0:	4b33      	ldr	r3, [pc, #204]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007acc:	bf00      	nop
 8007ace:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ada:	bf14      	ite	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	2300      	moveq	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f3      	bne.n	8007ace <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007afa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b00:	2302      	movs	r3, #2
 8007b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b04:	2302      	movs	r3, #2
 8007b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007b08:	2305      	movs	r3, #5
 8007b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007b0c:	23c0      	movs	r3, #192	@ 0xc0
 8007b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007b10:	2302      	movs	r3, #2
 8007b12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007b14:	2304      	movs	r3, #4
 8007b16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f00b f919 	bl	8012d64 <HAL_RCC_OscConfig>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8007b42:	f000 f993 	bl	8007e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b46:	233f      	movs	r3, #63	@ 0x3f
 8007b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007b52:	2308      	movs	r3, #8
 8007b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007b56:	2340      	movs	r3, #64	@ 0x40
 8007b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007b5a:	2340      	movs	r3, #64	@ 0x40
 8007b5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007b64:	2340      	movs	r3, #64	@ 0x40
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007b68:	f107 030c 	add.w	r3, r7, #12
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f00b fd52 	bl	8013618 <HAL_RCC_ClockConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8007b84:	f000 f972 	bl	8007e6c <Error_Handler>
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3778      	adds	r7, #120	@ 0x78
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	58000400 	.word	0x58000400
 8007b94:	58024800 	.word	0x58024800
 8007b98:	58024400 	.word	0x58024400

08007b9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0b0      	sub	sp, #192	@ 0xc0
 8007ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	22c0      	movs	r2, #192	@ 0xc0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f015 fcc7 	bl	801d53c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8007bae:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8007bce:	23c0      	movs	r3, #192	@ 0xc0
 8007bd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8007bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8007be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007be6:	463b      	mov	r3, r7
 8007be8:	4618      	mov	r0, r3
 8007bea:	f00c f8a1 	bl	8013d30 <HAL_RCCEx_PeriphCLKConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8007bfe:	f000 f935 	bl	8007e6c <Error_Handler>
  }
}
 8007c02:	bf00      	nop
 8007c04:	37c0      	adds	r7, #192	@ 0xc0
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007c10:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c12:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8007c14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c22:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8007c32:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c34:	2208      	movs	r2, #8
 8007c36:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8007c38:	4807      	ldr	r0, [pc, #28]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c3a:	f00e fd77 	bl	801672c <HAL_SD_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8007c4e:	4804      	ldr	r0, [pc, #16]	@ (8007c60 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8007c50:	f015 fb7a 	bl	801d348 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	240002f8 	.word	0x240002f8
 8007c5c:	52007000 	.word	0x52007000
 8007c60:	0801e49c 	.word	0x0801e49c

08007c64 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c68:	4b2c      	ldr	r3, [pc, #176]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8007c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c76:	4b29      	ldr	r3, [pc, #164]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c7c:	4b27      	ldr	r3, [pc, #156]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c82:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c8a:	220c      	movs	r2, #12
 8007c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c8e:	4b23      	ldr	r3, [pc, #140]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c9a:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cac:	481b      	ldr	r0, [pc, #108]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cae:	f010 faea 	bl	8018286 <HAL_UART_Init>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8007cc2:	f000 f8d3 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4814      	ldr	r0, [pc, #80]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cca:	f011 fb7c 	bl	80193c6 <HAL_UARTEx_SetTxFifoThreshold>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8007cde:	f000 f8c5 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ce6:	f011 fbac 	bl	8019442 <HAL_UARTEx_SetRxFifoThreshold>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8007cfa:	f000 f8b7 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007cfe:	4807      	ldr	r0, [pc, #28]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007d00:	f011 fb28 	bl	8019354 <HAL_UARTEx_DisableFifoMode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8007d14:	f000 f8aa 	bl	8007e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d18:	bf00      	nop
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	24000374 	.word	0x24000374
 8007d20:	40011000 	.word	0x40011000

08007d24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d3a:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d40:	4a24      	ldr	r2, [pc, #144]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d4a:	4b22      	ldr	r3, [pc, #136]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d58:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d60:	f043 0304 	orr.w	r3, r3, #4
 8007d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d7c:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d94:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007db2:	2310      	movs	r3, #16
 8007db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4804      	ldr	r0, [pc, #16]	@ (8007dd8 <_ZL12MX_GPIO_Initv+0xb4>)
 8007dc6:	f00a fdc9 	bl	801295c <HAL_GPIO_Init>

}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	@ 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	58020800 	.word	0x58020800

08007ddc <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007de2:	463b      	mov	r3, r7
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007dee:	f008 f9fd 	bl	80101ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007dfe:	231f      	movs	r3, #31
 8007e00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e02:	2387      	movs	r3, #135	@ 0x87
 8007e04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4618      	mov	r0, r3
 8007e22:	f008 fa1b 	bl	801025c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8007e2a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8007e2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8007e30:	2307      	movs	r3, #7
 8007e32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007e34:	2303      	movs	r3, #3
 8007e36:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007e44:	2301      	movs	r3, #1
 8007e46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e54:	463b      	mov	r3, r7
 8007e56:	4618      	mov	r0, r3
 8007e58:	f008 fa00 	bl	801025c <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	f008 f9dd 	bl	801021c <HAL_MPU_Enable>

}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8007e70:	4803      	ldr	r0, [pc, #12]	@ (8007e80 <Error_Handler+0x14>)
 8007e72:	f015 f9f9 	bl	801d268 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e76:	b672      	cpsid	i
}
 8007e78:	bf00      	nop

  __disable_irq();
  while (1)
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <Error_Handler+0xe>
 8007e7e:	bf00      	nop
 8007e80:	0801e4ac 	.word	0x0801e4ac

08007e84 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d019      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
        }
    }
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 8007f20:	4b02      	ldr	r3, [pc, #8]	@ (8007f2c <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8007f22:	4618      	mov	r0, r3
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	0801ea2c 	.word	0x0801ea2c

08007f30 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
      header = 0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
      inputs = 0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
 8007f48:	e008      	b.n	8007f5c <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	d9f3      	bls.n	8007f4a <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]
 8007f66:	e00b      	b.n	8007f80 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	73bb      	strb	r3, [r7, #14]
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d9f0      	bls.n	8007f68 <_ZN8txData_tC1Ev+0x38>
     }
  }
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    return static_;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7a1b      	ldrb	r3, [r3, #8]
  }
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  }
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e006      	b.n	8007fe6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f9ab 	bl	8008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	bf00      	nop
  }
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fa fd23 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8007ffc:	4603      	mov	r3, r0
  }
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff ffeb 	bl	8007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008018:	4603      	mov	r3, r0
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ffcf 	bl	8007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8008024:	4603      	mov	r3, r0
  }
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffde 	bl	8008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800804a:	4603      	mov	r3, r0
 800804c:	e000      	b.n	8008050 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800804e:	2300      	movs	r3, #0
  }
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f81d 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7fa fdeb 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008076:	4603      	mov	r3, r0
 8008078:	e003      	b.n	8008082 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7fa fce1 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008080:	4603      	mov	r3, r0
 8008082:	617b      	str	r3, [r7, #20]
    if (!array)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800808a:	2300      	movs	r3, #0
 800808c:	e006      	b.n	800809c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f000 f8ff 	bl	8008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 8008098:	4603      	mov	r3, r0
 800809a:	bf00      	nop
  }
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	791b      	ldrb	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
  }
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d003      	beq.n	80080de <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d101      	bne.n	80080e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 80080e2:	2300      	movs	r3, #0
  }
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	601a      	str	r2, [r3, #0]
  }
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0208 	add.w	r2, r3, #8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fa fb1a 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 020c 	add.w	r2, r3, #12
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7fc fb9b 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	330c      	adds	r3, #12
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ffaf 	bl	80090a6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff ff2d 	bl	8007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	461a      	mov	r2, r3
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008174:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
  }
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 f8cf 	bl	8008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 80081c8:	4603      	mov	r3, r0
 80081ca:	e000      	b.n	80081ce <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 80081cc:	2300      	movs	r3, #0
  }
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
    return resources_;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
  }
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fa fbb7 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008200:	4603      	mov	r3, r0
  }
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa fba9 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800821c:	4603      	mov	r3, r0
  }
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff ff6e 	bl	8008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f823 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800825a:	e006      	b.n	800826a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fa fffb 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7fa fb36 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008270:	4603      	mov	r3, r0
 8008272:	f083 0301 	eor.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e7      	bne.n	800825c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800828c:	bf00      	nop
}
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fff8 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 80082b0:	e008      	b.n	80082c4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 80082b2:	f107 0314 	add.w	r3, r7, #20
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa ffce 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fa fb07 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa faf4 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4618      	mov	r0, r3
 8008306:	f7fa fb1a 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800830a:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800830c:	e00c      	b.n	8008328 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7fa ff56 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8008316:	61f8      	str	r0, [r7, #28]
    if (!element)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800831e:	2300      	movs	r3, #0
 8008320:	e006      	b.n	8008330 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ef      	bne.n	800830e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800832e:	69fb      	ldr	r3, [r7, #28]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8008344:	f107 0010 	add.w	r0, r7, #16
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	f7ff ff77 	bl	8008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa faf1 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fa ff8f 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8008382:	e008      	b.n	8008396 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f7fa ff62 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa fa9e 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1eb      	bne.n	8008384 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 80083ac:	697b      	ldr	r3, [r7, #20]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	463b      	mov	r3, r7
 80083be:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80083c2:	463b      	mov	r3, r7
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fc fad1 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80083ca:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fe77 	bl	80080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 80083e2:	2300      	movs	r3, #0
  }
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fe68 	bl	80090d2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff ffe5 	bl	80083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f000 fe40 	bl	80090bc <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800843c:	4602      	mov	r2, r0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3318      	adds	r3, #24
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ffe1 	bl	800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7f9b      	ldrb	r3, [r3, #30]
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800846a:	b580      	push	{r7, lr}
 800846c:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8008488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800848c:	2210      	movs	r2, #16
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8008492:	f7fa f809 	bl	80024a8 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8008496:	bf00      	nop
 8008498:	bd80      	pop	{r7, pc}

0800849a <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800849a:	b580      	push	{r7, lr}
 800849c:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800849e:	f7fa f811 	bl	80024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 80084aa:	f7fa f819 	bl	80024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80084b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 80084ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 80084de:	f7fa f80d 	bl	80024fc <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 80084ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008518 <TIM3_IRQHandler+0x30>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008502:	4b05      	ldr	r3, [pc, #20]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008508:	f023 0301 	bic.w	r3, r3, #1
 800850c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800850e:	f7fa f803 	bl	8002518 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40000400 	.word	0x40000400

0800851c <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8008520:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008536:	4b05      	ldr	r3, [pc, #20]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4a04      	ldr	r2, [pc, #16]	@ (800854c <TIM4_IRQHandler+0x30>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8008542:	f7f9 fff7 	bl	8002534 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40000800 	.word	0x40000800

08008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fe2d 	bl	80091bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ffea 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fe89 	bl	80092ae <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff ffe5 	bl	8008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ffa8 	bl	800952c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff ffe5 	bl	80085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fdd2 	bl	80091bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffea 	bl	8008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZN6RemoraC1Ev>:
volatile float*   	ptrProcessVariable[Config::variables];
volatile uint16_t* 	ptrInputs;
volatile uint16_t* 	ptrOutputs;


Remora::Remora() :
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b095      	sub	sp, #84	@ 0x54
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	commsFreq(Config::pruCommsFreq)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fd78 	bl	800913e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3308      	adds	r3, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fda5 	bl	80091a2 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fdd9 	bl	8009214 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3314      	adds	r3, #20
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fdd4 	bl	8009214 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8008672:	621a      	str	r2, [r3, #32]
	servoFreq(Config::pruServoFreq),
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800867a:	625a      	str	r2, [r3, #36]	@ 0x24
	commsFreq(Config::pruCommsFreq)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8008682:	629a      	str	r2, [r3, #40]	@ 0x28
{
	threadsRunning = false;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	currentState = ST_SETUP;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2205      	movs	r2, #5
 8008696:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	f107 0214 	add.w	r2, r7, #20
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fde6 	bl	8009278 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3304      	adds	r3, #4
 80086b0:	f107 0210 	add.w	r2, r7, #16
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff75 	bl	80085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 80086bc:	f107 0310 	add.w	r3, r7, #16
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fd4c 	bl	800915e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a5c      	ldr	r2, [pc, #368]	@ (800883c <_ZN6RemoraC1Ev+0x200>)
 80086ca:	619a      	str	r2, [r3, #24]
    ptrRxData = &rxData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a5c      	ldr	r2, [pc, #368]	@ (8008840 <_ZN6RemoraC1Ev+0x204>)
 80086d0:	61da      	str	r2, [r3, #28]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f103 011c 	add.w	r1, r3, #28
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f103 0218 	add.w	r2, r3, #24
 80086de:	4b59      	ldr	r3, [pc, #356]	@ (8008844 <_ZN6RemoraC1Ev+0x208>)
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	f107 000c 	add.w	r0, r7, #12
 80086e6:	f107 0318 	add.w	r3, r7, #24
 80086ea:	f000 fdfc 	bl	80092e6 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 80086ee:	f107 031c 	add.w	r3, r7, #28
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fe42 	bl	800937c <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3308      	adds	r3, #8
 80086fc:	f107 021c 	add.w	r2, r7, #28
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fe48 	bl	8009398 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 8008708:	f107 031c 	add.w	r3, r7, #28
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff ff2d 	bl	800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3308      	adds	r3, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fe51 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800871c:	4604      	mov	r4, r0
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fe57 	bl	80093d6 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008728:	4602      	mov	r2, r0
 800872a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fe6c 	bl	800940e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 8008736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800873a:	4619      	mov	r1, r3
 800873c:	4620      	mov	r0, r4
 800873e:	f7ff fe75 	bl	800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 8008742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fe7d 	bl	8009446 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3308      	adds	r3, #8
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fe34 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008756:	4603      	mov	r3, r0
 8008758:	4618      	mov	r0, r3
 800875a:	f004 fde4 	bl	800d326 <_ZN12CommsHandler4initEv>
	comms->start();
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3308      	adds	r3, #8
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fe2b 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008768:	4603      	mov	r3, r0
 800876a:	4618      	mov	r0, r3
 800876c:	f004 fe09 	bl	800d382 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 8008770:	4b35      	ldr	r3, [pc, #212]	@ (8008848 <_ZN6RemoraC1Ev+0x20c>)
 8008772:	62fb      	str	r3, [r7, #44]	@ 0x2c
										TIM3_IRQn,
 8008774:	231d      	movs	r3, #29
 8008776:	867b      	strh	r3, [r7, #50]	@ 0x32
										baseFreq,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3320      	adds	r3, #32
    baseThread = make_unique<pruThread>(
 800877c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8008780:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8008784:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008788:	4c30      	ldr	r4, [pc, #192]	@ (800884c <_ZN6RemoraC1Ev+0x210>)
 800878a:	9401      	str	r4, [sp, #4]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	460b      	mov	r3, r1
 8008790:	492f      	ldr	r1, [pc, #188]	@ (8008850 <_ZN6RemoraC1Ev+0x214>)
 8008792:	f000 fe7a 	bl	800948a <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3310      	adds	r3, #16
 800879a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff ff20 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 80087a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fd42 	bl	8009234 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 80087b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
										TIM2_IRQn,
 80087b6:	231c      	movs	r3, #28
 80087b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
										servoFreq,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3324      	adds	r3, #36	@ 0x24
    servoThread = make_unique<pruThread>(
 80087be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80087c2:	f107 013e 	add.w	r1, r7, #62	@ 0x3e
 80087c6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80087ca:	4c22      	ldr	r4, [pc, #136]	@ (8008854 <_ZN6RemoraC1Ev+0x218>)
 80087cc:	9401      	str	r4, [sp, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	460b      	mov	r3, r1
 80087d2:	4921      	ldr	r1, [pc, #132]	@ (8008858 <_ZN6RemoraC1Ev+0x21c>)
 80087d4:	f000 fec6 	bl	8009564 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3314      	adds	r3, #20
 80087dc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff feff 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 80087e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fd21 	bl	8009234 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/


    servoThread->registerModule(comms);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3314      	adds	r3, #20
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ff05 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80087fc:	4604      	mov	r4, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f103 0208 	add.w	r2, r3, #8
 8008804:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f000 ff07 	bl	800961e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 8008810:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008814:	4619      	mov	r1, r3
 8008816:	4620      	mov	r0, r4
 8008818:	f006 fd50 	bl	800f2bc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800881c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fefe 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fd84 	bl	8009338 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	374c      	adds	r7, #76	@ 0x4c
 8008836:	46bd      	mov	sp, r7
 8008838:	bd90      	pop	{r4, r7, pc}
 800883a:	bf00      	nop
 800883c:	30000080 	.word	0x30000080
 8008840:	300000c0 	.word	0x300000c0
 8008844:	40013000 	.word	0x40013000
 8008848:	40000400 	.word	0x40000400
 800884c:	0801ea34 	.word	0x0801ea34
 8008850:	0801e4b4 	.word	0x0801e4b4
 8008854:	0801ea38 	.word	0x0801ea38
 8008858:	0801e4bc 	.word	0x0801e4bc

0800885c <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
    if (currentState != newState) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	429a      	cmp	r2, r3
 8008870:	d00e      	beq.n	8008890 <_ZN6Remora17transitionToStateENS_5StateE+0x34>
        printf("\n## Transitioning from state %d to state %d\n", currentState, newState);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	461a      	mov	r2, r3
 800887c:	4806      	ldr	r0, [pc, #24]	@ (8008898 <_ZN6Remora17transitionToStateENS_5StateE+0x3c>)
 800887e:	f014 fcf3 	bl	801d268 <iprintf>
        prevState = currentState;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	78fa      	ldrb	r2, [r7, #3]
 800888e:	701a      	strb	r2, [r3, #0]
    }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0801e4c4 	.word	0x0801e4c4

0800889c <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 80088b0:	4808      	ldr	r0, [pc, #32]	@ (80088d4 <_ZN6Remora16handleSetupStateEv+0x38>)
 80088b2:	f014 fd49 	bl	801d348 <puts>
    }
    prevState = currentState;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	705a      	strb	r2, [r3, #1]

    loadModules();
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f94e 	bl	8008b60 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff ffc8 	bl	800885c <_ZN6Remora17transitionToStateENS_5StateE>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	0801e4f4 	.word	0x0801e4f4

080088d8 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d002      	beq.n	80088f2 <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 80088ec:	4814      	ldr	r0, [pc, #80]	@ (8008940 <_ZN6Remora16handleStartStateEv+0x68>)
 80088ee:	f014 fd2b 	bl	801d348 <puts>
    }
    prevState = currentState;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	705a      	strb	r2, [r3, #1]

    if (!threadsRunning) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008900:	f083 0301 	eor.w	r3, r3, #1
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d011      	beq.n	800892e <_ZN6Remora16handleStartStateEv+0x56>
        startThread(servoThread, "SERVO");
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3314      	adds	r3, #20
 800890e:	4a0d      	ldr	r2, [pc, #52]	@ (8008944 <_ZN6Remora16handleStartStateEv+0x6c>)
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f894 	bl	8008a40 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3310      	adds	r3, #16
 800891c:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <_ZN6Remora16handleStartStateEv+0x70>)
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f88d 	bl	8008a40 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }

    transitionToState(ST_IDLE);
 800892e:	2102      	movs	r1, #2
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff ff93 	bl	800885c <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	0801e510 	.word	0x0801e510
 8008944:	0801e52c 	.word	0x0801e52c
 8008948:	0801e534 	.word	0x0801e534

0800894c <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	429a      	cmp	r2, r3
 800895e:	d002      	beq.n	8008966 <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 8008960:	480d      	ldr	r0, [pc, #52]	@ (8008998 <_ZN6Remora15handleIdleStateEv+0x4c>)
 8008962:	f014 fcf1 	bl	801d348 <puts>
    }
    prevState = currentState;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3308      	adds	r3, #8
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fd23 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008978:	4603      	mov	r3, r0
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fd69 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 8008986:	2103      	movs	r1, #3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff ff67 	bl	800885c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	0801e53c 	.word	0x0801e53c

0800899c <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d002      	beq.n	80089b6 <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 80089b0:	480e      	ldr	r0, [pc, #56]	@ (80089ec <_ZN6Remora18handleRunningStateEv+0x50>)
 80089b2:	f014 fcc9 	bl	801d348 <puts>
    }
    prevState = currentState;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3308      	adds	r3, #8
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fcfb 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fd41 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f083 0301 	eor.w	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 80089dc:	2105      	movs	r1, #5
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff ff3c 	bl	800885c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	0801e554 	.word	0x0801e554

080089f0 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d002      	beq.n	8008a0a <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 8008a04:	480c      	ldr	r0, [pc, #48]	@ (8008a38 <_ZN6Remora16handleResetStateEv+0x48>)
 8008a06:	f014 fc9f 	bl	801d348 <puts>
    }
    prevState = currentState;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 8008a12:	480a      	ldr	r0, [pc, #40]	@ (8008a3c <_ZN6Remora16handleResetStateEv+0x4c>)
 8008a14:	f014 fc98 	bl	801d348 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2240      	movs	r2, #64	@ 0x40
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f825 	bl	8008a70 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 8008a26:	2102      	movs	r1, #2
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff ff17 	bl	800885c <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	0801e570 	.word	0x0801e570
 8008a3c:	0801e58c 	.word	0x0801e58c

08008a40 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4807      	ldr	r0, [pc, #28]	@ (8008a6c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 8008a50:	f014 fc0a 	bl	801d268 <iprintf>
    thread->startThread();
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f000 fdd6 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f006 fc69 	bl	800f334 <_ZN9pruThread11startThreadEv>
}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	0801e5a4 	.word	0x0801e5a4

08008a70 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	2100      	movs	r1, #0
 8008a80:	68b8      	ldr	r0, [r7, #8]
 8008a82:	f014 fd5b 	bl	801d53c <memset>
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <_ZN6Remora3runEv>:

void Remora::run() {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b06      	cmp	r3, #6
 8008a9e:	d828      	bhi.n	8008af2 <_ZN6Remora3runEv+0x62>
 8008aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <_ZN6Remora3runEv+0x18>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ac5 	.word	0x08008ac5
 8008aac:	08008acd 	.word	0x08008acd
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008add 	.word	0x08008add
 8008ab8:	08008af3 	.word	0x08008af3
 8008abc:	08008ae5 	.word	0x08008ae5
 8008ac0:	08008aed 	.word	0x08008aed
            case ST_SETUP:
                handleSetupState();
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fee9 	bl	800889c <_ZN6Remora16handleSetupStateEv>
                break;
 8008aca:	e016      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            case ST_START:
                handleStartState();
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff ff03 	bl	80088d8 <_ZN6Remora16handleStartStateEv>
                break;
 8008ad2:	e012      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            case ST_IDLE:
                handleIdleState();
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff39 	bl	800894c <_ZN6Remora15handleIdleStateEv>
                break;
 8008ada:	e00e      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            case ST_RUNNING:
                handleRunningState();
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff5d 	bl	800899c <_ZN6Remora18handleRunningStateEv>
                break;
 8008ae2:	e00a      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            case ST_RESET:
                handleResetState();
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff83 	bl	80089f0 <_ZN6Remora16handleResetStateEv>
                break;
 8008aea:	e006      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            case ST_WDRESET:
                HAL_NVIC_SystemReset(); // Force system reset
 8008aec:	f007 fb6d 	bl	80101ca <HAL_NVIC_SystemReset>
                break;
 8008af0:	e003      	b.n	8008afa <_ZN6Remora3runEv+0x6a>
            default:
                printf("Error: Invalid state\n");
 8008af2:	4807      	ldr	r0, [pc, #28]	@ (8008b10 <_ZN6Remora3runEv+0x80>)
 8008af4:	f014 fc28 	bl	801d348 <puts>
                break;
 8008af8:	bf00      	nop
        }
        comms->tasks();
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3308      	adds	r3, #8
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fc5d 	bl	80093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008b04:	4603      	mov	r3, r0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f004 fc4e 	bl	800d3a8 <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 8008b0c:	e7c4      	b.n	8008a98 <_ZN6Remora3runEv+0x8>
 8008b0e:	bf00      	nop
 8008b10:	0801e5bc 	.word	0x0801e5bc

08008b14 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f000 fde6 	bl	8009702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff ffdf 	bl	8008b14 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 8008b60:	b5b0      	push	{r4, r5, r7, lr}
 8008b62:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8008b66:	af02      	add	r7, sp, #8
 8008b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008b70:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 8008b72:	f005 f8eb 	bl	800dd4c <_ZN13ModuleFactory11getInstanceEv>
 8008b76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 8008b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008b7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fd59 	bl	800963e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008b92:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fb fcb9 	bl	8004510 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8008b9e:	f107 0318 	add.w	r3, r7, #24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff faee 	bl	8008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008bae:	e24e      	b.n	800904e <_ZN6Remora11loadModulesEv+0x4ee>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8008bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008bb4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8008bb8:	f107 0118 	add.w	r1, r7, #24
 8008bbc:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fd48 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008bc6:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 8008bca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 f9a3 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f9a7 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008be2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008be6:	49c0      	ldr	r1, [pc, #768]	@ (8008ee8 <_ZN6Remora11loadModulesEv+0x388>)
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fc fd24 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008bee:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8008bf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008bfc:	cb0c      	ldmia	r3, {r2, r3}
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f001 f9ae 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008c04:	f107 0320 	add.w	r3, r7, #32
 8008c08:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8008c0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8008c10:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008c14:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008c18:	f001 fe39 	bl	800a88e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008c22:	f001 fe44 	bl	800a8ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008c26:	4602      	mov	r2, r0
 8008c28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fa f91d 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008c34:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008c36:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c3e:	f7ff fbba 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008c42:	4603      	mov	r3, r0
 8008c44:	bf00      	nop
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d04e      	beq.n	8008ce8 <_ZN6Remora11loadModulesEv+0x188>
 8008c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008c4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008c52:	f107 0118 	add.w	r1, r7, #24
 8008c56:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fcfb 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008c60:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 8008c64:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 f956 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 f95a 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008c7c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008c80:	499a      	ldr	r1, [pc, #616]	@ (8008eec <_ZN6Remora11loadModulesEv+0x38c>)
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f98b 	bl	8009f9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008c88:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8008c8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008c96:	cb0c      	ldmia	r3, {r2, r3}
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 f961 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008c9e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008ca2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008ca6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8008caa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008cae:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008cb2:	f001 fdec 	bl	800a88e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008cbc:	f001 fdf7 	bl	800a8ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fa f8d0 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008cce:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008cd0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008cd8:	f7ff fb6d 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	bf00      	nop
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <_ZN6Remora11loadModulesEv+0x188>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e000      	b.n	8008cea <_ZN6Remora11loadModulesEv+0x18a>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 81aa 	beq.w	8009044 <_ZN6Remora11loadModulesEv+0x4e4>
            const char* threadName = modules[i]["Thread"];
 8008cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008cf4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008cf8:	f107 0118 	add.w	r1, r7, #24
 8008cfc:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fca8 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008d06:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 8008d0a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f903 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008d14:	4602      	mov	r2, r0
 8008d16:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f907 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008d22:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008d26:	4970      	ldr	r1, [pc, #448]	@ (8008ee8 <_ZN6Remora11loadModulesEv+0x388>)
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fc fc84 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008d2e:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8008d32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008d3c:	cb0c      	ldmia	r3, {r2, r3}
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f001 f90e 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008d44:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 fc94 	bl	8009676 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008d4e:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 8008d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d5a:	f107 0118 	add.w	r1, r7, #24
 8008d5e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fc77 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008d68:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8008d6c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 f8d2 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008d76:	4602      	mov	r2, r0
 8008d78:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 f8d6 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008d84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008d88:	4958      	ldr	r1, [pc, #352]	@ (8008eec <_ZN6Remora11loadModulesEv+0x38c>)
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 f907 	bl	8009f9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008d90:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8008d94:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008d9e:	cb0c      	ldmia	r3, {r2, r3}
 8008da0:	4620      	mov	r0, r4
 8008da2:	f001 f8dd 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008da6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fc63 	bl	8009676 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008db0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 8008db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008db8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 8008dc0:	494b      	ldr	r1, [pc, #300]	@ (8008ef0 <_ZN6Remora11loadModulesEv+0x390>)
 8008dc2:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008dc6:	f7f7 fa8b 	bl	80002e0 <strcmp>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 8008dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008dd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008de0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e012      	b.n	8008e0e <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 8008de8:	4942      	ldr	r1, [pc, #264]	@ (8008ef4 <_ZN6Remora11loadModulesEv+0x394>)
 8008dea:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008dee:	f7f7 fa77 	bl	80002e0 <strcmp>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 8008df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008dfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6a1a      	ldr	r2, [r3, #32]
 8008e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e08:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008e0c:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 8008e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e16:	f107 0118 	add.w	r1, r7, #24
 8008e1a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fc19 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008e24:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8008e28:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 f874 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008e32:	4602      	mov	r2, r0
 8008e34:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 f878 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008e40:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008e44:	492c      	ldr	r1, [pc, #176]	@ (8008ef8 <_ZN6Remora11loadModulesEv+0x398>)
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 f8de 	bl	800a008 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008e4c:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8008e50:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008e5a:	cb0c      	ldmia	r3, {r2, r3}
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f001 f87f 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008e62:	f107 0214 	add.w	r2, r7, #20
 8008e66:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fc0e 	bl	800968e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i]);
 8008e72:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 8008e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e7a:	f107 0118 	add.w	r1, r7, #24
 8008e7e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fbe7 	bl	8009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008e88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008e8c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fc09 	bl	80096aa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 8008e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e9c:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 8008ea0:	466a      	mov	r2, sp
 8008ea2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008eaa:	e882 0003 	stmia.w	r2, {r0, r1}
 8008eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8008eb2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f004 fee3 	bl	800dc84 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>

            // Check if the module creation was successful
            if (!_mod) {
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fc00 	bl	80096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f083 0301 	eor.w	r3, r3, #1
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d015      	beq.n	8008f00 <_ZN6Remora11loadModulesEv+0x3a0>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 8008ed4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008ed8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8008edc:	4807      	ldr	r0, [pc, #28]	@ (8008efc <_ZN6Remora11loadModulesEv+0x39c>)
 8008ede:	f014 f9c3 	bl	801d268 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	e0a8      	b.n	8009038 <_ZN6Remora11loadModulesEv+0x4d8>
 8008ee6:	bf00      	nop
 8008ee8:	0801e5d4 	.word	0x0801e5d4
 8008eec:	0801e5dc 	.word	0x0801e5dc
 8008ef0:	0801e4bc 	.word	0x0801e4bc
 8008ef4:	0801e4b4 	.word	0x0801e4b4
 8008ef8:	0801e5e4 	.word	0x0801e5e4
 8008efc:	0801e5f0 	.word	0x0801e5f0
			}

            bool _modPost = _mod->getUsesModulePost();
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fbf0 	bl	80096ea <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	3218      	adds	r2, #24
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	4790      	blx	r2
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 8008f1c:	4957      	ldr	r1, [pc, #348]	@ (800907c <_ZN6Remora11loadModulesEv+0x51c>)
 8008f1e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008f22:	f7f7 f9dd 	bl	80002e0 <strcmp>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d13e      	bne.n	8008faa <_ZN6Remora11loadModulesEv+0x44a>
                servoThread->registerModule(_mod);
 8008f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3314      	adds	r3, #20
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fb64 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	f107 020c 	add.w	r2, r7, #12
 8008f44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fdf8 	bl	8008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008f50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f54:	4619      	mov	r1, r3
 8008f56:	4620      	mov	r0, r4
 8008f58:	f006 f9b0 	bl	800f2bc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008f5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fb5e 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8008f66:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d063      	beq.n	8009036 <_ZN6Remora11loadModulesEv+0x4d6>
            		servoThread->registerModulePost(_mod);
 8008f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3314      	adds	r3, #20
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fb43 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008f80:	4604      	mov	r4, r0
 8008f82:	f107 020c 	add.w	r2, r7, #12
 8008f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fdd7 	bl	8008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f96:	4619      	mov	r1, r3
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f006 f9ab 	bl	800f2f4 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 8008f9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fb3d 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8008fa8:	e045      	b.n	8009036 <_ZN6Remora11loadModulesEv+0x4d6>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 8008faa:	4935      	ldr	r1, [pc, #212]	@ (8009080 <_ZN6Remora11loadModulesEv+0x520>)
 8008fac:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008fb0:	f7f7 f996 	bl	80002e0 <strcmp>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d13d      	bne.n	8009036 <_ZN6Remora11loadModulesEv+0x4d6>
                baseThread->registerModule(_mod);
 8008fba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008fbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3310      	adds	r3, #16
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fb1d 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	f107 020c 	add.w	r2, r7, #12
 8008fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fdb1 	bl	8008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008fde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f006 f969 	bl	800f2bc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff fb17 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8008ff4:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01c      	beq.n	8009036 <_ZN6Remora11loadModulesEv+0x4d6>
            		servoThread->registerModulePost(_mod);
 8008ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009000:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3314      	adds	r3, #20
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fafc 	bl	8009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800900e:	4604      	mov	r4, r0
 8009010:	f107 020c 	add.w	r2, r7, #12
 8009014:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fd90 	bl	8008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009020:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009024:	4619      	mov	r1, r3
 8009026:	4620      	mov	r0, r4
 8009028:	f006 f964 	bl	800f2f4 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800902c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff faf6 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 8009036:	2401      	movs	r4, #1
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff faf0 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8009042:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 8009044:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8009048:	3301      	adds	r3, #1
 800904a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800904e:	f107 0318 	add.w	r3, r7, #24
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff f8a7 	bl	80081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 8009058:	4602      	mov	r2, r0
 800905a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800905e:	4293      	cmp	r3, r2
 8009060:	bf34      	ite	cc
 8009062:	2301      	movcc	r3, #1
 8009064:	2300      	movcs	r3, #0
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	f47f ada1 	bne.w	8008bb0 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009076:	46bd      	mov	sp, r7
 8009078:	bdb0      	pop	{r4, r5, r7, pc}
 800907a:	bf00      	nop
 800907c:	0801e4bc 	.word	0x0801e4bc
 8009080:	0801e4b4 	.word	0x0801e4b4

08009084 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3304      	adds	r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  }
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80090dc:	6838      	ldr	r0, [r7, #0]
 80090de:	f000 fb9d 	bl	800981c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fb78 	bl	80097dc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80090ec:	6838      	ldr	r0, [r7, #0]
 80090ee:	f000 fbaa 	bl	8009846 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fbb3 	bl	8009860 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fba3 	bl	8009846 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009100:	687b      	ldr	r3, [r7, #4]
      }
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fbae 	bl	8009876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ffeb 	bl	800910a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
	: _M_t()
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff ffe8 	bl	8009124 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800915e:	b590      	push	{r4, r7, lr}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fb91 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800916e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb96 	bl	80098aa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800917e:	4604      	mov	r4, r0
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fb9f 	bl	80098c4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8009186:	4603      	mov	r3, r0
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4619      	mov	r1, r3
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fbb7 	bl	8009900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
      }
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd90      	pop	{r4, r7, pc}

080091a2 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fbba 	bl	8009926 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fe72 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fbac 	bl	8009948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff ffeb 	bl	80091e0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	: _M_t()
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff ffe8 	bl	80091fa <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009234:	b590      	push	{r4, r7, lr}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fb8f 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009244:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fb94 	bl	800997c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 8009254:	4604      	mov	r4, r0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fb9d 	bl	8009996 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800925c:	4603      	mov	r3, r0
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4619      	mov	r1, r3
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fbb9 	bl	80099da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
      }
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	bd90      	pop	{r4, r7, pc}

08009278 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8009278:	b590      	push	{r4, r7, lr}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009282:	206c      	movs	r0, #108	@ 0x6c
 8009284:	f013 fb62 	bl	801c94c <_Znwj>
 8009288:	4603      	mov	r3, r0
 800928a:	461c      	mov	r4, r3
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f000 fbb7 	bl	8009a00 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 8009292:	4603      	mov	r3, r0
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	4620      	mov	r0, r4
 800929a:	f7fb f82b 	bl	80042f4 <_ZN17JsonConfigHandlerC1EP6Remora>
 800929e:	4621      	mov	r1, r4
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fbc8 	bl	8009a36 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd90      	pop	{r4, r7, pc}

080092ae <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80092b8:	6838      	ldr	r0, [r7, #0]
 80092ba:	f000 fbeb 	bl	8009a94 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 80092be:	4603      	mov	r3, r0
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fbc6 	bl	8009a54 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80092c8:	6838      	ldr	r0, [r7, #0]
 80092ca:	f000 fbf8 	bl	8009abe <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80092ce:	4603      	mov	r3, r0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fc01 	bl	8009ad8 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fbf1 	bl	8009abe <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80092dc:	687b      	ldr	r3, [r7, #4]
      }
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80092e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80092f4:	f44f 7011 	mov.w	r0, #580	@ 0x244
 80092f8:	f013 fb28 	bl	801c94c <_Znwj>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461e      	mov	r6, r3
 8009300:	68b8      	ldr	r0, [r7, #8]
 8009302:	f000 fbf4 	bl	8009aee <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009306:	4603      	mov	r3, r0
 8009308:	681c      	ldr	r4, [r3, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fbfa 	bl	8009b04 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009310:	4603      	mov	r3, r0
 8009312:	681d      	ldr	r5, [r3, #0]
 8009314:	6838      	ldr	r0, [r7, #0]
 8009316:	f000 fc00 	bl	8009b1a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800931a:	4603      	mov	r3, r0
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	462a      	mov	r2, r5
 8009320:	4621      	mov	r1, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f7f7 fd4a 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8009328:	4631      	mov	r1, r6
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fc10 	bl	8009b50 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009338 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fc13 	bl	8009b6e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 8009348:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00c      	beq.n	800936c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fc18 	bl	8009b88 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009358:	4604      	mov	r4, r0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fc21 	bl	8009ba2 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 8009360:	4603      	mov	r3, r0
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4619      	mov	r1, r3
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fc26 	bl	8009bb8 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
      }
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	bd90      	pop	{r4, r7, pc}

0800937c <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 8009384:	f107 030c 	add.w	r3, r7, #12
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fc25 	bl	8009bda <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80093a2:	687c      	ldr	r4, [r7, #4]
 80093a4:	6838      	ldr	r0, [r7, #0]
 80093a6:	f000 fc27 	bl	8009bf8 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 80093aa:	4603      	mov	r3, r0
 80093ac:	4619      	mov	r1, r3
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fc2d 	bl	8009c0e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80093b4:	687b      	ldr	r3, [r7, #4]
      }
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd90      	pop	{r4, r7, pc}

080093be <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
	return _M_get();
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc40 	bl	8009c4c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80093cc:	4603      	mov	r3, r0
      }
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fc48 	bl	8009c94 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800940e:	b5b0      	push	{r4, r5, r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009418:	687c      	ldr	r4, [r7, #4]
 800941a:	6838      	ldr	r0, [r7, #0]
 800941c:	f000 fc22 	bl	8009c64 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009420:	4605      	mov	r5, r0
 8009422:	6838      	ldr	r0, [r7, #0]
 8009424:	f000 fbb0 	bl	8009b88 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009428:	4603      	mov	r3, r0
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fc27 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	4629      	mov	r1, r5
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff ffd8 	bl	80093ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bdb0      	pop	{r4, r5, r7, pc}

08009446 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009446:	b590      	push	{r4, r7, lr}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fc35 	bl	8009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009456:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fc3a 	bl	8009cda <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 8009466:	4604      	mov	r4, r0
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 fc43 	bl	8009cf4 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800946e:	4603      	mov	r3, r0
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4619      	mov	r1, r3
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fc48 	bl	8009d0a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
      }
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}

0800948a <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800948a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948e:	b08e      	sub	sp, #56	@ 0x38
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800949a:	2044      	movs	r0, #68	@ 0x44
 800949c:	f013 fa56 	bl	801c94c <_Znwj>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4698      	mov	r8, r3
 80094a4:	68b8      	ldr	r0, [r7, #8]
 80094a6:	f000 fc41 	bl	8009d2c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80094aa:	4604      	mov	r4, r0
 80094ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094b0:	4618      	mov	r0, r3
 80094b2:	f013 fa5c 	bl	801c96e <_ZNSaIcEC1Ev>
 80094b6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	4621      	mov	r1, r4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fb fc9d 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fc3b 	bl	8009d42 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80094cc:	4603      	mov	r3, r0
 80094ce:	681d      	ldr	r5, [r3, #0]
 80094d0:	6838      	ldr	r0, [r7, #0]
 80094d2:	f000 fc41 	bl	8009d58 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80094dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80094de:	f000 fc46 	bl	8009d6e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 80094e2:	4603      	mov	r3, r0
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80094e8:	f000 fc4c 	bl	8009d84 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80094ec:	4603      	mov	r3, r0
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f107 0114 	add.w	r1, r7, #20
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	9400      	str	r4, [sp, #0]
 80094fa:	4633      	mov	r3, r6
 80094fc:	462a      	mov	r2, r5
 80094fe:	4640      	mov	r0, r8
 8009500:	f005 fe20 	bl	800f144 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009504:	4641      	mov	r1, r8
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fc57 	bl	8009dba <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800950c:	f107 0314 	add.w	r3, r7, #20
 8009510:	4618      	mov	r0, r3
 8009512:	f013 fac7 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009516:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800951a:	4618      	mov	r0, r3
 800951c:	f013 fa28 	bl	801c970 <_ZNSaIcED1Ev>
 8009520:	bf00      	nop
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	3730      	adds	r7, #48	@ 0x30
 8009526:	46bd      	mov	sp, r7
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800952c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009536:	6838      	ldr	r0, [r7, #0]
 8009538:	f000 fc6e 	bl	8009e18 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800953c:	4603      	mov	r3, r0
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fc49 	bl	8009dd8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009546:	6838      	ldr	r0, [r7, #0]
 8009548:	f000 fc7b 	bl	8009e42 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800954c:	4603      	mov	r3, r0
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fc84 	bl	8009e5c <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fc74 	bl	8009e42 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800955a:	687b      	ldr	r3, [r7, #4]
      }
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	b08e      	sub	sp, #56	@ 0x38
 800956a:	af02      	add	r7, sp, #8
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009574:	2044      	movs	r0, #68	@ 0x44
 8009576:	f013 f9e9 	bl	801c94c <_Znwj>
 800957a:	4603      	mov	r3, r0
 800957c:	4698      	mov	r8, r3
 800957e:	68b8      	ldr	r0, [r7, #8]
 8009580:	f000 fc77 	bl	8009e72 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009584:	4604      	mov	r4, r0
 8009586:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800958a:	4618      	mov	r0, r3
 800958c:	f013 f9ef 	bl	801c96e <_ZNSaIcEC1Ev>
 8009590:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4621      	mov	r1, r4
 800959a:	4618      	mov	r0, r3
 800959c:	f7fb fc30 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fbce 	bl	8009d42 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80095a6:	4603      	mov	r3, r0
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	6838      	ldr	r0, [r7, #0]
 80095ac:	f000 fbd4 	bl	8009d58 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80095b8:	f000 fbd9 	bl	8009d6e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 80095bc:	4603      	mov	r3, r0
 80095be:	681c      	ldr	r4, [r3, #0]
 80095c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80095c2:	f000 fbdf 	bl	8009d84 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80095c6:	4603      	mov	r3, r0
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f107 0114 	add.w	r1, r7, #20
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	9400      	str	r4, [sp, #0]
 80095d4:	4633      	mov	r3, r6
 80095d6:	462a      	mov	r2, r5
 80095d8:	4640      	mov	r0, r8
 80095da:	f005 fdb3 	bl	800f144 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 80095de:	4641      	mov	r1, r8
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fbea 	bl	8009dba <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80095e6:	f107 0314 	add.w	r3, r7, #20
 80095ea:	4618      	mov	r0, r3
 80095ec:	f013 fa5a 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095f4:	4618      	mov	r0, r3
 80095f6:	f013 f9bb 	bl	801c970 <_ZNSaIcED1Ev>
 80095fa:	bf00      	nop
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	3730      	adds	r7, #48	@ 0x30
 8009600:	46bd      	mov	sp, r7
 8009602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009606 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
	return get();
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc3a 	bl	8009e88 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8009614:	4603      	mov	r3, r0
      }
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fc37 	bl	8009ea2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
	return get();
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fc41 	bl	8009ece <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800964c:	4603      	mov	r3, r0
      }
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	ca06      	ldmia	r2, {r1, r2}
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fc3d 	bl	8009ee8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
    return as<T>();
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fca0 	bl	8009fc4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 8009684:	4603      	mov	r3, r0
  }
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
    this->set(src);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fcc7 	bl	800a02e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 80096a0:	687b      	ldr	r3, [r7, #4]
  }
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
    return as<T>();
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fcc6 	bl	800a04a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 80096be:	bf00      	nop
  }
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bf14      	ite	ne
 80096d8:	2301      	movne	r3, #1
 80096da:	2300      	moveq	r3, #0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fccd 	bl	800a092 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80096f8:	4603      	mov	r3, r0
      }
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fbbb 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
      { }
 8009738:	4a04      	ldr	r2, [pc, #16]	@ (800974c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	0801ea60 	.word	0x0801ea60

08009750 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
      { }
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff ffe9 	bl	8009730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800975e:	210c      	movs	r1, #12
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f013 f8e2 	bl	801c92a <_ZdlPvj>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	4638      	mov	r0, r7
 800977a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800977e:	463b      	mov	r3, r7
 8009780:	4618      	mov	r0, r3
 8009782:	f7f8 ffc4 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800978c:	2300      	movs	r3, #0
 800978e:	e021      	b.n	80097d4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 8009790:	463b      	mov	r3, r7
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fbfe 	bl	8007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800979e:	463b      	mov	r3, r7
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7f8 ffd1 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 80097a6:	4603      	mov	r3, r0
 80097a8:	4619      	mov	r1, r3
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7fe fca0 	bl	80080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e00f      	b.n	80097d4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 80097b4:	6a38      	ldr	r0, [r7, #32]
 80097b6:	463b      	mov	r3, r7
 80097b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ba:	f000 fc76 	bl	800a0aa <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 80097be:	6178      	str	r0, [r7, #20]
  if (dup) {
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 80097c6:	6979      	ldr	r1, [r7, #20]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7f9 fa0e 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa6a 	bl	8009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 80097ec:	4603      	mov	r3, r0
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80097f2:	683c      	ldr	r4, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa63 	bl	8009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 80097fa:	4603      	mov	r3, r0
 80097fc:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f81e 	bl	8009846 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800980a:	4603      	mov	r3, r0
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fa7b 	bl	8009d0a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}

0800981c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa4b 	bl	8009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800982a:	4603      	mov	r3, r0
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fa45 	bl	8009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009836:	4603      	mov	r3, r0
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
	return __p;
 800983c:	68fb      	ldr	r3, [r7, #12]
      }
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fc50 	bl	800a0f6 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009856:	4603      	mov	r3, r0
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fc44 	bl	800a10e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fc47 	bl	800a12e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80098a0:	4603      	mov	r3, r0
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f902 	bl	8009abe <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80098ba:	4603      	mov	r3, r0
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3320      	adds	r3, #32
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fc9d 	bl	8008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3304      	adds	r3, #4
 80098f0:	4618      	mov	r0, r3
 80098f2:	f013 f8d7 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800990a:	683c      	ldr	r4, [r7, #0]
 800990c:	2c00      	cmp	r4, #0
 800990e:	d006      	beq.n	800991e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff ffe2 	bl	80098da <_ZN17JsonConfigHandlerD1Ev>
 8009916:	216c      	movs	r1, #108	@ 0x6c
 8009918:	4620      	mov	r0, r4
 800991a:	f013 f806 	bl	801c92a <_ZdlPvj>
      }
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bd90      	pop	{r4, r7, pc}

08009926 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f000 fc05 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fc06 	bl	800a164 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fc09 	bl	800a184 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009972:	4603      	mov	r3, r0
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fa5b 	bl	8009e42 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800998c:	4603      	mov	r3, r0
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3338      	adds	r3, #56	@ 0x38
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fbf0 	bl	800a19e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	332c      	adds	r3, #44	@ 0x2c
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fbeb 	bl	800a19e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f013 f86a 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 80099da:	b590      	push	{r4, r7, lr}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80099e4:	683c      	ldr	r4, [r7, #0]
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	d006      	beq.n	80099f8 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff ffde 	bl	80099ac <_ZN9pruThreadD1Ev>
 80099f0:	2144      	movs	r1, #68	@ 0x44
 80099f2:	4620      	mov	r0, r4
 80099f4:	f012 ff99 	bl	801c92a <_ZdlPvj>
      }
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd90      	pop	{r4, r7, pc}

08009a00 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fbd4 	bl	800a1d4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff ffe6 	bl	8009a16 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff ff16 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009a64:	4603      	mov	r3, r0
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009a6a:	683c      	ldr	r4, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff ff0f 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009a72:	4603      	mov	r3, r0
 8009a74:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f81e 	bl	8009abe <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009a82:	4603      	mov	r3, r0
 8009a84:	68f9      	ldr	r1, [r7, #12]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff ff3a 	bl	8009900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd90      	pop	{r4, r7, pc}

08009a94 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff fef7 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fef1 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
	return __p;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
      }
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fb97 	bl	800a1fc <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fb67 	bl	800a214 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff ffe6 	bl	8009b30 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fb5f 	bl	800a23c <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fb5f 	bl	800a256 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	3204      	adds	r2, #4
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	4790      	blx	r2
      }
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fb41 	bl	800a270 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8009c18:	6838      	ldr	r0, [r7, #0]
 8009c1a:	f000 fb43 	bl	800a2a4 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fb47 	bl	800a2ba <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8009c2c:	f107 0308 	add.w	r3, r7, #8
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fb5f 	bl	800a2f6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fc87 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8009c42:	687b      	ldr	r3, [r7, #4]
      }
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb65 	bl	800a324 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fb64 	bl	800a33c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009c74:	4603      	mov	r3, r0
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c7e:	b480      	push	{r7}
 8009c80:	b083      	sub	sp, #12
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009ca0:	68fc      	ldr	r4, [r7, #12]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ffeb 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fb58 	bl	800a366 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd90      	pop	{r4, r7, pc}

08009cc0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fb64 	bl	800a398 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff fdae 	bl	8009846 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009cea:	4603      	mov	r3, r0
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	3204      	adds	r2, #4
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	4790      	blx	r2
      }
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4618      	mov	r0, r3
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fb01 	bl	800a3b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff ffe6 	bl	8009d9a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fdbd 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009de8:	4603      	mov	r3, r0
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009dee:	683c      	ldr	r4, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fdb6 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009df6:	4603      	mov	r3, r0
 8009df8:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f81e 	bl	8009e42 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8009e06:	4603      	mov	r3, r0
 8009e08:	68f9      	ldr	r1, [r7, #12]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fde5 	bl	80099da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fd9e 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e26:	4603      	mov	r3, r0
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fd98 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]
	return __p;
 8009e38:	68fb      	ldr	r3, [r7, #12]
      }
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fac4 	bl	800a3da <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 faad 	bl	800a3f2 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7ff fc1f 	bl	8009702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fa98 	bl	800a40e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	1d38      	adds	r0, r7, #4
 8009ef2:	e880 0006 	stmia.w	r0, {r1, r2}
 8009ef6:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3304      	adds	r3, #4
 8009efc:	1d3a      	adds	r2, r7, #4
 8009efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f02:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	60da      	str	r2, [r3, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8009f22:	687b      	ldr	r3, [r7, #4]
  }
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	3204      	adds	r2, #4
 8009f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f46:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60da      	str	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8009f60:	b082      	sub	sp, #8
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
 8009f6c:	f107 0110 	add.w	r1, r7, #16
 8009f70:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3304      	adds	r3, #4
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff ffd8 	bl	8009f30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3314      	adds	r3, #20
 8009f84:	f107 0210 	add.w	r2, r7, #16
 8009f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f9a:	b002      	add	sp, #8
 8009f9c:	4770      	bx	lr

08009f9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8009fa8:	6838      	ldr	r0, [r7, #0]
 8009faa:	f000 fa3e 	bl	800a42a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fa43 	bl	800a440 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 8009fba:	bf00      	nop
}
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8009fc4:	b590      	push	{r4, r7, lr}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8009fd4:	6938      	ldr	r0, [r7, #16]
 8009fd6:	f000 fc5a 	bl	800a88e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	6938      	ldr	r0, [r7, #16]
 8009fde:	f000 fc66 	bl	800a8ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	f107 0308 	add.w	r3, r7, #8
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f8 ff3f 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8009ff0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8009ff2:	f107 0308 	add.w	r3, r7, #8
 8009ff6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ffa:	f7f9 fc31 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8009ffe:	4603      	mov	r3, r0
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	bd90      	pop	{r4, r7, pc}

0800a008 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800a012:	6838      	ldr	r0, [r7, #0]
 800a014:	f000 fa23 	bl	800a45e <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800a018:	4602      	mov	r2, r0
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fa28 	bl	800a474 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800a024:	bf00      	nop
}
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa29 	bl	800a492 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800a040:	4603      	mov	r3, r0
  }
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a04a:	b590      	push	{r4, r7, lr}
 800a04c:	b087      	sub	sp, #28
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800a05c:	6938      	ldr	r0, [r7, #16]
 800a05e:	f000 fe59 	bl	800ad14 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800a062:	4604      	mov	r4, r0
 800a064:	6938      	ldr	r0, [r7, #16]
 800a066:	f000 fe65 	bl	800ad34 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800a06a:	4602      	mov	r2, r0
 800a06c:	f107 0308 	add.w	r3, r7, #8
 800a070:	4621      	mov	r1, r4
 800a072:	4618      	mov	r0, r3
 800a074:	f7f8 ff26 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800a078:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a084:	f7fe f86a 	bl	800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800a088:	bf00      	nop
}
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}

0800a092 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa08 	bl	800a4b0 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b088      	sub	sp, #32
 800a0ae:	af02      	add	r7, sp, #8
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f8 fb27 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e011      	b.n	800a0ee <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f103 0008 	add.w	r0, r3, #8
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0da:	f000 f9f5 	bl	800a4c8 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800a0de:	6178      	str	r0, [r7, #20]
    if (!node)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	711a      	strb	r2, [r3, #4]
    return node;
 800a0ec:	697b      	ldr	r3, [r7, #20]
  }
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa22 	bl	800a548 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a104:	4603      	mov	r3, r0
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa22 	bl	800a560 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fa2a 	bl	800a578 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fa2b 	bl	800a594 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a13e:	4603      	mov	r3, r0
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
      { }
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fa1d 	bl	800a5ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fa25 	bl	800a5c4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fa26 	bl	800a5e0 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a194:	4603      	mov	r3, r0
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800a19e:	b5b0      	push	{r4, r5, r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681c      	ldr	r4, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fa46 	bl	800a642 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800a1b6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 fa4b 	bl	800a658 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fa23 	bl	800a610 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bdb0      	pop	{r4, r5, r7, pc}

0800a1d4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff fb48 	bl	8009876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a1e6:	683c      	ldr	r4, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fb51 	bl	8009890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	601c      	str	r4, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa35 	bl	800a674 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a20a:	4603      	mov	r3, r0
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fa33 	bl	800a68c <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a226:	683c      	ldr	r4, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fca0 	bl	8009b6e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a22e:	4603      	mov	r3, r0
 800a230:	601c      	str	r4, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}

0800a23c <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fa2d 	bl	800a6a6 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fa2c 	bl	800a6be <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a266:	4603      	mov	r3, r0
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fa24 	bl	800a6d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa62 	bl	800a75e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff ff39 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	1d1a      	adds	r2, r3, #4
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	3304      	adds	r3, #4
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	f000 fa47 	bl	800a774 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
      }
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fa49 	bl	800a79e <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3304      	adds	r3, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f000 fa2c 	bl	800a774 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fc12 	bl	8009b6e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a34a:	4603      	mov	r3, r0
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fc0c 	bl	8009b6e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a356:	4603      	mov	r3, r0
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
	return __p;
 800a35c:	68fb      	ldr	r3, [r7, #12]
      }
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800a366:	b5b0      	push	{r4, r5, r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a372:	68fc      	ldr	r4, [r7, #12]
 800a374:	68b8      	ldr	r0, [r7, #8]
 800a376:	f000 fa31 	bl	800a7dc <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a37a:	4605      	mov	r5, r0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fc7e 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	4629      	mov	r1, r5
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fa32 	bl	800a7f2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bdb0      	pop	{r4, r5, r7, pc}

0800a398 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fa41 	bl	800a82a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a3b2:	b590      	push	{r4, r7, lr}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fac2 	bl	8009948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a3c4:	683c      	ldr	r4, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff facb 	bl	8009962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	601c      	str	r4, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}

0800a3da <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa2d 	bl	800a842 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fa2c 	bl	800a85a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a402:	4603      	mov	r3, r0
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fa2b 	bl	800a874 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a41e:	4603      	mov	r3, r0
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a432:	687b      	ldr	r3, [r7, #4]
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a44a:	2301      	movs	r3, #1
 800a44c:	2204      	movs	r2, #4
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7f8 f945 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a466:	687b      	ldr	r3, [r7, #4]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a47e:	2301      	movs	r3, #1
 800a480:	220a      	movs	r2, #10
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7f8 f92b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800a49c:	461a      	mov	r2, r3
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fa14 	bl	800a8ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800a4a6:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fa ffae 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800a4e0:	6178      	str	r0, [r7, #20]
    if (node) {
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	889b      	ldrh	r3, [r3, #4]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	809a      	strh	r2, [r3, #4]
      return node;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	e023      	b.n	800a540 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7f8 f918 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800a500:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800a502:	6a39      	ldr	r1, [r7, #32]
 800a504:	6938      	ldr	r0, [r7, #16]
 800a506:	f7f8 f881 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800a50a:	6178      	str	r0, [r7, #20]
    if (!node)
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800a512:	2300      	movs	r3, #0
 800a514:	e014      	b.n	800a540 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f103 0208 	add.w	r2, r3, #8
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	463a      	mov	r2, r7
 800a524:	ca07      	ldmia	r2, {r0, r1, r2}
 800a526:	f000 f9ec 	bl	800a902 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	3308      	adds	r3, #8
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
    add(node);
 800a536:	6979      	ldr	r1, [r7, #20]
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7f8 f92b 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800a53e:	697b      	ldr	r3, [r7, #20]
  }
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f9f6 	bl	800a942 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800a556:	4603      	mov	r3, r0
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f9f6 	bl	800a95a <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9e7 	bl	800a970 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f9e8 	bl	800a98a <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f9d9 	bl	800a9a0 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f9da 	bl	800a9ba <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a628:	461a      	mov	r2, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9d1 	bl	800a9d2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff ffe0 	bl	800a5f8 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800a664:	68b9      	ldr	r1, [r7, #8]
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 f9c6 	bl	800a9f8 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f9c8 	bl	800aa12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800a682:	4603      	mov	r3, r0
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f9c7 	bl	800aa2a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f9cb 	bl	800aa4a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f9cc 	bl	800aa64 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800a6d6:	b5b0      	push	{r4, r5, r7, lr}
 800a6d8:	b08a      	sub	sp, #40	@ 0x28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	f107 031c 	add.w	r3, r7, #28
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f9c6 	bl	800aa7c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800a6f0:	f107 0314 	add.w	r3, r7, #20
 800a6f4:	f107 021c 	add.w	r2, r7, #28
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f9d7 	bl	800aaae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800a700:	f107 0314 	add.w	r3, r7, #20
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f9fa 	bl	800aafe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800a70a:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70e:	4619      	mov	r1, r3
 800a710:	202c      	movs	r0, #44	@ 0x2c
 800a712:	f7fd fbb7 	bl	8007e84 <_ZnwjPv>
 800a716:	4604      	mov	r4, r0
 800a718:	4629      	mov	r1, r5
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f9fe 	bl	800ab1c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800a720:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800a722:	f107 0314 	add.w	r3, r7, #20
 800a726:	2100      	movs	r1, #0
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 fa19 	bl	800ab60 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800a734:	6a38      	ldr	r0, [r7, #32]
 800a736:	f000 fa22 	bl	800ab7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800a73a:	4602      	mov	r2, r0
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	601a      	str	r2, [r3, #0]
	}
 800a740:	f107 0314 	add.w	r3, r7, #20
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f9c5 	bl	800aad4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800a74a:	f107 031c 	add.w	r3, r7, #28
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 f9a1 	bl	800aa96 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4618      	mov	r0, r3
 800a758:	3728      	adds	r7, #40	@ 0x28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bdb0      	pop	{r4, r5, r7, pc}

0800a75e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
	{ }
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]
      }
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f9f6 	bl	800ab9a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800a7b4:	6838      	ldr	r0, [r7, #0]
 800a7b6:	f000 f9f0 	bl	800ab9a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800a7c2:	f107 030c 	add.w	r3, r7, #12
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 f9e7 	bl	800ab9a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	601a      	str	r2, [r3, #0]
    }
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a7f2:	b590      	push	{r4, r7, lr}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff fa3d 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a804:	4603      	mov	r3, r0
 800a806:	4619      	mov	r1, r3
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f9d1 	bl	800abb0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800a80e:	68fc      	ldr	r4, [r7, #12]
 800a810:	68b8      	ldr	r0, [r7, #8]
 800a812:	f7ff ffe3 	bl	800a7dc <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a816:	4603      	mov	r3, r0
 800a818:	4619      	mov	r1, r3
 800a81a:	4620      	mov	r0, r4
 800a81c:	f000 f9da 	bl	800abd4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	bd90      	pop	{r4, r7, pc}

0800a82a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f9df 	bl	800abf6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800a838:	4603      	mov	r3, r0
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f9e0 	bl	800ac10 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800a850:	4603      	mov	r3, r0
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f9df 	bl	800ac28 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a86a:	4603      	mov	r3, r0
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f9de 	bl	800ac40 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a884:	4603      	mov	r3, r0
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9de 	bl	800ac58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a89c:	4603      	mov	r3, r0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f9e5 	bl	800ac6e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800a8a4:	4603      	mov	r3, r0
  }
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9ce 	bl	800ac58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f9e1 	bl	800ac86 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800a8c4:	4603      	mov	r3, r0
  }
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800a8ce:	b590      	push	{r4, r7, lr}
 800a8d0:	b087      	sub	sp, #28
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	681c      	ldr	r4, [r3, #0]
 800a8de:	f107 0310 	add.w	r3, r7, #16
 800a8e2:	68f9      	ldr	r1, [r7, #12]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f9da 	bl	800ac9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800a8ea:	f107 0310 	add.w	r3, r7, #16
 800a8ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f9e9 	bl	800acca <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800a8f8:	4603      	mov	r3, r0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd90      	pop	{r4, r7, pc}

0800a902 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800a902:	b590      	push	{r4, r7, lr}
 800a904:	b087      	sub	sp, #28
 800a906:	af00      	add	r7, sp, #0
 800a908:	1d3c      	adds	r4, r7, #4
 800a90a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a90e:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e00c      	b.n	800a930 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	18d4      	adds	r4, r2, r3
 800a91c:	1d3b      	adds	r3, r7, #4
 800a91e:	6979      	ldr	r1, [r7, #20]
 800a920:	4618      	mov	r0, r3
 800a922:	f7f6 f9f1 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800a926:	4603      	mov	r3, r0
 800a928:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3301      	adds	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a934:	429a      	cmp	r2, r3
 800a936:	d3ee      	bcc.n	800a916 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	371c      	adds	r7, #28
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd90      	pop	{r4, r7, pc}

0800a942 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa02 	bl	800ad54 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800a950:	4603      	mov	r3, r0
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 f9f5 	bl	800ad6a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800a980:	4603      	mov	r3, r0
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f9e8 	bl	800ad80 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f9e7 	bl	800ad96 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
	if (__p)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f9de 	bl	800adac <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f9e0 	bl	800adca <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800aa0a:	bf00      	nop
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9ee 	bl	800adfc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800aa20:	4603      	mov	r3, r0
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f9ed 	bl	800ae12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f9f5 	bl	800ae2a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f9f6 	bl	800ae46 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f9f5 	bl	800ae5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800aa72:	4603      	mov	r3, r0
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f9f4 	bl	800ae74 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9f3 	bl	800ae8a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800aab8:	2101      	movs	r1, #1
 800aaba:	6838      	ldr	r0, [r7, #0]
 800aabc:	f000 f9f0 	bl	800aea0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800aac0:	4603      	mov	r3, r0
 800aac2:	461a      	mov	r2, r3
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f9f9 	bl	800aebe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f000 f9f9 	bl	800aee6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f9fa 	bl	800af04 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800ab10:	4603      	mov	r3, r0
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f9f7 	bl	800af1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ab2e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab5c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	330c      	adds	r3, #12
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fa04 	bl	800af48 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f81c 	bl	800ab7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ab46:	4602      	mov	r2, r0
 800ab48:	463b      	mov	r3, r7
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fa0a 	bl	800af66 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd90      	pop	{r4, r7, pc}
 800ab5c:	0801ea44 	.word	0x0801ea44

0800ab60 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	605a      	str	r2, [r3, #4]
	return *this;
 800ab70:	687b      	ldr	r3, [r7, #4]
      }
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	330c      	adds	r3, #12
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f9f7 	bl	800af7e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800ab90:	4603      	mov	r3, r0
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800abba:	6838      	ldr	r0, [r7, #0]
 800abbc:	f7ff f85f 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9e6 	bl	800af96 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	f7ff fdfc 	bl	800a7dc <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800abe4:	4603      	mov	r3, r0
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f9db 	bl	800afbc <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800ac06:	4603      	mov	r3, r0
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9da 	bl	800afd2 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f9d9 	bl	800afe8 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f9da 	bl	800b002 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800ac60:	687b      	ldr	r3, [r7, #4]
  }
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
    return client.getData();
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f9d0 	bl	800b01c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800ac7c:	4603      	mov	r3, r0
  }
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f9e0 	bl	800b054 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800ac94:	4603      	mov	r3, r0
  }
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800ac9e:	b590      	push	{r4, r7, lr}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800aca8:	6838      	ldr	r0, [r7, #0]
 800acaa:	f000 f9e1 	bl	800b070 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800acae:	4604      	mov	r4, r0
 800acb0:	6838      	ldr	r0, [r7, #0]
 800acb2:	f7ff fdfc 	bl	800a8ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800acb6:	4603      	mov	r3, r0
 800acb8:	461a      	mov	r2, r3
 800acba:	4621      	mov	r1, r4
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7f8 f901 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd90      	pop	{r4, r7, pc}

0800acca <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800acca:	b580      	push	{r7, lr}
 800accc:	b086      	sub	sp, #24
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	1d3b      	adds	r3, r7, #4
 800acd4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800acd8:	1d3b      	adds	r3, r7, #4
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f9 fe3a 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800ace0:	6178      	str	r0, [r7, #20]
    if (!data)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800ace8:	2300      	movs	r3, #0
 800acea:	e00f      	b.n	800ad0c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f9 ffd5 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800acf4:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800acf6:	6939      	ldr	r1, [r7, #16]
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	f7f8 fe17 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	68f9      	ldr	r1, [r7, #12]
 800ad02:	6978      	ldr	r0, [r7, #20]
 800ad04:	f000 f9c4 	bl	800b090 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	bf00      	nop
  }
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff f8fc 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 f9f6 	bl	800b116 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800ad2a:	4603      	mov	r3, r0
  }
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff f8ec 	bl	8009f1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ad42:	4603      	mov	r3, r0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fa05 	bl	800b154 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ad4a:	4603      	mov	r3, r0
  }
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f9d5 	bl	800b16c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800add4:	e009      	b.n	800adea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f9d7 	bl	800b18a <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800addc:	4603      	mov	r3, r0
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 f9de 	bl	800b1a0 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3308      	adds	r3, #8
 800ade8:	607b      	str	r3, [r7, #4]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d1f1      	bne.n	800add6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9cb 	bl	800b1b6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f9b1 	bl	800b1cc <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800aeaa:	2200      	movs	r2, #0
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f998 	bl	800b1e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800aeca:	68b8      	ldr	r0, [r7, #8]
 800aecc:	f000 f9b8 	bl	800b240 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800aed0:	4602      	mov	r2, r0
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]
      { }
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	60b9      	str	r1, [r7, #8]
 800aef0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f9ad 	bl	800b256 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800af0c:	687b      	ldr	r3, [r7, #4]
    }
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
	...

0800af1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800af24:	4a07      	ldr	r2, [pc, #28]	@ (800af44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	609a      	str	r2, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	0801ea60 	.word	0x0801ea60

0800af48 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	7039      	strb	r1, [r7, #0]
 800af52:	463b      	mov	r3, r7
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f98e 	bl	800b278 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f000 f98d 	bl	800b290 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f993 	bl	800b2b2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800af8c:	4603      	mov	r3, r0
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800af96:	b590      	push	{r4, r7, lr}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800afa0:	687c      	ldr	r4, [r7, #4]
 800afa2:	6838      	ldr	r0, [r7, #0]
 800afa4:	f7fe fe6b 	bl	8009c7e <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800afa8:	4603      	mov	r3, r0
 800afaa:	4619      	mov	r1, r3
 800afac:	4620      	mov	r0, r4
 800afae:	f000 f98b 	bl	800b2c8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd90      	pop	{r4, r7, pc}

0800afbc <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f974 	bl	800b2e0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800aff8:	4603      	mov	r3, r0
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f972 	bl	800b2f6 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800b012:	4603      	mov	r3, r0
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b085      	sub	sp, #20
 800b020:	af02      	add	r7, sp, #8
 800b022:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3304      	adds	r3, #4
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f874 	bl	800b116 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800b02e:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f000 f88d 	bl	800b154 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b03a:	4602      	mov	r2, r0
    return VariantData::getMember(
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	9200      	str	r2, [sp, #0]
 800b040:	3314      	adds	r3, #20
 800b042:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b044:	4620      	mov	r0, r4
 800b046:	f7fb ff09 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800b04a:	4603      	mov	r3, r0
  }
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	bd90      	pop	{r4, r7, pc}

0800b054 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3304      	adds	r3, #4
 800b060:	4618      	mov	r0, r3
 800b062:	f000 f877 	bl	800b154 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b066:	4603      	mov	r3, r0
  }
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff fded 	bl	800ac58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b07e:	4603      	mov	r3, r0
 800b080:	4618      	mov	r0, r3
 800b082:	f000 f943 	bl	800b30c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800b086:	4603      	mov	r3, r0
  }
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800b090:	b5b0      	push	{r4, r5, r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f7fb f9a6 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d006      	beq.n	800b0b6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	220a      	movs	r2, #10
 800b0ac:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e02a      	b.n	800b10c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800b0b6:	f107 0310 	add.w	r3, r7, #16
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f8 fa4e 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b0c2:	f107 0310 	add.w	r3, r7, #16
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fc fb6b 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f083 0301 	eor.w	r3, r3, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e018      	b.n	800b10e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	221a      	movs	r2, #26
 800b0e0:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800b0e2:	f107 0310 	add.w	r3, r7, #16
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fc fb6c 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	461c      	mov	r4, r3
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	f107 0310 	add.w	r3, r7, #16
 800b100:	4618      	mov	r0, r3
 800b102:	f7fc fb6b 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800b106:	4603      	mov	r3, r0
 800b108:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800b10c:	2301      	movs	r3, #1
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bdb0      	pop	{r4, r5, r7, pc}

0800b116 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b116:	b5b0      	push	{r4, r5, r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3304      	adds	r3, #4
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f96d 	bl	800b406 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800b12c:	4605      	mov	r5, r0
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f971 	bl	800b41e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b13c:	4603      	mov	r3, r0
    return VariantData::getElement(
 800b13e:	461a      	mov	r2, r3
 800b140:	4621      	mov	r1, r4
 800b142:	4628      	mov	r0, r5
 800b144:	f7fc ff73 	bl	800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800b148:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800b14a:	bf00      	nop
  }
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bdb0      	pop	{r4, r5, r7, pc}

0800b154 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f8e1 	bl	800b324 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800b162:	4603      	mov	r3, r0
  }
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	4619      	mov	r1, r3
 800b17e:	68b8      	ldr	r0, [r7, #8]
 800b180:	f011 fbd3 	bl	801c92a <_ZdlPvj>
      }
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7fd fa3a 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f8d7 	bl	800b3a4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	bf8c      	ite	hi
 800b1fe:	2301      	movhi	r3, #1
 800b200:	2300      	movls	r3, #0
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	bf14      	ite	ne
 800b208:	2301      	movne	r3, #1
 800b20a:	2300      	moveq	r3, #0
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d007      	beq.n	800b222 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4a09      	ldr	r2, [pc, #36]	@ (800b23c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d901      	bls.n	800b21e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800b21a:	f011 fbad 	bl	801c978 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800b21e:	f011 fba8 	bl	801c972 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	222c      	movs	r2, #44	@ 0x2c
 800b226:	fb02 f303 	mul.w	r3, r2, r3
 800b22a:	4618      	mov	r0, r3
 800b22c:	f011 fb8e 	bl	801c94c <_Znwj>
 800b230:	4603      	mov	r3, r0
 800b232:	bf00      	nop
      }
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	05d1745d 	.word	0x05d1745d

0800b240 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	222c      	movs	r2, #44	@ 0x2c
 800b266:	fb02 f303 	mul.w	r3, r2, r3
 800b26a:	4619      	mov	r1, r3
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f011 fb5c 	bl	801c92a <_ZdlPvj>
      }
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4619      	mov	r1, r3
 800b29c:	2020      	movs	r0, #32
 800b29e:	f7fc fdf1 	bl	8007e84 <_ZnwjPv>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 ffe5 	bl	800d274 <_ZN12CommsHandlerC1Ev>
    }
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b2ba:	687b      	ldr	r3, [r7, #4]
      }
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f853 	bl	800b3c0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800b31a:	4603      	mov	r3, r0
  }
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f000 f874 	bl	800b41e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b336:	4603      	mov	r3, r0
  }
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af02      	add	r7, sp, #8
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	4638      	mov	r0, r7
 800b34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800b34e:	463b      	mov	r3, r7
 800b350:	4618      	mov	r0, r3
 800b352:	f7f7 f9dc 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800b35c:	2300      	movs	r3, #0
 800b35e:	e01d      	b.n	800b39c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f7fc fe9f 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7f7 fc95 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800b372:	4603      	mov	r3, r0
 800b374:	e003      	b.n	800b37e <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7f7 fb85 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800b37c:	4603      	mov	r3, r0
 800b37e:	617b      	str	r3, [r7, #20]
    if (!obj)
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800b386:	2300      	movs	r3, #0
 800b388:	e008      	b.n	800b39c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800b38a:	6978      	ldr	r0, [r7, #20]
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	463b      	mov	r3, r7
 800b392:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b394:	f000 f84f 	bl	800b436 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b398:	4603      	mov	r3, r0
 800b39a:	bf00      	nop
  }
 800b39c:	4618      	mov	r0, r3
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b3ac:	4b03      	ldr	r3, [pc, #12]	@ (800b3bc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	02e8ba2e 	.word	0x02e8ba2e

0800b3c0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 f853 	bl	800b478 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800b3d2:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e00f      	b.n	800b3fe <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800b3de:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff feb5 	bl	800b154 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	9200      	str	r2, [sp, #0]
 800b3f0:	3314      	adds	r3, #20
 800b3f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7ff ffa3 	bl	800b340 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800b3fa:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800b3fc:	bf00      	nop
  }
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	bd90      	pop	{r4, r7, pc}

0800b406 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7fc feed 	bl	80081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800b414:	4603      	mov	r3, r0
  }
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7fc fed5 	bl	80081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800b42c:	4603      	mov	r3, r0
  }
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800b436:	b580      	push	{r7, lr}
 800b438:	b088      	sub	sp, #32
 800b43a:	af02      	add	r7, sp, #8
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	4638      	mov	r0, r7
 800b440:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	463b      	mov	r3, r7
 800b44a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7fa f99c 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800b452:	6178      	str	r0, [r7, #20]
  if (data)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	e008      	b.n	800b470 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	463b      	mov	r3, r7
 800b464:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f812 	bl	800b490 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b46c:	4603      	mov	r3, r0
 800b46e:	bf00      	nop
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f85b 	bl	800b53c <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800b486:	4603      	mov	r3, r0
  }
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800b490:	b580      	push	{r7, lr}
 800b492:	b08a      	sub	sp, #40	@ 0x28
 800b494:	af02      	add	r7, sp, #8
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	4638      	mov	r0, r7
 800b49a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800b49e:	f107 0318 	add.w	r3, r7, #24
 800b4a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f7 ffd5 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800b4aa:	f107 0318 	add.w	r3, r7, #24
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f9 fa74 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f083 0301 	eor.w	r3, r3, #1
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e037      	b.n	800b534 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800b4c4:	f107 0310 	add.w	r3, r7, #16
 800b4c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f7 ffc2 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800b4d0:	f107 0310 	add.w	r3, r7, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7f9 fa61 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f083 0301 	eor.w	r3, r3, #1
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e024      	b.n	800b534 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800b4ea:	f107 0318 	add.w	r3, r7, #24
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7f9 fa7d 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4fc:	f7fe f938 	bl	8009770 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800b500:	4603      	mov	r3, r0
 800b502:	f083 0301 	eor.w	r3, r3, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800b50c:	2300      	movs	r3, #0
 800b50e:	e011      	b.n	800b534 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f107 0218 	add.w	r2, r7, #24
 800b520:	ca06      	ldmia	r2, {r1, r2}
 800b522:	f7f7 ff10 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f9 fa47 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800b530:	4603      	mov	r3, r0
 800b532:	bf00      	nop
}
 800b534:	4618      	mov	r0, r3
 800b536:	3720      	adds	r7, #32
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3304      	adds	r3, #4
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f81a 	bl	800b582 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800b54e:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b556:	2300      	movs	r3, #0
 800b558:	e00f      	b.n	800b57a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800b55a:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	68dd      	ldr	r5, [r3, #12]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff ff5a 	bl	800b41e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b56a:	4603      	mov	r3, r0
 800b56c:	461a      	mov	r2, r3
 800b56e:	4629      	mov	r1, r5
 800b570:	4620      	mov	r0, r4
 800b572:	f7fc fd71 	bl	8008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800b576:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800b578:	bf00      	nop
  }
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bdb0      	pop	{r4, r5, r7, pc}

0800b582 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b582:	b580      	push	{r7, lr}
 800b584:	b082      	sub	sp, #8
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7fc fe3d 	bl	800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800b590:	4603      	mov	r3, r0
  }
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <_Z41__static_initialization_and_destruction_0ii>:
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d10a      	bne.n	800b5c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d105      	bne.n	800b5c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800b5b6:	4805      	ldr	r0, [pc, #20]	@ (800b5cc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b5b8:	f7fc fcba 	bl	8007f30 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800b5bc:	4804      	ldr	r0, [pc, #16]	@ (800b5d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b5be:	f7f5 fb39 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	30000080 	.word	0x30000080
 800b5d0:	300000c0 	.word	0x300000c0

0800b5d4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	4a05      	ldr	r2, [pc, #20]	@ (800b5f4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fe f8a3 	bl	8009730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	0801ea44 	.word	0x0801ea44

0800b5f8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ffe7 	bl	800b5d4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b606:	212c      	movs	r1, #44	@ 0x2c
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f011 f98e 	bl	801c92a <_ZdlPvj>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	330c      	adds	r3, #12
 800b624:	4618      	mov	r0, r3
 800b626:	f000 f856 	bl	800b6d6 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b62a:	4604      	mov	r4, r0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff faa6 	bl	800ab7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b632:	4603      	mov	r3, r0
 800b634:	4619      	mov	r1, r3
 800b636:	4620      	mov	r0, r4
 800b638:	f000 f859 	bl	800b6ee <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	bd90      	pop	{r4, r7, pc}

0800b644 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	330c      	adds	r3, #12
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f840 	bl	800b6d6 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b656:	4602      	mov	r2, r0
 800b658:	f107 0314 	add.w	r3, r7, #20
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fa0c 	bl	800aa7c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800b664:	f107 0114 	add.w	r1, r7, #20
 800b668:	f107 030c 	add.w	r3, r7, #12
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fc25 	bl	800aebe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ffad 	bl	800b5d4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800b67a:	f107 030c 	add.w	r3, r7, #12
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff fa28 	bl	800aad4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff fa04 	bl	800aa96 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff fa6d 	bl	800ab7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b6a4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b6a6:	f7fc fc39 	bl	8007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800b6aa:	4602      	mov	r2, r0
	    ||
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d005      	beq.n	800b6be <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800b6b2:	6838      	ldr	r0, [r7, #0]
 800b6b4:	f011 f96c 	bl	801c990 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800b6b8:	4603      	mov	r3, r0
	    ||
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e000      	b.n	800b6c4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800b6c2:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	e000      	b.n	800b6ce <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800b6cc:	2300      	movs	r3, #0
      }
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f811 	bl	800b706 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800b6f8:	6838      	ldr	r0, [r7, #0]
 800b6fa:	f000 f80f 	bl	800b71c <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
    }
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800b736:	b580      	push	{r7, lr}
 800b738:	af00      	add	r7, sp, #0
 800b73a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b73e:	2001      	movs	r0, #1
 800b740:	f7ff ff2c 	bl	800b59c <_Z41__static_initialization_and_destruction_0ii>
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b74e:	4b0a      	ldr	r3, [pc, #40]	@ (800b778 <HAL_MspInit+0x30>)
 800b750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b754:	4a08      	ldr	r2, [pc, #32]	@ (800b778 <HAL_MspInit+0x30>)
 800b756:	f043 0302 	orr.w	r3, r3, #2
 800b75a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b75e:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <HAL_MspInit+0x30>)
 800b760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b764:	f003 0302 	and.w	r3, r3, #2
 800b768:	607b      	str	r3, [r7, #4]
 800b76a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	58024400 	.word	0x58024400

0800b77c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b0bc      	sub	sp, #240	@ 0xf0
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b784:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	605a      	str	r2, [r3, #4]
 800b78e:	609a      	str	r2, [r3, #8]
 800b790:	60da      	str	r2, [r3, #12]
 800b792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b794:	f107 0318 	add.w	r3, r7, #24
 800b798:	22c0      	movs	r2, #192	@ 0xc0
 800b79a:	2100      	movs	r1, #0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f011 fecd 	bl	801d53c <memset>
  if(hsd->Instance==SDMMC1)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a3c      	ldr	r2, [pc, #240]	@ (800b898 <HAL_SD_MspInit+0x11c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d171      	bne.n	800b890 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800b7ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b7bc:	f107 0318 	add.w	r3, r7, #24
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f008 fab5 	bl	8013d30 <HAL_RCCEx_PeriphCLKConfig>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800b7cc:	f7fc fb4e 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b7d0:	4b32      	ldr	r3, [pc, #200]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b7d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b7d6:	4a31      	ldr	r2, [pc, #196]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b7d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800b7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b7e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b7e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7ee:	4b2b      	ldr	r3, [pc, #172]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7f4:	4a29      	ldr	r2, [pc, #164]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b7f6:	f043 0304 	orr.w	r3, r3, #4
 800b7fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7fe:	4b27      	ldr	r3, [pc, #156]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	613b      	str	r3, [r7, #16]
 800b80a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b80c:	4b23      	ldr	r3, [pc, #140]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b812:	4a22      	ldr	r2, [pc, #136]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b814:	f043 0308 	orr.w	r3, r3, #8
 800b818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b81c:	4b1f      	ldr	r3, [pc, #124]	@ (800b89c <HAL_SD_MspInit+0x120>)
 800b81e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b822:	f003 0308 	and.w	r3, r3, #8
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b82a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800b82e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b832:	2302      	movs	r3, #2
 800b834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b838:	2300      	movs	r3, #0
 800b83a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b83e:	2303      	movs	r3, #3
 800b840:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b844:	230c      	movs	r3, #12
 800b846:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b84a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b84e:	4619      	mov	r1, r3
 800b850:	4813      	ldr	r0, [pc, #76]	@ (800b8a0 <HAL_SD_MspInit+0x124>)
 800b852:	f007 f883 	bl	801295c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b856:	2304      	movs	r3, #4
 800b858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85c:	2302      	movs	r3, #2
 800b85e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b862:	2300      	movs	r3, #0
 800b864:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b868:	2303      	movs	r3, #3
 800b86a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b86e:	230c      	movs	r3, #12
 800b870:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b874:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b878:	4619      	mov	r1, r3
 800b87a:	480a      	ldr	r0, [pc, #40]	@ (800b8a4 <HAL_SD_MspInit+0x128>)
 800b87c:	f007 f86e 	bl	801295c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800b880:	2200      	movs	r2, #0
 800b882:	2100      	movs	r1, #0
 800b884:	2031      	movs	r0, #49	@ 0x31
 800b886:	f004 fc78 	bl	801017a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b88a:	2031      	movs	r0, #49	@ 0x31
 800b88c:	f004 fc8f 	bl	80101ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800b890:	bf00      	nop
 800b892:	37f0      	adds	r7, #240	@ 0xf0
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	52007000 	.word	0x52007000
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	58020800 	.word	0x58020800
 800b8a4:	58020c00 	.word	0x58020c00

0800b8a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b0ba      	sub	sp, #232	@ 0xe8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	605a      	str	r2, [r3, #4]
 800b8ba:	609a      	str	r2, [r3, #8]
 800b8bc:	60da      	str	r2, [r3, #12]
 800b8be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b8c0:	f107 0310 	add.w	r3, r7, #16
 800b8c4:	22c0      	movs	r2, #192	@ 0xc0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f011 fe37 	bl	801d53c <memset>
  if(huart->Instance==USART1)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a27      	ldr	r2, [pc, #156]	@ (800b970 <HAL_UART_MspInit+0xc8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d146      	bne.n	800b966 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b8d8:	f04f 0201 	mov.w	r2, #1
 800b8dc:	f04f 0300 	mov.w	r3, #0
 800b8e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b8ea:	f107 0310 	add.w	r3, r7, #16
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f008 fa1e 	bl	8013d30 <HAL_RCCEx_PeriphCLKConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800b8fa:	f7fc fab7 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b904:	4a1b      	ldr	r2, [pc, #108]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b906:	f043 0310 	orr.w	r3, r3, #16
 800b90a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b90e:	4b19      	ldr	r3, [pc, #100]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b91c:	4b15      	ldr	r3, [pc, #84]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b91e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b922:	4a14      	ldr	r2, [pc, #80]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b92c:	4b11      	ldr	r3, [pc, #68]	@ (800b974 <HAL_UART_MspInit+0xcc>)
 800b92e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	60bb      	str	r3, [r7, #8]
 800b938:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b93a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b93e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b942:	2302      	movs	r3, #2
 800b944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b94e:	2300      	movs	r3, #0
 800b950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b954:	2307      	movs	r3, #7
 800b956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b95a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b95e:	4619      	mov	r1, r3
 800b960:	4805      	ldr	r0, [pc, #20]	@ (800b978 <HAL_UART_MspInit+0xd0>)
 800b962:	f006 fffb 	bl	801295c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800b966:	bf00      	nop
 800b968:	37e8      	adds	r7, #232	@ 0xe8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40011000 	.word	0x40011000
 800b974:	58024400 	.word	0x58024400
 800b978:	58020000 	.word	0x58020000

0800b97c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <NMI_Handler+0x4>

0800b984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b988:	bf00      	nop
 800b98a:	e7fd      	b.n	800b988 <HardFault_Handler+0x4>

0800b98c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b990:	bf00      	nop
 800b992:	e7fd      	b.n	800b990 <MemManage_Handler+0x4>

0800b994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b998:	bf00      	nop
 800b99a:	e7fd      	b.n	800b998 <BusFault_Handler+0x4>

0800b99c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <UsageFault_Handler+0x4>

0800b9a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b9a8:	bf00      	nop
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b9b6:	bf00      	nop
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b9c4:	bf00      	nop
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b9d2:	f004 fa91 	bl	800fef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b9d6:	bf00      	nop
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800b9e0:	4802      	ldr	r0, [pc, #8]	@ (800b9ec <SDMMC1_IRQHandler+0x10>)
 800b9e2:	f00b f913 	bl	8016c0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800b9e6:	bf00      	nop
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	240002f8 	.word	0x240002f8

0800b9f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
	return 1;
 800b9f4:	2301      	movs	r3, #1
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <_kill>:

int _kill(int pid, int sig)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ba0a:	f011 fe39 	bl	801d680 <__errno>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2216      	movs	r2, #22
 800ba12:	601a      	str	r2, [r3, #0]
	return -1;
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <_exit>:

void _exit (int status)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ba28:	f04f 31ff 	mov.w	r1, #4294967295
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff ffe7 	bl	800ba00 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <_exit+0x12>

0800ba36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	e00a      	b.n	800ba5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba48:	f3af 8000 	nop.w
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	60ba      	str	r2, [r7, #8]
 800ba54:	b2ca      	uxtb	r2, r1
 800ba56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	dbf0      	blt.n	800ba48 <_read+0x12>
	}

return len;
 800ba66:	687b      	ldr	r3, [r7, #4]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e009      	b.n	800ba96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	60ba      	str	r2, [r7, #8]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fb ff3a 	bl	8007904 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	3301      	adds	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	dbf1      	blt.n	800ba82 <_write+0x12>
	}
	return len;
 800ba9e:	687b      	ldr	r3, [r7, #4]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_close>:

int _close(int file)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	return -1;
 800bab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bad0:	605a      	str	r2, [r3, #4]
	return 0;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <_isatty>:

int _isatty(int file)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	return 1;
 800bae8:	2301      	movs	r3, #1
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b085      	sub	sp, #20
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
	return 0;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb18:	4a14      	ldr	r2, [pc, #80]	@ (800bb6c <_sbrk+0x5c>)
 800bb1a:	4b15      	ldr	r3, [pc, #84]	@ (800bb70 <_sbrk+0x60>)
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb24:	4b13      	ldr	r3, [pc, #76]	@ (800bb74 <_sbrk+0x64>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb2c:	4b11      	ldr	r3, [pc, #68]	@ (800bb74 <_sbrk+0x64>)
 800bb2e:	4a12      	ldr	r2, [pc, #72]	@ (800bb78 <_sbrk+0x68>)
 800bb30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb32:	4b10      	ldr	r3, [pc, #64]	@ (800bb74 <_sbrk+0x64>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4413      	add	r3, r2
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d207      	bcs.n	800bb50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb40:	f011 fd9e 	bl	801d680 <__errno>
 800bb44:	4603      	mov	r3, r0
 800bb46:	220c      	movs	r2, #12
 800bb48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4e:	e009      	b.n	800bb64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bb50:	4b08      	ldr	r3, [pc, #32]	@ (800bb74 <_sbrk+0x64>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb56:	4b07      	ldr	r3, [pc, #28]	@ (800bb74 <_sbrk+0x64>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	4a05      	ldr	r2, [pc, #20]	@ (800bb74 <_sbrk+0x64>)
 800bb60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	24080000 	.word	0x24080000
 800bb70:	00000400 	.word	0x00000400
 800bb74:	2400044c 	.word	0x2400044c
 800bb78:	24000c50 	.word	0x24000c50

0800bb7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bb80:	4b37      	ldr	r3, [pc, #220]	@ (800bc60 <SystemInit+0xe4>)
 800bb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb86:	4a36      	ldr	r2, [pc, #216]	@ (800bc60 <SystemInit+0xe4>)
 800bb88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bb90:	4b34      	ldr	r3, [pc, #208]	@ (800bc64 <SystemInit+0xe8>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	2b06      	cmp	r3, #6
 800bb9a:	d807      	bhi.n	800bbac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bb9c:	4b31      	ldr	r3, [pc, #196]	@ (800bc64 <SystemInit+0xe8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f023 030f 	bic.w	r3, r3, #15
 800bba4:	4a2f      	ldr	r2, [pc, #188]	@ (800bc64 <SystemInit+0xe8>)
 800bba6:	f043 0307 	orr.w	r3, r3, #7
 800bbaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bbac:	4b2e      	ldr	r3, [pc, #184]	@ (800bc68 <SystemInit+0xec>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a2d      	ldr	r2, [pc, #180]	@ (800bc68 <SystemInit+0xec>)
 800bbb2:	f043 0301 	orr.w	r3, r3, #1
 800bbb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbb8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc68 <SystemInit+0xec>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bbbe:	4b2a      	ldr	r3, [pc, #168]	@ (800bc68 <SystemInit+0xec>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	4929      	ldr	r1, [pc, #164]	@ (800bc68 <SystemInit+0xec>)
 800bbc4:	4b29      	ldr	r3, [pc, #164]	@ (800bc6c <SystemInit+0xf0>)
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bbca:	4b26      	ldr	r3, [pc, #152]	@ (800bc64 <SystemInit+0xe8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0308 	and.w	r3, r3, #8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bbd6:	4b23      	ldr	r3, [pc, #140]	@ (800bc64 <SystemInit+0xe8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f023 030f 	bic.w	r3, r3, #15
 800bbde:	4a21      	ldr	r2, [pc, #132]	@ (800bc64 <SystemInit+0xe8>)
 800bbe0:	f043 0307 	orr.w	r3, r3, #7
 800bbe4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bbe6:	4b20      	ldr	r3, [pc, #128]	@ (800bc68 <SystemInit+0xec>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bbec:	4b1e      	ldr	r3, [pc, #120]	@ (800bc68 <SystemInit+0xec>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bbf2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc68 <SystemInit+0xec>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bbf8:	4b1b      	ldr	r3, [pc, #108]	@ (800bc68 <SystemInit+0xec>)
 800bbfa:	4a1d      	ldr	r2, [pc, #116]	@ (800bc70 <SystemInit+0xf4>)
 800bbfc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bbfe:	4b1a      	ldr	r3, [pc, #104]	@ (800bc68 <SystemInit+0xec>)
 800bc00:	4a1c      	ldr	r2, [pc, #112]	@ (800bc74 <SystemInit+0xf8>)
 800bc02:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bc04:	4b18      	ldr	r3, [pc, #96]	@ (800bc68 <SystemInit+0xec>)
 800bc06:	4a1c      	ldr	r2, [pc, #112]	@ (800bc78 <SystemInit+0xfc>)
 800bc08:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bc0a:	4b17      	ldr	r3, [pc, #92]	@ (800bc68 <SystemInit+0xec>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bc10:	4b15      	ldr	r3, [pc, #84]	@ (800bc68 <SystemInit+0xec>)
 800bc12:	4a19      	ldr	r2, [pc, #100]	@ (800bc78 <SystemInit+0xfc>)
 800bc14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bc16:	4b14      	ldr	r3, [pc, #80]	@ (800bc68 <SystemInit+0xec>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bc1c:	4b12      	ldr	r3, [pc, #72]	@ (800bc68 <SystemInit+0xec>)
 800bc1e:	4a16      	ldr	r2, [pc, #88]	@ (800bc78 <SystemInit+0xfc>)
 800bc20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bc22:	4b11      	ldr	r3, [pc, #68]	@ (800bc68 <SystemInit+0xec>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bc28:	4b0f      	ldr	r3, [pc, #60]	@ (800bc68 <SystemInit+0xec>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a0e      	ldr	r2, [pc, #56]	@ (800bc68 <SystemInit+0xec>)
 800bc2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bc34:	4b0c      	ldr	r3, [pc, #48]	@ (800bc68 <SystemInit+0xec>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bc3a:	4b10      	ldr	r3, [pc, #64]	@ (800bc7c <SystemInit+0x100>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	4b10      	ldr	r3, [pc, #64]	@ (800bc80 <SystemInit+0x104>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc46:	d202      	bcs.n	800bc4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bc48:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <SystemInit+0x108>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc88 <SystemInit+0x10c>)
 800bc50:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800bc54:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	e000ed00 	.word	0xe000ed00
 800bc64:	52002000 	.word	0x52002000
 800bc68:	58024400 	.word	0x58024400
 800bc6c:	eaf6ed7f 	.word	0xeaf6ed7f
 800bc70:	02020200 	.word	0x02020200
 800bc74:	01ff0000 	.word	0x01ff0000
 800bc78:	01010280 	.word	0x01010280
 800bc7c:	5c001000 	.word	0x5c001000
 800bc80:	ffff0000 	.word	0xffff0000
 800bc84:	51008108 	.word	0x51008108
 800bc88:	52004000 	.word	0x52004000

0800bc8c <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d008      	beq.n	800bcb0 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8bdb      	ldrh	r3, [r3, #30]
 800bca6:	2201      	movs	r2, #1
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f007 f807 	bl	8012cbc <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 800bcae:	e007      	b.n	800bcc0 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	8bdb      	ldrh	r3, [r3, #30]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	4619      	mov	r1, r3
 800bcbc:	f006 fffe 	bl	8012cbc <HAL_GPIO_WritePin>
        }
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE>:

/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

shared_ptr<Module> createBlink(const JsonObject& config) {
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b098      	sub	sp, #96	@ 0x60
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
    const char* pin = config["Pin"];
 800bcd2:	f107 0314 	add.w	r3, r7, #20
 800bcd6:	4a24      	ldr	r2, [pc, #144]	@ (800bd68 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa0>)
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 f8b8 	bl	800be50 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bce0:	f107 0314 	add.w	r3, r7, #20
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f9 f911 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bcea:	4603      	mov	r3, r0
 800bcec:	613b      	str	r3, [r7, #16]
    int frequency = config["Frequency"];
 800bcee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bcf2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd6c <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa4>)
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f9 f914 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bcfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 f8ca 	bl	800be9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800bd06:	4603      	mov	r3, r0
 800bd08:	60fb      	str	r3, [r7, #12]
    uint32_t threadFreq = config["ThreadFreq"];
 800bd0a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bd0e:	4a18      	ldr	r2, [pc, #96]	@ (800bd70 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa8>)
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f8cd 	bl	800beb2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bd18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f9 f926 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800bd22:	4603      	mov	r3, r0
 800bd24:	60bb      	str	r3, [r7, #8]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4811      	ldr	r0, [pc, #68]	@ (800bd74 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xac>)
 800bd2e:	f011 fa9b 	bl	801d268 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800bd32:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800bd36:	f107 030c 	add.w	r3, r7, #12
 800bd3a:	f107 0208 	add.w	r2, r7, #8
 800bd3e:	f107 0110 	add.w	r1, r7, #16
 800bd42:	f000 f8db 	bl	800befc <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800bd46:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f938 	bl	800bfc2 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800bd52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 f911 	bl	800bf7e <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800bd5c:	bf00      	nop
}
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	3760      	adds	r7, #96	@ 0x60
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0801e67c 	.word	0x0801e67c
 800bd6c:	0801e680 	.word	0x0801e680
 800bd70:	0801e68c 	.word	0x0801e68c
 800bd74:	0801e698 	.word	0x0801e698

0800bd78 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fead 	bl	800dae8 <_ZN6ModuleC1Ev>
 800bd8e:	4a15      	ldr	r2, [pc, #84]	@ (800bde4 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	601a      	str	r2, [r3, #0]
	bState(false),
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bdac:	2301      	movs	r3, #1
 800bdae:	617b      	str	r3, [r7, #20]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3320      	adds	r3, #32
 800bdb4:	f107 0214 	add.w	r2, r7, #20
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 f914 	bl	800bfe8 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3320      	adds	r3, #32
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f95f 	bl	800c088 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	7d5b      	ldrb	r3, [r3, #21]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7ff ff5a 	bl	800bc8c <_ZN3Pin3setEb>
}
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	0801eaa8 	.word	0x0801eaa8

0800bde8 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	69db      	ldr	r3, [r3, #28]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	69da      	ldr	r2, [r3, #28]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	085b      	lsrs	r3, r3, #1
 800be04:	429a      	cmp	r2, r3
 800be06:	d315      	bcc.n	800be34 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	7d5b      	ldrb	r3, [r3, #21]
 800be0c:	f083 0301 	eor.w	r3, r3, #1
 800be10:	b2da      	uxtb	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	3320      	adds	r3, #32
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f934 	bl	800c088 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800be20:	4602      	mov	r2, r0
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7d5b      	ldrb	r3, [r3, #21]
 800be26:	4619      	mov	r1, r3
 800be28:	4610      	mov	r0, r2
 800be2a:	f7ff ff2f 	bl	800bc8c <_ZN3Pin3setEb>
        blinkCount = 0;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	61da      	str	r2, [r3, #28]
	}
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
	return;
 800be44:	bf00      	nop
}
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800be50:	b580      	push	{r7, lr}
 800be52:	b08c      	sub	sp, #48	@ 0x30
 800be54:	af02      	add	r7, sp, #8
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	f107 0314 	add.w	r3, r7, #20
 800be62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be66:	e883 0003 	stmia.w	r3, {r0, r1}
 800be6a:	f107 031c 	add.w	r3, r7, #28
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f920 	bl	800c0b6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800be76:	466a      	mov	r2, sp
 800be78:	f107 0320 	add.w	r3, r7, #32
 800be7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be80:	e882 0003 	stmia.w	r2, {r0, r1}
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f107 0214 	add.w	r2, r7, #20
 800be8a:	ca06      	ldmia	r2, {r1, r2}
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7f9 f9ac 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	3728      	adds	r7, #40	@ 0x28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
    return as<T>();
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f91a 	bl	800c0dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800bea8:	4603      	mov	r3, r0
  }
 800beaa:	4618      	mov	r0, r3
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b08c      	sub	sp, #48	@ 0x30
 800beb6:	af02      	add	r7, sp, #8
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	60b9      	str	r1, [r7, #8]
 800bebc:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	f107 0314 	add.w	r3, r7, #20
 800bec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bec8:	e883 0003 	stmia.w	r3, {r0, r1}
 800becc:	f107 031c 	add.w	r3, r7, #28
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe f898 	bl	800a008 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bed8:	466a      	mov	r2, sp
 800beda:	f107 0320 	add.w	r3, r7, #32
 800bede:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bee2:	e882 0003 	stmia.w	r2, {r0, r1}
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	f107 0214 	add.w	r2, r7, #20
 800beec:	ca06      	ldmia	r2, {r1, r2}
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7f9 f97b 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	3728      	adds	r7, #40	@ 0x28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800befc:	b5b0      	push	{r4, r5, r7, lr}
 800befe:	b08c      	sub	sp, #48	@ 0x30
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bf0a:	2024      	movs	r0, #36	@ 0x24
 800bf0c:	f010 fd1e 	bl	801c94c <_Znwj>
 800bf10:	4603      	mov	r3, r0
 800bf12:	461d      	mov	r5, r3
 800bf14:	68b8      	ldr	r0, [r7, #8]
 800bf16:	f000 f903 	bl	800c120 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	681c      	ldr	r4, [r3, #0]
 800bf1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf22:	4618      	mov	r0, r3
 800bf24:	f010 fd23 	bl	801c96e <_ZNSaIcEC1Ev>
 800bf28:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800bf2c:	f107 0314 	add.w	r3, r7, #20
 800bf30:	4621      	mov	r1, r4
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7f8 ff64 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7fd ff18 	bl	8009d6e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	681c      	ldr	r4, [r3, #0]
 800bf42:	6838      	ldr	r0, [r7, #0]
 800bf44:	f000 f8f7 	bl	800c136 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f107 0114 	add.w	r1, r7, #20
 800bf50:	4622      	mov	r2, r4
 800bf52:	4628      	mov	r0, r5
 800bf54:	f7ff ff10 	bl	800bd78 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 f906 	bl	800c16c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf60:	f107 0314 	add.w	r3, r7, #20
 800bf64:	4618      	mov	r0, r3
 800bf66:	f010 fd9d 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bf6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f010 fcfe 	bl	801c970 <_ZNSaIcED1Ev>
 800bf74:	bf00      	nop
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	3730      	adds	r7, #48	@ 0x30
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bdb0      	pop	{r4, r5, r7, pc}

0800bf7e <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bf7e:	b590      	push	{r4, r7, lr}
 800bf80:	b085      	sub	sp, #20
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 f8fe 	bl	800c18a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800bf8e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00c      	beq.n	800bfb2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f903 	bl	800c1a4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f000 f90c 	bl	800c1be <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 f939 	bl	800c224 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]
      }
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd90      	pop	{r4, r7, pc}

0800bfc2 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800bfcc:	687c      	ldr	r4, [r7, #4]
 800bfce:	6838      	ldr	r0, [r7, #0]
 800bfd0:	f000 f939 	bl	800c246 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 f93f 	bl	800c25c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}

0800bfe8 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800bfe8:	b590      	push	{r4, r7, lr}
 800bfea:	b08b      	sub	sp, #44	@ 0x2c
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bff4:	2044      	movs	r0, #68	@ 0x44
 800bff6:	f010 fca9 	bl	801c94c <_Znwj>
 800bffa:	4603      	mov	r3, r0
 800bffc:	461c      	mov	r4, r3
 800bffe:	68b8      	ldr	r0, [r7, #8]
 800c000:	f000 f964 	bl	800c2cc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c004:	4602      	mov	r2, r0
 800c006:	f107 0310 	add.w	r3, r7, #16
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f010 fe48 	bl	801cca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f844 	bl	800c0a0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800c018:	4603      	mov	r3, r0
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f107 0310 	add.w	r3, r7, #16
 800c020:	4619      	mov	r1, r3
 800c022:	4620      	mov	r0, r4
 800c024:	f7f6 f8df 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c028:	4621      	mov	r1, r4
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f969 	bl	800c302 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c030:	f107 0310 	add.w	r3, r7, #16
 800c034:	4618      	mov	r0, r3
 800c036:	f010 fd35 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c03a:	bf00      	nop
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	372c      	adds	r7, #44	@ 0x2c
 800c040:	46bd      	mov	sp, r7
 800c042:	bd90      	pop	{r4, r7, pc}

0800c044 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c044:	b590      	push	{r4, r7, lr}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f966 	bl	800c320 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c054:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f96b 	bl	800c33a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800c064:	4604      	mov	r4, r0
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 f974 	bl	800c354 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c06c:	4603      	mov	r3, r0
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4619      	mov	r1, r3
 800c072:	4620      	mov	r0, r4
 800c074:	f000 f986 	bl	800c384 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]
      }
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	bd90      	pop	{r4, r7, pc}

0800c088 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	return get();
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f98a 	bl	800c3aa <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800c096:	4603      	mov	r3, r0
      }
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c0c0:	6838      	ldr	r0, [r7, #0]
 800c0c2:	f000 f97f 	bl	800c3c4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 f984 	bl	800c3da <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800c0d2:	bf00      	nop
}
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800c0ec:	6938      	ldr	r0, [r7, #16]
 800c0ee:	f7f9 ff8e 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	6938      	ldr	r0, [r7, #16]
 800c0f6:	f7f9 fe18 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	f107 0308 	add.w	r3, r7, #8
 800c100:	4621      	mov	r1, r4
 800c102:	4618      	mov	r0, r3
 800c104:	f7f6 feb3 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800c108:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800c10a:	f107 0308 	add.w	r3, r7, #8
 800c10e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c112:	f000 f971 	bl	800c3f8 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800c116:	4603      	mov	r3, r0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	371c      	adds	r7, #28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd90      	pop	{r4, r7, pc}

0800c120 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4618      	mov	r0, r3
 800c12c:	370c      	adds	r7, #12
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c136:	b480      	push	{r7}
 800c138:	b083      	sub	sp, #12
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	4611      	mov	r1, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f969 	bl	800c434 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7ff ffe6 	bl	800c14c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4618      	mov	r0, r3
 800c196:	f000 f961 	bl	800c45c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f961 	bl	800c476 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c1be:	b480      	push	{r7}
 800c1c0:	b083      	sub	sp, #12
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	4a08      	ldr	r2, [pc, #32]	@ (800c200 <_ZN5BlinkD1Ev+0x2c>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3320      	adds	r3, #32
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ff2c 	bl	800c044 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f001 fc96 	bl	800db20 <_ZN6ModuleD1Ev>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	0801eaa8 	.word	0x0801eaa8

0800c204 <_ZN5BlinkD0Ev>:
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff ffe1 	bl	800c1d4 <_ZN5BlinkD1Ev>
 800c212:	2124      	movs	r1, #36	@ 0x24
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f010 fb88 	bl	801c92a <_ZdlPvj>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d004      	beq.n	800c23e <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	3204      	adds	r2, #4
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	4618      	mov	r0, r3
 800c23c:	4790      	blx	r2
      }
 800c23e:	bf00      	nop
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c246:	b480      	push	{r7}
 800c248:	b083      	sub	sp, #12
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800c266:	6838      	ldr	r0, [r7, #0]
 800c268:	f000 f912 	bl	800c490 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c26c:	4602      	mov	r2, r0
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3304      	adds	r3, #4
 800c276:	4618      	mov	r0, r3
 800c278:	f7fd ff66 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800c27c:	6838      	ldr	r0, [r7, #0]
 800c27e:	f000 f907 	bl	800c490 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c282:	4603      	mov	r3, r0
 800c284:	4618      	mov	r0, r3
 800c286:	f000 f910 	bl	800c4aa <_ZSt12__to_addressI5BlinkEPT_S2_>
 800c28a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800c28c:	6838      	ldr	r0, [r7, #0]
 800c28e:	f7ff ffda 	bl	800c246 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c292:	4602      	mov	r2, r0
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f910 	bl	800c4c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	f107 0208 	add.w	r2, r7, #8
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f94a 	bl	800c544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800c2b0:	f107 0308 	add.w	r3, r7, #8
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fc ff81 	bl	80091bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800c2ba:	68f9      	ldr	r1, [r7, #12]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f965 	bl	800c58c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b082      	sub	sp, #8
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 f955 	bl	800c5a2 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ffe6 	bl	800c2e2 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 f94d 	bl	800c5ca <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c330:	4603      	mov	r3, r0
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	f000 f94d 	bl	800c5e4 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800c34a:	4603      	mov	r3, r0
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <_ZN3PinD1Ev>:
class Pin
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	f010 fb95 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c38e:	683c      	ldr	r4, [r7, #0]
 800c390:	2c00      	cmp	r4, #0
 800c392:	d006      	beq.n	800c3a2 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff ffe8 	bl	800c36a <_ZN3PinD1Ev>
 800c39a:	2144      	movs	r1, #68	@ 0x44
 800c39c:	4620      	mov	r0, r4
 800c39e:	f010 fac4 	bl	801c92a <_ZdlPvj>
      }
 800c3a2:	bf00      	nop
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd90      	pop	{r4, r7, pc}

0800c3aa <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f922 	bl	800c5fe <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c3cc:	687b      	ldr	r3, [r7, #4]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	2203      	movs	r2, #3
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7f6 f978 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	463b      	mov	r3, r7
 800c400:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800c404:	463b      	mov	r3, r7
 800c406:	4618      	mov	r0, r3
 800c408:	f7f8 fab0 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800c40c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800c40e:	463b      	mov	r3, r7
 800c410:	4618      	mov	r0, r3
 800c412:	f7f8 fab7 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800c416:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 f8fb 	bl	800c61c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800c426:	4603      	mov	r3, r0
 800c428:	e000      	b.n	800c42c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800c42a:	2300      	movs	r3, #0
  }
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f97d 	bl	800c740 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c446:	683c      	ldr	r4, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fe9e 	bl	800c18a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c44e:	4603      	mov	r3, r0
 800c450:	601c      	str	r4, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd90      	pop	{r4, r7, pc}

0800c45c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4618      	mov	r0, r3
 800c468:	f000 f977 	bl	800c75a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c46c:	4603      	mov	r3, r0
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f976 	bl	800c772 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c486:	4603      	mov	r3, r0
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 f975 	bl	800c78a <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800c4aa:	b480      	push	{r7}
 800c4ac:	b083      	sub	sp, #12
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
      return __ptr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
    }
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800c4d0:	6838      	ldr	r0, [r7, #0]
 800c4d2:	f7ff ffdd 	bl	800c490 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	bf0c      	ite	eq
 800c4dc:	2301      	moveq	r3, #1
 800c4de:	2300      	movne	r3, #0
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d128      	bne.n	800c538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800c4e6:	f107 030c 	add.w	r3, r7, #12
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f95b 	bl	800c7a6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800c4f0:	f107 030c 	add.w	r3, r7, #12
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 f96d 	bl	800c7d6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800c4fc:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c4fe:	6838      	ldr	r0, [r7, #0]
 800c500:	f000 f978 	bl	800c7f4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c504:	4603      	mov	r3, r0
 800c506:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800c508:	6838      	ldr	r0, [r7, #0]
 800c50a:	f7ff fe4b 	bl	800c1a4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c50e:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c510:	4618      	mov	r0, r3
 800c512:	f000 f97c 	bl	800c80e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c516:	4603      	mov	r3, r0
 800c518:	f107 0210 	add.w	r2, r7, #16
 800c51c:	f107 000c 	add.w	r0, r7, #12
 800c520:	6979      	ldr	r1, [r7, #20]
 800c522:	f000 f97f 	bl	800c824 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	601a      	str	r2, [r3, #0]
	}
 800c52c:	f107 030c 	add.w	r3, r7, #12
 800c530:	4618      	mov	r0, r3
 800c532:	f000 f944 	bl	800c7be <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c536:	e000      	b.n	800c53a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800c538:	bf00      	nop
	}
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d011      	beq.n	800c582 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7fb fc99 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d004      	beq.n	800c57c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb fc9f 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	601a      	str	r2, [r3, #0]
	return *this;
 800c582:	687b      	ldr	r3, [r7, #4]
      }
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	{ }
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c5a2:	b590      	push	{r4, r7, lr}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	6039      	str	r1, [r7, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f950 	bl	800c854 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c5b4:	683c      	ldr	r4, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff feb2 	bl	800c320 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	601c      	str	r4, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd90      	pop	{r4, r7, pc}

0800c5ca <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 f94a 	bl	800c86e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 f949 	bl	800c886 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f948 	bl	800c89e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c60e:	4603      	mov	r3, r0
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7f7 f9b5 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800c62e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	791b      	ldrb	r3, [r3, #4]
 800c634:	3b04      	subs	r3, #4
 800c636:	2b1a      	cmp	r3, #26
 800c638:	d87c      	bhi.n	800c734 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800c63a:	a201      	add	r2, pc, #4	@ (adr r2, 800c640 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800c63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c640:	0800c6f3 	.word	0x0800c6f3
 800c644:	0800c701 	.word	0x0800c701
 800c648:	0800c6ad 	.word	0x0800c6ad
 800c64c:	0800c735 	.word	0x0800c735
 800c650:	0800c735 	.word	0x0800c735
 800c654:	0800c735 	.word	0x0800c735
 800c658:	0800c6b3 	.word	0x0800c6b3
 800c65c:	0800c735 	.word	0x0800c735
 800c660:	0800c6c1 	.word	0x0800c6c1
 800c664:	0800c735 	.word	0x0800c735
 800c668:	0800c711 	.word	0x0800c711
 800c66c:	0800c735 	.word	0x0800c735
 800c670:	0800c735 	.word	0x0800c735
 800c674:	0800c735 	.word	0x0800c735
 800c678:	0800c735 	.word	0x0800c735
 800c67c:	0800c735 	.word	0x0800c735
 800c680:	0800c735 	.word	0x0800c735
 800c684:	0800c735 	.word	0x0800c735
 800c688:	0800c735 	.word	0x0800c735
 800c68c:	0800c735 	.word	0x0800c735
 800c690:	0800c735 	.word	0x0800c735
 800c694:	0800c735 	.word	0x0800c735
 800c698:	0800c6cf 	.word	0x0800c6cf
 800c69c:	0800c735 	.word	0x0800c735
 800c6a0:	0800c6e1 	.word	0x0800c6e1
 800c6a4:	0800c735 	.word	0x0800c735
 800c6a8:	0800c723 	.word	0x0800c723
        return content_.asBoolean;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	e041      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f8fe 	bl	800c8b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	e03a      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 f908 	bl	800c8da <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	e033      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f000 f910 	bl	800c8fc <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	e02a      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f000 f91a 	bl	800c922 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	e021      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f926 	bl	800c948 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	e01a      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f91e 	bl	800c948 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c70c:	4603      	mov	r3, r0
 800c70e:	e012      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	edd3 7a00 	vldr	s15, [r3]
 800c716:	eeb0 0a67 	vmov.f32	s0, s15
 800c71a:	f000 f929 	bl	800c970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800c71e:	4603      	mov	r3, r0
 800c720:	e009      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	ed93 7b00 	vldr	d7, [r3]
 800c728:	eeb0 0b47 	vmov.f64	d0, d7
 800c72c:	f000 f938 	bl	800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800c730:	4603      	mov	r3, r0
 800c732:	e000      	b.n	800c736 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800c734:	2300      	movs	r3, #0
  }
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop

0800c740 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f940 	bl	800c9d0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f944 	bl	800c9f0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800c768:	4603      	mov	r3, r0
 800c76a:	4618      	mov	r0, r3
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c772:	b580      	push	{r7, lr}
 800c774:	b082      	sub	sp, #8
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f945 	bl	800ca0a <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c780:	4603      	mov	r3, r0
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f944 	bl	800ca22 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c79a:	4603      	mov	r3, r0
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f944 	bl	800ca3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f943 	bl	800ca52 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f93f 	bl	800ca68 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 f95c 	bl	800cabc <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c804:	4603      	mov	r3, r0
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f957 	bl	800cae6 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800c838:	4604      	mov	r4, r0
 800c83a:	6838      	ldr	r0, [r7, #0]
 800c83c:	f7ff ffe7 	bl	800c80e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c840:	4603      	mov	r3, r0
 800c842:	4622      	mov	r2, r4
 800c844:	68b9      	ldr	r1, [r7, #8]
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f000 f958 	bl	800cafc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800c84c:	bf00      	nop
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	bd90      	pop	{r4, r7, pc}

0800c854 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f96a 	bl	800cb38 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f96e 	bl	800cb58 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800c87c:	4603      	mov	r3, r0
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c886:	b580      	push	{r7, lr}
 800c888:	b082      	sub	sp, #8
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f96f 	bl	800cb72 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c894:	4603      	mov	r3, r0
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 f96e 	bl	800cb8a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f96e 	bl	800cba2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	e000      	b.n	800c8d2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f96f 	bl	800cbc6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	e000      	b.n	800c8f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c90a:	f000 f967 	bl	800cbdc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d001      	beq.n	800c918 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	e000      	b.n	800c91a <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c92c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c930:	f000 f96c 	bl	800cc0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	e000      	b.n	800c940 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800c950:	f107 0308 	add.w	r3, r7, #8
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	4618      	mov	r0, r3
 800c958:	f7f7 fa82 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800c95c:	f107 0308 	add.w	r3, r7, #8
 800c960:	4618      	mov	r0, r3
 800c962:	f000 f979 	bl	800cc58 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800c966:	4603      	mov	r3, r0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c97a:	ed97 0a01 	vldr	s0, [r7, #4]
 800c97e:	f000 f9b2 	bl	800cce6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d006      	beq.n	800c996 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800c988:	edd7 7a01 	vldr	s15, [r7, #4]
 800c98c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c990:	ee17 3a90 	vmov	r3, s15
 800c994:	e000      	b.n	800c998 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c9aa:	ed97 0b00 	vldr	d0, [r7]
 800c9ae:	f000 f9c7 	bl	800cd40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800c9b8:	ed97 7b00 	vldr	d7, [r7]
 800c9bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c9c0:	ee17 3a90 	vmov	r3, s15
 800c9c4:	e000      	b.n	800c9c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f9d7 	bl	800cd8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 f9df 	bl	800cda4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 f9e0 	bl	800cdc0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ca00:	4603      	mov	r3, r0
 800ca02:	4618      	mov	r0, r3
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 f9df 	bl	800cdd6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 f9de 	bl	800cdee <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ca32:	4603      	mov	r3, r0
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4618      	mov	r0, r3
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 f9c6 	bl	800ce06 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	bf8c      	ite	hi
 800ca82:	2301      	movhi	r3, #1
 800ca84:	2300      	movls	r3, #0
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	bf14      	ite	ne
 800ca8c:	2301      	movne	r3, #1
 800ca8e:	2300      	moveq	r3, #0
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d007      	beq.n	800caa6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca9c:	d301      	bcc.n	800caa2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ca9e:	f00f ff6b 	bl	801c978 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800caa2:	f00f ff66 	bl	801c972 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	4618      	mov	r0, r3
 800caac:	f00f ff4e 	bl	801c94c <_Znwj>
 800cab0:	4603      	mov	r3, r0
 800cab2:	bf00      	nop
      }
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7ff fb60 	bl	800c18a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800caca:	4603      	mov	r3, r0
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff fb5a 	bl	800c18a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
	return __p;
 800cadc:	68fb      	ldr	r3, [r7, #12]
      }
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cae6:	b480      	push	{r7}
 800cae8:	b083      	sub	sp, #12
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	2010      	movs	r0, #16
 800cb10:	f7fb f9b8 	bl	8007e84 <_ZnwjPv>
 800cb14:	4605      	mov	r5, r0
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff ffe5 	bl	800cae6 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	681c      	ldr	r4, [r3, #0]
 800cb20:	6838      	ldr	r0, [r7, #0]
 800cb22:	f7ff fe74 	bl	800c80e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb26:	4632      	mov	r2, r6
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	f000 f978 	bl	800ce20 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800cb30:	bf00      	nop
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb38 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f98f 	bl	800ce64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 f997 	bl	800ce7c <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f998 	bl	800ce98 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f997 	bl	800ceae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f997 	bl	800cec6 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cbaa:	f000 f8c1 	bl	800cd30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	bf94      	ite	ls
 800cbb8:	2301      	movls	r3, #1
 800cbba:	2300      	movhi	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800cbc6:	b480      	push	{r7}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  return true;
 800cbce:	2301      	movs	r3, #1
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cbdc:	b5b0      	push	{r4, r5, r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cbe6:	f000 f8a3 	bl	800cd30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cbea:	4603      	mov	r3, r0
 800cbec:	17da      	asrs	r2, r3, #31
 800cbee:	461c      	mov	r4, r3
 800cbf0:	4615      	mov	r5, r2
 800cbf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbf6:	4294      	cmp	r4, r2
 800cbf8:	eb75 0303 	sbcs.w	r3, r5, r3
 800cbfc:	bf2c      	ite	cs
 800cbfe:	2301      	movcs	r3, #1
 800cc00:	2300      	movcc	r3, #0
 800cc02:	b2db      	uxtb	r3, r3
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bdb0      	pop	{r4, r5, r7, pc}

0800cc0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cc0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cc10:	b082      	sub	sp, #8
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cc18:	f000 f85c 	bl	800ccd4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	17da      	asrs	r2, r3, #31
 800cc20:	4698      	mov	r8, r3
 800cc22:	4691      	mov	r9, r2
 800cc24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc28:	4542      	cmp	r2, r8
 800cc2a:	eb73 0309 	sbcs.w	r3, r3, r9
 800cc2e:	db0d      	blt.n	800cc4c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800cc30:	f000 f87e 	bl	800cd30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cc34:	4603      	mov	r3, r0
 800cc36:	17da      	asrs	r2, r3, #31
 800cc38:	461c      	mov	r4, r3
 800cc3a:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cc3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc40:	4294      	cmp	r4, r2
 800cc42:	eb75 0303 	sbcs.w	r3, r5, r3
 800cc46:	db01      	blt.n	800cc4c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800cc58 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d82e      	bhi.n	800ccc8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800cc6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc70 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cc93 	.word	0x0800cc93
 800cc78:	0800cca5 	.word	0x0800cca5
 800cc7c:	0800ccb7 	.word	0x0800ccb7
        return convertNumber<T>(value_.asFloat);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc86:	eeb0 0a67 	vmov.f32	s0, s15
 800cc8a:	f7ff fe71 	bl	800c970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	e01b      	b.n	800ccca <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cc98:	4610      	mov	r0, r2
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	f7ff fe41 	bl	800c922 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800cca0:	4603      	mov	r3, r0
 800cca2:	e012      	b.n	800ccca <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4619      	mov	r1, r3
 800ccae:	f7ff fe25 	bl	800c8fc <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	e009      	b.n	800ccca <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	ed93 7b02 	vldr	d7, [r3, #8]
 800ccbc:	eeb0 0b47 	vmov.f64	d0, d7
 800ccc0:	f7ff fe6e 	bl	800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	e000      	b.n	800ccca <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800ccc8:	2300      	movs	r3, #0
  }
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop

0800ccd4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800ccd4:	b480      	push	{r7}
 800ccd6:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800ccd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800ccdc:	4618      	mov	r0, r3
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b082      	sub	sp, #8
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800ccf0:	f7ff fff0 	bl	800ccd4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ccf4:	ee07 0a90 	vmov	s15, r0
 800ccf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccfc:	ed97 7a01 	vldr	s14, [r7, #4]
 800cd00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd08:	db0d      	blt.n	800cd26 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	f000 f8e8 	bl	800cee0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800cd10:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800cd14:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd20:	d801      	bhi.n	800cd26 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
    return T(~lowest());
 800cd34:	f7ff ffce 	bl	800ccd4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	43db      	mvns	r3, r3
  }
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800cd4a:	f7ff ffc3 	bl	800ccd4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cd4e:	ee07 0a90 	vmov	s15, r0
 800cd52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd56:	ed97 6b00 	vldr	d6, [r7]
 800cd5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd62:	db0e      	blt.n	800cd82 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800cd64:	f7ff ffe4 	bl	800cd30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cd68:	ee07 0a90 	vmov	s15, r0
 800cd6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800cd70:	ed97 6b00 	vldr	d6, [r7]
 800cd74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7c:	d801      	bhi.n	800cd82 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f8b2 	bl	800cefe <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f898 	bl	800cf14 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800cde4:	4603      	mov	r3, r0
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 f897 	bl	800cf2a <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ce0e:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
	...

0800ce20 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800ce20:	b5b0      	push	{r4, r5, r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe f874 	bl	800af1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ce34:	4a0a      	ldr	r2, [pc, #40]	@ (800ce60 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f103 040c 	add.w	r4, r3, #12
 800ce40:	1d3b      	adds	r3, r7, #4
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f87e 	bl	800cf44 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	462a      	mov	r2, r5
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 f882 	bl	800cf5a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce60:	0801ea8c 	.word	0x0801ea8c

0800ce64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f890 	bl	800cf92 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f876 	bl	800cfa8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800cebc:	4603      	mov	r3, r0
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f000 f874 	bl	800cfbe <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800ced6:	4603      	mov	r3, r0
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800cee8:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800ceec:	f7f9 ff70 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800cef0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cef4:	eeb0 0a67 	vmov.f32	s0, s15
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 f84d 	bl	800cfd4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	713a      	strb	r2, [r7, #4]
 800cf66:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800cf68:	1d3b      	adds	r3, r7, #4
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff ffea 	bl	800cf44 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cf70:	4603      	mov	r3, r0
 800cf72:	4619      	mov	r1, r3
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 f838 	bl	800cfea <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 f841 	bl	800d004 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	601a      	str	r2, [r3, #0]
	{ }
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b082      	sub	sp, #8
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	6039      	str	r1, [r7, #0]
 800cff4:	6838      	ldr	r0, [r7, #0]
 800cff6:	f7ff ffa5 	bl	800cf44 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4618      	mov	r0, r3
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	4a05      	ldr	r2, [pc, #20]	@ (800d03c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fc fb7f 	bl	8009730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	0801ea8c 	.word	0x0801ea8c

0800d040 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff ffe7 	bl	800d01c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d04e:	2110      	movs	r1, #16
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f00f fc6a 	bl	801c92a <_ZdlPvj>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4618      	mov	r0, r3
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	330c      	adds	r3, #12
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 f83f 	bl	800d0f0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800d072:	4602      	mov	r2, r0
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7ff f8d2 	bl	800c224 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800d080:	bf00      	nop
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	330c      	adds	r3, #12
 800d094:	4618      	mov	r0, r3
 800d096:	f000 f837 	bl	800d108 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d09a:	4602      	mov	r2, r0
 800d09c:	f107 0314 	add.w	r3, r7, #20
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 f83c 	bl	800d120 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d0a8:	f107 0114 	add.w	r1, r7, #20
 800d0ac:	f107 030c 	add.w	r3, r7, #12
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f841 	bl	800d13a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff ffaf 	bl	800d01c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d0be:	f107 030c 	add.w	r3, r7, #12
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 f84d 	bl	800d162 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d0c8:	f107 0314 	add.w	r3, r7, #20
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fb76 	bl	800c7be <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d0e2:	2300      	movs	r3, #0
      }
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f847 	bl	800d18c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800d0fe:	4603      	mov	r3, r0
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f846 	bl	800d1a2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800d116:	4603      	mov	r3, r0
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff fc86 	bl	800ca3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d146:	68b8      	ldr	r0, [r7, #8]
 800d148:	f000 f836 	bl	800d1b8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800d14c:	4602      	mov	r2, r0
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	605a      	str	r2, [r3, #4]
      { }
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	4619      	mov	r1, r3
 800d17e:	f000 f826 	bl	800d1ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f000 f804 	bl	800d1ec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800d1e4:	bf00      	nop
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	011b      	lsls	r3, r3, #4
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	68b8      	ldr	r0, [r7, #8]
 800d200:	f00f fb93 	bl	801c92a <_ZdlPvj>
      }
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3318      	adds	r3, #24
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f8e9 	bl	800d41e <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	78fa      	ldrb	r2, [r7, #3]
 800d264:	771a      	strb	r2, [r3, #28]
 800d266:	bf00      	nop
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
	...

0800d274 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 fc32 	bl	800dae8 <_ZN6ModuleC1Ev>
 800d284:	4a0a      	ldr	r2, [pc, #40]	@ (800d2b0 <_ZN12CommsHandlerC1Ev+0x3c>)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3318      	adds	r3, #24
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 f8fa 	bl	800d488 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	771a      	strb	r2, [r3, #28]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	775a      	strb	r2, [r3, #29]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	779a      	strb	r2, [r3, #30]

}
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	0801eacc 	.word	0x0801eacc

0800d2b4 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	4a08      	ldr	r2, [pc, #32]	@ (800d2e0 <_ZN12CommsHandlerD1Ev+0x2c>)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3318      	adds	r3, #24
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fc f8bd 	bl	8009446 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fc26 	bl	800db20 <_ZN6ModuleD1Ev>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0801eacc 	.word	0x0801eacc

0800d2e4 <_ZN12CommsHandlerD0Ev>:
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff ffe1 	bl	800d2b4 <_ZN12CommsHandlerD1Ev>
 800d2f2:	2120      	movs	r1, #32
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f00f fb18 	bl	801c92a <_ZdlPvj>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	70fb      	strb	r3, [r7, #3]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff ff9b 	bl	800d254 <_ZN12CommsHandler7setDataEb>
    });
 800d31e:	bf00      	nop
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800d326:	b590      	push	{r4, r7, lr}
 800d328:	b089      	sub	sp, #36	@ 0x24
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3318      	adds	r3, #24
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f8b8 	bl	800d4a8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d338:	4604      	mov	r4, r0
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	f107 021c 	add.w	r2, r7, #28
 800d342:	f107 030c 	add.w	r3, r7, #12
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f8b9 	bl	800d4c0 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800d34e:	f107 030c 	add.w	r3, r7, #12
 800d352:	4619      	mov	r1, r3
 800d354:	4620      	mov	r0, r4
 800d356:	f7ff ff6e 	bl	800d236 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800d35a:	f107 030c 	add.w	r3, r7, #12
 800d35e:	4618      	mov	r0, r3
 800d360:	f7f3 fcf6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	3318      	adds	r3, #24
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 f89d 	bl	800d4a8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d36e:	4603      	mov	r3, r0
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	321c      	adds	r2, #28
 800d374:	6812      	ldr	r2, [r2, #0]
 800d376:	4618      	mov	r0, r3
 800d378:	4790      	blx	r2
}
 800d37a:	bf00      	nop
 800d37c:	3724      	adds	r7, #36	@ 0x24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd90      	pop	{r4, r7, pc}

0800d382 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800d382:	b580      	push	{r7, lr}
 800d384:	b082      	sub	sp, #8
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
	interface->start();
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3318      	adds	r3, #24
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f88a 	bl	800d4a8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d394:	4603      	mov	r3, r0
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	3220      	adds	r2, #32
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	4790      	blx	r2
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3318      	adds	r3, #24
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 f877 	bl	800d4a8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	3224      	adds	r2, #36	@ 0x24
 800d3c0:	6812      	ldr	r2, [r2, #0]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	4790      	blx	r2
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
	if (data)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7f1b      	ldrb	r3, [r3, #28]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d006      	beq.n	800d3ec <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	775a      	strb	r2, [r3, #29]
		status = true;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	779a      	strb	r2, [r3, #30]
 800d3ea:	e005      	b.n	800d3f8 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7f5b      	ldrb	r3, [r3, #29]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7f5b      	ldrb	r3, [r3, #29]
 800d3fc:	2b64      	cmp	r3, #100	@ 0x64
 800d3fe:	d905      	bls.n	800d40c <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	775a      	strb	r2, [r3, #29]
		status = false;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	771a      	strb	r2, [r3, #28]
}
 800d412:	bf00      	nop
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800d41e:	b580      	push	{r7, lr}
 800d420:	b086      	sub	sp, #24
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 f876 	bl	800d520 <_ZNSt8functionIFvbEEC1ERKS1_>
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f89b 	bl	800d576 <_ZNSt8functionIFvbEE4swapERS1_>
 800d440:	f107 0308 	add.w	r3, r7, #8
 800d444:	4618      	mov	r0, r3
 800d446:	f7f3 fc83 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800d44a:	687b      	ldr	r3, [r7, #4]
      }
 800d44c:	4618      	mov	r0, r3
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 f8aa 	bl	800d5b8 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff ffeb 	bl	800d454 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	: _M_t()
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff ffe8 	bl	800d46e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	return get();
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f88e 	bl	800d5d2 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800d4b6:	4603      	mov	r3, r0
      }
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	6053      	str	r3, [r2, #4]
 800d4d4:	6093      	str	r3, [r2, #8]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7f4 fe5b 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800d4e4:	6838      	ldr	r0, [r7, #0]
 800d4e6:	f000 f881 	bl	800d5ec <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00e      	beq.n	800d50e <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800d4f0:	687c      	ldr	r4, [r7, #4]
 800d4f2:	6838      	ldr	r0, [r7, #0]
 800d4f4:	f000 f885 	bl	800d602 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 f88b 	bl	800d618 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a04      	ldr	r2, [pc, #16]	@ (800d518 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800d506:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a04      	ldr	r2, [pc, #16]	@ (800d51c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800d50c:	609a      	str	r2, [r3, #8]
	}
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	bd90      	pop	{r4, r7, pc}
 800d518:	0800d63d 	.word	0x0800d63d
 800d51c:	0800d667 	.word	0x0800d667

0800d520 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	461a      	mov	r2, r3
 800d52e:	2300      	movs	r3, #0
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	6053      	str	r3, [r2, #4]
 800d534:	6093      	str	r3, [r2, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7f4 fe2b 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800d544:	6838      	ldr	r0, [r7, #0]
 800d546:	f000 f8ad 	bl	800d6a4 <_ZNKSt8functionIFvbEEcvbEv>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00d      	beq.n	800d56c <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	2202      	movs	r2, #2
 800d55a:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	68da      	ldr	r2, [r3, #12]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	689a      	ldr	r2, [r3, #8]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	609a      	str	r2, [r3, #8]
      }
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800d576:	b580      	push	{r7, lr}
 800d578:	b082      	sub	sp, #8
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f000 f89c 	bl	800d6c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f103 0208 	add.w	r2, r3, #8
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	3308      	adds	r3, #8
 800d596:	4619      	mov	r1, r3
 800d598:	4610      	mov	r0, r2
 800d59a:	f000 f8ba 	bl	800d712 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f103 020c 	add.w	r2, r3, #12
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	330c      	adds	r3, #12
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4610      	mov	r0, r2
 800d5ac:	f000 f8d0 	bl	800d750 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800d5b0:	bf00      	nop
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f8e3 	bl	800d78e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 f8e6 	bl	800d7ae <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	370c      	adds	r7, #12
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr

0800d602 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d602:	b480      	push	{r7}
 800d604:	b083      	sub	sp, #12
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d618:	b590      	push	{r4, r7, lr}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d622:	6838      	ldr	r0, [r7, #0]
 800d624:	f7ff ffed 	bl	800d602 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d628:	4603      	mov	r3, r0
 800d62a:	4622      	mov	r2, r4
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f8cb 	bl	800d7ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd90      	pop	{r4, r7, pc}

0800d63c <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d63c:	b590      	push	{r4, r7, lr}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f8d8 	bl	800d7fc <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d64c:	4604      	mov	r4, r0
 800d64e:	6838      	ldr	r0, [r7, #0]
 800d650:	f7f4 fcde 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d654:	4603      	mov	r3, r0
 800d656:	4619      	mov	r1, r3
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 f8df 	bl	800d81c <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800d65e:	bf00      	nop
      }
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	bd90      	pop	{r4, r7, pc}

0800d666 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d666:	b590      	push	{r4, r7, lr}
 800d668:	b085      	sub	sp, #20
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	4613      	mov	r3, r2
 800d672:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d674:	79fb      	ldrb	r3, [r7, #7]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d109      	bne.n	800d68e <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d67a:	68b8      	ldr	r0, [r7, #8]
 800d67c:	f000 f8be 	bl	800d7fc <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d680:	4604      	mov	r4, r0
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 f8e0 	bl	800d848 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d688:	4603      	mov	r3, r0
 800d68a:	601c      	str	r4, [r3, #0]
	    break;
 800d68c:	e005      	b.n	800d69a <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d68e:	79fb      	ldrb	r3, [r7, #7]
 800d690:	461a      	mov	r2, r3
 800d692:	68b9      	ldr	r1, [r7, #8]
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f8e3 	bl	800d860 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800d69a:	2300      	movs	r3, #0
      }
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd90      	pop	{r4, r7, pc}

0800d6a4 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f3 fb0d 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f083 0301 	eor.w	r3, r3, #1
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f900 	bl	800d8d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6de:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d6e2:	6838      	ldr	r0, [r7, #0]
 800d6e4:	f000 f8f6 	bl	800d8d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6f0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d6f4:	f107 0308 	add.w	r3, r7, #8
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f8eb 	bl	800d8d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d6fe:	4602      	mov	r2, r0
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d706:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d70a:	bf00      	nop
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f8e4 	bl	800d8ea <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d722:	4603      	mov	r3, r0
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d728:	6838      	ldr	r0, [r7, #0]
 800d72a:	f000 f8de 	bl	800d8ea <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d72e:	4603      	mov	r3, r0
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d736:	f107 030c 	add.w	r3, r7, #12
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f8d5 	bl	800d8ea <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d740:	4603      	mov	r3, r0
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	601a      	str	r2, [r3, #0]
    }
 800d748:	bf00      	nop
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f8d0 	bl	800d900 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d760:	4603      	mov	r3, r0
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d766:	6838      	ldr	r0, [r7, #0]
 800d768:	f000 f8ca 	bl	800d900 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d76c:	4603      	mov	r3, r0
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d774:	f107 030c 	add.w	r3, r7, #12
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 f8c1 	bl	800d900 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d77e:	4603      	mov	r3, r0
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	601a      	str	r2, [r3, #0]
    }
 800d786:	bf00      	nop
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f8bd 	bl	800d916 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f8c5 	bl	800d92e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f8c6 	bl	800d94a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800d7ca:	b590      	push	{r4, r7, lr}
 800d7cc:	b085      	sub	sp, #20
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	60f8      	str	r0, [r7, #12]
 800d7d2:	60b9      	str	r1, [r7, #8]
 800d7d4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff fd17 	bl	800d20a <_ZNSt9_Any_data9_M_accessEv>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	4619      	mov	r1, r3
 800d7e0:	2004      	movs	r0, #4
 800d7e2:	f7fa fb4f 	bl	8007e84 <_ZnwjPv>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	68b8      	ldr	r0, [r7, #8]
 800d7ea:	f7ff ff0a 	bl	800d602 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6023      	str	r3, [r4, #0]
	  }
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}

0800d7fc <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f8ad 	bl	800d964 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800d80a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f8b5 	bl	800d97c <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800d812:	4603      	mov	r3, r0
	}
 800d814:	4618      	mov	r0, r3
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800d81c:	b5b0      	push	{r4, r5, r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f8b3 	bl	800d992 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d82c:	4604      	mov	r4, r0
 800d82e:	6838      	ldr	r0, [r7, #0]
 800d830:	f7f4 fbee 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d834:	4603      	mov	r3, r0
 800d836:	461a      	mov	r2, r3
 800d838:	4621      	mov	r1, r4
 800d83a:	4628      	mov	r0, r5
 800d83c:	f000 f8b4 	bl	800d9a8 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bdb0      	pop	{r4, r5, r7, pc}

0800d848 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff fcda 	bl	800d20a <_ZNSt9_Any_data9_M_accessEv>
 800d856:	4603      	mov	r3, r0
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	4613      	mov	r3, r2
 800d86c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800d86e:	79fb      	ldrb	r3, [r7, #7]
 800d870:	2b03      	cmp	r3, #3
 800d872:	d82a      	bhi.n	800d8ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800d874:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800d876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87a:	bf00      	nop
 800d87c:	0800d88d 	.word	0x0800d88d
 800d880:	0800d89b 	.word	0x0800d89b
 800d884:	0800d8af 	.word	0x0800d8af
 800d888:	0800d8c1 	.word	0x0800d8c1
	      __dest._M_access<const type_info*>() = nullptr;
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f000 f8a2 	bl	800d9d6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800d892:	4603      	mov	r3, r0
 800d894:	2200      	movs	r2, #0
 800d896:	601a      	str	r2, [r3, #0]
	      break;
 800d898:	e017      	b.n	800d8ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800d89a:	68b8      	ldr	r0, [r7, #8]
 800d89c:	f7ff ffae 	bl	800d7fc <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff ffd0 	bl	800d848 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	601c      	str	r4, [r3, #0]
	      break;
 800d8ac:	e00d      	b.n	800d8ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800d8ae:	68b8      	ldr	r0, [r7, #8]
 800d8b0:	f7ff ffa4 	bl	800d7fc <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d8b4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 f898 	bl	800d9ee <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800d8be:	e004      	b.n	800d8ca <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f000 f8a5 	bl	800da12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800d8c8:	bf00      	nop
	  return false;
 800d8ca:	2300      	movs	r3, #0
	}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd90      	pop	{r4, r7, pc}

0800d8d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4618      	mov	r0, r3
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f883 	bl	800da2a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f000 f873 	bl	800da40 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7ff fc57 	bl	800d220 <_ZNKSt9_Any_data9_M_accessEv>
 800d972:	4603      	mov	r3, r0
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d992:	b480      	push	{r7}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	7338      	strb	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d9b4:	68b8      	ldr	r0, [r7, #8]
 800d9b6:	f7ff ffec 	bl	800d992 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7f4 fb27 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f7ff fc9b 	bl	800d304 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800d9ce:	bf00      	nop
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd90      	pop	{r4, r7, pc}

0800d9d6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b082      	sub	sp, #8
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff fc13 	bl	800d20a <_ZNSt9_Any_data9_M_accessEv>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d9ee:	b590      	push	{r4, r7, lr}
 800d9f0:	b083      	sub	sp, #12
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d9f8:	6838      	ldr	r0, [r7, #0]
 800d9fa:	f000 f82d 	bl	800da58 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4622      	mov	r2, r4
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f832 	bl	800da6e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800da0a:	bf00      	nop
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd90      	pop	{r4, r7, pc}

0800da12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800da12:	b580      	push	{r7, lr}
 800da14:	b082      	sub	sp, #8
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f83f 	bl	800daa0 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800da22:	bf00      	nop
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f835 	bl	800dab8 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800da4e:	4603      	mov	r3, r0
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4618      	mov	r0, r3
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800da6e:	b590      	push	{r4, r7, lr}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	60b9      	str	r1, [r7, #8]
 800da78:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f7ff fbc5 	bl	800d20a <_ZNSt9_Any_data9_M_accessEv>
 800da80:	4603      	mov	r3, r0
 800da82:	4619      	mov	r1, r3
 800da84:	2004      	movs	r0, #4
 800da86:	f7fa f9fd 	bl	8007e84 <_ZnwjPv>
 800da8a:	4604      	mov	r4, r0
 800da8c:	68b8      	ldr	r0, [r7, #8]
 800da8e:	f7ff ffe3 	bl	800da58 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800da92:	4603      	mov	r3, r0
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6023      	str	r3, [r4, #0]
	  }
 800da98:	bf00      	nop
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd90      	pop	{r4, r7, pc}

0800daa0 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff fbae 	bl	800d20a <_ZNSt9_Any_data9_M_accessEv>
 800daae:	4603      	mov	r3, r0
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 f805 	bl	800dad2 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800dac8:	4603      	mov	r3, r0
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	4a09      	ldr	r2, [pc, #36]	@ (800db18 <_ZN6ModuleC1Ev+0x30>)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800db08:	4804      	ldr	r0, [pc, #16]	@ (800db1c <_ZN6ModuleC1Ev+0x34>)
 800db0a:	f00f fc1d 	bl	801d348 <puts>
}
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	0801eaf0 	.word	0x0801eaf0
 800db1c:	0801e704 	.word	0x0801e704

0800db20 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	4a04      	ldr	r2, [pc, #16]	@ (800db3c <_ZN6ModuleD1Ev+0x1c>)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	0801eaf0 	.word	0x0801eaf0

0800db40 <_ZN6ModuleD0Ev>:
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ffe9 	bl	800db20 <_ZN6ModuleD1Ev>
 800db4e:	2118      	movs	r1, #24
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f00e feea 	bl	801c92a <_ZdlPvj>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	++this->counter;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	691a      	ldr	r2, [r3, #16]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	db08      	blt.n	800db90 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3310      	adds	r3, #16
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
		this->counter = 0;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	4798      	blx	r3
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	bf00      	nop
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <_ZN6Module9configureEv>:
void Module::configure(){}
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <_ZN13ModuleFactoryC1Ev>:
    ModuleCreator createServoModule(const char* modN);
    ModuleCreator createBaseModule(const char* modN);
    //unordered_map<const char*, unordered_map<const char*, ModuleCreator>> moduleCreators;

    // Private constructor for singleton
    ModuleFactory() {};
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
	...

0800dc0c <_ZN13ModuleFactory16createBaseModuleEPKc>:

#include "moduleList.h"
#include "moduleFactory.h"


ModuleCreator ModuleFactory::createBaseModule(const char* modN) {
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Stepgen") == 0)
 800dc16:	4907      	ldr	r1, [pc, #28]	@ (800dc34 <_ZN13ModuleFactory16createBaseModuleEPKc+0x28>)
 800dc18:	6838      	ldr	r0, [r7, #0]
 800dc1a:	f7f2 fb61 	bl	80002e0 <strcmp>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <_ZN13ModuleFactory16createBaseModuleEPKc+0x1c>
        return createStepgen;
 800dc24:	4b04      	ldr	r3, [pc, #16]	@ (800dc38 <_ZN13ModuleFactory16createBaseModuleEPKc+0x2c>)
 800dc26:	e000      	b.n	800dc2a <_ZN13ModuleFactory16createBaseModuleEPKc+0x1e>

    if (strcmp(modN,"RCServo") == 0)
        return createRCServo;
*/

    return nullptr;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	0801e75c 	.word	0x0801e75c
 800dc38:	0800de05 	.word	0x0800de05

0800dc3c <_ZN13ModuleFactory17createServoModuleEPKc>:

// Servo thread modules
ModuleCreator ModuleFactory::createServoModule(const char* modN) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Blink") == 0)
 800dc46:	4907      	ldr	r1, [pc, #28]	@ (800dc64 <_ZN13ModuleFactory17createServoModuleEPKc+0x28>)
 800dc48:	6838      	ldr	r0, [r7, #0]
 800dc4a:	f7f2 fb49 	bl	80002e0 <strcmp>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <_ZN13ModuleFactory17createServoModuleEPKc+0x1c>
        return createBlink;
 800dc54:	4b04      	ldr	r3, [pc, #16]	@ (800dc68 <_ZN13ModuleFactory17createServoModuleEPKc+0x2c>)
 800dc56:	e000      	b.n	800dc5a <_ZN13ModuleFactory17createServoModuleEPKc+0x1e>
        return createQEI;

    if (strcmp(modN,"Reset Pin") == 0)
        return createResetPin;
*/
    return nullptr;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	0801e764 	.word	0x0801e764
 800dc68:	0800bcc9 	.word	0x0800bcc9

0800dc6c <_ZN13ModuleFactory18createOnLoadModuleEPKc>:

    // On load modules
ModuleCreator ModuleFactory::createOnLoadModule(const char* modN) {
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
        return createTMC2209;

    if (strcmp(modN,"TMC5160") == 0)
        return createTMC5160;
*/
    return nullptr;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config) {
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b08b      	sub	sp, #44	@ 0x2c
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname,"Base") == 0)
 800dc92:	492b      	ldr	r1, [pc, #172]	@ (800dd40 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xbc>)
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7f2 fb23 	bl	80002e0 <strcmp>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d112      	bne.n	800dcc6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x42>
        return createBaseModule(_mtype)(config);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	68b8      	ldr	r0, [r7, #8]
 800dca4:	f7ff ffb2 	bl	800dc0c <_ZN13ModuleFactory16createBaseModuleEPKc>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	f107 0310 	add.w	r3, r7, #16
 800dcae:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7f7 f8f6 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f107 0210 	add.w	r2, r7, #16
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	47a0      	blx	r4
        return createServoModule(_mtype)(config);
    if (strcmp(_tname,"On load") == 0)
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules

    return nullptr;
}
 800dcc4:	e037      	b.n	800dd36 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"Servo") == 0)
 800dcc6:	491f      	ldr	r1, [pc, #124]	@ (800dd44 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc0>)
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7f2 fb09 	bl	80002e0 <strcmp>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d112      	bne.n	800dcfa <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x76>
        return createServoModule(_mtype)(config);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	68b8      	ldr	r0, [r7, #8]
 800dcd8:	f7ff ffb0 	bl	800dc3c <_ZN13ModuleFactory17createServoModuleEPKc>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	f107 0318 	add.w	r3, r7, #24
 800dce2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f7 f8dc 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f107 0218 	add.w	r2, r7, #24
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	47a0      	blx	r4
}
 800dcf8:	e01d      	b.n	800dd36 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"On load") == 0)
 800dcfa:	4913      	ldr	r1, [pc, #76]	@ (800dd48 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc4>)
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7f2 faef 	bl	80002e0 <strcmp>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d112      	bne.n	800dd2e <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xaa>
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	68b8      	ldr	r0, [r7, #8]
 800dd0c:	f7ff ffae 	bl	800dc6c <_ZN13ModuleFactory18createOnLoadModuleEPKc>
 800dd10:	4604      	mov	r4, r0
 800dd12:	f107 0320 	add.w	r3, r7, #32
 800dd16:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7f7 f8c2 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f107 0220 	add.w	r2, r7, #32
 800dd26:	4611      	mov	r1, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	47a0      	blx	r4
}
 800dd2c:	e003      	b.n	800dd36 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    return nullptr;
 800dd2e:	2100      	movs	r1, #0
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 f83b 	bl	800ddac <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	372c      	adds	r7, #44	@ 0x2c
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd90      	pop	{r4, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	0801e76c 	.word	0x0801e76c
 800dd44:	0801e774 	.word	0x0801e774
 800dd48:	0801e77c 	.word	0x0801e77c

0800dd4c <_ZN13ModuleFactory11getInstanceEv>:

// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800dd4c:	b598      	push	{r3, r4, r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800dd50:	4b14      	ldr	r3, [pc, #80]	@ (800dda4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f3bf 8f5b 	dmb	ish
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	bf0c      	ite	eq
 800dd60:	2301      	moveq	r3, #1
 800dd62:	2300      	movne	r3, #0
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d017      	beq.n	800dd9a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dd6a:	480e      	ldr	r0, [pc, #56]	@ (800dda4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd6c:	f00e fddf 	bl	801c92e <__cxa_guard_acquire>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	bf14      	ite	ne
 800dd76:	2301      	movne	r3, #1
 800dd78:	2300      	moveq	r3, #0
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00c      	beq.n	800dd9a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dd80:	2001      	movs	r0, #1
 800dd82:	f00e fde3 	bl	801c94c <_Znwj>
 800dd86:	4603      	mov	r3, r0
 800dd88:	461c      	mov	r4, r3
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff ff32 	bl	800dbf4 <_ZN13ModuleFactoryC1Ev>
 800dd90:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dd92:	601c      	str	r4, [r3, #0]
 800dd94:	4803      	ldr	r0, [pc, #12]	@ (800dda4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd96:	f00e fdd6 	bl	801c946 <__cxa_guard_release>
    return instance;
 800dd9a:	4b03      	ldr	r3, [pc, #12]	@ (800dda8 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	bd98      	pop	{r3, r4, r7, pc}
 800dda2:	bf00      	nop
 800dda4:	24000454 	.word	0x24000454
 800dda8:	24000450 	.word	0x24000450

0800ddac <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f805 	bl	800ddc6 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 f805 	bl	800dde0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fc f9a8 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
	...

0800de04 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE>:
 * 
 * @param config The JSON object containing the configuration for the Stepgen.
 * @return A unique pointer to the created Stepgen module.
 */
shared_ptr<Module> createStepgen(const JsonObject& config)
{
 800de04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de06:	b0b7      	sub	sp, #220	@ 0xdc
 800de08:	af08      	add	r7, sp, #32
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
    const char* comment = config["Comment"];
 800de0e:	f107 0320 	add.w	r3, r7, #32
 800de12:	4a51      	ldr	r2, [pc, #324]	@ (800df58 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x154>)
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 fa4a 	bl	800e2b0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de1c:	f107 0320 	add.w	r3, r7, #32
 800de20:	4618      	mov	r0, r3
 800de22:	f7f7 f873 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de26:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    uint32_t threadFreq = config["ThreadFreq"];
 800de2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800de2e:	4a4b      	ldr	r2, [pc, #300]	@ (800df5c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x158>)
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe f83d 	bl	800beb2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7f7 f896 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800de42:	4603      	mov	r3, r0
 800de44:	61fb      	str	r3, [r7, #28]

    printf("%s\n", comment);
 800de46:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800de4a:	f00f fa7d 	bl	801d348 <puts>

    int joint = config["Joint Number"];
 800de4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800de52:	4a43      	ldr	r2, [pc, #268]	@ (800df60 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x15c>)
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 fa4f 	bl	800e2fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de5c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe f81a 	bl	800be9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800de66:	4603      	mov	r3, r0
 800de68:	61bb      	str	r3, [r7, #24]
    const char* enable = config["Enable Pin"];
 800de6a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800de6e:	4a3d      	ldr	r2, [pc, #244]	@ (800df64 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x160>)
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe f81d 	bl	800beb2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f7 f845 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de82:	4603      	mov	r3, r0
 800de84:	617b      	str	r3, [r7, #20]
    const char* step = config["Step Pin"];
 800de86:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800de8a:	4a37      	ldr	r2, [pc, #220]	@ (800df68 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x164>)
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fa58 	bl	800e344 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de94:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f7 f837 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de9e:	4603      	mov	r3, r0
 800dea0:	613b      	str	r3, [r7, #16]
    const char* dir = config["Direction Pin"];
 800dea2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800dea6:	4a31      	ldr	r2, [pc, #196]	@ (800df6c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x168>)
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 fa6f 	bl	800e38e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800deb0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f7 f829 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800deba:	4603      	mov	r3, r0
 800debc:	60fb      	str	r3, [r7, #12]

    // Configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 800debe:	69ba      	ldr	r2, [r7, #24]
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	0092      	lsls	r2, r2, #2
 800dec4:	492a      	ldr	r1, [pc, #168]	@ (800df70 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x16c>)
 800dec6:	440a      	add	r2, r1
 800dec8:	3204      	adds	r2, #4
 800deca:	492a      	ldr	r1, [pc, #168]	@ (800df74 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x170>)
 800decc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 800ded0:	69ba      	ldr	r2, [r7, #24]
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	0092      	lsls	r2, r2, #2
 800ded6:	4928      	ldr	r1, [pc, #160]	@ (800df78 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x174>)
 800ded8:	440a      	add	r2, r1
 800deda:	3204      	adds	r2, #4
 800dedc:	4927      	ldr	r1, [pc, #156]	@ (800df7c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x178>)
 800dede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 800dee2:	4b27      	ldr	r3, [pc, #156]	@ (800df80 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x17c>)
 800dee4:	4a27      	ldr	r2, [pc, #156]	@ (800df84 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x180>)
 800dee6:	601a      	str	r2, [r3, #0]

    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 800dee8:	2301      	movs	r3, #1
 800deea:	72fb      	strb	r3, [r7, #11]

    // Create the step generator and register it in the thread
    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable, usesModulePost);
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	4a21      	ldr	r2, [pc, #132]	@ (800df74 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x170>)
 800def0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800def4:	69ba      	ldr	r2, [r7, #24]
 800def6:	4921      	ldr	r1, [pc, #132]	@ (800df7c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x178>)
 800def8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800defc:	4920      	ldr	r1, [pc, #128]	@ (800df80 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x17c>)
 800defe:	6809      	ldr	r1, [r1, #0]
 800df00:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800df04:	f107 0c14 	add.w	ip, r7, #20
 800df08:	f107 0618 	add.w	r6, r7, #24
 800df0c:	f107 051c 	add.w	r5, r7, #28
 800df10:	f107 000b 	add.w	r0, r7, #11
 800df14:	9006      	str	r0, [sp, #24]
 800df16:	9105      	str	r1, [sp, #20]
 800df18:	9204      	str	r2, [sp, #16]
 800df1a:	9303      	str	r3, [sp, #12]
 800df1c:	4b1a      	ldr	r3, [pc, #104]	@ (800df88 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x184>)
 800df1e:	9302      	str	r3, [sp, #8]
 800df20:	f107 030c 	add.w	r3, r7, #12
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	f107 0310 	add.w	r3, r7, #16
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	4663      	mov	r3, ip
 800df2e:	4632      	mov	r2, r6
 800df30:	4629      	mov	r1, r5
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fa50 	bl	800e3d8 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800df38:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fac6 	bl	800e4d0 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800df44:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 fa9f 	bl	800e48c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 800df4e:	bf00      	nop
}
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	37bc      	adds	r7, #188	@ 0xbc
 800df54:	46bd      	mov	sp, r7
 800df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df58:	0801e784 	.word	0x0801e784
 800df5c:	0801e78c 	.word	0x0801e78c
 800df60:	0801e798 	.word	0x0801e798
 800df64:	0801e7a8 	.word	0x0801e7a8
 800df68:	0801e7b4 	.word	0x0801e7b4
 800df6c:	0801e7c0 	.word	0x0801e7c0
 800df70:	300000c0 	.word	0x300000c0
 800df74:	24000408 	.word	0x24000408
 800df78:	30000080 	.word	0x30000080
 800df7c:	24000428 	.word	0x24000428
 800df80:	24000448 	.word	0x24000448
 800df84:	300000fc 	.word	0x300000fc
 800df88:	0801eb0c 	.word	0x0801eb0c

0800df8c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 800df8c:	b590      	push	{r4, r7, lr}
 800df8e:	b09b      	sub	sp, #108	@ 0x6c
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff fda3 	bl	800dae8 <_ZN6ModuleC1Ev>
 800dfa2:	4a5c      	ldr	r2, [pc, #368]	@ (800e114 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	619a      	str	r2, [r3, #24]
      enable(_enable),
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	61da      	str	r2, [r3, #28]
      step(_step),
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dfb8:	621a      	str	r2, [r3, #32]
      direction(_direction),
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dfbe:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dfc6:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dfce:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dfd6:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dfde:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800dfe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dfea:	4618      	mov	r0, r3
 800dfec:	f00e fcbf 	bl	801c96e <_ZNSaIcEC1Ev>
 800dff0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dff4:	f107 0314 	add.w	r3, r7, #20
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f6 ff00 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e000:	f107 0314 	add.w	r3, r7, #20
 800e004:	2201      	movs	r2, #1
 800e006:	4619      	mov	r1, r3
 800e008:	4620      	mov	r0, r4
 800e00a:	f7f4 f8ec 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e00e:	f107 0314 	add.w	r3, r7, #20
 800e012:	4618      	mov	r0, r3
 800e014:	f00e fd46 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e01c:	4618      	mov	r0, r3
 800e01e:	f00e fca7 	bl	801c970 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800e028:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e02c:	4618      	mov	r0, r3
 800e02e:	f00e fc9e 	bl	801c96e <_ZNSaIcEC1Ev>
 800e032:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e036:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e03a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f6 fedf 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e046:	2201      	movs	r2, #1
 800e048:	4619      	mov	r1, r3
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7f4 f8cb 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e050:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e054:	4618      	mov	r0, r3
 800e056:	f00e fd25 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e05a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e05e:	4618      	mov	r0, r3
 800e060:	f00e fc86 	bl	801c970 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800e06a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e06e:	4618      	mov	r0, r3
 800e070:	f00e fc7d 	bl	801c96e <_ZNSaIcEC1Ev>
 800e074:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800e078:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e07c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f6 febe 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e084:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e088:	2201      	movs	r2, #1
 800e08a:	4619      	mov	r1, r3
 800e08c:	4620      	mov	r0, r4
 800e08e:	f7f4 f8aa 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e092:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e096:	4618      	mov	r0, r3
 800e098:	f00e fd04 	bl	801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e09c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f00e fc65 	bl	801c970 <_ZNSaIcED1Ev>
      rawCount(0),
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      DDSaccumulator(0),
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c0:	ee07 3a90 	vmov	s15, r3
 800e0c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	ee07 3a90 	vmov	s15, r3
 800e0ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
      mask(1 << _jointNumber),  // Mask for checking the joint number
 800e0dc:	2201      	movs	r2, #1
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	409a      	lsls	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
      isEnabled(false),
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
      isForward(false),
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
      isStepping(false)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
{
	usesModulePost = _usesModulePost;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800e106:	751a      	strb	r2, [r3, #20]
}
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4618      	mov	r0, r3
 800e10c:	376c      	adds	r7, #108	@ 0x6c
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd90      	pop	{r4, r7, pc}
 800e112:	bf00      	nop
 800e114:	0801eb34 	.word	0x0801eb34

0800e118 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f819 	bl	800e158 <_ZN7Stepgen10makePulsesEv>
}
 800e126:	bf00      	nop
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f8a8 	bl	800e28c <_ZN7Stepgen10stopPulsesEv>
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	b2db      	uxtb	r3, r3
 800e168:	461a      	mov	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e170:	4013      	ands	r3, r2
 800e172:	2b00      	cmp	r3, #0
 800e174:	bf14      	ite	ne
 800e176:	2301      	movne	r3, #1
 800e178:	2300      	moveq	r3, #0
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    if (!isEnabled)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e188:	f083 0301 	eor.w	r3, r3, #1
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d006      	beq.n	800e1a0 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3338      	adds	r3, #56	@ 0x38
 800e196:	2101      	movs	r1, #1
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fd fd77 	bl	800bc8c <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 800e19e:	e072      	b.n	800e286 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3338      	adds	r3, #56	@ 0x38
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd fd70 	bl	800bc8c <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    DDSaddValue = frequencyCommand * frequencyScale;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e1be:	ee07 3a90 	vmov	s15, r3
 800e1c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	edd3 7a43 	vldr	s15, [r3, #268]	@ 0x10c
 800e1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1d4:	ee17 2a90 	vmov	r2, s15
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e1e4:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e1f2:	441a      	add	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	4053      	eors	r3, r2
 800e204:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20a:	2201      	movs	r2, #1
 800e20c:	fa02 f303 	lsl.w	r3, r2, r3
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	4013      	ands	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	bfcc      	ite	gt
 800e220:	2301      	movgt	r3, #1
 800e222:	2300      	movle	r3, #0
 800e224:	b2da      	uxtb	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d029      	beq.n	800e286 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f7fd fd23 	bl	800bc8c <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	337c      	adds	r3, #124	@ 0x7c
 800e24a:	2101      	movs	r1, #1
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fd fd1d 	bl	800bc8c <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800e25e:	2a00      	cmp	r2, #0
 800e260:	d001      	beq.n	800e266 <_ZN7Stepgen10makePulsesEv+0x10e>
 800e262:	2201      	movs	r2, #1
 800e264:	e001      	b.n	800e26a <_ZN7Stepgen10makePulsesEv+0x112>
 800e266:	f04f 32ff 	mov.w	r2, #4294967295
 800e26a:	441a      	add	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	f8d2 2104 	ldr.w	r2, [r2, #260]	@ 0x104
 800e27c:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
    }
}
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	337c      	adds	r3, #124	@ 0x7c
 800e298:	2100      	movs	r1, #0
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fd fcf6 	bl	800bc8c <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 800e2a8:	bf00      	nop
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08c      	sub	sp, #48	@ 0x30
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	f107 0314 	add.w	r3, r7, #20
 800e2c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2ca:	f107 031c 	add.w	r3, r7, #28
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f7 f95d 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e2d6:	466a      	mov	r2, sp
 800e2d8:	f107 0320 	add.w	r3, r7, #32
 800e2dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2e0:	e882 0003 	stmia.w	r2, {r0, r1}
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	f107 0214 	add.w	r2, r7, #20
 800e2ea:	ca06      	ldmia	r2, {r1, r2}
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7f6 ff7c 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	3728      	adds	r7, #40	@ 0x28
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b08c      	sub	sp, #48	@ 0x30
 800e2fe:	af02      	add	r7, sp, #8
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	60b9      	str	r1, [r7, #8]
 800e304:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	f107 0314 	add.w	r3, r7, #20
 800e30c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e310:	e883 0003 	stmia.w	r3, {r0, r1}
 800e314:	f107 031c 	add.w	r3, r7, #28
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 f8eb 	bl	800e4f6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e320:	466a      	mov	r2, sp
 800e322:	f107 0320 	add.w	r3, r7, #32
 800e326:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e32a:	e882 0003 	stmia.w	r2, {r0, r1}
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f107 0214 	add.w	r2, r7, #20
 800e334:	ca06      	ldmia	r2, {r1, r2}
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7f6 ff57 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	3728      	adds	r7, #40	@ 0x28
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e344:	b580      	push	{r7, lr}
 800e346:	b08c      	sub	sp, #48	@ 0x30
 800e348:	af02      	add	r7, sp, #8
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	f107 0314 	add.w	r3, r7, #20
 800e356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e35a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e35e:	f107 031c 	add.w	r3, r7, #28
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	4618      	mov	r0, r3
 800e366:	f000 f8d9 	bl	800e51c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e36a:	466a      	mov	r2, sp
 800e36c:	f107 0320 	add.w	r3, r7, #32
 800e370:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e374:	e882 0003 	stmia.w	r2, {r0, r1}
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	f107 0214 	add.w	r2, r7, #20
 800e37e:	ca06      	ldmia	r2, {r1, r2}
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f7f6 ff32 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	3728      	adds	r7, #40	@ 0x28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e38e:	b580      	push	{r7, lr}
 800e390:	b08c      	sub	sp, #48	@ 0x30
 800e392:	af02      	add	r7, sp, #8
 800e394:	60f8      	str	r0, [r7, #12]
 800e396:	60b9      	str	r1, [r7, #8]
 800e398:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	f107 0314 	add.w	r3, r7, #20
 800e3a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3a8:	f107 031c 	add.w	r3, r7, #28
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f000 f8c7 	bl	800e542 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e3b4:	466a      	mov	r2, sp
 800e3b6:	f107 0320 	add.w	r3, r7, #32
 800e3ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e3be:	e882 0003 	stmia.w	r2, {r0, r1}
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	f107 0214 	add.w	r2, r7, #20
 800e3c8:	ca06      	ldmia	r2, {r1, r2}
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f7f6 ff0d 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	3728      	adds	r7, #40	@ 0x28
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3dc:	b093      	sub	sp, #76	@ 0x4c
 800e3de:	af08      	add	r7, sp, #32
 800e3e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3e2:	6239      	str	r1, [r7, #32]
 800e3e4:	61fa      	str	r2, [r7, #28]
 800e3e6:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e3e8:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800e3ec:	f00e faae 	bl	801c94c <_Znwj>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	4698      	mov	r8, r3
 800e3f4:	6a38      	ldr	r0, [r7, #32]
 800e3f6:	f7fb fcba 	bl	8009d6e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4699      	mov	r9, r3
 800e400:	69f8      	ldr	r0, [r7, #28]
 800e402:	f7fd fe98 	bl	800c136 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e406:	4603      	mov	r3, r0
 800e408:	681e      	ldr	r6, [r3, #0]
 800e40a:	69b8      	ldr	r0, [r7, #24]
 800e40c:	f7fd fe88 	bl	800c120 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e410:	4603      	mov	r3, r0
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	617b      	str	r3, [r7, #20]
 800e416:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e418:	f7fd fe82 	bl	800c120 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e41c:	4603      	mov	r3, r0
 800e41e:	681c      	ldr	r4, [r3, #0]
 800e420:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e422:	f7fd fe7d 	bl	800c120 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e426:	4603      	mov	r3, r0
 800e428:	681d      	ldr	r5, [r3, #0]
 800e42a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e42c:	f7fb fcaa 	bl	8009d84 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800e430:	4603      	mov	r3, r0
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	613b      	str	r3, [r7, #16]
 800e436:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e438:	f000 f896 	bl	800e568 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800e43c:	60f8      	str	r0, [r7, #12]
 800e43e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e440:	f000 f892 	bl	800e568 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800e444:	60b8      	str	r0, [r7, #8]
 800e446:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800e448:	f000 f899 	bl	800e57e <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e450:	f000 f8a0 	bl	800e594 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800e454:	4603      	mov	r3, r0
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	9306      	str	r3, [sp, #24]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	9205      	str	r2, [sp, #20]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	9204      	str	r2, [sp, #16]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	9203      	str	r2, [sp, #12]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	9202      	str	r2, [sp, #8]
 800e46a:	9501      	str	r5, [sp, #4]
 800e46c:	9400      	str	r4, [sp, #0]
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	4632      	mov	r2, r6
 800e472:	4649      	mov	r1, r9
 800e474:	4640      	mov	r0, r8
 800e476:	f7ff fd89 	bl	800df8c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 800e47a:	4641      	mov	r1, r8
 800e47c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e47e:	f000 f8a4 	bl	800e5ca <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e484:	372c      	adds	r7, #44	@ 0x2c
 800e486:	46bd      	mov	sp, r7
 800e488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e48c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e48c:	b590      	push	{r4, r7, lr}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4618      	mov	r0, r3
 800e498:	f000 f8a6 	bl	800e5e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e49c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00c      	beq.n	800e4c0 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f8ab 	bl	800e602 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f000 f8b4 	bl	800e61c <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f000 f8ed 	bl	800e69a <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]
      }
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}

0800e4d0 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800e4da:	687c      	ldr	r4, [r7, #4]
 800e4dc:	6838      	ldr	r0, [r7, #0]
 800e4de:	f000 f8ed 	bl	800e6bc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f000 f8f3 	bl	800e6d2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd90      	pop	{r4, r7, pc}

0800e4f6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b082      	sub	sp, #8
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e500:	6838      	ldr	r0, [r7, #0]
 800e502:	f000 f91e 	bl	800e742 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e506:	4602      	mov	r2, r0
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4611      	mov	r1, r2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 f923 	bl	800e758 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 800e512:	bf00      	nop
}
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e526:	6838      	ldr	r0, [r7, #0]
 800e528:	f000 f925 	bl	800e776 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e52c:	4602      	mov	r2, r0
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4611      	mov	r1, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f000 f92a 	bl	800e78c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800e538:	bf00      	nop
}
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e542:	b580      	push	{r7, lr}
 800e544:	b082      	sub	sp, #8
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e54c:	6838      	ldr	r0, [r7, #0]
 800e54e:	f000 f92c 	bl	800e7aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e552:	4602      	mov	r2, r0
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f000 f931 	bl	800e7c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 800e55e:	bf00      	nop
}
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4618      	mov	r0, r3
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	370c      	adds	r7, #12
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	6039      	str	r1, [r7, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 f90f 	bl	800e7de <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff ffe6 	bl	800e5aa <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 f907 	bl	800e806 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e602:	b580      	push	{r7, lr}
 800e604:	b082      	sub	sp, #8
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 f907 	bl	800e820 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 800e612:	4603      	mov	r3, r0
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4618      	mov	r0, r3
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
	...

0800e634 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	4a0d      	ldr	r2, [pc, #52]	@ (800e674 <_ZN7StepgenD1Ev+0x40>)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	33c0      	adds	r3, #192	@ 0xc0
 800e646:	4618      	mov	r0, r3
 800e648:	f7fd fe8f 	bl	800c36a <_ZN3PinD1Ev>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	337c      	adds	r3, #124	@ 0x7c
 800e650:	4618      	mov	r0, r3
 800e652:	f7fd fe8a 	bl	800c36a <_ZN3PinD1Ev>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3338      	adds	r3, #56	@ 0x38
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fd fe85 	bl	800c36a <_ZN3PinD1Ev>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff fa5c 	bl	800db20 <_ZN6ModuleD1Ev>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	0801eb34 	.word	0x0801eb34

0800e678 <_ZN7StepgenD0Ev>:
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff ffd7 	bl	800e634 <_ZN7StepgenD1Ev>
 800e686:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f00e f94d 	bl	801c92a <_ZdlPvj>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b082      	sub	sp, #8
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	3204      	adds	r2, #4
 800e6ae:	6812      	ldr	r2, [r2, #0]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	4790      	blx	r2
      }
 800e6b4:	bf00      	nop
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b084      	sub	sp, #16
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800e6dc:	6838      	ldr	r0, [r7, #0]
 800e6de:	f000 f8ac 	bl	800e83a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	601a      	str	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fb fd2b 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800e6f2:	6838      	ldr	r0, [r7, #0]
 800e6f4:	f000 f8a1 	bl	800e83a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f8aa 	bl	800e854 <_ZSt12__to_addressI7StepgenEPT_S2_>
 800e700:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800e702:	6838      	ldr	r0, [r7, #0]
 800e704:	f7ff ffda 	bl	800e6bc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e708:	4602      	mov	r2, r0
 800e70a:	f107 0308 	add.w	r3, r7, #8
 800e70e:	4611      	mov	r1, r2
 800e710:	4618      	mov	r0, r3
 800e712:	f000 f8aa 	bl	800e86a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	3304      	adds	r3, #4
 800e71a:	f107 0208 	add.w	r2, r7, #8
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7fd ff0f 	bl	800c544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e726:	f107 0308 	add.w	r3, r7, #8
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fa fd46 	bl	80091bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800e730:	68f9      	ldr	r1, [r7, #12]
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f8db 	bl	800e8ee <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e742:	b480      	push	{r7}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e74a:	687b      	ldr	r3, [r7, #4]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e762:	2301      	movs	r3, #1
 800e764:	220c      	movs	r2, #12
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f3 ffb9 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e77e:	687b      	ldr	r3, [r7, #4]
}
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e796:	2301      	movs	r3, #1
 800e798:	2208      	movs	r2, #8
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7f3 ff9f 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e7b2:	687b      	ldr	r3, [r7, #4]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	220d      	movs	r2, #13
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7f3 ff85 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e7de:	b590      	push	{r4, r7, lr}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f000 f88a 	bl	800e904 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e7f0:	683c      	ldr	r4, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7ff fef8 	bl	800e5e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	601c      	str	r4, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4618      	mov	r0, r3
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	bd90      	pop	{r4, r7, pc}

0800e806 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	f000 f884 	bl	800e91e <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e816:	4603      	mov	r3, r0
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 f883 	bl	800e936 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e830:	4603      	mov	r3, r0
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b082      	sub	sp, #8
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	f000 f882 	bl	800e94e <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e84a:	4603      	mov	r3, r0
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
      return __ptr;
 800e85c:	687b      	ldr	r3, [r7, #4]
    }
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b086      	sub	sp, #24
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800e87a:	6838      	ldr	r0, [r7, #0]
 800e87c:	f7ff ffdd 	bl	800e83a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	bf0c      	ite	eq
 800e886:	2301      	moveq	r3, #1
 800e888:	2300      	movne	r3, #0
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d128      	bne.n	800e8e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800e890:	f107 030c 	add.w	r3, r7, #12
 800e894:	4618      	mov	r0, r3
 800e896:	f000 f868 	bl	800e96a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800e89a:	f107 030c 	add.w	r3, r7, #12
 800e89e:	2101      	movs	r1, #1
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f000 f87a 	bl	800e99a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800e8a6:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e8a8:	6838      	ldr	r0, [r7, #0]
 800e8aa:	f000 f885 	bl	800e9b8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800e8b2:	6838      	ldr	r0, [r7, #0]
 800e8b4:	f7ff fea5 	bl	800e602 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800e8b8:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f889 	bl	800e9d2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f107 0210 	add.w	r2, r7, #16
 800e8c6:	f107 000c 	add.w	r0, r7, #12
 800e8ca:	6979      	ldr	r1, [r7, #20]
 800e8cc:	f000 f88c 	bl	800e9e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	601a      	str	r2, [r3, #0]
	}
 800e8d6:	f107 030c 	add.w	r3, r7, #12
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f851 	bl	800e982 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e8e0:	e000      	b.n	800e8e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800e8e2:	bf00      	nop
	}
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	6039      	str	r1, [r7, #0]
	{ }
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 f882 	bl	800ea18 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e91e:	b580      	push	{r7, lr}
 800e920:	b082      	sub	sp, #8
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f886 	bl	800ea38 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 800e92c:	4603      	mov	r3, r0
 800e92e:	4618      	mov	r0, r3
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e936:	b580      	push	{r7, lr}
 800e938:	b082      	sub	sp, #8
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f887 	bl	800ea52 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e944:	4603      	mov	r3, r0
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800e94e:	b580      	push	{r7, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 f886 	bl	800ea6a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e95e:	4603      	mov	r3, r0
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f886 	bl	800ea84 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4618      	mov	r0, r3
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e982:	b580      	push	{r7, lr}
 800e984:	b082      	sub	sp, #8
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f885 	bl	800ea9a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f881 	bl	800eab0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 f89e 	bl	800eb04 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e9d2:	b480      	push	{r7}
 800e9d4:	b083      	sub	sp, #12
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e9e8:	b590      	push	{r4, r7, lr}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f899 	bl	800eb2e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	6838      	ldr	r0, [r7, #0]
 800ea00:	f7ff ffe7 	bl	800e9d2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ea04:	4603      	mov	r3, r0
 800ea06:	4622      	mov	r2, r4
 800ea08:	68b9      	ldr	r1, [r7, #8]
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f000 f89a 	bl	800eb44 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800ea10:	bf00      	nop
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd90      	pop	{r4, r7, pc}

0800ea18 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f8ad 	bl	800eb80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 f8b5 	bl	800eb98 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4618      	mov	r0, r3
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f000 f8b6 	bl	800ebb4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f8b5 	bl	800ebca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 800ea60:	4603      	mov	r3, r0
 800ea62:	4618      	mov	r0, r3
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f000 f8b4 	bl	800ebe2 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	370c      	adds	r7, #12
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ea9a:	b480      	push	{r7}
 800ea9c:	b083      	sub	sp, #12
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 f89c 	bl	800ebfa <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800eac2:	4602      	mov	r2, r0
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	4293      	cmp	r3, r2
 800eac8:	bf8c      	ite	hi
 800eaca:	2301      	movhi	r3, #1
 800eacc:	2300      	movls	r3, #0
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	bf14      	ite	ne
 800ead4:	2301      	movne	r3, #1
 800ead6:	2300      	moveq	r3, #0
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eae4:	d301      	bcc.n	800eaea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800eae6:	f00d ff47 	bl	801c978 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800eaea:	f00d ff42 	bl	801c972 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	011b      	lsls	r3, r3, #4
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f00d ff2a 	bl	801c94c <_Znwj>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	bf00      	nop
      }
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff fd6b 	bl	800e5e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800eb12:	4603      	mov	r3, r0
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7ff fd65 	bl	800e5e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
	return __p;
 800eb24:	68fb      	ldr	r3, [r7, #12]
      }
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800eb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
 800eb50:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	4619      	mov	r1, r3
 800eb56:	2010      	movs	r0, #16
 800eb58:	f7f9 f994 	bl	8007e84 <_ZnwjPv>
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff ffe5 	bl	800eb2e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800eb64:	4603      	mov	r3, r0
 800eb66:	681c      	ldr	r4, [r3, #0]
 800eb68:	6838      	ldr	r0, [r7, #0]
 800eb6a:	f7ff ff32 	bl	800e9d2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800eb6e:	4632      	mov	r2, r6
 800eb70:	4621      	mov	r1, r4
 800eb72:	4628      	mov	r0, r5
 800eb74:	f000 f84e 	bl	800ec14 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800eb78:	bf00      	nop
 800eb7a:	3714      	adds	r7, #20
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f865 	bl	800ec58 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b082      	sub	sp, #8
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f84b 	bl	800ec6e <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b082      	sub	sp, #8
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f84a 	bl	800ec84 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ec02:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800ec06:	4618      	mov	r0, r3
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
	...

0800ec14 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800ec14:	b5b0      	push	{r4, r5, r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fc f97a 	bl	800af1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ec28:	4a0a      	ldr	r2, [pc, #40]	@ (800ec54 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f103 040c 	add.w	r4, r3, #12
 800ec34:	1d3b      	adds	r3, r7, #4
 800ec36:	4618      	mov	r0, r3
 800ec38:	f000 f831 	bl	800ec9e <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800ec3c:	f107 0314 	add.w	r3, r7, #20
 800ec40:	462a      	mov	r2, r5
 800ec42:	68b9      	ldr	r1, [r7, #8]
 800ec44:	4620      	mov	r0, r4
 800ec46:	f000 f835 	bl	800ecb4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3718      	adds	r7, #24
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bdb0      	pop	{r4, r5, r7, pc}
 800ec54:	0801eb18 	.word	0x0801eb18

0800ec58 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	370c      	adds	r7, #12
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr

0800ec6e <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ec6e:	b480      	push	{r7}
 800ec70:	b083      	sub	sp, #12
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 f82c 	bl	800ecec <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 800ec94:	4603      	mov	r3, r0
 800ec96:	4618      	mov	r0, r3
 800ec98:	3708      	adds	r7, #8
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ec9e:	b480      	push	{r7}
 800eca0:	b083      	sub	sp, #12
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	713a      	strb	r2, [r7, #4]
 800ecc0:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800ecc2:	1d3b      	adds	r3, r7, #4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7ff ffea 	bl	800ec9e <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800ecca:	4603      	mov	r3, r0
 800eccc:	4619      	mov	r1, r3
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f000 f817 	bl	800ed02 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f7fe f994 	bl	800d004 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	601a      	str	r2, [r3, #0]
	{ }
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
 800ed0c:	6838      	ldr	r0, [r7, #0]
 800ed0e:	f7ff ffc6 	bl	800ec9e <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4618      	mov	r0, r3
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	4a05      	ldr	r2, [pc, #20]	@ (800ed3c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fa fcff 	bl	8009730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	0801eb18 	.word	0x0801eb18

0800ed40 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7ff ffe7 	bl	800ed1c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ed4e:	2110      	movs	r1, #16
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f00d fdea 	bl	801c92a <_ZdlPvj>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	330c      	adds	r3, #12
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 f83f 	bl	800edf0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800ed72:	4602      	mov	r2, r0
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	f7ff fc8d 	bl	800e69a <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	330c      	adds	r3, #12
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 f837 	bl	800ee08 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	f107 0314 	add.w	r3, r7, #20
 800eda0:	4611      	mov	r1, r2
 800eda2:	4618      	mov	r0, r3
 800eda4:	f000 f83c 	bl	800ee20 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800eda8:	f107 0114 	add.w	r1, r7, #20
 800edac:	f107 030c 	add.w	r3, r7, #12
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f000 f841 	bl	800ee3a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff ffaf 	bl	800ed1c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800edbe:	f107 030c 	add.w	r3, r7, #12
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f84d 	bl	800ee62 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800edc8:	f107 0314 	add.w	r3, r7, #20
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff fdd8 	bl	800e982 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ede2:	2300      	movs	r3, #0
      }
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 f847 	bl	800ee8c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 800edfe:	4603      	mov	r3, r0
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7fe f9c6 	bl	800d1a2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800ee16:	4603      	mov	r3, r0
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff fe2a 	bl	800ea84 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	60f8      	str	r0, [r7, #12]
 800ee42:	60b9      	str	r1, [r7, #8]
 800ee44:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ee46:	68b8      	ldr	r0, [r7, #8]
 800ee48:	f000 f82b 	bl	800eea2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	601a      	str	r2, [r3, #0]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	605a      	str	r2, [r3, #4]
      { }
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b082      	sub	sp, #8
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d007      	beq.n	800ee82 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	f000 f81b 	bl	800eeb8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4618      	mov	r0, r3
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4618      	mov	r0, r3
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800eea2:	b480      	push	{r7}
 800eea4:	b083      	sub	sp, #12
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	68b9      	ldr	r1, [r7, #8]
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f000 f804 	bl	800eed6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800eece:	bf00      	nop
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	011b      	lsls	r3, r3, #4
 800eee6:	4619      	mov	r1, r3
 800eee8:	68b8      	ldr	r0, [r7, #8]
 800eeea:	f00d fd1e 	bl	801c92a <_ZdlPvj>
      }
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <__NVIC_SetPriority>:
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	6039      	str	r1, [r7, #0]
 800eefe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ef00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	db0a      	blt.n	800ef1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	490c      	ldr	r1, [pc, #48]	@ (800ef40 <__NVIC_SetPriority+0x4c>)
 800ef0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef12:	0112      	lsls	r2, r2, #4
 800ef14:	b2d2      	uxtb	r2, r2
 800ef16:	440b      	add	r3, r1
 800ef18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ef1c:	e00a      	b.n	800ef34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	b2da      	uxtb	r2, r3
 800ef22:	4908      	ldr	r1, [pc, #32]	@ (800ef44 <__NVIC_SetPriority+0x50>)
 800ef24:	88fb      	ldrh	r3, [r7, #6]
 800ef26:	f003 030f 	and.w	r3, r3, #15
 800ef2a:	3b04      	subs	r3, #4
 800ef2c:	0112      	lsls	r2, r2, #4
 800ef2e:	b2d2      	uxtb	r2, r2
 800ef30:	440b      	add	r3, r1
 800ef32:	761a      	strb	r2, [r3, #24]
}
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr
 800ef40:	e000e100 	.word	0xe000e100
 800ef44:	e000ed00 	.word	0xe000ed00

0800ef48 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	4603      	mov	r3, r0
 800ef50:	6039      	str	r1, [r7, #0]
 800ef52:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	b25a      	sxtb	r2, r3
 800ef58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	b25b      	sxtb	r3, r3
 800ef60:	b2db      	uxtb	r3, r3
  }
 800ef62:	4618      	mov	r0, r3
 800ef64:	370c      	adds	r7, #12
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr

0800ef6e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b082      	sub	sp, #8
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	460b      	mov	r3, r1
 800ef78:	70fb      	strb	r3, [r7, #3]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fa2e 	bl	800f3e2 <_ZNSt13__atomic_baseIbEC1Eb>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70fb      	strb	r3, [r7, #3]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	72fb      	strb	r3, [r7, #11]
 800efa8:	78bb      	ldrb	r3, [r7, #2]
 800efaa:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800efac:	7abb      	ldrb	r3, [r7, #10]
 800efae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7ff ffc8 	bl	800ef48 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800efb8:	4603      	mov	r3, r0
 800efba:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 800efbc:	f7f3 fac8 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d004      	beq.n	800efd0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800efc6:	7a7b      	ldrb	r3, [r7, #9]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d101      	bne.n	800efd0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800efcc:	2301      	movs	r3, #1
 800efce:	e000      	b.n	800efd2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 800efd0:	2300      	movs	r3, #0
 800efd2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800efd4:	f7f3 fabc 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d004      	beq.n	800efe8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800efde:	7a7b      	ldrb	r3, [r7, #9]
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d101      	bne.n	800efe8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800efe4:	2301      	movs	r3, #1
 800efe6:	e000      	b.n	800efea <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 800efe8:	2300      	movs	r3, #0
 800efea:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 800efec:	f7f3 fab0 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800eff6:	7a7b      	ldrb	r3, [r7, #9]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d101      	bne.n	800f000 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800effc:	2301      	movs	r3, #1
 800effe:	e000      	b.n	800f002 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 800f000:	2300      	movs	r3, #0
 800f002:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	7afa      	ldrb	r2, [r7, #11]
 800f008:	f3bf 8f5b 	dmb	ish
 800f00c:	701a      	strb	r2, [r3, #0]
 800f00e:	f3bf 8f5b 	dmb	ish
      }
 800f012:	bf00      	nop
 800f014:	bf00      	nop
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	78fb      	ldrb	r3, [r7, #3]
 800f02e:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800f030:	7afb      	ldrb	r3, [r7, #11]
 800f032:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff ff86 	bl	800ef48 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800f03c:	4603      	mov	r3, r0
 800f03e:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 800f040:	f7f3 fa86 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d004      	beq.n	800f054 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800f04a:	7abb      	ldrb	r3, [r7, #10]
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d101      	bne.n	800f054 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800f050:	2301      	movs	r3, #1
 800f052:	e000      	b.n	800f056 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 800f054:	2300      	movs	r3, #0
 800f056:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800f058:	f7f3 fa7a 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d004      	beq.n	800f06c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800f062:	7abb      	ldrb	r3, [r7, #10]
 800f064:	2b04      	cmp	r3, #4
 800f066:	d101      	bne.n	800f06c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800f068:	2301      	movs	r3, #1
 800f06a:	e000      	b.n	800f06e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 800f06c:	2300      	movs	r3, #0
 800f06e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f3bf 8f5b 	dmb	ish
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	f3bf 8f5b 	dmb	ish
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	bf14      	ite	ne
 800f082:	2301      	movne	r3, #1
 800f084:	2300      	moveq	r3, #0
 800f086:	b2db      	uxtb	r3, r3
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	460b      	mov	r3, r1
 800f09a:	70fb      	strb	r3, [r7, #3]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3329      	adds	r3, #41	@ 0x29
 800f0a0:	78f9      	ldrb	r1, [r7, #3]
 800f0a2:	2203      	movs	r2, #3
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff ff73 	bl	800ef90 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	70fb      	strb	r3, [r7, #3]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	332a      	adds	r3, #42	@ 0x2a
 800f0c2:	78f9      	ldrb	r1, [r7, #3]
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff ff62 	bl	800ef90 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800f0cc:	bf00      	nop
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	3329      	adds	r3, #41	@ 0x29
 800f0e0:	2102      	movs	r1, #2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff ff9a 	bl	800f01c <_ZNKSt6atomicIbE4loadESt12memory_order>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b082      	sub	sp, #8
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	332a      	adds	r3, #42	@ 0x2a
 800f0fe:	2102      	movs	r1, #2
 800f100:	4618      	mov	r0, r3
 800f102:	f7ff ff8b 	bl	800f01c <_ZNKSt6atomicIbE4loadESt12memory_order>
 800f106:	4603      	mov	r3, r0
 800f108:	4618      	mov	r0, r3
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 f971 	bl	800f402 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b082      	sub	sp, #8
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff ffeb 	bl	800f110 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	68b9      	ldr	r1, [r7, #8]
 800f156:	4618      	mov	r0, r3
 800f158:	f00d fda3 	bl	801cca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	619a      	str	r2, [r3, #24]
      irq(_irq),
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	887a      	ldrh	r2, [r7, #2]
 800f166:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3329      	adds	r3, #41	@ 0x29
 800f17a:	2100      	movs	r1, #0
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fef6 	bl	800ef6e <_ZNSt6atomicIbEC1Eb>
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	332a      	adds	r3, #42	@ 0x2a
 800f186:	2100      	movs	r1, #0
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fef0 	bl	800ef6e <_ZNSt6atomicIbEC1Eb>
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	332c      	adds	r3, #44	@ 0x2c
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff ffc9 	bl	800f12a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	3338      	adds	r3, #56	@ 0x38
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7ff ffc4 	bl	800f12a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f00d fd5d 	bl	801cc64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f1aa:	4601      	mov	r1, r0
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6a1b      	ldr	r3, [r3, #32]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4808      	ldr	r0, [pc, #32]	@ (800f1d4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 800f1b4:	f00e f858 	bl	801d268 <iprintf>
    NVIC_SetPriority(irq, _prio);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f1be:	7f3a      	ldrb	r2, [r7, #28]
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff fe96 	bl	800eef4 <__NVIC_SetPriority>
}
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	0801e804 	.word	0x0801e804

0800f1d8 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08a      	sub	sp, #40	@ 0x28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	332c      	adds	r3, #44	@ 0x2c
 800f1e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1e8:	f000 f91b 	bl	800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1f2:	f000 f926 	bl	800f442 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	613b      	str	r3, [r7, #16]
 800f1fa:	e018      	b.n	800f22e <_ZN9pruThread14executeModulesEv+0x56>
 800f1fc:	f107 0314 	add.w	r3, r7, #20
 800f200:	4618      	mov	r0, r3
 800f202:	f000 f958 	bl	800f4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800f206:	61b8      	str	r0, [r7, #24]
        if (module) {
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fa fa5c 	bl	80096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d006      	beq.n	800f224 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 800f216:	69b8      	ldr	r0, [r7, #24]
 800f218:	f7fa fa67 	bl	80096ea <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f21c:	4603      	mov	r3, r0
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fe fc9e 	bl	800db60 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 800f224:	f107 0314 	add.w	r3, r7, #20
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f933 	bl	800f494 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800f22e:	f107 0210 	add.w	r2, r7, #16
 800f232:	f107 0314 	add.w	r3, r7, #20
 800f236:	4611      	mov	r1, r2
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f913 	bl	800f464 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1db      	bne.n	800f1fc <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d031      	beq.n	800f2b2 <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	3338      	adds	r3, #56	@ 0x38
 800f252:	623b      	str	r3, [r7, #32]
 800f254:	6a38      	ldr	r0, [r7, #32]
 800f256:	f000 f8e4 	bl	800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f25a:	4603      	mov	r3, r0
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	6a38      	ldr	r0, [r7, #32]
 800f260:	f000 f8ef 	bl	800f442 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f264:	4603      	mov	r3, r0
 800f266:	60bb      	str	r3, [r7, #8]
 800f268:	e018      	b.n	800f29c <_ZN9pruThread14executeModulesEv+0xc4>
 800f26a:	f107 030c 	add.w	r3, r7, #12
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 f921 	bl	800f4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800f274:	61f8      	str	r0, [r7, #28]
			if (module) {
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fa fa25 	bl	80096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d006      	beq.n	800f292 <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 800f284:	69f8      	ldr	r0, [r7, #28]
 800f286:	f7fa fa30 	bl	80096ea <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f28a:	4603      	mov	r3, r0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe fc67 	bl	800db60 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 800f292:	f107 030c 	add.w	r3, r7, #12
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f8fc 	bl	800f494 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800f29c:	f107 0208 	add.w	r2, r7, #8
 800f2a0:	f107 030c 	add.w	r3, r7, #12
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 f8dc 	bl	800f464 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1db      	bne.n	800f26a <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 800f2b2:	2301      	movs	r3, #1
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3728      	adds	r7, #40	@ 0x28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
    if (!module) {
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fa f9fd 	bl	80096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f083 0301 	eor.w	r3, r3, #1
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	e006      	b.n	800f2ec <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	332c      	adds	r3, #44	@ 0x2c
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f000 f8f2 	bl	800f4ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800f2ea:	2301      	movs	r3, #1
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
    if (!module) {
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	4618      	mov	r0, r3
 800f302:	f7fa f9e1 	bl	80096c8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f306:	4603      	mov	r3, r0
 800f308:	f083 0301 	eor.w	r3, r3, #1
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 800f312:	2300      	movs	r3, #0
 800f314:	e00a      	b.n	800f32c <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	3338      	adds	r3, #56	@ 0x38
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	4618      	mov	r0, r3
 800f326:	f000 f8d2 	bl	800f4ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800f32a:	2301      	movs	r3, #1
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 800f334:	b590      	push	{r4, r7, lr}
 800f336:	b085      	sub	sp, #20
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7ff fec9 	bl	800f0d4 <_ZNK9pruThread9isRunningEv>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <_ZN9pruThread11startThreadEv+0x18>
        return true;
 800f348:	2301      	movs	r3, #1
 800f34a:	e01c      	b.n	800f386 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 800f34c:	2101      	movs	r1, #1
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7ff fe9e 	bl	800f090 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 800f354:	2100      	movs	r1, #0
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff feab 	bl	800f0b2 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 800f35c:	2014      	movs	r0, #20
 800f35e:	f00d faf5 	bl	801c94c <_Znwj>
 800f362:	4603      	mov	r3, r0
 800f364:	461c      	mov	r4, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6999      	ldr	r1, [r3, #24]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a18      	ldr	r0, [r3, #32]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	4603      	mov	r3, r0
 800f37a:	4620      	mov	r0, r4
 800f37c:	f000 fc26 	bl	800fbcc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 800f384:	2301      	movs	r3, #1
}
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd90      	pop	{r4, r7, pc}

0800f38e <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7ff fe9c 	bl	800f0d4 <_ZNK9pruThread9isRunningEv>
 800f39c:	4603      	mov	r3, r0
 800f39e:	f083 0301 	eor.w	r3, r3, #1
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d105      	bne.n	800f3b4 <_ZN9pruThread6updateEv+0x26>
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7ff fea2 	bl	800f0f2 <_ZNK9pruThread8isPausedEv>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <_ZN9pruThread6updateEv+0x2a>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e000      	b.n	800f3ba <_ZN9pruThread6updateEv+0x2c>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d001      	beq.n	800f3c2 <_ZN9pruThread6updateEv+0x34>
        return true;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e00b      	b.n	800f3da <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7ff ff08 	bl	800f1d8 <_ZN9pruThread14executeModulesEv>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	f083 0301 	eor.w	r3, r3, #1
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <_ZN9pruThread6updateEv+0x4a>
        return false;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e000      	b.n	800f3da <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 800f3d8:	2301      	movs	r3, #1
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3708      	adds	r7, #8
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800f3e2:	b480      	push	{r7}
 800f3e4:	b083      	sub	sp, #12
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	70fb      	strb	r3, [r7, #3]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	78fa      	ldrb	r2, [r7, #3]
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 f895 	bl	800f53a <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	f000 f89d 	bl	800f552 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800f422:	b580      	push	{r7, lr}
 800f424:	b084      	sub	sp, #16
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	f107 030c 	add.w	r3, r7, #12
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f000 f8a1 	bl	800f57a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	1d1a      	adds	r2, r3, #4
 800f44e:	f107 030c 	add.w	r3, r7, #12
 800f452:	4611      	mov	r1, r2
 800f454:	4618      	mov	r0, r3
 800f456:	f000 f890 	bl	800f57a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	4618      	mov	r0, r3
 800f45e:	3710      	adds	r7, #16
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f464:	b590      	push	{r4, r7, lr}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f893 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f474:	4603      	mov	r3, r0
 800f476:	681c      	ldr	r4, [r3, #0]
 800f478:	6838      	ldr	r0, [r7, #0]
 800f47a:	f000 f88e 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f47e:	4603      	mov	r3, r0
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	429c      	cmp	r4, r3
 800f484:	bf14      	ite	ne
 800f486:	2301      	movne	r3, #1
 800f488:	2300      	moveq	r3, #0
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	4618      	mov	r0, r3
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	bd90      	pop	{r4, r7, pc}

0800f494 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f103 0208 	add.w	r2, r3, #8
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	601a      	str	r2, [r3, #0]
	return *this;
 800f4a8:	687b      	ldr	r3, [r7, #4]
      }
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	370c      	adds	r7, #12
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f4b6:	b480      	push	{r7}
 800f4b8:	b083      	sub	sp, #12
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b082      	sub	sp, #8
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d00d      	beq.n	800f500 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	f000 f85f 	bl	800f5b0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	f103 0208 	add.w	r2, r3, #8
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800f4fe:	e008      	b.n	800f512 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff ff9e 	bl	800f442 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f506:	4603      	mov	r3, r0
 800f508:	683a      	ldr	r2, [r7, #0]
 800f50a:	4619      	mov	r1, r3
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f863 	bl	800f5d8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800f51a:	b480      	push	{r7}
 800f51c:	b083      	sub	sp, #12
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	10db      	asrs	r3, r3, #3
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f8c4 	bl	800f6d0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800f552:	b480      	push	{r7}
 800f554:	b083      	sub	sp, #12
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	601a      	str	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	605a      	str	r2, [r3, #4]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	609a      	str	r2, [r3, #8]
	{ }
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4618      	mov	r0, r3
 800f570:	370c      	adds	r7, #12
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr

0800f57a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	601a      	str	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4618      	mov	r0, r3
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f892 	bl	800f6e6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f000 f897 	bl	800f6fc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 800f5ce:	bf00      	nop
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
	...

0800f5d8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800f5d8:	b5b0      	push	{r4, r5, r7, lr}
 800f5da:	b08c      	sub	sp, #48	@ 0x30
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f5e4:	4a39      	ldr	r2, [pc, #228]	@ (800f6cc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f000 f89f 	bl	800f72c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800f5ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7ff ff10 	bl	800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f602:	4603      	mov	r3, r0
 800f604:	617b      	str	r3, [r7, #20]
 800f606:	f107 0214 	add.w	r2, r7, #20
 800f60a:	f107 0308 	add.w	r3, r7, #8
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f000 f8d2 	bl	800f7ba <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800f616:	4603      	mov	r3, r0
 800f618:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 f8e0 	bl	800f7e4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800f624:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800f62a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800f630:	69fa      	ldr	r2, [r7, #28]
 800f632:	18d5      	adds	r5, r2, r3
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f856 	bl	800f6e6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f63a:	4603      	mov	r3, r0
 800f63c:	461a      	mov	r2, r3
 800f63e:	4629      	mov	r1, r5
 800f640:	4620      	mov	r0, r4
 800f642:	f7ff ffb5 	bl	800f5b0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800f646:	2300      	movs	r3, #0
 800f648:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800f64a:	f107 0308 	add.w	r3, r7, #8
 800f64e:	4618      	mov	r0, r3
 800f650:	f7ff ffa3 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f654:	4603      	mov	r3, r0
 800f656:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fa fff1 	bl	800a642 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f660:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	4621      	mov	r1, r4
 800f666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f668:	f000 f8d0 	bl	800f80c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800f66c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	3308      	adds	r3, #8
 800f672:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800f674:	f107 0308 	add.w	r3, r7, #8
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff ff8e 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fa ffdc 	bl	800a642 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f68a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800f68c:	69ba      	ldr	r2, [r7, #24]
 800f68e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f690:	4620      	mov	r0, r4
 800f692:	f000 f8bb 	bl	800f80c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800f696:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800f698:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	689a      	ldr	r2, [r3, #8]
 800f69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6a8:	f7fb f993 	bl	800a9d2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	69fa      	ldr	r2, [r7, #28]
 800f6b0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	69ba      	ldr	r2, [r7, #24]
 800f6b6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	69fa      	ldr	r2, [r7, #28]
 800f6be:	441a      	add	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	609a      	str	r2, [r3, #8]
    }
 800f6c4:	bf00      	nop
 800f6c6:	3730      	adds	r7, #48	@ 0x30
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f6cc:	0801e824 	.word	0x0801e824

0800f6d0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	4619      	mov	r1, r3
 800f70c:	2008      	movs	r0, #8
 800f70e:	f7f8 fbb9 	bl	8007e84 <_ZnwjPv>
 800f712:	4604      	mov	r4, r0
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ffe6 	bl	800f6e6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f71a:	4603      	mov	r3, r0
 800f71c:	4619      	mov	r1, r3
 800f71e:	4620      	mov	r0, r4
 800f720:	f7f9 fa0e 	bl	8008b40 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800f724:	bf00      	nop
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd90      	pop	{r4, r7, pc}

0800f72c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800f72c:	b590      	push	{r4, r7, lr}
 800f72e:	b087      	sub	sp, #28
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 f886 	bl	800f84a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f73e:	4604      	mov	r4, r0
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	f7ff feea 	bl	800f51a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f746:	4603      	mov	r3, r0
 800f748:	1ae2      	subs	r2, r4, r3
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	bf34      	ite	cc
 800f750:	2301      	movcc	r3, #1
 800f752:	2300      	movcs	r3, #0
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d002      	beq.n	800f760 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f00d f912 	bl	801c984 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7ff feda 	bl	800f51a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f766:	4604      	mov	r4, r0
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f7ff fed6 	bl	800f51a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f76e:	4603      	mov	r3, r0
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	f107 0208 	add.w	r2, r7, #8
 800f776:	f107 0310 	add.w	r3, r7, #16
 800f77a:	4611      	mov	r1, r2
 800f77c:	4618      	mov	r0, r3
 800f77e:	f000 f875 	bl	800f86c <_ZSt3maxIjERKT_S2_S2_>
 800f782:	4603      	mov	r3, r0
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4423      	add	r3, r4
 800f788:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f7ff fec5 	bl	800f51a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f790:	4602      	mov	r2, r0
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	4293      	cmp	r3, r2
 800f796:	d306      	bcc.n	800f7a6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	f000 f856 	bl	800f84a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d904      	bls.n	800f7b0 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 f84f 	bl	800f84a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	e000      	b.n	800f7b2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800f7b0:	697b      	ldr	r3, [r7, #20]
      }
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	371c      	adds	r7, #28
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd90      	pop	{r4, r7, pc}

0800f7ba <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f7ba:	b590      	push	{r4, r7, lr}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff fee8 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	681c      	ldr	r4, [r3, #0]
 800f7ce:	6838      	ldr	r0, [r7, #0]
 800f7d0:	f7ff fee3 	bl	800f59a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	1ae3      	subs	r3, r4, r3
 800f7da:	10db      	asrs	r3, r3, #3
 800f7dc:	4618      	mov	r0, r3
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd90      	pop	{r4, r7, pc}

0800f7e4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d006      	beq.n	800f802 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 f84b 	bl	800f894 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800f7fe:	4603      	mov	r3, r0
 800f800:	e000      	b.n	800f804 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800f802:	2300      	movs	r3, #0
      }
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	68b9      	ldr	r1, [r7, #8]
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f846 	bl	800f8b2 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800f826:	4603      	mov	r3, r0
      }
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f83a:	6839      	ldr	r1, [r7, #0]
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 f855 	bl	800f8ec <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800f842:	bf00      	nop
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b082      	sub	sp, #8
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4618      	mov	r0, r3
 800f856:	f000 f86f 	bl	800f938 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f85a:	4603      	mov	r3, r0
 800f85c:	4618      	mov	r0, r3
 800f85e:	f000 f851 	bl	800f904 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800f862:	4603      	mov	r3, r0
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d201      	bcs.n	800f886 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	e000      	b.n	800f888 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800f886:	687b      	ldr	r3, [r7, #4]
    }
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f853 	bl	800f94e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800f8b2:	b5b0      	push	{r4, r5, r7, lr}
 800f8b4:	b084      	sub	sp, #16
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	60f8      	str	r0, [r7, #12]
 800f8ba:	60b9      	str	r1, [r7, #8]
 800f8bc:	607a      	str	r2, [r7, #4]
 800f8be:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f000 f86e 	bl	800f9a2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	68b8      	ldr	r0, [r7, #8]
 800f8ca:	f000 f86a 	bl	800f9a2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 f866 	bl	800f9a2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	4629      	mov	r1, r5
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f000 f86b 	bl	800f9b8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800f8e2:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bdb0      	pop	{r4, r5, r7, pc}

0800f8ec <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f8f6:	6838      	ldr	r0, [r7, #0]
 800f8f8:	f7f8 fe93 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800f90c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800f910:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f876 	bl	800fa04 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800f918:	4603      	mov	r3, r0
 800f91a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f91c:	f107 0208 	add.w	r2, r7, #8
 800f920:	f107 030c 	add.w	r3, r7, #12
 800f924:	4611      	mov	r1, r2
 800f926:	4618      	mov	r0, r3
 800f928:	f000 f878 	bl	800fa1c <_ZSt3minIjERKT_S2_S2_>
 800f92c:	4603      	mov	r3, r0
 800f92e:	681b      	ldr	r3, [r3, #0]
      }
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4618      	mov	r0, r3
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	60b9      	str	r1, [r7, #8]
 800f958:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f000 f872 	bl	800fa44 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800f960:	4602      	mov	r2, r0
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	4293      	cmp	r3, r2
 800f966:	bf8c      	ite	hi
 800f968:	2301      	movhi	r3, #1
 800f96a:	2300      	movls	r3, #0
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	bf14      	ite	ne
 800f972:	2301      	movne	r3, #1
 800f974:	2300      	moveq	r3, #0
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f982:	d301      	bcc.n	800f988 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f984:	f00c fff8 	bl	801c978 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f988:	f00c fff3 	bl	801c972 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	00db      	lsls	r3, r3, #3
 800f990:	4618      	mov	r0, r3
 800f992:	f00c ffdb 	bl	801c94c <_Znwj>
 800f996:	4603      	mov	r3, r0
 800f998:	bf00      	nop
      }
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800f9a2:	b480      	push	{r7}
 800f9a4:	b083      	sub	sp, #12
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f9b8:	b590      	push	{r4, r7, lr}
 800f9ba:	b087      	sub	sp, #28
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f9ca:	e012      	b.n	800f9f2 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f9cc:	6978      	ldr	r0, [r7, #20]
 800f9ce:	f7fb fbdc 	bl	800b18a <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f7fb fbd8 	bl	800b18a <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	683a      	ldr	r2, [r7, #0]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 f83b 	bl	800fa5c <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	3308      	adds	r3, #8
 800f9f0:	617b      	str	r3, [r7, #20]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d1e8      	bne.n	800f9cc <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800f9fa:	697b      	ldr	r3, [r7, #20]
    }
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	371c      	adds	r7, #28
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd90      	pop	{r4, r7, pc}

0800fa04 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f840 	bl	800fa92 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800fa12:	4603      	mov	r3, r0
      }
 800fa14:	4618      	mov	r0, r3
 800fa16:	3708      	adds	r7, #8
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d201      	bcs.n	800fa36 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	e000      	b.n	800fa38 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800fa36:	687b      	ldr	r3, [r7, #4]
    }
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa4c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 800fa50:	4618      	mov	r0, r3
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fa68:	68b8      	ldr	r0, [r7, #8]
 800fa6a:	f000 f81e 	bl	800faaa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	68f9      	ldr	r1, [r7, #12]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f823 	bl	800fac0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fa7a:	68b8      	ldr	r0, [r7, #8]
 800fa7c:	f7fb fb85 	bl	800b18a <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800fa80:	4603      	mov	r3, r0
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff fed3 	bl	800f830 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800fa8a:	bf00      	nop
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b082      	sub	sp, #8
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7ff ffd2 	bl	800fa44 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800faa0:	4603      	mov	r3, r0
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800faaa:	b480      	push	{r7}
 800faac:	b083      	sub	sp, #12
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f80a 	bl	800fae6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fad2:	4603      	mov	r3, r0
 800fad4:	461a      	mov	r2, r3
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f000 f80f 	bl	800fafc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800fade:	bf00      	nop
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fae6:	b480      	push	{r7}
 800fae8:	b083      	sub	sp, #12
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800fafc:	b590      	push	{r4, r7, lr}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	2008      	movs	r0, #8
 800fb0e:	f7f8 f9b9 	bl	8007e84 <_ZnwjPv>
 800fb12:	4604      	mov	r4, r0
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff ffe6 	bl	800fae6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f000 f804 	bl	800fb2c <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800fb24:	bf00      	nop
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd90      	pop	{r4, r7, pc}

0800fb2c <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800fb2c:	b590      	push	{r4, r7, lr}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800fb36:	687c      	ldr	r4, [r7, #4]
 800fb38:	6838      	ldr	r0, [r7, #0]
 800fb3a:	f7ff ffb6 	bl	800faaa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4619      	mov	r1, r3
 800fb42:	4620      	mov	r0, r4
 800fb44:	f000 f805 	bl	800fb52 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd90      	pop	{r4, r7, pc}

0800fb52 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b082      	sub	sp, #8
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
 800fb5a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fa faed 	bl	800a148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	3304      	adds	r3, #4
 800fb76:	4619      	mov	r1, r3
 800fb78:	4610      	mov	r0, r2
 800fb7a:	f7fa fdfb 	bl	800a774 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2200      	movs	r2, #0
 800fb82:	601a      	str	r2, [r3, #0]
      }
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
	...

0800fb90 <__NVIC_EnableIRQ>:
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fb9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	db0b      	blt.n	800fbba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fba2:	88fb      	ldrh	r3, [r7, #6]
 800fba4:	f003 021f 	and.w	r2, r3, #31
 800fba8:	4907      	ldr	r1, [pc, #28]	@ (800fbc8 <__NVIC_EnableIRQ+0x38>)
 800fbaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbae:	095b      	lsrs	r3, r3, #5
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	fa00 f202 	lsl.w	r2, r0, r2
 800fbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fbba:	bf00      	nop
 800fbbc:	370c      	adds	r7, #12
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	e000e100 	.word	0xe000e100

0800fbcc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 800fbcc:	b590      	push	{r4, r7, lr}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	605a      	str	r2, [r3, #4]
	irq(_irq),
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	88fa      	ldrh	r2, [r7, #6]
 800fbe6:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	683a      	ldr	r2, [r7, #0]
 800fbec:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6a3a      	ldr	r2, [r7, #32]
 800fbf2:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 800fbf4:	2008      	movs	r0, #8
 800fbf6:	f00c fea9 	bl	801c94c <_Znwj>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461c      	mov	r4, r3
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	4619      	mov	r1, r3
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f000 f8af 	bl	800fd6c <_ZN14TimerInterruptC1EiP8pruTimer>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	601c      	str	r4, [r3, #0]

	startTimer();
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f000 f812 	bl	800fc3c <_ZN8pruTimer10startTimerEv>
}
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd90      	pop	{r4, r7, pc}

0800fc22 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff fbad 	bl	800f38e <_ZN9pruThread6updateEv>
}
 800fc34:	bf00      	nop
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc4c:	d116      	bne.n	800fc7c <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 800fc4e:	483f      	ldr	r0, [pc, #252]	@ (800fd4c <_ZN8pruTimer10startTimerEv+0x110>)
 800fc50:	f00d fb0a 	bl	801d268 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 800fc54:	4b3e      	ldr	r3, [pc, #248]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc5a:	4a3d      	ldr	r2, [pc, #244]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc5c:	f043 0301 	orr.w	r3, r3, #1
 800fc60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fc64:	4b3a      	ldr	r3, [pc, #232]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc6a:	f003 0301 	and.w	r3, r3, #1
 800fc6e:	613b      	str	r3, [r7, #16]
 800fc70:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 800fc72:	4b38      	ldr	r3, [pc, #224]	@ (800fd54 <_ZN8pruTimer10startTimerEv+0x118>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	085b      	lsrs	r3, r3, #1
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	e036      	b.n	800fcea <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	4a35      	ldr	r2, [pc, #212]	@ (800fd58 <_ZN8pruTimer10startTimerEv+0x11c>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d116      	bne.n	800fcb4 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 800fc86:	4835      	ldr	r0, [pc, #212]	@ (800fd5c <_ZN8pruTimer10startTimerEv+0x120>)
 800fc88:	f00d faee 	bl	801d268 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800fc8c:	4b30      	ldr	r3, [pc, #192]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc92:	4a2f      	ldr	r2, [pc, #188]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc94:	f043 0302 	orr.w	r3, r3, #2
 800fc98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fc9c:	4b2c      	ldr	r3, [pc, #176]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fca2:	f003 0302 	and.w	r3, r3, #2
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 800fcaa:	4b2a      	ldr	r3, [pc, #168]	@ (800fd54 <_ZN8pruTimer10startTimerEv+0x118>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	085b      	lsrs	r3, r3, #1
 800fcb0:	617b      	str	r3, [r7, #20]
 800fcb2:	e01a      	b.n	800fcea <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	4a29      	ldr	r2, [pc, #164]	@ (800fd60 <_ZN8pruTimer10startTimerEv+0x124>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d115      	bne.n	800fcea <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 800fcbe:	4829      	ldr	r0, [pc, #164]	@ (800fd64 <_ZN8pruTimer10startTimerEv+0x128>)
 800fcc0:	f00d fad2 	bl	801d268 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800fcc4:	4b22      	ldr	r3, [pc, #136]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fcc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fcca:	4a21      	ldr	r2, [pc, #132]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fccc:	f043 0304 	orr.w	r3, r3, #4
 800fcd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fcd4:	4b1e      	ldr	r3, [pc, #120]	@ (800fd50 <_ZN8pruTimer10startTimerEv+0x114>)
 800fcd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fcda:	f003 0304 	and.w	r3, r3, #4
 800fcde:	60bb      	str	r3, [r7, #8]
 800fce0:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 800fce2:	4b1c      	ldr	r3, [pc, #112]	@ (800fd54 <_ZN8pruTimer10startTimerEv+0x118>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	085b      	lsrs	r3, r3, #1
 800fce8:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	fbb2 f2f3 	udiv	r2, r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	3a01      	subs	r2, #1
 800fd10:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	f042 0201 	orr.w	r2, r2, #1
 800fd30:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff ff29 	bl	800fb90 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800fd3e:	480a      	ldr	r0, [pc, #40]	@ (800fd68 <_ZN8pruTimer10startTimerEv+0x12c>)
 800fd40:	f00d fb02 	bl	801d348 <puts>
}
 800fd44:	bf00      	nop
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	0801e840 	.word	0x0801e840
 800fd50:	58024400 	.word	0x58024400
 800fd54:	2400001c 	.word	0x2400001c
 800fd58:	40000400 	.word	0x40000400
 800fd5c:	0801e854 	.word	0x0801e854
 800fd60:	40000800 	.word	0x40000800
 800fd64:	0801e868 	.word	0x0801e868
 800fd68:	0801e87c 	.word	0x0801e87c

0800fd6c <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7f2 fb6e 	bl	800245c <_ZN9InterruptC1Ev>
 800fd80:	4a07      	ldr	r2, [pc, #28]	@ (800fda0 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4619      	mov	r1, r3
 800fd90:	68b8      	ldr	r0, [r7, #8]
 800fd92:	f7f2 fb73 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
}
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	0801eb58 	.word	0x0801eb58

0800fda4 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff ff36 	bl	800fc22 <_ZN8pruTimer9timerTickEv>
}
 800fdb6:	bf00      	nop
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800fdc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800fdf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800fdc4:	f7fb feda 	bl	800bb7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800fdc8:	480c      	ldr	r0, [pc, #48]	@ (800fdfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800fdca:	490d      	ldr	r1, [pc, #52]	@ (800fe00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800fdcc:	4a0d      	ldr	r2, [pc, #52]	@ (800fe04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800fdce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fdd0:	e002      	b.n	800fdd8 <LoopCopyDataInit>

0800fdd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fdd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fdd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fdd6:	3304      	adds	r3, #4

0800fdd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fdd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fdda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fddc:	d3f9      	bcc.n	800fdd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fdde:	4a0a      	ldr	r2, [pc, #40]	@ (800fe08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800fde0:	4c0a      	ldr	r4, [pc, #40]	@ (800fe0c <LoopFillZerobss+0x22>)
  movs r3, #0
 800fde2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fde4:	e001      	b.n	800fdea <LoopFillZerobss>

0800fde6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fde6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fde8:	3204      	adds	r2, #4

0800fdea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fdea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fdec:	d3fb      	bcc.n	800fde6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800fdee:	f00d fc4d 	bl	801d68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fdf2:	f7f7 fd99 	bl	8007928 <main>
  bx  lr
 800fdf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800fdf8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800fdfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800fe00:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800fe04:	0801ed94 	.word	0x0801ed94
  ldr r2, =_sbss
 800fe08:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800fe0c:	24000c50 	.word	0x24000c50

0800fe10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fe10:	e7fe      	b.n	800fe10 <ADC3_IRQHandler>
	...

0800fe14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fe1a:	2003      	movs	r0, #3
 800fe1c:	f000 f9a2 	bl	8010164 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fe20:	f003 fdb0 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 800fe24:	4602      	mov	r2, r0
 800fe26:	4b15      	ldr	r3, [pc, #84]	@ (800fe7c <HAL_Init+0x68>)
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	0a1b      	lsrs	r3, r3, #8
 800fe2c:	f003 030f 	and.w	r3, r3, #15
 800fe30:	4913      	ldr	r1, [pc, #76]	@ (800fe80 <HAL_Init+0x6c>)
 800fe32:	5ccb      	ldrb	r3, [r1, r3]
 800fe34:	f003 031f 	and.w	r3, r3, #31
 800fe38:	fa22 f303 	lsr.w	r3, r2, r3
 800fe3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fe3e:	4b0f      	ldr	r3, [pc, #60]	@ (800fe7c <HAL_Init+0x68>)
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	f003 030f 	and.w	r3, r3, #15
 800fe46:	4a0e      	ldr	r2, [pc, #56]	@ (800fe80 <HAL_Init+0x6c>)
 800fe48:	5cd3      	ldrb	r3, [r2, r3]
 800fe4a:	f003 031f 	and.w	r3, r3, #31
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	fa22 f303 	lsr.w	r3, r2, r3
 800fe54:	4a0b      	ldr	r2, [pc, #44]	@ (800fe84 <HAL_Init+0x70>)
 800fe56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fe58:	4a0b      	ldr	r2, [pc, #44]	@ (800fe88 <HAL_Init+0x74>)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800fe5e:	200f      	movs	r0, #15
 800fe60:	f000 f814 	bl	800fe8c <HAL_InitTick>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d001      	beq.n	800fe6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e002      	b.n	800fe74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800fe6e:	f7fb fc6b 	bl	800b748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	58024400 	.word	0x58024400
 800fe80:	0801ea74 	.word	0x0801ea74
 800fe84:	24000020 	.word	0x24000020
 800fe88:	2400001c 	.word	0x2400001c

0800fe8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800fe94:	4b15      	ldr	r3, [pc, #84]	@ (800feec <HAL_InitTick+0x60>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d101      	bne.n	800fea0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e021      	b.n	800fee4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800fea0:	4b13      	ldr	r3, [pc, #76]	@ (800fef0 <HAL_InitTick+0x64>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	4b11      	ldr	r3, [pc, #68]	@ (800feec <HAL_InitTick+0x60>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	4619      	mov	r1, r3
 800feaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feae:	fbb3 f3f1 	udiv	r3, r3, r1
 800feb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 f98b 	bl	80101d2 <HAL_SYSTICK_Config>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	e00e      	b.n	800fee4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b0f      	cmp	r3, #15
 800feca:	d80a      	bhi.n	800fee2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fecc:	2200      	movs	r2, #0
 800fece:	6879      	ldr	r1, [r7, #4]
 800fed0:	f04f 30ff 	mov.w	r0, #4294967295
 800fed4:	f000 f951 	bl	801017a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fed8:	4a06      	ldr	r2, [pc, #24]	@ (800fef4 <HAL_InitTick+0x68>)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	e000      	b.n	800fee4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800fee2:	2301      	movs	r3, #1
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	24000028 	.word	0x24000028
 800fef0:	2400001c 	.word	0x2400001c
 800fef4:	24000024 	.word	0x24000024

0800fef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800fefc:	4b06      	ldr	r3, [pc, #24]	@ (800ff18 <HAL_IncTick+0x20>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	4b06      	ldr	r3, [pc, #24]	@ (800ff1c <HAL_IncTick+0x24>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4413      	add	r3, r2
 800ff08:	4a04      	ldr	r2, [pc, #16]	@ (800ff1c <HAL_IncTick+0x24>)
 800ff0a:	6013      	str	r3, [r2, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	24000028 	.word	0x24000028
 800ff1c:	24000458 	.word	0x24000458

0800ff20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ff20:	b480      	push	{r7}
 800ff22:	af00      	add	r7, sp, #0
  return uwTick;
 800ff24:	4b03      	ldr	r3, [pc, #12]	@ (800ff34 <HAL_GetTick+0x14>)
 800ff26:	681b      	ldr	r3, [r3, #0]
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	24000458 	.word	0x24000458

0800ff38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ff40:	f7ff ffee 	bl	800ff20 <HAL_GetTick>
 800ff44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff50:	d005      	beq.n	800ff5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ff52:	4b0a      	ldr	r3, [pc, #40]	@ (800ff7c <HAL_Delay+0x44>)
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ff5e:	bf00      	nop
 800ff60:	f7ff ffde 	bl	800ff20 <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d8f7      	bhi.n	800ff60 <HAL_Delay+0x28>
  {
  }
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	24000028 	.word	0x24000028

0800ff80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800ff80:	b480      	push	{r7}
 800ff82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800ff84:	4b03      	ldr	r3, [pc, #12]	@ (800ff94 <HAL_GetREVID+0x14>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	0c1b      	lsrs	r3, r3, #16
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	5c001000 	.word	0x5c001000

0800ff98 <__NVIC_SetPriorityGrouping>:
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f003 0307 	and.w	r3, r3, #7
 800ffa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ffa8:	4b0b      	ldr	r3, [pc, #44]	@ (800ffd8 <__NVIC_SetPriorityGrouping+0x40>)
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ffb4:	4013      	ands	r3, r2
 800ffb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ffc0:	4b06      	ldr	r3, [pc, #24]	@ (800ffdc <__NVIC_SetPriorityGrouping+0x44>)
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ffc6:	4a04      	ldr	r2, [pc, #16]	@ (800ffd8 <__NVIC_SetPriorityGrouping+0x40>)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	60d3      	str	r3, [r2, #12]
}
 800ffcc:	bf00      	nop
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	e000ed00 	.word	0xe000ed00
 800ffdc:	05fa0000 	.word	0x05fa0000

0800ffe0 <__NVIC_GetPriorityGrouping>:
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ffe4:	4b04      	ldr	r3, [pc, #16]	@ (800fff8 <__NVIC_GetPriorityGrouping+0x18>)
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	0a1b      	lsrs	r3, r3, #8
 800ffea:	f003 0307 	and.w	r3, r3, #7
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	e000ed00 	.word	0xe000ed00

0800fffc <__NVIC_EnableIRQ>:
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	4603      	mov	r3, r0
 8010004:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801000a:	2b00      	cmp	r3, #0
 801000c:	db0b      	blt.n	8010026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801000e:	88fb      	ldrh	r3, [r7, #6]
 8010010:	f003 021f 	and.w	r2, r3, #31
 8010014:	4907      	ldr	r1, [pc, #28]	@ (8010034 <__NVIC_EnableIRQ+0x38>)
 8010016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801001a:	095b      	lsrs	r3, r3, #5
 801001c:	2001      	movs	r0, #1
 801001e:	fa00 f202 	lsl.w	r2, r0, r2
 8010022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010026:	bf00      	nop
 8010028:	370c      	adds	r7, #12
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	e000e100 	.word	0xe000e100

08010038 <__NVIC_SetPriority>:
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	4603      	mov	r3, r0
 8010040:	6039      	str	r1, [r7, #0]
 8010042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010048:	2b00      	cmp	r3, #0
 801004a:	db0a      	blt.n	8010062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	b2da      	uxtb	r2, r3
 8010050:	490c      	ldr	r1, [pc, #48]	@ (8010084 <__NVIC_SetPriority+0x4c>)
 8010052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010056:	0112      	lsls	r2, r2, #4
 8010058:	b2d2      	uxtb	r2, r2
 801005a:	440b      	add	r3, r1
 801005c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010060:	e00a      	b.n	8010078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	b2da      	uxtb	r2, r3
 8010066:	4908      	ldr	r1, [pc, #32]	@ (8010088 <__NVIC_SetPriority+0x50>)
 8010068:	88fb      	ldrh	r3, [r7, #6]
 801006a:	f003 030f 	and.w	r3, r3, #15
 801006e:	3b04      	subs	r3, #4
 8010070:	0112      	lsls	r2, r2, #4
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	440b      	add	r3, r1
 8010076:	761a      	strb	r2, [r3, #24]
}
 8010078:	bf00      	nop
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	e000e100 	.word	0xe000e100
 8010088:	e000ed00 	.word	0xe000ed00

0801008c <NVIC_EncodePriority>:
{
 801008c:	b480      	push	{r7}
 801008e:	b089      	sub	sp, #36	@ 0x24
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f003 0307 	and.w	r3, r3, #7
 801009e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	f1c3 0307 	rsb	r3, r3, #7
 80100a6:	2b04      	cmp	r3, #4
 80100a8:	bf28      	it	cs
 80100aa:	2304      	movcs	r3, #4
 80100ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	3304      	adds	r3, #4
 80100b2:	2b06      	cmp	r3, #6
 80100b4:	d902      	bls.n	80100bc <NVIC_EncodePriority+0x30>
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	3b03      	subs	r3, #3
 80100ba:	e000      	b.n	80100be <NVIC_EncodePriority+0x32>
 80100bc:	2300      	movs	r3, #0
 80100be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80100c0:	f04f 32ff 	mov.w	r2, #4294967295
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ca:	43da      	mvns	r2, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	401a      	ands	r2, r3
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80100d4:	f04f 31ff 	mov.w	r1, #4294967295
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	fa01 f303 	lsl.w	r3, r1, r3
 80100de:	43d9      	mvns	r1, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80100e4:	4313      	orrs	r3, r2
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3724      	adds	r7, #36	@ 0x24
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
	...

080100f4 <__NVIC_SystemReset>:
{
 80100f4:	b480      	push	{r7}
 80100f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80100f8:	f3bf 8f4f 	dsb	sy
}
 80100fc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80100fe:	4b06      	ldr	r3, [pc, #24]	@ (8010118 <__NVIC_SystemReset+0x24>)
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010106:	4904      	ldr	r1, [pc, #16]	@ (8010118 <__NVIC_SystemReset+0x24>)
 8010108:	4b04      	ldr	r3, [pc, #16]	@ (801011c <__NVIC_SystemReset+0x28>)
 801010a:	4313      	orrs	r3, r2
 801010c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801010e:	f3bf 8f4f 	dsb	sy
}
 8010112:	bf00      	nop
    __NOP();
 8010114:	bf00      	nop
 8010116:	e7fd      	b.n	8010114 <__NVIC_SystemReset+0x20>
 8010118:	e000ed00 	.word	0xe000ed00
 801011c:	05fa0004 	.word	0x05fa0004

08010120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3b01      	subs	r3, #1
 801012c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010130:	d301      	bcc.n	8010136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010132:	2301      	movs	r3, #1
 8010134:	e00f      	b.n	8010156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010136:	4a0a      	ldr	r2, [pc, #40]	@ (8010160 <SysTick_Config+0x40>)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	3b01      	subs	r3, #1
 801013c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801013e:	210f      	movs	r1, #15
 8010140:	f04f 30ff 	mov.w	r0, #4294967295
 8010144:	f7ff ff78 	bl	8010038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010148:	4b05      	ldr	r3, [pc, #20]	@ (8010160 <SysTick_Config+0x40>)
 801014a:	2200      	movs	r2, #0
 801014c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801014e:	4b04      	ldr	r3, [pc, #16]	@ (8010160 <SysTick_Config+0x40>)
 8010150:	2207      	movs	r2, #7
 8010152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	e000e010 	.word	0xe000e010

08010164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ff13 	bl	800ff98 <__NVIC_SetPriorityGrouping>
}
 8010172:	bf00      	nop
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b086      	sub	sp, #24
 801017e:	af00      	add	r7, sp, #0
 8010180:	4603      	mov	r3, r0
 8010182:	60b9      	str	r1, [r7, #8]
 8010184:	607a      	str	r2, [r7, #4]
 8010186:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010188:	f7ff ff2a 	bl	800ffe0 <__NVIC_GetPriorityGrouping>
 801018c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	68b9      	ldr	r1, [r7, #8]
 8010192:	6978      	ldr	r0, [r7, #20]
 8010194:	f7ff ff7a 	bl	801008c <NVIC_EncodePriority>
 8010198:	4602      	mov	r2, r0
 801019a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801019e:	4611      	mov	r1, r2
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff ff49 	bl	8010038 <__NVIC_SetPriority>
}
 80101a6:	bf00      	nop
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	4603      	mov	r3, r0
 80101b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80101b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff ff1d 	bl	800fffc <__NVIC_EnableIRQ>
}
 80101c2:	bf00      	nop
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80101ce:	f7ff ff91 	bl	80100f4 <__NVIC_SystemReset>

080101d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b082      	sub	sp, #8
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff ffa0 	bl	8010120 <SysTick_Config>
 80101e0:	4603      	mov	r3, r0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
	...

080101ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80101ec:	b480      	push	{r7}
 80101ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80101f0:	f3bf 8f5f 	dmb	sy
}
 80101f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80101f6:	4b07      	ldr	r3, [pc, #28]	@ (8010214 <HAL_MPU_Disable+0x28>)
 80101f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101fa:	4a06      	ldr	r2, [pc, #24]	@ (8010214 <HAL_MPU_Disable+0x28>)
 80101fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010200:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8010202:	4b05      	ldr	r3, [pc, #20]	@ (8010218 <HAL_MPU_Disable+0x2c>)
 8010204:	2200      	movs	r2, #0
 8010206:	605a      	str	r2, [r3, #4]
}
 8010208:	bf00      	nop
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	e000ed00 	.word	0xe000ed00
 8010218:	e000ed90 	.word	0xe000ed90

0801021c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8010224:	4a0b      	ldr	r2, [pc, #44]	@ (8010254 <HAL_MPU_Enable+0x38>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f043 0301 	orr.w	r3, r3, #1
 801022c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801022e:	4b0a      	ldr	r3, [pc, #40]	@ (8010258 <HAL_MPU_Enable+0x3c>)
 8010230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010232:	4a09      	ldr	r2, [pc, #36]	@ (8010258 <HAL_MPU_Enable+0x3c>)
 8010234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010238:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801023a:	f3bf 8f4f 	dsb	sy
}
 801023e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010240:	f3bf 8f6f 	isb	sy
}
 8010244:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8010246:	bf00      	nop
 8010248:	370c      	adds	r7, #12
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	e000ed90 	.word	0xe000ed90
 8010258:	e000ed00 	.word	0xe000ed00

0801025c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	785a      	ldrb	r2, [r3, #1]
 8010268:	4b1b      	ldr	r3, [pc, #108]	@ (80102d8 <HAL_MPU_ConfigRegion+0x7c>)
 801026a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801026c:	4b1a      	ldr	r3, [pc, #104]	@ (80102d8 <HAL_MPU_ConfigRegion+0x7c>)
 801026e:	691b      	ldr	r3, [r3, #16]
 8010270:	4a19      	ldr	r2, [pc, #100]	@ (80102d8 <HAL_MPU_ConfigRegion+0x7c>)
 8010272:	f023 0301 	bic.w	r3, r3, #1
 8010276:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8010278:	4a17      	ldr	r2, [pc, #92]	@ (80102d8 <HAL_MPU_ConfigRegion+0x7c>)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	7b1b      	ldrb	r3, [r3, #12]
 8010284:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	7adb      	ldrb	r3, [r3, #11]
 801028a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801028c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	7a9b      	ldrb	r3, [r3, #10]
 8010292:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	7b5b      	ldrb	r3, [r3, #13]
 801029a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801029c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7b9b      	ldrb	r3, [r3, #14]
 80102a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80102a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7bdb      	ldrb	r3, [r3, #15]
 80102aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80102ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	7a5b      	ldrb	r3, [r3, #9]
 80102b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80102b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	7a1b      	ldrb	r3, [r3, #8]
 80102ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80102bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	7812      	ldrb	r2, [r2, #0]
 80102c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80102c4:	4a04      	ldr	r2, [pc, #16]	@ (80102d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80102c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80102c8:	6113      	str	r3, [r2, #16]
}
 80102ca:	bf00      	nop
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	e000ed90 	.word	0xe000ed90

080102dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b086      	sub	sp, #24
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80102e4:	f7ff fe1c 	bl	800ff20 <HAL_GetTick>
 80102e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e316      	b.n	8010922 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4a66      	ldr	r2, [pc, #408]	@ (8010494 <HAL_DMA_Init+0x1b8>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d04a      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a65      	ldr	r2, [pc, #404]	@ (8010498 <HAL_DMA_Init+0x1bc>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d045      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a63      	ldr	r2, [pc, #396]	@ (801049c <HAL_DMA_Init+0x1c0>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d040      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a62      	ldr	r2, [pc, #392]	@ (80104a0 <HAL_DMA_Init+0x1c4>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d03b      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a60      	ldr	r2, [pc, #384]	@ (80104a4 <HAL_DMA_Init+0x1c8>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d036      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a5f      	ldr	r2, [pc, #380]	@ (80104a8 <HAL_DMA_Init+0x1cc>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d031      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a5d      	ldr	r2, [pc, #372]	@ (80104ac <HAL_DMA_Init+0x1d0>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d02c      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a5c      	ldr	r2, [pc, #368]	@ (80104b0 <HAL_DMA_Init+0x1d4>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d027      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a5a      	ldr	r2, [pc, #360]	@ (80104b4 <HAL_DMA_Init+0x1d8>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d022      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a59      	ldr	r2, [pc, #356]	@ (80104b8 <HAL_DMA_Init+0x1dc>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d01d      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a57      	ldr	r2, [pc, #348]	@ (80104bc <HAL_DMA_Init+0x1e0>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d018      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4a56      	ldr	r2, [pc, #344]	@ (80104c0 <HAL_DMA_Init+0x1e4>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d013      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a54      	ldr	r2, [pc, #336]	@ (80104c4 <HAL_DMA_Init+0x1e8>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d00e      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a53      	ldr	r2, [pc, #332]	@ (80104c8 <HAL_DMA_Init+0x1ec>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d009      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a51      	ldr	r2, [pc, #324]	@ (80104cc <HAL_DMA_Init+0x1f0>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d004      	beq.n	8010394 <HAL_DMA_Init+0xb8>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a50      	ldr	r2, [pc, #320]	@ (80104d0 <HAL_DMA_Init+0x1f4>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d101      	bne.n	8010398 <HAL_DMA_Init+0xbc>
 8010394:	2301      	movs	r3, #1
 8010396:	e000      	b.n	801039a <HAL_DMA_Init+0xbe>
 8010398:	2300      	movs	r3, #0
 801039a:	2b00      	cmp	r3, #0
 801039c:	f000 813b 	beq.w	8010616 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2202      	movs	r2, #2
 80103a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a37      	ldr	r2, [pc, #220]	@ (8010494 <HAL_DMA_Init+0x1b8>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d04a      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a36      	ldr	r2, [pc, #216]	@ (8010498 <HAL_DMA_Init+0x1bc>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d045      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a34      	ldr	r2, [pc, #208]	@ (801049c <HAL_DMA_Init+0x1c0>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d040      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	4a33      	ldr	r2, [pc, #204]	@ (80104a0 <HAL_DMA_Init+0x1c4>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d03b      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4a31      	ldr	r2, [pc, #196]	@ (80104a4 <HAL_DMA_Init+0x1c8>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d036      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a30      	ldr	r2, [pc, #192]	@ (80104a8 <HAL_DMA_Init+0x1cc>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d031      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a2e      	ldr	r2, [pc, #184]	@ (80104ac <HAL_DMA_Init+0x1d0>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d02c      	beq.n	8010450 <HAL_DMA_Init+0x174>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4a2d      	ldr	r2, [pc, #180]	@ (80104b0 <HAL_DMA_Init+0x1d4>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d027      	beq.n	8010450 <HAL_DMA_Init+0x174>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a2b      	ldr	r2, [pc, #172]	@ (80104b4 <HAL_DMA_Init+0x1d8>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d022      	beq.n	8010450 <HAL_DMA_Init+0x174>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4a2a      	ldr	r2, [pc, #168]	@ (80104b8 <HAL_DMA_Init+0x1dc>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d01d      	beq.n	8010450 <HAL_DMA_Init+0x174>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a28      	ldr	r2, [pc, #160]	@ (80104bc <HAL_DMA_Init+0x1e0>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d018      	beq.n	8010450 <HAL_DMA_Init+0x174>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a27      	ldr	r2, [pc, #156]	@ (80104c0 <HAL_DMA_Init+0x1e4>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d013      	beq.n	8010450 <HAL_DMA_Init+0x174>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a25      	ldr	r2, [pc, #148]	@ (80104c4 <HAL_DMA_Init+0x1e8>)
 801042e:	4293      	cmp	r3, r2
 8010430:	d00e      	beq.n	8010450 <HAL_DMA_Init+0x174>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a24      	ldr	r2, [pc, #144]	@ (80104c8 <HAL_DMA_Init+0x1ec>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d009      	beq.n	8010450 <HAL_DMA_Init+0x174>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a22      	ldr	r2, [pc, #136]	@ (80104cc <HAL_DMA_Init+0x1f0>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d004      	beq.n	8010450 <HAL_DMA_Init+0x174>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4a21      	ldr	r2, [pc, #132]	@ (80104d0 <HAL_DMA_Init+0x1f4>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d108      	bne.n	8010462 <HAL_DMA_Init+0x186>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f022 0201 	bic.w	r2, r2, #1
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	e007      	b.n	8010472 <HAL_DMA_Init+0x196>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f022 0201 	bic.w	r2, r2, #1
 8010470:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8010472:	e02f      	b.n	80104d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010474:	f7ff fd54 	bl	800ff20 <HAL_GetTick>
 8010478:	4602      	mov	r2, r0
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	1ad3      	subs	r3, r2, r3
 801047e:	2b05      	cmp	r3, #5
 8010480:	d928      	bls.n	80104d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2220      	movs	r2, #32
 8010486:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2203      	movs	r2, #3
 801048c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8010490:	2301      	movs	r3, #1
 8010492:	e246      	b.n	8010922 <HAL_DMA_Init+0x646>
 8010494:	40020010 	.word	0x40020010
 8010498:	40020028 	.word	0x40020028
 801049c:	40020040 	.word	0x40020040
 80104a0:	40020058 	.word	0x40020058
 80104a4:	40020070 	.word	0x40020070
 80104a8:	40020088 	.word	0x40020088
 80104ac:	400200a0 	.word	0x400200a0
 80104b0:	400200b8 	.word	0x400200b8
 80104b4:	40020410 	.word	0x40020410
 80104b8:	40020428 	.word	0x40020428
 80104bc:	40020440 	.word	0x40020440
 80104c0:	40020458 	.word	0x40020458
 80104c4:	40020470 	.word	0x40020470
 80104c8:	40020488 	.word	0x40020488
 80104cc:	400204a0 	.word	0x400204a0
 80104d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1c8      	bne.n	8010474 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	4b83      	ldr	r3, [pc, #524]	@ (80106fc <HAL_DMA_Init+0x420>)
 80104ee:	4013      	ands	r3, r2
 80104f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80104fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010506:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	699b      	ldr	r3, [r3, #24]
 801050c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010512:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6a1b      	ldr	r3, [r3, #32]
 8010518:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	4313      	orrs	r3, r2
 801051e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010524:	2b04      	cmp	r3, #4
 8010526:	d107      	bne.n	8010538 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010530:	4313      	orrs	r3, r2
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	4313      	orrs	r3, r2
 8010536:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8010538:	4b71      	ldr	r3, [pc, #452]	@ (8010700 <HAL_DMA_Init+0x424>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	4b71      	ldr	r3, [pc, #452]	@ (8010704 <HAL_DMA_Init+0x428>)
 801053e:	4013      	ands	r3, r2
 8010540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010544:	d328      	bcc.n	8010598 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	2b28      	cmp	r3, #40	@ 0x28
 801054c:	d903      	bls.n	8010556 <HAL_DMA_Init+0x27a>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	2b2e      	cmp	r3, #46	@ 0x2e
 8010554:	d917      	bls.n	8010586 <HAL_DMA_Init+0x2aa>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	2b3e      	cmp	r3, #62	@ 0x3e
 801055c:	d903      	bls.n	8010566 <HAL_DMA_Init+0x28a>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	2b42      	cmp	r3, #66	@ 0x42
 8010564:	d90f      	bls.n	8010586 <HAL_DMA_Init+0x2aa>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	2b46      	cmp	r3, #70	@ 0x46
 801056c:	d903      	bls.n	8010576 <HAL_DMA_Init+0x29a>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	2b48      	cmp	r3, #72	@ 0x48
 8010574:	d907      	bls.n	8010586 <HAL_DMA_Init+0x2aa>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	2b4e      	cmp	r3, #78	@ 0x4e
 801057c:	d905      	bls.n	801058a <HAL_DMA_Init+0x2ae>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	2b52      	cmp	r3, #82	@ 0x52
 8010584:	d801      	bhi.n	801058a <HAL_DMA_Init+0x2ae>
 8010586:	2301      	movs	r3, #1
 8010588:	e000      	b.n	801058c <HAL_DMA_Init+0x2b0>
 801058a:	2300      	movs	r3, #0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d003      	beq.n	8010598 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010596:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	697a      	ldr	r2, [r7, #20]
 801059e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	695b      	ldr	r3, [r3, #20]
 80105a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f023 0307 	bic.w	r3, r3, #7
 80105ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105be:	2b04      	cmp	r3, #4
 80105c0:	d117      	bne.n	80105f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105c6:	697a      	ldr	r2, [r7, #20]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00e      	beq.n	80105f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f001 fc23 	bl	8011e20 <DMA_CheckFifoParam>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d008      	beq.n	80105f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2240      	movs	r2, #64	@ 0x40
 80105e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2201      	movs	r2, #1
 80105ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80105ee:	2301      	movs	r3, #1
 80105f0:	e197      	b.n	8010922 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f001 fb5e 	bl	8011cbc <DMA_CalcBaseAndBitshift>
 8010600:	4603      	mov	r3, r0
 8010602:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010608:	f003 031f 	and.w	r3, r3, #31
 801060c:	223f      	movs	r2, #63	@ 0x3f
 801060e:	409a      	lsls	r2, r3
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	609a      	str	r2, [r3, #8]
 8010614:	e0cd      	b.n	80107b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a3b      	ldr	r2, [pc, #236]	@ (8010708 <HAL_DMA_Init+0x42c>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d022      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a39      	ldr	r2, [pc, #228]	@ (801070c <HAL_DMA_Init+0x430>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d01d      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a38      	ldr	r2, [pc, #224]	@ (8010710 <HAL_DMA_Init+0x434>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d018      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a36      	ldr	r2, [pc, #216]	@ (8010714 <HAL_DMA_Init+0x438>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d013      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a35      	ldr	r2, [pc, #212]	@ (8010718 <HAL_DMA_Init+0x43c>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d00e      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a33      	ldr	r2, [pc, #204]	@ (801071c <HAL_DMA_Init+0x440>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d009      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a32      	ldr	r2, [pc, #200]	@ (8010720 <HAL_DMA_Init+0x444>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d004      	beq.n	8010666 <HAL_DMA_Init+0x38a>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a30      	ldr	r2, [pc, #192]	@ (8010724 <HAL_DMA_Init+0x448>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d101      	bne.n	801066a <HAL_DMA_Init+0x38e>
 8010666:	2301      	movs	r3, #1
 8010668:	e000      	b.n	801066c <HAL_DMA_Init+0x390>
 801066a:	2300      	movs	r3, #0
 801066c:	2b00      	cmp	r3, #0
 801066e:	f000 8097 	beq.w	80107a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a24      	ldr	r2, [pc, #144]	@ (8010708 <HAL_DMA_Init+0x42c>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d021      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a22      	ldr	r2, [pc, #136]	@ (801070c <HAL_DMA_Init+0x430>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d01c      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a21      	ldr	r2, [pc, #132]	@ (8010710 <HAL_DMA_Init+0x434>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d017      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a1f      	ldr	r2, [pc, #124]	@ (8010714 <HAL_DMA_Init+0x438>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d012      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4a1e      	ldr	r2, [pc, #120]	@ (8010718 <HAL_DMA_Init+0x43c>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d00d      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a1c      	ldr	r2, [pc, #112]	@ (801071c <HAL_DMA_Init+0x440>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d008      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a1b      	ldr	r2, [pc, #108]	@ (8010720 <HAL_DMA_Init+0x444>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d003      	beq.n	80106c0 <HAL_DMA_Init+0x3e4>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a19      	ldr	r2, [pc, #100]	@ (8010724 <HAL_DMA_Init+0x448>)
 80106be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2202      	movs	r2, #2
 80106c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	4b13      	ldr	r3, [pc, #76]	@ (8010728 <HAL_DMA_Init+0x44c>)
 80106dc:	4013      	ands	r3, r2
 80106de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	2b40      	cmp	r3, #64	@ 0x40
 80106e6:	d021      	beq.n	801072c <HAL_DMA_Init+0x450>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	2b80      	cmp	r3, #128	@ 0x80
 80106ee:	d102      	bne.n	80106f6 <HAL_DMA_Init+0x41a>
 80106f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80106f4:	e01b      	b.n	801072e <HAL_DMA_Init+0x452>
 80106f6:	2300      	movs	r3, #0
 80106f8:	e019      	b.n	801072e <HAL_DMA_Init+0x452>
 80106fa:	bf00      	nop
 80106fc:	fe10803f 	.word	0xfe10803f
 8010700:	5c001000 	.word	0x5c001000
 8010704:	ffff0000 	.word	0xffff0000
 8010708:	58025408 	.word	0x58025408
 801070c:	5802541c 	.word	0x5802541c
 8010710:	58025430 	.word	0x58025430
 8010714:	58025444 	.word	0x58025444
 8010718:	58025458 	.word	0x58025458
 801071c:	5802546c 	.word	0x5802546c
 8010720:	58025480 	.word	0x58025480
 8010724:	58025494 	.word	0x58025494
 8010728:	fffe000f 	.word	0xfffe000f
 801072c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	68d2      	ldr	r2, [r2, #12]
 8010732:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8010734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801073c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	695b      	ldr	r3, [r3, #20]
 8010742:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8010744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801074c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	69db      	ldr	r3, [r3, #28]
 8010752:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8010754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801075c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801075e:	697a      	ldr	r2, [r7, #20]
 8010760:	4313      	orrs	r3, r2
 8010762:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	697a      	ldr	r2, [r7, #20]
 801076a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	461a      	mov	r2, r3
 8010772:	4b6e      	ldr	r3, [pc, #440]	@ (801092c <HAL_DMA_Init+0x650>)
 8010774:	4413      	add	r3, r2
 8010776:	4a6e      	ldr	r2, [pc, #440]	@ (8010930 <HAL_DMA_Init+0x654>)
 8010778:	fba2 2303 	umull	r2, r3, r2, r3
 801077c:	091b      	lsrs	r3, r3, #4
 801077e:	009a      	lsls	r2, r3, #2
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f001 fa99 	bl	8011cbc <DMA_CalcBaseAndBitshift>
 801078a:	4603      	mov	r3, r0
 801078c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010792:	f003 031f 	and.w	r3, r3, #31
 8010796:	2201      	movs	r2, #1
 8010798:	409a      	lsls	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	605a      	str	r2, [r3, #4]
 801079e:	e008      	b.n	80107b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2240      	movs	r2, #64	@ 0x40
 80107a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2203      	movs	r2, #3
 80107aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e0b7      	b.n	8010922 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a5f      	ldr	r2, [pc, #380]	@ (8010934 <HAL_DMA_Init+0x658>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d072      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a5d      	ldr	r2, [pc, #372]	@ (8010938 <HAL_DMA_Init+0x65c>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d06d      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a5c      	ldr	r2, [pc, #368]	@ (801093c <HAL_DMA_Init+0x660>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d068      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a5a      	ldr	r2, [pc, #360]	@ (8010940 <HAL_DMA_Init+0x664>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d063      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a59      	ldr	r2, [pc, #356]	@ (8010944 <HAL_DMA_Init+0x668>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d05e      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4a57      	ldr	r2, [pc, #348]	@ (8010948 <HAL_DMA_Init+0x66c>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d059      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a56      	ldr	r2, [pc, #344]	@ (801094c <HAL_DMA_Init+0x670>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d054      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4a54      	ldr	r2, [pc, #336]	@ (8010950 <HAL_DMA_Init+0x674>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d04f      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a53      	ldr	r2, [pc, #332]	@ (8010954 <HAL_DMA_Init+0x678>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d04a      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a51      	ldr	r2, [pc, #324]	@ (8010958 <HAL_DMA_Init+0x67c>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d045      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a50      	ldr	r2, [pc, #320]	@ (801095c <HAL_DMA_Init+0x680>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d040      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a4e      	ldr	r2, [pc, #312]	@ (8010960 <HAL_DMA_Init+0x684>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d03b      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a4d      	ldr	r2, [pc, #308]	@ (8010964 <HAL_DMA_Init+0x688>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d036      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4a4b      	ldr	r2, [pc, #300]	@ (8010968 <HAL_DMA_Init+0x68c>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d031      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a4a      	ldr	r2, [pc, #296]	@ (801096c <HAL_DMA_Init+0x690>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d02c      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a48      	ldr	r2, [pc, #288]	@ (8010970 <HAL_DMA_Init+0x694>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d027      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a47      	ldr	r2, [pc, #284]	@ (8010974 <HAL_DMA_Init+0x698>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d022      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4a45      	ldr	r2, [pc, #276]	@ (8010978 <HAL_DMA_Init+0x69c>)
 8010862:	4293      	cmp	r3, r2
 8010864:	d01d      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a44      	ldr	r2, [pc, #272]	@ (801097c <HAL_DMA_Init+0x6a0>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d018      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a42      	ldr	r2, [pc, #264]	@ (8010980 <HAL_DMA_Init+0x6a4>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d013      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4a41      	ldr	r2, [pc, #260]	@ (8010984 <HAL_DMA_Init+0x6a8>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d00e      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a3f      	ldr	r2, [pc, #252]	@ (8010988 <HAL_DMA_Init+0x6ac>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d009      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a3e      	ldr	r2, [pc, #248]	@ (801098c <HAL_DMA_Init+0x6b0>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d004      	beq.n	80108a2 <HAL_DMA_Init+0x5c6>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a3c      	ldr	r2, [pc, #240]	@ (8010990 <HAL_DMA_Init+0x6b4>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d101      	bne.n	80108a6 <HAL_DMA_Init+0x5ca>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e000      	b.n	80108a8 <HAL_DMA_Init+0x5cc>
 80108a6:	2300      	movs	r3, #0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d032      	beq.n	8010912 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f001 fb33 	bl	8011f18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	2b80      	cmp	r3, #128	@ 0x80
 80108b8:	d102      	bne.n	80108c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685a      	ldr	r2, [r3, #4]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108c8:	b2d2      	uxtb	r2, r2
 80108ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80108d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d010      	beq.n	8010900 <HAL_DMA_Init+0x624>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	2b08      	cmp	r3, #8
 80108e4:	d80c      	bhi.n	8010900 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f001 fbb0 	bl	801204c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80108fc:	605a      	str	r2, [r3, #4]
 80108fe:	e008      	b.n	8010912 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	a7fdabf8 	.word	0xa7fdabf8
 8010930:	cccccccd 	.word	0xcccccccd
 8010934:	40020010 	.word	0x40020010
 8010938:	40020028 	.word	0x40020028
 801093c:	40020040 	.word	0x40020040
 8010940:	40020058 	.word	0x40020058
 8010944:	40020070 	.word	0x40020070
 8010948:	40020088 	.word	0x40020088
 801094c:	400200a0 	.word	0x400200a0
 8010950:	400200b8 	.word	0x400200b8
 8010954:	40020410 	.word	0x40020410
 8010958:	40020428 	.word	0x40020428
 801095c:	40020440 	.word	0x40020440
 8010960:	40020458 	.word	0x40020458
 8010964:	40020470 	.word	0x40020470
 8010968:	40020488 	.word	0x40020488
 801096c:	400204a0 	.word	0x400204a0
 8010970:	400204b8 	.word	0x400204b8
 8010974:	58025408 	.word	0x58025408
 8010978:	5802541c 	.word	0x5802541c
 801097c:	58025430 	.word	0x58025430
 8010980:	58025444 	.word	0x58025444
 8010984:	58025458 	.word	0x58025458
 8010988:	5802546c 	.word	0x5802546c
 801098c:	58025480 	.word	0x58025480
 8010990:	58025494 	.word	0x58025494

08010994 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e0ec      	b.n	8010b8a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d101      	bne.n	80109be <HAL_DMA_Start+0x2a>
 80109ba:	2302      	movs	r3, #2
 80109bc:	e0e5      	b.n	8010b8a <HAL_DMA_Start+0x1f6>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	f040 80d0 	bne.w	8010b74 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2202      	movs	r2, #2
 80109d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a6b      	ldr	r2, [pc, #428]	@ (8010b94 <HAL_DMA_Start+0x200>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d04a      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a69      	ldr	r2, [pc, #420]	@ (8010b98 <HAL_DMA_Start+0x204>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d045      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a68      	ldr	r2, [pc, #416]	@ (8010b9c <HAL_DMA_Start+0x208>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d040      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a66      	ldr	r2, [pc, #408]	@ (8010ba0 <HAL_DMA_Start+0x20c>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d03b      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a65      	ldr	r2, [pc, #404]	@ (8010ba4 <HAL_DMA_Start+0x210>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d036      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a63      	ldr	r2, [pc, #396]	@ (8010ba8 <HAL_DMA_Start+0x214>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d031      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4a62      	ldr	r2, [pc, #392]	@ (8010bac <HAL_DMA_Start+0x218>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d02c      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a60      	ldr	r2, [pc, #384]	@ (8010bb0 <HAL_DMA_Start+0x21c>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d027      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a5f      	ldr	r2, [pc, #380]	@ (8010bb4 <HAL_DMA_Start+0x220>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d022      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a5d      	ldr	r2, [pc, #372]	@ (8010bb8 <HAL_DMA_Start+0x224>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d01d      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8010bbc <HAL_DMA_Start+0x228>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d018      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a5a      	ldr	r2, [pc, #360]	@ (8010bc0 <HAL_DMA_Start+0x22c>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d013      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a59      	ldr	r2, [pc, #356]	@ (8010bc4 <HAL_DMA_Start+0x230>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d00e      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a57      	ldr	r2, [pc, #348]	@ (8010bc8 <HAL_DMA_Start+0x234>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d009      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a56      	ldr	r2, [pc, #344]	@ (8010bcc <HAL_DMA_Start+0x238>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d004      	beq.n	8010a82 <HAL_DMA_Start+0xee>
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a54      	ldr	r2, [pc, #336]	@ (8010bd0 <HAL_DMA_Start+0x23c>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d108      	bne.n	8010a94 <HAL_DMA_Start+0x100>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f022 0201 	bic.w	r2, r2, #1
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	e007      	b.n	8010aa4 <HAL_DMA_Start+0x110>
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f022 0201 	bic.w	r2, r2, #1
 8010aa2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	68b9      	ldr	r1, [r7, #8]
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f000 ff5a 	bl	8011964 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a37      	ldr	r2, [pc, #220]	@ (8010b94 <HAL_DMA_Start+0x200>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d04a      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a36      	ldr	r2, [pc, #216]	@ (8010b98 <HAL_DMA_Start+0x204>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d045      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a34      	ldr	r2, [pc, #208]	@ (8010b9c <HAL_DMA_Start+0x208>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d040      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a33      	ldr	r2, [pc, #204]	@ (8010ba0 <HAL_DMA_Start+0x20c>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d03b      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a31      	ldr	r2, [pc, #196]	@ (8010ba4 <HAL_DMA_Start+0x210>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d036      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a30      	ldr	r2, [pc, #192]	@ (8010ba8 <HAL_DMA_Start+0x214>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d031      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a2e      	ldr	r2, [pc, #184]	@ (8010bac <HAL_DMA_Start+0x218>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d02c      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a2d      	ldr	r2, [pc, #180]	@ (8010bb0 <HAL_DMA_Start+0x21c>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d027      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a2b      	ldr	r2, [pc, #172]	@ (8010bb4 <HAL_DMA_Start+0x220>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d022      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8010bb8 <HAL_DMA_Start+0x224>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d01d      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a28      	ldr	r2, [pc, #160]	@ (8010bbc <HAL_DMA_Start+0x228>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d018      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a27      	ldr	r2, [pc, #156]	@ (8010bc0 <HAL_DMA_Start+0x22c>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d013      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a25      	ldr	r2, [pc, #148]	@ (8010bc4 <HAL_DMA_Start+0x230>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d00e      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a24      	ldr	r2, [pc, #144]	@ (8010bc8 <HAL_DMA_Start+0x234>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d009      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a22      	ldr	r2, [pc, #136]	@ (8010bcc <HAL_DMA_Start+0x238>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d004      	beq.n	8010b50 <HAL_DMA_Start+0x1bc>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a21      	ldr	r2, [pc, #132]	@ (8010bd0 <HAL_DMA_Start+0x23c>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d108      	bne.n	8010b62 <HAL_DMA_Start+0x1ce>
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f042 0201 	orr.w	r2, r2, #1
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	e012      	b.n	8010b88 <HAL_DMA_Start+0x1f4>
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f042 0201 	orr.w	r2, r2, #1
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	e009      	b.n	8010b88 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8010b84:	2301      	movs	r3, #1
 8010b86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3718      	adds	r7, #24
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	40020010 	.word	0x40020010
 8010b98:	40020028 	.word	0x40020028
 8010b9c:	40020040 	.word	0x40020040
 8010ba0:	40020058 	.word	0x40020058
 8010ba4:	40020070 	.word	0x40020070
 8010ba8:	40020088 	.word	0x40020088
 8010bac:	400200a0 	.word	0x400200a0
 8010bb0:	400200b8 	.word	0x400200b8
 8010bb4:	40020410 	.word	0x40020410
 8010bb8:	40020428 	.word	0x40020428
 8010bbc:	40020440 	.word	0x40020440
 8010bc0:	40020458 	.word	0x40020458
 8010bc4:	40020470 	.word	0x40020470
 8010bc8:	40020488 	.word	0x40020488
 8010bcc:	400204a0 	.word	0x400204a0
 8010bd0:	400204b8 	.word	0x400204b8

08010bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8010bdc:	f7ff f9a0 	bl	800ff20 <HAL_GetTick>
 8010be0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d101      	bne.n	8010bec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e2dc      	b.n	80111a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	d008      	beq.n	8010c0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2280      	movs	r2, #128	@ 0x80
 8010bfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2200      	movs	r2, #0
 8010c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e2cd      	b.n	80111a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4a76      	ldr	r2, [pc, #472]	@ (8010de8 <HAL_DMA_Abort+0x214>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d04a      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4a74      	ldr	r2, [pc, #464]	@ (8010dec <HAL_DMA_Abort+0x218>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d045      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	4a73      	ldr	r2, [pc, #460]	@ (8010df0 <HAL_DMA_Abort+0x21c>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d040      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a71      	ldr	r2, [pc, #452]	@ (8010df4 <HAL_DMA_Abort+0x220>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d03b      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4a70      	ldr	r2, [pc, #448]	@ (8010df8 <HAL_DMA_Abort+0x224>)
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d036      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a6e      	ldr	r2, [pc, #440]	@ (8010dfc <HAL_DMA_Abort+0x228>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d031      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8010e00 <HAL_DMA_Abort+0x22c>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d02c      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a6b      	ldr	r2, [pc, #428]	@ (8010e04 <HAL_DMA_Abort+0x230>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d027      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8010e08 <HAL_DMA_Abort+0x234>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d022      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a68      	ldr	r2, [pc, #416]	@ (8010e0c <HAL_DMA_Abort+0x238>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d01d      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4a67      	ldr	r2, [pc, #412]	@ (8010e10 <HAL_DMA_Abort+0x23c>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d018      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a65      	ldr	r2, [pc, #404]	@ (8010e14 <HAL_DMA_Abort+0x240>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d013      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4a64      	ldr	r2, [pc, #400]	@ (8010e18 <HAL_DMA_Abort+0x244>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d00e      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a62      	ldr	r2, [pc, #392]	@ (8010e1c <HAL_DMA_Abort+0x248>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d009      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a61      	ldr	r2, [pc, #388]	@ (8010e20 <HAL_DMA_Abort+0x24c>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d004      	beq.n	8010caa <HAL_DMA_Abort+0xd6>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8010e24 <HAL_DMA_Abort+0x250>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d101      	bne.n	8010cae <HAL_DMA_Abort+0xda>
 8010caa:	2301      	movs	r3, #1
 8010cac:	e000      	b.n	8010cb0 <HAL_DMA_Abort+0xdc>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d013      	beq.n	8010cdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f022 021e 	bic.w	r2, r2, #30
 8010cc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	695a      	ldr	r2, [r3, #20]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010cd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	617b      	str	r3, [r7, #20]
 8010cda:	e00a      	b.n	8010cf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f022 020e 	bic.w	r2, r2, #14
 8010cea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8010de8 <HAL_DMA_Abort+0x214>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d072      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a3a      	ldr	r2, [pc, #232]	@ (8010dec <HAL_DMA_Abort+0x218>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d06d      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a39      	ldr	r2, [pc, #228]	@ (8010df0 <HAL_DMA_Abort+0x21c>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d068      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a37      	ldr	r2, [pc, #220]	@ (8010df4 <HAL_DMA_Abort+0x220>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d063      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4a36      	ldr	r2, [pc, #216]	@ (8010df8 <HAL_DMA_Abort+0x224>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d05e      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a34      	ldr	r2, [pc, #208]	@ (8010dfc <HAL_DMA_Abort+0x228>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d059      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a33      	ldr	r2, [pc, #204]	@ (8010e00 <HAL_DMA_Abort+0x22c>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d054      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a31      	ldr	r2, [pc, #196]	@ (8010e04 <HAL_DMA_Abort+0x230>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d04f      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4a30      	ldr	r2, [pc, #192]	@ (8010e08 <HAL_DMA_Abort+0x234>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d04a      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a2e      	ldr	r2, [pc, #184]	@ (8010e0c <HAL_DMA_Abort+0x238>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d045      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8010e10 <HAL_DMA_Abort+0x23c>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d040      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a2b      	ldr	r2, [pc, #172]	@ (8010e14 <HAL_DMA_Abort+0x240>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d03b      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8010e18 <HAL_DMA_Abort+0x244>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d036      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a28      	ldr	r2, [pc, #160]	@ (8010e1c <HAL_DMA_Abort+0x248>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d031      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4a27      	ldr	r2, [pc, #156]	@ (8010e20 <HAL_DMA_Abort+0x24c>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d02c      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a25      	ldr	r2, [pc, #148]	@ (8010e24 <HAL_DMA_Abort+0x250>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d027      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a24      	ldr	r2, [pc, #144]	@ (8010e28 <HAL_DMA_Abort+0x254>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d022      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a22      	ldr	r2, [pc, #136]	@ (8010e2c <HAL_DMA_Abort+0x258>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d01d      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a21      	ldr	r2, [pc, #132]	@ (8010e30 <HAL_DMA_Abort+0x25c>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d018      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a1f      	ldr	r2, [pc, #124]	@ (8010e34 <HAL_DMA_Abort+0x260>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d013      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8010e38 <HAL_DMA_Abort+0x264>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d00e      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8010e3c <HAL_DMA_Abort+0x268>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d009      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8010e40 <HAL_DMA_Abort+0x26c>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d004      	beq.n	8010de2 <HAL_DMA_Abort+0x20e>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a19      	ldr	r2, [pc, #100]	@ (8010e44 <HAL_DMA_Abort+0x270>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d132      	bne.n	8010e48 <HAL_DMA_Abort+0x274>
 8010de2:	2301      	movs	r3, #1
 8010de4:	e031      	b.n	8010e4a <HAL_DMA_Abort+0x276>
 8010de6:	bf00      	nop
 8010de8:	40020010 	.word	0x40020010
 8010dec:	40020028 	.word	0x40020028
 8010df0:	40020040 	.word	0x40020040
 8010df4:	40020058 	.word	0x40020058
 8010df8:	40020070 	.word	0x40020070
 8010dfc:	40020088 	.word	0x40020088
 8010e00:	400200a0 	.word	0x400200a0
 8010e04:	400200b8 	.word	0x400200b8
 8010e08:	40020410 	.word	0x40020410
 8010e0c:	40020428 	.word	0x40020428
 8010e10:	40020440 	.word	0x40020440
 8010e14:	40020458 	.word	0x40020458
 8010e18:	40020470 	.word	0x40020470
 8010e1c:	40020488 	.word	0x40020488
 8010e20:	400204a0 	.word	0x400204a0
 8010e24:	400204b8 	.word	0x400204b8
 8010e28:	58025408 	.word	0x58025408
 8010e2c:	5802541c 	.word	0x5802541c
 8010e30:	58025430 	.word	0x58025430
 8010e34:	58025444 	.word	0x58025444
 8010e38:	58025458 	.word	0x58025458
 8010e3c:	5802546c 	.word	0x5802546c
 8010e40:	58025480 	.word	0x58025480
 8010e44:	58025494 	.word	0x58025494
 8010e48:	2300      	movs	r3, #0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d007      	beq.n	8010e5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a6d      	ldr	r2, [pc, #436]	@ (8011018 <HAL_DMA_Abort+0x444>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d04a      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a6b      	ldr	r2, [pc, #428]	@ (801101c <HAL_DMA_Abort+0x448>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d045      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a6a      	ldr	r2, [pc, #424]	@ (8011020 <HAL_DMA_Abort+0x44c>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d040      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a68      	ldr	r2, [pc, #416]	@ (8011024 <HAL_DMA_Abort+0x450>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d03b      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4a67      	ldr	r2, [pc, #412]	@ (8011028 <HAL_DMA_Abort+0x454>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d036      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a65      	ldr	r2, [pc, #404]	@ (801102c <HAL_DMA_Abort+0x458>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d031      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a64      	ldr	r2, [pc, #400]	@ (8011030 <HAL_DMA_Abort+0x45c>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d02c      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a62      	ldr	r2, [pc, #392]	@ (8011034 <HAL_DMA_Abort+0x460>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d027      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	4a61      	ldr	r2, [pc, #388]	@ (8011038 <HAL_DMA_Abort+0x464>)
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d022      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4a5f      	ldr	r2, [pc, #380]	@ (801103c <HAL_DMA_Abort+0x468>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d01d      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8011040 <HAL_DMA_Abort+0x46c>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d018      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8011044 <HAL_DMA_Abort+0x470>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d013      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a5b      	ldr	r2, [pc, #364]	@ (8011048 <HAL_DMA_Abort+0x474>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d00e      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a59      	ldr	r2, [pc, #356]	@ (801104c <HAL_DMA_Abort+0x478>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d009      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a58      	ldr	r2, [pc, #352]	@ (8011050 <HAL_DMA_Abort+0x47c>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d004      	beq.n	8010efe <HAL_DMA_Abort+0x32a>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a56      	ldr	r2, [pc, #344]	@ (8011054 <HAL_DMA_Abort+0x480>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d108      	bne.n	8010f10 <HAL_DMA_Abort+0x33c>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f022 0201 	bic.w	r2, r2, #1
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	e007      	b.n	8010f20 <HAL_DMA_Abort+0x34c>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f022 0201 	bic.w	r2, r2, #1
 8010f1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8010f20:	e013      	b.n	8010f4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010f22:	f7fe fffd 	bl	800ff20 <HAL_GetTick>
 8010f26:	4602      	mov	r2, r0
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	2b05      	cmp	r3, #5
 8010f2e:	d90c      	bls.n	8010f4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2220      	movs	r2, #32
 8010f34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2203      	movs	r2, #3
 8010f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8010f46:	2301      	movs	r3, #1
 8010f48:	e12d      	b.n	80111a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d1e5      	bne.n	8010f22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8011018 <HAL_DMA_Abort+0x444>)
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d04a      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a2d      	ldr	r2, [pc, #180]	@ (801101c <HAL_DMA_Abort+0x448>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d045      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8011020 <HAL_DMA_Abort+0x44c>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d040      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a2a      	ldr	r2, [pc, #168]	@ (8011024 <HAL_DMA_Abort+0x450>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d03b      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a29      	ldr	r2, [pc, #164]	@ (8011028 <HAL_DMA_Abort+0x454>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d036      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a27      	ldr	r2, [pc, #156]	@ (801102c <HAL_DMA_Abort+0x458>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d031      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a26      	ldr	r2, [pc, #152]	@ (8011030 <HAL_DMA_Abort+0x45c>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d02c      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a24      	ldr	r2, [pc, #144]	@ (8011034 <HAL_DMA_Abort+0x460>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d027      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4a23      	ldr	r2, [pc, #140]	@ (8011038 <HAL_DMA_Abort+0x464>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d022      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a21      	ldr	r2, [pc, #132]	@ (801103c <HAL_DMA_Abort+0x468>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d01d      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4a20      	ldr	r2, [pc, #128]	@ (8011040 <HAL_DMA_Abort+0x46c>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d018      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8011044 <HAL_DMA_Abort+0x470>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d013      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8011048 <HAL_DMA_Abort+0x474>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d00e      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a1b      	ldr	r2, [pc, #108]	@ (801104c <HAL_DMA_Abort+0x478>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d009      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8011050 <HAL_DMA_Abort+0x47c>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d004      	beq.n	8010ff6 <HAL_DMA_Abort+0x422>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a18      	ldr	r2, [pc, #96]	@ (8011054 <HAL_DMA_Abort+0x480>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d101      	bne.n	8010ffa <HAL_DMA_Abort+0x426>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e000      	b.n	8010ffc <HAL_DMA_Abort+0x428>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d02b      	beq.n	8011058 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011004:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801100a:	f003 031f 	and.w	r3, r3, #31
 801100e:	223f      	movs	r2, #63	@ 0x3f
 8011010:	409a      	lsls	r2, r3
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	609a      	str	r2, [r3, #8]
 8011016:	e02a      	b.n	801106e <HAL_DMA_Abort+0x49a>
 8011018:	40020010 	.word	0x40020010
 801101c:	40020028 	.word	0x40020028
 8011020:	40020040 	.word	0x40020040
 8011024:	40020058 	.word	0x40020058
 8011028:	40020070 	.word	0x40020070
 801102c:	40020088 	.word	0x40020088
 8011030:	400200a0 	.word	0x400200a0
 8011034:	400200b8 	.word	0x400200b8
 8011038:	40020410 	.word	0x40020410
 801103c:	40020428 	.word	0x40020428
 8011040:	40020440 	.word	0x40020440
 8011044:	40020458 	.word	0x40020458
 8011048:	40020470 	.word	0x40020470
 801104c:	40020488 	.word	0x40020488
 8011050:	400204a0 	.word	0x400204a0
 8011054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801105c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011062:	f003 031f 	and.w	r3, r3, #31
 8011066:	2201      	movs	r2, #1
 8011068:	409a      	lsls	r2, r3
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a4f      	ldr	r2, [pc, #316]	@ (80111b0 <HAL_DMA_Abort+0x5dc>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d072      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a4d      	ldr	r2, [pc, #308]	@ (80111b4 <HAL_DMA_Abort+0x5e0>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d06d      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4a4c      	ldr	r2, [pc, #304]	@ (80111b8 <HAL_DMA_Abort+0x5e4>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d068      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a4a      	ldr	r2, [pc, #296]	@ (80111bc <HAL_DMA_Abort+0x5e8>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d063      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a49      	ldr	r2, [pc, #292]	@ (80111c0 <HAL_DMA_Abort+0x5ec>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d05e      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a47      	ldr	r2, [pc, #284]	@ (80111c4 <HAL_DMA_Abort+0x5f0>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d059      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a46      	ldr	r2, [pc, #280]	@ (80111c8 <HAL_DMA_Abort+0x5f4>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d054      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4a44      	ldr	r2, [pc, #272]	@ (80111cc <HAL_DMA_Abort+0x5f8>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d04f      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a43      	ldr	r2, [pc, #268]	@ (80111d0 <HAL_DMA_Abort+0x5fc>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d04a      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a41      	ldr	r2, [pc, #260]	@ (80111d4 <HAL_DMA_Abort+0x600>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d045      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a40      	ldr	r2, [pc, #256]	@ (80111d8 <HAL_DMA_Abort+0x604>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d040      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4a3e      	ldr	r2, [pc, #248]	@ (80111dc <HAL_DMA_Abort+0x608>)
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d03b      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a3d      	ldr	r2, [pc, #244]	@ (80111e0 <HAL_DMA_Abort+0x60c>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d036      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a3b      	ldr	r2, [pc, #236]	@ (80111e4 <HAL_DMA_Abort+0x610>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d031      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4a3a      	ldr	r2, [pc, #232]	@ (80111e8 <HAL_DMA_Abort+0x614>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d02c      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4a38      	ldr	r2, [pc, #224]	@ (80111ec <HAL_DMA_Abort+0x618>)
 801110a:	4293      	cmp	r3, r2
 801110c:	d027      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4a37      	ldr	r2, [pc, #220]	@ (80111f0 <HAL_DMA_Abort+0x61c>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d022      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a35      	ldr	r2, [pc, #212]	@ (80111f4 <HAL_DMA_Abort+0x620>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d01d      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a34      	ldr	r2, [pc, #208]	@ (80111f8 <HAL_DMA_Abort+0x624>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d018      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a32      	ldr	r2, [pc, #200]	@ (80111fc <HAL_DMA_Abort+0x628>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d013      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a31      	ldr	r2, [pc, #196]	@ (8011200 <HAL_DMA_Abort+0x62c>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d00e      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4a2f      	ldr	r2, [pc, #188]	@ (8011204 <HAL_DMA_Abort+0x630>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d009      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	4a2e      	ldr	r2, [pc, #184]	@ (8011208 <HAL_DMA_Abort+0x634>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d004      	beq.n	801115e <HAL_DMA_Abort+0x58a>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4a2c      	ldr	r2, [pc, #176]	@ (801120c <HAL_DMA_Abort+0x638>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d101      	bne.n	8011162 <HAL_DMA_Abort+0x58e>
 801115e:	2301      	movs	r3, #1
 8011160:	e000      	b.n	8011164 <HAL_DMA_Abort+0x590>
 8011162:	2300      	movs	r3, #0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d015      	beq.n	8011194 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8011170:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00c      	beq.n	8011194 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011188:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8011192:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2201      	movs	r2, #1
 8011198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	40020010 	.word	0x40020010
 80111b4:	40020028 	.word	0x40020028
 80111b8:	40020040 	.word	0x40020040
 80111bc:	40020058 	.word	0x40020058
 80111c0:	40020070 	.word	0x40020070
 80111c4:	40020088 	.word	0x40020088
 80111c8:	400200a0 	.word	0x400200a0
 80111cc:	400200b8 	.word	0x400200b8
 80111d0:	40020410 	.word	0x40020410
 80111d4:	40020428 	.word	0x40020428
 80111d8:	40020440 	.word	0x40020440
 80111dc:	40020458 	.word	0x40020458
 80111e0:	40020470 	.word	0x40020470
 80111e4:	40020488 	.word	0x40020488
 80111e8:	400204a0 	.word	0x400204a0
 80111ec:	400204b8 	.word	0x400204b8
 80111f0:	58025408 	.word	0x58025408
 80111f4:	5802541c 	.word	0x5802541c
 80111f8:	58025430 	.word	0x58025430
 80111fc:	58025444 	.word	0x58025444
 8011200:	58025458 	.word	0x58025458
 8011204:	5802546c 	.word	0x5802546c
 8011208:	58025480 	.word	0x58025480
 801120c:	58025494 	.word	0x58025494

08011210 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b08a      	sub	sp, #40	@ 0x28
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	460b      	mov	r3, r1
 801121a:	607a      	str	r2, [r7, #4]
 801121c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8011222:	f7fe fe7d 	bl	800ff20 <HAL_GetTick>
 8011226:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d101      	bne.n	8011232 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801122e:	2301      	movs	r3, #1
 8011230:	e374      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011238:	b2db      	uxtb	r3, r3
 801123a:	2b02      	cmp	r3, #2
 801123c:	d008      	beq.n	8011250 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2280      	movs	r2, #128	@ 0x80
 8011242:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2200      	movs	r2, #0
 8011248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801124c:	2301      	movs	r3, #1
 801124e:	e365      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4a7b      	ldr	r2, [pc, #492]	@ (8011444 <HAL_DMA_PollForTransfer+0x234>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d04a      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a7a      	ldr	r2, [pc, #488]	@ (8011448 <HAL_DMA_PollForTransfer+0x238>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d045      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a78      	ldr	r2, [pc, #480]	@ (801144c <HAL_DMA_PollForTransfer+0x23c>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d040      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a77      	ldr	r2, [pc, #476]	@ (8011450 <HAL_DMA_PollForTransfer+0x240>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d03b      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4a75      	ldr	r2, [pc, #468]	@ (8011454 <HAL_DMA_PollForTransfer+0x244>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d036      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	4a74      	ldr	r2, [pc, #464]	@ (8011458 <HAL_DMA_PollForTransfer+0x248>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d031      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	4a72      	ldr	r2, [pc, #456]	@ (801145c <HAL_DMA_PollForTransfer+0x24c>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d02c      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4a71      	ldr	r2, [pc, #452]	@ (8011460 <HAL_DMA_PollForTransfer+0x250>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d027      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4a6f      	ldr	r2, [pc, #444]	@ (8011464 <HAL_DMA_PollForTransfer+0x254>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d022      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a6e      	ldr	r2, [pc, #440]	@ (8011468 <HAL_DMA_PollForTransfer+0x258>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d01d      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4a6c      	ldr	r2, [pc, #432]	@ (801146c <HAL_DMA_PollForTransfer+0x25c>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d018      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4a6b      	ldr	r2, [pc, #428]	@ (8011470 <HAL_DMA_PollForTransfer+0x260>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d013      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a69      	ldr	r2, [pc, #420]	@ (8011474 <HAL_DMA_PollForTransfer+0x264>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d00e      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a68      	ldr	r2, [pc, #416]	@ (8011478 <HAL_DMA_PollForTransfer+0x268>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d009      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a66      	ldr	r2, [pc, #408]	@ (801147c <HAL_DMA_PollForTransfer+0x26c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d004      	beq.n	80112f0 <HAL_DMA_PollForTransfer+0xe0>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a65      	ldr	r2, [pc, #404]	@ (8011480 <HAL_DMA_PollForTransfer+0x270>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d101      	bne.n	80112f4 <HAL_DMA_PollForTransfer+0xe4>
 80112f0:	2301      	movs	r3, #1
 80112f2:	e000      	b.n	80112f6 <HAL_DMA_PollForTransfer+0xe6>
 80112f4:	2300      	movs	r3, #0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d028      	beq.n	801134c <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011304:	2b00      	cmp	r3, #0
 8011306:	d005      	beq.n	8011314 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801130e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8011310:	2301      	movs	r3, #1
 8011312:	e303      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011314:	7afb      	ldrb	r3, [r7, #11]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d108      	bne.n	801132c <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801131e:	f003 031f 	and.w	r3, r3, #31
 8011322:	2220      	movs	r2, #32
 8011324:	fa02 f303 	lsl.w	r3, r2, r3
 8011328:	627b      	str	r3, [r7, #36]	@ 0x24
 801132a:	e007      	b.n	801133c <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011330:	f003 031f 	and.w	r3, r3, #31
 8011334:	2210      	movs	r2, #16
 8011336:	fa02 f303 	lsl.w	r3, r2, r3
 801133a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011340:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011346:	3308      	adds	r3, #8
 8011348:	61fb      	str	r3, [r7, #28]
 801134a:	e1d5      	b.n	80116f8 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f003 0320 	and.w	r3, r3, #32
 8011356:	2b00      	cmp	r3, #0
 8011358:	d005      	beq.n	8011366 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011360:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	e2da      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011366:	7afb      	ldrb	r3, [r7, #11]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d108      	bne.n	801137e <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011370:	f003 031f 	and.w	r3, r3, #31
 8011374:	2202      	movs	r2, #2
 8011376:	fa02 f303 	lsl.w	r3, r2, r3
 801137a:	627b      	str	r3, [r7, #36]	@ 0x24
 801137c:	e007      	b.n	801138e <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011382:	f003 031f 	and.w	r3, r3, #31
 8011386:	2204      	movs	r2, #4
 8011388:	fa02 f303 	lsl.w	r3, r2, r3
 801138c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011392:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011398:	3304      	adds	r3, #4
 801139a:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801139c:	e1ac      	b.n	80116f8 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4a28      	ldr	r2, [pc, #160]	@ (8011444 <HAL_DMA_PollForTransfer+0x234>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d04a      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a26      	ldr	r2, [pc, #152]	@ (8011448 <HAL_DMA_PollForTransfer+0x238>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d045      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4a25      	ldr	r2, [pc, #148]	@ (801144c <HAL_DMA_PollForTransfer+0x23c>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d040      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a23      	ldr	r2, [pc, #140]	@ (8011450 <HAL_DMA_PollForTransfer+0x240>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d03b      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4a22      	ldr	r2, [pc, #136]	@ (8011454 <HAL_DMA_PollForTransfer+0x244>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d036      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a20      	ldr	r2, [pc, #128]	@ (8011458 <HAL_DMA_PollForTransfer+0x248>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d031      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	4a1f      	ldr	r2, [pc, #124]	@ (801145c <HAL_DMA_PollForTransfer+0x24c>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d02c      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011460 <HAL_DMA_PollForTransfer+0x250>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d027      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4a1c      	ldr	r2, [pc, #112]	@ (8011464 <HAL_DMA_PollForTransfer+0x254>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d022      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a1a      	ldr	r2, [pc, #104]	@ (8011468 <HAL_DMA_PollForTransfer+0x258>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d01d      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a19      	ldr	r2, [pc, #100]	@ (801146c <HAL_DMA_PollForTransfer+0x25c>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d018      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a17      	ldr	r2, [pc, #92]	@ (8011470 <HAL_DMA_PollForTransfer+0x260>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d013      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a16      	ldr	r2, [pc, #88]	@ (8011474 <HAL_DMA_PollForTransfer+0x264>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d00e      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a14      	ldr	r2, [pc, #80]	@ (8011478 <HAL_DMA_PollForTransfer+0x268>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d009      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a13      	ldr	r2, [pc, #76]	@ (801147c <HAL_DMA_PollForTransfer+0x26c>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d004      	beq.n	801143e <HAL_DMA_PollForTransfer+0x22e>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a11      	ldr	r2, [pc, #68]	@ (8011480 <HAL_DMA_PollForTransfer+0x270>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d122      	bne.n	8011484 <HAL_DMA_PollForTransfer+0x274>
 801143e:	2301      	movs	r3, #1
 8011440:	e021      	b.n	8011486 <HAL_DMA_PollForTransfer+0x276>
 8011442:	bf00      	nop
 8011444:	40020010 	.word	0x40020010
 8011448:	40020028 	.word	0x40020028
 801144c:	40020040 	.word	0x40020040
 8011450:	40020058 	.word	0x40020058
 8011454:	40020070 	.word	0x40020070
 8011458:	40020088 	.word	0x40020088
 801145c:	400200a0 	.word	0x400200a0
 8011460:	400200b8 	.word	0x400200b8
 8011464:	40020410 	.word	0x40020410
 8011468:	40020428 	.word	0x40020428
 801146c:	40020440 	.word	0x40020440
 8011470:	40020458 	.word	0x40020458
 8011474:	40020470 	.word	0x40020470
 8011478:	40020488 	.word	0x40020488
 801147c:	400204a0 	.word	0x400204a0
 8011480:	400204b8 	.word	0x400204b8
 8011484:	2300      	movs	r3, #0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d057      	beq.n	801153a <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011492:	f003 031f 	and.w	r3, r3, #31
 8011496:	fa22 f303 	lsr.w	r3, r2, r3
 801149a:	f003 0301 	and.w	r3, r3, #1
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00d      	beq.n	80114be <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114a6:	f043 0202 	orr.w	r2, r3, #2
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114b2:	f003 031f 	and.w	r3, r3, #31
 80114b6:	2201      	movs	r2, #1
 80114b8:	409a      	lsls	r2, r3
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114c6:	f003 031f 	and.w	r3, r3, #31
 80114ca:	2104      	movs	r1, #4
 80114cc:	fa01 f303 	lsl.w	r3, r1, r3
 80114d0:	4013      	ands	r3, r2
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00d      	beq.n	80114f2 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114da:	f043 0204 	orr.w	r2, r3, #4
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114e6:	f003 031f 	and.w	r3, r3, #31
 80114ea:	2204      	movs	r2, #4
 80114ec:	409a      	lsls	r2, r3
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114fa:	f003 031f 	and.w	r3, r3, #31
 80114fe:	2108      	movs	r1, #8
 8011500:	fa01 f303 	lsl.w	r3, r1, r3
 8011504:	4013      	ands	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d038      	beq.n	801157c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801150e:	f043 0201 	orr.w	r2, r3, #1
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801151a:	f003 031f 	and.w	r3, r3, #31
 801151e:	2208      	movs	r2, #8
 8011520:	409a      	lsls	r2, r3
 8011522:	69fb      	ldr	r3, [r7, #28]
 8011524:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2201      	movs	r2, #1
 801152a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	e1f0      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011542:	f003 031f 	and.w	r3, r3, #31
 8011546:	2108      	movs	r1, #8
 8011548:	fa01 f303 	lsl.w	r3, r1, r3
 801154c:	4013      	ands	r3, r2
 801154e:	2b00      	cmp	r3, #0
 8011550:	d014      	beq.n	801157c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011556:	f003 031f 	and.w	r3, r3, #31
 801155a:	2201      	movs	r2, #1
 801155c:	409a      	lsls	r2, r3
 801155e:	6a3b      	ldr	r3, [r7, #32]
 8011560:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2201      	movs	r2, #1
 8011566:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2201      	movs	r2, #1
 801156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2200      	movs	r2, #0
 8011574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	e1cf      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011582:	d012      	beq.n	80115aa <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8011584:	f7fe fccc 	bl	800ff20 <HAL_GetTick>
 8011588:	4602      	mov	r2, r0
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	429a      	cmp	r2, r3
 8011592:	d302      	bcc.n	801159a <HAL_DMA_PollForTransfer+0x38a>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d107      	bne.n	80115aa <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2220      	movs	r2, #32
 801159e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f7ff fb17 	bl	8010bd4 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 80115a6:	2301      	movs	r3, #1
 80115a8:	e1b8      	b.n	801191c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4a81      	ldr	r2, [pc, #516]	@ (80117b4 <HAL_DMA_PollForTransfer+0x5a4>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d072      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a7f      	ldr	r2, [pc, #508]	@ (80117b8 <HAL_DMA_PollForTransfer+0x5a8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d06d      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4a7e      	ldr	r2, [pc, #504]	@ (80117bc <HAL_DMA_PollForTransfer+0x5ac>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d068      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a7c      	ldr	r2, [pc, #496]	@ (80117c0 <HAL_DMA_PollForTransfer+0x5b0>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d063      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a7b      	ldr	r2, [pc, #492]	@ (80117c4 <HAL_DMA_PollForTransfer+0x5b4>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d05e      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a79      	ldr	r2, [pc, #484]	@ (80117c8 <HAL_DMA_PollForTransfer+0x5b8>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d059      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4a78      	ldr	r2, [pc, #480]	@ (80117cc <HAL_DMA_PollForTransfer+0x5bc>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d054      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a76      	ldr	r2, [pc, #472]	@ (80117d0 <HAL_DMA_PollForTransfer+0x5c0>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d04f      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a75      	ldr	r2, [pc, #468]	@ (80117d4 <HAL_DMA_PollForTransfer+0x5c4>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d04a      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a73      	ldr	r2, [pc, #460]	@ (80117d8 <HAL_DMA_PollForTransfer+0x5c8>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d045      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a72      	ldr	r2, [pc, #456]	@ (80117dc <HAL_DMA_PollForTransfer+0x5cc>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d040      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a70      	ldr	r2, [pc, #448]	@ (80117e0 <HAL_DMA_PollForTransfer+0x5d0>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d03b      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4a6f      	ldr	r2, [pc, #444]	@ (80117e4 <HAL_DMA_PollForTransfer+0x5d4>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d036      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4a6d      	ldr	r2, [pc, #436]	@ (80117e8 <HAL_DMA_PollForTransfer+0x5d8>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d031      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4a6c      	ldr	r2, [pc, #432]	@ (80117ec <HAL_DMA_PollForTransfer+0x5dc>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d02c      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	4a6a      	ldr	r2, [pc, #424]	@ (80117f0 <HAL_DMA_PollForTransfer+0x5e0>)
 8011646:	4293      	cmp	r3, r2
 8011648:	d027      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	4a69      	ldr	r2, [pc, #420]	@ (80117f4 <HAL_DMA_PollForTransfer+0x5e4>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d022      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a67      	ldr	r2, [pc, #412]	@ (80117f8 <HAL_DMA_PollForTransfer+0x5e8>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d01d      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4a66      	ldr	r2, [pc, #408]	@ (80117fc <HAL_DMA_PollForTransfer+0x5ec>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d018      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a64      	ldr	r2, [pc, #400]	@ (8011800 <HAL_DMA_PollForTransfer+0x5f0>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d013      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4a63      	ldr	r2, [pc, #396]	@ (8011804 <HAL_DMA_PollForTransfer+0x5f4>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d00e      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4a61      	ldr	r2, [pc, #388]	@ (8011808 <HAL_DMA_PollForTransfer+0x5f8>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d009      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4a60      	ldr	r2, [pc, #384]	@ (801180c <HAL_DMA_PollForTransfer+0x5fc>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d004      	beq.n	801169a <HAL_DMA_PollForTransfer+0x48a>
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a5e      	ldr	r2, [pc, #376]	@ (8011810 <HAL_DMA_PollForTransfer+0x600>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d101      	bne.n	801169e <HAL_DMA_PollForTransfer+0x48e>
 801169a:	2301      	movs	r3, #1
 801169c:	e000      	b.n	80116a0 <HAL_DMA_PollForTransfer+0x490>
 801169e:	2300      	movs	r3, #0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d029      	beq.n	80116f8 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d012      	beq.n	80116d2 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116b6:	4013      	ands	r3, r2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00a      	beq.n	80116d2 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80116c4:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116ca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116dc:	4013      	ands	r3, r2
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00a      	beq.n	80116f8 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80116ea:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 80116f8:	6a3b      	ldr	r3, [r7, #32]
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fe:	4013      	ands	r3, r2
 8011700:	2b00      	cmp	r3, #0
 8011702:	f43f ae4c 	beq.w	801139e <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011706:	7afb      	ldrb	r3, [r7, #11]
 8011708:	2b00      	cmp	r3, #0
 801170a:	f040 80a0 	bne.w	801184e <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a28      	ldr	r2, [pc, #160]	@ (80117b4 <HAL_DMA_PollForTransfer+0x5a4>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d04a      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a26      	ldr	r2, [pc, #152]	@ (80117b8 <HAL_DMA_PollForTransfer+0x5a8>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d045      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4a25      	ldr	r2, [pc, #148]	@ (80117bc <HAL_DMA_PollForTransfer+0x5ac>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d040      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a23      	ldr	r2, [pc, #140]	@ (80117c0 <HAL_DMA_PollForTransfer+0x5b0>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d03b      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4a22      	ldr	r2, [pc, #136]	@ (80117c4 <HAL_DMA_PollForTransfer+0x5b4>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d036      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4a20      	ldr	r2, [pc, #128]	@ (80117c8 <HAL_DMA_PollForTransfer+0x5b8>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d031      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4a1f      	ldr	r2, [pc, #124]	@ (80117cc <HAL_DMA_PollForTransfer+0x5bc>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d02c      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	4a1d      	ldr	r2, [pc, #116]	@ (80117d0 <HAL_DMA_PollForTransfer+0x5c0>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d027      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a1c      	ldr	r2, [pc, #112]	@ (80117d4 <HAL_DMA_PollForTransfer+0x5c4>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d022      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4a1a      	ldr	r2, [pc, #104]	@ (80117d8 <HAL_DMA_PollForTransfer+0x5c8>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d01d      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	4a19      	ldr	r2, [pc, #100]	@ (80117dc <HAL_DMA_PollForTransfer+0x5cc>)
 8011778:	4293      	cmp	r3, r2
 801177a:	d018      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a17      	ldr	r2, [pc, #92]	@ (80117e0 <HAL_DMA_PollForTransfer+0x5d0>)
 8011782:	4293      	cmp	r3, r2
 8011784:	d013      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4a16      	ldr	r2, [pc, #88]	@ (80117e4 <HAL_DMA_PollForTransfer+0x5d4>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d00e      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	4a14      	ldr	r2, [pc, #80]	@ (80117e8 <HAL_DMA_PollForTransfer+0x5d8>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d009      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	4a13      	ldr	r2, [pc, #76]	@ (80117ec <HAL_DMA_PollForTransfer+0x5dc>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d004      	beq.n	80117ae <HAL_DMA_PollForTransfer+0x59e>
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4a11      	ldr	r2, [pc, #68]	@ (80117f0 <HAL_DMA_PollForTransfer+0x5e0>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d132      	bne.n	8011814 <HAL_DMA_PollForTransfer+0x604>
 80117ae:	2301      	movs	r3, #1
 80117b0:	e031      	b.n	8011816 <HAL_DMA_PollForTransfer+0x606>
 80117b2:	bf00      	nop
 80117b4:	40020010 	.word	0x40020010
 80117b8:	40020028 	.word	0x40020028
 80117bc:	40020040 	.word	0x40020040
 80117c0:	40020058 	.word	0x40020058
 80117c4:	40020070 	.word	0x40020070
 80117c8:	40020088 	.word	0x40020088
 80117cc:	400200a0 	.word	0x400200a0
 80117d0:	400200b8 	.word	0x400200b8
 80117d4:	40020410 	.word	0x40020410
 80117d8:	40020428 	.word	0x40020428
 80117dc:	40020440 	.word	0x40020440
 80117e0:	40020458 	.word	0x40020458
 80117e4:	40020470 	.word	0x40020470
 80117e8:	40020488 	.word	0x40020488
 80117ec:	400204a0 	.word	0x400204a0
 80117f0:	400204b8 	.word	0x400204b8
 80117f4:	58025408 	.word	0x58025408
 80117f8:	5802541c 	.word	0x5802541c
 80117fc:	58025430 	.word	0x58025430
 8011800:	58025444 	.word	0x58025444
 8011804:	58025458 	.word	0x58025458
 8011808:	5802546c 	.word	0x5802546c
 801180c:	58025480 	.word	0x58025480
 8011810:	58025494 	.word	0x58025494
 8011814:	2300      	movs	r3, #0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d008      	beq.n	801182c <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801181e:	f003 031f 	and.w	r3, r3, #31
 8011822:	2230      	movs	r2, #48	@ 0x30
 8011824:	409a      	lsls	r2, r3
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	e007      	b.n	801183c <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011830:	f003 031f 	and.w	r3, r3, #31
 8011834:	2202      	movs	r2, #2
 8011836:	409a      	lsls	r2, r3
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	2201      	movs	r2, #1
 8011840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2200      	movs	r2, #0
 8011848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801184c:	e065      	b.n	801191a <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4a34      	ldr	r2, [pc, #208]	@ (8011924 <HAL_DMA_PollForTransfer+0x714>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d04a      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a32      	ldr	r2, [pc, #200]	@ (8011928 <HAL_DMA_PollForTransfer+0x718>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d045      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4a31      	ldr	r2, [pc, #196]	@ (801192c <HAL_DMA_PollForTransfer+0x71c>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d040      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4a2f      	ldr	r2, [pc, #188]	@ (8011930 <HAL_DMA_PollForTransfer+0x720>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d03b      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a2e      	ldr	r2, [pc, #184]	@ (8011934 <HAL_DMA_PollForTransfer+0x724>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d036      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a2c      	ldr	r2, [pc, #176]	@ (8011938 <HAL_DMA_PollForTransfer+0x728>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d031      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4a2b      	ldr	r2, [pc, #172]	@ (801193c <HAL_DMA_PollForTransfer+0x72c>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d02c      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a29      	ldr	r2, [pc, #164]	@ (8011940 <HAL_DMA_PollForTransfer+0x730>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d027      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a28      	ldr	r2, [pc, #160]	@ (8011944 <HAL_DMA_PollForTransfer+0x734>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d022      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a26      	ldr	r2, [pc, #152]	@ (8011948 <HAL_DMA_PollForTransfer+0x738>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d01d      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a25      	ldr	r2, [pc, #148]	@ (801194c <HAL_DMA_PollForTransfer+0x73c>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d018      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4a23      	ldr	r2, [pc, #140]	@ (8011950 <HAL_DMA_PollForTransfer+0x740>)
 80118c2:	4293      	cmp	r3, r2
 80118c4:	d013      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4a22      	ldr	r2, [pc, #136]	@ (8011954 <HAL_DMA_PollForTransfer+0x744>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d00e      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a20      	ldr	r2, [pc, #128]	@ (8011958 <HAL_DMA_PollForTransfer+0x748>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d009      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	4a1f      	ldr	r2, [pc, #124]	@ (801195c <HAL_DMA_PollForTransfer+0x74c>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d004      	beq.n	80118ee <HAL_DMA_PollForTransfer+0x6de>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011960 <HAL_DMA_PollForTransfer+0x750>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d101      	bne.n	80118f2 <HAL_DMA_PollForTransfer+0x6e2>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e000      	b.n	80118f4 <HAL_DMA_PollForTransfer+0x6e4>
 80118f2:	2300      	movs	r3, #0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d008      	beq.n	801190a <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118fc:	f003 031f 	and.w	r3, r3, #31
 8011900:	2210      	movs	r2, #16
 8011902:	409a      	lsls	r2, r3
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	601a      	str	r2, [r3, #0]
 8011908:	e007      	b.n	801191a <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801190e:	f003 031f 	and.w	r3, r3, #31
 8011912:	2204      	movs	r2, #4
 8011914:	409a      	lsls	r2, r3
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801191a:	7efb      	ldrb	r3, [r7, #27]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3728      	adds	r7, #40	@ 0x28
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	40020010 	.word	0x40020010
 8011928:	40020028 	.word	0x40020028
 801192c:	40020040 	.word	0x40020040
 8011930:	40020058 	.word	0x40020058
 8011934:	40020070 	.word	0x40020070
 8011938:	40020088 	.word	0x40020088
 801193c:	400200a0 	.word	0x400200a0
 8011940:	400200b8 	.word	0x400200b8
 8011944:	40020410 	.word	0x40020410
 8011948:	40020428 	.word	0x40020428
 801194c:	40020440 	.word	0x40020440
 8011950:	40020458 	.word	0x40020458
 8011954:	40020470 	.word	0x40020470
 8011958:	40020488 	.word	0x40020488
 801195c:	400204a0 	.word	0x400204a0
 8011960:	400204b8 	.word	0x400204b8

08011964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011964:	b480      	push	{r7}
 8011966:	b087      	sub	sp, #28
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
 8011970:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011976:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801197c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	4a7f      	ldr	r2, [pc, #508]	@ (8011b80 <DMA_SetConfig+0x21c>)
 8011984:	4293      	cmp	r3, r2
 8011986:	d072      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	4a7d      	ldr	r2, [pc, #500]	@ (8011b84 <DMA_SetConfig+0x220>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d06d      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a7c      	ldr	r2, [pc, #496]	@ (8011b88 <DMA_SetConfig+0x224>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d068      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a7a      	ldr	r2, [pc, #488]	@ (8011b8c <DMA_SetConfig+0x228>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d063      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a79      	ldr	r2, [pc, #484]	@ (8011b90 <DMA_SetConfig+0x22c>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d05e      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a77      	ldr	r2, [pc, #476]	@ (8011b94 <DMA_SetConfig+0x230>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d059      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a76      	ldr	r2, [pc, #472]	@ (8011b98 <DMA_SetConfig+0x234>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d054      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a74      	ldr	r2, [pc, #464]	@ (8011b9c <DMA_SetConfig+0x238>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d04f      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a73      	ldr	r2, [pc, #460]	@ (8011ba0 <DMA_SetConfig+0x23c>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d04a      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4a71      	ldr	r2, [pc, #452]	@ (8011ba4 <DMA_SetConfig+0x240>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d045      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a70      	ldr	r2, [pc, #448]	@ (8011ba8 <DMA_SetConfig+0x244>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d040      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4a6e      	ldr	r2, [pc, #440]	@ (8011bac <DMA_SetConfig+0x248>)
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d03b      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a6d      	ldr	r2, [pc, #436]	@ (8011bb0 <DMA_SetConfig+0x24c>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d036      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4a6b      	ldr	r2, [pc, #428]	@ (8011bb4 <DMA_SetConfig+0x250>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d031      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8011bb8 <DMA_SetConfig+0x254>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d02c      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4a68      	ldr	r2, [pc, #416]	@ (8011bbc <DMA_SetConfig+0x258>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d027      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	4a67      	ldr	r2, [pc, #412]	@ (8011bc0 <DMA_SetConfig+0x25c>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d022      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4a65      	ldr	r2, [pc, #404]	@ (8011bc4 <DMA_SetConfig+0x260>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d01d      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4a64      	ldr	r2, [pc, #400]	@ (8011bc8 <DMA_SetConfig+0x264>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d018      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4a62      	ldr	r2, [pc, #392]	@ (8011bcc <DMA_SetConfig+0x268>)
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d013      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a61      	ldr	r2, [pc, #388]	@ (8011bd0 <DMA_SetConfig+0x26c>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d00e      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a5f      	ldr	r2, [pc, #380]	@ (8011bd4 <DMA_SetConfig+0x270>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d009      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8011bd8 <DMA_SetConfig+0x274>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d004      	beq.n	8011a6e <DMA_SetConfig+0x10a>
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a5c      	ldr	r2, [pc, #368]	@ (8011bdc <DMA_SetConfig+0x278>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d101      	bne.n	8011a72 <DMA_SetConfig+0x10e>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e000      	b.n	8011a74 <DMA_SetConfig+0x110>
 8011a72:	2300      	movs	r3, #0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00d      	beq.n	8011a94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8011a80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d004      	beq.n	8011a94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8011a92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4a39      	ldr	r2, [pc, #228]	@ (8011b80 <DMA_SetConfig+0x21c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d04a      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4a38      	ldr	r2, [pc, #224]	@ (8011b84 <DMA_SetConfig+0x220>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d045      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a36      	ldr	r2, [pc, #216]	@ (8011b88 <DMA_SetConfig+0x224>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d040      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4a35      	ldr	r2, [pc, #212]	@ (8011b8c <DMA_SetConfig+0x228>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d03b      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4a33      	ldr	r2, [pc, #204]	@ (8011b90 <DMA_SetConfig+0x22c>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d036      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a32      	ldr	r2, [pc, #200]	@ (8011b94 <DMA_SetConfig+0x230>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d031      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a30      	ldr	r2, [pc, #192]	@ (8011b98 <DMA_SetConfig+0x234>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d02c      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	4a2f      	ldr	r2, [pc, #188]	@ (8011b9c <DMA_SetConfig+0x238>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d027      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8011ba0 <DMA_SetConfig+0x23c>)
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d022      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	4a2c      	ldr	r2, [pc, #176]	@ (8011ba4 <DMA_SetConfig+0x240>)
 8011af4:	4293      	cmp	r3, r2
 8011af6:	d01d      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4a2a      	ldr	r2, [pc, #168]	@ (8011ba8 <DMA_SetConfig+0x244>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d018      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4a29      	ldr	r2, [pc, #164]	@ (8011bac <DMA_SetConfig+0x248>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d013      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a27      	ldr	r2, [pc, #156]	@ (8011bb0 <DMA_SetConfig+0x24c>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d00e      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a26      	ldr	r2, [pc, #152]	@ (8011bb4 <DMA_SetConfig+0x250>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d009      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4a24      	ldr	r2, [pc, #144]	@ (8011bb8 <DMA_SetConfig+0x254>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d004      	beq.n	8011b34 <DMA_SetConfig+0x1d0>
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a23      	ldr	r2, [pc, #140]	@ (8011bbc <DMA_SetConfig+0x258>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d101      	bne.n	8011b38 <DMA_SetConfig+0x1d4>
 8011b34:	2301      	movs	r3, #1
 8011b36:	e000      	b.n	8011b3a <DMA_SetConfig+0x1d6>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d059      	beq.n	8011bf2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b42:	f003 031f 	and.w	r3, r3, #31
 8011b46:	223f      	movs	r2, #63	@ 0x3f
 8011b48:	409a      	lsls	r2, r3
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8011b5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	683a      	ldr	r2, [r7, #0]
 8011b64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	689b      	ldr	r3, [r3, #8]
 8011b6a:	2b40      	cmp	r3, #64	@ 0x40
 8011b6c:	d138      	bne.n	8011be0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8011b7e:	e086      	b.n	8011c8e <DMA_SetConfig+0x32a>
 8011b80:	40020010 	.word	0x40020010
 8011b84:	40020028 	.word	0x40020028
 8011b88:	40020040 	.word	0x40020040
 8011b8c:	40020058 	.word	0x40020058
 8011b90:	40020070 	.word	0x40020070
 8011b94:	40020088 	.word	0x40020088
 8011b98:	400200a0 	.word	0x400200a0
 8011b9c:	400200b8 	.word	0x400200b8
 8011ba0:	40020410 	.word	0x40020410
 8011ba4:	40020428 	.word	0x40020428
 8011ba8:	40020440 	.word	0x40020440
 8011bac:	40020458 	.word	0x40020458
 8011bb0:	40020470 	.word	0x40020470
 8011bb4:	40020488 	.word	0x40020488
 8011bb8:	400204a0 	.word	0x400204a0
 8011bbc:	400204b8 	.word	0x400204b8
 8011bc0:	58025408 	.word	0x58025408
 8011bc4:	5802541c 	.word	0x5802541c
 8011bc8:	58025430 	.word	0x58025430
 8011bcc:	58025444 	.word	0x58025444
 8011bd0:	58025458 	.word	0x58025458
 8011bd4:	5802546c 	.word	0x5802546c
 8011bd8:	58025480 	.word	0x58025480
 8011bdc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	60da      	str	r2, [r3, #12]
}
 8011bf0:	e04d      	b.n	8011c8e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4a29      	ldr	r2, [pc, #164]	@ (8011c9c <DMA_SetConfig+0x338>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d022      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4a27      	ldr	r2, [pc, #156]	@ (8011ca0 <DMA_SetConfig+0x33c>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d01d      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	4a26      	ldr	r2, [pc, #152]	@ (8011ca4 <DMA_SetConfig+0x340>)
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	d018      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a24      	ldr	r2, [pc, #144]	@ (8011ca8 <DMA_SetConfig+0x344>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d013      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a23      	ldr	r2, [pc, #140]	@ (8011cac <DMA_SetConfig+0x348>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d00e      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4a21      	ldr	r2, [pc, #132]	@ (8011cb0 <DMA_SetConfig+0x34c>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d009      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4a20      	ldr	r2, [pc, #128]	@ (8011cb4 <DMA_SetConfig+0x350>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d004      	beq.n	8011c42 <DMA_SetConfig+0x2de>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8011cb8 <DMA_SetConfig+0x354>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d101      	bne.n	8011c46 <DMA_SetConfig+0x2e2>
 8011c42:	2301      	movs	r3, #1
 8011c44:	e000      	b.n	8011c48 <DMA_SetConfig+0x2e4>
 8011c46:	2300      	movs	r3, #0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d020      	beq.n	8011c8e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c50:	f003 031f 	and.w	r3, r3, #31
 8011c54:	2201      	movs	r2, #1
 8011c56:	409a      	lsls	r2, r3
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	689b      	ldr	r3, [r3, #8]
 8011c68:	2b40      	cmp	r3, #64	@ 0x40
 8011c6a:	d108      	bne.n	8011c7e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	60da      	str	r2, [r3, #12]
}
 8011c7c:	e007      	b.n	8011c8e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68ba      	ldr	r2, [r7, #8]
 8011c84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	60da      	str	r2, [r3, #12]
}
 8011c8e:	bf00      	nop
 8011c90:	371c      	adds	r7, #28
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	58025408 	.word	0x58025408
 8011ca0:	5802541c 	.word	0x5802541c
 8011ca4:	58025430 	.word	0x58025430
 8011ca8:	58025444 	.word	0x58025444
 8011cac:	58025458 	.word	0x58025458
 8011cb0:	5802546c 	.word	0x5802546c
 8011cb4:	58025480 	.word	0x58025480
 8011cb8:	58025494 	.word	0x58025494

08011cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4a42      	ldr	r2, [pc, #264]	@ (8011dd4 <DMA_CalcBaseAndBitshift+0x118>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	d04a      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4a41      	ldr	r2, [pc, #260]	@ (8011dd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d045      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8011ddc <DMA_CalcBaseAndBitshift+0x120>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d040      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8011de0 <DMA_CalcBaseAndBitshift+0x124>)
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d03b      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8011de4 <DMA_CalcBaseAndBitshift+0x128>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d036      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8011de8 <DMA_CalcBaseAndBitshift+0x12c>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d031      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a39      	ldr	r2, [pc, #228]	@ (8011dec <DMA_CalcBaseAndBitshift+0x130>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d02c      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4a38      	ldr	r2, [pc, #224]	@ (8011df0 <DMA_CalcBaseAndBitshift+0x134>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d027      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4a36      	ldr	r2, [pc, #216]	@ (8011df4 <DMA_CalcBaseAndBitshift+0x138>)
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	d022      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	4a35      	ldr	r2, [pc, #212]	@ (8011df8 <DMA_CalcBaseAndBitshift+0x13c>)
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d01d      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a33      	ldr	r2, [pc, #204]	@ (8011dfc <DMA_CalcBaseAndBitshift+0x140>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d018      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a32      	ldr	r2, [pc, #200]	@ (8011e00 <DMA_CalcBaseAndBitshift+0x144>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d013      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4a30      	ldr	r2, [pc, #192]	@ (8011e04 <DMA_CalcBaseAndBitshift+0x148>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d00e      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8011e08 <DMA_CalcBaseAndBitshift+0x14c>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d009      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a2d      	ldr	r2, [pc, #180]	@ (8011e0c <DMA_CalcBaseAndBitshift+0x150>)
 8011d56:	4293      	cmp	r3, r2
 8011d58:	d004      	beq.n	8011d64 <DMA_CalcBaseAndBitshift+0xa8>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8011e10 <DMA_CalcBaseAndBitshift+0x154>)
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d101      	bne.n	8011d68 <DMA_CalcBaseAndBitshift+0xac>
 8011d64:	2301      	movs	r3, #1
 8011d66:	e000      	b.n	8011d6a <DMA_CalcBaseAndBitshift+0xae>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d024      	beq.n	8011db8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	3b10      	subs	r3, #16
 8011d76:	4a27      	ldr	r2, [pc, #156]	@ (8011e14 <DMA_CalcBaseAndBitshift+0x158>)
 8011d78:	fba2 2303 	umull	r2, r3, r2, r3
 8011d7c:	091b      	lsrs	r3, r3, #4
 8011d7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f003 0307 	and.w	r3, r3, #7
 8011d86:	4a24      	ldr	r2, [pc, #144]	@ (8011e18 <DMA_CalcBaseAndBitshift+0x15c>)
 8011d88:	5cd3      	ldrb	r3, [r2, r3]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2b03      	cmp	r3, #3
 8011d94:	d908      	bls.n	8011da8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8011e1c <DMA_CalcBaseAndBitshift+0x160>)
 8011d9e:	4013      	ands	r3, r2
 8011da0:	1d1a      	adds	r2, r3, #4
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8011da6:	e00d      	b.n	8011dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	4b1b      	ldr	r3, [pc, #108]	@ (8011e1c <DMA_CalcBaseAndBitshift+0x160>)
 8011db0:	4013      	ands	r3, r2
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8011db6:	e005      	b.n	8011dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3714      	adds	r7, #20
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	40020010 	.word	0x40020010
 8011dd8:	40020028 	.word	0x40020028
 8011ddc:	40020040 	.word	0x40020040
 8011de0:	40020058 	.word	0x40020058
 8011de4:	40020070 	.word	0x40020070
 8011de8:	40020088 	.word	0x40020088
 8011dec:	400200a0 	.word	0x400200a0
 8011df0:	400200b8 	.word	0x400200b8
 8011df4:	40020410 	.word	0x40020410
 8011df8:	40020428 	.word	0x40020428
 8011dfc:	40020440 	.word	0x40020440
 8011e00:	40020458 	.word	0x40020458
 8011e04:	40020470 	.word	0x40020470
 8011e08:	40020488 	.word	0x40020488
 8011e0c:	400204a0 	.word	0x400204a0
 8011e10:	400204b8 	.word	0x400204b8
 8011e14:	aaaaaaab 	.word	0xaaaaaaab
 8011e18:	0801eb5c 	.word	0x0801eb5c
 8011e1c:	fffffc00 	.word	0xfffffc00

08011e20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d120      	bne.n	8011e76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d858      	bhi.n	8011eee <DMA_CheckFifoParam+0xce>
 8011e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8011e44 <DMA_CheckFifoParam+0x24>)
 8011e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e42:	bf00      	nop
 8011e44:	08011e55 	.word	0x08011e55
 8011e48:	08011e67 	.word	0x08011e67
 8011e4c:	08011e55 	.word	0x08011e55
 8011e50:	08011eef 	.word	0x08011eef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d048      	beq.n	8011ef2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8011e60:	2301      	movs	r3, #1
 8011e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011e64:	e045      	b.n	8011ef2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8011e6e:	d142      	bne.n	8011ef6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011e74:	e03f      	b.n	8011ef6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	699b      	ldr	r3, [r3, #24]
 8011e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e7e:	d123      	bne.n	8011ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e84:	2b03      	cmp	r3, #3
 8011e86:	d838      	bhi.n	8011efa <DMA_CheckFifoParam+0xda>
 8011e88:	a201      	add	r2, pc, #4	@ (adr r2, 8011e90 <DMA_CheckFifoParam+0x70>)
 8011e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e8e:	bf00      	nop
 8011e90:	08011ea1 	.word	0x08011ea1
 8011e94:	08011ea7 	.word	0x08011ea7
 8011e98:	08011ea1 	.word	0x08011ea1
 8011e9c:	08011eb9 	.word	0x08011eb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8011ea4:	e030      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d025      	beq.n	8011efe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011eb6:	e022      	b.n	8011efe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8011ec0:	d11f      	bne.n	8011f02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011ec6:	e01c      	b.n	8011f02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d902      	bls.n	8011ed6 <DMA_CheckFifoParam+0xb6>
 8011ed0:	2b03      	cmp	r3, #3
 8011ed2:	d003      	beq.n	8011edc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8011ed4:	e018      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8011eda:	e015      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00e      	beq.n	8011f06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	73fb      	strb	r3, [r7, #15]
    break;
 8011eec:	e00b      	b.n	8011f06 <DMA_CheckFifoParam+0xe6>
        break;
 8011eee:	bf00      	nop
 8011ef0:	e00a      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        break;
 8011ef2:	bf00      	nop
 8011ef4:	e008      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        break;
 8011ef6:	bf00      	nop
 8011ef8:	e006      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        break;
 8011efa:	bf00      	nop
 8011efc:	e004      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        break;
 8011efe:	bf00      	nop
 8011f00:	e002      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
        break;
 8011f02:	bf00      	nop
 8011f04:	e000      	b.n	8011f08 <DMA_CheckFifoParam+0xe8>
    break;
 8011f06:	bf00      	nop
    }
  }

  return status;
 8011f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3714      	adds	r7, #20
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop

08011f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a38      	ldr	r2, [pc, #224]	@ (801200c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d022      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a36      	ldr	r2, [pc, #216]	@ (8012010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d01d      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a35      	ldr	r2, [pc, #212]	@ (8012014 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d018      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a33      	ldr	r2, [pc, #204]	@ (8012018 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d013      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	4a32      	ldr	r2, [pc, #200]	@ (801201c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d00e      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4a30      	ldr	r2, [pc, #192]	@ (8012020 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	d009      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a2f      	ldr	r2, [pc, #188]	@ (8012024 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d004      	beq.n	8011f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	4a2d      	ldr	r2, [pc, #180]	@ (8012028 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8011f72:	4293      	cmp	r3, r2
 8011f74:	d101      	bne.n	8011f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8011f76:	2301      	movs	r3, #1
 8011f78:	e000      	b.n	8011f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d01a      	beq.n	8011fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	3b08      	subs	r3, #8
 8011f88:	4a28      	ldr	r2, [pc, #160]	@ (801202c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8011f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f8e:	091b      	lsrs	r3, r3, #4
 8011f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	4b26      	ldr	r3, [pc, #152]	@ (8012030 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8011f96:	4413      	add	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	4a24      	ldr	r2, [pc, #144]	@ (8012034 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8011fa4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f003 031f 	and.w	r3, r3, #31
 8011fac:	2201      	movs	r2, #1
 8011fae:	409a      	lsls	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8011fb4:	e024      	b.n	8012000 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	3b10      	subs	r3, #16
 8011fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8012038 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8011fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8011fc4:	091b      	lsrs	r3, r3, #4
 8011fc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	4a1c      	ldr	r2, [pc, #112]	@ (801203c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d806      	bhi.n	8011fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8012040 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d902      	bls.n	8011fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	3308      	adds	r3, #8
 8011fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	4b18      	ldr	r3, [pc, #96]	@ (8012044 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8011fe2:	4413      	add	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	4a16      	ldr	r2, [pc, #88]	@ (8012048 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8011ff0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f003 031f 	and.w	r3, r3, #31
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	409a      	lsls	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012000:	bf00      	nop
 8012002:	3714      	adds	r7, #20
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	58025408 	.word	0x58025408
 8012010:	5802541c 	.word	0x5802541c
 8012014:	58025430 	.word	0x58025430
 8012018:	58025444 	.word	0x58025444
 801201c:	58025458 	.word	0x58025458
 8012020:	5802546c 	.word	0x5802546c
 8012024:	58025480 	.word	0x58025480
 8012028:	58025494 	.word	0x58025494
 801202c:	cccccccd 	.word	0xcccccccd
 8012030:	16009600 	.word	0x16009600
 8012034:	58025880 	.word	0x58025880
 8012038:	aaaaaaab 	.word	0xaaaaaaab
 801203c:	400204b8 	.word	0x400204b8
 8012040:	4002040f 	.word	0x4002040f
 8012044:	10008200 	.word	0x10008200
 8012048:	40020880 	.word	0x40020880

0801204c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	b2db      	uxtb	r3, r3
 801205a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d04a      	beq.n	80120f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2b08      	cmp	r3, #8
 8012066:	d847      	bhi.n	80120f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a25      	ldr	r2, [pc, #148]	@ (8012104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801206e:	4293      	cmp	r3, r2
 8012070:	d022      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	4a24      	ldr	r2, [pc, #144]	@ (8012108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8012078:	4293      	cmp	r3, r2
 801207a:	d01d      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a22      	ldr	r2, [pc, #136]	@ (801210c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8012082:	4293      	cmp	r3, r2
 8012084:	d018      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4a21      	ldr	r2, [pc, #132]	@ (8012110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801208c:	4293      	cmp	r3, r2
 801208e:	d013      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4a1f      	ldr	r2, [pc, #124]	@ (8012114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8012096:	4293      	cmp	r3, r2
 8012098:	d00e      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4a1e      	ldr	r2, [pc, #120]	@ (8012118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80120a0:	4293      	cmp	r3, r2
 80120a2:	d009      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	4a1c      	ldr	r2, [pc, #112]	@ (801211c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d004      	beq.n	80120b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	4a1b      	ldr	r2, [pc, #108]	@ (8012120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d101      	bne.n	80120bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e000      	b.n	80120be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80120bc:	2300      	movs	r3, #0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00a      	beq.n	80120d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80120c2:	68fa      	ldr	r2, [r7, #12]
 80120c4:	4b17      	ldr	r3, [pc, #92]	@ (8012124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80120c6:	4413      	add	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	461a      	mov	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4a15      	ldr	r2, [pc, #84]	@ (8012128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80120d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80120d6:	e009      	b.n	80120ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	4b14      	ldr	r3, [pc, #80]	@ (801212c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80120dc:	4413      	add	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	461a      	mov	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	4a11      	ldr	r2, [pc, #68]	@ (8012130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80120ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3b01      	subs	r3, #1
 80120f0:	2201      	movs	r2, #1
 80120f2:	409a      	lsls	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80120f8:	bf00      	nop
 80120fa:	3714      	adds	r7, #20
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	58025408 	.word	0x58025408
 8012108:	5802541c 	.word	0x5802541c
 801210c:	58025430 	.word	0x58025430
 8012110:	58025444 	.word	0x58025444
 8012114:	58025458 	.word	0x58025458
 8012118:	5802546c 	.word	0x5802546c
 801211c:	58025480 	.word	0x58025480
 8012120:	58025494 	.word	0x58025494
 8012124:	1600963f 	.word	0x1600963f
 8012128:	58025940 	.word	0x58025940
 801212c:	1000823f 	.word	0x1000823f
 8012130:	40020940 	.word	0x40020940

08012134 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
 8012140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012142:	2300      	movs	r3, #0
 8012144:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	689b      	ldr	r3, [r3, #8]
 801214a:	2b80      	cmp	r3, #128	@ 0x80
 801214c:	d105      	bne.n	801215a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012154:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8012156:	2301      	movs	r3, #1
 8012158:	e315      	b.n	8012786 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012160:	2b01      	cmp	r3, #1
 8012162:	d101      	bne.n	8012168 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8012164:	2302      	movs	r3, #2
 8012166:	e30e      	b.n	8012786 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b01      	cmp	r3, #1
 801217a:	f040 82fd 	bne.w	8012778 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2202      	movs	r2, #2
 8012182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2200      	movs	r2, #0
 801218a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a82      	ldr	r2, [pc, #520]	@ (801239c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d04a      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a81      	ldr	r2, [pc, #516]	@ (80123a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d045      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a7f      	ldr	r2, [pc, #508]	@ (80123a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d040      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4a7e      	ldr	r2, [pc, #504]	@ (80123a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d03b      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	4a7c      	ldr	r2, [pc, #496]	@ (80123ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d036      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	4a7b      	ldr	r2, [pc, #492]	@ (80123b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80121c4:	4293      	cmp	r3, r2
 80121c6:	d031      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4a79      	ldr	r2, [pc, #484]	@ (80123b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d02c      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	4a78      	ldr	r2, [pc, #480]	@ (80123b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80121d8:	4293      	cmp	r3, r2
 80121da:	d027      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4a76      	ldr	r2, [pc, #472]	@ (80123bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d022      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4a75      	ldr	r2, [pc, #468]	@ (80123c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d01d      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4a73      	ldr	r2, [pc, #460]	@ (80123c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d018      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4a72      	ldr	r2, [pc, #456]	@ (80123c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d013      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4a70      	ldr	r2, [pc, #448]	@ (80123cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801220a:	4293      	cmp	r3, r2
 801220c:	d00e      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4a6f      	ldr	r2, [pc, #444]	@ (80123d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8012214:	4293      	cmp	r3, r2
 8012216:	d009      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4a6d      	ldr	r2, [pc, #436]	@ (80123d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801221e:	4293      	cmp	r3, r2
 8012220:	d004      	beq.n	801222c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a6c      	ldr	r2, [pc, #432]	@ (80123d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d101      	bne.n	8012230 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801222c:	2301      	movs	r3, #1
 801222e:	e000      	b.n	8012232 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8012230:	2300      	movs	r3, #0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d018      	beq.n	8012268 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8012244:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	683a      	ldr	r2, [r7, #0]
 801224c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012252:	3308      	adds	r3, #8
 8012254:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801225a:	f003 031f 	and.w	r3, r3, #31
 801225e:	223f      	movs	r2, #63	@ 0x3f
 8012260:	409a      	lsls	r2, r3
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	601a      	str	r2, [r3, #0]
 8012266:	e018      	b.n	801229a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	6819      	ldr	r1, [r3, #0]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	f248 0320 	movw	r3, #32800	@ 0x8020
 8012276:	430b      	orrs	r3, r1
 8012278:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	683a      	ldr	r2, [r7, #0]
 8012280:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012286:	3304      	adds	r3, #4
 8012288:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801228e:	f003 031f 	and.w	r3, r3, #31
 8012292:	2201      	movs	r2, #1
 8012294:	409a      	lsls	r2, r3
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801229a:	6a3b      	ldr	r3, [r7, #32]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	68b9      	ldr	r1, [r7, #8]
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f000 faa5 	bl	80127f0 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4a3c      	ldr	r2, [pc, #240]	@ (801239c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d072      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a3a      	ldr	r2, [pc, #232]	@ (80123a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d06d      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4a39      	ldr	r2, [pc, #228]	@ (80123a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d068      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4a37      	ldr	r2, [pc, #220]	@ (80123a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d063      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4a36      	ldr	r2, [pc, #216]	@ (80123ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d05e      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a34      	ldr	r2, [pc, #208]	@ (80123b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d059      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a33      	ldr	r2, [pc, #204]	@ (80123b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d054      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a31      	ldr	r2, [pc, #196]	@ (80123b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d04f      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	4a30      	ldr	r2, [pc, #192]	@ (80123bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80122fc:	4293      	cmp	r3, r2
 80122fe:	d04a      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a2e      	ldr	r2, [pc, #184]	@ (80123c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d045      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a2d      	ldr	r2, [pc, #180]	@ (80123c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d040      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4a2b      	ldr	r2, [pc, #172]	@ (80123c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801231a:	4293      	cmp	r3, r2
 801231c:	d03b      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a2a      	ldr	r2, [pc, #168]	@ (80123cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8012324:	4293      	cmp	r3, r2
 8012326:	d036      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a28      	ldr	r2, [pc, #160]	@ (80123d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d031      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	4a27      	ldr	r2, [pc, #156]	@ (80123d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d02c      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a25      	ldr	r2, [pc, #148]	@ (80123d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d027      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4a24      	ldr	r2, [pc, #144]	@ (80123dc <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801234c:	4293      	cmp	r3, r2
 801234e:	d022      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a22      	ldr	r2, [pc, #136]	@ (80123e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8012356:	4293      	cmp	r3, r2
 8012358:	d01d      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a21      	ldr	r2, [pc, #132]	@ (80123e4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d018      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4a1f      	ldr	r2, [pc, #124]	@ (80123e8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d013      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	4a1e      	ldr	r2, [pc, #120]	@ (80123ec <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8012374:	4293      	cmp	r3, r2
 8012376:	d00e      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a1c      	ldr	r2, [pc, #112]	@ (80123f0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d009      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a1b      	ldr	r2, [pc, #108]	@ (80123f4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d004      	beq.n	8012396 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a19      	ldr	r2, [pc, #100]	@ (80123f8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d132      	bne.n	80123fc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8012396:	2301      	movs	r3, #1
 8012398:	e031      	b.n	80123fe <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801239a:	bf00      	nop
 801239c:	40020010 	.word	0x40020010
 80123a0:	40020028 	.word	0x40020028
 80123a4:	40020040 	.word	0x40020040
 80123a8:	40020058 	.word	0x40020058
 80123ac:	40020070 	.word	0x40020070
 80123b0:	40020088 	.word	0x40020088
 80123b4:	400200a0 	.word	0x400200a0
 80123b8:	400200b8 	.word	0x400200b8
 80123bc:	40020410 	.word	0x40020410
 80123c0:	40020428 	.word	0x40020428
 80123c4:	40020440 	.word	0x40020440
 80123c8:	40020458 	.word	0x40020458
 80123cc:	40020470 	.word	0x40020470
 80123d0:	40020488 	.word	0x40020488
 80123d4:	400204a0 	.word	0x400204a0
 80123d8:	400204b8 	.word	0x400204b8
 80123dc:	58025408 	.word	0x58025408
 80123e0:	5802541c 	.word	0x5802541c
 80123e4:	58025430 	.word	0x58025430
 80123e8:	58025444 	.word	0x58025444
 80123ec:	58025458 	.word	0x58025458
 80123f0:	5802546c 	.word	0x5802546c
 80123f4:	58025480 	.word	0x58025480
 80123f8:	58025494 	.word	0x58025494
 80123fc:	2300      	movs	r3, #0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00d      	beq.n	801241e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801240a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012410:	2b00      	cmp	r3, #0
 8012412:	d004      	beq.n	801241e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012418:	68fa      	ldr	r2, [r7, #12]
 801241a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801241c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4a3b      	ldr	r2, [pc, #236]	@ (8012510 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8012424:	4293      	cmp	r3, r2
 8012426:	d04a      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	4a39      	ldr	r2, [pc, #228]	@ (8012514 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801242e:	4293      	cmp	r3, r2
 8012430:	d045      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	4a38      	ldr	r2, [pc, #224]	@ (8012518 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d040      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4a36      	ldr	r2, [pc, #216]	@ (801251c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8012442:	4293      	cmp	r3, r2
 8012444:	d03b      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a35      	ldr	r2, [pc, #212]	@ (8012520 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d036      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	4a33      	ldr	r2, [pc, #204]	@ (8012524 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d031      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4a32      	ldr	r2, [pc, #200]	@ (8012528 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d02c      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	4a30      	ldr	r2, [pc, #192]	@ (801252c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d027      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	4a2f      	ldr	r2, [pc, #188]	@ (8012530 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d022      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a2d      	ldr	r2, [pc, #180]	@ (8012534 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d01d      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4a2c      	ldr	r2, [pc, #176]	@ (8012538 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8012488:	4293      	cmp	r3, r2
 801248a:	d018      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a2a      	ldr	r2, [pc, #168]	@ (801253c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d013      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4a29      	ldr	r2, [pc, #164]	@ (8012540 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d00e      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a27      	ldr	r2, [pc, #156]	@ (8012544 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d009      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	4a26      	ldr	r2, [pc, #152]	@ (8012548 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d004      	beq.n	80124be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a24      	ldr	r2, [pc, #144]	@ (801254c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d101      	bne.n	80124c2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80124be:	2301      	movs	r3, #1
 80124c0:	e000      	b.n	80124c4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80124c2:	2300      	movs	r3, #0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d043      	beq.n	8012550 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f023 021e 	bic.w	r2, r3, #30
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f042 0216 	orr.w	r2, r2, #22
 80124da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	695a      	ldr	r2, [r3, #20]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80124ea:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d103      	bne.n	80124fc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d043      	beq.n	8012584 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	f042 0208 	orr.w	r2, r2, #8
 801250a:	601a      	str	r2, [r3, #0]
 801250c:	e03a      	b.n	8012584 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801250e:	bf00      	nop
 8012510:	40020010 	.word	0x40020010
 8012514:	40020028 	.word	0x40020028
 8012518:	40020040 	.word	0x40020040
 801251c:	40020058 	.word	0x40020058
 8012520:	40020070 	.word	0x40020070
 8012524:	40020088 	.word	0x40020088
 8012528:	400200a0 	.word	0x400200a0
 801252c:	400200b8 	.word	0x400200b8
 8012530:	40020410 	.word	0x40020410
 8012534:	40020428 	.word	0x40020428
 8012538:	40020440 	.word	0x40020440
 801253c:	40020458 	.word	0x40020458
 8012540:	40020470 	.word	0x40020470
 8012544:	40020488 	.word	0x40020488
 8012548:	400204a0 	.word	0x400204a0
 801254c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f023 020e 	bic.w	r2, r3, #14
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f042 020a 	orr.w	r2, r2, #10
 8012562:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012568:	2b00      	cmp	r3, #0
 801256a:	d103      	bne.n	8012574 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012570:	2b00      	cmp	r3, #0
 8012572:	d007      	beq.n	8012584 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f042 0204 	orr.w	r2, r2, #4
 8012582:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a81      	ldr	r2, [pc, #516]	@ (8012790 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d072      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	4a80      	ldr	r2, [pc, #512]	@ (8012794 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d06d      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	4a7e      	ldr	r2, [pc, #504]	@ (8012798 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d068      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	4a7d      	ldr	r2, [pc, #500]	@ (801279c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d063      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	4a7b      	ldr	r2, [pc, #492]	@ (80127a0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d05e      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4a7a      	ldr	r2, [pc, #488]	@ (80127a4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d059      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4a78      	ldr	r2, [pc, #480]	@ (80127a8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d054      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4a77      	ldr	r2, [pc, #476]	@ (80127ac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d04f      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a75      	ldr	r2, [pc, #468]	@ (80127b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d04a      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4a74      	ldr	r2, [pc, #464]	@ (80127b4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d045      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4a72      	ldr	r2, [pc, #456]	@ (80127b8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d040      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	4a71      	ldr	r2, [pc, #452]	@ (80127bc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d03b      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a6f      	ldr	r2, [pc, #444]	@ (80127c0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d036      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a6e      	ldr	r2, [pc, #440]	@ (80127c4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d031      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a6c      	ldr	r2, [pc, #432]	@ (80127c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d02c      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a6b      	ldr	r2, [pc, #428]	@ (80127cc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d027      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4a69      	ldr	r2, [pc, #420]	@ (80127d0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d022      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4a68      	ldr	r2, [pc, #416]	@ (80127d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8012634:	4293      	cmp	r3, r2
 8012636:	d01d      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	4a66      	ldr	r2, [pc, #408]	@ (80127d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d018      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a65      	ldr	r2, [pc, #404]	@ (80127dc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d013      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a63      	ldr	r2, [pc, #396]	@ (80127e0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d00e      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4a62      	ldr	r2, [pc, #392]	@ (80127e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d009      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a60      	ldr	r2, [pc, #384]	@ (80127e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d004      	beq.n	8012674 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4a5f      	ldr	r2, [pc, #380]	@ (80127ec <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d101      	bne.n	8012678 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8012674:	2301      	movs	r3, #1
 8012676:	e000      	b.n	801267a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8012678:	2300      	movs	r3, #0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d01a      	beq.n	80126b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d007      	beq.n	801269c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801269a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d007      	beq.n	80126b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80126b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	4a35      	ldr	r2, [pc, #212]	@ (8012790 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d04a      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	4a34      	ldr	r2, [pc, #208]	@ (8012794 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d045      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a32      	ldr	r2, [pc, #200]	@ (8012798 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d040      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	4a31      	ldr	r2, [pc, #196]	@ (801279c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80126d8:	4293      	cmp	r3, r2
 80126da:	d03b      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a2f      	ldr	r2, [pc, #188]	@ (80127a0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d036      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	4a2e      	ldr	r2, [pc, #184]	@ (80127a4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d031      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4a2c      	ldr	r2, [pc, #176]	@ (80127a8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d02c      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a2b      	ldr	r2, [pc, #172]	@ (80127ac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8012700:	4293      	cmp	r3, r2
 8012702:	d027      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4a29      	ldr	r2, [pc, #164]	@ (80127b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d022      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a28      	ldr	r2, [pc, #160]	@ (80127b4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d01d      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a26      	ldr	r2, [pc, #152]	@ (80127b8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d018      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a25      	ldr	r2, [pc, #148]	@ (80127bc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d013      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a23      	ldr	r2, [pc, #140]	@ (80127c0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d00e      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a22      	ldr	r2, [pc, #136]	@ (80127c4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d009      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a20      	ldr	r2, [pc, #128]	@ (80127c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d004      	beq.n	8012754 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a1f      	ldr	r2, [pc, #124]	@ (80127cc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d108      	bne.n	8012766 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f042 0201 	orr.w	r2, r2, #1
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	e00e      	b.n	8012784 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f042 0201 	orr.w	r2, r2, #1
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	e005      	b.n	8012784 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801277e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8012780:	2301      	movs	r3, #1
 8012782:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8012784:	7dfb      	ldrb	r3, [r7, #23]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3718      	adds	r7, #24
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	40020010 	.word	0x40020010
 8012794:	40020028 	.word	0x40020028
 8012798:	40020040 	.word	0x40020040
 801279c:	40020058 	.word	0x40020058
 80127a0:	40020070 	.word	0x40020070
 80127a4:	40020088 	.word	0x40020088
 80127a8:	400200a0 	.word	0x400200a0
 80127ac:	400200b8 	.word	0x400200b8
 80127b0:	40020410 	.word	0x40020410
 80127b4:	40020428 	.word	0x40020428
 80127b8:	40020440 	.word	0x40020440
 80127bc:	40020458 	.word	0x40020458
 80127c0:	40020470 	.word	0x40020470
 80127c4:	40020488 	.word	0x40020488
 80127c8:	400204a0 	.word	0x400204a0
 80127cc:	400204b8 	.word	0x400204b8
 80127d0:	58025408 	.word	0x58025408
 80127d4:	5802541c 	.word	0x5802541c
 80127d8:	58025430 	.word	0x58025430
 80127dc:	58025444 	.word	0x58025444
 80127e0:	58025458 	.word	0x58025458
 80127e4:	5802546c 	.word	0x5802546c
 80127e8:	58025480 	.word	0x58025480
 80127ec:	58025494 	.word	0x58025494

080127f0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
 80127fc:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4a46      	ldr	r2, [pc, #280]	@ (801291c <DMA_MultiBufferSetConfig+0x12c>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d04a      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a44      	ldr	r2, [pc, #272]	@ (8012920 <DMA_MultiBufferSetConfig+0x130>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d045      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4a43      	ldr	r2, [pc, #268]	@ (8012924 <DMA_MultiBufferSetConfig+0x134>)
 8012818:	4293      	cmp	r3, r2
 801281a:	d040      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a41      	ldr	r2, [pc, #260]	@ (8012928 <DMA_MultiBufferSetConfig+0x138>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d03b      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4a40      	ldr	r2, [pc, #256]	@ (801292c <DMA_MultiBufferSetConfig+0x13c>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d036      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4a3e      	ldr	r2, [pc, #248]	@ (8012930 <DMA_MultiBufferSetConfig+0x140>)
 8012836:	4293      	cmp	r3, r2
 8012838:	d031      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a3d      	ldr	r2, [pc, #244]	@ (8012934 <DMA_MultiBufferSetConfig+0x144>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d02c      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a3b      	ldr	r2, [pc, #236]	@ (8012938 <DMA_MultiBufferSetConfig+0x148>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d027      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4a3a      	ldr	r2, [pc, #232]	@ (801293c <DMA_MultiBufferSetConfig+0x14c>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d022      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a38      	ldr	r2, [pc, #224]	@ (8012940 <DMA_MultiBufferSetConfig+0x150>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d01d      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a37      	ldr	r2, [pc, #220]	@ (8012944 <DMA_MultiBufferSetConfig+0x154>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d018      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4a35      	ldr	r2, [pc, #212]	@ (8012948 <DMA_MultiBufferSetConfig+0x158>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d013      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a34      	ldr	r2, [pc, #208]	@ (801294c <DMA_MultiBufferSetConfig+0x15c>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d00e      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a32      	ldr	r2, [pc, #200]	@ (8012950 <DMA_MultiBufferSetConfig+0x160>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d009      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	4a31      	ldr	r2, [pc, #196]	@ (8012954 <DMA_MultiBufferSetConfig+0x164>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d004      	beq.n	801289e <DMA_MultiBufferSetConfig+0xae>
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a2f      	ldr	r2, [pc, #188]	@ (8012958 <DMA_MultiBufferSetConfig+0x168>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d101      	bne.n	80128a2 <DMA_MultiBufferSetConfig+0xb2>
 801289e:	2301      	movs	r3, #1
 80128a0:	e000      	b.n	80128a4 <DMA_MultiBufferSetConfig+0xb4>
 80128a2:	2300      	movs	r3, #0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d019      	beq.n	80128dc <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	2b40      	cmp	r3, #64	@ 0x40
 80128b6:	d108      	bne.n	80128ca <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80128c8:	e021      	b.n	801290e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	68ba      	ldr	r2, [r7, #8]
 80128d0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	60da      	str	r2, [r3, #12]
}
 80128da:	e018      	b.n	801290e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	683a      	ldr	r2, [r7, #0]
 80128e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	2b40      	cmp	r3, #64	@ 0x40
 80128ea:	d108      	bne.n	80128fe <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	60da      	str	r2, [r3, #12]
}
 80128fc:	e007      	b.n	801290e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	68ba      	ldr	r2, [r7, #8]
 8012904:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	60da      	str	r2, [r3, #12]
}
 801290e:	bf00      	nop
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	40020010 	.word	0x40020010
 8012920:	40020028 	.word	0x40020028
 8012924:	40020040 	.word	0x40020040
 8012928:	40020058 	.word	0x40020058
 801292c:	40020070 	.word	0x40020070
 8012930:	40020088 	.word	0x40020088
 8012934:	400200a0 	.word	0x400200a0
 8012938:	400200b8 	.word	0x400200b8
 801293c:	40020410 	.word	0x40020410
 8012940:	40020428 	.word	0x40020428
 8012944:	40020440 	.word	0x40020440
 8012948:	40020458 	.word	0x40020458
 801294c:	40020470 	.word	0x40020470
 8012950:	40020488 	.word	0x40020488
 8012954:	400204a0 	.word	0x400204a0
 8012958:	400204b8 	.word	0x400204b8

0801295c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801295c:	b480      	push	{r7}
 801295e:	b089      	sub	sp, #36	@ 0x24
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8012966:	2300      	movs	r3, #0
 8012968:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801296a:	4b89      	ldr	r3, [pc, #548]	@ (8012b90 <HAL_GPIO_Init+0x234>)
 801296c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801296e:	e194      	b.n	8012c9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	2101      	movs	r1, #1
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	fa01 f303 	lsl.w	r3, r1, r3
 801297c:	4013      	ands	r3, r2
 801297e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	2b00      	cmp	r3, #0
 8012984:	f000 8186 	beq.w	8012c94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	f003 0303 	and.w	r3, r3, #3
 8012990:	2b01      	cmp	r3, #1
 8012992:	d005      	beq.n	80129a0 <HAL_GPIO_Init+0x44>
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	f003 0303 	and.w	r3, r3, #3
 801299c:	2b02      	cmp	r3, #2
 801299e:	d130      	bne.n	8012a02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	2203      	movs	r2, #3
 80129ac:	fa02 f303 	lsl.w	r3, r2, r3
 80129b0:	43db      	mvns	r3, r3
 80129b2:	69ba      	ldr	r2, [r7, #24]
 80129b4:	4013      	ands	r3, r2
 80129b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	68da      	ldr	r2, [r3, #12]
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	fa02 f303 	lsl.w	r3, r2, r3
 80129c4:	69ba      	ldr	r2, [r7, #24]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	69ba      	ldr	r2, [r7, #24]
 80129ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80129d6:	2201      	movs	r2, #1
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	fa02 f303 	lsl.w	r3, r2, r3
 80129de:	43db      	mvns	r3, r3
 80129e0:	69ba      	ldr	r2, [r7, #24]
 80129e2:	4013      	ands	r3, r2
 80129e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	091b      	lsrs	r3, r3, #4
 80129ec:	f003 0201 	and.w	r2, r3, #1
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	fa02 f303 	lsl.w	r3, r2, r3
 80129f6:	69ba      	ldr	r2, [r7, #24]
 80129f8:	4313      	orrs	r3, r2
 80129fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	f003 0303 	and.w	r3, r3, #3
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	d017      	beq.n	8012a3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	005b      	lsls	r3, r3, #1
 8012a18:	2203      	movs	r2, #3
 8012a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a1e:	43db      	mvns	r3, r3
 8012a20:	69ba      	ldr	r2, [r7, #24]
 8012a22:	4013      	ands	r3, r2
 8012a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	689a      	ldr	r2, [r3, #8]
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	005b      	lsls	r3, r3, #1
 8012a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a32:	69ba      	ldr	r2, [r7, #24]
 8012a34:	4313      	orrs	r3, r2
 8012a36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	69ba      	ldr	r2, [r7, #24]
 8012a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	f003 0303 	and.w	r3, r3, #3
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d123      	bne.n	8012a92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	08da      	lsrs	r2, r3, #3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3208      	adds	r2, #8
 8012a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	f003 0307 	and.w	r3, r3, #7
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	220f      	movs	r2, #15
 8012a62:	fa02 f303 	lsl.w	r3, r2, r3
 8012a66:	43db      	mvns	r3, r3
 8012a68:	69ba      	ldr	r2, [r7, #24]
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	691a      	ldr	r2, [r3, #16]
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	f003 0307 	and.w	r3, r3, #7
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a7e:	69ba      	ldr	r2, [r7, #24]
 8012a80:	4313      	orrs	r3, r2
 8012a82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	08da      	lsrs	r2, r3, #3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3208      	adds	r2, #8
 8012a8c:	69b9      	ldr	r1, [r7, #24]
 8012a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	005b      	lsls	r3, r3, #1
 8012a9c:	2203      	movs	r2, #3
 8012a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8012aa2:	43db      	mvns	r3, r3
 8012aa4:	69ba      	ldr	r2, [r7, #24]
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	f003 0203 	and.w	r2, r3, #3
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	005b      	lsls	r3, r3, #1
 8012ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	4313      	orrs	r3, r2
 8012abe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	69ba      	ldr	r2, [r7, #24]
 8012ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f000 80e0 	beq.w	8012c94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8012b94 <HAL_GPIO_Init+0x238>)
 8012ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012ada:	4a2e      	ldr	r2, [pc, #184]	@ (8012b94 <HAL_GPIO_Init+0x238>)
 8012adc:	f043 0302 	orr.w	r3, r3, #2
 8012ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8012ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8012b94 <HAL_GPIO_Init+0x238>)
 8012ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012aea:	f003 0302 	and.w	r3, r3, #2
 8012aee:	60fb      	str	r3, [r7, #12]
 8012af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012af2:	4a29      	ldr	r2, [pc, #164]	@ (8012b98 <HAL_GPIO_Init+0x23c>)
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	089b      	lsrs	r3, r3, #2
 8012af8:	3302      	adds	r3, #2
 8012afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	f003 0303 	and.w	r3, r3, #3
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	220f      	movs	r2, #15
 8012b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b0e:	43db      	mvns	r3, r3
 8012b10:	69ba      	ldr	r2, [r7, #24]
 8012b12:	4013      	ands	r3, r2
 8012b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a20      	ldr	r2, [pc, #128]	@ (8012b9c <HAL_GPIO_Init+0x240>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d052      	beq.n	8012bc4 <HAL_GPIO_Init+0x268>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4a1f      	ldr	r2, [pc, #124]	@ (8012ba0 <HAL_GPIO_Init+0x244>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d031      	beq.n	8012b8a <HAL_GPIO_Init+0x22e>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a1e      	ldr	r2, [pc, #120]	@ (8012ba4 <HAL_GPIO_Init+0x248>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d02b      	beq.n	8012b86 <HAL_GPIO_Init+0x22a>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a1d      	ldr	r2, [pc, #116]	@ (8012ba8 <HAL_GPIO_Init+0x24c>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d025      	beq.n	8012b82 <HAL_GPIO_Init+0x226>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a1c      	ldr	r2, [pc, #112]	@ (8012bac <HAL_GPIO_Init+0x250>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d01f      	beq.n	8012b7e <HAL_GPIO_Init+0x222>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a1b      	ldr	r2, [pc, #108]	@ (8012bb0 <HAL_GPIO_Init+0x254>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d019      	beq.n	8012b7a <HAL_GPIO_Init+0x21e>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a1a      	ldr	r2, [pc, #104]	@ (8012bb4 <HAL_GPIO_Init+0x258>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d013      	beq.n	8012b76 <HAL_GPIO_Init+0x21a>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a19      	ldr	r2, [pc, #100]	@ (8012bb8 <HAL_GPIO_Init+0x25c>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d00d      	beq.n	8012b72 <HAL_GPIO_Init+0x216>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4a18      	ldr	r2, [pc, #96]	@ (8012bbc <HAL_GPIO_Init+0x260>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d007      	beq.n	8012b6e <HAL_GPIO_Init+0x212>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4a17      	ldr	r2, [pc, #92]	@ (8012bc0 <HAL_GPIO_Init+0x264>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d101      	bne.n	8012b6a <HAL_GPIO_Init+0x20e>
 8012b66:	2309      	movs	r3, #9
 8012b68:	e02d      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b6a:	230a      	movs	r3, #10
 8012b6c:	e02b      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b6e:	2308      	movs	r3, #8
 8012b70:	e029      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b72:	2307      	movs	r3, #7
 8012b74:	e027      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b76:	2306      	movs	r3, #6
 8012b78:	e025      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b7a:	2305      	movs	r3, #5
 8012b7c:	e023      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b7e:	2304      	movs	r3, #4
 8012b80:	e021      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b82:	2303      	movs	r3, #3
 8012b84:	e01f      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b86:	2302      	movs	r3, #2
 8012b88:	e01d      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e01b      	b.n	8012bc6 <HAL_GPIO_Init+0x26a>
 8012b8e:	bf00      	nop
 8012b90:	58000080 	.word	0x58000080
 8012b94:	58024400 	.word	0x58024400
 8012b98:	58000400 	.word	0x58000400
 8012b9c:	58020000 	.word	0x58020000
 8012ba0:	58020400 	.word	0x58020400
 8012ba4:	58020800 	.word	0x58020800
 8012ba8:	58020c00 	.word	0x58020c00
 8012bac:	58021000 	.word	0x58021000
 8012bb0:	58021400 	.word	0x58021400
 8012bb4:	58021800 	.word	0x58021800
 8012bb8:	58021c00 	.word	0x58021c00
 8012bbc:	58022000 	.word	0x58022000
 8012bc0:	58022400 	.word	0x58022400
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	69fa      	ldr	r2, [r7, #28]
 8012bc8:	f002 0203 	and.w	r2, r2, #3
 8012bcc:	0092      	lsls	r2, r2, #2
 8012bce:	4093      	lsls	r3, r2
 8012bd0:	69ba      	ldr	r2, [r7, #24]
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012bd6:	4938      	ldr	r1, [pc, #224]	@ (8012cb8 <HAL_GPIO_Init+0x35c>)
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	089b      	lsrs	r3, r3, #2
 8012bdc:	3302      	adds	r3, #2
 8012bde:	69ba      	ldr	r2, [r7, #24]
 8012be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	43db      	mvns	r3, r3
 8012bf0:	69ba      	ldr	r2, [r7, #24]
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d003      	beq.n	8012c0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8012c02:	69ba      	ldr	r2, [r7, #24]
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	4313      	orrs	r3, r2
 8012c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8012c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8012c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	43db      	mvns	r3, r3
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	4013      	ands	r3, r2
 8012c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d003      	beq.n	8012c38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8012c30:	69ba      	ldr	r2, [r7, #24]
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	4313      	orrs	r3, r2
 8012c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8012c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	43db      	mvns	r3, r3
 8012c4a:	69ba      	ldr	r2, [r7, #24]
 8012c4c:	4013      	ands	r3, r2
 8012c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d003      	beq.n	8012c64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8012c5c:	69ba      	ldr	r2, [r7, #24]
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	4313      	orrs	r3, r2
 8012c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	69ba      	ldr	r2, [r7, #24]
 8012c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	43db      	mvns	r3, r3
 8012c74:	69ba      	ldr	r2, [r7, #24]
 8012c76:	4013      	ands	r3, r2
 8012c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d003      	beq.n	8012c8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8012c86:	69ba      	ldr	r2, [r7, #24]
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	69ba      	ldr	r2, [r7, #24]
 8012c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8012c94:	69fb      	ldr	r3, [r7, #28]
 8012c96:	3301      	adds	r3, #1
 8012c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f47f ae63 	bne.w	8012970 <HAL_GPIO_Init+0x14>
  }
}
 8012caa:	bf00      	nop
 8012cac:	bf00      	nop
 8012cae:	3724      	adds	r7, #36	@ 0x24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	58000400 	.word	0x58000400

08012cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	460b      	mov	r3, r1
 8012cc6:	807b      	strh	r3, [r7, #2]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012ccc:	787b      	ldrb	r3, [r7, #1]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d003      	beq.n	8012cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012cd2:	887a      	ldrh	r2, [r7, #2]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8012cd8:	e003      	b.n	8012ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8012cda:	887b      	ldrh	r3, [r7, #2]
 8012cdc:	041a      	lsls	r2, r3, #16
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	619a      	str	r2, [r3, #24]
}
 8012ce2:	bf00      	nop
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cec:	4770      	bx	lr
	...

08012cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8012cf8:	4b19      	ldr	r3, [pc, #100]	@ (8012d60 <HAL_PWREx_ConfigSupply+0x70>)
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	f003 0304 	and.w	r3, r3, #4
 8012d00:	2b04      	cmp	r3, #4
 8012d02:	d00a      	beq.n	8012d1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012d04:	4b16      	ldr	r3, [pc, #88]	@ (8012d60 <HAL_PWREx_ConfigSupply+0x70>)
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	f003 0307 	and.w	r3, r3, #7
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d001      	beq.n	8012d16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012d12:	2301      	movs	r3, #1
 8012d14:	e01f      	b.n	8012d56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8012d16:	2300      	movs	r3, #0
 8012d18:	e01d      	b.n	8012d56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012d1a:	4b11      	ldr	r3, [pc, #68]	@ (8012d60 <HAL_PWREx_ConfigSupply+0x70>)
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	f023 0207 	bic.w	r2, r3, #7
 8012d22:	490f      	ldr	r1, [pc, #60]	@ (8012d60 <HAL_PWREx_ConfigSupply+0x70>)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4313      	orrs	r3, r2
 8012d28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012d2a:	f7fd f8f9 	bl	800ff20 <HAL_GetTick>
 8012d2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012d30:	e009      	b.n	8012d46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8012d32:	f7fd f8f5 	bl	800ff20 <HAL_GetTick>
 8012d36:	4602      	mov	r2, r0
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012d40:	d901      	bls.n	8012d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8012d42:	2301      	movs	r3, #1
 8012d44:	e007      	b.n	8012d56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012d46:	4b06      	ldr	r3, [pc, #24]	@ (8012d60 <HAL_PWREx_ConfigSupply+0x70>)
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012d52:	d1ee      	bne.n	8012d32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8012d54:	2300      	movs	r3, #0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	58024800 	.word	0x58024800

08012d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b08c      	sub	sp, #48	@ 0x30
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d102      	bne.n	8012d78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012d72:	2301      	movs	r3, #1
 8012d74:	f000 bc48 	b.w	8013608 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	f000 8088 	beq.w	8012e96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012d86:	4b99      	ldr	r3, [pc, #612]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012d88:	691b      	ldr	r3, [r3, #16]
 8012d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012d90:	4b96      	ldr	r3, [pc, #600]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d98:	2b10      	cmp	r3, #16
 8012d9a:	d007      	beq.n	8012dac <HAL_RCC_OscConfig+0x48>
 8012d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9e:	2b18      	cmp	r3, #24
 8012da0:	d111      	bne.n	8012dc6 <HAL_RCC_OscConfig+0x62>
 8012da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da4:	f003 0303 	and.w	r3, r3, #3
 8012da8:	2b02      	cmp	r3, #2
 8012daa:	d10c      	bne.n	8012dc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012dac:	4b8f      	ldr	r3, [pc, #572]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d06d      	beq.n	8012e94 <HAL_RCC_OscConfig+0x130>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d169      	bne.n	8012e94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	f000 bc21 	b.w	8013608 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012dce:	d106      	bne.n	8012dde <HAL_RCC_OscConfig+0x7a>
 8012dd0:	4b86      	ldr	r3, [pc, #536]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a85      	ldr	r2, [pc, #532]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012dda:	6013      	str	r3, [r2, #0]
 8012ddc:	e02e      	b.n	8012e3c <HAL_RCC_OscConfig+0xd8>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d10c      	bne.n	8012e00 <HAL_RCC_OscConfig+0x9c>
 8012de6:	4b81      	ldr	r3, [pc, #516]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4a80      	ldr	r2, [pc, #512]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012df0:	6013      	str	r3, [r2, #0]
 8012df2:	4b7e      	ldr	r3, [pc, #504]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a7d      	ldr	r2, [pc, #500]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012dfc:	6013      	str	r3, [r2, #0]
 8012dfe:	e01d      	b.n	8012e3c <HAL_RCC_OscConfig+0xd8>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012e08:	d10c      	bne.n	8012e24 <HAL_RCC_OscConfig+0xc0>
 8012e0a:	4b78      	ldr	r3, [pc, #480]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	4a77      	ldr	r2, [pc, #476]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012e14:	6013      	str	r3, [r2, #0]
 8012e16:	4b75      	ldr	r3, [pc, #468]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a74      	ldr	r2, [pc, #464]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	e00b      	b.n	8012e3c <HAL_RCC_OscConfig+0xd8>
 8012e24:	4b71      	ldr	r3, [pc, #452]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a70      	ldr	r2, [pc, #448]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	4b6e      	ldr	r3, [pc, #440]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4a6d      	ldr	r2, [pc, #436]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d013      	beq.n	8012e6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e44:	f7fd f86c 	bl	800ff20 <HAL_GetTick>
 8012e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012e4a:	e008      	b.n	8012e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012e4c:	f7fd f868 	bl	800ff20 <HAL_GetTick>
 8012e50:	4602      	mov	r2, r0
 8012e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	2b64      	cmp	r3, #100	@ 0x64
 8012e58:	d901      	bls.n	8012e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	e3d4      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012e5e:	4b63      	ldr	r3, [pc, #396]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d0f0      	beq.n	8012e4c <HAL_RCC_OscConfig+0xe8>
 8012e6a:	e014      	b.n	8012e96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e6c:	f7fd f858 	bl	800ff20 <HAL_GetTick>
 8012e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012e72:	e008      	b.n	8012e86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012e74:	f7fd f854 	bl	800ff20 <HAL_GetTick>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	2b64      	cmp	r3, #100	@ 0x64
 8012e80:	d901      	bls.n	8012e86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8012e82:	2303      	movs	r3, #3
 8012e84:	e3c0      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012e86:	4b59      	ldr	r3, [pc, #356]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d1f0      	bne.n	8012e74 <HAL_RCC_OscConfig+0x110>
 8012e92:	e000      	b.n	8012e96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f003 0302 	and.w	r3, r3, #2
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f000 80ca 	beq.w	8013038 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012ea4:	4b51      	ldr	r3, [pc, #324]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012ea6:	691b      	ldr	r3, [r3, #16]
 8012ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012eac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012eae:	4b4f      	ldr	r3, [pc, #316]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d007      	beq.n	8012eca <HAL_RCC_OscConfig+0x166>
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	2b18      	cmp	r3, #24
 8012ebe:	d156      	bne.n	8012f6e <HAL_RCC_OscConfig+0x20a>
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	f003 0303 	and.w	r3, r3, #3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d151      	bne.n	8012f6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012eca:	4b48      	ldr	r3, [pc, #288]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 0304 	and.w	r3, r3, #4
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d005      	beq.n	8012ee2 <HAL_RCC_OscConfig+0x17e>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	68db      	ldr	r3, [r3, #12]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e392      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012ee2:	4b42      	ldr	r3, [pc, #264]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f023 0219 	bic.w	r2, r3, #25
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	68db      	ldr	r3, [r3, #12]
 8012eee:	493f      	ldr	r1, [pc, #252]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ef4:	f7fd f814 	bl	800ff20 <HAL_GetTick>
 8012ef8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012efa:	e008      	b.n	8012f0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012efc:	f7fd f810 	bl	800ff20 <HAL_GetTick>
 8012f00:	4602      	mov	r2, r0
 8012f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	d901      	bls.n	8012f0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8012f0a:	2303      	movs	r3, #3
 8012f0c:	e37c      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012f0e:	4b37      	ldr	r3, [pc, #220]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f003 0304 	and.w	r3, r3, #4
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d0f0      	beq.n	8012efc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012f1a:	f7fd f831 	bl	800ff80 <HAL_GetREVID>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d817      	bhi.n	8012f58 <HAL_RCC_OscConfig+0x1f4>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	691b      	ldr	r3, [r3, #16]
 8012f2c:	2b40      	cmp	r3, #64	@ 0x40
 8012f2e:	d108      	bne.n	8012f42 <HAL_RCC_OscConfig+0x1de>
 8012f30:	4b2e      	ldr	r3, [pc, #184]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8012f38:	4a2c      	ldr	r2, [pc, #176]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012f3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012f40:	e07a      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012f42:	4b2a      	ldr	r3, [pc, #168]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	691b      	ldr	r3, [r3, #16]
 8012f4e:	031b      	lsls	r3, r3, #12
 8012f50:	4926      	ldr	r1, [pc, #152]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f52:	4313      	orrs	r3, r2
 8012f54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012f56:	e06f      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012f58:	4b24      	ldr	r3, [pc, #144]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	691b      	ldr	r3, [r3, #16]
 8012f64:	061b      	lsls	r3, r3, #24
 8012f66:	4921      	ldr	r1, [pc, #132]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f68:	4313      	orrs	r3, r2
 8012f6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012f6c:	e064      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d047      	beq.n	8013006 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012f76:	4b1d      	ldr	r3, [pc, #116]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f023 0219 	bic.w	r2, r3, #25
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	491a      	ldr	r1, [pc, #104]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012f84:	4313      	orrs	r3, r2
 8012f86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f88:	f7fc ffca 	bl	800ff20 <HAL_GetTick>
 8012f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012f8e:	e008      	b.n	8012fa2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012f90:	f7fc ffc6 	bl	800ff20 <HAL_GetTick>
 8012f94:	4602      	mov	r2, r0
 8012f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f98:	1ad3      	subs	r3, r2, r3
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d901      	bls.n	8012fa2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8012f9e:	2303      	movs	r3, #3
 8012fa0:	e332      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012fa2:	4b12      	ldr	r3, [pc, #72]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f003 0304 	and.w	r3, r3, #4
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d0f0      	beq.n	8012f90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012fae:	f7fc ffe7 	bl	800ff80 <HAL_GetREVID>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d819      	bhi.n	8012ff0 <HAL_RCC_OscConfig+0x28c>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	691b      	ldr	r3, [r3, #16]
 8012fc0:	2b40      	cmp	r3, #64	@ 0x40
 8012fc2:	d108      	bne.n	8012fd6 <HAL_RCC_OscConfig+0x272>
 8012fc4:	4b09      	ldr	r3, [pc, #36]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8012fcc:	4a07      	ldr	r2, [pc, #28]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fd2:	6053      	str	r3, [r2, #4]
 8012fd4:	e030      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
 8012fd6:	4b05      	ldr	r3, [pc, #20]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	691b      	ldr	r3, [r3, #16]
 8012fe2:	031b      	lsls	r3, r3, #12
 8012fe4:	4901      	ldr	r1, [pc, #4]	@ (8012fec <HAL_RCC_OscConfig+0x288>)
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	604b      	str	r3, [r1, #4]
 8012fea:	e025      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
 8012fec:	58024400 	.word	0x58024400
 8012ff0:	4b9a      	ldr	r3, [pc, #616]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	061b      	lsls	r3, r3, #24
 8012ffe:	4997      	ldr	r1, [pc, #604]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013000:	4313      	orrs	r3, r2
 8013002:	604b      	str	r3, [r1, #4]
 8013004:	e018      	b.n	8013038 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013006:	4b95      	ldr	r3, [pc, #596]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a94      	ldr	r2, [pc, #592]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801300c:	f023 0301 	bic.w	r3, r3, #1
 8013010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013012:	f7fc ff85 	bl	800ff20 <HAL_GetTick>
 8013016:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013018:	e008      	b.n	801302c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801301a:	f7fc ff81 	bl	800ff20 <HAL_GetTick>
 801301e:	4602      	mov	r2, r0
 8013020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	2b02      	cmp	r3, #2
 8013026:	d901      	bls.n	801302c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8013028:	2303      	movs	r3, #3
 801302a:	e2ed      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801302c:	4b8b      	ldr	r3, [pc, #556]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f003 0304 	and.w	r3, r3, #4
 8013034:	2b00      	cmp	r3, #0
 8013036:	d1f0      	bne.n	801301a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f003 0310 	and.w	r3, r3, #16
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 80a9 	beq.w	8013198 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013046:	4b85      	ldr	r3, [pc, #532]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013048:	691b      	ldr	r3, [r3, #16]
 801304a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801304e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013050:	4b82      	ldr	r3, [pc, #520]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013054:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	2b08      	cmp	r3, #8
 801305a:	d007      	beq.n	801306c <HAL_RCC_OscConfig+0x308>
 801305c:	69bb      	ldr	r3, [r7, #24]
 801305e:	2b18      	cmp	r3, #24
 8013060:	d13a      	bne.n	80130d8 <HAL_RCC_OscConfig+0x374>
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	f003 0303 	and.w	r3, r3, #3
 8013068:	2b01      	cmp	r3, #1
 801306a:	d135      	bne.n	80130d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801306c:	4b7b      	ldr	r3, [pc, #492]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013074:	2b00      	cmp	r3, #0
 8013076:	d005      	beq.n	8013084 <HAL_RCC_OscConfig+0x320>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	69db      	ldr	r3, [r3, #28]
 801307c:	2b80      	cmp	r3, #128	@ 0x80
 801307e:	d001      	beq.n	8013084 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8013080:	2301      	movs	r3, #1
 8013082:	e2c1      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013084:	f7fc ff7c 	bl	800ff80 <HAL_GetREVID>
 8013088:	4603      	mov	r3, r0
 801308a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801308e:	4293      	cmp	r3, r2
 8013090:	d817      	bhi.n	80130c2 <HAL_RCC_OscConfig+0x35e>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	2b20      	cmp	r3, #32
 8013098:	d108      	bne.n	80130ac <HAL_RCC_OscConfig+0x348>
 801309a:	4b70      	ldr	r3, [pc, #448]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80130a2:	4a6e      	ldr	r2, [pc, #440]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80130a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80130aa:	e075      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80130ac:	4b6b      	ldr	r3, [pc, #428]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a1b      	ldr	r3, [r3, #32]
 80130b8:	069b      	lsls	r3, r3, #26
 80130ba:	4968      	ldr	r1, [pc, #416]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130bc:	4313      	orrs	r3, r2
 80130be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80130c0:	e06a      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80130c2:	4b66      	ldr	r3, [pc, #408]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	061b      	lsls	r3, r3, #24
 80130d0:	4962      	ldr	r1, [pc, #392]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130d2:	4313      	orrs	r3, r2
 80130d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80130d6:	e05f      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	69db      	ldr	r3, [r3, #28]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d042      	beq.n	8013166 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80130e0:	4b5e      	ldr	r3, [pc, #376]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a5d      	ldr	r2, [pc, #372]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80130e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130ec:	f7fc ff18 	bl	800ff20 <HAL_GetTick>
 80130f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80130f2:	e008      	b.n	8013106 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80130f4:	f7fc ff14 	bl	800ff20 <HAL_GetTick>
 80130f8:	4602      	mov	r2, r0
 80130fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d901      	bls.n	8013106 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e280      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013106:	4b55      	ldr	r3, [pc, #340]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801310e:	2b00      	cmp	r3, #0
 8013110:	d0f0      	beq.n	80130f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013112:	f7fc ff35 	bl	800ff80 <HAL_GetREVID>
 8013116:	4603      	mov	r3, r0
 8013118:	f241 0203 	movw	r2, #4099	@ 0x1003
 801311c:	4293      	cmp	r3, r2
 801311e:	d817      	bhi.n	8013150 <HAL_RCC_OscConfig+0x3ec>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a1b      	ldr	r3, [r3, #32]
 8013124:	2b20      	cmp	r3, #32
 8013126:	d108      	bne.n	801313a <HAL_RCC_OscConfig+0x3d6>
 8013128:	4b4c      	ldr	r3, [pc, #304]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8013130:	4a4a      	ldr	r2, [pc, #296]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013132:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013136:	6053      	str	r3, [r2, #4]
 8013138:	e02e      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
 801313a:	4b48      	ldr	r3, [pc, #288]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6a1b      	ldr	r3, [r3, #32]
 8013146:	069b      	lsls	r3, r3, #26
 8013148:	4944      	ldr	r1, [pc, #272]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801314a:	4313      	orrs	r3, r2
 801314c:	604b      	str	r3, [r1, #4]
 801314e:	e023      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
 8013150:	4b42      	ldr	r3, [pc, #264]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a1b      	ldr	r3, [r3, #32]
 801315c:	061b      	lsls	r3, r3, #24
 801315e:	493f      	ldr	r1, [pc, #252]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013160:	4313      	orrs	r3, r2
 8013162:	60cb      	str	r3, [r1, #12]
 8013164:	e018      	b.n	8013198 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8013166:	4b3d      	ldr	r3, [pc, #244]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4a3c      	ldr	r2, [pc, #240]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801316c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013172:	f7fc fed5 	bl	800ff20 <HAL_GetTick>
 8013176:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013178:	e008      	b.n	801318c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801317a:	f7fc fed1 	bl	800ff20 <HAL_GetTick>
 801317e:	4602      	mov	r2, r0
 8013180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	2b02      	cmp	r3, #2
 8013186:	d901      	bls.n	801318c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013188:	2303      	movs	r3, #3
 801318a:	e23d      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801318c:	4b33      	ldr	r3, [pc, #204]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1f0      	bne.n	801317a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f003 0308 	and.w	r3, r3, #8
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d036      	beq.n	8013212 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	695b      	ldr	r3, [r3, #20]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d019      	beq.n	80131e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80131ac:	4b2b      	ldr	r3, [pc, #172]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80131ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131b0:	4a2a      	ldr	r2, [pc, #168]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80131b2:	f043 0301 	orr.w	r3, r3, #1
 80131b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131b8:	f7fc feb2 	bl	800ff20 <HAL_GetTick>
 80131bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80131be:	e008      	b.n	80131d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80131c0:	f7fc feae 	bl	800ff20 <HAL_GetTick>
 80131c4:	4602      	mov	r2, r0
 80131c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	d901      	bls.n	80131d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80131ce:	2303      	movs	r3, #3
 80131d0:	e21a      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80131d2:	4b22      	ldr	r3, [pc, #136]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80131d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131d6:	f003 0302 	and.w	r3, r3, #2
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0f0      	beq.n	80131c0 <HAL_RCC_OscConfig+0x45c>
 80131de:	e018      	b.n	8013212 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80131e0:	4b1e      	ldr	r3, [pc, #120]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80131e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131e4:	4a1d      	ldr	r2, [pc, #116]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 80131e6:	f023 0301 	bic.w	r3, r3, #1
 80131ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131ec:	f7fc fe98 	bl	800ff20 <HAL_GetTick>
 80131f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80131f2:	e008      	b.n	8013206 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80131f4:	f7fc fe94 	bl	800ff20 <HAL_GetTick>
 80131f8:	4602      	mov	r2, r0
 80131fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	2b02      	cmp	r3, #2
 8013200:	d901      	bls.n	8013206 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8013202:	2303      	movs	r3, #3
 8013204:	e200      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013206:	4b15      	ldr	r3, [pc, #84]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801320a:	f003 0302 	and.w	r3, r3, #2
 801320e:	2b00      	cmp	r3, #0
 8013210:	d1f0      	bne.n	80131f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f003 0320 	and.w	r3, r3, #32
 801321a:	2b00      	cmp	r3, #0
 801321c:	d039      	beq.n	8013292 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	699b      	ldr	r3, [r3, #24]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d01c      	beq.n	8013260 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013226:	4b0d      	ldr	r3, [pc, #52]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a0c      	ldr	r2, [pc, #48]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801322c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013230:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013232:	f7fc fe75 	bl	800ff20 <HAL_GetTick>
 8013236:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013238:	e008      	b.n	801324c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801323a:	f7fc fe71 	bl	800ff20 <HAL_GetTick>
 801323e:	4602      	mov	r2, r0
 8013240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	2b02      	cmp	r3, #2
 8013246:	d901      	bls.n	801324c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8013248:	2303      	movs	r3, #3
 801324a:	e1dd      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801324c:	4b03      	ldr	r3, [pc, #12]	@ (801325c <HAL_RCC_OscConfig+0x4f8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013254:	2b00      	cmp	r3, #0
 8013256:	d0f0      	beq.n	801323a <HAL_RCC_OscConfig+0x4d6>
 8013258:	e01b      	b.n	8013292 <HAL_RCC_OscConfig+0x52e>
 801325a:	bf00      	nop
 801325c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013260:	4b9b      	ldr	r3, [pc, #620]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	4a9a      	ldr	r2, [pc, #616]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801326a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801326c:	f7fc fe58 	bl	800ff20 <HAL_GetTick>
 8013270:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013272:	e008      	b.n	8013286 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013274:	f7fc fe54 	bl	800ff20 <HAL_GetTick>
 8013278:	4602      	mov	r2, r0
 801327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	2b02      	cmp	r3, #2
 8013280:	d901      	bls.n	8013286 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8013282:	2303      	movs	r3, #3
 8013284:	e1c0      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013286:	4b92      	ldr	r3, [pc, #584]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801328e:	2b00      	cmp	r3, #0
 8013290:	d1f0      	bne.n	8013274 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f003 0304 	and.w	r3, r3, #4
 801329a:	2b00      	cmp	r3, #0
 801329c:	f000 8081 	beq.w	80133a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80132a0:	4b8c      	ldr	r3, [pc, #560]	@ (80134d4 <HAL_RCC_OscConfig+0x770>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a8b      	ldr	r2, [pc, #556]	@ (80134d4 <HAL_RCC_OscConfig+0x770>)
 80132a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80132aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80132ac:	f7fc fe38 	bl	800ff20 <HAL_GetTick>
 80132b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80132b2:	e008      	b.n	80132c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80132b4:	f7fc fe34 	bl	800ff20 <HAL_GetTick>
 80132b8:	4602      	mov	r2, r0
 80132ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	2b64      	cmp	r3, #100	@ 0x64
 80132c0:	d901      	bls.n	80132c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80132c2:	2303      	movs	r3, #3
 80132c4:	e1a0      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80132c6:	4b83      	ldr	r3, [pc, #524]	@ (80134d4 <HAL_RCC_OscConfig+0x770>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0f0      	beq.n	80132b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	689b      	ldr	r3, [r3, #8]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d106      	bne.n	80132e8 <HAL_RCC_OscConfig+0x584>
 80132da:	4b7d      	ldr	r3, [pc, #500]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80132dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132de:	4a7c      	ldr	r2, [pc, #496]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80132e0:	f043 0301 	orr.w	r3, r3, #1
 80132e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80132e6:	e02d      	b.n	8013344 <HAL_RCC_OscConfig+0x5e0>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	689b      	ldr	r3, [r3, #8]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d10c      	bne.n	801330a <HAL_RCC_OscConfig+0x5a6>
 80132f0:	4b77      	ldr	r3, [pc, #476]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80132f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132f4:	4a76      	ldr	r2, [pc, #472]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80132f6:	f023 0301 	bic.w	r3, r3, #1
 80132fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80132fc:	4b74      	ldr	r3, [pc, #464]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80132fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013300:	4a73      	ldr	r2, [pc, #460]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013302:	f023 0304 	bic.w	r3, r3, #4
 8013306:	6713      	str	r3, [r2, #112]	@ 0x70
 8013308:	e01c      	b.n	8013344 <HAL_RCC_OscConfig+0x5e0>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	2b05      	cmp	r3, #5
 8013310:	d10c      	bne.n	801332c <HAL_RCC_OscConfig+0x5c8>
 8013312:	4b6f      	ldr	r3, [pc, #444]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013316:	4a6e      	ldr	r2, [pc, #440]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013318:	f043 0304 	orr.w	r3, r3, #4
 801331c:	6713      	str	r3, [r2, #112]	@ 0x70
 801331e:	4b6c      	ldr	r3, [pc, #432]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013322:	4a6b      	ldr	r2, [pc, #428]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013324:	f043 0301 	orr.w	r3, r3, #1
 8013328:	6713      	str	r3, [r2, #112]	@ 0x70
 801332a:	e00b      	b.n	8013344 <HAL_RCC_OscConfig+0x5e0>
 801332c:	4b68      	ldr	r3, [pc, #416]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013330:	4a67      	ldr	r2, [pc, #412]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013332:	f023 0301 	bic.w	r3, r3, #1
 8013336:	6713      	str	r3, [r2, #112]	@ 0x70
 8013338:	4b65      	ldr	r3, [pc, #404]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801333c:	4a64      	ldr	r2, [pc, #400]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801333e:	f023 0304 	bic.w	r3, r3, #4
 8013342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	689b      	ldr	r3, [r3, #8]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d015      	beq.n	8013378 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801334c:	f7fc fde8 	bl	800ff20 <HAL_GetTick>
 8013350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013352:	e00a      	b.n	801336a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013354:	f7fc fde4 	bl	800ff20 <HAL_GetTick>
 8013358:	4602      	mov	r2, r0
 801335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013362:	4293      	cmp	r3, r2
 8013364:	d901      	bls.n	801336a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8013366:	2303      	movs	r3, #3
 8013368:	e14e      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801336a:	4b59      	ldr	r3, [pc, #356]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801336e:	f003 0302 	and.w	r3, r3, #2
 8013372:	2b00      	cmp	r3, #0
 8013374:	d0ee      	beq.n	8013354 <HAL_RCC_OscConfig+0x5f0>
 8013376:	e014      	b.n	80133a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013378:	f7fc fdd2 	bl	800ff20 <HAL_GetTick>
 801337c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801337e:	e00a      	b.n	8013396 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013380:	f7fc fdce 	bl	800ff20 <HAL_GetTick>
 8013384:	4602      	mov	r2, r0
 8013386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801338e:	4293      	cmp	r3, r2
 8013390:	d901      	bls.n	8013396 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8013392:	2303      	movs	r3, #3
 8013394:	e138      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013396:	4b4e      	ldr	r3, [pc, #312]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801339a:	f003 0302 	and.w	r3, r3, #2
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d1ee      	bne.n	8013380 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	f000 812d 	beq.w	8013606 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80133ac:	4b48      	ldr	r3, [pc, #288]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80133ae:	691b      	ldr	r3, [r3, #16]
 80133b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80133b4:	2b18      	cmp	r3, #24
 80133b6:	f000 80bd 	beq.w	8013534 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133be:	2b02      	cmp	r3, #2
 80133c0:	f040 809e 	bne.w	8013500 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80133c4:	4b42      	ldr	r3, [pc, #264]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a41      	ldr	r2, [pc, #260]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80133ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80133ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80133d0:	f7fc fda6 	bl	800ff20 <HAL_GetTick>
 80133d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80133d6:	e008      	b.n	80133ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80133d8:	f7fc fda2 	bl	800ff20 <HAL_GetTick>
 80133dc:	4602      	mov	r2, r0
 80133de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	2b02      	cmp	r3, #2
 80133e4:	d901      	bls.n	80133ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80133e6:	2303      	movs	r3, #3
 80133e8:	e10e      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80133ea:	4b39      	ldr	r3, [pc, #228]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d1f0      	bne.n	80133d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80133f6:	4b36      	ldr	r3, [pc, #216]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80133f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80133fa:	4b37      	ldr	r3, [pc, #220]	@ (80134d8 <HAL_RCC_OscConfig+0x774>)
 80133fc:	4013      	ands	r3, r2
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013406:	0112      	lsls	r2, r2, #4
 8013408:	430a      	orrs	r2, r1
 801340a:	4931      	ldr	r1, [pc, #196]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801340c:	4313      	orrs	r3, r2
 801340e:	628b      	str	r3, [r1, #40]	@ 0x28
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013414:	3b01      	subs	r3, #1
 8013416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801341e:	3b01      	subs	r3, #1
 8013420:	025b      	lsls	r3, r3, #9
 8013422:	b29b      	uxth	r3, r3
 8013424:	431a      	orrs	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801342a:	3b01      	subs	r3, #1
 801342c:	041b      	lsls	r3, r3, #16
 801342e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013432:	431a      	orrs	r2, r3
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013438:	3b01      	subs	r3, #1
 801343a:	061b      	lsls	r3, r3, #24
 801343c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013440:	4923      	ldr	r1, [pc, #140]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013442:	4313      	orrs	r3, r2
 8013444:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8013446:	4b22      	ldr	r3, [pc, #136]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801344a:	4a21      	ldr	r2, [pc, #132]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801344c:	f023 0301 	bic.w	r3, r3, #1
 8013450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8013452:	4b1f      	ldr	r3, [pc, #124]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013456:	4b21      	ldr	r3, [pc, #132]	@ (80134dc <HAL_RCC_OscConfig+0x778>)
 8013458:	4013      	ands	r3, r2
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801345e:	00d2      	lsls	r2, r2, #3
 8013460:	491b      	ldr	r1, [pc, #108]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013462:	4313      	orrs	r3, r2
 8013464:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8013466:	4b1a      	ldr	r3, [pc, #104]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801346a:	f023 020c 	bic.w	r2, r3, #12
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013472:	4917      	ldr	r1, [pc, #92]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013474:	4313      	orrs	r3, r2
 8013476:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8013478:	4b15      	ldr	r3, [pc, #84]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801347c:	f023 0202 	bic.w	r2, r3, #2
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013484:	4912      	ldr	r1, [pc, #72]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013486:	4313      	orrs	r3, r2
 8013488:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801348a:	4b11      	ldr	r3, [pc, #68]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801348e:	4a10      	ldr	r2, [pc, #64]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013496:	4b0e      	ldr	r3, [pc, #56]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 8013498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801349a:	4a0d      	ldr	r2, [pc, #52]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 801349c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80134a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80134a2:	4b0b      	ldr	r3, [pc, #44]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a6:	4a0a      	ldr	r2, [pc, #40]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80134ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80134ae:	4b08      	ldr	r3, [pc, #32]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b2:	4a07      	ldr	r2, [pc, #28]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134b4:	f043 0301 	orr.w	r3, r3, #1
 80134b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80134ba:	4b05      	ldr	r3, [pc, #20]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	4a04      	ldr	r2, [pc, #16]	@ (80134d0 <HAL_RCC_OscConfig+0x76c>)
 80134c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80134c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80134c6:	f7fc fd2b 	bl	800ff20 <HAL_GetTick>
 80134ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80134cc:	e011      	b.n	80134f2 <HAL_RCC_OscConfig+0x78e>
 80134ce:	bf00      	nop
 80134d0:	58024400 	.word	0x58024400
 80134d4:	58024800 	.word	0x58024800
 80134d8:	fffffc0c 	.word	0xfffffc0c
 80134dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80134e0:	f7fc fd1e 	bl	800ff20 <HAL_GetTick>
 80134e4:	4602      	mov	r2, r0
 80134e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e8:	1ad3      	subs	r3, r2, r3
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d901      	bls.n	80134f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80134ee:	2303      	movs	r3, #3
 80134f0:	e08a      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80134f2:	4b47      	ldr	r3, [pc, #284]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d0f0      	beq.n	80134e0 <HAL_RCC_OscConfig+0x77c>
 80134fe:	e082      	b.n	8013606 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013500:	4b43      	ldr	r3, [pc, #268]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	4a42      	ldr	r2, [pc, #264]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 8013506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801350c:	f7fc fd08 	bl	800ff20 <HAL_GetTick>
 8013510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013512:	e008      	b.n	8013526 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013514:	f7fc fd04 	bl	800ff20 <HAL_GetTick>
 8013518:	4602      	mov	r2, r0
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	2b02      	cmp	r3, #2
 8013520:	d901      	bls.n	8013526 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8013522:	2303      	movs	r3, #3
 8013524:	e070      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013526:	4b3a      	ldr	r3, [pc, #232]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801352e:	2b00      	cmp	r3, #0
 8013530:	d1f0      	bne.n	8013514 <HAL_RCC_OscConfig+0x7b0>
 8013532:	e068      	b.n	8013606 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8013534:	4b36      	ldr	r3, [pc, #216]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 8013536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013538:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801353a:	4b35      	ldr	r3, [pc, #212]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 801353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801353e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013544:	2b01      	cmp	r3, #1
 8013546:	d031      	beq.n	80135ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	f003 0203 	and.w	r2, r3, #3
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013552:	429a      	cmp	r2, r3
 8013554:	d12a      	bne.n	80135ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	091b      	lsrs	r3, r3, #4
 801355a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013562:	429a      	cmp	r2, r3
 8013564:	d122      	bne.n	80135ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013570:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8013572:	429a      	cmp	r2, r3
 8013574:	d11a      	bne.n	80135ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	0a5b      	lsrs	r3, r3, #9
 801357a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013582:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8013584:	429a      	cmp	r2, r3
 8013586:	d111      	bne.n	80135ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	0c1b      	lsrs	r3, r3, #16
 801358c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013594:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8013596:	429a      	cmp	r2, r3
 8013598:	d108      	bne.n	80135ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	0e1b      	lsrs	r3, r3, #24
 801359e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d001      	beq.n	80135b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80135ac:	2301      	movs	r3, #1
 80135ae:	e02b      	b.n	8013608 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80135b0:	4b17      	ldr	r3, [pc, #92]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135b4:	08db      	lsrs	r3, r3, #3
 80135b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135c0:	693a      	ldr	r2, [r7, #16]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d01f      	beq.n	8013606 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80135c6:	4b12      	ldr	r3, [pc, #72]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ca:	4a11      	ldr	r2, [pc, #68]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135cc:	f023 0301 	bic.w	r3, r3, #1
 80135d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80135d2:	f7fc fca5 	bl	800ff20 <HAL_GetTick>
 80135d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80135d8:	bf00      	nop
 80135da:	f7fc fca1 	bl	800ff20 <HAL_GetTick>
 80135de:	4602      	mov	r2, r0
 80135e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d0f9      	beq.n	80135da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80135e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80135ea:	4b0a      	ldr	r3, [pc, #40]	@ (8013614 <HAL_RCC_OscConfig+0x8b0>)
 80135ec:	4013      	ands	r3, r2
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80135f2:	00d2      	lsls	r2, r2, #3
 80135f4:	4906      	ldr	r1, [pc, #24]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135f6:	4313      	orrs	r3, r2
 80135f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80135fa:	4b05      	ldr	r3, [pc, #20]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 80135fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135fe:	4a04      	ldr	r2, [pc, #16]	@ (8013610 <HAL_RCC_OscConfig+0x8ac>)
 8013600:	f043 0301 	orr.w	r3, r3, #1
 8013604:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8013606:	2300      	movs	r3, #0
}
 8013608:	4618      	mov	r0, r3
 801360a:	3730      	adds	r7, #48	@ 0x30
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	58024400 	.word	0x58024400
 8013614:	ffff0007 	.word	0xffff0007

08013618 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b086      	sub	sp, #24
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d101      	bne.n	801362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013628:	2301      	movs	r3, #1
 801362a:	e19c      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801362c:	4b8a      	ldr	r3, [pc, #552]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	f003 030f 	and.w	r3, r3, #15
 8013634:	683a      	ldr	r2, [r7, #0]
 8013636:	429a      	cmp	r2, r3
 8013638:	d910      	bls.n	801365c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801363a:	4b87      	ldr	r3, [pc, #540]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f023 020f 	bic.w	r2, r3, #15
 8013642:	4985      	ldr	r1, [pc, #532]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	4313      	orrs	r3, r2
 8013648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801364a:	4b83      	ldr	r3, [pc, #524]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f003 030f 	and.w	r3, r3, #15
 8013652:	683a      	ldr	r2, [r7, #0]
 8013654:	429a      	cmp	r2, r3
 8013656:	d001      	beq.n	801365c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013658:	2301      	movs	r3, #1
 801365a:	e184      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f003 0304 	and.w	r3, r3, #4
 8013664:	2b00      	cmp	r3, #0
 8013666:	d010      	beq.n	801368a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	691a      	ldr	r2, [r3, #16]
 801366c:	4b7b      	ldr	r3, [pc, #492]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013674:	429a      	cmp	r2, r3
 8013676:	d908      	bls.n	801368a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8013678:	4b78      	ldr	r3, [pc, #480]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	691b      	ldr	r3, [r3, #16]
 8013684:	4975      	ldr	r1, [pc, #468]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013686:	4313      	orrs	r3, r2
 8013688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f003 0308 	and.w	r3, r3, #8
 8013692:	2b00      	cmp	r3, #0
 8013694:	d010      	beq.n	80136b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	695a      	ldr	r2, [r3, #20]
 801369a:	4b70      	ldr	r3, [pc, #448]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801369c:	69db      	ldr	r3, [r3, #28]
 801369e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d908      	bls.n	80136b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80136a6:	4b6d      	ldr	r3, [pc, #436]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136a8:	69db      	ldr	r3, [r3, #28]
 80136aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	695b      	ldr	r3, [r3, #20]
 80136b2:	496a      	ldr	r1, [pc, #424]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136b4:	4313      	orrs	r3, r2
 80136b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 0310 	and.w	r3, r3, #16
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d010      	beq.n	80136e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	699a      	ldr	r2, [r3, #24]
 80136c8:	4b64      	ldr	r3, [pc, #400]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136ca:	69db      	ldr	r3, [r3, #28]
 80136cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d908      	bls.n	80136e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80136d4:	4b61      	ldr	r3, [pc, #388]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136d6:	69db      	ldr	r3, [r3, #28]
 80136d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	699b      	ldr	r3, [r3, #24]
 80136e0:	495e      	ldr	r1, [pc, #376]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136e2:	4313      	orrs	r3, r2
 80136e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f003 0320 	and.w	r3, r3, #32
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d010      	beq.n	8013714 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	69da      	ldr	r2, [r3, #28]
 80136f6:	4b59      	ldr	r3, [pc, #356]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80136fe:	429a      	cmp	r2, r3
 8013700:	d908      	bls.n	8013714 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8013702:	4b56      	ldr	r3, [pc, #344]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013704:	6a1b      	ldr	r3, [r3, #32]
 8013706:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	69db      	ldr	r3, [r3, #28]
 801370e:	4953      	ldr	r1, [pc, #332]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013710:	4313      	orrs	r3, r2
 8013712:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	f003 0302 	and.w	r3, r3, #2
 801371c:	2b00      	cmp	r3, #0
 801371e:	d010      	beq.n	8013742 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	68da      	ldr	r2, [r3, #12]
 8013724:	4b4d      	ldr	r3, [pc, #308]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013726:	699b      	ldr	r3, [r3, #24]
 8013728:	f003 030f 	and.w	r3, r3, #15
 801372c:	429a      	cmp	r2, r3
 801372e:	d908      	bls.n	8013742 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013730:	4b4a      	ldr	r3, [pc, #296]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013732:	699b      	ldr	r3, [r3, #24]
 8013734:	f023 020f 	bic.w	r2, r3, #15
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	4947      	ldr	r1, [pc, #284]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801373e:	4313      	orrs	r3, r2
 8013740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	f003 0301 	and.w	r3, r3, #1
 801374a:	2b00      	cmp	r3, #0
 801374c:	d055      	beq.n	80137fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801374e:	4b43      	ldr	r3, [pc, #268]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013750:	699b      	ldr	r3, [r3, #24]
 8013752:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	4940      	ldr	r1, [pc, #256]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801375c:	4313      	orrs	r3, r2
 801375e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	2b02      	cmp	r3, #2
 8013766:	d107      	bne.n	8013778 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013768:	4b3c      	ldr	r3, [pc, #240]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013770:	2b00      	cmp	r3, #0
 8013772:	d121      	bne.n	80137b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013774:	2301      	movs	r3, #1
 8013776:	e0f6      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	2b03      	cmp	r3, #3
 801377e:	d107      	bne.n	8013790 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013780:	4b36      	ldr	r3, [pc, #216]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013788:	2b00      	cmp	r3, #0
 801378a:	d115      	bne.n	80137b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801378c:	2301      	movs	r3, #1
 801378e:	e0ea      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	2b01      	cmp	r3, #1
 8013796:	d107      	bne.n	80137a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013798:	4b30      	ldr	r3, [pc, #192]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d109      	bne.n	80137b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80137a4:	2301      	movs	r3, #1
 80137a6:	e0de      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80137a8:	4b2c      	ldr	r3, [pc, #176]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f003 0304 	and.w	r3, r3, #4
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d101      	bne.n	80137b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80137b4:	2301      	movs	r3, #1
 80137b6:	e0d6      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80137b8:	4b28      	ldr	r3, [pc, #160]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	f023 0207 	bic.w	r2, r3, #7
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	4925      	ldr	r1, [pc, #148]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80137c6:	4313      	orrs	r3, r2
 80137c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80137ca:	f7fc fba9 	bl	800ff20 <HAL_GetTick>
 80137ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137d0:	e00a      	b.n	80137e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80137d2:	f7fc fba5 	bl	800ff20 <HAL_GetTick>
 80137d6:	4602      	mov	r2, r0
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d901      	bls.n	80137e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80137e4:	2303      	movs	r3, #3
 80137e6:	e0be      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137e8:	4b1c      	ldr	r3, [pc, #112]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 80137ea:	691b      	ldr	r3, [r3, #16]
 80137ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	00db      	lsls	r3, r3, #3
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d1eb      	bne.n	80137d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f003 0302 	and.w	r3, r3, #2
 8013802:	2b00      	cmp	r3, #0
 8013804:	d010      	beq.n	8013828 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	68da      	ldr	r2, [r3, #12]
 801380a:	4b14      	ldr	r3, [pc, #80]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 801380c:	699b      	ldr	r3, [r3, #24]
 801380e:	f003 030f 	and.w	r3, r3, #15
 8013812:	429a      	cmp	r2, r3
 8013814:	d208      	bcs.n	8013828 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013816:	4b11      	ldr	r3, [pc, #68]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013818:	699b      	ldr	r3, [r3, #24]
 801381a:	f023 020f 	bic.w	r2, r3, #15
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	490e      	ldr	r1, [pc, #56]	@ (801385c <HAL_RCC_ClockConfig+0x244>)
 8013824:	4313      	orrs	r3, r2
 8013826:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013828:	4b0b      	ldr	r3, [pc, #44]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f003 030f 	and.w	r3, r3, #15
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	429a      	cmp	r2, r3
 8013834:	d214      	bcs.n	8013860 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013836:	4b08      	ldr	r3, [pc, #32]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f023 020f 	bic.w	r2, r3, #15
 801383e:	4906      	ldr	r1, [pc, #24]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	4313      	orrs	r3, r2
 8013844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013846:	4b04      	ldr	r3, [pc, #16]	@ (8013858 <HAL_RCC_ClockConfig+0x240>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f003 030f 	and.w	r3, r3, #15
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	429a      	cmp	r2, r3
 8013852:	d005      	beq.n	8013860 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8013854:	2301      	movs	r3, #1
 8013856:	e086      	b.n	8013966 <HAL_RCC_ClockConfig+0x34e>
 8013858:	52002000 	.word	0x52002000
 801385c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f003 0304 	and.w	r3, r3, #4
 8013868:	2b00      	cmp	r3, #0
 801386a:	d010      	beq.n	801388e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	691a      	ldr	r2, [r3, #16]
 8013870:	4b3f      	ldr	r3, [pc, #252]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013878:	429a      	cmp	r2, r3
 801387a:	d208      	bcs.n	801388e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801387c:	4b3c      	ldr	r3, [pc, #240]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 801387e:	699b      	ldr	r3, [r3, #24]
 8013880:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	691b      	ldr	r3, [r3, #16]
 8013888:	4939      	ldr	r1, [pc, #228]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 801388a:	4313      	orrs	r3, r2
 801388c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 0308 	and.w	r3, r3, #8
 8013896:	2b00      	cmp	r3, #0
 8013898:	d010      	beq.n	80138bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	695a      	ldr	r2, [r3, #20]
 801389e:	4b34      	ldr	r3, [pc, #208]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138a0:	69db      	ldr	r3, [r3, #28]
 80138a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d208      	bcs.n	80138bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80138aa:	4b31      	ldr	r3, [pc, #196]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138ac:	69db      	ldr	r3, [r3, #28]
 80138ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	695b      	ldr	r3, [r3, #20]
 80138b6:	492e      	ldr	r1, [pc, #184]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138b8:	4313      	orrs	r3, r2
 80138ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	f003 0310 	and.w	r3, r3, #16
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d010      	beq.n	80138ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	699a      	ldr	r2, [r3, #24]
 80138cc:	4b28      	ldr	r3, [pc, #160]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138ce:	69db      	ldr	r3, [r3, #28]
 80138d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d208      	bcs.n	80138ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80138d8:	4b25      	ldr	r3, [pc, #148]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138da:	69db      	ldr	r3, [r3, #28]
 80138dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	699b      	ldr	r3, [r3, #24]
 80138e4:	4922      	ldr	r1, [pc, #136]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138e6:	4313      	orrs	r3, r2
 80138e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f003 0320 	and.w	r3, r3, #32
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d010      	beq.n	8013918 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	69da      	ldr	r2, [r3, #28]
 80138fa:	4b1d      	ldr	r3, [pc, #116]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 80138fc:	6a1b      	ldr	r3, [r3, #32]
 80138fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013902:	429a      	cmp	r2, r3
 8013904:	d208      	bcs.n	8013918 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8013906:	4b1a      	ldr	r3, [pc, #104]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 8013908:	6a1b      	ldr	r3, [r3, #32]
 801390a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	69db      	ldr	r3, [r3, #28]
 8013912:	4917      	ldr	r1, [pc, #92]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 8013914:	4313      	orrs	r3, r2
 8013916:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8013918:	f000 f834 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 801391c:	4602      	mov	r2, r0
 801391e:	4b14      	ldr	r3, [pc, #80]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	0a1b      	lsrs	r3, r3, #8
 8013924:	f003 030f 	and.w	r3, r3, #15
 8013928:	4912      	ldr	r1, [pc, #72]	@ (8013974 <HAL_RCC_ClockConfig+0x35c>)
 801392a:	5ccb      	ldrb	r3, [r1, r3]
 801392c:	f003 031f 	and.w	r3, r3, #31
 8013930:	fa22 f303 	lsr.w	r3, r2, r3
 8013934:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8013936:	4b0e      	ldr	r3, [pc, #56]	@ (8013970 <HAL_RCC_ClockConfig+0x358>)
 8013938:	699b      	ldr	r3, [r3, #24]
 801393a:	f003 030f 	and.w	r3, r3, #15
 801393e:	4a0d      	ldr	r2, [pc, #52]	@ (8013974 <HAL_RCC_ClockConfig+0x35c>)
 8013940:	5cd3      	ldrb	r3, [r2, r3]
 8013942:	f003 031f 	and.w	r3, r3, #31
 8013946:	693a      	ldr	r2, [r7, #16]
 8013948:	fa22 f303 	lsr.w	r3, r2, r3
 801394c:	4a0a      	ldr	r2, [pc, #40]	@ (8013978 <HAL_RCC_ClockConfig+0x360>)
 801394e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013950:	4a0a      	ldr	r2, [pc, #40]	@ (801397c <HAL_RCC_ClockConfig+0x364>)
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8013956:	4b0a      	ldr	r3, [pc, #40]	@ (8013980 <HAL_RCC_ClockConfig+0x368>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4618      	mov	r0, r3
 801395c:	f7fc fa96 	bl	800fe8c <HAL_InitTick>
 8013960:	4603      	mov	r3, r0
 8013962:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8013964:	7bfb      	ldrb	r3, [r7, #15]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3718      	adds	r7, #24
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	58024400 	.word	0x58024400
 8013974:	0801ea74 	.word	0x0801ea74
 8013978:	24000020 	.word	0x24000020
 801397c:	2400001c 	.word	0x2400001c
 8013980:	24000024 	.word	0x24000024

08013984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013984:	b480      	push	{r7}
 8013986:	b089      	sub	sp, #36	@ 0x24
 8013988:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801398a:	4bb3      	ldr	r3, [pc, #716]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801398c:	691b      	ldr	r3, [r3, #16]
 801398e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013992:	2b18      	cmp	r3, #24
 8013994:	f200 8155 	bhi.w	8013c42 <HAL_RCC_GetSysClockFreq+0x2be>
 8013998:	a201      	add	r2, pc, #4	@ (adr r2, 80139a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801399e:	bf00      	nop
 80139a0:	08013a05 	.word	0x08013a05
 80139a4:	08013c43 	.word	0x08013c43
 80139a8:	08013c43 	.word	0x08013c43
 80139ac:	08013c43 	.word	0x08013c43
 80139b0:	08013c43 	.word	0x08013c43
 80139b4:	08013c43 	.word	0x08013c43
 80139b8:	08013c43 	.word	0x08013c43
 80139bc:	08013c43 	.word	0x08013c43
 80139c0:	08013a2b 	.word	0x08013a2b
 80139c4:	08013c43 	.word	0x08013c43
 80139c8:	08013c43 	.word	0x08013c43
 80139cc:	08013c43 	.word	0x08013c43
 80139d0:	08013c43 	.word	0x08013c43
 80139d4:	08013c43 	.word	0x08013c43
 80139d8:	08013c43 	.word	0x08013c43
 80139dc:	08013c43 	.word	0x08013c43
 80139e0:	08013a31 	.word	0x08013a31
 80139e4:	08013c43 	.word	0x08013c43
 80139e8:	08013c43 	.word	0x08013c43
 80139ec:	08013c43 	.word	0x08013c43
 80139f0:	08013c43 	.word	0x08013c43
 80139f4:	08013c43 	.word	0x08013c43
 80139f8:	08013c43 	.word	0x08013c43
 80139fc:	08013c43 	.word	0x08013c43
 8013a00:	08013a37 	.word	0x08013a37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a04:	4b94      	ldr	r3, [pc, #592]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f003 0320 	and.w	r3, r3, #32
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d009      	beq.n	8013a24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a10:	4b91      	ldr	r3, [pc, #580]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	08db      	lsrs	r3, r3, #3
 8013a16:	f003 0303 	and.w	r3, r3, #3
 8013a1a:	4a90      	ldr	r2, [pc, #576]	@ (8013c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8013a20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8013a22:	e111      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8013a24:	4b8d      	ldr	r3, [pc, #564]	@ (8013c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013a26:	61bb      	str	r3, [r7, #24]
      break;
 8013a28:	e10e      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8013a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8013c60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013a2c:	61bb      	str	r3, [r7, #24]
      break;
 8013a2e:	e10b      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8013a30:	4b8c      	ldr	r3, [pc, #560]	@ (8013c64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8013a32:	61bb      	str	r3, [r7, #24]
      break;
 8013a34:	e108      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a36:	4b88      	ldr	r3, [pc, #544]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a3a:	f003 0303 	and.w	r3, r3, #3
 8013a3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8013a40:	4b85      	ldr	r3, [pc, #532]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a44:	091b      	lsrs	r3, r3, #4
 8013a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8013a4c:	4b82      	ldr	r3, [pc, #520]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a50:	f003 0301 	and.w	r3, r3, #1
 8013a54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013a56:	4b80      	ldr	r3, [pc, #512]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a5a:	08db      	lsrs	r3, r3, #3
 8013a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	fb02 f303 	mul.w	r3, r2, r3
 8013a66:	ee07 3a90 	vmov	s15, r3
 8013a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 80e1 	beq.w	8013c3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	f000 8083 	beq.w	8013b88 <HAL_RCC_GetSysClockFreq+0x204>
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	f200 80a1 	bhi.w	8013bcc <HAL_RCC_GetSysClockFreq+0x248>
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d003      	beq.n	8013a98 <HAL_RCC_GetSysClockFreq+0x114>
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	d056      	beq.n	8013b44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8013a96:	e099      	b.n	8013bcc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a98:	4b6f      	ldr	r3, [pc, #444]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f003 0320 	and.w	r3, r3, #32
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d02d      	beq.n	8013b00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	08db      	lsrs	r3, r3, #3
 8013aaa:	f003 0303 	and.w	r3, r3, #3
 8013aae:	4a6b      	ldr	r2, [pc, #428]	@ (8013c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8013ab4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	ee07 3a90 	vmov	s15, r3
 8013abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	ee07 3a90 	vmov	s15, r3
 8013ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ace:	4b62      	ldr	r3, [pc, #392]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ad6:	ee07 3a90 	vmov	s15, r3
 8013ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8013ae2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8013c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013afa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013afe:	e087      	b.n	8013c10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	ee07 3a90 	vmov	s15, r3
 8013b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8013c6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8013b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b12:	4b51      	ldr	r3, [pc, #324]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b1a:	ee07 3a90 	vmov	s15, r3
 8013b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8013b26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8013c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013b42:	e065      	b.n	8013c10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	ee07 3a90 	vmov	s15, r3
 8013b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8013c70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b56:	4b40      	ldr	r3, [pc, #256]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b5e:	ee07 3a90 	vmov	s15, r3
 8013b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8013b6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013b86:	e043      	b.n	8013c10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	ee07 3a90 	vmov	s15, r3
 8013b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8013c74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8013b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ba2:	ee07 3a90 	vmov	s15, r3
 8013ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8013bae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8013c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013bca:	e021      	b.n	8013c10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	ee07 3a90 	vmov	s15, r3
 8013bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8013c70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bde:	4b1e      	ldr	r3, [pc, #120]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013be6:	ee07 3a90 	vmov	s15, r3
 8013bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8013bf2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8013c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013c0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013c10:	4b11      	ldr	r3, [pc, #68]	@ (8013c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c14:	0a5b      	lsrs	r3, r3, #9
 8013c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	ee07 3a90 	vmov	s15, r3
 8013c24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c34:	ee17 3a90 	vmov	r3, s15
 8013c38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8013c3a:	e005      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	61bb      	str	r3, [r7, #24]
      break;
 8013c40:	e002      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8013c42:	4b07      	ldr	r3, [pc, #28]	@ (8013c60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013c44:	61bb      	str	r3, [r7, #24]
      break;
 8013c46:	bf00      	nop
  }

  return sysclockfreq;
 8013c48:	69bb      	ldr	r3, [r7, #24]
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3724      	adds	r7, #36	@ 0x24
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c54:	4770      	bx	lr
 8013c56:	bf00      	nop
 8013c58:	58024400 	.word	0x58024400
 8013c5c:	03d09000 	.word	0x03d09000
 8013c60:	003d0900 	.word	0x003d0900
 8013c64:	017d7840 	.word	0x017d7840
 8013c68:	46000000 	.word	0x46000000
 8013c6c:	4c742400 	.word	0x4c742400
 8013c70:	4a742400 	.word	0x4a742400
 8013c74:	4bbebc20 	.word	0x4bbebc20

08013c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8013c7e:	f7ff fe81 	bl	8013984 <HAL_RCC_GetSysClockFreq>
 8013c82:	4602      	mov	r2, r0
 8013c84:	4b10      	ldr	r3, [pc, #64]	@ (8013cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8013c86:	699b      	ldr	r3, [r3, #24]
 8013c88:	0a1b      	lsrs	r3, r3, #8
 8013c8a:	f003 030f 	and.w	r3, r3, #15
 8013c8e:	490f      	ldr	r1, [pc, #60]	@ (8013ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8013c90:	5ccb      	ldrb	r3, [r1, r3]
 8013c92:	f003 031f 	and.w	r3, r3, #31
 8013c96:	fa22 f303 	lsr.w	r3, r2, r3
 8013c9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8013c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8013cc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8013c9e:	699b      	ldr	r3, [r3, #24]
 8013ca0:	f003 030f 	and.w	r3, r3, #15
 8013ca4:	4a09      	ldr	r2, [pc, #36]	@ (8013ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8013ca6:	5cd3      	ldrb	r3, [r2, r3]
 8013ca8:	f003 031f 	and.w	r3, r3, #31
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	fa22 f303 	lsr.w	r3, r2, r3
 8013cb2:	4a07      	ldr	r2, [pc, #28]	@ (8013cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8013cb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013cb6:	4a07      	ldr	r2, [pc, #28]	@ (8013cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8013cbc:	4b04      	ldr	r3, [pc, #16]	@ (8013cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}
 8013cc8:	58024400 	.word	0x58024400
 8013ccc:	0801ea74 	.word	0x0801ea74
 8013cd0:	24000020 	.word	0x24000020
 8013cd4:	2400001c 	.word	0x2400001c

08013cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8013cdc:	f7ff ffcc 	bl	8013c78 <HAL_RCC_GetHCLKFreq>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	4b06      	ldr	r3, [pc, #24]	@ (8013cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8013ce4:	69db      	ldr	r3, [r3, #28]
 8013ce6:	091b      	lsrs	r3, r3, #4
 8013ce8:	f003 0307 	and.w	r3, r3, #7
 8013cec:	4904      	ldr	r1, [pc, #16]	@ (8013d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013cee:	5ccb      	ldrb	r3, [r1, r3]
 8013cf0:	f003 031f 	and.w	r3, r3, #31
 8013cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	58024400 	.word	0x58024400
 8013d00:	0801ea74 	.word	0x0801ea74

08013d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8013d08:	f7ff ffb6 	bl	8013c78 <HAL_RCC_GetHCLKFreq>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	4b06      	ldr	r3, [pc, #24]	@ (8013d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013d10:	69db      	ldr	r3, [r3, #28]
 8013d12:	0a1b      	lsrs	r3, r3, #8
 8013d14:	f003 0307 	and.w	r3, r3, #7
 8013d18:	4904      	ldr	r1, [pc, #16]	@ (8013d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8013d1a:	5ccb      	ldrb	r3, [r1, r3]
 8013d1c:	f003 031f 	and.w	r3, r3, #31
 8013d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	58024400 	.word	0x58024400
 8013d2c:	0801ea74 	.word	0x0801ea74

08013d30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d34:	b0ca      	sub	sp, #296	@ 0x128
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013d42:	2300      	movs	r3, #0
 8013d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8013d54:	2500      	movs	r5, #0
 8013d56:	ea54 0305 	orrs.w	r3, r4, r5
 8013d5a:	d049      	beq.n	8013df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8013d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013d62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013d66:	d02f      	beq.n	8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013d68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013d6c:	d828      	bhi.n	8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013d72:	d01a      	beq.n	8013daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013d78:	d822      	bhi.n	8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d003      	beq.n	8013d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8013d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013d82:	d007      	beq.n	8013d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013d84:	e01c      	b.n	8013dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013d86:	4bb8      	ldr	r3, [pc, #736]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d8a:	4ab7      	ldr	r2, [pc, #732]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013d92:	e01a      	b.n	8013dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d98:	3308      	adds	r3, #8
 8013d9a:	2102      	movs	r1, #2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f002 fb61 	bl	8016464 <RCCEx_PLL2_Config>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013da8:	e00f      	b.n	8013dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013dae:	3328      	adds	r3, #40	@ 0x28
 8013db0:	2102      	movs	r1, #2
 8013db2:	4618      	mov	r0, r3
 8013db4:	f002 fc08 	bl	80165c8 <RCCEx_PLL3_Config>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013dbe:	e004      	b.n	8013dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013dc6:	e000      	b.n	8013dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d10a      	bne.n	8013de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8013dd2:	4ba5      	ldr	r3, [pc, #660]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8013dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013de0:	4aa1      	ldr	r2, [pc, #644]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013de2:	430b      	orrs	r3, r1
 8013de4:	6513      	str	r3, [r2, #80]	@ 0x50
 8013de6:	e003      	b.n	8013df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8013df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8013dfc:	f04f 0900 	mov.w	r9, #0
 8013e00:	ea58 0309 	orrs.w	r3, r8, r9
 8013e04:	d047      	beq.n	8013e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8013e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	d82a      	bhi.n	8013e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8013e10:	a201      	add	r2, pc, #4	@ (adr r2, 8013e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8013e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e16:	bf00      	nop
 8013e18:	08013e2d 	.word	0x08013e2d
 8013e1c:	08013e3b 	.word	0x08013e3b
 8013e20:	08013e51 	.word	0x08013e51
 8013e24:	08013e6f 	.word	0x08013e6f
 8013e28:	08013e6f 	.word	0x08013e6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013e2c:	4b8e      	ldr	r3, [pc, #568]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e30:	4a8d      	ldr	r2, [pc, #564]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013e38:	e01a      	b.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e3e:	3308      	adds	r3, #8
 8013e40:	2100      	movs	r1, #0
 8013e42:	4618      	mov	r0, r3
 8013e44:	f002 fb0e 	bl	8016464 <RCCEx_PLL2_Config>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013e4e:	e00f      	b.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e54:	3328      	adds	r3, #40	@ 0x28
 8013e56:	2100      	movs	r1, #0
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f002 fbb5 	bl	80165c8 <RCCEx_PLL3_Config>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013e64:	e004      	b.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e66:	2301      	movs	r3, #1
 8013e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013e6c:	e000      	b.n	8013e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8013e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d10a      	bne.n	8013e8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013e78:	4b7b      	ldr	r3, [pc, #492]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e7c:	f023 0107 	bic.w	r1, r3, #7
 8013e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e86:	4a78      	ldr	r2, [pc, #480]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e88:	430b      	orrs	r3, r1
 8013e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8013e8c:	e003      	b.n	8013e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8013e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8013ea2:	f04f 0b00 	mov.w	fp, #0
 8013ea6:	ea5a 030b 	orrs.w	r3, sl, fp
 8013eaa:	d04c      	beq.n	8013f46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8013eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013eb6:	d030      	beq.n	8013f1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8013eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ebc:	d829      	bhi.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8013ec0:	d02d      	beq.n	8013f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8013ec4:	d825      	bhi.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013ec6:	2b80      	cmp	r3, #128	@ 0x80
 8013ec8:	d018      	beq.n	8013efc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8013eca:	2b80      	cmp	r3, #128	@ 0x80
 8013ecc:	d821      	bhi.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d002      	beq.n	8013ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8013ed2:	2b40      	cmp	r3, #64	@ 0x40
 8013ed4:	d007      	beq.n	8013ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8013ed6:	e01c      	b.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013ed8:	4b63      	ldr	r3, [pc, #396]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013edc:	4a62      	ldr	r2, [pc, #392]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013ee4:	e01c      	b.n	8013f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013eea:	3308      	adds	r3, #8
 8013eec:	2100      	movs	r1, #0
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f002 fab8 	bl	8016464 <RCCEx_PLL2_Config>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013efa:	e011      	b.n	8013f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f00:	3328      	adds	r3, #40	@ 0x28
 8013f02:	2100      	movs	r1, #0
 8013f04:	4618      	mov	r0, r3
 8013f06:	f002 fb5f 	bl	80165c8 <RCCEx_PLL3_Config>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013f10:	e006      	b.n	8013f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013f18:	e002      	b.n	8013f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8013f1a:	bf00      	nop
 8013f1c:	e000      	b.n	8013f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8013f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10a      	bne.n	8013f3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8013f28:	4b4f      	ldr	r3, [pc, #316]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8013f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f36:	4a4c      	ldr	r2, [pc, #304]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013f38:	430b      	orrs	r3, r1
 8013f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8013f3c:	e003      	b.n	8013f46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8013f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8013f52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013f56:	2300      	movs	r3, #0
 8013f58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8013f5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8013f60:	460b      	mov	r3, r1
 8013f62:	4313      	orrs	r3, r2
 8013f64:	d053      	beq.n	801400e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8013f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013f72:	d035      	beq.n	8013fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8013f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013f78:	d82e      	bhi.n	8013fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013f7e:	d031      	beq.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8013f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013f84:	d828      	bhi.n	8013fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f8a:	d01a      	beq.n	8013fc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8013f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f90:	d822      	bhi.n	8013fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d003      	beq.n	8013f9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8013f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013f9a:	d007      	beq.n	8013fac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8013f9c:	e01c      	b.n	8013fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013f9e:	4b32      	ldr	r3, [pc, #200]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fa2:	4a31      	ldr	r2, [pc, #196]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013faa:	e01c      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013fb0:	3308      	adds	r3, #8
 8013fb2:	2100      	movs	r1, #0
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f002 fa55 	bl	8016464 <RCCEx_PLL2_Config>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8013fc0:	e011      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013fc6:	3328      	adds	r3, #40	@ 0x28
 8013fc8:	2100      	movs	r1, #0
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f002 fafc 	bl	80165c8 <RCCEx_PLL3_Config>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013fd6:	e006      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8013fd8:	2301      	movs	r3, #1
 8013fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013fde:	e002      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8013fe0:	bf00      	nop
 8013fe2:	e000      	b.n	8013fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8013fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d10b      	bne.n	8014006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8013fee:	4b1e      	ldr	r3, [pc, #120]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ff2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8013ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013ffa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8014068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014000:	430b      	orrs	r3, r1
 8014002:	6593      	str	r3, [r2, #88]	@ 0x58
 8014004:	e003      	b.n	801400e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801400a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801401a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801401e:	2300      	movs	r3, #0
 8014020:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8014024:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8014028:	460b      	mov	r3, r1
 801402a:	4313      	orrs	r3, r2
 801402c:	d056      	beq.n	80140dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801403a:	d038      	beq.n	80140ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801403c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014040:	d831      	bhi.n	80140a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014042:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014046:	d034      	beq.n	80140b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8014048:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801404c:	d82b      	bhi.n	80140a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801404e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014052:	d01d      	beq.n	8014090 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8014054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014058:	d825      	bhi.n	80140a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801405a:	2b00      	cmp	r3, #0
 801405c:	d006      	beq.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801405e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014062:	d00a      	beq.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8014064:	e01f      	b.n	80140a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014066:	bf00      	nop
 8014068:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801406c:	4ba2      	ldr	r3, [pc, #648]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014070:	4aa1      	ldr	r2, [pc, #644]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014078:	e01c      	b.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801407e:	3308      	adds	r3, #8
 8014080:	2100      	movs	r1, #0
 8014082:	4618      	mov	r0, r3
 8014084:	f002 f9ee 	bl	8016464 <RCCEx_PLL2_Config>
 8014088:	4603      	mov	r3, r0
 801408a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801408e:	e011      	b.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014094:	3328      	adds	r3, #40	@ 0x28
 8014096:	2100      	movs	r1, #0
 8014098:	4618      	mov	r0, r3
 801409a:	f002 fa95 	bl	80165c8 <RCCEx_PLL3_Config>
 801409e:	4603      	mov	r3, r0
 80140a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80140a4:	e006      	b.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80140a6:	2301      	movs	r3, #1
 80140a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80140ac:	e002      	b.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80140ae:	bf00      	nop
 80140b0:	e000      	b.n	80140b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80140b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d10b      	bne.n	80140d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80140bc:	4b8e      	ldr	r3, [pc, #568]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80140be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80140c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80140cc:	4a8a      	ldr	r2, [pc, #552]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80140ce:	430b      	orrs	r3, r1
 80140d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80140d2:	e003      	b.n	80140dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80140d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80140dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80140e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80140ec:	2300      	movs	r3, #0
 80140ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80140f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80140f6:	460b      	mov	r3, r1
 80140f8:	4313      	orrs	r3, r2
 80140fa:	d03a      	beq.n	8014172 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80140fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014102:	2b30      	cmp	r3, #48	@ 0x30
 8014104:	d01f      	beq.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8014106:	2b30      	cmp	r3, #48	@ 0x30
 8014108:	d819      	bhi.n	801413e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801410a:	2b20      	cmp	r3, #32
 801410c:	d00c      	beq.n	8014128 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801410e:	2b20      	cmp	r3, #32
 8014110:	d815      	bhi.n	801413e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8014112:	2b00      	cmp	r3, #0
 8014114:	d019      	beq.n	801414a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8014116:	2b10      	cmp	r3, #16
 8014118:	d111      	bne.n	801413e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801411a:	4b77      	ldr	r3, [pc, #476]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801411e:	4a76      	ldr	r2, [pc, #472]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8014126:	e011      	b.n	801414c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801412c:	3308      	adds	r3, #8
 801412e:	2102      	movs	r1, #2
 8014130:	4618      	mov	r0, r3
 8014132:	f002 f997 	bl	8016464 <RCCEx_PLL2_Config>
 8014136:	4603      	mov	r3, r0
 8014138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801413c:	e006      	b.n	801414c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801413e:	2301      	movs	r3, #1
 8014140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014144:	e002      	b.n	801414c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8014146:	bf00      	nop
 8014148:	e000      	b.n	801414c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801414a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801414c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10a      	bne.n	801416a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8014154:	4b68      	ldr	r3, [pc, #416]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014158:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014162:	4a65      	ldr	r2, [pc, #404]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014164:	430b      	orrs	r3, r1
 8014166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014168:	e003      	b.n	8014172 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801416a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801416e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8014172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801417e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8014182:	2300      	movs	r3, #0
 8014184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014188:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801418c:	460b      	mov	r3, r1
 801418e:	4313      	orrs	r3, r2
 8014190:	d051      	beq.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8014192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801419c:	d035      	beq.n	801420a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801419e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80141a2:	d82e      	bhi.n	8014202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80141a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80141a8:	d031      	beq.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80141aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80141ae:	d828      	bhi.n	8014202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80141b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80141b4:	d01a      	beq.n	80141ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80141b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80141ba:	d822      	bhi.n	8014202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d003      	beq.n	80141c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80141c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80141c4:	d007      	beq.n	80141d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80141c6:	e01c      	b.n	8014202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80141c8:	4b4b      	ldr	r3, [pc, #300]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80141ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141cc:	4a4a      	ldr	r2, [pc, #296]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80141ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80141d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80141d4:	e01c      	b.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80141d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80141da:	3308      	adds	r3, #8
 80141dc:	2100      	movs	r1, #0
 80141de:	4618      	mov	r0, r3
 80141e0:	f002 f940 	bl	8016464 <RCCEx_PLL2_Config>
 80141e4:	4603      	mov	r3, r0
 80141e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80141ea:	e011      	b.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80141ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80141f0:	3328      	adds	r3, #40	@ 0x28
 80141f2:	2100      	movs	r1, #0
 80141f4:	4618      	mov	r0, r3
 80141f6:	f002 f9e7 	bl	80165c8 <RCCEx_PLL3_Config>
 80141fa:	4603      	mov	r3, r0
 80141fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014200:	e006      	b.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014202:	2301      	movs	r3, #1
 8014204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014208:	e002      	b.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801420a:	bf00      	nop
 801420c:	e000      	b.n	8014210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801420e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10a      	bne.n	801422e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8014218:	4b37      	ldr	r3, [pc, #220]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801421c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8014220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014226:	4a34      	ldr	r2, [pc, #208]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014228:	430b      	orrs	r3, r1
 801422a:	6513      	str	r3, [r2, #80]	@ 0x50
 801422c:	e003      	b.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801422e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8014236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8014242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014246:	2300      	movs	r3, #0
 8014248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801424c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8014250:	460b      	mov	r3, r1
 8014252:	4313      	orrs	r3, r2
 8014254:	d056      	beq.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8014256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801425a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801425c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014260:	d033      	beq.n	80142ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8014262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014266:	d82c      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014268:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801426c:	d02f      	beq.n	80142ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801426e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014272:	d826      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014278:	d02b      	beq.n	80142d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801427a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801427e:	d820      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014284:	d012      	beq.n	80142ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8014286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801428a:	d81a      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801428c:	2b00      	cmp	r3, #0
 801428e:	d022      	beq.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8014290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014294:	d115      	bne.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801429a:	3308      	adds	r3, #8
 801429c:	2101      	movs	r1, #1
 801429e:	4618      	mov	r0, r3
 80142a0:	f002 f8e0 	bl	8016464 <RCCEx_PLL2_Config>
 80142a4:	4603      	mov	r3, r0
 80142a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80142aa:	e015      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80142ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142b0:	3328      	adds	r3, #40	@ 0x28
 80142b2:	2101      	movs	r1, #1
 80142b4:	4618      	mov	r0, r3
 80142b6:	f002 f987 	bl	80165c8 <RCCEx_PLL3_Config>
 80142ba:	4603      	mov	r3, r0
 80142bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80142c0:	e00a      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80142c2:	2301      	movs	r3, #1
 80142c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80142c8:	e006      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80142ca:	bf00      	nop
 80142cc:	e004      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80142ce:	bf00      	nop
 80142d0:	e002      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80142d2:	bf00      	nop
 80142d4:	e000      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80142d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80142d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10d      	bne.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80142e0:	4b05      	ldr	r3, [pc, #20]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80142e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80142e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80142e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142ee:	4a02      	ldr	r2, [pc, #8]	@ (80142f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80142f0:	430b      	orrs	r3, r1
 80142f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80142f4:	e006      	b.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80142f6:	bf00      	nop
 80142f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80142fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8014304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8014310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014314:	2300      	movs	r3, #0
 8014316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801431a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801431e:	460b      	mov	r3, r1
 8014320:	4313      	orrs	r3, r2
 8014322:	d055      	beq.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8014324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801432c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014330:	d033      	beq.n	801439a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8014332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014336:	d82c      	bhi.n	8014392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801433c:	d02f      	beq.n	801439e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014342:	d826      	bhi.n	8014392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014348:	d02b      	beq.n	80143a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801434a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801434e:	d820      	bhi.n	8014392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014354:	d012      	beq.n	801437c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8014356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801435a:	d81a      	bhi.n	8014392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d022      	beq.n	80143a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8014360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014364:	d115      	bne.n	8014392 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801436a:	3308      	adds	r3, #8
 801436c:	2101      	movs	r1, #1
 801436e:	4618      	mov	r0, r3
 8014370:	f002 f878 	bl	8016464 <RCCEx_PLL2_Config>
 8014374:	4603      	mov	r3, r0
 8014376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801437a:	e015      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014380:	3328      	adds	r3, #40	@ 0x28
 8014382:	2101      	movs	r1, #1
 8014384:	4618      	mov	r0, r3
 8014386:	f002 f91f 	bl	80165c8 <RCCEx_PLL3_Config>
 801438a:	4603      	mov	r3, r0
 801438c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8014390:	e00a      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8014392:	2301      	movs	r3, #1
 8014394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014398:	e006      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801439a:	bf00      	nop
 801439c:	e004      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801439e:	bf00      	nop
 80143a0:	e002      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80143a2:	bf00      	nop
 80143a4:	e000      	b.n	80143a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80143a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80143a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10b      	bne.n	80143c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80143b0:	4ba3      	ldr	r3, [pc, #652]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80143b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80143b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80143b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80143c0:	4a9f      	ldr	r2, [pc, #636]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80143c2:	430b      	orrs	r3, r1
 80143c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80143c6:	e003      	b.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80143cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80143d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80143dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80143e0:	2300      	movs	r3, #0
 80143e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80143e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80143ea:	460b      	mov	r3, r1
 80143ec:	4313      	orrs	r3, r2
 80143ee:	d037      	beq.n	8014460 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80143f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80143fa:	d00e      	beq.n	801441a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80143fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014400:	d816      	bhi.n	8014430 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8014402:	2b00      	cmp	r3, #0
 8014404:	d018      	beq.n	8014438 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8014406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801440a:	d111      	bne.n	8014430 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801440c:	4b8c      	ldr	r3, [pc, #560]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014410:	4a8b      	ldr	r2, [pc, #556]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014418:	e00f      	b.n	801443a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801441e:	3308      	adds	r3, #8
 8014420:	2101      	movs	r1, #1
 8014422:	4618      	mov	r0, r3
 8014424:	f002 f81e 	bl	8016464 <RCCEx_PLL2_Config>
 8014428:	4603      	mov	r3, r0
 801442a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801442e:	e004      	b.n	801443a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014430:	2301      	movs	r3, #1
 8014432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014436:	e000      	b.n	801443a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8014438:	bf00      	nop
    }

    if (ret == HAL_OK)
 801443a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10a      	bne.n	8014458 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014442:	4b7f      	ldr	r3, [pc, #508]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014450:	4a7b      	ldr	r2, [pc, #492]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014452:	430b      	orrs	r3, r1
 8014454:	6513      	str	r3, [r2, #80]	@ 0x50
 8014456:	e003      	b.n	8014460 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801445c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8014460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801446c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014470:	2300      	movs	r3, #0
 8014472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8014476:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801447a:	460b      	mov	r3, r1
 801447c:	4313      	orrs	r3, r2
 801447e:	d039      	beq.n	80144f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8014480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014486:	2b03      	cmp	r3, #3
 8014488:	d81c      	bhi.n	80144c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801448a:	a201      	add	r2, pc, #4	@ (adr r2, 8014490 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014490:	080144cd 	.word	0x080144cd
 8014494:	080144a1 	.word	0x080144a1
 8014498:	080144af 	.word	0x080144af
 801449c:	080144cd 	.word	0x080144cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80144a0:	4b67      	ldr	r3, [pc, #412]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144a4:	4a66      	ldr	r2, [pc, #408]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80144aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80144ac:	e00f      	b.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80144ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80144b2:	3308      	adds	r3, #8
 80144b4:	2102      	movs	r1, #2
 80144b6:	4618      	mov	r0, r3
 80144b8:	f001 ffd4 	bl	8016464 <RCCEx_PLL2_Config>
 80144bc:	4603      	mov	r3, r0
 80144be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80144c2:	e004      	b.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80144c4:	2301      	movs	r3, #1
 80144c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80144ca:	e000      	b.n	80144ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80144cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80144ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d10a      	bne.n	80144ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80144d6:	4b5a      	ldr	r3, [pc, #360]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144da:	f023 0103 	bic.w	r1, r3, #3
 80144de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80144e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80144e4:	4a56      	ldr	r2, [pc, #344]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144e6:	430b      	orrs	r3, r1
 80144e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80144ea:	e003      	b.n	80144f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80144ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80144f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80144f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80144f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8014500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014504:	2300      	movs	r3, #0
 8014506:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801450a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801450e:	460b      	mov	r3, r1
 8014510:	4313      	orrs	r3, r2
 8014512:	f000 809f 	beq.w	8014654 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014516:	4b4b      	ldr	r3, [pc, #300]	@ (8014644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a4a      	ldr	r2, [pc, #296]	@ (8014644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014520:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014522:	f7fb fcfd 	bl	800ff20 <HAL_GetTick>
 8014526:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801452a:	e00b      	b.n	8014544 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801452c:	f7fb fcf8 	bl	800ff20 <HAL_GetTick>
 8014530:	4602      	mov	r2, r0
 8014532:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014536:	1ad3      	subs	r3, r2, r3
 8014538:	2b64      	cmp	r3, #100	@ 0x64
 801453a:	d903      	bls.n	8014544 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801453c:	2303      	movs	r3, #3
 801453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014542:	e005      	b.n	8014550 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014544:	4b3f      	ldr	r3, [pc, #252]	@ (8014644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801454c:	2b00      	cmp	r3, #0
 801454e:	d0ed      	beq.n	801452c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8014550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014554:	2b00      	cmp	r3, #0
 8014556:	d179      	bne.n	801464c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8014558:	4b39      	ldr	r3, [pc, #228]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801455a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014564:	4053      	eors	r3, r2
 8014566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801456a:	2b00      	cmp	r3, #0
 801456c:	d015      	beq.n	801459a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801456e:	4b34      	ldr	r3, [pc, #208]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014576:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801457a:	4b31      	ldr	r3, [pc, #196]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801457e:	4a30      	ldr	r2, [pc, #192]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014584:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014586:	4b2e      	ldr	r3, [pc, #184]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801458a:	4a2d      	ldr	r2, [pc, #180]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014590:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8014592:	4a2b      	ldr	r2, [pc, #172]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014598:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801459e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80145a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80145a6:	d118      	bne.n	80145da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145a8:	f7fb fcba 	bl	800ff20 <HAL_GetTick>
 80145ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80145b0:	e00d      	b.n	80145ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80145b2:	f7fb fcb5 	bl	800ff20 <HAL_GetTick>
 80145b6:	4602      	mov	r2, r0
 80145b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80145bc:	1ad2      	subs	r2, r2, r3
 80145be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d903      	bls.n	80145ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80145c6:	2303      	movs	r3, #3
 80145c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80145cc:	e005      	b.n	80145da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80145ce:	4b1c      	ldr	r3, [pc, #112]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80145d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145d2:	f003 0302 	and.w	r3, r3, #2
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d0eb      	beq.n	80145b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80145da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d129      	bne.n	8014636 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80145e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80145e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80145ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80145ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80145f2:	d10e      	bne.n	8014612 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80145f4:	4b12      	ldr	r3, [pc, #72]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80145fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014600:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014604:	091a      	lsrs	r2, r3, #4
 8014606:	4b10      	ldr	r3, [pc, #64]	@ (8014648 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8014608:	4013      	ands	r3, r2
 801460a:	4a0d      	ldr	r2, [pc, #52]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801460c:	430b      	orrs	r3, r1
 801460e:	6113      	str	r3, [r2, #16]
 8014610:	e005      	b.n	801461e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8014612:	4b0b      	ldr	r3, [pc, #44]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014614:	691b      	ldr	r3, [r3, #16]
 8014616:	4a0a      	ldr	r2, [pc, #40]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801461c:	6113      	str	r3, [r2, #16]
 801461e:	4b08      	ldr	r3, [pc, #32]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014620:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801462e:	4a04      	ldr	r2, [pc, #16]	@ (8014640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014630:	430b      	orrs	r3, r1
 8014632:	6713      	str	r3, [r2, #112]	@ 0x70
 8014634:	e00e      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801463e:	e009      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8014640:	58024400 	.word	0x58024400
 8014644:	58024800 	.word	0x58024800
 8014648:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801464c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8014654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465c:	f002 0301 	and.w	r3, r2, #1
 8014660:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014664:	2300      	movs	r3, #0
 8014666:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801466a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801466e:	460b      	mov	r3, r1
 8014670:	4313      	orrs	r3, r2
 8014672:	f000 8089 	beq.w	8014788 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8014676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801467a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801467c:	2b28      	cmp	r3, #40	@ 0x28
 801467e:	d86b      	bhi.n	8014758 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8014680:	a201      	add	r2, pc, #4	@ (adr r2, 8014688 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8014682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014686:	bf00      	nop
 8014688:	08014761 	.word	0x08014761
 801468c:	08014759 	.word	0x08014759
 8014690:	08014759 	.word	0x08014759
 8014694:	08014759 	.word	0x08014759
 8014698:	08014759 	.word	0x08014759
 801469c:	08014759 	.word	0x08014759
 80146a0:	08014759 	.word	0x08014759
 80146a4:	08014759 	.word	0x08014759
 80146a8:	0801472d 	.word	0x0801472d
 80146ac:	08014759 	.word	0x08014759
 80146b0:	08014759 	.word	0x08014759
 80146b4:	08014759 	.word	0x08014759
 80146b8:	08014759 	.word	0x08014759
 80146bc:	08014759 	.word	0x08014759
 80146c0:	08014759 	.word	0x08014759
 80146c4:	08014759 	.word	0x08014759
 80146c8:	08014743 	.word	0x08014743
 80146cc:	08014759 	.word	0x08014759
 80146d0:	08014759 	.word	0x08014759
 80146d4:	08014759 	.word	0x08014759
 80146d8:	08014759 	.word	0x08014759
 80146dc:	08014759 	.word	0x08014759
 80146e0:	08014759 	.word	0x08014759
 80146e4:	08014759 	.word	0x08014759
 80146e8:	08014761 	.word	0x08014761
 80146ec:	08014759 	.word	0x08014759
 80146f0:	08014759 	.word	0x08014759
 80146f4:	08014759 	.word	0x08014759
 80146f8:	08014759 	.word	0x08014759
 80146fc:	08014759 	.word	0x08014759
 8014700:	08014759 	.word	0x08014759
 8014704:	08014759 	.word	0x08014759
 8014708:	08014761 	.word	0x08014761
 801470c:	08014759 	.word	0x08014759
 8014710:	08014759 	.word	0x08014759
 8014714:	08014759 	.word	0x08014759
 8014718:	08014759 	.word	0x08014759
 801471c:	08014759 	.word	0x08014759
 8014720:	08014759 	.word	0x08014759
 8014724:	08014759 	.word	0x08014759
 8014728:	08014761 	.word	0x08014761
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014730:	3308      	adds	r3, #8
 8014732:	2101      	movs	r1, #1
 8014734:	4618      	mov	r0, r3
 8014736:	f001 fe95 	bl	8016464 <RCCEx_PLL2_Config>
 801473a:	4603      	mov	r3, r0
 801473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8014740:	e00f      	b.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014746:	3328      	adds	r3, #40	@ 0x28
 8014748:	2101      	movs	r1, #1
 801474a:	4618      	mov	r0, r3
 801474c:	f001 ff3c 	bl	80165c8 <RCCEx_PLL3_Config>
 8014750:	4603      	mov	r3, r0
 8014752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8014756:	e004      	b.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801475e:	e000      	b.n	8014762 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8014760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014766:	2b00      	cmp	r3, #0
 8014768:	d10a      	bne.n	8014780 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801476a:	4bbf      	ldr	r3, [pc, #764]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801476e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8014772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014778:	4abb      	ldr	r2, [pc, #748]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801477a:	430b      	orrs	r3, r1
 801477c:	6553      	str	r3, [r2, #84]	@ 0x54
 801477e:	e003      	b.n	8014788 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8014788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014790:	f002 0302 	and.w	r3, r2, #2
 8014794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014798:	2300      	movs	r3, #0
 801479a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801479e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80147a2:	460b      	mov	r3, r1
 80147a4:	4313      	orrs	r3, r2
 80147a6:	d041      	beq.n	801482c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80147a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147ae:	2b05      	cmp	r3, #5
 80147b0:	d824      	bhi.n	80147fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80147b2:	a201      	add	r2, pc, #4	@ (adr r2, 80147b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80147b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b8:	08014805 	.word	0x08014805
 80147bc:	080147d1 	.word	0x080147d1
 80147c0:	080147e7 	.word	0x080147e7
 80147c4:	08014805 	.word	0x08014805
 80147c8:	08014805 	.word	0x08014805
 80147cc:	08014805 	.word	0x08014805
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80147d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147d4:	3308      	adds	r3, #8
 80147d6:	2101      	movs	r1, #1
 80147d8:	4618      	mov	r0, r3
 80147da:	f001 fe43 	bl	8016464 <RCCEx_PLL2_Config>
 80147de:	4603      	mov	r3, r0
 80147e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80147e4:	e00f      	b.n	8014806 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80147e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147ea:	3328      	adds	r3, #40	@ 0x28
 80147ec:	2101      	movs	r1, #1
 80147ee:	4618      	mov	r0, r3
 80147f0:	f001 feea 	bl	80165c8 <RCCEx_PLL3_Config>
 80147f4:	4603      	mov	r3, r0
 80147f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80147fa:	e004      	b.n	8014806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80147fc:	2301      	movs	r3, #1
 80147fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014802:	e000      	b.n	8014806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8014804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10a      	bne.n	8014824 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801480e:	4b96      	ldr	r3, [pc, #600]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014812:	f023 0107 	bic.w	r1, r3, #7
 8014816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801481a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801481c:	4a92      	ldr	r2, [pc, #584]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801481e:	430b      	orrs	r3, r1
 8014820:	6553      	str	r3, [r2, #84]	@ 0x54
 8014822:	e003      	b.n	801482c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014834:	f002 0304 	and.w	r3, r2, #4
 8014838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801483c:	2300      	movs	r3, #0
 801483e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014842:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8014846:	460b      	mov	r3, r1
 8014848:	4313      	orrs	r3, r2
 801484a:	d044      	beq.n	80148d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014854:	2b05      	cmp	r3, #5
 8014856:	d825      	bhi.n	80148a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8014858:	a201      	add	r2, pc, #4	@ (adr r2, 8014860 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801485e:	bf00      	nop
 8014860:	080148ad 	.word	0x080148ad
 8014864:	08014879 	.word	0x08014879
 8014868:	0801488f 	.word	0x0801488f
 801486c:	080148ad 	.word	0x080148ad
 8014870:	080148ad 	.word	0x080148ad
 8014874:	080148ad 	.word	0x080148ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801487c:	3308      	adds	r3, #8
 801487e:	2101      	movs	r1, #1
 8014880:	4618      	mov	r0, r3
 8014882:	f001 fdef 	bl	8016464 <RCCEx_PLL2_Config>
 8014886:	4603      	mov	r3, r0
 8014888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801488c:	e00f      	b.n	80148ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014892:	3328      	adds	r3, #40	@ 0x28
 8014894:	2101      	movs	r1, #1
 8014896:	4618      	mov	r0, r3
 8014898:	f001 fe96 	bl	80165c8 <RCCEx_PLL3_Config>
 801489c:	4603      	mov	r3, r0
 801489e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80148a2:	e004      	b.n	80148ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148a4:	2301      	movs	r3, #1
 80148a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80148aa:	e000      	b.n	80148ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80148ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d10b      	bne.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80148b6:	4b6c      	ldr	r3, [pc, #432]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80148b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148ba:	f023 0107 	bic.w	r1, r3, #7
 80148be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80148c6:	4a68      	ldr	r2, [pc, #416]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80148c8:	430b      	orrs	r3, r1
 80148ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80148cc:	e003      	b.n	80148d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80148d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80148d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148de:	f002 0320 	and.w	r3, r2, #32
 80148e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80148e6:	2300      	movs	r3, #0
 80148e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80148ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80148f0:	460b      	mov	r3, r1
 80148f2:	4313      	orrs	r3, r2
 80148f4:	d055      	beq.n	80149a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80148f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014902:	d033      	beq.n	801496c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8014904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014908:	d82c      	bhi.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801490a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801490e:	d02f      	beq.n	8014970 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8014910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014914:	d826      	bhi.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8014916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801491a:	d02b      	beq.n	8014974 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801491c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014920:	d820      	bhi.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8014922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014926:	d012      	beq.n	801494e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8014928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801492c:	d81a      	bhi.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801492e:	2b00      	cmp	r3, #0
 8014930:	d022      	beq.n	8014978 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8014932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014936:	d115      	bne.n	8014964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801493c:	3308      	adds	r3, #8
 801493e:	2100      	movs	r1, #0
 8014940:	4618      	mov	r0, r3
 8014942:	f001 fd8f 	bl	8016464 <RCCEx_PLL2_Config>
 8014946:	4603      	mov	r3, r0
 8014948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801494c:	e015      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014952:	3328      	adds	r3, #40	@ 0x28
 8014954:	2102      	movs	r1, #2
 8014956:	4618      	mov	r0, r3
 8014958:	f001 fe36 	bl	80165c8 <RCCEx_PLL3_Config>
 801495c:	4603      	mov	r3, r0
 801495e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014962:	e00a      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014964:	2301      	movs	r3, #1
 8014966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801496a:	e006      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801496c:	bf00      	nop
 801496e:	e004      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8014970:	bf00      	nop
 8014972:	e002      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8014974:	bf00      	nop
 8014976:	e000      	b.n	801497a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8014978:	bf00      	nop
    }

    if (ret == HAL_OK)
 801497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801497e:	2b00      	cmp	r3, #0
 8014980:	d10b      	bne.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014982:	4b39      	ldr	r3, [pc, #228]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014986:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014992:	4a35      	ldr	r2, [pc, #212]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014994:	430b      	orrs	r3, r1
 8014996:	6553      	str	r3, [r2, #84]	@ 0x54
 8014998:	e003      	b.n	80149a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801499a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801499e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80149a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80149ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80149b2:	2300      	movs	r3, #0
 80149b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80149b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80149bc:	460b      	mov	r3, r1
 80149be:	4313      	orrs	r3, r2
 80149c0:	d058      	beq.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80149c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80149ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80149ce:	d033      	beq.n	8014a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80149d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80149d4:	d82c      	bhi.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80149d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80149da:	d02f      	beq.n	8014a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80149dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80149e0:	d826      	bhi.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80149e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80149e6:	d02b      	beq.n	8014a40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80149e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80149ec:	d820      	bhi.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80149ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80149f2:	d012      	beq.n	8014a1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80149f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80149f8:	d81a      	bhi.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d022      	beq.n	8014a44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80149fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014a02:	d115      	bne.n	8014a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a08:	3308      	adds	r3, #8
 8014a0a:	2100      	movs	r1, #0
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f001 fd29 	bl	8016464 <RCCEx_PLL2_Config>
 8014a12:	4603      	mov	r3, r0
 8014a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014a18:	e015      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a1e:	3328      	adds	r3, #40	@ 0x28
 8014a20:	2102      	movs	r1, #2
 8014a22:	4618      	mov	r0, r3
 8014a24:	f001 fdd0 	bl	80165c8 <RCCEx_PLL3_Config>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014a2e:	e00a      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a30:	2301      	movs	r3, #1
 8014a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014a36:	e006      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014a38:	bf00      	nop
 8014a3a:	e004      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014a3c:	bf00      	nop
 8014a3e:	e002      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014a40:	bf00      	nop
 8014a42:	e000      	b.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d10e      	bne.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014a4e:	4b06      	ldr	r3, [pc, #24]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8014a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014a5e:	4a02      	ldr	r2, [pc, #8]	@ (8014a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014a60:	430b      	orrs	r3, r1
 8014a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8014a64:	e006      	b.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8014a66:	bf00      	nop
 8014a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8014a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8014a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014a84:	2300      	movs	r3, #0
 8014a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014a8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8014a8e:	460b      	mov	r3, r1
 8014a90:	4313      	orrs	r3, r2
 8014a92:	d055      	beq.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8014a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014a9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8014aa0:	d033      	beq.n	8014b0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8014aa2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8014aa6:	d82c      	bhi.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014aac:	d02f      	beq.n	8014b0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8014aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014ab2:	d826      	bhi.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014ab4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014ab8:	d02b      	beq.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8014aba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014abe:	d820      	bhi.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014ac4:	d012      	beq.n	8014aec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8014ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014aca:	d81a      	bhi.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d022      	beq.n	8014b16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8014ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014ad4:	d115      	bne.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ada:	3308      	adds	r3, #8
 8014adc:	2100      	movs	r1, #0
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f001 fcc0 	bl	8016464 <RCCEx_PLL2_Config>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014aea:	e015      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014af0:	3328      	adds	r3, #40	@ 0x28
 8014af2:	2102      	movs	r1, #2
 8014af4:	4618      	mov	r0, r3
 8014af6:	f001 fd67 	bl	80165c8 <RCCEx_PLL3_Config>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014b00:	e00a      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014b08:	e006      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014b0a:	bf00      	nop
 8014b0c:	e004      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014b0e:	bf00      	nop
 8014b10:	e002      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014b12:	bf00      	nop
 8014b14:	e000      	b.n	8014b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d10b      	bne.n	8014b38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014b20:	4ba1      	ldr	r3, [pc, #644]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8014b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014b30:	4a9d      	ldr	r2, [pc, #628]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b32:	430b      	orrs	r3, r1
 8014b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8014b36:	e003      	b.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8014b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b48:	f002 0308 	and.w	r3, r2, #8
 8014b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014b50:	2300      	movs	r3, #0
 8014b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014b56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	4313      	orrs	r3, r2
 8014b5e:	d01e      	beq.n	8014b9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8014b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014b6c:	d10c      	bne.n	8014b88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b72:	3328      	adds	r3, #40	@ 0x28
 8014b74:	2102      	movs	r1, #2
 8014b76:	4618      	mov	r0, r3
 8014b78:	f001 fd26 	bl	80165c8 <RCCEx_PLL3_Config>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d002      	beq.n	8014b88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8014b82:	2301      	movs	r3, #1
 8014b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8014b88:	4b87      	ldr	r3, [pc, #540]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b98:	4a83      	ldr	r2, [pc, #524]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b9a:	430b      	orrs	r3, r1
 8014b9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba6:	f002 0310 	and.w	r3, r2, #16
 8014baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014bae:	2300      	movs	r3, #0
 8014bb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014bb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4313      	orrs	r3, r2
 8014bbc:	d01e      	beq.n	8014bfc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8014bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014bca:	d10c      	bne.n	8014be6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bd0:	3328      	adds	r3, #40	@ 0x28
 8014bd2:	2102      	movs	r1, #2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f001 fcf7 	bl	80165c8 <RCCEx_PLL3_Config>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8014be0:	2301      	movs	r3, #1
 8014be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8014be6:	4b70      	ldr	r3, [pc, #448]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014bf8:	430b      	orrs	r3, r1
 8014bfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8014c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014c12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8014c16:	460b      	mov	r3, r1
 8014c18:	4313      	orrs	r3, r2
 8014c1a:	d03e      	beq.n	8014c9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8014c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014c28:	d022      	beq.n	8014c70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8014c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014c2e:	d81b      	bhi.n	8014c68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d003      	beq.n	8014c3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8014c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c38:	d00b      	beq.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8014c3a:	e015      	b.n	8014c68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c40:	3308      	adds	r3, #8
 8014c42:	2100      	movs	r1, #0
 8014c44:	4618      	mov	r0, r3
 8014c46:	f001 fc0d 	bl	8016464 <RCCEx_PLL2_Config>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014c50:	e00f      	b.n	8014c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c56:	3328      	adds	r3, #40	@ 0x28
 8014c58:	2102      	movs	r1, #2
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f001 fcb4 	bl	80165c8 <RCCEx_PLL3_Config>
 8014c60:	4603      	mov	r3, r0
 8014c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014c66:	e004      	b.n	8014c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014c6e:	e000      	b.n	8014c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8014c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d10b      	bne.n	8014c92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c8a:	4a47      	ldr	r2, [pc, #284]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c8c:	430b      	orrs	r3, r1
 8014c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8014c90:	e003      	b.n	8014c9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8014c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8014ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014ca8:	2300      	movs	r3, #0
 8014caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014cac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	4313      	orrs	r3, r2
 8014cb4:	d03b      	beq.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8014cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014cbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014cc2:	d01f      	beq.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8014cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014cc8:	d818      	bhi.n	8014cfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8014cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014cce:	d003      	beq.n	8014cd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8014cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014cd4:	d007      	beq.n	8014ce6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8014cd6:	e011      	b.n	8014cfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014cd8:	4b33      	ldr	r3, [pc, #204]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cdc:	4a32      	ldr	r2, [pc, #200]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8014ce4:	e00f      	b.n	8014d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014cea:	3328      	adds	r3, #40	@ 0x28
 8014cec:	2101      	movs	r1, #1
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f001 fc6a 	bl	80165c8 <RCCEx_PLL3_Config>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8014cfa:	e004      	b.n	8014d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014d02:	e000      	b.n	8014d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8014d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d10b      	bne.n	8014d26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014d0e:	4b26      	ldr	r3, [pc, #152]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d1e:	4a22      	ldr	r2, [pc, #136]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014d20:	430b      	orrs	r3, r1
 8014d22:	6553      	str	r3, [r2, #84]	@ 0x54
 8014d24:	e003      	b.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8014d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8014d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8014d40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8014d44:	460b      	mov	r3, r1
 8014d46:	4313      	orrs	r3, r2
 8014d48:	d034      	beq.n	8014db4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8014d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d003      	beq.n	8014d5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8014d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d58:	d007      	beq.n	8014d6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8014d5a:	e011      	b.n	8014d80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d5c:	4b12      	ldr	r3, [pc, #72]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d60:	4a11      	ldr	r2, [pc, #68]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014d68:	e00e      	b.n	8014d88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d6e:	3308      	adds	r3, #8
 8014d70:	2102      	movs	r1, #2
 8014d72:	4618      	mov	r0, r3
 8014d74:	f001 fb76 	bl	8016464 <RCCEx_PLL2_Config>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014d7e:	e003      	b.n	8014d88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8014d80:	2301      	movs	r3, #1
 8014d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d10d      	bne.n	8014dac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8014d90:	4b05      	ldr	r3, [pc, #20]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d9e:	4a02      	ldr	r2, [pc, #8]	@ (8014da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014da0:	430b      	orrs	r3, r1
 8014da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014da4:	e006      	b.n	8014db4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8014da6:	bf00      	nop
 8014da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8014dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014dc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014dca:	460b      	mov	r3, r1
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	d00c      	beq.n	8014dea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014dd4:	3328      	adds	r3, #40	@ 0x28
 8014dd6:	2102      	movs	r1, #2
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f001 fbf5 	bl	80165c8 <RCCEx_PLL3_Config>
 8014dde:	4603      	mov	r3, r0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d002      	beq.n	8014dea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8014de4:	2301      	movs	r3, #1
 8014de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8014dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8014df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8014df8:	2300      	movs	r3, #0
 8014dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8014dfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8014e00:	460b      	mov	r3, r1
 8014e02:	4313      	orrs	r3, r2
 8014e04:	d038      	beq.n	8014e78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8014e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e12:	d018      	beq.n	8014e46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8014e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e18:	d811      	bhi.n	8014e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8014e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e1e:	d014      	beq.n	8014e4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8014e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e24:	d80b      	bhi.n	8014e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d011      	beq.n	8014e4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8014e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e2e:	d106      	bne.n	8014e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014e30:	4bc3      	ldr	r3, [pc, #780]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e34:	4ac2      	ldr	r2, [pc, #776]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014e3c:	e008      	b.n	8014e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014e3e:	2301      	movs	r3, #1
 8014e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014e44:	e004      	b.n	8014e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014e46:	bf00      	nop
 8014e48:	e002      	b.n	8014e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014e4a:	bf00      	nop
 8014e4c:	e000      	b.n	8014e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d10b      	bne.n	8014e70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014e58:	4bb9      	ldr	r3, [pc, #740]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e68:	4ab5      	ldr	r2, [pc, #724]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e6a:	430b      	orrs	r3, r1
 8014e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8014e6e:	e003      	b.n	8014e78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014e86:	2300      	movs	r3, #0
 8014e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014e8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8014e8e:	460b      	mov	r3, r1
 8014e90:	4313      	orrs	r3, r2
 8014e92:	d009      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014e94:	4baa      	ldr	r3, [pc, #680]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ea2:	4aa7      	ldr	r2, [pc, #668]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ea4:	430b      	orrs	r3, r1
 8014ea6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8014ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8014eb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8014eba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	4313      	orrs	r3, r2
 8014ec2:	d00a      	beq.n	8014eda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8014ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ec6:	691b      	ldr	r3, [r3, #16]
 8014ec8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8014ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014ed4:	4a9a      	ldr	r2, [pc, #616]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ed6:	430b      	orrs	r3, r1
 8014ed8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8014ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ee8:	2300      	movs	r3, #0
 8014eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014eec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	4313      	orrs	r3, r2
 8014ef4:	d009      	beq.n	8014f0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014ef6:	4b92      	ldr	r3, [pc, #584]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014efa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8014efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f04:	4a8e      	ldr	r2, [pc, #568]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f06:	430b      	orrs	r3, r1
 8014f08:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8014f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8014f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f18:	2300      	movs	r3, #0
 8014f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8014f1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8014f20:	460b      	mov	r3, r1
 8014f22:	4313      	orrs	r3, r2
 8014f24:	d00e      	beq.n	8014f44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014f26:	4b86      	ldr	r3, [pc, #536]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f28:	691b      	ldr	r3, [r3, #16]
 8014f2a:	4a85      	ldr	r2, [pc, #532]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8014f30:	6113      	str	r3, [r2, #16]
 8014f32:	4b83      	ldr	r3, [pc, #524]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f34:	6919      	ldr	r1, [r3, #16]
 8014f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014f3e:	4a80      	ldr	r2, [pc, #512]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f40:	430b      	orrs	r3, r1
 8014f42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8014f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f4c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8014f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014f52:	2300      	movs	r3, #0
 8014f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	d009      	beq.n	8014f74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8014f60:	4b77      	ldr	r3, [pc, #476]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8014f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f6e:	4a74      	ldr	r2, [pc, #464]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f70:	430b      	orrs	r3, r1
 8014f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8014f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8014f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f82:	2300      	movs	r3, #0
 8014f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	4313      	orrs	r3, r2
 8014f8e:	d00a      	beq.n	8014fa6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8014f90:	4b6b      	ldr	r3, [pc, #428]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f94:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8014f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014fa0:	4a67      	ldr	r2, [pc, #412]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014fa2:	430b      	orrs	r3, r1
 8014fa4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8014fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fae:	2100      	movs	r1, #0
 8014fb0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8014fb2:	f003 0301 	and.w	r3, r3, #1
 8014fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014fb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	4313      	orrs	r3, r2
 8014fc0:	d011      	beq.n	8014fe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fc6:	3308      	adds	r3, #8
 8014fc8:	2100      	movs	r1, #0
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f001 fa4a 	bl	8016464 <RCCEx_PLL2_Config>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8014fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d003      	beq.n	8014fe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8014fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fee:	2100      	movs	r1, #0
 8014ff0:	6239      	str	r1, [r7, #32]
 8014ff2:	f003 0302 	and.w	r3, r3, #2
 8014ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ff8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	4313      	orrs	r3, r2
 8015000:	d011      	beq.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015006:	3308      	adds	r3, #8
 8015008:	2101      	movs	r1, #1
 801500a:	4618      	mov	r0, r3
 801500c:	f001 fa2a 	bl	8016464 <RCCEx_PLL2_Config>
 8015010:	4603      	mov	r3, r0
 8015012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801501a:	2b00      	cmp	r3, #0
 801501c:	d003      	beq.n	8015026 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801501e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8015026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502e:	2100      	movs	r1, #0
 8015030:	61b9      	str	r1, [r7, #24]
 8015032:	f003 0304 	and.w	r3, r3, #4
 8015036:	61fb      	str	r3, [r7, #28]
 8015038:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801503c:	460b      	mov	r3, r1
 801503e:	4313      	orrs	r3, r2
 8015040:	d011      	beq.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015046:	3308      	adds	r3, #8
 8015048:	2102      	movs	r1, #2
 801504a:	4618      	mov	r0, r3
 801504c:	f001 fa0a 	bl	8016464 <RCCEx_PLL2_Config>
 8015050:	4603      	mov	r3, r0
 8015052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801505a:	2b00      	cmp	r3, #0
 801505c:	d003      	beq.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801505e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8015066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506e:	2100      	movs	r1, #0
 8015070:	6139      	str	r1, [r7, #16]
 8015072:	f003 0308 	and.w	r3, r3, #8
 8015076:	617b      	str	r3, [r7, #20]
 8015078:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801507c:	460b      	mov	r3, r1
 801507e:	4313      	orrs	r3, r2
 8015080:	d011      	beq.n	80150a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015086:	3328      	adds	r3, #40	@ 0x28
 8015088:	2100      	movs	r1, #0
 801508a:	4618      	mov	r0, r3
 801508c:	f001 fa9c 	bl	80165c8 <RCCEx_PLL3_Config>
 8015090:	4603      	mov	r3, r0
 8015092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8015096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801509e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80150a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80150a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80150aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ae:	2100      	movs	r1, #0
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	f003 0310 	and.w	r3, r3, #16
 80150b6:	60fb      	str	r3, [r7, #12]
 80150b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80150bc:	460b      	mov	r3, r1
 80150be:	4313      	orrs	r3, r2
 80150c0:	d011      	beq.n	80150e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80150c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80150c6:	3328      	adds	r3, #40	@ 0x28
 80150c8:	2101      	movs	r1, #1
 80150ca:	4618      	mov	r0, r3
 80150cc:	f001 fa7c 	bl	80165c8 <RCCEx_PLL3_Config>
 80150d0:	4603      	mov	r3, r0
 80150d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80150d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d003      	beq.n	80150e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80150e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80150e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80150ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ee:	2100      	movs	r1, #0
 80150f0:	6039      	str	r1, [r7, #0]
 80150f2:	f003 0320 	and.w	r3, r3, #32
 80150f6:	607b      	str	r3, [r7, #4]
 80150f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80150fc:	460b      	mov	r3, r1
 80150fe:	4313      	orrs	r3, r2
 8015100:	d011      	beq.n	8015126 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015106:	3328      	adds	r3, #40	@ 0x28
 8015108:	2102      	movs	r1, #2
 801510a:	4618      	mov	r0, r3
 801510c:	f001 fa5c 	bl	80165c8 <RCCEx_PLL3_Config>
 8015110:	4603      	mov	r3, r0
 8015112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801511a:	2b00      	cmp	r3, #0
 801511c:	d003      	beq.n	8015126 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801511e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8015126:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801512a:	2b00      	cmp	r3, #0
 801512c:	d101      	bne.n	8015132 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801512e:	2300      	movs	r3, #0
 8015130:	e000      	b.n	8015134 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8015132:	2301      	movs	r3, #1
}
 8015134:	4618      	mov	r0, r3
 8015136:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801513a:	46bd      	mov	sp, r7
 801513c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015140:	58024400 	.word	0x58024400

08015144 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b090      	sub	sp, #64	@ 0x40
 8015148:	af00      	add	r7, sp, #0
 801514a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801514e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015152:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8015156:	430b      	orrs	r3, r1
 8015158:	f040 8094 	bne.w	8015284 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801515c:	4b9e      	ldr	r3, [pc, #632]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801515e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015160:	f003 0307 	and.w	r3, r3, #7
 8015164:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015168:	2b04      	cmp	r3, #4
 801516a:	f200 8087 	bhi.w	801527c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801516e:	a201      	add	r2, pc, #4	@ (adr r2, 8015174 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8015170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015174:	08015189 	.word	0x08015189
 8015178:	080151b1 	.word	0x080151b1
 801517c:	080151d9 	.word	0x080151d9
 8015180:	08015275 	.word	0x08015275
 8015184:	08015201 	.word	0x08015201
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015188:	4b93      	ldr	r3, [pc, #588]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015194:	d108      	bne.n	80151a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801519a:	4618      	mov	r0, r3
 801519c:	f001 f810 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80151a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80151a4:	f000 bd45 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80151a8:	2300      	movs	r3, #0
 80151aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151ac:	f000 bd41 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80151b0:	4b89      	ldr	r3, [pc, #548]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80151b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80151bc:	d108      	bne.n	80151d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80151be:	f107 0318 	add.w	r3, r7, #24
 80151c2:	4618      	mov	r0, r3
 80151c4:	f000 fd54 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80151c8:	69bb      	ldr	r3, [r7, #24]
 80151ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80151cc:	f000 bd31 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80151d0:	2300      	movs	r3, #0
 80151d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151d4:	f000 bd2d 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80151d8:	4b7f      	ldr	r3, [pc, #508]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80151e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80151e4:	d108      	bne.n	80151f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80151e6:	f107 030c 	add.w	r3, r7, #12
 80151ea:	4618      	mov	r0, r3
 80151ec:	f000 fe94 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80151f4:	f000 bd1d 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80151f8:	2300      	movs	r3, #0
 80151fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151fc:	f000 bd19 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015200:	4b75      	ldr	r3, [pc, #468]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015208:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801520a:	4b73      	ldr	r3, [pc, #460]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	f003 0304 	and.w	r3, r3, #4
 8015212:	2b04      	cmp	r3, #4
 8015214:	d10c      	bne.n	8015230 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8015216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015218:	2b00      	cmp	r3, #0
 801521a:	d109      	bne.n	8015230 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801521c:	4b6e      	ldr	r3, [pc, #440]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	08db      	lsrs	r3, r3, #3
 8015222:	f003 0303 	and.w	r3, r3, #3
 8015226:	4a6d      	ldr	r2, [pc, #436]	@ (80153dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8015228:	fa22 f303 	lsr.w	r3, r2, r3
 801522c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801522e:	e01f      	b.n	8015270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015230:	4b69      	ldr	r3, [pc, #420]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801523c:	d106      	bne.n	801524c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015244:	d102      	bne.n	801524c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015246:	4b66      	ldr	r3, [pc, #408]	@ (80153e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8015248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801524a:	e011      	b.n	8015270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801524c:	4b62      	ldr	r3, [pc, #392]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015258:	d106      	bne.n	8015268 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801525a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801525c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015260:	d102      	bne.n	8015268 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015262:	4b60      	ldr	r3, [pc, #384]	@ (80153e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8015264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015266:	e003      	b.n	8015270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015268:	2300      	movs	r3, #0
 801526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801526c:	f000 bce1 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015270:	f000 bcdf 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015274:	4b5c      	ldr	r3, [pc, #368]	@ (80153e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8015276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015278:	f000 bcdb 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801527c:	2300      	movs	r3, #0
 801527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015280:	f000 bcd7 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8015284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015288:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801528c:	430b      	orrs	r3, r1
 801528e:	f040 80ad 	bne.w	80153ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8015292:	4b51      	ldr	r3, [pc, #324]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015296:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801529a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801529e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80152a2:	d056      	beq.n	8015352 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80152a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80152aa:	f200 8090 	bhi.w	80153ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80152ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80152b2:	f000 8088 	beq.w	80153c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80152b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80152ba:	f200 8088 	bhi.w	80153ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80152be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152c0:	2b80      	cmp	r3, #128	@ 0x80
 80152c2:	d032      	beq.n	801532a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80152c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152c6:	2b80      	cmp	r3, #128	@ 0x80
 80152c8:	f200 8081 	bhi.w	80153ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80152cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d003      	beq.n	80152da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80152d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152d4:	2b40      	cmp	r3, #64	@ 0x40
 80152d6:	d014      	beq.n	8015302 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80152d8:	e079      	b.n	80153ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80152da:	4b3f      	ldr	r3, [pc, #252]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80152e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80152e6:	d108      	bne.n	80152fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80152e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80152ec:	4618      	mov	r0, r3
 80152ee:	f000 ff67 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80152f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80152f6:	f000 bc9c 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80152fa:	2300      	movs	r3, #0
 80152fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80152fe:	f000 bc98 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015302:	4b35      	ldr	r3, [pc, #212]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801530a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801530e:	d108      	bne.n	8015322 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015310:	f107 0318 	add.w	r3, r7, #24
 8015314:	4618      	mov	r0, r3
 8015316:	f000 fcab 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801531e:	f000 bc88 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015322:	2300      	movs	r3, #0
 8015324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015326:	f000 bc84 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801532a:	4b2b      	ldr	r3, [pc, #172]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015336:	d108      	bne.n	801534a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015338:	f107 030c 	add.w	r3, r7, #12
 801533c:	4618      	mov	r0, r3
 801533e:	f000 fdeb 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015346:	f000 bc74 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801534e:	f000 bc70 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015352:	4b21      	ldr	r3, [pc, #132]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015356:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801535a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801535c:	4b1e      	ldr	r3, [pc, #120]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	f003 0304 	and.w	r3, r3, #4
 8015364:	2b04      	cmp	r3, #4
 8015366:	d10c      	bne.n	8015382 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8015368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801536a:	2b00      	cmp	r3, #0
 801536c:	d109      	bne.n	8015382 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801536e:	4b1a      	ldr	r3, [pc, #104]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	08db      	lsrs	r3, r3, #3
 8015374:	f003 0303 	and.w	r3, r3, #3
 8015378:	4a18      	ldr	r2, [pc, #96]	@ (80153dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801537a:	fa22 f303 	lsr.w	r3, r2, r3
 801537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015380:	e01f      	b.n	80153c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015382:	4b15      	ldr	r3, [pc, #84]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801538a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801538e:	d106      	bne.n	801539e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8015390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015396:	d102      	bne.n	801539e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015398:	4b11      	ldr	r3, [pc, #68]	@ (80153e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801539a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801539c:	e011      	b.n	80153c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801539e:	4b0e      	ldr	r3, [pc, #56]	@ (80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80153a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80153aa:	d106      	bne.n	80153ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80153ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80153b2:	d102      	bne.n	80153ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80153b4:	4b0b      	ldr	r3, [pc, #44]	@ (80153e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80153b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80153b8:	e003      	b.n	80153c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80153ba:	2300      	movs	r3, #0
 80153bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80153be:	f000 bc38 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80153c2:	f000 bc36 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80153c6:	4b08      	ldr	r3, [pc, #32]	@ (80153e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80153c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80153ca:	f000 bc32 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80153d2:	f000 bc2e 	b.w	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80153d6:	bf00      	nop
 80153d8:	58024400 	.word	0x58024400
 80153dc:	03d09000 	.word	0x03d09000
 80153e0:	003d0900 	.word	0x003d0900
 80153e4:	017d7840 	.word	0x017d7840
 80153e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80153ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80153f4:	430b      	orrs	r3, r1
 80153f6:	f040 809c 	bne.w	8015532 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80153fa:	4b9e      	ldr	r3, [pc, #632]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80153fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153fe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8015402:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015406:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801540a:	d054      	beq.n	80154b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801540e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015412:	f200 808b 	bhi.w	801552c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8015416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015418:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801541c:	f000 8083 	beq.w	8015526 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8015420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015422:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015426:	f200 8081 	bhi.w	801552c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801542c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015430:	d02f      	beq.n	8015492 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8015432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015438:	d878      	bhi.n	801552c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543c:	2b00      	cmp	r3, #0
 801543e:	d004      	beq.n	801544a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8015440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015446:	d012      	beq.n	801546e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8015448:	e070      	b.n	801552c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801544a:	4b8a      	ldr	r3, [pc, #552]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015456:	d107      	bne.n	8015468 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801545c:	4618      	mov	r0, r3
 801545e:	f000 feaf 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015466:	e3e4      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015468:	2300      	movs	r3, #0
 801546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801546c:	e3e1      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801546e:	4b81      	ldr	r3, [pc, #516]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801547a:	d107      	bne.n	801548c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801547c:	f107 0318 	add.w	r3, r7, #24
 8015480:	4618      	mov	r0, r3
 8015482:	f000 fbf5 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801548a:	e3d2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801548c:	2300      	movs	r3, #0
 801548e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015490:	e3cf      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015492:	4b78      	ldr	r3, [pc, #480]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801549a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801549e:	d107      	bne.n	80154b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80154a0:	f107 030c 	add.w	r3, r7, #12
 80154a4:	4618      	mov	r0, r3
 80154a6:	f000 fd37 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80154ae:	e3c0      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80154b0:	2300      	movs	r3, #0
 80154b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80154b4:	e3bd      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80154b6:	4b6f      	ldr	r3, [pc, #444]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80154b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80154be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80154c0:	4b6c      	ldr	r3, [pc, #432]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f003 0304 	and.w	r3, r3, #4
 80154c8:	2b04      	cmp	r3, #4
 80154ca:	d10c      	bne.n	80154e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80154cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80154d2:	4b68      	ldr	r3, [pc, #416]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	08db      	lsrs	r3, r3, #3
 80154d8:	f003 0303 	and.w	r3, r3, #3
 80154dc:	4a66      	ldr	r2, [pc, #408]	@ (8015678 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80154de:	fa22 f303 	lsr.w	r3, r2, r3
 80154e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154e4:	e01e      	b.n	8015524 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80154e6:	4b63      	ldr	r3, [pc, #396]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80154ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80154f2:	d106      	bne.n	8015502 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80154f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80154fa:	d102      	bne.n	8015502 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80154fc:	4b5f      	ldr	r3, [pc, #380]	@ (801567c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80154fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015500:	e010      	b.n	8015524 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015502:	4b5c      	ldr	r3, [pc, #368]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801550a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801550e:	d106      	bne.n	801551e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8015510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015516:	d102      	bne.n	801551e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015518:	4b59      	ldr	r3, [pc, #356]	@ (8015680 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801551a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801551c:	e002      	b.n	8015524 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801551e:	2300      	movs	r3, #0
 8015520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015522:	e386      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015524:	e385      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015526:	4b57      	ldr	r3, [pc, #348]	@ (8015684 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8015528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801552a:	e382      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801552c:	2300      	movs	r3, #0
 801552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015530:	e37f      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8015532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015536:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801553a:	430b      	orrs	r3, r1
 801553c:	f040 80a7 	bne.w	801568e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8015540:	4b4c      	ldr	r3, [pc, #304]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015544:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8015548:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015550:	d055      	beq.n	80155fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8015552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015558:	f200 8096 	bhi.w	8015688 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801555e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8015562:	f000 8084 	beq.w	801566e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8015566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801556c:	f200 808c 	bhi.w	8015688 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8015570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015576:	d030      	beq.n	80155da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8015578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801557e:	f200 8083 	bhi.w	8015688 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8015582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015584:	2b00      	cmp	r3, #0
 8015586:	d004      	beq.n	8015592 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8015588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801558a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801558e:	d012      	beq.n	80155b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8015590:	e07a      	b.n	8015688 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015592:	4b38      	ldr	r3, [pc, #224]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801559a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801559e:	d107      	bne.n	80155b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80155a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80155a4:	4618      	mov	r0, r3
 80155a6:	f000 fe0b 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80155aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80155ae:	e340      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80155b0:	2300      	movs	r3, #0
 80155b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155b4:	e33d      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80155b6:	4b2f      	ldr	r3, [pc, #188]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80155be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80155c2:	d107      	bne.n	80155d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80155c4:	f107 0318 	add.w	r3, r7, #24
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 fb51 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80155d2:	e32e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155d8:	e32b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80155da:	4b26      	ldr	r3, [pc, #152]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80155e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80155e6:	d107      	bne.n	80155f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80155e8:	f107 030c 	add.w	r3, r7, #12
 80155ec:	4618      	mov	r0, r3
 80155ee:	f000 fc93 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80155f6:	e31c      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155fc:	e319      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80155fe:	4b1d      	ldr	r3, [pc, #116]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015602:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015606:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015608:	4b1a      	ldr	r3, [pc, #104]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	f003 0304 	and.w	r3, r3, #4
 8015610:	2b04      	cmp	r3, #4
 8015612:	d10c      	bne.n	801562e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8015614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015616:	2b00      	cmp	r3, #0
 8015618:	d109      	bne.n	801562e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801561a:	4b16      	ldr	r3, [pc, #88]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	08db      	lsrs	r3, r3, #3
 8015620:	f003 0303 	and.w	r3, r3, #3
 8015624:	4a14      	ldr	r2, [pc, #80]	@ (8015678 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8015626:	fa22 f303 	lsr.w	r3, r2, r3
 801562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801562c:	e01e      	b.n	801566c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801562e:	4b11      	ldr	r3, [pc, #68]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801563a:	d106      	bne.n	801564a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801563e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015642:	d102      	bne.n	801564a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015644:	4b0d      	ldr	r3, [pc, #52]	@ (801567c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8015646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015648:	e010      	b.n	801566c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801564a:	4b0a      	ldr	r3, [pc, #40]	@ (8015674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015656:	d106      	bne.n	8015666 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8015658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801565a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801565e:	d102      	bne.n	8015666 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015660:	4b07      	ldr	r3, [pc, #28]	@ (8015680 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8015662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015664:	e002      	b.n	801566c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015666:	2300      	movs	r3, #0
 8015668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801566a:	e2e2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801566c:	e2e1      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801566e:	4b05      	ldr	r3, [pc, #20]	@ (8015684 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8015670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015672:	e2de      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015674:	58024400 	.word	0x58024400
 8015678:	03d09000 	.word	0x03d09000
 801567c:	003d0900 	.word	0x003d0900
 8015680:	017d7840 	.word	0x017d7840
 8015684:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8015688:	2300      	movs	r3, #0
 801568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801568c:	e2d1      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801568e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015692:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8015696:	430b      	orrs	r3, r1
 8015698:	f040 809c 	bne.w	80157d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801569c:	4b93      	ldr	r3, [pc, #588]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801569e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80156a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80156ac:	d054      	beq.n	8015758 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80156ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80156b4:	f200 808b 	bhi.w	80157ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80156be:	f000 8083 	beq.w	80157c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80156c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80156c8:	f200 8081 	bhi.w	80157ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80156cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80156d2:	d02f      	beq.n	8015734 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80156d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80156da:	d878      	bhi.n	80157ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80156dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d004      	beq.n	80156ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80156e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80156e8:	d012      	beq.n	8015710 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80156ea:	e070      	b.n	80157ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80156ec:	4b7f      	ldr	r3, [pc, #508]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80156f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80156f8:	d107      	bne.n	801570a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80156fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80156fe:	4618      	mov	r0, r3
 8015700:	f000 fd5e 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015708:	e293      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801570a:	2300      	movs	r3, #0
 801570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801570e:	e290      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015710:	4b76      	ldr	r3, [pc, #472]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801571c:	d107      	bne.n	801572e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801571e:	f107 0318 	add.w	r3, r7, #24
 8015722:	4618      	mov	r0, r3
 8015724:	f000 faa4 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015728:	69bb      	ldr	r3, [r7, #24]
 801572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801572c:	e281      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801572e:	2300      	movs	r3, #0
 8015730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015732:	e27e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015734:	4b6d      	ldr	r3, [pc, #436]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801573c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015740:	d107      	bne.n	8015752 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015742:	f107 030c 	add.w	r3, r7, #12
 8015746:	4618      	mov	r0, r3
 8015748:	f000 fbe6 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015750:	e26f      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015752:	2300      	movs	r3, #0
 8015754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015756:	e26c      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015758:	4b64      	ldr	r3, [pc, #400]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801575a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801575c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015760:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015762:	4b62      	ldr	r3, [pc, #392]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f003 0304 	and.w	r3, r3, #4
 801576a:	2b04      	cmp	r3, #4
 801576c:	d10c      	bne.n	8015788 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015770:	2b00      	cmp	r3, #0
 8015772:	d109      	bne.n	8015788 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015774:	4b5d      	ldr	r3, [pc, #372]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	08db      	lsrs	r3, r3, #3
 801577a:	f003 0303 	and.w	r3, r3, #3
 801577e:	4a5c      	ldr	r2, [pc, #368]	@ (80158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8015780:	fa22 f303 	lsr.w	r3, r2, r3
 8015784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015786:	e01e      	b.n	80157c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015788:	4b58      	ldr	r3, [pc, #352]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015794:	d106      	bne.n	80157a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8015796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801579c:	d102      	bne.n	80157a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801579e:	4b55      	ldr	r3, [pc, #340]	@ (80158f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80157a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80157a2:	e010      	b.n	80157c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80157a4:	4b51      	ldr	r3, [pc, #324]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80157ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80157b0:	d106      	bne.n	80157c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80157b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80157b8:	d102      	bne.n	80157c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80157ba:	4b4f      	ldr	r3, [pc, #316]	@ (80158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80157bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80157be:	e002      	b.n	80157c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80157c4:	e235      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80157c6:	e234      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80157c8:	4b4c      	ldr	r3, [pc, #304]	@ (80158fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80157ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157cc:	e231      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157d2:	e22e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80157d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157d8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80157dc:	430b      	orrs	r3, r1
 80157de:	f040 808f 	bne.w	8015900 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80157e2:	4b42      	ldr	r3, [pc, #264]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80157e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80157ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80157ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80157f2:	d06b      	beq.n	80158cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80157f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80157fa:	d874      	bhi.n	80158e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80157fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015802:	d056      	beq.n	80158b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8015804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801580a:	d86c      	bhi.n	80158e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801580e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015812:	d03b      	beq.n	801588c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8015814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015816:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801581a:	d864      	bhi.n	80158e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801581e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015822:	d021      	beq.n	8015868 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8015824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801582a:	d85c      	bhi.n	80158e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801582e:	2b00      	cmp	r3, #0
 8015830:	d004      	beq.n	801583c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8015832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015838:	d004      	beq.n	8015844 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801583a:	e054      	b.n	80158e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801583c:	f7fe fa4c 	bl	8013cd8 <HAL_RCC_GetPCLK1Freq>
 8015840:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015842:	e1f6      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015844:	4b29      	ldr	r3, [pc, #164]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801584c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015850:	d107      	bne.n	8015862 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015852:	f107 0318 	add.w	r3, r7, #24
 8015856:	4618      	mov	r0, r3
 8015858:	f000 fa0a 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015860:	e1e7      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015862:	2300      	movs	r3, #0
 8015864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015866:	e1e4      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015868:	4b20      	ldr	r3, [pc, #128]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015874:	d107      	bne.n	8015886 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015876:	f107 030c 	add.w	r3, r7, #12
 801587a:	4618      	mov	r0, r3
 801587c:	f000 fb4c 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015884:	e1d5      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015886:	2300      	movs	r3, #0
 8015888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801588a:	e1d2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801588c:	4b17      	ldr	r3, [pc, #92]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f003 0304 	and.w	r3, r3, #4
 8015894:	2b04      	cmp	r3, #4
 8015896:	d109      	bne.n	80158ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015898:	4b14      	ldr	r3, [pc, #80]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	08db      	lsrs	r3, r3, #3
 801589e:	f003 0303 	and.w	r3, r3, #3
 80158a2:	4a13      	ldr	r2, [pc, #76]	@ (80158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80158a4:	fa22 f303 	lsr.w	r3, r2, r3
 80158a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158aa:	e1c2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158b0:	e1bf      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80158b2:	4b0e      	ldr	r3, [pc, #56]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80158ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158be:	d102      	bne.n	80158c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80158c0:	4b0c      	ldr	r3, [pc, #48]	@ (80158f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80158c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158c4:	e1b5      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80158c6:	2300      	movs	r3, #0
 80158c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ca:	e1b2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80158cc:	4b07      	ldr	r3, [pc, #28]	@ (80158ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80158d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80158d8:	d102      	bne.n	80158e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80158da:	4b07      	ldr	r3, [pc, #28]	@ (80158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80158dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158de:	e1a8      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80158e0:	2300      	movs	r3, #0
 80158e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158e4:	e1a5      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80158e6:	2300      	movs	r3, #0
 80158e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ea:	e1a2      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80158ec:	58024400 	.word	0x58024400
 80158f0:	03d09000 	.word	0x03d09000
 80158f4:	003d0900 	.word	0x003d0900
 80158f8:	017d7840 	.word	0x017d7840
 80158fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8015900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015904:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8015908:	430b      	orrs	r3, r1
 801590a:	d173      	bne.n	80159f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801590c:	4b9c      	ldr	r3, [pc, #624]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801590e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015914:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801591c:	d02f      	beq.n	801597e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015924:	d863      	bhi.n	80159ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8015926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015928:	2b00      	cmp	r3, #0
 801592a:	d004      	beq.n	8015936 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801592e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015932:	d012      	beq.n	801595a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8015934:	e05b      	b.n	80159ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015936:	4b92      	ldr	r3, [pc, #584]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801593e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015942:	d107      	bne.n	8015954 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015944:	f107 0318 	add.w	r3, r7, #24
 8015948:	4618      	mov	r0, r3
 801594a:	f000 f991 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801594e:	69bb      	ldr	r3, [r7, #24]
 8015950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015952:	e16e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015954:	2300      	movs	r3, #0
 8015956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015958:	e16b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801595a:	4b89      	ldr	r3, [pc, #548]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015966:	d107      	bne.n	8015978 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015968:	f107 030c 	add.w	r3, r7, #12
 801596c:	4618      	mov	r0, r3
 801596e:	f000 fad3 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015976:	e15c      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801597c:	e159      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801597e:	4b80      	ldr	r3, [pc, #512]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015986:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015988:	4b7d      	ldr	r3, [pc, #500]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f003 0304 	and.w	r3, r3, #4
 8015990:	2b04      	cmp	r3, #4
 8015992:	d10c      	bne.n	80159ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8015994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015996:	2b00      	cmp	r3, #0
 8015998:	d109      	bne.n	80159ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801599a:	4b79      	ldr	r3, [pc, #484]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	08db      	lsrs	r3, r3, #3
 80159a0:	f003 0303 	and.w	r3, r3, #3
 80159a4:	4a77      	ldr	r2, [pc, #476]	@ (8015b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80159a6:	fa22 f303 	lsr.w	r3, r2, r3
 80159aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80159ac:	e01e      	b.n	80159ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80159ae:	4b74      	ldr	r3, [pc, #464]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80159ba:	d106      	bne.n	80159ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80159bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80159c2:	d102      	bne.n	80159ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80159c4:	4b70      	ldr	r3, [pc, #448]	@ (8015b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80159c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80159c8:	e010      	b.n	80159ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80159ca:	4b6d      	ldr	r3, [pc, #436]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80159d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80159d6:	d106      	bne.n	80159e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80159d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80159de:	d102      	bne.n	80159e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80159e0:	4b6a      	ldr	r3, [pc, #424]	@ (8015b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80159e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80159e4:	e002      	b.n	80159ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80159e6:	2300      	movs	r3, #0
 80159e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80159ea:	e122      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80159ec:	e121      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159f2:	e11e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80159f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159f8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80159fc:	430b      	orrs	r3, r1
 80159fe:	d133      	bne.n	8015a68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8015a00:	4b5f      	ldr	r3, [pc, #380]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015a08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d004      	beq.n	8015a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8015a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a16:	d012      	beq.n	8015a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8015a18:	e023      	b.n	8015a62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015a1a:	4b59      	ldr	r3, [pc, #356]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015a26:	d107      	bne.n	8015a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f000 fbc7 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a36:	e0fc      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a3c:	e0f9      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015a3e:	4b50      	ldr	r3, [pc, #320]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015a46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015a4a:	d107      	bne.n	8015a5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015a4c:	f107 0318 	add.w	r3, r7, #24
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f90d 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8015a56:	6a3b      	ldr	r3, [r7, #32]
 8015a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a5a:	e0ea      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a60:	e0e7      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a66:	e0e4      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8015a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a6c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8015a70:	430b      	orrs	r3, r1
 8015a72:	f040 808d 	bne.w	8015b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8015a76:	4b42      	ldr	r3, [pc, #264]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015a7a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8015a7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015a86:	d06b      	beq.n	8015b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8015a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015a8e:	d874      	bhi.n	8015b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a96:	d056      	beq.n	8015b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8015a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a9e:	d86c      	bhi.n	8015b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015aa6:	d03b      	beq.n	8015b20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8015aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015aae:	d864      	bhi.n	8015b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015ab6:	d021      	beq.n	8015afc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8015ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015abe:	d85c      	bhi.n	8015b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d004      	beq.n	8015ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8015ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015acc:	d004      	beq.n	8015ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8015ace:	e054      	b.n	8015b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8015ad0:	f000 f8b8 	bl	8015c44 <HAL_RCCEx_GetD3PCLK1Freq>
 8015ad4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015ad6:	e0ac      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015ad8:	4b29      	ldr	r3, [pc, #164]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015ae4:	d107      	bne.n	8015af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015ae6:	f107 0318 	add.w	r3, r7, #24
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 f8c0 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015af0:	69fb      	ldr	r3, [r7, #28]
 8015af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015af4:	e09d      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015af6:	2300      	movs	r3, #0
 8015af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015afa:	e09a      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015afc:	4b20      	ldr	r3, [pc, #128]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b08:	d107      	bne.n	8015b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015b0a:	f107 030c 	add.w	r3, r7, #12
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f000 fa02 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b18:	e08b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b1e:	e088      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8015b20:	4b17      	ldr	r3, [pc, #92]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	f003 0304 	and.w	r3, r3, #4
 8015b28:	2b04      	cmp	r3, #4
 8015b2a:	d109      	bne.n	8015b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015b2c:	4b14      	ldr	r3, [pc, #80]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	08db      	lsrs	r3, r3, #3
 8015b32:	f003 0303 	and.w	r3, r3, #3
 8015b36:	4a13      	ldr	r2, [pc, #76]	@ (8015b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8015b38:	fa22 f303 	lsr.w	r3, r2, r3
 8015b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b3e:	e078      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b40:	2300      	movs	r3, #0
 8015b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b44:	e075      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8015b46:	4b0e      	ldr	r3, [pc, #56]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b52:	d102      	bne.n	8015b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8015b54:	4b0c      	ldr	r3, [pc, #48]	@ (8015b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8015b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b58:	e06b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b5e:	e068      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015b60:	4b07      	ldr	r3, [pc, #28]	@ (8015b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015b68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015b6c:	d102      	bne.n	8015b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8015b6e:	4b07      	ldr	r3, [pc, #28]	@ (8015b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8015b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b72:	e05e      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b74:	2300      	movs	r3, #0
 8015b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b78:	e05b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b7e:	e058      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015b80:	58024400 	.word	0x58024400
 8015b84:	03d09000 	.word	0x03d09000
 8015b88:	003d0900 	.word	0x003d0900
 8015b8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8015b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b94:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8015b98:	430b      	orrs	r3, r1
 8015b9a:	d148      	bne.n	8015c2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8015b9c:	4b27      	ldr	r3, [pc, #156]	@ (8015c3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ba0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015ba4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015bac:	d02a      	beq.n	8015c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8015bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015bb4:	d838      	bhi.n	8015c28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8015bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d004      	beq.n	8015bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8015bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015bc2:	d00d      	beq.n	8015be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8015bc4:	e030      	b.n	8015c28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8015c3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015bd2:	d102      	bne.n	8015bda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8015bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8015c40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8015bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015bd8:	e02b      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015bde:	e028      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015be0:	4b16      	ldr	r3, [pc, #88]	@ (8015c3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015bec:	d107      	bne.n	8015bfe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f000 fae4 	bl	80161c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015bfc:	e019      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015c02:	e016      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015c04:	4b0d      	ldr	r3, [pc, #52]	@ (8015c3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015c10:	d107      	bne.n	8015c22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015c12:	f107 0318 	add.w	r3, r7, #24
 8015c16:	4618      	mov	r0, r3
 8015c18:	f000 f82a 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015c20:	e007      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015c22:	2300      	movs	r3, #0
 8015c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015c26:	e004      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015c2c:	e001      	b.n	8015c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8015c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3740      	adds	r7, #64	@ 0x40
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	58024400 	.word	0x58024400
 8015c40:	017d7840 	.word	0x017d7840

08015c44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8015c48:	f7fe f816 	bl	8013c78 <HAL_RCC_GetHCLKFreq>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	4b06      	ldr	r3, [pc, #24]	@ (8015c68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8015c50:	6a1b      	ldr	r3, [r3, #32]
 8015c52:	091b      	lsrs	r3, r3, #4
 8015c54:	f003 0307 	and.w	r3, r3, #7
 8015c58:	4904      	ldr	r1, [pc, #16]	@ (8015c6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8015c5a:	5ccb      	ldrb	r3, [r1, r3]
 8015c5c:	f003 031f 	and.w	r3, r3, #31
 8015c60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	58024400 	.word	0x58024400
 8015c6c:	0801ea74 	.word	0x0801ea74

08015c70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8015c70:	b480      	push	{r7}
 8015c72:	b089      	sub	sp, #36	@ 0x24
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015c78:	4ba1      	ldr	r3, [pc, #644]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c7c:	f003 0303 	and.w	r3, r3, #3
 8015c80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8015c82:	4b9f      	ldr	r3, [pc, #636]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c86:	0b1b      	lsrs	r3, r3, #12
 8015c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015c8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8015c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c92:	091b      	lsrs	r3, r3, #4
 8015c94:	f003 0301 	and.w	r3, r3, #1
 8015c98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8015c9a:	4b99      	ldr	r3, [pc, #612]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c9e:	08db      	lsrs	r3, r3, #3
 8015ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ca4:	693a      	ldr	r2, [r7, #16]
 8015ca6:	fb02 f303 	mul.w	r3, r2, r3
 8015caa:	ee07 3a90 	vmov	s15, r3
 8015cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	f000 8111 	beq.w	8015ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	2b02      	cmp	r3, #2
 8015cc2:	f000 8083 	beq.w	8015dcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	2b02      	cmp	r3, #2
 8015cca:	f200 80a1 	bhi.w	8015e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d003      	beq.n	8015cdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8015cd4:	69bb      	ldr	r3, [r7, #24]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d056      	beq.n	8015d88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8015cda:	e099      	b.n	8015e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015cdc:	4b88      	ldr	r3, [pc, #544]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f003 0320 	and.w	r3, r3, #32
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d02d      	beq.n	8015d44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015ce8:	4b85      	ldr	r3, [pc, #532]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	08db      	lsrs	r3, r3, #3
 8015cee:	f003 0303 	and.w	r3, r3, #3
 8015cf2:	4a84      	ldr	r2, [pc, #528]	@ (8015f04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8015cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8015cf8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	ee07 3a90 	vmov	s15, r3
 8015d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	ee07 3a90 	vmov	s15, r3
 8015d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d12:	4b7b      	ldr	r3, [pc, #492]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d1a:	ee07 3a90 	vmov	s15, r3
 8015d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015d42:	e087      	b.n	8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	ee07 3a90 	vmov	s15, r3
 8015d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8015d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d56:	4b6a      	ldr	r3, [pc, #424]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d5e:	ee07 3a90 	vmov	s15, r3
 8015d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d86:	e065      	b.n	8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	ee07 3a90 	vmov	s15, r3
 8015d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d9a:	4b59      	ldr	r3, [pc, #356]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015da2:	ee07 3a90 	vmov	s15, r3
 8015da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8015dae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015dca:	e043      	b.n	8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	ee07 3a90 	vmov	s15, r3
 8015dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8015f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8015dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015dde:	4b48      	ldr	r3, [pc, #288]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015de6:	ee07 3a90 	vmov	s15, r3
 8015dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8015df2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015e0e:	e021      	b.n	8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	ee07 3a90 	vmov	s15, r3
 8015e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8015f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e22:	4b37      	ldr	r3, [pc, #220]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e2a:	ee07 3a90 	vmov	s15, r3
 8015e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8015e36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015e52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8015e54:	4b2a      	ldr	r3, [pc, #168]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e58:	0a5b      	lsrs	r3, r3, #9
 8015e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e5e:	ee07 3a90 	vmov	s15, r3
 8015e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8015e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e7a:	ee17 2a90 	vmov	r2, s15
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8015e82:	4b1f      	ldr	r3, [pc, #124]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e86:	0c1b      	lsrs	r3, r3, #16
 8015e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e8c:	ee07 3a90 	vmov	s15, r3
 8015e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ea8:	ee17 2a90 	vmov	r2, s15
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8015eb0:	4b13      	ldr	r3, [pc, #76]	@ (8015f00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015eb4:	0e1b      	lsrs	r3, r3, #24
 8015eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015eba:	ee07 3a90 	vmov	s15, r3
 8015ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8015ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ed6:	ee17 2a90 	vmov	r2, s15
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8015ede:	e008      	b.n	8015ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	609a      	str	r2, [r3, #8]
}
 8015ef2:	bf00      	nop
 8015ef4:	3724      	adds	r7, #36	@ 0x24
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	58024400 	.word	0x58024400
 8015f04:	03d09000 	.word	0x03d09000
 8015f08:	46000000 	.word	0x46000000
 8015f0c:	4c742400 	.word	0x4c742400
 8015f10:	4a742400 	.word	0x4a742400
 8015f14:	4bbebc20 	.word	0x4bbebc20

08015f18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b089      	sub	sp, #36	@ 0x24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015f20:	4ba1      	ldr	r3, [pc, #644]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f24:	f003 0303 	and.w	r3, r3, #3
 8015f28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8015f2a:	4b9f      	ldr	r3, [pc, #636]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f2e:	0d1b      	lsrs	r3, r3, #20
 8015f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8015f36:	4b9c      	ldr	r3, [pc, #624]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f3a:	0a1b      	lsrs	r3, r3, #8
 8015f3c:	f003 0301 	and.w	r3, r3, #1
 8015f40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8015f42:	4b99      	ldr	r3, [pc, #612]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f46:	08db      	lsrs	r3, r3, #3
 8015f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f4c:	693a      	ldr	r2, [r7, #16]
 8015f4e:	fb02 f303 	mul.w	r3, r2, r3
 8015f52:	ee07 3a90 	vmov	s15, r3
 8015f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	f000 8111 	beq.w	8016188 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8015f66:	69bb      	ldr	r3, [r7, #24]
 8015f68:	2b02      	cmp	r3, #2
 8015f6a:	f000 8083 	beq.w	8016074 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	f200 80a1 	bhi.w	80160b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d003      	beq.n	8015f84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	2b01      	cmp	r3, #1
 8015f80:	d056      	beq.n	8016030 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8015f82:	e099      	b.n	80160b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015f84:	4b88      	ldr	r3, [pc, #544]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f003 0320 	and.w	r3, r3, #32
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d02d      	beq.n	8015fec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015f90:	4b85      	ldr	r3, [pc, #532]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	08db      	lsrs	r3, r3, #3
 8015f96:	f003 0303 	and.w	r3, r3, #3
 8015f9a:	4a84      	ldr	r2, [pc, #528]	@ (80161ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8015f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8015fa0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	ee07 3a90 	vmov	s15, r3
 8015fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	ee07 3a90 	vmov	s15, r3
 8015fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015fba:	4b7b      	ldr	r3, [pc, #492]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fc2:	ee07 3a90 	vmov	s15, r3
 8015fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8015fce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015fea:	e087      	b.n	80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	ee07 3a90 	vmov	s15, r3
 8015ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80161b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8015ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016006:	ee07 3a90 	vmov	s15, r3
 801600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8016012:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801601e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016026:	ee67 7a27 	vmul.f32	s15, s14, s15
 801602a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801602e:	e065      	b.n	80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	ee07 3a90 	vmov	s15, r3
 8016036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801603a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80161b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016042:	4b59      	ldr	r3, [pc, #356]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801604a:	ee07 3a90 	vmov	s15, r3
 801604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016052:	ed97 6a03 	vldr	s12, [r7, #12]
 8016056:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801606e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016072:	e043      	b.n	80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	ee07 3a90 	vmov	s15, r3
 801607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801607e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80161bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8016082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016086:	4b48      	ldr	r3, [pc, #288]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801608e:	ee07 3a90 	vmov	s15, r3
 8016092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016096:	ed97 6a03 	vldr	s12, [r7, #12]
 801609a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80160a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80160b6:	e021      	b.n	80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	ee07 3a90 	vmov	s15, r3
 80160be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80161b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80160c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80160ca:	4b37      	ldr	r3, [pc, #220]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80160cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160d2:	ee07 3a90 	vmov	s15, r3
 80160d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80160da:	ed97 6a03 	vldr	s12, [r7, #12]
 80160de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80160e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80160e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80160fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80160fc:	4b2a      	ldr	r3, [pc, #168]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80160fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016100:	0a5b      	lsrs	r3, r3, #9
 8016102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016106:	ee07 3a90 	vmov	s15, r3
 801610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801610e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016116:	edd7 6a07 	vldr	s13, [r7, #28]
 801611a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801611e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016122:	ee17 2a90 	vmov	r2, s15
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801612a:	4b1f      	ldr	r3, [pc, #124]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801612e:	0c1b      	lsrs	r3, r3, #16
 8016130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016134:	ee07 3a90 	vmov	s15, r3
 8016138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801613c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016140:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016144:	edd7 6a07 	vldr	s13, [r7, #28]
 8016148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801614c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016150:	ee17 2a90 	vmov	r2, s15
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8016158:	4b13      	ldr	r3, [pc, #76]	@ (80161a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801615a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801615c:	0e1b      	lsrs	r3, r3, #24
 801615e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016162:	ee07 3a90 	vmov	s15, r3
 8016166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801616a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801616e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016172:	edd7 6a07 	vldr	s13, [r7, #28]
 8016176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801617a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801617e:	ee17 2a90 	vmov	r2, s15
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016186:	e008      	b.n	801619a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2200      	movs	r2, #0
 801618c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2200      	movs	r2, #0
 8016192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2200      	movs	r2, #0
 8016198:	609a      	str	r2, [r3, #8]
}
 801619a:	bf00      	nop
 801619c:	3724      	adds	r7, #36	@ 0x24
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	58024400 	.word	0x58024400
 80161ac:	03d09000 	.word	0x03d09000
 80161b0:	46000000 	.word	0x46000000
 80161b4:	4c742400 	.word	0x4c742400
 80161b8:	4a742400 	.word	0x4a742400
 80161bc:	4bbebc20 	.word	0x4bbebc20

080161c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b089      	sub	sp, #36	@ 0x24
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80161c8:	4ba0      	ldr	r3, [pc, #640]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161cc:	f003 0303 	and.w	r3, r3, #3
 80161d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80161d2:	4b9e      	ldr	r3, [pc, #632]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161d6:	091b      	lsrs	r3, r3, #4
 80161d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80161dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80161de:	4b9b      	ldr	r3, [pc, #620]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161e2:	f003 0301 	and.w	r3, r3, #1
 80161e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80161e8:	4b98      	ldr	r3, [pc, #608]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80161ec:	08db      	lsrs	r3, r3, #3
 80161ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161f2:	693a      	ldr	r2, [r7, #16]
 80161f4:	fb02 f303 	mul.w	r3, r2, r3
 80161f8:	ee07 3a90 	vmov	s15, r3
 80161fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016200:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f000 8111 	beq.w	801642e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801620c:	69bb      	ldr	r3, [r7, #24]
 801620e:	2b02      	cmp	r3, #2
 8016210:	f000 8083 	beq.w	801631a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8016214:	69bb      	ldr	r3, [r7, #24]
 8016216:	2b02      	cmp	r3, #2
 8016218:	f200 80a1 	bhi.w	801635e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801621c:	69bb      	ldr	r3, [r7, #24]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d003      	beq.n	801622a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8016222:	69bb      	ldr	r3, [r7, #24]
 8016224:	2b01      	cmp	r3, #1
 8016226:	d056      	beq.n	80162d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8016228:	e099      	b.n	801635e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801622a:	4b88      	ldr	r3, [pc, #544]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	f003 0320 	and.w	r3, r3, #32
 8016232:	2b00      	cmp	r3, #0
 8016234:	d02d      	beq.n	8016292 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016236:	4b85      	ldr	r3, [pc, #532]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	08db      	lsrs	r3, r3, #3
 801623c:	f003 0303 	and.w	r3, r3, #3
 8016240:	4a83      	ldr	r2, [pc, #524]	@ (8016450 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8016242:	fa22 f303 	lsr.w	r3, r2, r3
 8016246:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	ee07 3a90 	vmov	s15, r3
 801624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	ee07 3a90 	vmov	s15, r3
 8016258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801625c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016260:	4b7a      	ldr	r3, [pc, #488]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016268:	ee07 3a90 	vmov	s15, r3
 801626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016270:	ed97 6a03 	vldr	s12, [r7, #12]
 8016274:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8016454 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801627c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016288:	ee67 7a27 	vmul.f32	s15, s14, s15
 801628c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016290:	e087      	b.n	80163a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	ee07 3a90 	vmov	s15, r3
 8016298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801629c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8016458 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80162a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162a4:	4b69      	ldr	r3, [pc, #420]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162ac:	ee07 3a90 	vmov	s15, r3
 80162b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80162b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80162b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8016454 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80162bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80162c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80162c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80162cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80162d4:	e065      	b.n	80163a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	ee07 3a90 	vmov	s15, r3
 80162dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801645c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80162e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162e8:	4b58      	ldr	r3, [pc, #352]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162f0:	ee07 3a90 	vmov	s15, r3
 80162f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80162f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80162fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8016454 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801630c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016318:	e043      	b.n	80163a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	ee07 3a90 	vmov	s15, r3
 8016320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016324:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8016460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8016328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801632c:	4b47      	ldr	r3, [pc, #284]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016334:	ee07 3a90 	vmov	s15, r3
 8016338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801633c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016340:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8016454 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801634c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801635c:	e021      	b.n	80163a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	ee07 3a90 	vmov	s15, r3
 8016364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016368:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8016458 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801636c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016370:	4b36      	ldr	r3, [pc, #216]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016378:	ee07 3a90 	vmov	s15, r3
 801637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016380:	ed97 6a03 	vldr	s12, [r7, #12]
 8016384:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8016454 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801638c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016398:	ee67 7a27 	vmul.f32	s15, s14, s15
 801639c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80163a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80163a2:	4b2a      	ldr	r3, [pc, #168]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80163a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163a6:	0a5b      	lsrs	r3, r3, #9
 80163a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80163ac:	ee07 3a90 	vmov	s15, r3
 80163b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80163b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80163bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80163c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80163c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80163c8:	ee17 2a90 	vmov	r2, s15
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80163d0:	4b1e      	ldr	r3, [pc, #120]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80163d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163d4:	0c1b      	lsrs	r3, r3, #16
 80163d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80163da:	ee07 3a90 	vmov	s15, r3
 80163de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80163e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80163ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80163ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80163f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80163f6:	ee17 2a90 	vmov	r2, s15
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80163fe:	4b13      	ldr	r3, [pc, #76]	@ (801644c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016402:	0e1b      	lsrs	r3, r3, #24
 8016404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016408:	ee07 3a90 	vmov	s15, r3
 801640c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016418:	edd7 6a07 	vldr	s13, [r7, #28]
 801641c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016424:	ee17 2a90 	vmov	r2, s15
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801642c:	e008      	b.n	8016440 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2200      	movs	r2, #0
 8016432:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2200      	movs	r2, #0
 8016438:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	2200      	movs	r2, #0
 801643e:	609a      	str	r2, [r3, #8]
}
 8016440:	bf00      	nop
 8016442:	3724      	adds	r7, #36	@ 0x24
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr
 801644c:	58024400 	.word	0x58024400
 8016450:	03d09000 	.word	0x03d09000
 8016454:	46000000 	.word	0x46000000
 8016458:	4c742400 	.word	0x4c742400
 801645c:	4a742400 	.word	0x4a742400
 8016460:	4bbebc20 	.word	0x4bbebc20

08016464 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b084      	sub	sp, #16
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801646e:	2300      	movs	r3, #0
 8016470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016472:	4b53      	ldr	r3, [pc, #332]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016476:	f003 0303 	and.w	r3, r3, #3
 801647a:	2b03      	cmp	r3, #3
 801647c:	d101      	bne.n	8016482 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801647e:	2301      	movs	r3, #1
 8016480:	e099      	b.n	80165b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016482:	4b4f      	ldr	r3, [pc, #316]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	4a4e      	ldr	r2, [pc, #312]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016488:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801648c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801648e:	f7f9 fd47 	bl	800ff20 <HAL_GetTick>
 8016492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016494:	e008      	b.n	80164a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016496:	f7f9 fd43 	bl	800ff20 <HAL_GetTick>
 801649a:	4602      	mov	r2, r0
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	2b02      	cmp	r3, #2
 80164a2:	d901      	bls.n	80164a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80164a4:	2303      	movs	r3, #3
 80164a6:	e086      	b.n	80165b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80164a8:	4b45      	ldr	r3, [pc, #276]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1f0      	bne.n	8016496 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80164b4:	4b42      	ldr	r3, [pc, #264]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 80164b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	031b      	lsls	r3, r3, #12
 80164c2:	493f      	ldr	r1, [pc, #252]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 80164c4:	4313      	orrs	r3, r2
 80164c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	689b      	ldr	r3, [r3, #8]
 80164d6:	3b01      	subs	r3, #1
 80164d8:	025b      	lsls	r3, r3, #9
 80164da:	b29b      	uxth	r3, r3
 80164dc:	431a      	orrs	r2, r3
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	3b01      	subs	r3, #1
 80164e4:	041b      	lsls	r3, r3, #16
 80164e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80164ea:	431a      	orrs	r2, r3
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	691b      	ldr	r3, [r3, #16]
 80164f0:	3b01      	subs	r3, #1
 80164f2:	061b      	lsls	r3, r3, #24
 80164f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80164f8:	4931      	ldr	r1, [pc, #196]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 80164fa:	4313      	orrs	r3, r2
 80164fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80164fe:	4b30      	ldr	r3, [pc, #192]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	695b      	ldr	r3, [r3, #20]
 801650a:	492d      	ldr	r1, [pc, #180]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801650c:	4313      	orrs	r3, r2
 801650e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016510:	4b2b      	ldr	r3, [pc, #172]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016514:	f023 0220 	bic.w	r2, r3, #32
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	699b      	ldr	r3, [r3, #24]
 801651c:	4928      	ldr	r1, [pc, #160]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801651e:	4313      	orrs	r3, r2
 8016520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8016522:	4b27      	ldr	r3, [pc, #156]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016526:	4a26      	ldr	r2, [pc, #152]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016528:	f023 0310 	bic.w	r3, r3, #16
 801652c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801652e:	4b24      	ldr	r3, [pc, #144]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016532:	4b24      	ldr	r3, [pc, #144]	@ (80165c4 <RCCEx_PLL2_Config+0x160>)
 8016534:	4013      	ands	r3, r2
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	69d2      	ldr	r2, [r2, #28]
 801653a:	00d2      	lsls	r2, r2, #3
 801653c:	4920      	ldr	r1, [pc, #128]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801653e:	4313      	orrs	r3, r2
 8016540:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016542:	4b1f      	ldr	r3, [pc, #124]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016546:	4a1e      	ldr	r2, [pc, #120]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016548:	f043 0310 	orr.w	r3, r3, #16
 801654c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d106      	bne.n	8016562 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8016554:	4b1a      	ldr	r3, [pc, #104]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016558:	4a19      	ldr	r2, [pc, #100]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801655a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801655e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016560:	e00f      	b.n	8016582 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	2b01      	cmp	r3, #1
 8016566:	d106      	bne.n	8016576 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016568:	4b15      	ldr	r3, [pc, #84]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801656c:	4a14      	ldr	r2, [pc, #80]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801656e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016574:	e005      	b.n	8016582 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8016576:	4b12      	ldr	r3, [pc, #72]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801657a:	4a11      	ldr	r2, [pc, #68]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 801657c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016582:	4b0f      	ldr	r3, [pc, #60]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	4a0e      	ldr	r2, [pc, #56]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 8016588:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801658c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801658e:	f7f9 fcc7 	bl	800ff20 <HAL_GetTick>
 8016592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016594:	e008      	b.n	80165a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016596:	f7f9 fcc3 	bl	800ff20 <HAL_GetTick>
 801659a:	4602      	mov	r2, r0
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	1ad3      	subs	r3, r2, r3
 80165a0:	2b02      	cmp	r3, #2
 80165a2:	d901      	bls.n	80165a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80165a4:	2303      	movs	r3, #3
 80165a6:	e006      	b.n	80165b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80165a8:	4b05      	ldr	r3, [pc, #20]	@ (80165c0 <RCCEx_PLL2_Config+0x15c>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0f0      	beq.n	8016596 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80165b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3710      	adds	r7, #16
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
 80165be:	bf00      	nop
 80165c0:	58024400 	.word	0x58024400
 80165c4:	ffff0007 	.word	0xffff0007

080165c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80165d2:	2300      	movs	r3, #0
 80165d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80165d6:	4b53      	ldr	r3, [pc, #332]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80165d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165da:	f003 0303 	and.w	r3, r3, #3
 80165de:	2b03      	cmp	r3, #3
 80165e0:	d101      	bne.n	80165e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80165e2:	2301      	movs	r3, #1
 80165e4:	e099      	b.n	801671a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80165e6:	4b4f      	ldr	r3, [pc, #316]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	4a4e      	ldr	r2, [pc, #312]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80165ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80165f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80165f2:	f7f9 fc95 	bl	800ff20 <HAL_GetTick>
 80165f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80165f8:	e008      	b.n	801660c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80165fa:	f7f9 fc91 	bl	800ff20 <HAL_GetTick>
 80165fe:	4602      	mov	r2, r0
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	1ad3      	subs	r3, r2, r3
 8016604:	2b02      	cmp	r3, #2
 8016606:	d901      	bls.n	801660c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016608:	2303      	movs	r3, #3
 801660a:	e086      	b.n	801671a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801660c:	4b45      	ldr	r3, [pc, #276]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016614:	2b00      	cmp	r3, #0
 8016616:	d1f0      	bne.n	80165fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016618:	4b42      	ldr	r3, [pc, #264]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 801661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801661c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	051b      	lsls	r3, r3, #20
 8016626:	493f      	ldr	r1, [pc, #252]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016628:	4313      	orrs	r3, r2
 801662a:	628b      	str	r3, [r1, #40]	@ 0x28
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	685b      	ldr	r3, [r3, #4]
 8016630:	3b01      	subs	r3, #1
 8016632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	689b      	ldr	r3, [r3, #8]
 801663a:	3b01      	subs	r3, #1
 801663c:	025b      	lsls	r3, r3, #9
 801663e:	b29b      	uxth	r3, r3
 8016640:	431a      	orrs	r2, r3
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	3b01      	subs	r3, #1
 8016648:	041b      	lsls	r3, r3, #16
 801664a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801664e:	431a      	orrs	r2, r3
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	691b      	ldr	r3, [r3, #16]
 8016654:	3b01      	subs	r3, #1
 8016656:	061b      	lsls	r3, r3, #24
 8016658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801665c:	4931      	ldr	r1, [pc, #196]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 801665e:	4313      	orrs	r3, r2
 8016660:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016662:	4b30      	ldr	r3, [pc, #192]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016666:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	695b      	ldr	r3, [r3, #20]
 801666e:	492d      	ldr	r1, [pc, #180]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016670:	4313      	orrs	r3, r2
 8016672:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016674:	4b2b      	ldr	r3, [pc, #172]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016678:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	699b      	ldr	r3, [r3, #24]
 8016680:	4928      	ldr	r1, [pc, #160]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016682:	4313      	orrs	r3, r2
 8016684:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016686:	4b27      	ldr	r3, [pc, #156]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801668a:	4a26      	ldr	r2, [pc, #152]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 801668c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016692:	4b24      	ldr	r3, [pc, #144]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 8016694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016696:	4b24      	ldr	r3, [pc, #144]	@ (8016728 <RCCEx_PLL3_Config+0x160>)
 8016698:	4013      	ands	r3, r2
 801669a:	687a      	ldr	r2, [r7, #4]
 801669c:	69d2      	ldr	r2, [r2, #28]
 801669e:	00d2      	lsls	r2, r2, #3
 80166a0:	4920      	ldr	r1, [pc, #128]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166a2:	4313      	orrs	r3, r2
 80166a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80166a6:	4b1f      	ldr	r3, [pc, #124]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166aa:	4a1e      	ldr	r2, [pc, #120]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80166b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d106      	bne.n	80166c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80166b8:	4b1a      	ldr	r3, [pc, #104]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166bc:	4a19      	ldr	r2, [pc, #100]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80166c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80166c4:	e00f      	b.n	80166e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d106      	bne.n	80166da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80166cc:	4b15      	ldr	r3, [pc, #84]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d0:	4a14      	ldr	r2, [pc, #80]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80166d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80166d8:	e005      	b.n	80166e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80166da:	4b12      	ldr	r3, [pc, #72]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166de:	4a11      	ldr	r2, [pc, #68]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80166e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80166e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a0e      	ldr	r2, [pc, #56]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 80166ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80166f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80166f2:	f7f9 fc15 	bl	800ff20 <HAL_GetTick>
 80166f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80166f8:	e008      	b.n	801670c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80166fa:	f7f9 fc11 	bl	800ff20 <HAL_GetTick>
 80166fe:	4602      	mov	r2, r0
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	1ad3      	subs	r3, r2, r3
 8016704:	2b02      	cmp	r3, #2
 8016706:	d901      	bls.n	801670c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016708:	2303      	movs	r3, #3
 801670a:	e006      	b.n	801671a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801670c:	4b05      	ldr	r3, [pc, #20]	@ (8016724 <RCCEx_PLL3_Config+0x15c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016714:	2b00      	cmp	r3, #0
 8016716:	d0f0      	beq.n	80166fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016718:	7bfb      	ldrb	r3, [r7, #15]
}
 801671a:	4618      	mov	r0, r3
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	58024400 	.word	0x58024400
 8016728:	ffff0007 	.word	0xffff0007

0801672c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b08a      	sub	sp, #40	@ 0x28
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d101      	bne.n	801673e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801673a:	2301      	movs	r3, #1
 801673c:	e075      	b.n	801682a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016744:	b2db      	uxtb	r3, r3
 8016746:	2b00      	cmp	r3, #0
 8016748:	d105      	bne.n	8016756 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2200      	movs	r2, #0
 801674e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7f5 f813 	bl	800b77c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2204      	movs	r2, #4
 801675a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f868 	bl	8016834 <HAL_SD_InitCard>
 8016764:	4603      	mov	r3, r0
 8016766:	2b00      	cmp	r3, #0
 8016768:	d001      	beq.n	801676e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801676a:	2301      	movs	r3, #1
 801676c:	e05d      	b.n	801682a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801676e:	f107 0308 	add.w	r3, r7, #8
 8016772:	4619      	mov	r1, r3
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f000 fdaf 	bl	80172d8 <HAL_SD_GetCardStatus>
 801677a:	4603      	mov	r3, r0
 801677c:	2b00      	cmp	r3, #0
 801677e:	d001      	beq.n	8016784 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8016780:	2301      	movs	r3, #1
 8016782:	e052      	b.n	801682a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8016784:	7e3b      	ldrb	r3, [r7, #24]
 8016786:	b2db      	uxtb	r3, r3
 8016788:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801678a:	7e7b      	ldrb	r3, [r7, #25]
 801678c:	b2db      	uxtb	r3, r3
 801678e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016794:	2b01      	cmp	r3, #1
 8016796:	d10a      	bne.n	80167ae <HAL_SD_Init+0x82>
 8016798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801679a:	2b00      	cmp	r3, #0
 801679c:	d102      	bne.n	80167a4 <HAL_SD_Init+0x78>
 801679e:	6a3b      	ldr	r3, [r7, #32]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d004      	beq.n	80167ae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80167aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80167ac:	e00b      	b.n	80167c6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d104      	bne.n	80167c0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80167bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80167be:	e002      	b.n	80167c6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2200      	movs	r2, #0
 80167c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	4619      	mov	r1, r3
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f000 fe6d 	bl	80174ac <HAL_SD_ConfigWideBusOperation>
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d001      	beq.n	80167dc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80167d8:	2301      	movs	r3, #1
 80167da:	e026      	b.n	801682a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80167dc:	f7f9 fba0 	bl	800ff20 <HAL_GetTick>
 80167e0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80167e2:	e011      	b.n	8016808 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80167e4:	f7f9 fb9c 	bl	800ff20 <HAL_GetTick>
 80167e8:	4602      	mov	r2, r0
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	1ad3      	subs	r3, r2, r3
 80167ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167f2:	d109      	bne.n	8016808 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80167fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2201      	movs	r2, #1
 8016800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8016804:	2303      	movs	r3, #3
 8016806:	e010      	b.n	801682a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f000 ff61 	bl	80176d0 <HAL_SD_GetCardState>
 801680e:	4603      	mov	r3, r0
 8016810:	2b04      	cmp	r3, #4
 8016812:	d1e7      	bne.n	80167e4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2200      	movs	r2, #0
 8016818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2200      	movs	r2, #0
 801681e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2201      	movs	r2, #1
 8016824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8016828:	2300      	movs	r3, #0
}
 801682a:	4618      	mov	r0, r3
 801682c:	3728      	adds	r7, #40	@ 0x28
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
	...

08016834 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8016834:	b590      	push	{r4, r7, lr}
 8016836:	b08d      	sub	sp, #52	@ 0x34
 8016838:	af02      	add	r7, sp, #8
 801683a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801683c:	2300      	movs	r3, #0
 801683e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8016840:	2300      	movs	r3, #0
 8016842:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8016844:	2300      	movs	r3, #0
 8016846:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8016848:	2300      	movs	r3, #0
 801684a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801684c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8016850:	f04f 0100 	mov.w	r1, #0
 8016854:	f7fe fc76 	bl	8015144 <HAL_RCCEx_GetPeriphCLKFreq>
 8016858:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801685c:	2b00      	cmp	r3, #0
 801685e:	d109      	bne.n	8016874 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2201      	movs	r2, #1
 8016864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801686e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8016870:	2301      	movs	r3, #1
 8016872:	e070      	b.n	8016956 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8016874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016876:	0a1b      	lsrs	r3, r3, #8
 8016878:	4a39      	ldr	r2, [pc, #228]	@ (8016960 <HAL_SD_InitCard+0x12c>)
 801687a:	fba2 2303 	umull	r2, r3, r2, r3
 801687e:	091b      	lsrs	r3, r3, #4
 8016880:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681c      	ldr	r4, [r3, #0]
 8016886:	466a      	mov	r2, sp
 8016888:	f107 0318 	add.w	r3, r7, #24
 801688c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016890:	e882 0003 	stmia.w	r2, {r0, r1}
 8016894:	f107 030c 	add.w	r3, r7, #12
 8016898:	cb0e      	ldmia	r3, {r1, r2, r3}
 801689a:	4620      	mov	r0, r4
 801689c:	f002 fe5e 	bl	801955c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f002 fea1 	bl	80195ec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80168aa:	69fb      	ldr	r3, [r7, #28]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d005      	beq.n	80168bc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80168ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80168bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d007      	beq.n	80168d2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80168c2:	4a28      	ldr	r2, [pc, #160]	@ (8016964 <HAL_SD_InitCard+0x130>)
 80168c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80168ca:	3301      	adds	r3, #1
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f9 fb33 	bl	800ff38 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f000 ffea 	bl	80178ac <SD_PowerON>
 80168d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80168da:	6a3b      	ldr	r3, [r7, #32]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d00b      	beq.n	80168f8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2201      	movs	r2, #1
 80168e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80168ec:	6a3b      	ldr	r3, [r7, #32]
 80168ee:	431a      	orrs	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80168f4:	2301      	movs	r3, #1
 80168f6:	e02e      	b.n	8016956 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f000 ff09 	bl	8017710 <SD_InitCard>
 80168fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016900:	6a3b      	ldr	r3, [r7, #32]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d00b      	beq.n	801691e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2201      	movs	r2, #1
 801690a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016912:	6a3b      	ldr	r3, [r7, #32]
 8016914:	431a      	orrs	r2, r3
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801691a:	2301      	movs	r3, #1
 801691c:	e01b      	b.n	8016956 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8016926:	4618      	mov	r0, r3
 8016928:	f002 fef6 	bl	8019718 <SDMMC_CmdBlockLength>
 801692c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801692e:	6a3b      	ldr	r3, [r7, #32]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d00f      	beq.n	8016954 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	4a0b      	ldr	r2, [pc, #44]	@ (8016968 <HAL_SD_InitCard+0x134>)
 801693a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016940:	6a3b      	ldr	r3, [r7, #32]
 8016942:	431a      	orrs	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8016950:	2301      	movs	r3, #1
 8016952:	e000      	b.n	8016956 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	372c      	adds	r7, #44	@ 0x2c
 801695a:	46bd      	mov	sp, r7
 801695c:	bd90      	pop	{r4, r7, pc}
 801695e:	bf00      	nop
 8016960:	014f8b59 	.word	0x014f8b59
 8016964:	00012110 	.word	0x00012110
 8016968:	1fe00fff 	.word	0x1fe00fff

0801696c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b08c      	sub	sp, #48	@ 0x30
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
 8016978:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d107      	bne.n	8016994 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016988:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8016990:	2301      	movs	r3, #1
 8016992:	e08d      	b.n	8016ab0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801699a:	b2db      	uxtb	r3, r3
 801699c:	2b01      	cmp	r3, #1
 801699e:	f040 8086 	bne.w	8016aae <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	2200      	movs	r2, #0
 80169a6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80169a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	441a      	add	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80169b2:	429a      	cmp	r2, r3
 80169b4:	d907      	bls.n	80169c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80169ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80169c2:	2301      	movs	r3, #1
 80169c4:	e074      	b.n	8016ab0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2203      	movs	r2, #3
 80169ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	2200      	movs	r2, #0
 80169d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	68ba      	ldr	r2, [r7, #8]
 80169da:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	025a      	lsls	r2, r3, #9
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169e8:	2b01      	cmp	r3, #1
 80169ea:	d002      	beq.n	80169f2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80169ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169ee:	025b      	lsls	r3, r3, #9
 80169f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80169f2:	f04f 33ff 	mov.w	r3, #4294967295
 80169f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	025b      	lsls	r3, r3, #9
 80169fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80169fe:	2390      	movs	r3, #144	@ 0x90
 8016a00:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8016a02:	2302      	movs	r3, #2
 8016a04:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f107 0210 	add.w	r2, r7, #16
 8016a16:	4611      	mov	r1, r2
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f002 fe51 	bl	80196c0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	68da      	ldr	r2, [r3, #12]
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016a2c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	68ba      	ldr	r2, [r7, #8]
 8016a34:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	d90a      	bls.n	8016a5a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	2282      	movs	r2, #130	@ 0x82
 8016a48:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016a50:	4618      	mov	r0, r3
 8016a52:	f002 fea7 	bl	80197a4 <SDMMC_CmdReadMultiBlock>
 8016a56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016a58:	e009      	b.n	8016a6e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2281      	movs	r2, #129	@ 0x81
 8016a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016a66:	4618      	mov	r0, r3
 8016a68:	f002 fe79 	bl	801975e <SDMMC_CmdReadSingleBlock>
 8016a6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8016a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d012      	beq.n	8016a9a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4a0f      	ldr	r2, [pc, #60]	@ (8016ab8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8016a7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a82:	431a      	orrs	r2, r3
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	2200      	movs	r2, #0
 8016a94:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8016a96:	2301      	movs	r3, #1
 8016a98:	e00a      	b.n	8016ab0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8016aa8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	e000      	b.n	8016ab0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8016aae:	2302      	movs	r3, #2
  }
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3730      	adds	r7, #48	@ 0x30
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	1fe00fff 	.word	0x1fe00fff

08016abc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b08c      	sub	sp, #48	@ 0x30
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	60b9      	str	r1, [r7, #8]
 8016ac6:	607a      	str	r2, [r7, #4]
 8016ac8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d107      	bne.n	8016ae4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ad8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e08d      	b.n	8016c00 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	f040 8086 	bne.w	8016bfe <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	2200      	movs	r2, #0
 8016af6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8016af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	441a      	add	r2, r3
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d907      	bls.n	8016b16 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b0a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8016b12:	2301      	movs	r3, #1
 8016b14:	e074      	b.n	8016c00 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	2203      	movs	r2, #3
 8016b1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	2200      	movs	r2, #0
 8016b24:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	68ba      	ldr	r2, [r7, #8]
 8016b2a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	025a      	lsls	r2, r3, #9
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d002      	beq.n	8016b42 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8016b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b3e:	025b      	lsls	r3, r3, #9
 8016b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8016b42:	f04f 33ff 	mov.w	r3, #4294967295
 8016b46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	025b      	lsls	r3, r3, #9
 8016b4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8016b4e:	2390      	movs	r3, #144	@ 0x90
 8016b50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8016b52:	2300      	movs	r3, #0
 8016b54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8016b56:	2300      	movs	r3, #0
 8016b58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	f107 0210 	add.w	r2, r7, #16
 8016b66:	4611      	mov	r1, r2
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f002 fda9 	bl	80196c0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	68da      	ldr	r2, [r3, #12]
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016b7c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	68ba      	ldr	r2, [r7, #8]
 8016b84:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d90a      	bls.n	8016baa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	22a0      	movs	r2, #160	@ 0xa0
 8016b98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f002 fe45 	bl	8019830 <SDMMC_CmdWriteMultiBlock>
 8016ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016ba8:	e009      	b.n	8016bbe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2290      	movs	r2, #144	@ 0x90
 8016bae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f002 fe17 	bl	80197ea <SDMMC_CmdWriteSingleBlock>
 8016bbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8016bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d012      	beq.n	8016bea <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8016c08 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8016bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bd2:	431a      	orrs	r2, r3
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	2200      	movs	r2, #0
 8016be4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8016be6:	2301      	movs	r3, #1
 8016be8:	e00a      	b.n	8016c00 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8016bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e000      	b.n	8016c00 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8016bfe:	2302      	movs	r3, #2
  }
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3730      	adds	r7, #48	@ 0x30
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}
 8016c08:	1fe00fff 	.word	0x1fe00fff

08016c0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b084      	sub	sp, #16
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c18:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d008      	beq.n	8016c3a <HAL_SD_IRQHandler+0x2e>
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	f003 0308 	and.w	r3, r3, #8
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d003      	beq.n	8016c3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f001 f926 	bl	8017e84 <SD_Read_IT>
 8016c38:	e19a      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	f000 80ac 	beq.w	8016da2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016c52:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681a      	ldr	r2, [r3, #0]
 8016c5e:	4b59      	ldr	r3, [pc, #356]	@ (8016dc4 <HAL_SD_IRQHandler+0x1b8>)
 8016c60:	400b      	ands	r3, r1
 8016c62:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8016c72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	68da      	ldr	r2, [r3, #12]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016c82:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	f003 0308 	and.w	r3, r3, #8
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d038      	beq.n	8016d00 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	f003 0302 	and.w	r3, r3, #2
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d104      	bne.n	8016ca2 <HAL_SD_IRQHandler+0x96>
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f003 0320 	and.w	r3, r3, #32
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d011      	beq.n	8016cc6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f002 fde6 	bl	8019878 <SDMMC_CmdStopTransfer>
 8016cac:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d008      	beq.n	8016cc6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016cb8:	68bb      	ldr	r3, [r7, #8]
 8016cba:	431a      	orrs	r2, r3
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f000 f95b 	bl	8016f7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4a3f      	ldr	r2, [pc, #252]	@ (8016dc8 <HAL_SD_IRQHandler+0x1bc>)
 8016ccc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2201      	movs	r2, #1
 8016cd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	f003 0301 	and.w	r3, r3, #1
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d104      	bne.n	8016cf0 <HAL_SD_IRQHandler+0xe4>
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f003 0302 	and.w	r3, r3, #2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d003      	beq.n	8016cf8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f003 fa73 	bl	801a1dc <HAL_SD_RxCpltCallback>
 8016cf6:	e13b      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f003 fa65 	bl	801a1c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016cfe:	e137      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	f000 8132 	beq.w	8016f70 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2200      	movs	r2, #0
 8016d12:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2200      	movs	r2, #0
 8016d22:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f003 0302 	and.w	r3, r3, #2
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d104      	bne.n	8016d38 <HAL_SD_IRQHandler+0x12c>
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	f003 0320 	and.w	r3, r3, #32
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d011      	beq.n	8016d5c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f002 fd9b 	bl	8019878 <SDMMC_CmdStopTransfer>
 8016d42:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8016d44:	68bb      	ldr	r3, [r7, #8]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d008      	beq.n	8016d5c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	431a      	orrs	r2, r3
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f000 f910 	bl	8016f7c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2201      	movs	r2, #1
 8016d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2200      	movs	r2, #0
 8016d68:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	f003 0310 	and.w	r3, r3, #16
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d104      	bne.n	8016d7e <HAL_SD_IRQHandler+0x172>
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	f003 0320 	and.w	r3, r3, #32
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d002      	beq.n	8016d84 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f003 fa22 	bl	801a1c8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	f003 0301 	and.w	r3, r3, #1
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d105      	bne.n	8016d9a <HAL_SD_IRQHandler+0x18e>
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	f003 0302 	and.w	r3, r3, #2
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f000 80eb 	beq.w	8016f70 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f003 fa1e 	bl	801a1dc <HAL_SD_RxCpltCallback>
}
 8016da0:	e0e6      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d00d      	beq.n	8016dcc <HAL_SD_IRQHandler+0x1c0>
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	f003 0308 	and.w	r3, r3, #8
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d008      	beq.n	8016dcc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f001 f8a8 	bl	8017f10 <SD_Write_IT>
 8016dc0:	e0d6      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
 8016dc2:	bf00      	nop
 8016dc4:	ffff3ec5 	.word	0xffff3ec5
 8016dc8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dd2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f000 809d 	beq.w	8016f16 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016de2:	f003 0302 	and.w	r3, r3, #2
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d005      	beq.n	8016df6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dee:	f043 0202 	orr.w	r2, r3, #2
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dfc:	f003 0308 	and.w	r3, r3, #8
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d005      	beq.n	8016e10 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e08:	f043 0208 	orr.w	r2, r3, #8
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e16:	f003 0320 	and.w	r3, r3, #32
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d005      	beq.n	8016e2a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e22:	f043 0220 	orr.w	r2, r3, #32
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e30:	f003 0310 	and.w	r3, r3, #16
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d005      	beq.n	8016e44 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e3c:	f043 0210 	orr.w	r2, r3, #16
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	4a4b      	ldr	r2, [pc, #300]	@ (8016f78 <HAL_SD_IRQHandler+0x36c>)
 8016e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8016e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	68da      	ldr	r2, [r3, #12]
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016e6a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8016e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	68da      	ldr	r2, [r3, #12]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8016e8a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f002 fcf1 	bl	8019878 <SDMMC_CmdStopTransfer>
 8016e96:	4602      	mov	r2, r0
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e9c:	431a      	orrs	r2, r3
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	68da      	ldr	r2, [r3, #12]
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8016eb0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016eba:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	f003 0308 	and.w	r3, r3, #8
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d00a      	beq.n	8016edc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 f851 	bl	8016f7c <HAL_SD_ErrorCallback>
}
 8016eda:	e049      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d044      	beq.n	8016f70 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d040      	beq.n	8016f70 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8016efc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2200      	movs	r2, #0
 8016f04:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2201      	movs	r2, #1
 8016f0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 f834 	bl	8016f7c <HAL_SD_ErrorCallback>
}
 8016f14:	e02c      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d025      	beq.n	8016f70 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016f34:	f003 0304 	and.w	r3, r3, #4
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d10c      	bne.n	8016f56 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	f003 0320 	and.w	r3, r3, #32
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d003      	beq.n	8016f4e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8016f46:	6878      	ldr	r0, [r7, #4]
 8016f48:	f001 f84a 	bl	8017fe0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8016f4c:	e010      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f001 f832 	bl	8017fb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8016f54:	e00c      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f003 0320 	and.w	r3, r3, #32
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d003      	beq.n	8016f68 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f001 f833 	bl	8017fcc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8016f66:	e003      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f001 f81b 	bl	8017fa4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8016f6e:	e7ff      	b.n	8016f70 <HAL_SD_IRQHandler+0x364>
 8016f70:	bf00      	nop
 8016f72:	3710      	adds	r7, #16
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	18000f3a 	.word	0x18000f3a

08016f7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b083      	sub	sp, #12
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8016f84:	bf00      	nop
 8016f86:	370c      	adds	r7, #12
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8e:	4770      	bx	lr

08016f90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b083      	sub	sp, #12
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f9e:	0f9b      	lsrs	r3, r3, #30
 8016fa0:	b2da      	uxtb	r2, r3
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016faa:	0e9b      	lsrs	r3, r3, #26
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	f003 030f 	and.w	r3, r3, #15
 8016fb2:	b2da      	uxtb	r2, r3
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016fbc:	0e1b      	lsrs	r3, r3, #24
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	f003 0303 	and.w	r3, r3, #3
 8016fc4:	b2da      	uxtb	r2, r3
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016fce:	0c1b      	lsrs	r3, r3, #16
 8016fd0:	b2da      	uxtb	r2, r3
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016fda:	0a1b      	lsrs	r3, r3, #8
 8016fdc:	b2da      	uxtb	r2, r3
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016fe6:	b2da      	uxtb	r2, r3
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016ff0:	0d1b      	lsrs	r3, r3, #20
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016ffc:	0c1b      	lsrs	r3, r3, #16
 8016ffe:	b2db      	uxtb	r3, r3
 8017000:	f003 030f 	and.w	r3, r3, #15
 8017004:	b2da      	uxtb	r2, r3
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801700e:	0bdb      	lsrs	r3, r3, #15
 8017010:	b2db      	uxtb	r3, r3
 8017012:	f003 0301 	and.w	r3, r3, #1
 8017016:	b2da      	uxtb	r2, r3
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017020:	0b9b      	lsrs	r3, r3, #14
 8017022:	b2db      	uxtb	r3, r3
 8017024:	f003 0301 	and.w	r3, r3, #1
 8017028:	b2da      	uxtb	r2, r3
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017032:	0b5b      	lsrs	r3, r3, #13
 8017034:	b2db      	uxtb	r3, r3
 8017036:	f003 0301 	and.w	r3, r3, #1
 801703a:	b2da      	uxtb	r2, r3
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017044:	0b1b      	lsrs	r3, r3, #12
 8017046:	b2db      	uxtb	r3, r3
 8017048:	f003 0301 	and.w	r3, r3, #1
 801704c:	b2da      	uxtb	r2, r3
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	2200      	movs	r2, #0
 8017056:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801705c:	2b00      	cmp	r3, #0
 801705e:	d163      	bne.n	8017128 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017064:	009a      	lsls	r2, r3, #2
 8017066:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801706a:	4013      	ands	r3, r2
 801706c:	687a      	ldr	r2, [r7, #4]
 801706e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8017070:	0f92      	lsrs	r2, r2, #30
 8017072:	431a      	orrs	r2, r3
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801707c:	0edb      	lsrs	r3, r3, #27
 801707e:	b2db      	uxtb	r3, r3
 8017080:	f003 0307 	and.w	r3, r3, #7
 8017084:	b2da      	uxtb	r2, r3
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801708e:	0e1b      	lsrs	r3, r3, #24
 8017090:	b2db      	uxtb	r3, r3
 8017092:	f003 0307 	and.w	r3, r3, #7
 8017096:	b2da      	uxtb	r2, r3
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170a0:	0d5b      	lsrs	r3, r3, #21
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	f003 0307 	and.w	r3, r3, #7
 80170a8:	b2da      	uxtb	r2, r3
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170b2:	0c9b      	lsrs	r3, r3, #18
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	f003 0307 	and.w	r3, r3, #7
 80170ba:	b2da      	uxtb	r2, r3
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170c4:	0bdb      	lsrs	r3, r3, #15
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	f003 0307 	and.w	r3, r3, #7
 80170cc:	b2da      	uxtb	r2, r3
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	691b      	ldr	r3, [r3, #16]
 80170d6:	1c5a      	adds	r2, r3, #1
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	7e1b      	ldrb	r3, [r3, #24]
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	f003 0307 	and.w	r3, r3, #7
 80170e6:	3302      	adds	r3, #2
 80170e8:	2201      	movs	r2, #1
 80170ea:	fa02 f303 	lsl.w	r3, r2, r3
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80170f2:	fb03 f202 	mul.w	r2, r3, r2
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	7a1b      	ldrb	r3, [r3, #8]
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	f003 030f 	and.w	r3, r3, #15
 8017104:	2201      	movs	r2, #1
 8017106:	409a      	lsls	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8017114:	0a52      	lsrs	r2, r2, #9
 8017116:	fb03 f202 	mul.w	r2, r3, r2
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017124:	655a      	str	r2, [r3, #84]	@ 0x54
 8017126:	e031      	b.n	801718c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801712c:	2b01      	cmp	r3, #1
 801712e:	d11d      	bne.n	801716c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017134:	041b      	lsls	r3, r3, #16
 8017136:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801713e:	0c1b      	lsrs	r3, r3, #16
 8017140:	431a      	orrs	r2, r3
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	691b      	ldr	r3, [r3, #16]
 801714a:	3301      	adds	r3, #1
 801714c:	029a      	lsls	r2, r3, #10
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017160:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	655a      	str	r2, [r3, #84]	@ 0x54
 801716a:	e00f      	b.n	801718c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	4a58      	ldr	r2, [pc, #352]	@ (80172d4 <HAL_SD_GetCardCSD+0x344>)
 8017172:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017178:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2201      	movs	r2, #1
 8017184:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8017188:	2301      	movs	r3, #1
 801718a:	e09d      	b.n	80172c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017190:	0b9b      	lsrs	r3, r3, #14
 8017192:	b2db      	uxtb	r3, r3
 8017194:	f003 0301 	and.w	r3, r3, #1
 8017198:	b2da      	uxtb	r2, r3
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80171a2:	09db      	lsrs	r3, r3, #7
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80171aa:	b2da      	uxtb	r2, r3
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80171ba:	b2da      	uxtb	r2, r3
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171c4:	0fdb      	lsrs	r3, r3, #31
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171d0:	0f5b      	lsrs	r3, r3, #29
 80171d2:	b2db      	uxtb	r3, r3
 80171d4:	f003 0303 	and.w	r3, r3, #3
 80171d8:	b2da      	uxtb	r2, r3
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171e2:	0e9b      	lsrs	r3, r3, #26
 80171e4:	b2db      	uxtb	r3, r3
 80171e6:	f003 0307 	and.w	r3, r3, #7
 80171ea:	b2da      	uxtb	r2, r3
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171f4:	0d9b      	lsrs	r3, r3, #22
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	f003 030f 	and.w	r3, r3, #15
 80171fc:	b2da      	uxtb	r2, r3
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017206:	0d5b      	lsrs	r3, r3, #21
 8017208:	b2db      	uxtb	r3, r3
 801720a:	f003 0301 	and.w	r3, r3, #1
 801720e:	b2da      	uxtb	r2, r3
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	2200      	movs	r2, #0
 801721a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017222:	0c1b      	lsrs	r3, r3, #16
 8017224:	b2db      	uxtb	r3, r3
 8017226:	f003 0301 	and.w	r3, r3, #1
 801722a:	b2da      	uxtb	r2, r3
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017236:	0bdb      	lsrs	r3, r3, #15
 8017238:	b2db      	uxtb	r3, r3
 801723a:	f003 0301 	and.w	r3, r3, #1
 801723e:	b2da      	uxtb	r2, r3
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801724a:	0b9b      	lsrs	r3, r3, #14
 801724c:	b2db      	uxtb	r3, r3
 801724e:	f003 0301 	and.w	r3, r3, #1
 8017252:	b2da      	uxtb	r2, r3
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801725e:	0b5b      	lsrs	r3, r3, #13
 8017260:	b2db      	uxtb	r3, r3
 8017262:	f003 0301 	and.w	r3, r3, #1
 8017266:	b2da      	uxtb	r2, r3
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017272:	0b1b      	lsrs	r3, r3, #12
 8017274:	b2db      	uxtb	r3, r3
 8017276:	f003 0301 	and.w	r3, r3, #1
 801727a:	b2da      	uxtb	r2, r3
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017286:	0a9b      	lsrs	r3, r3, #10
 8017288:	b2db      	uxtb	r3, r3
 801728a:	f003 0303 	and.w	r3, r3, #3
 801728e:	b2da      	uxtb	r2, r3
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801729a:	0a1b      	lsrs	r3, r3, #8
 801729c:	b2db      	uxtb	r3, r3
 801729e:	f003 0303 	and.w	r3, r3, #3
 80172a2:	b2da      	uxtb	r2, r3
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80172ae:	085b      	lsrs	r3, r3, #1
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172b6:	b2da      	uxtb	r2, r3
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	2201      	movs	r2, #1
 80172c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr
 80172d4:	1fe00fff 	.word	0x1fe00fff

080172d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b094      	sub	sp, #80	@ 0x50
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80172e2:	2300      	movs	r3, #0
 80172e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	2b03      	cmp	r3, #3
 80172f2:	d101      	bne.n	80172f8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80172f4:	2301      	movs	r3, #1
 80172f6:	e0a7      	b.n	8017448 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80172f8:	f107 0308 	add.w	r3, r7, #8
 80172fc:	4619      	mov	r1, r3
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 fb62 	bl	80179c8 <SD_SendSDStatus>
 8017304:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8017306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017308:	2b00      	cmp	r3, #0
 801730a:	d011      	beq.n	8017330 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	4a4f      	ldr	r2, [pc, #316]	@ (8017450 <HAL_SD_GetCardStatus+0x178>)
 8017312:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801731a:	431a      	orrs	r2, r3
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2201      	movs	r2, #1
 8017324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8017328:	2301      	movs	r3, #1
 801732a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801732e:	e070      	b.n	8017412 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	099b      	lsrs	r3, r3, #6
 8017334:	b2db      	uxtb	r3, r3
 8017336:	f003 0303 	and.w	r3, r3, #3
 801733a:	b2da      	uxtb	r2, r3
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	095b      	lsrs	r3, r3, #5
 8017344:	b2db      	uxtb	r3, r3
 8017346:	f003 0301 	and.w	r3, r3, #1
 801734a:	b2da      	uxtb	r2, r3
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8017350:	68bb      	ldr	r3, [r7, #8]
 8017352:	0a1b      	lsrs	r3, r3, #8
 8017354:	b29b      	uxth	r3, r3
 8017356:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801735a:	b29a      	uxth	r2, r3
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	0e1b      	lsrs	r3, r3, #24
 8017360:	b29b      	uxth	r3, r3
 8017362:	4313      	orrs	r3, r2
 8017364:	b29a      	uxth	r2, r3
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	061a      	lsls	r2, r3, #24
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	021b      	lsls	r3, r3, #8
 8017372:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017376:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	0a1b      	lsrs	r3, r3, #8
 801737c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8017380:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	0e1b      	lsrs	r3, r3, #24
 8017386:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	b2da      	uxtb	r2, r3
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	0a1b      	lsrs	r3, r3, #8
 8017398:	b2da      	uxtb	r2, r3
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	0d1b      	lsrs	r3, r3, #20
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	f003 030f 	and.w	r3, r3, #15
 80173a8:	b2da      	uxtb	r2, r3
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	0c1b      	lsrs	r3, r3, #16
 80173b2:	b29b      	uxth	r3, r3
 80173b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	697b      	ldr	r3, [r7, #20]
 80173bc:	b29b      	uxth	r3, r3
 80173be:	b2db      	uxtb	r3, r3
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	4313      	orrs	r3, r2
 80173c4:	b29a      	uxth	r2, r3
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	0a9b      	lsrs	r3, r3, #10
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80173da:	697b      	ldr	r3, [r7, #20]
 80173dc:	0a1b      	lsrs	r3, r3, #8
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	f003 0303 	and.w	r3, r3, #3
 80173e4:	b2da      	uxtb	r2, r3
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	091b      	lsrs	r3, r3, #4
 80173ee:	b2db      	uxtb	r3, r3
 80173f0:	f003 030f 	and.w	r3, r3, #15
 80173f4:	b2da      	uxtb	r2, r3
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	f003 030f 	and.w	r3, r3, #15
 8017402:	b2da      	uxtb	r2, r3
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8017408:	69bb      	ldr	r3, [r7, #24]
 801740a:	0e1b      	lsrs	r3, r3, #24
 801740c:	b2da      	uxtb	r2, r3
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801741a:	4618      	mov	r0, r3
 801741c:	f002 f97c 	bl	8019718 <SDMMC_CmdBlockLength>
 8017420:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8017422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017424:	2b00      	cmp	r3, #0
 8017426:	d00d      	beq.n	8017444 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4a08      	ldr	r2, [pc, #32]	@ (8017450 <HAL_SD_GetCardStatus+0x178>)
 801742e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017434:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2201      	movs	r2, #1
 801743a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801743e:	2301      	movs	r3, #1
 8017440:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8017444:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8017448:	4618      	mov	r0, r3
 801744a:	3750      	adds	r7, #80	@ 0x50
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	1fe00fff 	.word	0x1fe00fff

08017454 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8017454:	b480      	push	{r7}
 8017456:	b083      	sub	sp, #12
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801749e:	2300      	movs	r3, #0
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	370c      	adds	r7, #12
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80174ac:	b590      	push	{r4, r7, lr}
 80174ae:	b08d      	sub	sp, #52	@ 0x34
 80174b0:	af02      	add	r7, sp, #8
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80174b6:	2300      	movs	r3, #0
 80174b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2203      	movs	r2, #3
 80174c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174c8:	2b03      	cmp	r3, #3
 80174ca:	d02e      	beq.n	801752a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80174d2:	d106      	bne.n	80174e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80174d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	635a      	str	r2, [r3, #52]	@ 0x34
 80174e0:	e029      	b.n	8017536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80174e8:	d10a      	bne.n	8017500 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 fb64 	bl	8017bb8 <SD_WideBus_Enable>
 80174f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80174f6:	6a3b      	ldr	r3, [r7, #32]
 80174f8:	431a      	orrs	r2, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80174fe:	e01a      	b.n	8017536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d10a      	bne.n	801751c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f000 fba1 	bl	8017c4e <SD_WideBus_Disable>
 801750c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017512:	6a3b      	ldr	r3, [r7, #32]
 8017514:	431a      	orrs	r2, r3
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	635a      	str	r2, [r3, #52]	@ 0x34
 801751a:	e00c      	b.n	8017536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017520:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	635a      	str	r2, [r3, #52]	@ 0x34
 8017528:	e005      	b.n	8017536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801752e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801753a:	2b00      	cmp	r3, #0
 801753c:	d007      	beq.n	801754e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	4a5f      	ldr	r2, [pc, #380]	@ (80176c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8017544:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8017546:	2301      	movs	r3, #1
 8017548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801754c:	e096      	b.n	801767c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801754e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8017552:	f04f 0100 	mov.w	r1, #0
 8017556:	f7fd fdf5 	bl	8015144 <HAL_RCCEx_GetPeriphCLKFreq>
 801755a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 801755c:	69fb      	ldr	r3, [r7, #28]
 801755e:	2b00      	cmp	r3, #0
 8017560:	f000 8083 	beq.w	801766a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	689b      	ldr	r3, [r3, #8]
 801756e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	691b      	ldr	r3, [r3, #16]
 8017578:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	695a      	ldr	r2, [r3, #20]
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	4950      	ldr	r1, [pc, #320]	@ (80176c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8017582:	fba1 1303 	umull	r1, r3, r1, r3
 8017586:	0e1b      	lsrs	r3, r3, #24
 8017588:	429a      	cmp	r2, r3
 801758a:	d303      	bcc.n	8017594 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	695b      	ldr	r3, [r3, #20]
 8017590:	61bb      	str	r3, [r7, #24]
 8017592:	e05a      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801759c:	d103      	bne.n	80175a6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	695b      	ldr	r3, [r3, #20]
 80175a2:	61bb      	str	r3, [r7, #24]
 80175a4:	e051      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80175aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80175ae:	d126      	bne.n	80175fe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	695b      	ldr	r3, [r3, #20]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d10e      	bne.n	80175d6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	4a43      	ldr	r2, [pc, #268]	@ (80176c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80175bc:	4293      	cmp	r3, r2
 80175be:	d906      	bls.n	80175ce <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	4a40      	ldr	r2, [pc, #256]	@ (80176c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80175c4:	fba2 2303 	umull	r2, r3, r2, r3
 80175c8:	0e5b      	lsrs	r3, r3, #25
 80175ca:	61bb      	str	r3, [r7, #24]
 80175cc:	e03d      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	695b      	ldr	r3, [r3, #20]
 80175d2:	61bb      	str	r3, [r7, #24]
 80175d4:	e039      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	695b      	ldr	r3, [r3, #20]
 80175da:	005b      	lsls	r3, r3, #1
 80175dc:	69fa      	ldr	r2, [r7, #28]
 80175de:	fbb2 f3f3 	udiv	r3, r2, r3
 80175e2:	4a39      	ldr	r2, [pc, #228]	@ (80176c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80175e4:	4293      	cmp	r3, r2
 80175e6:	d906      	bls.n	80175f6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	4a36      	ldr	r2, [pc, #216]	@ (80176c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80175ec:	fba2 2303 	umull	r2, r3, r2, r3
 80175f0:	0e5b      	lsrs	r3, r3, #25
 80175f2:	61bb      	str	r3, [r7, #24]
 80175f4:	e029      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	695b      	ldr	r3, [r3, #20]
 80175fa:	61bb      	str	r3, [r7, #24]
 80175fc:	e025      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	695b      	ldr	r3, [r3, #20]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d10e      	bne.n	8017624 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8017606:	69fb      	ldr	r3, [r7, #28]
 8017608:	4a30      	ldr	r2, [pc, #192]	@ (80176cc <HAL_SD_ConfigWideBusOperation+0x220>)
 801760a:	4293      	cmp	r3, r2
 801760c:	d906      	bls.n	801761c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	4a2c      	ldr	r2, [pc, #176]	@ (80176c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8017612:	fba2 2303 	umull	r2, r3, r2, r3
 8017616:	0e1b      	lsrs	r3, r3, #24
 8017618:	61bb      	str	r3, [r7, #24]
 801761a:	e016      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	695b      	ldr	r3, [r3, #20]
 8017620:	61bb      	str	r3, [r7, #24]
 8017622:	e012      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	695b      	ldr	r3, [r3, #20]
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	69fa      	ldr	r2, [r7, #28]
 801762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017630:	4a26      	ldr	r2, [pc, #152]	@ (80176cc <HAL_SD_ConfigWideBusOperation+0x220>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d906      	bls.n	8017644 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8017636:	69fb      	ldr	r3, [r7, #28]
 8017638:	4a22      	ldr	r2, [pc, #136]	@ (80176c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 801763a:	fba2 2303 	umull	r2, r3, r2, r3
 801763e:	0e1b      	lsrs	r3, r3, #24
 8017640:	61bb      	str	r3, [r7, #24]
 8017642:	e002      	b.n	801764a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	695b      	ldr	r3, [r3, #20]
 8017648:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681c      	ldr	r4, [r3, #0]
 801764e:	466a      	mov	r2, sp
 8017650:	f107 0314 	add.w	r3, r7, #20
 8017654:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017658:	e882 0003 	stmia.w	r2, {r0, r1}
 801765c:	f107 0308 	add.w	r3, r7, #8
 8017660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017662:	4620      	mov	r0, r4
 8017664:	f001 ff7a 	bl	801955c <SDMMC_Init>
 8017668:	e008      	b.n	801767c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801766e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8017676:	2301      	movs	r3, #1
 8017678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017684:	4618      	mov	r0, r3
 8017686:	f002 f847 	bl	8019718 <SDMMC_CmdBlockLength>
 801768a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801768c:	6a3b      	ldr	r3, [r7, #32]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d00c      	beq.n	80176ac <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	4a0a      	ldr	r2, [pc, #40]	@ (80176c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8017698:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801769e:	6a3b      	ldr	r3, [r7, #32]
 80176a0:	431a      	orrs	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80176a6:	2301      	movs	r3, #1
 80176a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2201      	movs	r2, #1
 80176b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80176b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	372c      	adds	r7, #44	@ 0x2c
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd90      	pop	{r4, r7, pc}
 80176c0:	1fe00fff 	.word	0x1fe00fff
 80176c4:	55e63b89 	.word	0x55e63b89
 80176c8:	02faf080 	.word	0x02faf080
 80176cc:	017d7840 	.word	0x017d7840

080176d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b086      	sub	sp, #24
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80176d8:	2300      	movs	r3, #0
 80176da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80176dc:	f107 030c 	add.w	r3, r7, #12
 80176e0:	4619      	mov	r1, r3
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f000 fa40 	bl	8017b68 <SD_SendStatus>
 80176e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80176ea:	697b      	ldr	r3, [r7, #20]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d005      	beq.n	80176fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	431a      	orrs	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	0a5b      	lsrs	r3, r3, #9
 8017700:	f003 030f 	and.w	r3, r3, #15
 8017704:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8017706:	693b      	ldr	r3, [r7, #16]
}
 8017708:	4618      	mov	r0, r3
 801770a:	3718      	adds	r7, #24
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b090      	sub	sp, #64	@ 0x40
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8017718:	2300      	movs	r3, #0
 801771a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 801771c:	f7f8 fc00 	bl	800ff20 <HAL_GetTick>
 8017720:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	4618      	mov	r0, r3
 8017728:	f001 ff71 	bl	801960e <SDMMC_GetPowerState>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d102      	bne.n	8017738 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017732:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8017736:	e0b5      	b.n	80178a4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801773c:	2b03      	cmp	r3, #3
 801773e:	d02e      	beq.n	801779e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	4618      	mov	r0, r3
 8017746:	f002 f9bc 	bl	8019ac2 <SDMMC_CmdSendCID>
 801774a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801774e:	2b00      	cmp	r3, #0
 8017750:	d001      	beq.n	8017756 <SD_InitCard+0x46>
    {
      return errorstate;
 8017752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017754:	e0a6      	b.n	80178a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	2100      	movs	r1, #0
 801775c:	4618      	mov	r0, r3
 801775e:	f001 ff9c 	bl	801969a <SDMMC_GetResponse>
 8017762:	4602      	mov	r2, r0
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2104      	movs	r1, #4
 801776e:	4618      	mov	r0, r3
 8017770:	f001 ff93 	bl	801969a <SDMMC_GetResponse>
 8017774:	4602      	mov	r2, r0
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2108      	movs	r1, #8
 8017780:	4618      	mov	r0, r3
 8017782:	f001 ff8a 	bl	801969a <SDMMC_GetResponse>
 8017786:	4602      	mov	r2, r0
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	210c      	movs	r1, #12
 8017792:	4618      	mov	r0, r3
 8017794:	f001 ff81 	bl	801969a <SDMMC_GetResponse>
 8017798:	4602      	mov	r2, r0
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177a2:	2b03      	cmp	r3, #3
 80177a4:	d01d      	beq.n	80177e2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80177a6:	e019      	b.n	80177dc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f107 020a 	add.w	r2, r7, #10
 80177b0:	4611      	mov	r1, r2
 80177b2:	4618      	mov	r0, r3
 80177b4:	f002 f9c4 	bl	8019b40 <SDMMC_CmdSetRelAdd>
 80177b8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80177ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80177c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177c2:	e06f      	b.n	80178a4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80177c4:	f7f8 fbac 	bl	800ff20 <HAL_GetTick>
 80177c8:	4602      	mov	r2, r0
 80177ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	f241 3287 	movw	r2, #4999	@ 0x1387
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d902      	bls.n	80177dc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80177d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80177da:	e063      	b.n	80178a4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80177dc:	897b      	ldrh	r3, [r7, #10]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d0e2      	beq.n	80177a8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177e6:	2b03      	cmp	r3, #3
 80177e8:	d036      	beq.n	8017858 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80177ea:	897b      	ldrh	r3, [r7, #10]
 80177ec:	461a      	mov	r2, r3
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681a      	ldr	r2, [r3, #0]
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177fa:	041b      	lsls	r3, r3, #16
 80177fc:	4619      	mov	r1, r3
 80177fe:	4610      	mov	r0, r2
 8017800:	f002 f97e 	bl	8019b00 <SDMMC_CmdSendCSD>
 8017804:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8017806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017808:	2b00      	cmp	r3, #0
 801780a:	d001      	beq.n	8017810 <SD_InitCard+0x100>
    {
      return errorstate;
 801780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801780e:	e049      	b.n	80178a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2100      	movs	r1, #0
 8017816:	4618      	mov	r0, r3
 8017818:	f001 ff3f 	bl	801969a <SDMMC_GetResponse>
 801781c:	4602      	mov	r2, r0
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2104      	movs	r1, #4
 8017828:	4618      	mov	r0, r3
 801782a:	f001 ff36 	bl	801969a <SDMMC_GetResponse>
 801782e:	4602      	mov	r2, r0
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2108      	movs	r1, #8
 801783a:	4618      	mov	r0, r3
 801783c:	f001 ff2d 	bl	801969a <SDMMC_GetResponse>
 8017840:	4602      	mov	r2, r0
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	210c      	movs	r1, #12
 801784c:	4618      	mov	r0, r3
 801784e:	f001 ff24 	bl	801969a <SDMMC_GetResponse>
 8017852:	4602      	mov	r2, r0
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	2104      	movs	r1, #4
 801785e:	4618      	mov	r0, r3
 8017860:	f001 ff1b 	bl	801969a <SDMMC_GetResponse>
 8017864:	4603      	mov	r3, r0
 8017866:	0d1a      	lsrs	r2, r3, #20
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801786c:	f107 030c 	add.w	r3, r7, #12
 8017870:	4619      	mov	r1, r3
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f7ff fb8c 	bl	8016f90 <HAL_SD_GetCardCSD>
 8017878:	4603      	mov	r3, r0
 801787a:	2b00      	cmp	r3, #0
 801787c:	d002      	beq.n	8017884 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801787e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8017882:	e00f      	b.n	80178a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801788c:	041b      	lsls	r3, r3, #16
 801788e:	4619      	mov	r1, r3
 8017890:	4610      	mov	r0, r2
 8017892:	f002 f82d 	bl	80198f0 <SDMMC_CmdSelDesel>
 8017896:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8017898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801789a:	2b00      	cmp	r3, #0
 801789c:	d001      	beq.n	80178a2 <SD_InitCard+0x192>
  {
    return errorstate;
 801789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178a0:	e000      	b.n	80178a4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80178a2:	2300      	movs	r3, #0
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3740      	adds	r7, #64	@ 0x40
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}

080178ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b086      	sub	sp, #24
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80178b4:	2300      	movs	r3, #0
 80178b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80178b8:	2300      	movs	r3, #0
 80178ba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80178bc:	2300      	movs	r3, #0
 80178be:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4618      	mov	r0, r3
 80178c6:	f002 f836 	bl	8019936 <SDMMC_CmdGoIdleState>
 80178ca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	e072      	b.n	80179bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	4618      	mov	r0, r3
 80178dc:	f002 f849 	bl	8019972 <SDMMC_CmdOperCond>
 80178e0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80178e8:	d10d      	bne.n	8017906 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2200      	movs	r2, #0
 80178ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4618      	mov	r0, r3
 80178f6:	f002 f81e 	bl	8019936 <SDMMC_CmdGoIdleState>
 80178fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d004      	beq.n	801790c <SD_PowerON+0x60>
    {
      return errorstate;
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	e05a      	b.n	80179bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2201      	movs	r2, #1
 801790a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017910:	2b01      	cmp	r3, #1
 8017912:	d137      	bne.n	8017984 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	2100      	movs	r1, #0
 801791a:	4618      	mov	r0, r3
 801791c:	f002 f849 	bl	80199b2 <SDMMC_CmdAppCommand>
 8017920:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d02d      	beq.n	8017984 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8017928:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801792c:	e046      	b.n	80179bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	2100      	movs	r1, #0
 8017934:	4618      	mov	r0, r3
 8017936:	f002 f83c 	bl	80199b2 <SDMMC_CmdAppCommand>
 801793a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d001      	beq.n	8017946 <SD_PowerON+0x9a>
    {
      return errorstate;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	e03a      	b.n	80179bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	491e      	ldr	r1, [pc, #120]	@ (80179c4 <SD_PowerON+0x118>)
 801794c:	4618      	mov	r0, r3
 801794e:	f002 f853 	bl	80199f8 <SDMMC_CmdAppOperCommand>
 8017952:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d002      	beq.n	8017960 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801795a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801795e:	e02d      	b.n	80179bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	2100      	movs	r1, #0
 8017966:	4618      	mov	r0, r3
 8017968:	f001 fe97 	bl	801969a <SDMMC_GetResponse>
 801796c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	0fdb      	lsrs	r3, r3, #31
 8017972:	2b01      	cmp	r3, #1
 8017974:	d101      	bne.n	801797a <SD_PowerON+0xce>
 8017976:	2301      	movs	r3, #1
 8017978:	e000      	b.n	801797c <SD_PowerON+0xd0>
 801797a:	2300      	movs	r3, #0
 801797c:	613b      	str	r3, [r7, #16]

    count++;
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	3301      	adds	r3, #1
 8017982:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801798a:	4293      	cmp	r3, r2
 801798c:	d802      	bhi.n	8017994 <SD_PowerON+0xe8>
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d0cc      	beq.n	801792e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801799a:	4293      	cmp	r3, r2
 801799c:	d902      	bls.n	80179a4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801799e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80179a2:	e00b      	b.n	80179bc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2200      	movs	r2, #0
 80179a8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d002      	beq.n	80179ba <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2201      	movs	r2, #1
 80179b8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80179ba:	2300      	movs	r3, #0
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3718      	adds	r7, #24
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	c1100000 	.word	0xc1100000

080179c8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b08c      	sub	sp, #48	@ 0x30
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80179d2:	f7f8 faa5 	bl	800ff20 <HAL_GetTick>
 80179d6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2100      	movs	r1, #0
 80179e2:	4618      	mov	r0, r3
 80179e4:	f001 fe59 	bl	801969a <SDMMC_GetResponse>
 80179e8:	4603      	mov	r3, r0
 80179ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80179ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80179f2:	d102      	bne.n	80179fa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80179f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80179f8:	e0b0      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2140      	movs	r1, #64	@ 0x40
 8017a00:	4618      	mov	r0, r3
 8017a02:	f001 fe89 	bl	8019718 <SDMMC_CmdBlockLength>
 8017a06:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017a08:	6a3b      	ldr	r3, [r7, #32]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d005      	beq.n	8017a1a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8017a16:	6a3b      	ldr	r3, [r7, #32]
 8017a18:	e0a0      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a22:	041b      	lsls	r3, r3, #16
 8017a24:	4619      	mov	r1, r3
 8017a26:	4610      	mov	r0, r2
 8017a28:	f001 ffc3 	bl	80199b2 <SDMMC_CmdAppCommand>
 8017a2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017a2e:	6a3b      	ldr	r3, [r7, #32]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d005      	beq.n	8017a40 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	e08d      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8017a40:	f04f 33ff 	mov.w	r3, #4294967295
 8017a44:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8017a46:	2340      	movs	r3, #64	@ 0x40
 8017a48:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8017a4a:	2360      	movs	r3, #96	@ 0x60
 8017a4c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8017a4e:	2302      	movs	r3, #2
 8017a50:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8017a52:	2300      	movs	r3, #0
 8017a54:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8017a56:	2301      	movs	r3, #1
 8017a58:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	f107 0208 	add.w	r2, r7, #8
 8017a62:	4611      	mov	r1, r2
 8017a64:	4618      	mov	r0, r3
 8017a66:	f001 fe2b 	bl	80196c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f002 f8ab 	bl	8019bca <SDMMC_CmdStatusRegister>
 8017a74:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017a76:	6a3b      	ldr	r3, [r7, #32]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d02b      	beq.n	8017ad4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8017a84:	6a3b      	ldr	r3, [r7, #32]
 8017a86:	e069      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d013      	beq.n	8017abe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8017a96:	2300      	movs	r3, #0
 8017a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a9a:	e00d      	b.n	8017ab8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f001 fd85 	bl	80195b0 <SDMMC_ReadFIFO>
 8017aa6:	4602      	mov	r2, r0
 8017aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aaa:	601a      	str	r2, [r3, #0]
        pData++;
 8017aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aae:	3304      	adds	r3, #4
 8017ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8017ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab4:	3301      	adds	r3, #1
 8017ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aba:	2b07      	cmp	r3, #7
 8017abc:	d9ee      	bls.n	8017a9c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017abe:	f7f8 fa2f 	bl	800ff20 <HAL_GetTick>
 8017ac2:	4602      	mov	r2, r0
 8017ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ac6:	1ad3      	subs	r3, r2, r3
 8017ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017acc:	d102      	bne.n	8017ad4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017ace:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017ad2:	e043      	b.n	8017b5c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ada:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d0d2      	beq.n	8017a88 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ae8:	f003 0308 	and.w	r3, r3, #8
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d001      	beq.n	8017af4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8017af0:	2308      	movs	r3, #8
 8017af2:	e033      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017afa:	f003 0302 	and.w	r3, r3, #2
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8017b02:	2302      	movs	r3, #2
 8017b04:	e02a      	b.n	8017b5c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b0c:	f003 0320 	and.w	r3, r3, #32
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d017      	beq.n	8017b44 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8017b14:	2320      	movs	r3, #32
 8017b16:	e021      	b.n	8017b5c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f001 fd47 	bl	80195b0 <SDMMC_ReadFIFO>
 8017b22:	4602      	mov	r2, r0
 8017b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b26:	601a      	str	r2, [r3, #0]
    pData++;
 8017b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b2a:	3304      	adds	r3, #4
 8017b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017b2e:	f7f8 f9f7 	bl	800ff20 <HAL_GetTick>
 8017b32:	4602      	mov	r2, r0
 8017b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b3c:	d102      	bne.n	8017b44 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017b3e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017b42:	e00b      	b.n	8017b5c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d1e2      	bne.n	8017b18 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	4a03      	ldr	r2, [pc, #12]	@ (8017b64 <SD_SendSDStatus+0x19c>)
 8017b58:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8017b5a:	2300      	movs	r3, #0
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	3730      	adds	r7, #48	@ 0x30
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	18000f3a 	.word	0x18000f3a

08017b68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b084      	sub	sp, #16
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d102      	bne.n	8017b7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8017b78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8017b7c:	e018      	b.n	8017bb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b86:	041b      	lsls	r3, r3, #16
 8017b88:	4619      	mov	r1, r3
 8017b8a:	4610      	mov	r0, r2
 8017b8c:	f001 fffa 	bl	8019b84 <SDMMC_CmdSendStatus>
 8017b90:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d001      	beq.n	8017b9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	e009      	b.n	8017bb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2100      	movs	r1, #0
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f001 fd79 	bl	801969a <SDMMC_GetResponse>
 8017ba8:	4602      	mov	r2, r0
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8017bae:	2300      	movs	r3, #0
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	60fb      	str	r3, [r7, #12]
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	2100      	movs	r1, #0
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f001 fd63 	bl	801969a <SDMMC_GetResponse>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017bda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017bde:	d102      	bne.n	8017be6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8017be0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017be4:	e02f      	b.n	8017c46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8017be6:	f107 030c 	add.w	r3, r7, #12
 8017bea:	4619      	mov	r1, r3
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f000 f879 	bl	8017ce4 <SD_FindSCR>
 8017bf2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d001      	beq.n	8017bfe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	e023      	b.n	8017c46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d01c      	beq.n	8017c42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c10:	041b      	lsls	r3, r3, #16
 8017c12:	4619      	mov	r1, r3
 8017c14:	4610      	mov	r0, r2
 8017c16:	f001 fecc 	bl	80199b2 <SDMMC_CmdAppCommand>
 8017c1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d001      	beq.n	8017c26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8017c22:	697b      	ldr	r3, [r7, #20]
 8017c24:	e00f      	b.n	8017c46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2102      	movs	r1, #2
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f001 ff03 	bl	8019a38 <SDMMC_CmdBusWidth>
 8017c32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d001      	beq.n	8017c3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	e003      	b.n	8017c46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	e001      	b.n	8017c46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017c42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3718      	adds	r7, #24
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}

08017c4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8017c4e:	b580      	push	{r7, lr}
 8017c50:	b086      	sub	sp, #24
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8017c56:	2300      	movs	r3, #0
 8017c58:	60fb      	str	r3, [r7, #12]
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	2100      	movs	r1, #0
 8017c64:	4618      	mov	r0, r3
 8017c66:	f001 fd18 	bl	801969a <SDMMC_GetResponse>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017c70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017c74:	d102      	bne.n	8017c7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8017c76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017c7a:	e02f      	b.n	8017cdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8017c7c:	f107 030c 	add.w	r3, r7, #12
 8017c80:	4619      	mov	r1, r3
 8017c82:	6878      	ldr	r0, [r7, #4]
 8017c84:	f000 f82e 	bl	8017ce4 <SD_FindSCR>
 8017c88:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d001      	beq.n	8017c94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	e023      	b.n	8017cdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d01c      	beq.n	8017cd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681a      	ldr	r2, [r3, #0]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ca6:	041b      	lsls	r3, r3, #16
 8017ca8:	4619      	mov	r1, r3
 8017caa:	4610      	mov	r0, r2
 8017cac:	f001 fe81 	bl	80199b2 <SDMMC_CmdAppCommand>
 8017cb0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d001      	beq.n	8017cbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	e00f      	b.n	8017cdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f001 feb8 	bl	8019a38 <SDMMC_CmdBusWidth>
 8017cc8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017cca:	697b      	ldr	r3, [r7, #20]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	e003      	b.n	8017cdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	e001      	b.n	8017cdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017cd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3718      	adds	r7, #24
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b08e      	sub	sp, #56	@ 0x38
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8017cee:	f7f8 f917 	bl	800ff20 <HAL_GetTick>
 8017cf2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	60bb      	str	r3, [r7, #8]
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8017d00:	683b      	ldr	r3, [r7, #0]
 8017d02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2108      	movs	r1, #8
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f001 fd04 	bl	8019718 <SDMMC_CmdBlockLength>
 8017d10:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d001      	beq.n	8017d1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8017d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d1a:	e0ad      	b.n	8017e78 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d24:	041b      	lsls	r3, r3, #16
 8017d26:	4619      	mov	r1, r3
 8017d28:	4610      	mov	r0, r2
 8017d2a:	f001 fe42 	bl	80199b2 <SDMMC_CmdAppCommand>
 8017d2e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d001      	beq.n	8017d3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8017d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d38:	e09e      	b.n	8017e78 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8017d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8017d40:	2308      	movs	r3, #8
 8017d42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8017d44:	2330      	movs	r3, #48	@ 0x30
 8017d46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8017d48:	2302      	movs	r3, #2
 8017d4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8017d50:	2301      	movs	r3, #1
 8017d52:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f107 0210 	add.w	r2, r7, #16
 8017d5c:	4611      	mov	r1, r2
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f001 fcae 	bl	80196c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f001 fe88 	bl	8019a7e <SDMMC_CmdSendSCR>
 8017d6e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d027      	beq.n	8017dc6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8017d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d78:	e07e      	b.n	8017e78 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d113      	bne.n	8017db0 <SD_FindSCR+0xcc>
 8017d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d110      	bne.n	8017db0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f001 fc0c 	bl	80195b0 <SDMMC_ReadFIFO>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f001 fc05 	bl	80195b0 <SDMMC_ReadFIFO>
 8017da6:	4603      	mov	r3, r0
 8017da8:	60fb      	str	r3, [r7, #12]
      index++;
 8017daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dac:	3301      	adds	r3, #1
 8017dae:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017db0:	f7f8 f8b6 	bl	800ff20 <HAL_GetTick>
 8017db4:	4602      	mov	r2, r0
 8017db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017db8:	1ad3      	subs	r3, r2, r3
 8017dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dbe:	d102      	bne.n	8017dc6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017dc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017dc4:	e058      	b.n	8017e78 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017dcc:	f240 532a 	movw	r3, #1322	@ 0x52a
 8017dd0:	4013      	ands	r3, r2
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d0d1      	beq.n	8017d7a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ddc:	f003 0308 	and.w	r3, r3, #8
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d005      	beq.n	8017df0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	2208      	movs	r2, #8
 8017dea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8017dec:	2308      	movs	r3, #8
 8017dee:	e043      	b.n	8017e78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017df6:	f003 0302 	and.w	r3, r3, #2
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d005      	beq.n	8017e0a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	2202      	movs	r2, #2
 8017e04:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8017e06:	2302      	movs	r3, #2
 8017e08:	e036      	b.n	8017e78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e10:	f003 0320 	and.w	r3, r3, #32
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d005      	beq.n	8017e24 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	2220      	movs	r2, #32
 8017e1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8017e20:	2320      	movs	r3, #32
 8017e22:	e029      	b.n	8017e78 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4a15      	ldr	r2, [pc, #84]	@ (8017e80 <SD_FindSCR+0x19c>)
 8017e2a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	061a      	lsls	r2, r3, #24
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	021b      	lsls	r3, r3, #8
 8017e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017e38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	0a1b      	lsrs	r3, r3, #8
 8017e3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017e42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	0e1b      	lsrs	r3, r3, #24
 8017e48:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e4c:	601a      	str	r2, [r3, #0]
    scr++;
 8017e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e50:	3304      	adds	r3, #4
 8017e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017e54:	68bb      	ldr	r3, [r7, #8]
 8017e56:	061a      	lsls	r2, r3, #24
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	021b      	lsls	r3, r3, #8
 8017e5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017e60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8017e62:	68bb      	ldr	r3, [r7, #8]
 8017e64:	0a1b      	lsrs	r3, r3, #8
 8017e66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017e6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	0e1b      	lsrs	r3, r3, #24
 8017e70:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e74:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8017e76:	2300      	movs	r3, #0
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3738      	adds	r7, #56	@ 0x38
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}
 8017e80:	18000f3a 	.word	0x18000f3a

08017e84 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b086      	sub	sp, #24
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e90:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e96:	2b1f      	cmp	r3, #31
 8017e98:	d936      	bls.n	8017f08 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	617b      	str	r3, [r7, #20]
 8017e9e:	e027      	b.n	8017ef0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 fb83 	bl	80195b0 <SDMMC_ReadFIFO>
 8017eaa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	b2da      	uxtb	r2, r3
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	0a1b      	lsrs	r3, r3, #8
 8017ebe:	b2da      	uxtb	r2, r3
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	3301      	adds	r3, #1
 8017ec8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	0c1b      	lsrs	r3, r3, #16
 8017ece:	b2da      	uxtb	r2, r3
 8017ed0:	693b      	ldr	r3, [r7, #16]
 8017ed2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	3301      	adds	r3, #1
 8017ed8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	0e1b      	lsrs	r3, r3, #24
 8017ede:	b2da      	uxtb	r2, r3
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017ee4:	693b      	ldr	r3, [r7, #16]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8017eea:	697b      	ldr	r3, [r7, #20]
 8017eec:	3301      	adds	r3, #1
 8017eee:	617b      	str	r3, [r7, #20]
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	2b07      	cmp	r3, #7
 8017ef4:	d9d4      	bls.n	8017ea0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	693a      	ldr	r2, [r7, #16]
 8017efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f00:	f1a3 0220 	sub.w	r2, r3, #32
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8017f08:	bf00      	nop
 8017f0a:	3718      	adds	r7, #24
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}

08017f10 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b086      	sub	sp, #24
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	69db      	ldr	r3, [r3, #28]
 8017f1c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	6a1b      	ldr	r3, [r3, #32]
 8017f22:	2b1f      	cmp	r3, #31
 8017f24:	d93a      	bls.n	8017f9c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8017f26:	2300      	movs	r3, #0
 8017f28:	617b      	str	r3, [r7, #20]
 8017f2a:	e02b      	b.n	8017f84 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	3301      	adds	r3, #1
 8017f36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	781b      	ldrb	r3, [r3, #0]
 8017f3c:	021a      	lsls	r2, r3, #8
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	4313      	orrs	r3, r2
 8017f42:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	3301      	adds	r3, #1
 8017f48:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	041a      	lsls	r2, r3, #16
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	4313      	orrs	r3, r2
 8017f54:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	3301      	adds	r3, #1
 8017f5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	061a      	lsls	r2, r3, #24
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	4313      	orrs	r3, r2
 8017f66:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	f107 020c 	add.w	r2, r7, #12
 8017f76:	4611      	mov	r1, r2
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f001 fb26 	bl	80195ca <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	3301      	adds	r3, #1
 8017f82:	617b      	str	r3, [r7, #20]
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	2b07      	cmp	r3, #7
 8017f88:	d9d0      	bls.n	8017f2c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	693a      	ldr	r2, [r7, #16]
 8017f8e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6a1b      	ldr	r3, [r3, #32]
 8017f94:	f1a3 0220 	sub.w	r2, r3, #32
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	621a      	str	r2, [r3, #32]
  }
}
 8017f9c:	bf00      	nop
 8017f9e:	3718      	adds	r7, #24
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b083      	sub	sp, #12
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8017fac:	bf00      	nop
 8017fae:	370c      	adds	r7, #12
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb6:	4770      	bx	lr

08017fb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8017fb8:	b480      	push	{r7}
 8017fba:	b083      	sub	sp, #12
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8017fc0:	bf00      	nop
 8017fc2:	370c      	adds	r7, #12
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr

08017fcc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8017fd4:	bf00      	nop
 8017fd6:	370c      	adds	r7, #12
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fde:	4770      	bx	lr

08017fe0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b083      	sub	sp, #12
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8017fe8:	bf00      	nop
 8017fea:	370c      	adds	r7, #12
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b084      	sub	sp, #16
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d101      	bne.n	8018006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018002:	2301      	movs	r3, #1
 8018004:	e10f      	b.n	8018226 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	2200      	movs	r2, #0
 801800a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	4a87      	ldr	r2, [pc, #540]	@ (8018230 <HAL_SPI_Init+0x23c>)
 8018012:	4293      	cmp	r3, r2
 8018014:	d00f      	beq.n	8018036 <HAL_SPI_Init+0x42>
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4a86      	ldr	r2, [pc, #536]	@ (8018234 <HAL_SPI_Init+0x240>)
 801801c:	4293      	cmp	r3, r2
 801801e:	d00a      	beq.n	8018036 <HAL_SPI_Init+0x42>
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4a84      	ldr	r2, [pc, #528]	@ (8018238 <HAL_SPI_Init+0x244>)
 8018026:	4293      	cmp	r3, r2
 8018028:	d005      	beq.n	8018036 <HAL_SPI_Init+0x42>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	68db      	ldr	r3, [r3, #12]
 801802e:	2b0f      	cmp	r3, #15
 8018030:	d901      	bls.n	8018036 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8018032:	2301      	movs	r3, #1
 8018034:	e0f7      	b.n	8018226 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f000 f90a 	bl	8018250 <SPI_GetPacketSize>
 801803c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	4a7b      	ldr	r2, [pc, #492]	@ (8018230 <HAL_SPI_Init+0x23c>)
 8018044:	4293      	cmp	r3, r2
 8018046:	d00c      	beq.n	8018062 <HAL_SPI_Init+0x6e>
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	4a79      	ldr	r2, [pc, #484]	@ (8018234 <HAL_SPI_Init+0x240>)
 801804e:	4293      	cmp	r3, r2
 8018050:	d007      	beq.n	8018062 <HAL_SPI_Init+0x6e>
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	4a78      	ldr	r2, [pc, #480]	@ (8018238 <HAL_SPI_Init+0x244>)
 8018058:	4293      	cmp	r3, r2
 801805a:	d002      	beq.n	8018062 <HAL_SPI_Init+0x6e>
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2b08      	cmp	r3, #8
 8018060:	d811      	bhi.n	8018086 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018066:	4a72      	ldr	r2, [pc, #456]	@ (8018230 <HAL_SPI_Init+0x23c>)
 8018068:	4293      	cmp	r3, r2
 801806a:	d009      	beq.n	8018080 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	4a70      	ldr	r2, [pc, #448]	@ (8018234 <HAL_SPI_Init+0x240>)
 8018072:	4293      	cmp	r3, r2
 8018074:	d004      	beq.n	8018080 <HAL_SPI_Init+0x8c>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	4a6f      	ldr	r2, [pc, #444]	@ (8018238 <HAL_SPI_Init+0x244>)
 801807c:	4293      	cmp	r3, r2
 801807e:	d104      	bne.n	801808a <HAL_SPI_Init+0x96>
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	2b10      	cmp	r3, #16
 8018084:	d901      	bls.n	801808a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8018086:	2301      	movs	r3, #1
 8018088:	e0cd      	b.n	8018226 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8018090:	b2db      	uxtb	r3, r3
 8018092:	2b00      	cmp	r3, #0
 8018094:	d106      	bne.n	80180a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	2200      	movs	r2, #0
 801809a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f000 f8cc 	bl	801823c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2202      	movs	r2, #2
 80180a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	f022 0201 	bic.w	r2, r2, #1
 80180ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	689b      	ldr	r3, [r3, #8]
 80180c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80180c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	699b      	ldr	r3, [r3, #24]
 80180cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80180d0:	d119      	bne.n	8018106 <HAL_SPI_Init+0x112>
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80180da:	d103      	bne.n	80180e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d008      	beq.n	80180f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d10c      	bne.n	8018106 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80180f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80180f4:	d107      	bne.n	8018106 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	685b      	ldr	r3, [r3, #4]
 801810a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801810e:	2b00      	cmp	r3, #0
 8018110:	d00f      	beq.n	8018132 <HAL_SPI_Init+0x13e>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	2b06      	cmp	r3, #6
 8018118:	d90b      	bls.n	8018132 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	430a      	orrs	r2, r1
 801812e:	601a      	str	r2, [r3, #0]
 8018130:	e007      	b.n	8018142 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	69da      	ldr	r2, [r3, #28]
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801814a:	431a      	orrs	r2, r3
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	431a      	orrs	r2, r3
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018154:	ea42 0103 	orr.w	r1, r2, r3
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	68da      	ldr	r2, [r3, #12]
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	430a      	orrs	r2, r1
 8018162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801816c:	431a      	orrs	r2, r3
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018172:	431a      	orrs	r2, r3
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	699b      	ldr	r3, [r3, #24]
 8018178:	431a      	orrs	r2, r3
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	691b      	ldr	r3, [r3, #16]
 801817e:	431a      	orrs	r2, r3
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	695b      	ldr	r3, [r3, #20]
 8018184:	431a      	orrs	r2, r3
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6a1b      	ldr	r3, [r3, #32]
 801818a:	431a      	orrs	r2, r3
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	685b      	ldr	r3, [r3, #4]
 8018190:	431a      	orrs	r2, r3
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018196:	431a      	orrs	r2, r3
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	689b      	ldr	r3, [r3, #8]
 801819c:	431a      	orrs	r2, r3
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80181a2:	ea42 0103 	orr.w	r1, r2, r3
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	430a      	orrs	r2, r1
 80181b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d113      	bne.n	80181e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	689b      	ldr	r3, [r3, #8]
 80181c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80181cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	689b      	ldr	r3, [r3, #8]
 80181d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80181e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	f022 0201 	bic.w	r2, r2, #1
 80181f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00a      	beq.n	8018214 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	68db      	ldr	r3, [r3, #12]
 8018204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	430a      	orrs	r2, r1
 8018212:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2200      	movs	r2, #0
 8018218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2201      	movs	r2, #1
 8018220:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8018224:	2300      	movs	r3, #0
}
 8018226:	4618      	mov	r0, r3
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	40013000 	.word	0x40013000
 8018234:	40003800 	.word	0x40003800
 8018238:	40003c00 	.word	0x40003c00

0801823c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 801823c:	b480      	push	{r7}
 801823e:	b083      	sub	sp, #12
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8018244:	bf00      	nop
 8018246:	370c      	adds	r7, #12
 8018248:	46bd      	mov	sp, r7
 801824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824e:	4770      	bx	lr

08018250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8018250:	b480      	push	{r7}
 8018252:	b085      	sub	sp, #20
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801825c:	095b      	lsrs	r3, r3, #5
 801825e:	3301      	adds	r3, #1
 8018260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	3301      	adds	r3, #1
 8018268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	3307      	adds	r3, #7
 801826e:	08db      	lsrs	r3, r3, #3
 8018270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	68fa      	ldr	r2, [r7, #12]
 8018276:	fb02 f303 	mul.w	r3, r2, r3
}
 801827a:	4618      	mov	r0, r3
 801827c:	3714      	adds	r7, #20
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr

08018286 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018286:	b580      	push	{r7, lr}
 8018288:	b082      	sub	sp, #8
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d101      	bne.n	8018298 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018294:	2301      	movs	r3, #1
 8018296:	e042      	b.n	801831e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d106      	bne.n	80182b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2200      	movs	r2, #0
 80182a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80182aa:	6878      	ldr	r0, [r7, #4]
 80182ac:	f7f3 fafc 	bl	800b8a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2224      	movs	r2, #36	@ 0x24
 80182b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	f022 0201 	bic.w	r2, r2, #1
 80182c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d002      	beq.n	80182d6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f000 fe1f 	bl	8018f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f000 f8b4 	bl	8018444 <UART_SetConfig>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b01      	cmp	r3, #1
 80182e0:	d101      	bne.n	80182e6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80182e2:	2301      	movs	r3, #1
 80182e4:	e01b      	b.n	801831e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	685a      	ldr	r2, [r3, #4]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80182f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	689a      	ldr	r2, [r3, #8]
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018304:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f042 0201 	orr.w	r2, r2, #1
 8018314:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f000 fe9e 	bl	8019058 <UART_CheckIdleState>
 801831c:	4603      	mov	r3, r0
}
 801831e:	4618      	mov	r0, r3
 8018320:	3708      	adds	r7, #8
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}

08018326 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018326:	b580      	push	{r7, lr}
 8018328:	b08a      	sub	sp, #40	@ 0x28
 801832a:	af02      	add	r7, sp, #8
 801832c:	60f8      	str	r0, [r7, #12]
 801832e:	60b9      	str	r1, [r7, #8]
 8018330:	603b      	str	r3, [r7, #0]
 8018332:	4613      	mov	r3, r2
 8018334:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801833c:	2b20      	cmp	r3, #32
 801833e:	d17b      	bne.n	8018438 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d002      	beq.n	801834c <HAL_UART_Transmit+0x26>
 8018346:	88fb      	ldrh	r3, [r7, #6]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d101      	bne.n	8018350 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801834c:	2301      	movs	r3, #1
 801834e:	e074      	b.n	801843a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	2200      	movs	r2, #0
 8018354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	2221      	movs	r2, #33	@ 0x21
 801835c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018360:	f7f7 fdde 	bl	800ff20 <HAL_GetTick>
 8018364:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	88fa      	ldrh	r2, [r7, #6]
 801836a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	88fa      	ldrh	r2, [r7, #6]
 8018372:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	689b      	ldr	r3, [r3, #8]
 801837a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801837e:	d108      	bne.n	8018392 <HAL_UART_Transmit+0x6c>
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	691b      	ldr	r3, [r3, #16]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d104      	bne.n	8018392 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8018388:	2300      	movs	r3, #0
 801838a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801838c:	68bb      	ldr	r3, [r7, #8]
 801838e:	61bb      	str	r3, [r7, #24]
 8018390:	e003      	b.n	801839a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018396:	2300      	movs	r3, #0
 8018398:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801839a:	e030      	b.n	80183fe <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	9300      	str	r3, [sp, #0]
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	2200      	movs	r2, #0
 80183a4:	2180      	movs	r1, #128	@ 0x80
 80183a6:	68f8      	ldr	r0, [r7, #12]
 80183a8:	f000 ff00 	bl	80191ac <UART_WaitOnFlagUntilTimeout>
 80183ac:	4603      	mov	r3, r0
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d005      	beq.n	80183be <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	2220      	movs	r2, #32
 80183b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80183ba:	2303      	movs	r3, #3
 80183bc:	e03d      	b.n	801843a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80183be:	69fb      	ldr	r3, [r7, #28]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d10b      	bne.n	80183dc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80183c4:	69bb      	ldr	r3, [r7, #24]
 80183c6:	881b      	ldrh	r3, [r3, #0]
 80183c8:	461a      	mov	r2, r3
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80183d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80183d4:	69bb      	ldr	r3, [r7, #24]
 80183d6:	3302      	adds	r3, #2
 80183d8:	61bb      	str	r3, [r7, #24]
 80183da:	e007      	b.n	80183ec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80183dc:	69fb      	ldr	r3, [r7, #28]
 80183de:	781a      	ldrb	r2, [r3, #0]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	3301      	adds	r3, #1
 80183ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	3b01      	subs	r3, #1
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018404:	b29b      	uxth	r3, r3
 8018406:	2b00      	cmp	r3, #0
 8018408:	d1c8      	bne.n	801839c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	9300      	str	r3, [sp, #0]
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	2200      	movs	r2, #0
 8018412:	2140      	movs	r1, #64	@ 0x40
 8018414:	68f8      	ldr	r0, [r7, #12]
 8018416:	f000 fec9 	bl	80191ac <UART_WaitOnFlagUntilTimeout>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	d005      	beq.n	801842c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	2220      	movs	r2, #32
 8018424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018428:	2303      	movs	r3, #3
 801842a:	e006      	b.n	801843a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2220      	movs	r2, #32
 8018430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018434:	2300      	movs	r3, #0
 8018436:	e000      	b.n	801843a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018438:	2302      	movs	r3, #2
  }
}
 801843a:	4618      	mov	r0, r3
 801843c:	3720      	adds	r7, #32
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
	...

08018444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018448:	b092      	sub	sp, #72	@ 0x48
 801844a:	af00      	add	r7, sp, #0
 801844c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801844e:	2300      	movs	r3, #0
 8018450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	689a      	ldr	r2, [r3, #8]
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	691b      	ldr	r3, [r3, #16]
 801845c:	431a      	orrs	r2, r3
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	695b      	ldr	r3, [r3, #20]
 8018462:	431a      	orrs	r2, r3
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	69db      	ldr	r3, [r3, #28]
 8018468:	4313      	orrs	r3, r2
 801846a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801846c:	697b      	ldr	r3, [r7, #20]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	681a      	ldr	r2, [r3, #0]
 8018472:	4bbe      	ldr	r3, [pc, #760]	@ (801876c <UART_SetConfig+0x328>)
 8018474:	4013      	ands	r3, r2
 8018476:	697a      	ldr	r2, [r7, #20]
 8018478:	6812      	ldr	r2, [r2, #0]
 801847a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801847c:	430b      	orrs	r3, r1
 801847e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	68da      	ldr	r2, [r3, #12]
 801848e:	697b      	ldr	r3, [r7, #20]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	430a      	orrs	r2, r1
 8018494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	699b      	ldr	r3, [r3, #24]
 801849a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4ab3      	ldr	r2, [pc, #716]	@ (8018770 <UART_SetConfig+0x32c>)
 80184a2:	4293      	cmp	r3, r2
 80184a4:	d004      	beq.n	80184b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	6a1b      	ldr	r3, [r3, #32]
 80184aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80184ac:	4313      	orrs	r3, r2
 80184ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	689a      	ldr	r2, [r3, #8]
 80184b6:	4baf      	ldr	r3, [pc, #700]	@ (8018774 <UART_SetConfig+0x330>)
 80184b8:	4013      	ands	r3, r2
 80184ba:	697a      	ldr	r2, [r7, #20]
 80184bc:	6812      	ldr	r2, [r2, #0]
 80184be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80184c0:	430b      	orrs	r3, r1
 80184c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80184c4:	697b      	ldr	r3, [r7, #20]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184ca:	f023 010f 	bic.w	r1, r3, #15
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80184d2:	697b      	ldr	r3, [r7, #20]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	430a      	orrs	r2, r1
 80184d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	4aa6      	ldr	r2, [pc, #664]	@ (8018778 <UART_SetConfig+0x334>)
 80184e0:	4293      	cmp	r3, r2
 80184e2:	d177      	bne.n	80185d4 <UART_SetConfig+0x190>
 80184e4:	4ba5      	ldr	r3, [pc, #660]	@ (801877c <UART_SetConfig+0x338>)
 80184e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80184e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80184ec:	2b28      	cmp	r3, #40	@ 0x28
 80184ee:	d86d      	bhi.n	80185cc <UART_SetConfig+0x188>
 80184f0:	a201      	add	r2, pc, #4	@ (adr r2, 80184f8 <UART_SetConfig+0xb4>)
 80184f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f6:	bf00      	nop
 80184f8:	0801859d 	.word	0x0801859d
 80184fc:	080185cd 	.word	0x080185cd
 8018500:	080185cd 	.word	0x080185cd
 8018504:	080185cd 	.word	0x080185cd
 8018508:	080185cd 	.word	0x080185cd
 801850c:	080185cd 	.word	0x080185cd
 8018510:	080185cd 	.word	0x080185cd
 8018514:	080185cd 	.word	0x080185cd
 8018518:	080185a5 	.word	0x080185a5
 801851c:	080185cd 	.word	0x080185cd
 8018520:	080185cd 	.word	0x080185cd
 8018524:	080185cd 	.word	0x080185cd
 8018528:	080185cd 	.word	0x080185cd
 801852c:	080185cd 	.word	0x080185cd
 8018530:	080185cd 	.word	0x080185cd
 8018534:	080185cd 	.word	0x080185cd
 8018538:	080185ad 	.word	0x080185ad
 801853c:	080185cd 	.word	0x080185cd
 8018540:	080185cd 	.word	0x080185cd
 8018544:	080185cd 	.word	0x080185cd
 8018548:	080185cd 	.word	0x080185cd
 801854c:	080185cd 	.word	0x080185cd
 8018550:	080185cd 	.word	0x080185cd
 8018554:	080185cd 	.word	0x080185cd
 8018558:	080185b5 	.word	0x080185b5
 801855c:	080185cd 	.word	0x080185cd
 8018560:	080185cd 	.word	0x080185cd
 8018564:	080185cd 	.word	0x080185cd
 8018568:	080185cd 	.word	0x080185cd
 801856c:	080185cd 	.word	0x080185cd
 8018570:	080185cd 	.word	0x080185cd
 8018574:	080185cd 	.word	0x080185cd
 8018578:	080185bd 	.word	0x080185bd
 801857c:	080185cd 	.word	0x080185cd
 8018580:	080185cd 	.word	0x080185cd
 8018584:	080185cd 	.word	0x080185cd
 8018588:	080185cd 	.word	0x080185cd
 801858c:	080185cd 	.word	0x080185cd
 8018590:	080185cd 	.word	0x080185cd
 8018594:	080185cd 	.word	0x080185cd
 8018598:	080185c5 	.word	0x080185c5
 801859c:	2301      	movs	r3, #1
 801859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185a2:	e222      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185a4:	2304      	movs	r3, #4
 80185a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185aa:	e21e      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185ac:	2308      	movs	r3, #8
 80185ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185b2:	e21a      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185b4:	2310      	movs	r3, #16
 80185b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ba:	e216      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185bc:	2320      	movs	r3, #32
 80185be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185c2:	e212      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185c4:	2340      	movs	r3, #64	@ 0x40
 80185c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ca:	e20e      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185cc:	2380      	movs	r3, #128	@ 0x80
 80185ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185d2:	e20a      	b.n	80189ea <UART_SetConfig+0x5a6>
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	4a69      	ldr	r2, [pc, #420]	@ (8018780 <UART_SetConfig+0x33c>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d130      	bne.n	8018640 <UART_SetConfig+0x1fc>
 80185de:	4b67      	ldr	r3, [pc, #412]	@ (801877c <UART_SetConfig+0x338>)
 80185e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185e2:	f003 0307 	and.w	r3, r3, #7
 80185e6:	2b05      	cmp	r3, #5
 80185e8:	d826      	bhi.n	8018638 <UART_SetConfig+0x1f4>
 80185ea:	a201      	add	r2, pc, #4	@ (adr r2, 80185f0 <UART_SetConfig+0x1ac>)
 80185ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185f0:	08018609 	.word	0x08018609
 80185f4:	08018611 	.word	0x08018611
 80185f8:	08018619 	.word	0x08018619
 80185fc:	08018621 	.word	0x08018621
 8018600:	08018629 	.word	0x08018629
 8018604:	08018631 	.word	0x08018631
 8018608:	2300      	movs	r3, #0
 801860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801860e:	e1ec      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018610:	2304      	movs	r3, #4
 8018612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018616:	e1e8      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018618:	2308      	movs	r3, #8
 801861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801861e:	e1e4      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018620:	2310      	movs	r3, #16
 8018622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018626:	e1e0      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018628:	2320      	movs	r3, #32
 801862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801862e:	e1dc      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018630:	2340      	movs	r3, #64	@ 0x40
 8018632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018636:	e1d8      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018638:	2380      	movs	r3, #128	@ 0x80
 801863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801863e:	e1d4      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	4a4f      	ldr	r2, [pc, #316]	@ (8018784 <UART_SetConfig+0x340>)
 8018646:	4293      	cmp	r3, r2
 8018648:	d130      	bne.n	80186ac <UART_SetConfig+0x268>
 801864a:	4b4c      	ldr	r3, [pc, #304]	@ (801877c <UART_SetConfig+0x338>)
 801864c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801864e:	f003 0307 	and.w	r3, r3, #7
 8018652:	2b05      	cmp	r3, #5
 8018654:	d826      	bhi.n	80186a4 <UART_SetConfig+0x260>
 8018656:	a201      	add	r2, pc, #4	@ (adr r2, 801865c <UART_SetConfig+0x218>)
 8018658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801865c:	08018675 	.word	0x08018675
 8018660:	0801867d 	.word	0x0801867d
 8018664:	08018685 	.word	0x08018685
 8018668:	0801868d 	.word	0x0801868d
 801866c:	08018695 	.word	0x08018695
 8018670:	0801869d 	.word	0x0801869d
 8018674:	2300      	movs	r3, #0
 8018676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801867a:	e1b6      	b.n	80189ea <UART_SetConfig+0x5a6>
 801867c:	2304      	movs	r3, #4
 801867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018682:	e1b2      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018684:	2308      	movs	r3, #8
 8018686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801868a:	e1ae      	b.n	80189ea <UART_SetConfig+0x5a6>
 801868c:	2310      	movs	r3, #16
 801868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018692:	e1aa      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018694:	2320      	movs	r3, #32
 8018696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801869a:	e1a6      	b.n	80189ea <UART_SetConfig+0x5a6>
 801869c:	2340      	movs	r3, #64	@ 0x40
 801869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186a2:	e1a2      	b.n	80189ea <UART_SetConfig+0x5a6>
 80186a4:	2380      	movs	r3, #128	@ 0x80
 80186a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186aa:	e19e      	b.n	80189ea <UART_SetConfig+0x5a6>
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4a35      	ldr	r2, [pc, #212]	@ (8018788 <UART_SetConfig+0x344>)
 80186b2:	4293      	cmp	r3, r2
 80186b4:	d130      	bne.n	8018718 <UART_SetConfig+0x2d4>
 80186b6:	4b31      	ldr	r3, [pc, #196]	@ (801877c <UART_SetConfig+0x338>)
 80186b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186ba:	f003 0307 	and.w	r3, r3, #7
 80186be:	2b05      	cmp	r3, #5
 80186c0:	d826      	bhi.n	8018710 <UART_SetConfig+0x2cc>
 80186c2:	a201      	add	r2, pc, #4	@ (adr r2, 80186c8 <UART_SetConfig+0x284>)
 80186c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c8:	080186e1 	.word	0x080186e1
 80186cc:	080186e9 	.word	0x080186e9
 80186d0:	080186f1 	.word	0x080186f1
 80186d4:	080186f9 	.word	0x080186f9
 80186d8:	08018701 	.word	0x08018701
 80186dc:	08018709 	.word	0x08018709
 80186e0:	2300      	movs	r3, #0
 80186e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186e6:	e180      	b.n	80189ea <UART_SetConfig+0x5a6>
 80186e8:	2304      	movs	r3, #4
 80186ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ee:	e17c      	b.n	80189ea <UART_SetConfig+0x5a6>
 80186f0:	2308      	movs	r3, #8
 80186f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186f6:	e178      	b.n	80189ea <UART_SetConfig+0x5a6>
 80186f8:	2310      	movs	r3, #16
 80186fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186fe:	e174      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018700:	2320      	movs	r3, #32
 8018702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018706:	e170      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018708:	2340      	movs	r3, #64	@ 0x40
 801870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801870e:	e16c      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018710:	2380      	movs	r3, #128	@ 0x80
 8018712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018716:	e168      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	4a1b      	ldr	r2, [pc, #108]	@ (801878c <UART_SetConfig+0x348>)
 801871e:	4293      	cmp	r3, r2
 8018720:	d142      	bne.n	80187a8 <UART_SetConfig+0x364>
 8018722:	4b16      	ldr	r3, [pc, #88]	@ (801877c <UART_SetConfig+0x338>)
 8018724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018726:	f003 0307 	and.w	r3, r3, #7
 801872a:	2b05      	cmp	r3, #5
 801872c:	d838      	bhi.n	80187a0 <UART_SetConfig+0x35c>
 801872e:	a201      	add	r2, pc, #4	@ (adr r2, 8018734 <UART_SetConfig+0x2f0>)
 8018730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018734:	0801874d 	.word	0x0801874d
 8018738:	08018755 	.word	0x08018755
 801873c:	0801875d 	.word	0x0801875d
 8018740:	08018765 	.word	0x08018765
 8018744:	08018791 	.word	0x08018791
 8018748:	08018799 	.word	0x08018799
 801874c:	2300      	movs	r3, #0
 801874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018752:	e14a      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018754:	2304      	movs	r3, #4
 8018756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801875a:	e146      	b.n	80189ea <UART_SetConfig+0x5a6>
 801875c:	2308      	movs	r3, #8
 801875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018762:	e142      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018764:	2310      	movs	r3, #16
 8018766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801876a:	e13e      	b.n	80189ea <UART_SetConfig+0x5a6>
 801876c:	cfff69f3 	.word	0xcfff69f3
 8018770:	58000c00 	.word	0x58000c00
 8018774:	11fff4ff 	.word	0x11fff4ff
 8018778:	40011000 	.word	0x40011000
 801877c:	58024400 	.word	0x58024400
 8018780:	40004400 	.word	0x40004400
 8018784:	40004800 	.word	0x40004800
 8018788:	40004c00 	.word	0x40004c00
 801878c:	40005000 	.word	0x40005000
 8018790:	2320      	movs	r3, #32
 8018792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018796:	e128      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018798:	2340      	movs	r3, #64	@ 0x40
 801879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801879e:	e124      	b.n	80189ea <UART_SetConfig+0x5a6>
 80187a0:	2380      	movs	r3, #128	@ 0x80
 80187a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187a6:	e120      	b.n	80189ea <UART_SetConfig+0x5a6>
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	4acb      	ldr	r2, [pc, #812]	@ (8018adc <UART_SetConfig+0x698>)
 80187ae:	4293      	cmp	r3, r2
 80187b0:	d176      	bne.n	80188a0 <UART_SetConfig+0x45c>
 80187b2:	4bcb      	ldr	r3, [pc, #812]	@ (8018ae0 <UART_SetConfig+0x69c>)
 80187b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80187ba:	2b28      	cmp	r3, #40	@ 0x28
 80187bc:	d86c      	bhi.n	8018898 <UART_SetConfig+0x454>
 80187be:	a201      	add	r2, pc, #4	@ (adr r2, 80187c4 <UART_SetConfig+0x380>)
 80187c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187c4:	08018869 	.word	0x08018869
 80187c8:	08018899 	.word	0x08018899
 80187cc:	08018899 	.word	0x08018899
 80187d0:	08018899 	.word	0x08018899
 80187d4:	08018899 	.word	0x08018899
 80187d8:	08018899 	.word	0x08018899
 80187dc:	08018899 	.word	0x08018899
 80187e0:	08018899 	.word	0x08018899
 80187e4:	08018871 	.word	0x08018871
 80187e8:	08018899 	.word	0x08018899
 80187ec:	08018899 	.word	0x08018899
 80187f0:	08018899 	.word	0x08018899
 80187f4:	08018899 	.word	0x08018899
 80187f8:	08018899 	.word	0x08018899
 80187fc:	08018899 	.word	0x08018899
 8018800:	08018899 	.word	0x08018899
 8018804:	08018879 	.word	0x08018879
 8018808:	08018899 	.word	0x08018899
 801880c:	08018899 	.word	0x08018899
 8018810:	08018899 	.word	0x08018899
 8018814:	08018899 	.word	0x08018899
 8018818:	08018899 	.word	0x08018899
 801881c:	08018899 	.word	0x08018899
 8018820:	08018899 	.word	0x08018899
 8018824:	08018881 	.word	0x08018881
 8018828:	08018899 	.word	0x08018899
 801882c:	08018899 	.word	0x08018899
 8018830:	08018899 	.word	0x08018899
 8018834:	08018899 	.word	0x08018899
 8018838:	08018899 	.word	0x08018899
 801883c:	08018899 	.word	0x08018899
 8018840:	08018899 	.word	0x08018899
 8018844:	08018889 	.word	0x08018889
 8018848:	08018899 	.word	0x08018899
 801884c:	08018899 	.word	0x08018899
 8018850:	08018899 	.word	0x08018899
 8018854:	08018899 	.word	0x08018899
 8018858:	08018899 	.word	0x08018899
 801885c:	08018899 	.word	0x08018899
 8018860:	08018899 	.word	0x08018899
 8018864:	08018891 	.word	0x08018891
 8018868:	2301      	movs	r3, #1
 801886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886e:	e0bc      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018870:	2304      	movs	r3, #4
 8018872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018876:	e0b8      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018878:	2308      	movs	r3, #8
 801887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801887e:	e0b4      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018880:	2310      	movs	r3, #16
 8018882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018886:	e0b0      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018888:	2320      	movs	r3, #32
 801888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801888e:	e0ac      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018890:	2340      	movs	r3, #64	@ 0x40
 8018892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018896:	e0a8      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018898:	2380      	movs	r3, #128	@ 0x80
 801889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801889e:	e0a4      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188a0:	697b      	ldr	r3, [r7, #20]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	4a8f      	ldr	r2, [pc, #572]	@ (8018ae4 <UART_SetConfig+0x6a0>)
 80188a6:	4293      	cmp	r3, r2
 80188a8:	d130      	bne.n	801890c <UART_SetConfig+0x4c8>
 80188aa:	4b8d      	ldr	r3, [pc, #564]	@ (8018ae0 <UART_SetConfig+0x69c>)
 80188ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80188ae:	f003 0307 	and.w	r3, r3, #7
 80188b2:	2b05      	cmp	r3, #5
 80188b4:	d826      	bhi.n	8018904 <UART_SetConfig+0x4c0>
 80188b6:	a201      	add	r2, pc, #4	@ (adr r2, 80188bc <UART_SetConfig+0x478>)
 80188b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188bc:	080188d5 	.word	0x080188d5
 80188c0:	080188dd 	.word	0x080188dd
 80188c4:	080188e5 	.word	0x080188e5
 80188c8:	080188ed 	.word	0x080188ed
 80188cc:	080188f5 	.word	0x080188f5
 80188d0:	080188fd 	.word	0x080188fd
 80188d4:	2300      	movs	r3, #0
 80188d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188da:	e086      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188dc:	2304      	movs	r3, #4
 80188de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188e2:	e082      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188e4:	2308      	movs	r3, #8
 80188e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ea:	e07e      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188ec:	2310      	movs	r3, #16
 80188ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188f2:	e07a      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188f4:	2320      	movs	r3, #32
 80188f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188fa:	e076      	b.n	80189ea <UART_SetConfig+0x5a6>
 80188fc:	2340      	movs	r3, #64	@ 0x40
 80188fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018902:	e072      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018904:	2380      	movs	r3, #128	@ 0x80
 8018906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801890a:	e06e      	b.n	80189ea <UART_SetConfig+0x5a6>
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	4a75      	ldr	r2, [pc, #468]	@ (8018ae8 <UART_SetConfig+0x6a4>)
 8018912:	4293      	cmp	r3, r2
 8018914:	d130      	bne.n	8018978 <UART_SetConfig+0x534>
 8018916:	4b72      	ldr	r3, [pc, #456]	@ (8018ae0 <UART_SetConfig+0x69c>)
 8018918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801891a:	f003 0307 	and.w	r3, r3, #7
 801891e:	2b05      	cmp	r3, #5
 8018920:	d826      	bhi.n	8018970 <UART_SetConfig+0x52c>
 8018922:	a201      	add	r2, pc, #4	@ (adr r2, 8018928 <UART_SetConfig+0x4e4>)
 8018924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018928:	08018941 	.word	0x08018941
 801892c:	08018949 	.word	0x08018949
 8018930:	08018951 	.word	0x08018951
 8018934:	08018959 	.word	0x08018959
 8018938:	08018961 	.word	0x08018961
 801893c:	08018969 	.word	0x08018969
 8018940:	2300      	movs	r3, #0
 8018942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018946:	e050      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018948:	2304      	movs	r3, #4
 801894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801894e:	e04c      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018950:	2308      	movs	r3, #8
 8018952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018956:	e048      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018958:	2310      	movs	r3, #16
 801895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801895e:	e044      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018960:	2320      	movs	r3, #32
 8018962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018966:	e040      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018968:	2340      	movs	r3, #64	@ 0x40
 801896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801896e:	e03c      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018970:	2380      	movs	r3, #128	@ 0x80
 8018972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018976:	e038      	b.n	80189ea <UART_SetConfig+0x5a6>
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	4a5b      	ldr	r2, [pc, #364]	@ (8018aec <UART_SetConfig+0x6a8>)
 801897e:	4293      	cmp	r3, r2
 8018980:	d130      	bne.n	80189e4 <UART_SetConfig+0x5a0>
 8018982:	4b57      	ldr	r3, [pc, #348]	@ (8018ae0 <UART_SetConfig+0x69c>)
 8018984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018986:	f003 0307 	and.w	r3, r3, #7
 801898a:	2b05      	cmp	r3, #5
 801898c:	d826      	bhi.n	80189dc <UART_SetConfig+0x598>
 801898e:	a201      	add	r2, pc, #4	@ (adr r2, 8018994 <UART_SetConfig+0x550>)
 8018990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018994:	080189ad 	.word	0x080189ad
 8018998:	080189b5 	.word	0x080189b5
 801899c:	080189bd 	.word	0x080189bd
 80189a0:	080189c5 	.word	0x080189c5
 80189a4:	080189cd 	.word	0x080189cd
 80189a8:	080189d5 	.word	0x080189d5
 80189ac:	2302      	movs	r3, #2
 80189ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189b2:	e01a      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189b4:	2304      	movs	r3, #4
 80189b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ba:	e016      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189bc:	2308      	movs	r3, #8
 80189be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189c2:	e012      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189c4:	2310      	movs	r3, #16
 80189c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ca:	e00e      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189cc:	2320      	movs	r3, #32
 80189ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189d2:	e00a      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189d4:	2340      	movs	r3, #64	@ 0x40
 80189d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189da:	e006      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189dc:	2380      	movs	r3, #128	@ 0x80
 80189de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189e2:	e002      	b.n	80189ea <UART_SetConfig+0x5a6>
 80189e4:	2380      	movs	r3, #128	@ 0x80
 80189e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	4a3f      	ldr	r2, [pc, #252]	@ (8018aec <UART_SetConfig+0x6a8>)
 80189f0:	4293      	cmp	r3, r2
 80189f2:	f040 80f8 	bne.w	8018be6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80189f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80189fa:	2b20      	cmp	r3, #32
 80189fc:	dc46      	bgt.n	8018a8c <UART_SetConfig+0x648>
 80189fe:	2b02      	cmp	r3, #2
 8018a00:	f2c0 8082 	blt.w	8018b08 <UART_SetConfig+0x6c4>
 8018a04:	3b02      	subs	r3, #2
 8018a06:	2b1e      	cmp	r3, #30
 8018a08:	d87e      	bhi.n	8018b08 <UART_SetConfig+0x6c4>
 8018a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8018a10 <UART_SetConfig+0x5cc>)
 8018a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a10:	08018a93 	.word	0x08018a93
 8018a14:	08018b09 	.word	0x08018b09
 8018a18:	08018a9b 	.word	0x08018a9b
 8018a1c:	08018b09 	.word	0x08018b09
 8018a20:	08018b09 	.word	0x08018b09
 8018a24:	08018b09 	.word	0x08018b09
 8018a28:	08018aab 	.word	0x08018aab
 8018a2c:	08018b09 	.word	0x08018b09
 8018a30:	08018b09 	.word	0x08018b09
 8018a34:	08018b09 	.word	0x08018b09
 8018a38:	08018b09 	.word	0x08018b09
 8018a3c:	08018b09 	.word	0x08018b09
 8018a40:	08018b09 	.word	0x08018b09
 8018a44:	08018b09 	.word	0x08018b09
 8018a48:	08018abb 	.word	0x08018abb
 8018a4c:	08018b09 	.word	0x08018b09
 8018a50:	08018b09 	.word	0x08018b09
 8018a54:	08018b09 	.word	0x08018b09
 8018a58:	08018b09 	.word	0x08018b09
 8018a5c:	08018b09 	.word	0x08018b09
 8018a60:	08018b09 	.word	0x08018b09
 8018a64:	08018b09 	.word	0x08018b09
 8018a68:	08018b09 	.word	0x08018b09
 8018a6c:	08018b09 	.word	0x08018b09
 8018a70:	08018b09 	.word	0x08018b09
 8018a74:	08018b09 	.word	0x08018b09
 8018a78:	08018b09 	.word	0x08018b09
 8018a7c:	08018b09 	.word	0x08018b09
 8018a80:	08018b09 	.word	0x08018b09
 8018a84:	08018b09 	.word	0x08018b09
 8018a88:	08018afb 	.word	0x08018afb
 8018a8c:	2b40      	cmp	r3, #64	@ 0x40
 8018a8e:	d037      	beq.n	8018b00 <UART_SetConfig+0x6bc>
 8018a90:	e03a      	b.n	8018b08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018a92:	f7fd f8d7 	bl	8015c44 <HAL_RCCEx_GetD3PCLK1Freq>
 8018a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018a98:	e03c      	b.n	8018b14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7fd f8e6 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018aa8:	e034      	b.n	8018b14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018aaa:	f107 0318 	add.w	r3, r7, #24
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7fd fa32 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018ab4:	69fb      	ldr	r3, [r7, #28]
 8018ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ab8:	e02c      	b.n	8018b14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018aba:	4b09      	ldr	r3, [pc, #36]	@ (8018ae0 <UART_SetConfig+0x69c>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	f003 0320 	and.w	r3, r3, #32
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d016      	beq.n	8018af4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018ac6:	4b06      	ldr	r3, [pc, #24]	@ (8018ae0 <UART_SetConfig+0x69c>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	08db      	lsrs	r3, r3, #3
 8018acc:	f003 0303 	and.w	r3, r3, #3
 8018ad0:	4a07      	ldr	r2, [pc, #28]	@ (8018af0 <UART_SetConfig+0x6ac>)
 8018ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8018ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018ad8:	e01c      	b.n	8018b14 <UART_SetConfig+0x6d0>
 8018ada:	bf00      	nop
 8018adc:	40011400 	.word	0x40011400
 8018ae0:	58024400 	.word	0x58024400
 8018ae4:	40007800 	.word	0x40007800
 8018ae8:	40007c00 	.word	0x40007c00
 8018aec:	58000c00 	.word	0x58000c00
 8018af0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8018af4:	4b9d      	ldr	r3, [pc, #628]	@ (8018d6c <UART_SetConfig+0x928>)
 8018af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018af8:	e00c      	b.n	8018b14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018afa:	4b9d      	ldr	r3, [pc, #628]	@ (8018d70 <UART_SetConfig+0x92c>)
 8018afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018afe:	e009      	b.n	8018b14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b06:	e005      	b.n	8018b14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8018b08:	2300      	movs	r3, #0
 8018b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018b12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f000 81de 	beq.w	8018ed8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b20:	4a94      	ldr	r2, [pc, #592]	@ (8018d74 <UART_SetConfig+0x930>)
 8018b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018b26:	461a      	mov	r2, r3
 8018b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	685a      	ldr	r2, [r3, #4]
 8018b34:	4613      	mov	r3, r2
 8018b36:	005b      	lsls	r3, r3, #1
 8018b38:	4413      	add	r3, r2
 8018b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d305      	bcc.n	8018b4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d903      	bls.n	8018b54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018b52:	e1c1      	b.n	8018ed8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b56:	2200      	movs	r2, #0
 8018b58:	60bb      	str	r3, [r7, #8]
 8018b5a:	60fa      	str	r2, [r7, #12]
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b60:	4a84      	ldr	r2, [pc, #528]	@ (8018d74 <UART_SetConfig+0x930>)
 8018b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	2200      	movs	r2, #0
 8018b6a:	603b      	str	r3, [r7, #0]
 8018b6c:	607a      	str	r2, [r7, #4]
 8018b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018b76:	f7e7 fee5 	bl	8000944 <__aeabi_uldivmod>
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	460b      	mov	r3, r1
 8018b7e:	4610      	mov	r0, r2
 8018b80:	4619      	mov	r1, r3
 8018b82:	f04f 0200 	mov.w	r2, #0
 8018b86:	f04f 0300 	mov.w	r3, #0
 8018b8a:	020b      	lsls	r3, r1, #8
 8018b8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018b90:	0202      	lsls	r2, r0, #8
 8018b92:	6979      	ldr	r1, [r7, #20]
 8018b94:	6849      	ldr	r1, [r1, #4]
 8018b96:	0849      	lsrs	r1, r1, #1
 8018b98:	2000      	movs	r0, #0
 8018b9a:	460c      	mov	r4, r1
 8018b9c:	4605      	mov	r5, r0
 8018b9e:	eb12 0804 	adds.w	r8, r2, r4
 8018ba2:	eb43 0905 	adc.w	r9, r3, r5
 8018ba6:	697b      	ldr	r3, [r7, #20]
 8018ba8:	685b      	ldr	r3, [r3, #4]
 8018baa:	2200      	movs	r2, #0
 8018bac:	469a      	mov	sl, r3
 8018bae:	4693      	mov	fp, r2
 8018bb0:	4652      	mov	r2, sl
 8018bb2:	465b      	mov	r3, fp
 8018bb4:	4640      	mov	r0, r8
 8018bb6:	4649      	mov	r1, r9
 8018bb8:	f7e7 fec4 	bl	8000944 <__aeabi_uldivmod>
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	4613      	mov	r3, r2
 8018bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018bca:	d308      	bcc.n	8018bde <UART_SetConfig+0x79a>
 8018bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018bd2:	d204      	bcs.n	8018bde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018bda:	60da      	str	r2, [r3, #12]
 8018bdc:	e17c      	b.n	8018ed8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8018bde:	2301      	movs	r3, #1
 8018be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018be4:	e178      	b.n	8018ed8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	69db      	ldr	r3, [r3, #28]
 8018bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018bee:	f040 80c5 	bne.w	8018d7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8018bf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	2b20      	cmp	r3, #32
 8018bf8:	dc48      	bgt.n	8018c8c <UART_SetConfig+0x848>
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	db7b      	blt.n	8018cf6 <UART_SetConfig+0x8b2>
 8018bfe:	2b20      	cmp	r3, #32
 8018c00:	d879      	bhi.n	8018cf6 <UART_SetConfig+0x8b2>
 8018c02:	a201      	add	r2, pc, #4	@ (adr r2, 8018c08 <UART_SetConfig+0x7c4>)
 8018c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c08:	08018c93 	.word	0x08018c93
 8018c0c:	08018c9b 	.word	0x08018c9b
 8018c10:	08018cf7 	.word	0x08018cf7
 8018c14:	08018cf7 	.word	0x08018cf7
 8018c18:	08018ca3 	.word	0x08018ca3
 8018c1c:	08018cf7 	.word	0x08018cf7
 8018c20:	08018cf7 	.word	0x08018cf7
 8018c24:	08018cf7 	.word	0x08018cf7
 8018c28:	08018cb3 	.word	0x08018cb3
 8018c2c:	08018cf7 	.word	0x08018cf7
 8018c30:	08018cf7 	.word	0x08018cf7
 8018c34:	08018cf7 	.word	0x08018cf7
 8018c38:	08018cf7 	.word	0x08018cf7
 8018c3c:	08018cf7 	.word	0x08018cf7
 8018c40:	08018cf7 	.word	0x08018cf7
 8018c44:	08018cf7 	.word	0x08018cf7
 8018c48:	08018cc3 	.word	0x08018cc3
 8018c4c:	08018cf7 	.word	0x08018cf7
 8018c50:	08018cf7 	.word	0x08018cf7
 8018c54:	08018cf7 	.word	0x08018cf7
 8018c58:	08018cf7 	.word	0x08018cf7
 8018c5c:	08018cf7 	.word	0x08018cf7
 8018c60:	08018cf7 	.word	0x08018cf7
 8018c64:	08018cf7 	.word	0x08018cf7
 8018c68:	08018cf7 	.word	0x08018cf7
 8018c6c:	08018cf7 	.word	0x08018cf7
 8018c70:	08018cf7 	.word	0x08018cf7
 8018c74:	08018cf7 	.word	0x08018cf7
 8018c78:	08018cf7 	.word	0x08018cf7
 8018c7c:	08018cf7 	.word	0x08018cf7
 8018c80:	08018cf7 	.word	0x08018cf7
 8018c84:	08018cf7 	.word	0x08018cf7
 8018c88:	08018ce9 	.word	0x08018ce9
 8018c8c:	2b40      	cmp	r3, #64	@ 0x40
 8018c8e:	d02e      	beq.n	8018cee <UART_SetConfig+0x8aa>
 8018c90:	e031      	b.n	8018cf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018c92:	f7fb f821 	bl	8013cd8 <HAL_RCC_GetPCLK1Freq>
 8018c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018c98:	e033      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018c9a:	f7fb f833 	bl	8013d04 <HAL_RCC_GetPCLK2Freq>
 8018c9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018ca0:	e02f      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7fc ffe2 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018cb0:	e027      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018cb2:	f107 0318 	add.w	r3, r7, #24
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f7fd f92e 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018cc0:	e01f      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8018d78 <UART_SetConfig+0x934>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	f003 0320 	and.w	r3, r3, #32
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d009      	beq.n	8018ce2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018cce:	4b2a      	ldr	r3, [pc, #168]	@ (8018d78 <UART_SetConfig+0x934>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	08db      	lsrs	r3, r3, #3
 8018cd4:	f003 0303 	and.w	r3, r3, #3
 8018cd8:	4a24      	ldr	r2, [pc, #144]	@ (8018d6c <UART_SetConfig+0x928>)
 8018cda:	fa22 f303 	lsr.w	r3, r2, r3
 8018cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018ce0:	e00f      	b.n	8018d02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018ce2:	4b22      	ldr	r3, [pc, #136]	@ (8018d6c <UART_SetConfig+0x928>)
 8018ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ce6:	e00c      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018ce8:	4b21      	ldr	r3, [pc, #132]	@ (8018d70 <UART_SetConfig+0x92c>)
 8018cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018cec:	e009      	b.n	8018d02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018cf4:	e005      	b.n	8018d02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	f000 80e7 	beq.w	8018ed8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d0e:	4a19      	ldr	r2, [pc, #100]	@ (8018d74 <UART_SetConfig+0x930>)
 8018d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d14:	461a      	mov	r2, r3
 8018d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d1c:	005a      	lsls	r2, r3, #1
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	085b      	lsrs	r3, r3, #1
 8018d24:	441a      	add	r2, r3
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	685b      	ldr	r3, [r3, #4]
 8018d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d32:	2b0f      	cmp	r3, #15
 8018d34:	d916      	bls.n	8018d64 <UART_SetConfig+0x920>
 8018d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018d3c:	d212      	bcs.n	8018d64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	f023 030f 	bic.w	r3, r3, #15
 8018d46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d4a:	085b      	lsrs	r3, r3, #1
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	f003 0307 	and.w	r3, r3, #7
 8018d52:	b29a      	uxth	r2, r3
 8018d54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018d56:	4313      	orrs	r3, r2
 8018d58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018d5a:	697b      	ldr	r3, [r7, #20]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018d60:	60da      	str	r2, [r3, #12]
 8018d62:	e0b9      	b.n	8018ed8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018d64:	2301      	movs	r3, #1
 8018d66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018d6a:	e0b5      	b.n	8018ed8 <UART_SetConfig+0xa94>
 8018d6c:	03d09000 	.word	0x03d09000
 8018d70:	003d0900 	.word	0x003d0900
 8018d74:	0801eb64 	.word	0x0801eb64
 8018d78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8018d7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018d80:	2b20      	cmp	r3, #32
 8018d82:	dc49      	bgt.n	8018e18 <UART_SetConfig+0x9d4>
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	db7c      	blt.n	8018e82 <UART_SetConfig+0xa3e>
 8018d88:	2b20      	cmp	r3, #32
 8018d8a:	d87a      	bhi.n	8018e82 <UART_SetConfig+0xa3e>
 8018d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8018d94 <UART_SetConfig+0x950>)
 8018d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d92:	bf00      	nop
 8018d94:	08018e1f 	.word	0x08018e1f
 8018d98:	08018e27 	.word	0x08018e27
 8018d9c:	08018e83 	.word	0x08018e83
 8018da0:	08018e83 	.word	0x08018e83
 8018da4:	08018e2f 	.word	0x08018e2f
 8018da8:	08018e83 	.word	0x08018e83
 8018dac:	08018e83 	.word	0x08018e83
 8018db0:	08018e83 	.word	0x08018e83
 8018db4:	08018e3f 	.word	0x08018e3f
 8018db8:	08018e83 	.word	0x08018e83
 8018dbc:	08018e83 	.word	0x08018e83
 8018dc0:	08018e83 	.word	0x08018e83
 8018dc4:	08018e83 	.word	0x08018e83
 8018dc8:	08018e83 	.word	0x08018e83
 8018dcc:	08018e83 	.word	0x08018e83
 8018dd0:	08018e83 	.word	0x08018e83
 8018dd4:	08018e4f 	.word	0x08018e4f
 8018dd8:	08018e83 	.word	0x08018e83
 8018ddc:	08018e83 	.word	0x08018e83
 8018de0:	08018e83 	.word	0x08018e83
 8018de4:	08018e83 	.word	0x08018e83
 8018de8:	08018e83 	.word	0x08018e83
 8018dec:	08018e83 	.word	0x08018e83
 8018df0:	08018e83 	.word	0x08018e83
 8018df4:	08018e83 	.word	0x08018e83
 8018df8:	08018e83 	.word	0x08018e83
 8018dfc:	08018e83 	.word	0x08018e83
 8018e00:	08018e83 	.word	0x08018e83
 8018e04:	08018e83 	.word	0x08018e83
 8018e08:	08018e83 	.word	0x08018e83
 8018e0c:	08018e83 	.word	0x08018e83
 8018e10:	08018e83 	.word	0x08018e83
 8018e14:	08018e75 	.word	0x08018e75
 8018e18:	2b40      	cmp	r3, #64	@ 0x40
 8018e1a:	d02e      	beq.n	8018e7a <UART_SetConfig+0xa36>
 8018e1c:	e031      	b.n	8018e82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018e1e:	f7fa ff5b 	bl	8013cd8 <HAL_RCC_GetPCLK1Freq>
 8018e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018e24:	e033      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018e26:	f7fa ff6d 	bl	8013d04 <HAL_RCC_GetPCLK2Freq>
 8018e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018e2c:	e02f      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018e32:	4618      	mov	r0, r3
 8018e34:	f7fc ff1c 	bl	8015c70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e3c:	e027      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018e3e:	f107 0318 	add.w	r3, r7, #24
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fd f868 	bl	8015f18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018e48:	69fb      	ldr	r3, [r7, #28]
 8018e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e4c:	e01f      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8018f04 <UART_SetConfig+0xac0>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	f003 0320 	and.w	r3, r3, #32
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d009      	beq.n	8018e6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8018f04 <UART_SetConfig+0xac0>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	08db      	lsrs	r3, r3, #3
 8018e60:	f003 0303 	and.w	r3, r3, #3
 8018e64:	4a28      	ldr	r2, [pc, #160]	@ (8018f08 <UART_SetConfig+0xac4>)
 8018e66:	fa22 f303 	lsr.w	r3, r2, r3
 8018e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018e6c:	e00f      	b.n	8018e8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8018e6e:	4b26      	ldr	r3, [pc, #152]	@ (8018f08 <UART_SetConfig+0xac4>)
 8018e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e72:	e00c      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018e74:	4b25      	ldr	r3, [pc, #148]	@ (8018f0c <UART_SetConfig+0xac8>)
 8018e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e78:	e009      	b.n	8018e8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e80:	e005      	b.n	8018e8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8018e82:	2300      	movs	r3, #0
 8018e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018e86:	2301      	movs	r3, #1
 8018e88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8018e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d021      	beq.n	8018ed8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e98:	4a1d      	ldr	r2, [pc, #116]	@ (8018f10 <UART_SetConfig+0xacc>)
 8018e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e9e:	461a      	mov	r2, r3
 8018ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	085b      	lsrs	r3, r3, #1
 8018eac:	441a      	add	r2, r3
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eba:	2b0f      	cmp	r3, #15
 8018ebc:	d909      	bls.n	8018ed2 <UART_SetConfig+0xa8e>
 8018ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018ec4:	d205      	bcs.n	8018ed2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ec8:	b29a      	uxth	r2, r3
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	60da      	str	r2, [r3, #12]
 8018ed0:	e002      	b.n	8018ed8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	2201      	movs	r2, #1
 8018edc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	2201      	movs	r2, #1
 8018ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018ee8:	697b      	ldr	r3, [r7, #20]
 8018eea:	2200      	movs	r2, #0
 8018eec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018ef4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3748      	adds	r7, #72	@ 0x48
 8018efc:	46bd      	mov	sp, r7
 8018efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018f02:	bf00      	nop
 8018f04:	58024400 	.word	0x58024400
 8018f08:	03d09000 	.word	0x03d09000
 8018f0c:	003d0900 	.word	0x003d0900
 8018f10:	0801eb64 	.word	0x0801eb64

08018f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018f14:	b480      	push	{r7}
 8018f16:	b083      	sub	sp, #12
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f20:	f003 0308 	and.w	r3, r3, #8
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d00a      	beq.n	8018f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	685b      	ldr	r3, [r3, #4]
 8018f2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	430a      	orrs	r2, r1
 8018f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d00a      	beq.n	8018f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	685b      	ldr	r3, [r3, #4]
 8018f50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	430a      	orrs	r2, r1
 8018f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f64:	f003 0302 	and.w	r3, r3, #2
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d00a      	beq.n	8018f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	685b      	ldr	r3, [r3, #4]
 8018f72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	430a      	orrs	r2, r1
 8018f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f86:	f003 0304 	and.w	r3, r3, #4
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d00a      	beq.n	8018fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	685b      	ldr	r3, [r3, #4]
 8018f94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	430a      	orrs	r2, r1
 8018fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fa8:	f003 0310 	and.w	r3, r3, #16
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d00a      	beq.n	8018fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	689b      	ldr	r3, [r3, #8]
 8018fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	430a      	orrs	r2, r1
 8018fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fca:	f003 0320 	and.w	r3, r3, #32
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d00a      	beq.n	8018fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	689b      	ldr	r3, [r3, #8]
 8018fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	430a      	orrs	r2, r1
 8018fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d01a      	beq.n	801902a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	430a      	orrs	r2, r1
 8019008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801900e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019012:	d10a      	bne.n	801902a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	685b      	ldr	r3, [r3, #4]
 801901a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	430a      	orrs	r2, r1
 8019028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801902e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019032:	2b00      	cmp	r3, #0
 8019034:	d00a      	beq.n	801904c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	430a      	orrs	r2, r1
 801904a:	605a      	str	r2, [r3, #4]
  }
}
 801904c:	bf00      	nop
 801904e:	370c      	adds	r7, #12
 8019050:	46bd      	mov	sp, r7
 8019052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019056:	4770      	bx	lr

08019058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b098      	sub	sp, #96	@ 0x60
 801905c:	af02      	add	r7, sp, #8
 801905e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2200      	movs	r2, #0
 8019064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019068:	f7f6 ff5a 	bl	800ff20 <HAL_GetTick>
 801906c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	f003 0308 	and.w	r3, r3, #8
 8019078:	2b08      	cmp	r3, #8
 801907a:	d12f      	bne.n	80190dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801907c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019084:	2200      	movs	r2, #0
 8019086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	f000 f88e 	bl	80191ac <UART_WaitOnFlagUntilTimeout>
 8019090:	4603      	mov	r3, r0
 8019092:	2b00      	cmp	r3, #0
 8019094:	d022      	beq.n	80190dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909e:	e853 3f00 	ldrex	r3, [r3]
 80190a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80190a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80190aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	461a      	mov	r2, r3
 80190b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80190b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80190ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80190bc:	e841 2300 	strex	r3, r2, [r1]
 80190c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80190c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d1e6      	bne.n	8019096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2220      	movs	r2, #32
 80190cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2200      	movs	r2, #0
 80190d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80190d8:	2303      	movs	r3, #3
 80190da:	e063      	b.n	80191a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	f003 0304 	and.w	r3, r3, #4
 80190e6:	2b04      	cmp	r3, #4
 80190e8:	d149      	bne.n	801917e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80190ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190f2:	2200      	movs	r2, #0
 80190f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f000 f857 	bl	80191ac <UART_WaitOnFlagUntilTimeout>
 80190fe:	4603      	mov	r3, r0
 8019100:	2b00      	cmp	r3, #0
 8019102:	d03c      	beq.n	801917e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801910c:	e853 3f00 	ldrex	r3, [r3]
 8019110:	623b      	str	r3, [r7, #32]
   return(result);
 8019112:	6a3b      	ldr	r3, [r7, #32]
 8019114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	461a      	mov	r2, r3
 8019120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019122:	633b      	str	r3, [r7, #48]	@ 0x30
 8019124:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801912a:	e841 2300 	strex	r3, r2, [r1]
 801912e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019132:	2b00      	cmp	r3, #0
 8019134:	d1e6      	bne.n	8019104 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	3308      	adds	r3, #8
 801913c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801913e:	693b      	ldr	r3, [r7, #16]
 8019140:	e853 3f00 	ldrex	r3, [r3]
 8019144:	60fb      	str	r3, [r7, #12]
   return(result);
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	f023 0301 	bic.w	r3, r3, #1
 801914c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	3308      	adds	r3, #8
 8019154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019156:	61fa      	str	r2, [r7, #28]
 8019158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801915a:	69b9      	ldr	r1, [r7, #24]
 801915c:	69fa      	ldr	r2, [r7, #28]
 801915e:	e841 2300 	strex	r3, r2, [r1]
 8019162:	617b      	str	r3, [r7, #20]
   return(result);
 8019164:	697b      	ldr	r3, [r7, #20]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1e5      	bne.n	8019136 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	2220      	movs	r2, #32
 801916e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	2200      	movs	r2, #0
 8019176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801917a:	2303      	movs	r3, #3
 801917c:	e012      	b.n	80191a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2220      	movs	r2, #32
 8019182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2220      	movs	r2, #32
 801918a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2200      	movs	r2, #0
 8019192:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2200      	movs	r2, #0
 8019198:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2200      	movs	r2, #0
 801919e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80191a2:	2300      	movs	r3, #0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3758      	adds	r7, #88	@ 0x58
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b084      	sub	sp, #16
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	60f8      	str	r0, [r7, #12]
 80191b4:	60b9      	str	r1, [r7, #8]
 80191b6:	603b      	str	r3, [r7, #0]
 80191b8:	4613      	mov	r3, r2
 80191ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191bc:	e04f      	b.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80191be:	69bb      	ldr	r3, [r7, #24]
 80191c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191c4:	d04b      	beq.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80191c6:	f7f6 feab 	bl	800ff20 <HAL_GetTick>
 80191ca:	4602      	mov	r2, r0
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	1ad3      	subs	r3, r2, r3
 80191d0:	69ba      	ldr	r2, [r7, #24]
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d302      	bcc.n	80191dc <UART_WaitOnFlagUntilTimeout+0x30>
 80191d6:	69bb      	ldr	r3, [r7, #24]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d101      	bne.n	80191e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80191dc:	2303      	movs	r3, #3
 80191de:	e04e      	b.n	801927e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	f003 0304 	and.w	r3, r3, #4
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d037      	beq.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
 80191ee:	68bb      	ldr	r3, [r7, #8]
 80191f0:	2b80      	cmp	r3, #128	@ 0x80
 80191f2:	d034      	beq.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	2b40      	cmp	r3, #64	@ 0x40
 80191f8:	d031      	beq.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	69db      	ldr	r3, [r3, #28]
 8019200:	f003 0308 	and.w	r3, r3, #8
 8019204:	2b08      	cmp	r3, #8
 8019206:	d110      	bne.n	801922a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	2208      	movs	r2, #8
 801920e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019210:	68f8      	ldr	r0, [r7, #12]
 8019212:	f000 f839 	bl	8019288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	2208      	movs	r2, #8
 801921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	2200      	movs	r2, #0
 8019222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019226:	2301      	movs	r3, #1
 8019228:	e029      	b.n	801927e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	69db      	ldr	r3, [r3, #28]
 8019230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019238:	d111      	bne.n	801925e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019244:	68f8      	ldr	r0, [r7, #12]
 8019246:	f000 f81f 	bl	8019288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2220      	movs	r2, #32
 801924e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	2200      	movs	r2, #0
 8019256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801925a:	2303      	movs	r3, #3
 801925c:	e00f      	b.n	801927e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	69da      	ldr	r2, [r3, #28]
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	4013      	ands	r3, r2
 8019268:	68ba      	ldr	r2, [r7, #8]
 801926a:	429a      	cmp	r2, r3
 801926c:	bf0c      	ite	eq
 801926e:	2301      	moveq	r3, #1
 8019270:	2300      	movne	r3, #0
 8019272:	b2db      	uxtb	r3, r3
 8019274:	461a      	mov	r2, r3
 8019276:	79fb      	ldrb	r3, [r7, #7]
 8019278:	429a      	cmp	r2, r3
 801927a:	d0a0      	beq.n	80191be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801927c:	2300      	movs	r3, #0
}
 801927e:	4618      	mov	r0, r3
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
	...

08019288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019288:	b480      	push	{r7}
 801928a:	b095      	sub	sp, #84	@ 0x54
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019298:	e853 3f00 	ldrex	r3, [r3]
 801929c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80192a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	461a      	mov	r2, r3
 80192ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80192b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80192b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80192b6:	e841 2300 	strex	r3, r2, [r1]
 80192ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80192bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d1e6      	bne.n	8019290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	3308      	adds	r3, #8
 80192c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192ca:	6a3b      	ldr	r3, [r7, #32]
 80192cc:	e853 3f00 	ldrex	r3, [r3]
 80192d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80192d2:	69fa      	ldr	r2, [r7, #28]
 80192d4:	4b1e      	ldr	r3, [pc, #120]	@ (8019350 <UART_EndRxTransfer+0xc8>)
 80192d6:	4013      	ands	r3, r2
 80192d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	3308      	adds	r3, #8
 80192e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80192e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80192e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80192e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80192ea:	e841 2300 	strex	r3, r2, [r1]
 80192ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80192f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d1e5      	bne.n	80192c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80192fa:	2b01      	cmp	r3, #1
 80192fc:	d118      	bne.n	8019330 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	e853 3f00 	ldrex	r3, [r3]
 801930a:	60bb      	str	r3, [r7, #8]
   return(result);
 801930c:	68bb      	ldr	r3, [r7, #8]
 801930e:	f023 0310 	bic.w	r3, r3, #16
 8019312:	647b      	str	r3, [r7, #68]	@ 0x44
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	461a      	mov	r2, r3
 801931a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801931c:	61bb      	str	r3, [r7, #24]
 801931e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019320:	6979      	ldr	r1, [r7, #20]
 8019322:	69ba      	ldr	r2, [r7, #24]
 8019324:	e841 2300 	strex	r3, r2, [r1]
 8019328:	613b      	str	r3, [r7, #16]
   return(result);
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d1e6      	bne.n	80192fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2220      	movs	r2, #32
 8019334:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	2200      	movs	r2, #0
 801933c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2200      	movs	r2, #0
 8019342:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019344:	bf00      	nop
 8019346:	3754      	adds	r7, #84	@ 0x54
 8019348:	46bd      	mov	sp, r7
 801934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934e:	4770      	bx	lr
 8019350:	effffffe 	.word	0xeffffffe

08019354 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019354:	b480      	push	{r7}
 8019356:	b085      	sub	sp, #20
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019362:	2b01      	cmp	r3, #1
 8019364:	d101      	bne.n	801936a <HAL_UARTEx_DisableFifoMode+0x16>
 8019366:	2302      	movs	r3, #2
 8019368:	e027      	b.n	80193ba <HAL_UARTEx_DisableFifoMode+0x66>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	2201      	movs	r2, #1
 801936e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	2224      	movs	r2, #36	@ 0x24
 8019376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	681a      	ldr	r2, [r3, #0]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	f022 0201 	bic.w	r2, r2, #1
 8019390:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8019398:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	68fa      	ldr	r2, [r7, #12]
 80193a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2220      	movs	r2, #32
 80193ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2200      	movs	r2, #0
 80193b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80193b8:	2300      	movs	r3, #0
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3714      	adds	r7, #20
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80193c6:	b580      	push	{r7, lr}
 80193c8:	b084      	sub	sp, #16
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
 80193ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80193d6:	2b01      	cmp	r3, #1
 80193d8:	d101      	bne.n	80193de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80193da:	2302      	movs	r3, #2
 80193dc:	e02d      	b.n	801943a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	2201      	movs	r2, #1
 80193e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	2224      	movs	r2, #36	@ 0x24
 80193ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	681a      	ldr	r2, [r3, #0]
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	f022 0201 	bic.w	r2, r2, #1
 8019404:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	683a      	ldr	r2, [r7, #0]
 8019416:	430a      	orrs	r2, r1
 8019418:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f000 f850 	bl	80194c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	68fa      	ldr	r2, [r7, #12]
 8019426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2220      	movs	r2, #32
 801942c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2200      	movs	r2, #0
 8019434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019438:	2300      	movs	r3, #0
}
 801943a:	4618      	mov	r0, r3
 801943c:	3710      	adds	r7, #16
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}

08019442 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019442:	b580      	push	{r7, lr}
 8019444:	b084      	sub	sp, #16
 8019446:	af00      	add	r7, sp, #0
 8019448:	6078      	str	r0, [r7, #4]
 801944a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019452:	2b01      	cmp	r3, #1
 8019454:	d101      	bne.n	801945a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019456:	2302      	movs	r3, #2
 8019458:	e02d      	b.n	80194b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	2201      	movs	r2, #1
 801945e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	2224      	movs	r2, #36	@ 0x24
 8019466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	681a      	ldr	r2, [r3, #0]
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	f022 0201 	bic.w	r2, r2, #1
 8019480:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	689b      	ldr	r3, [r3, #8]
 8019488:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	683a      	ldr	r2, [r7, #0]
 8019492:	430a      	orrs	r2, r1
 8019494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019496:	6878      	ldr	r0, [r7, #4]
 8019498:	f000 f812 	bl	80194c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	68fa      	ldr	r2, [r7, #12]
 80194a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2220      	movs	r2, #32
 80194a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	2200      	movs	r2, #0
 80194b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80194b4:	2300      	movs	r3, #0
}
 80194b6:	4618      	mov	r0, r3
 80194b8:	3710      	adds	r7, #16
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}
	...

080194c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80194c0:	b480      	push	{r7}
 80194c2:	b085      	sub	sp, #20
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d108      	bne.n	80194e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2201      	movs	r2, #1
 80194d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	2201      	movs	r2, #1
 80194dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80194e0:	e031      	b.n	8019546 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80194e2:	2310      	movs	r3, #16
 80194e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80194e6:	2310      	movs	r3, #16
 80194e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	689b      	ldr	r3, [r3, #8]
 80194f0:	0e5b      	lsrs	r3, r3, #25
 80194f2:	b2db      	uxtb	r3, r3
 80194f4:	f003 0307 	and.w	r3, r3, #7
 80194f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	689b      	ldr	r3, [r3, #8]
 8019500:	0f5b      	lsrs	r3, r3, #29
 8019502:	b2db      	uxtb	r3, r3
 8019504:	f003 0307 	and.w	r3, r3, #7
 8019508:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801950a:	7bbb      	ldrb	r3, [r7, #14]
 801950c:	7b3a      	ldrb	r2, [r7, #12]
 801950e:	4911      	ldr	r1, [pc, #68]	@ (8019554 <UARTEx_SetNbDataToProcess+0x94>)
 8019510:	5c8a      	ldrb	r2, [r1, r2]
 8019512:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8019516:	7b3a      	ldrb	r2, [r7, #12]
 8019518:	490f      	ldr	r1, [pc, #60]	@ (8019558 <UARTEx_SetNbDataToProcess+0x98>)
 801951a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801951c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019520:	b29a      	uxth	r2, r3
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019528:	7bfb      	ldrb	r3, [r7, #15]
 801952a:	7b7a      	ldrb	r2, [r7, #13]
 801952c:	4909      	ldr	r1, [pc, #36]	@ (8019554 <UARTEx_SetNbDataToProcess+0x94>)
 801952e:	5c8a      	ldrb	r2, [r1, r2]
 8019530:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019534:	7b7a      	ldrb	r2, [r7, #13]
 8019536:	4908      	ldr	r1, [pc, #32]	@ (8019558 <UARTEx_SetNbDataToProcess+0x98>)
 8019538:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801953a:	fb93 f3f2 	sdiv	r3, r3, r2
 801953e:	b29a      	uxth	r2, r3
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8019546:	bf00      	nop
 8019548:	3714      	adds	r7, #20
 801954a:	46bd      	mov	sp, r7
 801954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019550:	4770      	bx	lr
 8019552:	bf00      	nop
 8019554:	0801eb7c 	.word	0x0801eb7c
 8019558:	0801eb84 	.word	0x0801eb84

0801955c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801955c:	b084      	sub	sp, #16
 801955e:	b480      	push	{r7}
 8019560:	b085      	sub	sp, #20
 8019562:	af00      	add	r7, sp, #0
 8019564:	6078      	str	r0, [r7, #4]
 8019566:	f107 001c 	add.w	r0, r7, #28
 801956a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801956e:	2300      	movs	r3, #0
 8019570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8019572:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8019574:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8019576:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8019578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801957a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801957e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8019580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8019582:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8019584:	68fa      	ldr	r2, [r7, #12]
 8019586:	4313      	orrs	r3, r2
 8019588:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	685a      	ldr	r2, [r3, #4]
 801958e:	4b07      	ldr	r3, [pc, #28]	@ (80195ac <SDMMC_Init+0x50>)
 8019590:	4013      	ands	r3, r2
 8019592:	68fa      	ldr	r2, [r7, #12]
 8019594:	431a      	orrs	r2, r3
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801959a:	2300      	movs	r3, #0
}
 801959c:	4618      	mov	r0, r3
 801959e:	3714      	adds	r7, #20
 80195a0:	46bd      	mov	sp, r7
 80195a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a6:	b004      	add	sp, #16
 80195a8:	4770      	bx	lr
 80195aa:	bf00      	nop
 80195ac:	ffc02c00 	.word	0xffc02c00

080195b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80195b0:	b480      	push	{r7}
 80195b2:	b083      	sub	sp, #12
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80195be:	4618      	mov	r0, r3
 80195c0:	370c      	adds	r7, #12
 80195c2:	46bd      	mov	sp, r7
 80195c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c8:	4770      	bx	lr

080195ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80195ca:	b480      	push	{r7}
 80195cc:	b083      	sub	sp, #12
 80195ce:	af00      	add	r7, sp, #0
 80195d0:	6078      	str	r0, [r7, #4]
 80195d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	681a      	ldr	r2, [r3, #0]
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80195de:	2300      	movs	r3, #0
}
 80195e0:	4618      	mov	r0, r3
 80195e2:	370c      	adds	r7, #12
 80195e4:	46bd      	mov	sp, r7
 80195e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ea:	4770      	bx	lr

080195ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80195ec:	b480      	push	{r7}
 80195ee:	b083      	sub	sp, #12
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	f043 0203 	orr.w	r2, r3, #3
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	370c      	adds	r7, #12
 8019606:	46bd      	mov	sp, r7
 8019608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960c:	4770      	bx	lr

0801960e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801960e:	b480      	push	{r7}
 8019610:	b083      	sub	sp, #12
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	f003 0303 	and.w	r3, r3, #3
}
 801961e:	4618      	mov	r0, r3
 8019620:	370c      	adds	r7, #12
 8019622:	46bd      	mov	sp, r7
 8019624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019628:	4770      	bx	lr
	...

0801962c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801962c:	b480      	push	{r7}
 801962e:	b085      	sub	sp, #20
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8019636:	2300      	movs	r3, #0
 8019638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	681a      	ldr	r2, [r3, #0]
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801964a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8019650:	431a      	orrs	r2, r3
                       Command->CPSM);
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8019656:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8019658:	68fa      	ldr	r2, [r7, #12]
 801965a:	4313      	orrs	r3, r2
 801965c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	68da      	ldr	r2, [r3, #12]
 8019662:	4b06      	ldr	r3, [pc, #24]	@ (801967c <SDMMC_SendCommand+0x50>)
 8019664:	4013      	ands	r3, r2
 8019666:	68fa      	ldr	r2, [r7, #12]
 8019668:	431a      	orrs	r2, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801966e:	2300      	movs	r3, #0
}
 8019670:	4618      	mov	r0, r3
 8019672:	3714      	adds	r7, #20
 8019674:	46bd      	mov	sp, r7
 8019676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967a:	4770      	bx	lr
 801967c:	fffee0c0 	.word	0xfffee0c0

08019680 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8019680:	b480      	push	{r7}
 8019682:	b083      	sub	sp, #12
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	691b      	ldr	r3, [r3, #16]
 801968c:	b2db      	uxtb	r3, r3
}
 801968e:	4618      	mov	r0, r3
 8019690:	370c      	adds	r7, #12
 8019692:	46bd      	mov	sp, r7
 8019694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019698:	4770      	bx	lr

0801969a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801969a:	b480      	push	{r7}
 801969c:	b085      	sub	sp, #20
 801969e:	af00      	add	r7, sp, #0
 80196a0:	6078      	str	r0, [r7, #4]
 80196a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	3314      	adds	r3, #20
 80196a8:	461a      	mov	r2, r3
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	4413      	add	r3, r2
 80196ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	681b      	ldr	r3, [r3, #0]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	3714      	adds	r7, #20
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr

080196c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80196c0:	b480      	push	{r7}
 80196c2:	b085      	sub	sp, #20
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80196ca:	2300      	movs	r3, #0
 80196cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	681a      	ldr	r2, [r3, #0]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	685a      	ldr	r2, [r3, #4]
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80196e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80196e8:	683b      	ldr	r3, [r7, #0]
 80196ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80196ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80196f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80196f4:	68fa      	ldr	r2, [r7, #12]
 80196f6:	4313      	orrs	r3, r2
 80196f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	431a      	orrs	r2, r3
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801970a:	2300      	movs	r3, #0

}
 801970c:	4618      	mov	r0, r3
 801970e:	3714      	adds	r7, #20
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr

08019718 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b088      	sub	sp, #32
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
 8019720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8019726:	2310      	movs	r3, #16
 8019728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801972a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801972e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019730:	2300      	movs	r3, #0
 8019732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019738:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801973a:	f107 0308 	add.w	r3, r7, #8
 801973e:	4619      	mov	r1, r3
 8019740:	6878      	ldr	r0, [r7, #4]
 8019742:	f7ff ff73 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8019746:	f241 3288 	movw	r2, #5000	@ 0x1388
 801974a:	2110      	movs	r1, #16
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f000 fa5f 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019754:	69fb      	ldr	r3, [r7, #28]
}
 8019756:	4618      	mov	r0, r3
 8019758:	3720      	adds	r7, #32
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}

0801975e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801975e:	b580      	push	{r7, lr}
 8019760:	b088      	sub	sp, #32
 8019762:	af00      	add	r7, sp, #0
 8019764:	6078      	str	r0, [r7, #4]
 8019766:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801976c:	2311      	movs	r3, #17
 801976e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019776:	2300      	movs	r3, #0
 8019778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801977a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801977e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019780:	f107 0308 	add.w	r3, r7, #8
 8019784:	4619      	mov	r1, r3
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f7ff ff50 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801978c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019790:	2111      	movs	r1, #17
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f000 fa3c 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801979a:	69fb      	ldr	r3, [r7, #28]
}
 801979c:	4618      	mov	r0, r3
 801979e:	3720      	adds	r7, #32
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}

080197a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b088      	sub	sp, #32
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80197b2:	2312      	movs	r3, #18
 80197b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80197b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80197ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80197bc:	2300      	movs	r3, #0
 80197be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80197c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80197c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80197c6:	f107 0308 	add.w	r3, r7, #8
 80197ca:	4619      	mov	r1, r3
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f7ff ff2d 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80197d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80197d6:	2112      	movs	r1, #18
 80197d8:	6878      	ldr	r0, [r7, #4]
 80197da:	f000 fa19 	bl	8019c10 <SDMMC_GetCmdResp1>
 80197de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80197e0:	69fb      	ldr	r3, [r7, #28]
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	3720      	adds	r7, #32
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}

080197ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80197ea:	b580      	push	{r7, lr}
 80197ec:	b088      	sub	sp, #32
 80197ee:	af00      	add	r7, sp, #0
 80197f0:	6078      	str	r0, [r7, #4]
 80197f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80197f4:	683b      	ldr	r3, [r7, #0]
 80197f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80197f8:	2318      	movs	r3, #24
 80197fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80197fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019802:	2300      	movs	r3, #0
 8019804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801980a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801980c:	f107 0308 	add.w	r3, r7, #8
 8019810:	4619      	mov	r1, r3
 8019812:	6878      	ldr	r0, [r7, #4]
 8019814:	f7ff ff0a 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8019818:	f241 3288 	movw	r2, #5000	@ 0x1388
 801981c:	2118      	movs	r1, #24
 801981e:	6878      	ldr	r0, [r7, #4]
 8019820:	f000 f9f6 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019826:	69fb      	ldr	r3, [r7, #28]
}
 8019828:	4618      	mov	r0, r3
 801982a:	3720      	adds	r7, #32
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b088      	sub	sp, #32
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
 8019838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801983e:	2319      	movs	r3, #25
 8019840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019848:	2300      	movs	r3, #0
 801984a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801984c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019852:	f107 0308 	add.w	r3, r7, #8
 8019856:	4619      	mov	r1, r3
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7ff fee7 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801985e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019862:	2119      	movs	r1, #25
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f000 f9d3 	bl	8019c10 <SDMMC_GetCmdResp1>
 801986a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801986c:	69fb      	ldr	r3, [r7, #28]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3720      	adds	r7, #32
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
	...

08019878 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b088      	sub	sp, #32
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8019880:	2300      	movs	r3, #0
 8019882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8019884:	230c      	movs	r3, #12
 8019886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801988c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801988e:	2300      	movs	r3, #0
 8019890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019896:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	68db      	ldr	r3, [r3, #12]
 801989c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	68db      	ldr	r3, [r3, #12]
 80198a8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80198b0:	f107 0308 	add.w	r3, r7, #8
 80198b4:	4619      	mov	r1, r3
 80198b6:	6878      	ldr	r0, [r7, #4]
 80198b8:	f7ff feb8 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80198bc:	4a0b      	ldr	r2, [pc, #44]	@ (80198ec <SDMMC_CmdStopTransfer+0x74>)
 80198be:	210c      	movs	r1, #12
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f000 f9a5 	bl	8019c10 <SDMMC_GetCmdResp1>
 80198c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	68db      	ldr	r3, [r3, #12]
 80198cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80198d4:	69fb      	ldr	r3, [r7, #28]
 80198d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80198da:	d101      	bne.n	80198e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80198dc:	2300      	movs	r3, #0
 80198de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80198e0:	69fb      	ldr	r3, [r7, #28]
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	3720      	adds	r7, #32
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	05f5e100 	.word	0x05f5e100

080198f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b088      	sub	sp, #32
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80198fe:	2307      	movs	r3, #7
 8019900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019908:	2300      	movs	r3, #0
 801990a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801990c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019912:	f107 0308 	add.w	r3, r7, #8
 8019916:	4619      	mov	r1, r3
 8019918:	6878      	ldr	r0, [r7, #4]
 801991a:	f7ff fe87 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801991e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019922:	2107      	movs	r1, #7
 8019924:	6878      	ldr	r0, [r7, #4]
 8019926:	f000 f973 	bl	8019c10 <SDMMC_GetCmdResp1>
 801992a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801992c:	69fb      	ldr	r3, [r7, #28]
}
 801992e:	4618      	mov	r0, r3
 8019930:	3720      	adds	r7, #32
 8019932:	46bd      	mov	sp, r7
 8019934:	bd80      	pop	{r7, pc}

08019936 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8019936:	b580      	push	{r7, lr}
 8019938:	b088      	sub	sp, #32
 801993a:	af00      	add	r7, sp, #0
 801993c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801993e:	2300      	movs	r3, #0
 8019940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8019942:	2300      	movs	r3, #0
 8019944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8019946:	2300      	movs	r3, #0
 8019948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801994a:	2300      	movs	r3, #0
 801994c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801994e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019954:	f107 0308 	add.w	r3, r7, #8
 8019958:	4619      	mov	r1, r3
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f7ff fe66 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f000 fb97 	bl	801a094 <SDMMC_GetCmdError>
 8019966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019968:	69fb      	ldr	r3, [r7, #28]
}
 801996a:	4618      	mov	r0, r3
 801996c:	3720      	adds	r7, #32
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}

08019972 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8019972:	b580      	push	{r7, lr}
 8019974:	b088      	sub	sp, #32
 8019976:	af00      	add	r7, sp, #0
 8019978:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801997a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801997e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8019980:	2308      	movs	r3, #8
 8019982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801998a:	2300      	movs	r3, #0
 801998c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801998e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019994:	f107 0308 	add.w	r3, r7, #8
 8019998:	4619      	mov	r1, r3
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	f7ff fe46 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f000 fb29 	bl	8019ff8 <SDMMC_GetCmdResp7>
 80199a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80199a8:	69fb      	ldr	r3, [r7, #28]
}
 80199aa:	4618      	mov	r0, r3
 80199ac:	3720      	adds	r7, #32
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}

080199b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80199b2:	b580      	push	{r7, lr}
 80199b4:	b088      	sub	sp, #32
 80199b6:	af00      	add	r7, sp, #0
 80199b8:	6078      	str	r0, [r7, #4]
 80199ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80199c0:	2337      	movs	r3, #55	@ 0x37
 80199c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80199c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80199c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80199ca:	2300      	movs	r3, #0
 80199cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80199ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80199d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80199d4:	f107 0308 	add.w	r3, r7, #8
 80199d8:	4619      	mov	r1, r3
 80199da:	6878      	ldr	r0, [r7, #4]
 80199dc:	f7ff fe26 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80199e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80199e4:	2137      	movs	r1, #55	@ 0x37
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f000 f912 	bl	8019c10 <SDMMC_GetCmdResp1>
 80199ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80199ee:	69fb      	ldr	r3, [r7, #28]
}
 80199f0:	4618      	mov	r0, r3
 80199f2:	3720      	adds	r7, #32
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b088      	sub	sp, #32
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8019a06:	2329      	movs	r3, #41	@ 0x29
 8019a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019a10:	2300      	movs	r3, #0
 8019a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019a18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019a1a:	f107 0308 	add.w	r3, r7, #8
 8019a1e:	4619      	mov	r1, r3
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f7ff fe03 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8019a26:	6878      	ldr	r0, [r7, #4]
 8019a28:	f000 fa2e 	bl	8019e88 <SDMMC_GetCmdResp3>
 8019a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019a2e:	69fb      	ldr	r3, [r7, #28]
}
 8019a30:	4618      	mov	r0, r3
 8019a32:	3720      	adds	r7, #32
 8019a34:	46bd      	mov	sp, r7
 8019a36:	bd80      	pop	{r7, pc}

08019a38 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b088      	sub	sp, #32
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8019a46:	2306      	movs	r3, #6
 8019a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019a50:	2300      	movs	r3, #0
 8019a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019a58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019a5a:	f107 0308 	add.w	r3, r7, #8
 8019a5e:	4619      	mov	r1, r3
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f7ff fde3 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8019a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019a6a:	2106      	movs	r1, #6
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	f000 f8cf 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019a74:	69fb      	ldr	r3, [r7, #28]
}
 8019a76:	4618      	mov	r0, r3
 8019a78:	3720      	adds	r7, #32
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	bd80      	pop	{r7, pc}

08019a7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8019a7e:	b580      	push	{r7, lr}
 8019a80:	b088      	sub	sp, #32
 8019a82:	af00      	add	r7, sp, #0
 8019a84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8019a86:	2300      	movs	r3, #0
 8019a88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8019a8a:	2333      	movs	r3, #51	@ 0x33
 8019a8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019a8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019a94:	2300      	movs	r3, #0
 8019a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019a9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019a9e:	f107 0308 	add.w	r3, r7, #8
 8019aa2:	4619      	mov	r1, r3
 8019aa4:	6878      	ldr	r0, [r7, #4]
 8019aa6:	f7ff fdc1 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8019aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019aae:	2133      	movs	r1, #51	@ 0x33
 8019ab0:	6878      	ldr	r0, [r7, #4]
 8019ab2:	f000 f8ad 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019ab8:	69fb      	ldr	r3, [r7, #28]
}
 8019aba:	4618      	mov	r0, r3
 8019abc:	3720      	adds	r7, #32
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	bd80      	pop	{r7, pc}

08019ac2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8019ac2:	b580      	push	{r7, lr}
 8019ac4:	b088      	sub	sp, #32
 8019ac6:	af00      	add	r7, sp, #0
 8019ac8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8019aca:	2300      	movs	r3, #0
 8019acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8019ace:	2302      	movs	r3, #2
 8019ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8019ad2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8019ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019ad8:	2300      	movs	r3, #0
 8019ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019ae2:	f107 0308 	add.w	r3, r7, #8
 8019ae6:	4619      	mov	r1, r3
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	f7ff fd9f 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f000 f980 	bl	8019df4 <SDMMC_GetCmdResp2>
 8019af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019af6:	69fb      	ldr	r3, [r7, #28]
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3720      	adds	r7, #32
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b088      	sub	sp, #32
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8019b0e:	2309      	movs	r3, #9
 8019b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8019b12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8019b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019b20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019b22:	f107 0308 	add.w	r3, r7, #8
 8019b26:	4619      	mov	r1, r3
 8019b28:	6878      	ldr	r0, [r7, #4]
 8019b2a:	f7ff fd7f 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8019b2e:	6878      	ldr	r0, [r7, #4]
 8019b30:	f000 f960 	bl	8019df4 <SDMMC_GetCmdResp2>
 8019b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019b36:	69fb      	ldr	r3, [r7, #28]
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	3720      	adds	r7, #32
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}

08019b40 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b088      	sub	sp, #32
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8019b4e:	2303      	movs	r3, #3
 8019b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019b58:	2300      	movs	r3, #0
 8019b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019b60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019b62:	f107 0308 	add.w	r3, r7, #8
 8019b66:	4619      	mov	r1, r3
 8019b68:	6878      	ldr	r0, [r7, #4]
 8019b6a:	f7ff fd5f 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	2103      	movs	r1, #3
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f000 f9c8 	bl	8019f08 <SDMMC_GetCmdResp6>
 8019b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019b7a:	69fb      	ldr	r3, [r7, #28]
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3720      	adds	r7, #32
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b088      	sub	sp, #32
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8019b92:	230d      	movs	r3, #13
 8019b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019ba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019ba6:	f107 0308 	add.w	r3, r7, #8
 8019baa:	4619      	mov	r1, r3
 8019bac:	6878      	ldr	r0, [r7, #4]
 8019bae:	f7ff fd3d 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8019bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019bb6:	210d      	movs	r1, #13
 8019bb8:	6878      	ldr	r0, [r7, #4]
 8019bba:	f000 f829 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019bc0:	69fb      	ldr	r3, [r7, #28]
}
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	3720      	adds	r7, #32
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}

08019bca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8019bca:	b580      	push	{r7, lr}
 8019bcc:	b088      	sub	sp, #32
 8019bce:	af00      	add	r7, sp, #0
 8019bd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8019bd6:	230d      	movs	r3, #13
 8019bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019bda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019be0:	2300      	movs	r3, #0
 8019be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019be8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019bea:	f107 0308 	add.w	r3, r7, #8
 8019bee:	4619      	mov	r1, r3
 8019bf0:	6878      	ldr	r0, [r7, #4]
 8019bf2:	f7ff fd1b 	bl	801962c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8019bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019bfa:	210d      	movs	r1, #13
 8019bfc:	6878      	ldr	r0, [r7, #4]
 8019bfe:	f000 f807 	bl	8019c10 <SDMMC_GetCmdResp1>
 8019c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019c04:	69fb      	ldr	r3, [r7, #28]
}
 8019c06:	4618      	mov	r0, r3
 8019c08:	3720      	adds	r7, #32
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}
	...

08019c10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b088      	sub	sp, #32
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	460b      	mov	r3, r1
 8019c1a:	607a      	str	r2, [r7, #4]
 8019c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8019c1e:	4b70      	ldr	r3, [pc, #448]	@ (8019de0 <SDMMC_GetCmdResp1+0x1d0>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	4a70      	ldr	r2, [pc, #448]	@ (8019de4 <SDMMC_GetCmdResp1+0x1d4>)
 8019c24:	fba2 2303 	umull	r2, r3, r2, r3
 8019c28:	0a5a      	lsrs	r2, r3, #9
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	fb02 f303 	mul.w	r3, r2, r3
 8019c30:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019c32:	69fb      	ldr	r3, [r7, #28]
 8019c34:	1e5a      	subs	r2, r3, #1
 8019c36:	61fa      	str	r2, [r7, #28]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d102      	bne.n	8019c42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019c3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019c40:	e0c9      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c46:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8019c48:	69ba      	ldr	r2, [r7, #24]
 8019c4a:	4b67      	ldr	r3, [pc, #412]	@ (8019de8 <SDMMC_GetCmdResp1+0x1d8>)
 8019c4c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d0ef      	beq.n	8019c32 <SDMMC_GetCmdResp1+0x22>
 8019c52:	69bb      	ldr	r3, [r7, #24]
 8019c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d1ea      	bne.n	8019c32 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c60:	f003 0304 	and.w	r3, r3, #4
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d004      	beq.n	8019c72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	2204      	movs	r2, #4
 8019c6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019c6e:	2304      	movs	r3, #4
 8019c70:	e0b1      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c76:	f003 0301 	and.w	r3, r3, #1
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d004      	beq.n	8019c88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2201      	movs	r2, #1
 8019c82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019c84:	2301      	movs	r3, #1
 8019c86:	e0a6      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	4a58      	ldr	r2, [pc, #352]	@ (8019dec <SDMMC_GetCmdResp1+0x1dc>)
 8019c8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8019c8e:	68f8      	ldr	r0, [r7, #12]
 8019c90:	f7ff fcf6 	bl	8019680 <SDMMC_GetCommandResponse>
 8019c94:	4603      	mov	r3, r0
 8019c96:	461a      	mov	r2, r3
 8019c98:	7afb      	ldrb	r3, [r7, #11]
 8019c9a:	4293      	cmp	r3, r2
 8019c9c:	d001      	beq.n	8019ca2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e099      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8019ca2:	2100      	movs	r1, #0
 8019ca4:	68f8      	ldr	r0, [r7, #12]
 8019ca6:	f7ff fcf8 	bl	801969a <SDMMC_GetResponse>
 8019caa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8019cac:	697a      	ldr	r2, [r7, #20]
 8019cae:	4b50      	ldr	r3, [pc, #320]	@ (8019df0 <SDMMC_GetCmdResp1+0x1e0>)
 8019cb0:	4013      	ands	r3, r2
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d101      	bne.n	8019cba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	e08d      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	da02      	bge.n	8019cc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8019cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8019cc4:	e087      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d001      	beq.n	8019cd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8019cd0:	2340      	movs	r3, #64	@ 0x40
 8019cd2:	e080      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d001      	beq.n	8019ce2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8019cde:	2380      	movs	r3, #128	@ 0x80
 8019ce0:	e079      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d002      	beq.n	8019cf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8019cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019cf0:	e071      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d002      	beq.n	8019d02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8019cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019d00:	e069      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8019d02:	697b      	ldr	r3, [r7, #20]
 8019d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d002      	beq.n	8019d12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8019d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d10:	e061      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8019d12:	697b      	ldr	r3, [r7, #20]
 8019d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d002      	beq.n	8019d22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8019d1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019d20:	e059      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d002      	beq.n	8019d32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019d30:	e051      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8019d32:	697b      	ldr	r3, [r7, #20]
 8019d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d002      	beq.n	8019d42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019d40:	e049      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d002      	beq.n	8019d52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8019d4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019d50:	e041      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d002      	beq.n	8019d62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8019d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019d60:	e039      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d002      	beq.n	8019d72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8019d6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8019d70:	e031      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8019d72:	697b      	ldr	r3, [r7, #20]
 8019d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d002      	beq.n	8019d82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8019d7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8019d80:	e029      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d002      	beq.n	8019d92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8019d8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019d90:	e021      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d002      	beq.n	8019da2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8019d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8019da0:	e019      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d002      	beq.n	8019db2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8019dac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019db0:	e011      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d002      	beq.n	8019dc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8019dbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8019dc0:	e009      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	f003 0308 	and.w	r3, r3, #8
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d002      	beq.n	8019dd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8019dcc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8019dd0:	e001      	b.n	8019dd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019dd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3720      	adds	r7, #32
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}
 8019dde:	bf00      	nop
 8019de0:	2400001c 	.word	0x2400001c
 8019de4:	10624dd3 	.word	0x10624dd3
 8019de8:	00200045 	.word	0x00200045
 8019dec:	002000c5 	.word	0x002000c5
 8019df0:	fdffe008 	.word	0xfdffe008

08019df4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8019df4:	b480      	push	{r7}
 8019df6:	b085      	sub	sp, #20
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8019e7c <SDMMC_GetCmdResp2+0x88>)
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	4a1f      	ldr	r2, [pc, #124]	@ (8019e80 <SDMMC_GetCmdResp2+0x8c>)
 8019e02:	fba2 2303 	umull	r2, r3, r2, r3
 8019e06:	0a5b      	lsrs	r3, r3, #9
 8019e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019e0c:	fb02 f303 	mul.w	r3, r2, r3
 8019e10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	1e5a      	subs	r2, r3, #1
 8019e16:	60fa      	str	r2, [r7, #12]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d102      	bne.n	8019e22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019e1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019e20:	e026      	b.n	8019e70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d0ef      	beq.n	8019e12 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d1ea      	bne.n	8019e12 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e40:	f003 0304 	and.w	r3, r3, #4
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d004      	beq.n	8019e52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2204      	movs	r2, #4
 8019e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019e4e:	2304      	movs	r3, #4
 8019e50:	e00e      	b.n	8019e70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e56:	f003 0301 	and.w	r3, r3, #1
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d004      	beq.n	8019e68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	2201      	movs	r2, #1
 8019e62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019e64:	2301      	movs	r3, #1
 8019e66:	e003      	b.n	8019e70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	4a06      	ldr	r2, [pc, #24]	@ (8019e84 <SDMMC_GetCmdResp2+0x90>)
 8019e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8019e6e:	2300      	movs	r3, #0
}
 8019e70:	4618      	mov	r0, r3
 8019e72:	3714      	adds	r7, #20
 8019e74:	46bd      	mov	sp, r7
 8019e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7a:	4770      	bx	lr
 8019e7c:	2400001c 	.word	0x2400001c
 8019e80:	10624dd3 	.word	0x10624dd3
 8019e84:	002000c5 	.word	0x002000c5

08019e88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b085      	sub	sp, #20
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019e90:	4b1a      	ldr	r3, [pc, #104]	@ (8019efc <SDMMC_GetCmdResp3+0x74>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4a1a      	ldr	r2, [pc, #104]	@ (8019f00 <SDMMC_GetCmdResp3+0x78>)
 8019e96:	fba2 2303 	umull	r2, r3, r2, r3
 8019e9a:	0a5b      	lsrs	r3, r3, #9
 8019e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019ea0:	fb02 f303 	mul.w	r3, r2, r3
 8019ea4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	1e5a      	subs	r2, r3, #1
 8019eaa:	60fa      	str	r2, [r7, #12]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d102      	bne.n	8019eb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019eb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019eb4:	e01b      	b.n	8019eee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019eba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d0ef      	beq.n	8019ea6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019ec6:	68bb      	ldr	r3, [r7, #8]
 8019ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d1ea      	bne.n	8019ea6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ed4:	f003 0304 	and.w	r3, r3, #4
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d004      	beq.n	8019ee6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	2204      	movs	r2, #4
 8019ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019ee2:	2304      	movs	r3, #4
 8019ee4:	e003      	b.n	8019eee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	4a06      	ldr	r2, [pc, #24]	@ (8019f04 <SDMMC_GetCmdResp3+0x7c>)
 8019eea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8019eec:	2300      	movs	r3, #0
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	3714      	adds	r7, #20
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef8:	4770      	bx	lr
 8019efa:	bf00      	nop
 8019efc:	2400001c 	.word	0x2400001c
 8019f00:	10624dd3 	.word	0x10624dd3
 8019f04:	002000c5 	.word	0x002000c5

08019f08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b088      	sub	sp, #32
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	60f8      	str	r0, [r7, #12]
 8019f10:	460b      	mov	r3, r1
 8019f12:	607a      	str	r2, [r7, #4]
 8019f14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019f16:	4b35      	ldr	r3, [pc, #212]	@ (8019fec <SDMMC_GetCmdResp6+0xe4>)
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	4a35      	ldr	r2, [pc, #212]	@ (8019ff0 <SDMMC_GetCmdResp6+0xe8>)
 8019f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8019f20:	0a5b      	lsrs	r3, r3, #9
 8019f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019f26:	fb02 f303 	mul.w	r3, r2, r3
 8019f2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	1e5a      	subs	r2, r3, #1
 8019f30:	61fa      	str	r2, [r7, #28]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d102      	bne.n	8019f3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019f36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019f3a:	e052      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f40:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019f42:	69bb      	ldr	r3, [r7, #24]
 8019f44:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d0ef      	beq.n	8019f2c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019f4c:	69bb      	ldr	r3, [r7, #24]
 8019f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d1ea      	bne.n	8019f2c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f5a:	f003 0304 	and.w	r3, r3, #4
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d004      	beq.n	8019f6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	2204      	movs	r2, #4
 8019f66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019f68:	2304      	movs	r3, #4
 8019f6a:	e03a      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f70:	f003 0301 	and.w	r3, r3, #1
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d004      	beq.n	8019f82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	2201      	movs	r2, #1
 8019f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019f7e:	2301      	movs	r3, #1
 8019f80:	e02f      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8019f82:	68f8      	ldr	r0, [r7, #12]
 8019f84:	f7ff fb7c 	bl	8019680 <SDMMC_GetCommandResponse>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	7afb      	ldrb	r3, [r7, #11]
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	d001      	beq.n	8019f96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019f92:	2301      	movs	r3, #1
 8019f94:	e025      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	4a16      	ldr	r2, [pc, #88]	@ (8019ff4 <SDMMC_GetCmdResp6+0xec>)
 8019f9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8019f9c:	2100      	movs	r1, #0
 8019f9e:	68f8      	ldr	r0, [r7, #12]
 8019fa0:	f7ff fb7b 	bl	801969a <SDMMC_GetResponse>
 8019fa4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d106      	bne.n	8019fbe <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8019fb0:	697b      	ldr	r3, [r7, #20]
 8019fb2:	0c1b      	lsrs	r3, r3, #16
 8019fb4:	b29a      	uxth	r2, r3
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	e011      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8019fbe:	697b      	ldr	r3, [r7, #20]
 8019fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d002      	beq.n	8019fce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019fcc:	e009      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d002      	beq.n	8019fde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019fdc:	e001      	b.n	8019fe2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019fde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3720      	adds	r7, #32
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}
 8019fea:	bf00      	nop
 8019fec:	2400001c 	.word	0x2400001c
 8019ff0:	10624dd3 	.word	0x10624dd3
 8019ff4:	002000c5 	.word	0x002000c5

08019ff8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8019ff8:	b480      	push	{r7}
 8019ffa:	b085      	sub	sp, #20
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801a000:	4b22      	ldr	r3, [pc, #136]	@ (801a08c <SDMMC_GetCmdResp7+0x94>)
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4a22      	ldr	r2, [pc, #136]	@ (801a090 <SDMMC_GetCmdResp7+0x98>)
 801a006:	fba2 2303 	umull	r2, r3, r2, r3
 801a00a:	0a5b      	lsrs	r3, r3, #9
 801a00c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a010:	fb02 f303 	mul.w	r3, r2, r3
 801a014:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	1e5a      	subs	r2, r3, #1
 801a01a:	60fa      	str	r2, [r7, #12]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d102      	bne.n	801a026 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a024:	e02c      	b.n	801a080 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a02a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a02c:	68bb      	ldr	r3, [r7, #8]
 801a02e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801a032:	2b00      	cmp	r3, #0
 801a034:	d0ef      	beq.n	801a016 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d1ea      	bne.n	801a016 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a044:	f003 0304 	and.w	r3, r3, #4
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d004      	beq.n	801a056 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	2204      	movs	r2, #4
 801a050:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801a052:	2304      	movs	r3, #4
 801a054:	e014      	b.n	801a080 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a05a:	f003 0301 	and.w	r3, r3, #1
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d004      	beq.n	801a06c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2201      	movs	r2, #1
 801a066:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801a068:	2301      	movs	r3, #1
 801a06a:	e009      	b.n	801a080 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a074:	2b00      	cmp	r3, #0
 801a076:	d002      	beq.n	801a07e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2240      	movs	r2, #64	@ 0x40
 801a07c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801a07e:	2300      	movs	r3, #0

}
 801a080:	4618      	mov	r0, r3
 801a082:	3714      	adds	r7, #20
 801a084:	46bd      	mov	sp, r7
 801a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08a:	4770      	bx	lr
 801a08c:	2400001c 	.word	0x2400001c
 801a090:	10624dd3 	.word	0x10624dd3

0801a094 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801a094:	b480      	push	{r7}
 801a096:	b085      	sub	sp, #20
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801a09c:	4b11      	ldr	r3, [pc, #68]	@ (801a0e4 <SDMMC_GetCmdError+0x50>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a11      	ldr	r2, [pc, #68]	@ (801a0e8 <SDMMC_GetCmdError+0x54>)
 801a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 801a0a6:	0a5b      	lsrs	r3, r3, #9
 801a0a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a0ac:	fb02 f303 	mul.w	r3, r2, r3
 801a0b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	1e5a      	subs	r2, r3, #1
 801a0b6:	60fa      	str	r2, [r7, #12]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d102      	bne.n	801a0c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a0bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a0c0:	e009      	b.n	801a0d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d0f1      	beq.n	801a0b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	4a06      	ldr	r2, [pc, #24]	@ (801a0ec <SDMMC_GetCmdError+0x58>)
 801a0d2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801a0d4:	2300      	movs	r3, #0
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3714      	adds	r7, #20
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	2400001c 	.word	0x2400001c
 801a0e8:	10624dd3 	.word	0x10624dd3
 801a0ec:	002000c5 	.word	0x002000c5

0801a0f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801a0f4:	4904      	ldr	r1, [pc, #16]	@ (801a108 <MX_FATFS_Init+0x18>)
 801a0f6:	4805      	ldr	r0, [pc, #20]	@ (801a10c <MX_FATFS_Init+0x1c>)
 801a0f8:	f002 fc08 	bl	801c90c <FATFS_LinkDriver>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	461a      	mov	r2, r3
 801a100:	4b03      	ldr	r3, [pc, #12]	@ (801a110 <MX_FATFS_Init+0x20>)
 801a102:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a104:	bf00      	nop
 801a106:	bd80      	pop	{r7, pc}
 801a108:	24000460 	.word	0x24000460
 801a10c:	0801eb8c 	.word	0x0801eb8c
 801a110:	2400045c 	.word	0x2400045c

0801a114 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a114:	b480      	push	{r7}
 801a116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a118:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a11a:	4618      	mov	r0, r3
 801a11c:	46bd      	mov	sp, r7
 801a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a122:	4770      	bx	lr

0801a124 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b086      	sub	sp, #24
 801a128:	af00      	add	r7, sp, #0
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	60b9      	str	r1, [r7, #8]
 801a12e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a130:	2300      	movs	r3, #0
 801a132:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	68ba      	ldr	r2, [r7, #8]
 801a138:	68f9      	ldr	r1, [r7, #12]
 801a13a:	4806      	ldr	r0, [pc, #24]	@ (801a154 <BSP_SD_ReadBlocks_DMA+0x30>)
 801a13c:	f7fc fc16 	bl	801696c <HAL_SD_ReadBlocks_DMA>
 801a140:	4603      	mov	r3, r0
 801a142:	2b00      	cmp	r3, #0
 801a144:	d001      	beq.n	801a14a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a146:	2301      	movs	r3, #1
 801a148:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a14a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a14c:	4618      	mov	r0, r3
 801a14e:	3718      	adds	r7, #24
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}
 801a154:	240002f8 	.word	0x240002f8

0801a158 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b086      	sub	sp, #24
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60f8      	str	r0, [r7, #12]
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a164:	2300      	movs	r3, #0
 801a166:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	68ba      	ldr	r2, [r7, #8]
 801a16c:	68f9      	ldr	r1, [r7, #12]
 801a16e:	4806      	ldr	r0, [pc, #24]	@ (801a188 <BSP_SD_WriteBlocks_DMA+0x30>)
 801a170:	f7fc fca4 	bl	8016abc <HAL_SD_WriteBlocks_DMA>
 801a174:	4603      	mov	r3, r0
 801a176:	2b00      	cmp	r3, #0
 801a178:	d001      	beq.n	801a17e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a17a:	2301      	movs	r3, #1
 801a17c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a17e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a180:	4618      	mov	r0, r3
 801a182:	3718      	adds	r7, #24
 801a184:	46bd      	mov	sp, r7
 801a186:	bd80      	pop	{r7, pc}
 801a188:	240002f8 	.word	0x240002f8

0801a18c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801a190:	4805      	ldr	r0, [pc, #20]	@ (801a1a8 <BSP_SD_GetCardState+0x1c>)
 801a192:	f7fd fa9d 	bl	80176d0 <HAL_SD_GetCardState>
 801a196:	4603      	mov	r3, r0
 801a198:	2b04      	cmp	r3, #4
 801a19a:	bf14      	ite	ne
 801a19c:	2301      	movne	r3, #1
 801a19e:	2300      	moveq	r3, #0
 801a1a0:	b2db      	uxtb	r3, r3
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	bd80      	pop	{r7, pc}
 801a1a6:	bf00      	nop
 801a1a8:	240002f8 	.word	0x240002f8

0801a1ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801a1b4:	6879      	ldr	r1, [r7, #4]
 801a1b6:	4803      	ldr	r0, [pc, #12]	@ (801a1c4 <BSP_SD_GetCardInfo+0x18>)
 801a1b8:	f7fd f94c 	bl	8017454 <HAL_SD_GetCardInfo>
}
 801a1bc:	bf00      	nop
 801a1be:	3708      	adds	r7, #8
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	bd80      	pop	{r7, pc}
 801a1c4:	240002f8 	.word	0x240002f8

0801a1c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b082      	sub	sp, #8
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801a1d0:	f000 fa14 	bl	801a5fc <BSP_SD_WriteCpltCallback>
}
 801a1d4:	bf00      	nop
 801a1d6:	3708      	adds	r7, #8
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	bd80      	pop	{r7, pc}

0801a1dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801a1e4:	f000 fa16 	bl	801a614 <BSP_SD_ReadCpltCallback>
}
 801a1e8:	bf00      	nop
 801a1ea:	3708      	adds	r7, #8
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}

0801a1f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b084      	sub	sp, #16
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801a1f8:	f7f5 fe92 	bl	800ff20 <HAL_GetTick>
 801a1fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801a1fe:	e006      	b.n	801a20e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a200:	f7ff ffc4 	bl	801a18c <BSP_SD_GetCardState>
 801a204:	4603      	mov	r3, r0
 801a206:	2b00      	cmp	r3, #0
 801a208:	d101      	bne.n	801a20e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801a20a:	2300      	movs	r3, #0
 801a20c:	e009      	b.n	801a222 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801a20e:	f7f5 fe87 	bl	800ff20 <HAL_GetTick>
 801a212:	4602      	mov	r2, r0
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	1ad3      	subs	r3, r2, r3
 801a218:	687a      	ldr	r2, [r7, #4]
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d8f0      	bhi.n	801a200 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801a21e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a222:	4618      	mov	r0, r3
 801a224:	3710      	adds	r7, #16
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
	...

0801a22c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	af00      	add	r7, sp, #0
 801a232:	4603      	mov	r3, r0
 801a234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801a236:	4b0b      	ldr	r3, [pc, #44]	@ (801a264 <SD_CheckStatus+0x38>)
 801a238:	2201      	movs	r2, #1
 801a23a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801a23c:	f7ff ffa6 	bl	801a18c <BSP_SD_GetCardState>
 801a240:	4603      	mov	r3, r0
 801a242:	2b00      	cmp	r3, #0
 801a244:	d107      	bne.n	801a256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801a246:	4b07      	ldr	r3, [pc, #28]	@ (801a264 <SD_CheckStatus+0x38>)
 801a248:	781b      	ldrb	r3, [r3, #0]
 801a24a:	b2db      	uxtb	r3, r3
 801a24c:	f023 0301 	bic.w	r3, r3, #1
 801a250:	b2da      	uxtb	r2, r3
 801a252:	4b04      	ldr	r3, [pc, #16]	@ (801a264 <SD_CheckStatus+0x38>)
 801a254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801a256:	4b03      	ldr	r3, [pc, #12]	@ (801a264 <SD_CheckStatus+0x38>)
 801a258:	781b      	ldrb	r3, [r3, #0]
 801a25a:	b2db      	uxtb	r3, r3
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	3708      	adds	r7, #8
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}
 801a264:	24000029 	.word	0x24000029

0801a268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b082      	sub	sp, #8
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	4603      	mov	r3, r0
 801a270:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801a272:	79fb      	ldrb	r3, [r7, #7]
 801a274:	4618      	mov	r0, r3
 801a276:	f7ff ffd9 	bl	801a22c <SD_CheckStatus>
 801a27a:	4603      	mov	r3, r0
 801a27c:	461a      	mov	r2, r3
 801a27e:	4b04      	ldr	r3, [pc, #16]	@ (801a290 <SD_initialize+0x28>)
 801a280:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801a282:	4b03      	ldr	r3, [pc, #12]	@ (801a290 <SD_initialize+0x28>)
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	b2db      	uxtb	r3, r3
}
 801a288:	4618      	mov	r0, r3
 801a28a:	3708      	adds	r7, #8
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	24000029 	.word	0x24000029

0801a294 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	4603      	mov	r3, r0
 801a29c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801a29e:	79fb      	ldrb	r3, [r7, #7]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f7ff ffc3 	bl	801a22c <SD_CheckStatus>
 801a2a6:	4603      	mov	r3, r0
}
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	3708      	adds	r7, #8
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}

0801a2b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b088      	sub	sp, #32
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60b9      	str	r1, [r7, #8]
 801a2b8:	607a      	str	r2, [r7, #4]
 801a2ba:	603b      	str	r3, [r7, #0]
 801a2bc:	4603      	mov	r3, r0
 801a2be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a2c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 801a2c8:	f7ff ff92 	bl	801a1f0 <SD_CheckStatusWithTimeout>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	da01      	bge.n	801a2d6 <SD_read+0x26>
  {
    return res;
 801a2d2:	7ffb      	ldrb	r3, [r7, #31]
 801a2d4:	e08b      	b.n	801a3ee <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	f003 0303 	and.w	r3, r3, #3
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d13b      	bne.n	801a358 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801a2e0:	683a      	ldr	r2, [r7, #0]
 801a2e2:	6879      	ldr	r1, [r7, #4]
 801a2e4:	68b8      	ldr	r0, [r7, #8]
 801a2e6:	f7ff ff1d 	bl	801a124 <BSP_SD_ReadBlocks_DMA>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d17d      	bne.n	801a3ec <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801a2f0:	4b41      	ldr	r3, [pc, #260]	@ (801a3f8 <SD_read+0x148>)
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801a2f6:	f7f5 fe13 	bl	800ff20 <HAL_GetTick>
 801a2fa:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a2fc:	bf00      	nop
 801a2fe:	4b3e      	ldr	r3, [pc, #248]	@ (801a3f8 <SD_read+0x148>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d108      	bne.n	801a318 <SD_read+0x68>
 801a306:	f7f5 fe0b 	bl	800ff20 <HAL_GetTick>
 801a30a:	4602      	mov	r2, r0
 801a30c:	697b      	ldr	r3, [r7, #20]
 801a30e:	1ad3      	subs	r3, r2, r3
 801a310:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a314:	4293      	cmp	r3, r2
 801a316:	d9f2      	bls.n	801a2fe <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801a318:	4b37      	ldr	r3, [pc, #220]	@ (801a3f8 <SD_read+0x148>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d102      	bne.n	801a326 <SD_read+0x76>
      {
        res = RES_ERROR;
 801a320:	2301      	movs	r3, #1
 801a322:	77fb      	strb	r3, [r7, #31]
 801a324:	e062      	b.n	801a3ec <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801a326:	4b34      	ldr	r3, [pc, #208]	@ (801a3f8 <SD_read+0x148>)
 801a328:	2200      	movs	r2, #0
 801a32a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801a32c:	f7f5 fdf8 	bl	800ff20 <HAL_GetTick>
 801a330:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a332:	e007      	b.n	801a344 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a334:	f7ff ff2a 	bl	801a18c <BSP_SD_GetCardState>
 801a338:	4603      	mov	r3, r0
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d102      	bne.n	801a344 <SD_read+0x94>
          {
            res = RES_OK;
 801a33e:	2300      	movs	r3, #0
 801a340:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801a342:	e053      	b.n	801a3ec <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a344:	f7f5 fdec 	bl	800ff20 <HAL_GetTick>
 801a348:	4602      	mov	r2, r0
 801a34a:	697b      	ldr	r3, [r7, #20]
 801a34c:	1ad3      	subs	r3, r2, r3
 801a34e:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a352:	4293      	cmp	r3, r2
 801a354:	d9ee      	bls.n	801a334 <SD_read+0x84>
 801a356:	e049      	b.n	801a3ec <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801a358:	2300      	movs	r3, #0
 801a35a:	61bb      	str	r3, [r7, #24]
 801a35c:	e037      	b.n	801a3ce <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	1c5a      	adds	r2, r3, #1
 801a362:	607a      	str	r2, [r7, #4]
 801a364:	2201      	movs	r2, #1
 801a366:	4619      	mov	r1, r3
 801a368:	4824      	ldr	r0, [pc, #144]	@ (801a3fc <SD_read+0x14c>)
 801a36a:	f7ff fedb 	bl	801a124 <BSP_SD_ReadBlocks_DMA>
 801a36e:	4603      	mov	r3, r0
 801a370:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801a372:	7fbb      	ldrb	r3, [r7, #30]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d12f      	bne.n	801a3d8 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801a378:	f7f5 fdd2 	bl	800ff20 <HAL_GetTick>
 801a37c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a37e:	bf00      	nop
 801a380:	4b1d      	ldr	r3, [pc, #116]	@ (801a3f8 <SD_read+0x148>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d108      	bne.n	801a39a <SD_read+0xea>
 801a388:	f7f5 fdca 	bl	800ff20 <HAL_GetTick>
 801a38c:	4602      	mov	r2, r0
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	1ad3      	subs	r3, r2, r3
 801a392:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a396:	4293      	cmp	r3, r2
 801a398:	d9f2      	bls.n	801a380 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801a39a:	4b17      	ldr	r3, [pc, #92]	@ (801a3f8 <SD_read+0x148>)
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d102      	bne.n	801a3a8 <SD_read+0xf8>
          {
            res = RES_ERROR;
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	77fb      	strb	r3, [r7, #31]
            break;
 801a3a6:	e018      	b.n	801a3da <SD_read+0x12a>
          }
          ReadStatus = 0;
 801a3a8:	4b13      	ldr	r3, [pc, #76]	@ (801a3f8 <SD_read+0x148>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801a3ae:	68bb      	ldr	r3, [r7, #8]
 801a3b0:	4a12      	ldr	r2, [pc, #72]	@ (801a3fc <SD_read+0x14c>)
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	4611      	mov	r1, r2
 801a3b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	f003 f98d 	bl	801d6da <memcpy>
          buff += BLOCKSIZE;
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801a3c6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801a3c8:	69bb      	ldr	r3, [r7, #24]
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	61bb      	str	r3, [r7, #24]
 801a3ce:	69bb      	ldr	r3, [r7, #24]
 801a3d0:	683a      	ldr	r2, [r7, #0]
 801a3d2:	429a      	cmp	r2, r3
 801a3d4:	d8c3      	bhi.n	801a35e <SD_read+0xae>
 801a3d6:	e000      	b.n	801a3da <SD_read+0x12a>
        }
        else
        {
          break;
 801a3d8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801a3da:	69bb      	ldr	r3, [r7, #24]
 801a3dc:	683a      	ldr	r2, [r7, #0]
 801a3de:	429a      	cmp	r2, r3
 801a3e0:	d104      	bne.n	801a3ec <SD_read+0x13c>
 801a3e2:	7fbb      	ldrb	r3, [r7, #30]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d101      	bne.n	801a3ec <SD_read+0x13c>
        res = RES_OK;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 801a3ec:	7ffb      	ldrb	r3, [r7, #31]
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3720      	adds	r7, #32
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	24000ac8 	.word	0x24000ac8
 801a3fc:	240008c4 	.word	0x240008c4

0801a400 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b088      	sub	sp, #32
 801a404:	af00      	add	r7, sp, #0
 801a406:	60b9      	str	r1, [r7, #8]
 801a408:	607a      	str	r2, [r7, #4]
 801a40a:	603b      	str	r3, [r7, #0]
 801a40c:	4603      	mov	r3, r0
 801a40e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a410:	2301      	movs	r3, #1
 801a412:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801a414:	4b4b      	ldr	r3, [pc, #300]	@ (801a544 <SD_write+0x144>)
 801a416:	2200      	movs	r2, #0
 801a418:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a41a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801a41e:	f7ff fee7 	bl	801a1f0 <SD_CheckStatusWithTimeout>
 801a422:	4603      	mov	r3, r0
 801a424:	2b00      	cmp	r3, #0
 801a426:	da01      	bge.n	801a42c <SD_write+0x2c>
  {
    return res;
 801a428:	7ffb      	ldrb	r3, [r7, #31]
 801a42a:	e087      	b.n	801a53c <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	f003 0303 	and.w	r3, r3, #3
 801a432:	2b00      	cmp	r3, #0
 801a434:	d138      	bne.n	801a4a8 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	68b8      	ldr	r0, [r7, #8]
 801a43c:	f7ff fe8c 	bl	801a158 <BSP_SD_WriteBlocks_DMA>
 801a440:	4603      	mov	r3, r0
 801a442:	2b00      	cmp	r3, #0
 801a444:	d179      	bne.n	801a53a <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801a446:	f7f5 fd6b 	bl	800ff20 <HAL_GetTick>
 801a44a:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a44c:	bf00      	nop
 801a44e:	4b3d      	ldr	r3, [pc, #244]	@ (801a544 <SD_write+0x144>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d108      	bne.n	801a468 <SD_write+0x68>
 801a456:	f7f5 fd63 	bl	800ff20 <HAL_GetTick>
 801a45a:	4602      	mov	r2, r0
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	1ad3      	subs	r3, r2, r3
 801a460:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a464:	4293      	cmp	r3, r2
 801a466:	d9f2      	bls.n	801a44e <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801a468:	4b36      	ldr	r3, [pc, #216]	@ (801a544 <SD_write+0x144>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d102      	bne.n	801a476 <SD_write+0x76>
      {
        res = RES_ERROR;
 801a470:	2301      	movs	r3, #1
 801a472:	77fb      	strb	r3, [r7, #31]
 801a474:	e061      	b.n	801a53a <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801a476:	4b33      	ldr	r3, [pc, #204]	@ (801a544 <SD_write+0x144>)
 801a478:	2200      	movs	r2, #0
 801a47a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801a47c:	f7f5 fd50 	bl	800ff20 <HAL_GetTick>
 801a480:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a482:	e007      	b.n	801a494 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a484:	f7ff fe82 	bl	801a18c <BSP_SD_GetCardState>
 801a488:	4603      	mov	r3, r0
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d102      	bne.n	801a494 <SD_write+0x94>
          {
            res = RES_OK;
 801a48e:	2300      	movs	r3, #0
 801a490:	77fb      	strb	r3, [r7, #31]
            break;
 801a492:	e052      	b.n	801a53a <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a494:	f7f5 fd44 	bl	800ff20 <HAL_GetTick>
 801a498:	4602      	mov	r2, r0
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	1ad3      	subs	r3, r2, r3
 801a49e:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a4a2:	4293      	cmp	r3, r2
 801a4a4:	d9ee      	bls.n	801a484 <SD_write+0x84>
 801a4a6:	e048      	b.n	801a53a <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	61bb      	str	r3, [r7, #24]
 801a4ac:	e034      	b.n	801a518 <SD_write+0x118>
      {
        WriteStatus = 0;
 801a4ae:	4b25      	ldr	r3, [pc, #148]	@ (801a544 <SD_write+0x144>)
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801a4b4:	4a24      	ldr	r2, [pc, #144]	@ (801a548 <SD_write+0x148>)
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	4610      	mov	r0, r2
 801a4ba:	4619      	mov	r1, r3
 801a4bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	f003 f90a 	bl	801d6da <memcpy>
        buff += BLOCKSIZE;
 801a4c6:	68bb      	ldr	r3, [r7, #8]
 801a4c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801a4cc:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	1c5a      	adds	r2, r3, #1
 801a4d2:	607a      	str	r2, [r7, #4]
 801a4d4:	2201      	movs	r2, #1
 801a4d6:	4619      	mov	r1, r3
 801a4d8:	481b      	ldr	r0, [pc, #108]	@ (801a548 <SD_write+0x148>)
 801a4da:	f7ff fe3d 	bl	801a158 <BSP_SD_WriteBlocks_DMA>
 801a4de:	4603      	mov	r3, r0
 801a4e0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801a4e2:	7fbb      	ldrb	r3, [r7, #30]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d11c      	bne.n	801a522 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801a4e8:	f7f5 fd1a 	bl	800ff20 <HAL_GetTick>
 801a4ec:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a4ee:	bf00      	nop
 801a4f0:	4b14      	ldr	r3, [pc, #80]	@ (801a544 <SD_write+0x144>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d108      	bne.n	801a50a <SD_write+0x10a>
 801a4f8:	f7f5 fd12 	bl	800ff20 <HAL_GetTick>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	697b      	ldr	r3, [r7, #20]
 801a500:	1ad3      	subs	r3, r2, r3
 801a502:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a506:	4293      	cmp	r3, r2
 801a508:	d9f2      	bls.n	801a4f0 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801a50a:	4b0e      	ldr	r3, [pc, #56]	@ (801a544 <SD_write+0x144>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d009      	beq.n	801a526 <SD_write+0x126>
      for (i = 0; i < count; i++)
 801a512:	69bb      	ldr	r3, [r7, #24]
 801a514:	3301      	adds	r3, #1
 801a516:	61bb      	str	r3, [r7, #24]
 801a518:	69bb      	ldr	r3, [r7, #24]
 801a51a:	683a      	ldr	r2, [r7, #0]
 801a51c:	429a      	cmp	r2, r3
 801a51e:	d8c6      	bhi.n	801a4ae <SD_write+0xae>
 801a520:	e002      	b.n	801a528 <SD_write+0x128>
          }

        }
        else
        {
          break;
 801a522:	bf00      	nop
 801a524:	e000      	b.n	801a528 <SD_write+0x128>
            break;
 801a526:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801a528:	69bb      	ldr	r3, [r7, #24]
 801a52a:	683a      	ldr	r2, [r7, #0]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d104      	bne.n	801a53a <SD_write+0x13a>
 801a530:	7fbb      	ldrb	r3, [r7, #30]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d101      	bne.n	801a53a <SD_write+0x13a>
        res = RES_OK;
 801a536:	2300      	movs	r3, #0
 801a538:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801a53a:	7ffb      	ldrb	r3, [r7, #31]
}
 801a53c:	4618      	mov	r0, r3
 801a53e:	3720      	adds	r7, #32
 801a540:	46bd      	mov	sp, r7
 801a542:	bd80      	pop	{r7, pc}
 801a544:	24000ac4 	.word	0x24000ac4
 801a548:	240008c4 	.word	0x240008c4

0801a54c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b08c      	sub	sp, #48	@ 0x30
 801a550:	af00      	add	r7, sp, #0
 801a552:	4603      	mov	r3, r0
 801a554:	603a      	str	r2, [r7, #0]
 801a556:	71fb      	strb	r3, [r7, #7]
 801a558:	460b      	mov	r3, r1
 801a55a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801a55c:	2301      	movs	r3, #1
 801a55e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801a562:	4b25      	ldr	r3, [pc, #148]	@ (801a5f8 <SD_ioctl+0xac>)
 801a564:	781b      	ldrb	r3, [r3, #0]
 801a566:	b2db      	uxtb	r3, r3
 801a568:	f003 0301 	and.w	r3, r3, #1
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d001      	beq.n	801a574 <SD_ioctl+0x28>
 801a570:	2303      	movs	r3, #3
 801a572:	e03c      	b.n	801a5ee <SD_ioctl+0xa2>

  switch (cmd)
 801a574:	79bb      	ldrb	r3, [r7, #6]
 801a576:	2b03      	cmp	r3, #3
 801a578:	d834      	bhi.n	801a5e4 <SD_ioctl+0x98>
 801a57a:	a201      	add	r2, pc, #4	@ (adr r2, 801a580 <SD_ioctl+0x34>)
 801a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a580:	0801a591 	.word	0x0801a591
 801a584:	0801a599 	.word	0x0801a599
 801a588:	0801a5b1 	.word	0x0801a5b1
 801a58c:	0801a5cb 	.word	0x0801a5cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801a590:	2300      	movs	r3, #0
 801a592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a596:	e028      	b.n	801a5ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801a598:	f107 0308 	add.w	r3, r7, #8
 801a59c:	4618      	mov	r0, r3
 801a59e:	f7ff fe05 	bl	801a1ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801a5a2:	6a3a      	ldr	r2, [r7, #32]
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a5ae:	e01c      	b.n	801a5ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a5b0:	f107 0308 	add.w	r3, r7, #8
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	f7ff fdf9 	bl	801a1ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5bc:	b29a      	uxth	r2, r3
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a5c8:	e00f      	b.n	801a5ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a5ca:	f107 0308 	add.w	r3, r7, #8
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7ff fdec 	bl	801a1ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d6:	0a5a      	lsrs	r2, r3, #9
 801a5d8:	683b      	ldr	r3, [r7, #0]
 801a5da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a5dc:	2300      	movs	r3, #0
 801a5de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a5e2:	e002      	b.n	801a5ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801a5e4:	2304      	movs	r3, #4
 801a5e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801a5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	3730      	adds	r7, #48	@ 0x30
 801a5f2:	46bd      	mov	sp, r7
 801a5f4:	bd80      	pop	{r7, pc}
 801a5f6:	bf00      	nop
 801a5f8:	24000029 	.word	0x24000029

0801a5fc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801a5fc:	b480      	push	{r7}
 801a5fe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801a600:	4b03      	ldr	r3, [pc, #12]	@ (801a610 <BSP_SD_WriteCpltCallback+0x14>)
 801a602:	2201      	movs	r2, #1
 801a604:	601a      	str	r2, [r3, #0]
}
 801a606:	bf00      	nop
 801a608:	46bd      	mov	sp, r7
 801a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60e:	4770      	bx	lr
 801a610:	24000ac4 	.word	0x24000ac4

0801a614 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801a614:	b480      	push	{r7}
 801a616:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801a618:	4b03      	ldr	r3, [pc, #12]	@ (801a628 <BSP_SD_ReadCpltCallback+0x14>)
 801a61a:	2201      	movs	r2, #1
 801a61c:	601a      	str	r2, [r3, #0]
}
 801a61e:	bf00      	nop
 801a620:	46bd      	mov	sp, r7
 801a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a626:	4770      	bx	lr
 801a628:	24000ac8 	.word	0x24000ac8

0801a62c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b084      	sub	sp, #16
 801a630:	af00      	add	r7, sp, #0
 801a632:	4603      	mov	r3, r0
 801a634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a636:	79fb      	ldrb	r3, [r7, #7]
 801a638:	4a08      	ldr	r2, [pc, #32]	@ (801a65c <disk_status+0x30>)
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	4413      	add	r3, r2
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	79fa      	ldrb	r2, [r7, #7]
 801a644:	4905      	ldr	r1, [pc, #20]	@ (801a65c <disk_status+0x30>)
 801a646:	440a      	add	r2, r1
 801a648:	7a12      	ldrb	r2, [r2, #8]
 801a64a:	4610      	mov	r0, r2
 801a64c:	4798      	blx	r3
 801a64e:	4603      	mov	r3, r0
 801a650:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a652:	7bfb      	ldrb	r3, [r7, #15]
}
 801a654:	4618      	mov	r0, r3
 801a656:	3710      	adds	r7, #16
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	24000af4 	.word	0x24000af4

0801a660 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b084      	sub	sp, #16
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a66a:	2300      	movs	r3, #0
 801a66c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a66e:	79fb      	ldrb	r3, [r7, #7]
 801a670:	4a0e      	ldr	r2, [pc, #56]	@ (801a6ac <disk_initialize+0x4c>)
 801a672:	5cd3      	ldrb	r3, [r2, r3]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d114      	bne.n	801a6a2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a678:	79fb      	ldrb	r3, [r7, #7]
 801a67a:	4a0c      	ldr	r2, [pc, #48]	@ (801a6ac <disk_initialize+0x4c>)
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	4413      	add	r3, r2
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	79fa      	ldrb	r2, [r7, #7]
 801a686:	4909      	ldr	r1, [pc, #36]	@ (801a6ac <disk_initialize+0x4c>)
 801a688:	440a      	add	r2, r1
 801a68a:	7a12      	ldrb	r2, [r2, #8]
 801a68c:	4610      	mov	r0, r2
 801a68e:	4798      	blx	r3
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a694:	7bfb      	ldrb	r3, [r7, #15]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d103      	bne.n	801a6a2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a69a:	79fb      	ldrb	r3, [r7, #7]
 801a69c:	4a03      	ldr	r2, [pc, #12]	@ (801a6ac <disk_initialize+0x4c>)
 801a69e:	2101      	movs	r1, #1
 801a6a0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	3710      	adds	r7, #16
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	bd80      	pop	{r7, pc}
 801a6ac:	24000af4 	.word	0x24000af4

0801a6b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a6b0:	b590      	push	{r4, r7, lr}
 801a6b2:	b087      	sub	sp, #28
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	60b9      	str	r1, [r7, #8]
 801a6b8:	607a      	str	r2, [r7, #4]
 801a6ba:	603b      	str	r3, [r7, #0]
 801a6bc:	4603      	mov	r3, r0
 801a6be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a6c0:	7bfb      	ldrb	r3, [r7, #15]
 801a6c2:	4a0a      	ldr	r2, [pc, #40]	@ (801a6ec <disk_read+0x3c>)
 801a6c4:	009b      	lsls	r3, r3, #2
 801a6c6:	4413      	add	r3, r2
 801a6c8:	685b      	ldr	r3, [r3, #4]
 801a6ca:	689c      	ldr	r4, [r3, #8]
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
 801a6ce:	4a07      	ldr	r2, [pc, #28]	@ (801a6ec <disk_read+0x3c>)
 801a6d0:	4413      	add	r3, r2
 801a6d2:	7a18      	ldrb	r0, [r3, #8]
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	687a      	ldr	r2, [r7, #4]
 801a6d8:	68b9      	ldr	r1, [r7, #8]
 801a6da:	47a0      	blx	r4
 801a6dc:	4603      	mov	r3, r0
 801a6de:	75fb      	strb	r3, [r7, #23]
  return res;
 801a6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	371c      	adds	r7, #28
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd90      	pop	{r4, r7, pc}
 801a6ea:	bf00      	nop
 801a6ec:	24000af4 	.word	0x24000af4

0801a6f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a6f0:	b590      	push	{r4, r7, lr}
 801a6f2:	b087      	sub	sp, #28
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	60b9      	str	r1, [r7, #8]
 801a6f8:	607a      	str	r2, [r7, #4]
 801a6fa:	603b      	str	r3, [r7, #0]
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a700:	7bfb      	ldrb	r3, [r7, #15]
 801a702:	4a0a      	ldr	r2, [pc, #40]	@ (801a72c <disk_write+0x3c>)
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	4413      	add	r3, r2
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	68dc      	ldr	r4, [r3, #12]
 801a70c:	7bfb      	ldrb	r3, [r7, #15]
 801a70e:	4a07      	ldr	r2, [pc, #28]	@ (801a72c <disk_write+0x3c>)
 801a710:	4413      	add	r3, r2
 801a712:	7a18      	ldrb	r0, [r3, #8]
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	68b9      	ldr	r1, [r7, #8]
 801a71a:	47a0      	blx	r4
 801a71c:	4603      	mov	r3, r0
 801a71e:	75fb      	strb	r3, [r7, #23]
  return res;
 801a720:	7dfb      	ldrb	r3, [r7, #23]
}
 801a722:	4618      	mov	r0, r3
 801a724:	371c      	adds	r7, #28
 801a726:	46bd      	mov	sp, r7
 801a728:	bd90      	pop	{r4, r7, pc}
 801a72a:	bf00      	nop
 801a72c:	24000af4 	.word	0x24000af4

0801a730 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	4603      	mov	r3, r0
 801a738:	603a      	str	r2, [r7, #0]
 801a73a:	71fb      	strb	r3, [r7, #7]
 801a73c:	460b      	mov	r3, r1
 801a73e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a740:	79fb      	ldrb	r3, [r7, #7]
 801a742:	4a09      	ldr	r2, [pc, #36]	@ (801a768 <disk_ioctl+0x38>)
 801a744:	009b      	lsls	r3, r3, #2
 801a746:	4413      	add	r3, r2
 801a748:	685b      	ldr	r3, [r3, #4]
 801a74a:	691b      	ldr	r3, [r3, #16]
 801a74c:	79fa      	ldrb	r2, [r7, #7]
 801a74e:	4906      	ldr	r1, [pc, #24]	@ (801a768 <disk_ioctl+0x38>)
 801a750:	440a      	add	r2, r1
 801a752:	7a10      	ldrb	r0, [r2, #8]
 801a754:	79b9      	ldrb	r1, [r7, #6]
 801a756:	683a      	ldr	r2, [r7, #0]
 801a758:	4798      	blx	r3
 801a75a:	4603      	mov	r3, r0
 801a75c:	73fb      	strb	r3, [r7, #15]
  return res;
 801a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a760:	4618      	mov	r0, r3
 801a762:	3710      	adds	r7, #16
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}
 801a768:	24000af4 	.word	0x24000af4

0801a76c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a76c:	b480      	push	{r7}
 801a76e:	b085      	sub	sp, #20
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	3301      	adds	r3, #1
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a77c:	89fb      	ldrh	r3, [r7, #14]
 801a77e:	021b      	lsls	r3, r3, #8
 801a780:	b21a      	sxth	r2, r3
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	b21b      	sxth	r3, r3
 801a788:	4313      	orrs	r3, r2
 801a78a:	b21b      	sxth	r3, r3
 801a78c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a78e:	89fb      	ldrh	r3, [r7, #14]
}
 801a790:	4618      	mov	r0, r3
 801a792:	3714      	adds	r7, #20
 801a794:	46bd      	mov	sp, r7
 801a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a79a:	4770      	bx	lr

0801a79c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a79c:	b480      	push	{r7}
 801a79e:	b085      	sub	sp, #20
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	3303      	adds	r3, #3
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	021b      	lsls	r3, r3, #8
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	3202      	adds	r2, #2
 801a7b4:	7812      	ldrb	r2, [r2, #0]
 801a7b6:	4313      	orrs	r3, r2
 801a7b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	021b      	lsls	r3, r3, #8
 801a7be:	687a      	ldr	r2, [r7, #4]
 801a7c0:	3201      	adds	r2, #1
 801a7c2:	7812      	ldrb	r2, [r2, #0]
 801a7c4:	4313      	orrs	r3, r2
 801a7c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	021b      	lsls	r3, r3, #8
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	7812      	ldrb	r2, [r2, #0]
 801a7d0:	4313      	orrs	r3, r2
 801a7d2:	60fb      	str	r3, [r7, #12]
	return rv;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3714      	adds	r7, #20
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e0:	4770      	bx	lr

0801a7e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a7e2:	b480      	push	{r7}
 801a7e4:	b083      	sub	sp, #12
 801a7e6:	af00      	add	r7, sp, #0
 801a7e8:	6078      	str	r0, [r7, #4]
 801a7ea:	460b      	mov	r3, r1
 801a7ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	1c5a      	adds	r2, r3, #1
 801a7f2:	607a      	str	r2, [r7, #4]
 801a7f4:	887a      	ldrh	r2, [r7, #2]
 801a7f6:	b2d2      	uxtb	r2, r2
 801a7f8:	701a      	strb	r2, [r3, #0]
 801a7fa:	887b      	ldrh	r3, [r7, #2]
 801a7fc:	0a1b      	lsrs	r3, r3, #8
 801a7fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	1c5a      	adds	r2, r3, #1
 801a804:	607a      	str	r2, [r7, #4]
 801a806:	887a      	ldrh	r2, [r7, #2]
 801a808:	b2d2      	uxtb	r2, r2
 801a80a:	701a      	strb	r2, [r3, #0]
}
 801a80c:	bf00      	nop
 801a80e:	370c      	adds	r7, #12
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr

0801a818 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a818:	b480      	push	{r7}
 801a81a:	b083      	sub	sp, #12
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	1c5a      	adds	r2, r3, #1
 801a826:	607a      	str	r2, [r7, #4]
 801a828:	683a      	ldr	r2, [r7, #0]
 801a82a:	b2d2      	uxtb	r2, r2
 801a82c:	701a      	strb	r2, [r3, #0]
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	0a1b      	lsrs	r3, r3, #8
 801a832:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	1c5a      	adds	r2, r3, #1
 801a838:	607a      	str	r2, [r7, #4]
 801a83a:	683a      	ldr	r2, [r7, #0]
 801a83c:	b2d2      	uxtb	r2, r2
 801a83e:	701a      	strb	r2, [r3, #0]
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	0a1b      	lsrs	r3, r3, #8
 801a844:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	1c5a      	adds	r2, r3, #1
 801a84a:	607a      	str	r2, [r7, #4]
 801a84c:	683a      	ldr	r2, [r7, #0]
 801a84e:	b2d2      	uxtb	r2, r2
 801a850:	701a      	strb	r2, [r3, #0]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	0a1b      	lsrs	r3, r3, #8
 801a856:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	1c5a      	adds	r2, r3, #1
 801a85c:	607a      	str	r2, [r7, #4]
 801a85e:	683a      	ldr	r2, [r7, #0]
 801a860:	b2d2      	uxtb	r2, r2
 801a862:	701a      	strb	r2, [r3, #0]
}
 801a864:	bf00      	nop
 801a866:	370c      	adds	r7, #12
 801a868:	46bd      	mov	sp, r7
 801a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86e:	4770      	bx	lr

0801a870 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a870:	b480      	push	{r7}
 801a872:	b087      	sub	sp, #28
 801a874:	af00      	add	r7, sp, #0
 801a876:	60f8      	str	r0, [r7, #12]
 801a878:	60b9      	str	r1, [r7, #8]
 801a87a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d00d      	beq.n	801a8a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a88a:	693a      	ldr	r2, [r7, #16]
 801a88c:	1c53      	adds	r3, r2, #1
 801a88e:	613b      	str	r3, [r7, #16]
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	1c59      	adds	r1, r3, #1
 801a894:	6179      	str	r1, [r7, #20]
 801a896:	7812      	ldrb	r2, [r2, #0]
 801a898:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	3b01      	subs	r3, #1
 801a89e:	607b      	str	r3, [r7, #4]
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d1f1      	bne.n	801a88a <mem_cpy+0x1a>
	}
}
 801a8a6:	bf00      	nop
 801a8a8:	371c      	adds	r7, #28
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b0:	4770      	bx	lr

0801a8b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a8b2:	b480      	push	{r7}
 801a8b4:	b087      	sub	sp, #28
 801a8b6:	af00      	add	r7, sp, #0
 801a8b8:	60f8      	str	r0, [r7, #12]
 801a8ba:	60b9      	str	r1, [r7, #8]
 801a8bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	1c5a      	adds	r2, r3, #1
 801a8c6:	617a      	str	r2, [r7, #20]
 801a8c8:	68ba      	ldr	r2, [r7, #8]
 801a8ca:	b2d2      	uxtb	r2, r2
 801a8cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	3b01      	subs	r3, #1
 801a8d2:	607b      	str	r3, [r7, #4]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1f3      	bne.n	801a8c2 <mem_set+0x10>
}
 801a8da:	bf00      	nop
 801a8dc:	bf00      	nop
 801a8de:	371c      	adds	r7, #28
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e6:	4770      	bx	lr

0801a8e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a8e8:	b480      	push	{r7}
 801a8ea:	b089      	sub	sp, #36	@ 0x24
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	61fb      	str	r3, [r7, #28]
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a900:	69fb      	ldr	r3, [r7, #28]
 801a902:	1c5a      	adds	r2, r3, #1
 801a904:	61fa      	str	r2, [r7, #28]
 801a906:	781b      	ldrb	r3, [r3, #0]
 801a908:	4619      	mov	r1, r3
 801a90a:	69bb      	ldr	r3, [r7, #24]
 801a90c:	1c5a      	adds	r2, r3, #1
 801a90e:	61ba      	str	r2, [r7, #24]
 801a910:	781b      	ldrb	r3, [r3, #0]
 801a912:	1acb      	subs	r3, r1, r3
 801a914:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	3b01      	subs	r3, #1
 801a91a:	607b      	str	r3, [r7, #4]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d002      	beq.n	801a928 <mem_cmp+0x40>
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d0eb      	beq.n	801a900 <mem_cmp+0x18>

	return r;
 801a928:	697b      	ldr	r3, [r7, #20]
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3724      	adds	r7, #36	@ 0x24
 801a92e:	46bd      	mov	sp, r7
 801a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a934:	4770      	bx	lr

0801a936 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a936:	b480      	push	{r7}
 801a938:	b083      	sub	sp, #12
 801a93a:	af00      	add	r7, sp, #0
 801a93c:	6078      	str	r0, [r7, #4]
 801a93e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a940:	e002      	b.n	801a948 <chk_chr+0x12>
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	3301      	adds	r3, #1
 801a946:	607b      	str	r3, [r7, #4]
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	781b      	ldrb	r3, [r3, #0]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d005      	beq.n	801a95c <chk_chr+0x26>
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	461a      	mov	r2, r3
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	4293      	cmp	r3, r2
 801a95a:	d1f2      	bne.n	801a942 <chk_chr+0xc>
	return *str;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	781b      	ldrb	r3, [r3, #0]
}
 801a960:	4618      	mov	r0, r3
 801a962:	370c      	adds	r7, #12
 801a964:	46bd      	mov	sp, r7
 801a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96a:	4770      	bx	lr

0801a96c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a96c:	b480      	push	{r7}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a976:	2300      	movs	r3, #0
 801a978:	60bb      	str	r3, [r7, #8]
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	60fb      	str	r3, [r7, #12]
 801a97e:	e029      	b.n	801a9d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a980:	4a27      	ldr	r2, [pc, #156]	@ (801aa20 <chk_lock+0xb4>)
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	011b      	lsls	r3, r3, #4
 801a986:	4413      	add	r3, r2
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d01d      	beq.n	801a9ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a98e:	4a24      	ldr	r2, [pc, #144]	@ (801aa20 <chk_lock+0xb4>)
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	011b      	lsls	r3, r3, #4
 801a994:	4413      	add	r3, r2
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	429a      	cmp	r2, r3
 801a99e:	d116      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a9a0:	4a1f      	ldr	r2, [pc, #124]	@ (801aa20 <chk_lock+0xb4>)
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	011b      	lsls	r3, r3, #4
 801a9a6:	4413      	add	r3, r2
 801a9a8:	3304      	adds	r3, #4
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d10c      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a9b4:	4a1a      	ldr	r2, [pc, #104]	@ (801aa20 <chk_lock+0xb4>)
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	011b      	lsls	r3, r3, #4
 801a9ba:	4413      	add	r3, r2
 801a9bc:	3308      	adds	r3, #8
 801a9be:	681a      	ldr	r2, [r3, #0]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d102      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a9c8:	e007      	b.n	801a9da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	60fb      	str	r3, [r7, #12]
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2b01      	cmp	r3, #1
 801a9d8:	d9d2      	bls.n	801a980 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b02      	cmp	r3, #2
 801a9de:	d109      	bne.n	801a9f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d102      	bne.n	801a9ec <chk_lock+0x80>
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	2b02      	cmp	r3, #2
 801a9ea:	d101      	bne.n	801a9f0 <chk_lock+0x84>
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	e010      	b.n	801aa12 <chk_lock+0xa6>
 801a9f0:	2312      	movs	r3, #18
 801a9f2:	e00e      	b.n	801aa12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d108      	bne.n	801aa0c <chk_lock+0xa0>
 801a9fa:	4a09      	ldr	r2, [pc, #36]	@ (801aa20 <chk_lock+0xb4>)
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	011b      	lsls	r3, r3, #4
 801aa00:	4413      	add	r3, r2
 801aa02:	330c      	adds	r3, #12
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aa0a:	d101      	bne.n	801aa10 <chk_lock+0xa4>
 801aa0c:	2310      	movs	r3, #16
 801aa0e:	e000      	b.n	801aa12 <chk_lock+0xa6>
 801aa10:	2300      	movs	r3, #0
}
 801aa12:	4618      	mov	r0, r3
 801aa14:	3714      	adds	r7, #20
 801aa16:	46bd      	mov	sp, r7
 801aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1c:	4770      	bx	lr
 801aa1e:	bf00      	nop
 801aa20:	24000ad4 	.word	0x24000ad4

0801aa24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801aa24:	b480      	push	{r7}
 801aa26:	b083      	sub	sp, #12
 801aa28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	607b      	str	r3, [r7, #4]
 801aa2e:	e002      	b.n	801aa36 <enq_lock+0x12>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	3301      	adds	r3, #1
 801aa34:	607b      	str	r3, [r7, #4]
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d806      	bhi.n	801aa4a <enq_lock+0x26>
 801aa3c:	4a09      	ldr	r2, [pc, #36]	@ (801aa64 <enq_lock+0x40>)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	011b      	lsls	r3, r3, #4
 801aa42:	4413      	add	r3, r2
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d1f2      	bne.n	801aa30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2b02      	cmp	r3, #2
 801aa4e:	bf14      	ite	ne
 801aa50:	2301      	movne	r3, #1
 801aa52:	2300      	moveq	r3, #0
 801aa54:	b2db      	uxtb	r3, r3
}
 801aa56:	4618      	mov	r0, r3
 801aa58:	370c      	adds	r7, #12
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop
 801aa64:	24000ad4 	.word	0x24000ad4

0801aa68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801aa68:	b480      	push	{r7}
 801aa6a:	b085      	sub	sp, #20
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
 801aa70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aa72:	2300      	movs	r3, #0
 801aa74:	60fb      	str	r3, [r7, #12]
 801aa76:	e01f      	b.n	801aab8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801aa78:	4a41      	ldr	r2, [pc, #260]	@ (801ab80 <inc_lock+0x118>)
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	011b      	lsls	r3, r3, #4
 801aa7e:	4413      	add	r3, r2
 801aa80:	681a      	ldr	r2, [r3, #0]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	429a      	cmp	r2, r3
 801aa88:	d113      	bne.n	801aab2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801aa8a:	4a3d      	ldr	r2, [pc, #244]	@ (801ab80 <inc_lock+0x118>)
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	011b      	lsls	r3, r3, #4
 801aa90:	4413      	add	r3, r2
 801aa92:	3304      	adds	r3, #4
 801aa94:	681a      	ldr	r2, [r3, #0]
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	d109      	bne.n	801aab2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801aa9e:	4a38      	ldr	r2, [pc, #224]	@ (801ab80 <inc_lock+0x118>)
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	011b      	lsls	r3, r3, #4
 801aaa4:	4413      	add	r3, r2
 801aaa6:	3308      	adds	r3, #8
 801aaa8:	681a      	ldr	r2, [r3, #0]
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801aaae:	429a      	cmp	r2, r3
 801aab0:	d006      	beq.n	801aac0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	3301      	adds	r3, #1
 801aab6:	60fb      	str	r3, [r7, #12]
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	2b01      	cmp	r3, #1
 801aabc:	d9dc      	bls.n	801aa78 <inc_lock+0x10>
 801aabe:	e000      	b.n	801aac2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aac0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	2b02      	cmp	r3, #2
 801aac6:	d132      	bne.n	801ab2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aac8:	2300      	movs	r3, #0
 801aaca:	60fb      	str	r3, [r7, #12]
 801aacc:	e002      	b.n	801aad4 <inc_lock+0x6c>
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	3301      	adds	r3, #1
 801aad2:	60fb      	str	r3, [r7, #12]
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	2b01      	cmp	r3, #1
 801aad8:	d806      	bhi.n	801aae8 <inc_lock+0x80>
 801aada:	4a29      	ldr	r2, [pc, #164]	@ (801ab80 <inc_lock+0x118>)
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	011b      	lsls	r3, r3, #4
 801aae0:	4413      	add	r3, r2
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d1f2      	bne.n	801aace <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	2b02      	cmp	r3, #2
 801aaec:	d101      	bne.n	801aaf2 <inc_lock+0x8a>
 801aaee:	2300      	movs	r3, #0
 801aaf0:	e040      	b.n	801ab74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	4922      	ldr	r1, [pc, #136]	@ (801ab80 <inc_lock+0x118>)
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	011b      	lsls	r3, r3, #4
 801aafc:	440b      	add	r3, r1
 801aafe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	689a      	ldr	r2, [r3, #8]
 801ab04:	491e      	ldr	r1, [pc, #120]	@ (801ab80 <inc_lock+0x118>)
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	011b      	lsls	r3, r3, #4
 801ab0a:	440b      	add	r3, r1
 801ab0c:	3304      	adds	r3, #4
 801ab0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	695a      	ldr	r2, [r3, #20]
 801ab14:	491a      	ldr	r1, [pc, #104]	@ (801ab80 <inc_lock+0x118>)
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	011b      	lsls	r3, r3, #4
 801ab1a:	440b      	add	r3, r1
 801ab1c:	3308      	adds	r3, #8
 801ab1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ab20:	4a17      	ldr	r2, [pc, #92]	@ (801ab80 <inc_lock+0x118>)
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	011b      	lsls	r3, r3, #4
 801ab26:	4413      	add	r3, r2
 801ab28:	330c      	adds	r3, #12
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d009      	beq.n	801ab48 <inc_lock+0xe0>
 801ab34:	4a12      	ldr	r2, [pc, #72]	@ (801ab80 <inc_lock+0x118>)
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	011b      	lsls	r3, r3, #4
 801ab3a:	4413      	add	r3, r2
 801ab3c:	330c      	adds	r3, #12
 801ab3e:	881b      	ldrh	r3, [r3, #0]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d001      	beq.n	801ab48 <inc_lock+0xe0>
 801ab44:	2300      	movs	r3, #0
 801ab46:	e015      	b.n	801ab74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d108      	bne.n	801ab60 <inc_lock+0xf8>
 801ab4e:	4a0c      	ldr	r2, [pc, #48]	@ (801ab80 <inc_lock+0x118>)
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	011b      	lsls	r3, r3, #4
 801ab54:	4413      	add	r3, r2
 801ab56:	330c      	adds	r3, #12
 801ab58:	881b      	ldrh	r3, [r3, #0]
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	e001      	b.n	801ab64 <inc_lock+0xfc>
 801ab60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ab64:	4906      	ldr	r1, [pc, #24]	@ (801ab80 <inc_lock+0x118>)
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	011b      	lsls	r3, r3, #4
 801ab6a:	440b      	add	r3, r1
 801ab6c:	330c      	adds	r3, #12
 801ab6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	3301      	adds	r3, #1
}
 801ab74:	4618      	mov	r0, r3
 801ab76:	3714      	adds	r7, #20
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7e:	4770      	bx	lr
 801ab80:	24000ad4 	.word	0x24000ad4

0801ab84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ab84:	b480      	push	{r7}
 801ab86:	b085      	sub	sp, #20
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	3b01      	subs	r3, #1
 801ab90:	607b      	str	r3, [r7, #4]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d825      	bhi.n	801abe4 <dec_lock+0x60>
		n = Files[i].ctr;
 801ab98:	4a17      	ldr	r2, [pc, #92]	@ (801abf8 <dec_lock+0x74>)
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	011b      	lsls	r3, r3, #4
 801ab9e:	4413      	add	r3, r2
 801aba0:	330c      	adds	r3, #12
 801aba2:	881b      	ldrh	r3, [r3, #0]
 801aba4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801aba6:	89fb      	ldrh	r3, [r7, #14]
 801aba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801abac:	d101      	bne.n	801abb2 <dec_lock+0x2e>
 801abae:	2300      	movs	r3, #0
 801abb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801abb2:	89fb      	ldrh	r3, [r7, #14]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d002      	beq.n	801abbe <dec_lock+0x3a>
 801abb8:	89fb      	ldrh	r3, [r7, #14]
 801abba:	3b01      	subs	r3, #1
 801abbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801abbe:	4a0e      	ldr	r2, [pc, #56]	@ (801abf8 <dec_lock+0x74>)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	011b      	lsls	r3, r3, #4
 801abc4:	4413      	add	r3, r2
 801abc6:	330c      	adds	r3, #12
 801abc8:	89fa      	ldrh	r2, [r7, #14]
 801abca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801abcc:	89fb      	ldrh	r3, [r7, #14]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d105      	bne.n	801abde <dec_lock+0x5a>
 801abd2:	4a09      	ldr	r2, [pc, #36]	@ (801abf8 <dec_lock+0x74>)
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	011b      	lsls	r3, r3, #4
 801abd8:	4413      	add	r3, r2
 801abda:	2200      	movs	r2, #0
 801abdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801abde:	2300      	movs	r3, #0
 801abe0:	737b      	strb	r3, [r7, #13]
 801abe2:	e001      	b.n	801abe8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801abe4:	2302      	movs	r3, #2
 801abe6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801abe8:	7b7b      	ldrb	r3, [r7, #13]
}
 801abea:	4618      	mov	r0, r3
 801abec:	3714      	adds	r7, #20
 801abee:	46bd      	mov	sp, r7
 801abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	24000ad4 	.word	0x24000ad4

0801abfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b085      	sub	sp, #20
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ac04:	2300      	movs	r3, #0
 801ac06:	60fb      	str	r3, [r7, #12]
 801ac08:	e010      	b.n	801ac2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ac0a:	4a0d      	ldr	r2, [pc, #52]	@ (801ac40 <clear_lock+0x44>)
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	011b      	lsls	r3, r3, #4
 801ac10:	4413      	add	r3, r2
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	687a      	ldr	r2, [r7, #4]
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d105      	bne.n	801ac26 <clear_lock+0x2a>
 801ac1a:	4a09      	ldr	r2, [pc, #36]	@ (801ac40 <clear_lock+0x44>)
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	011b      	lsls	r3, r3, #4
 801ac20:	4413      	add	r3, r2
 801ac22:	2200      	movs	r2, #0
 801ac24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	3301      	adds	r3, #1
 801ac2a:	60fb      	str	r3, [r7, #12]
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	2b01      	cmp	r3, #1
 801ac30:	d9eb      	bls.n	801ac0a <clear_lock+0xe>
	}
}
 801ac32:	bf00      	nop
 801ac34:	bf00      	nop
 801ac36:	3714      	adds	r7, #20
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3e:	4770      	bx	lr
 801ac40:	24000ad4 	.word	0x24000ad4

0801ac44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b086      	sub	sp, #24
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	78db      	ldrb	r3, [r3, #3]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d034      	beq.n	801acc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	7858      	ldrb	r0, [r3, #1]
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ac68:	2301      	movs	r3, #1
 801ac6a:	697a      	ldr	r2, [r7, #20]
 801ac6c:	f7ff fd40 	bl	801a6f0 <disk_write>
 801ac70:	4603      	mov	r3, r0
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d002      	beq.n	801ac7c <sync_window+0x38>
			res = FR_DISK_ERR;
 801ac76:	2301      	movs	r3, #1
 801ac78:	73fb      	strb	r3, [r7, #15]
 801ac7a:	e022      	b.n	801acc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	6a1b      	ldr	r3, [r3, #32]
 801ac86:	697a      	ldr	r2, [r7, #20]
 801ac88:	1ad2      	subs	r2, r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	699b      	ldr	r3, [r3, #24]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d217      	bcs.n	801acc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	789b      	ldrb	r3, [r3, #2]
 801ac96:	613b      	str	r3, [r7, #16]
 801ac98:	e010      	b.n	801acbc <sync_window+0x78>
					wsect += fs->fsize;
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	699b      	ldr	r3, [r3, #24]
 801ac9e:	697a      	ldr	r2, [r7, #20]
 801aca0:	4413      	add	r3, r2
 801aca2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	7858      	ldrb	r0, [r3, #1]
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801acae:	2301      	movs	r3, #1
 801acb0:	697a      	ldr	r2, [r7, #20]
 801acb2:	f7ff fd1d 	bl	801a6f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801acb6:	693b      	ldr	r3, [r7, #16]
 801acb8:	3b01      	subs	r3, #1
 801acba:	613b      	str	r3, [r7, #16]
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	d8eb      	bhi.n	801ac9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 801acc4:	4618      	mov	r0, r3
 801acc6:	3718      	adds	r7, #24
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}

0801accc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b084      	sub	sp, #16
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
 801acd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801acd6:	2300      	movs	r3, #0
 801acd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acde:	683a      	ldr	r2, [r7, #0]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d01b      	beq.n	801ad1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ace4:	6878      	ldr	r0, [r7, #4]
 801ace6:	f7ff ffad 	bl	801ac44 <sync_window>
 801acea:	4603      	mov	r3, r0
 801acec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801acee:	7bfb      	ldrb	r3, [r7, #15]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d113      	bne.n	801ad1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	7858      	ldrb	r0, [r3, #1]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801acfe:	2301      	movs	r3, #1
 801ad00:	683a      	ldr	r2, [r7, #0]
 801ad02:	f7ff fcd5 	bl	801a6b0 <disk_read>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d004      	beq.n	801ad16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ad12:	2301      	movs	r3, #1
 801ad14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	683a      	ldr	r2, [r7, #0]
 801ad1a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
	...

0801ad28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b084      	sub	sp, #16
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	f7ff ff87 	bl	801ac44 <sync_window>
 801ad36:	4603      	mov	r3, r0
 801ad38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ad3a:	7bfb      	ldrb	r3, [r7, #15]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d158      	bne.n	801adf2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	781b      	ldrb	r3, [r3, #0]
 801ad44:	2b03      	cmp	r3, #3
 801ad46:	d148      	bne.n	801adda <sync_fs+0xb2>
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	791b      	ldrb	r3, [r3, #4]
 801ad4c:	2b01      	cmp	r3, #1
 801ad4e:	d144      	bne.n	801adda <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	3330      	adds	r3, #48	@ 0x30
 801ad54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ad58:	2100      	movs	r1, #0
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f7ff fda9 	bl	801a8b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	3330      	adds	r3, #48	@ 0x30
 801ad64:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ad68:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f7ff fd38 	bl	801a7e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	3330      	adds	r3, #48	@ 0x30
 801ad76:	4921      	ldr	r1, [pc, #132]	@ (801adfc <sync_fs+0xd4>)
 801ad78:	4618      	mov	r0, r3
 801ad7a:	f7ff fd4d 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	3330      	adds	r3, #48	@ 0x30
 801ad82:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801ad86:	491e      	ldr	r1, [pc, #120]	@ (801ae00 <sync_fs+0xd8>)
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f7ff fd45 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	3330      	adds	r3, #48	@ 0x30
 801ad92:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	691b      	ldr	r3, [r3, #16]
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	4610      	mov	r0, r2
 801ad9e:	f7ff fd3b 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	3330      	adds	r3, #48	@ 0x30
 801ada6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	68db      	ldr	r3, [r3, #12]
 801adae:	4619      	mov	r1, r3
 801adb0:	4610      	mov	r0, r2
 801adb2:	f7ff fd31 	bl	801a818 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	69db      	ldr	r3, [r3, #28]
 801adba:	1c5a      	adds	r2, r3, #1
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	7858      	ldrb	r0, [r3, #1]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801adce:	2301      	movs	r3, #1
 801add0:	f7ff fc8e 	bl	801a6f0 <disk_write>
			fs->fsi_flag = 0;
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2200      	movs	r2, #0
 801add8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	785b      	ldrb	r3, [r3, #1]
 801adde:	2200      	movs	r2, #0
 801ade0:	2100      	movs	r1, #0
 801ade2:	4618      	mov	r0, r3
 801ade4:	f7ff fca4 	bl	801a730 <disk_ioctl>
 801ade8:	4603      	mov	r3, r0
 801adea:	2b00      	cmp	r3, #0
 801adec:	d001      	beq.n	801adf2 <sync_fs+0xca>
 801adee:	2301      	movs	r3, #1
 801adf0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3710      	adds	r7, #16
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}
 801adfc:	41615252 	.word	0x41615252
 801ae00:	61417272 	.word	0x61417272

0801ae04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801ae04:	b480      	push	{r7}
 801ae06:	b083      	sub	sp, #12
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
 801ae0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	3b02      	subs	r3, #2
 801ae12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	695b      	ldr	r3, [r3, #20]
 801ae18:	3b02      	subs	r3, #2
 801ae1a:	683a      	ldr	r2, [r7, #0]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d301      	bcc.n	801ae24 <clust2sect+0x20>
 801ae20:	2300      	movs	r3, #0
 801ae22:	e008      	b.n	801ae36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	895b      	ldrh	r3, [r3, #10]
 801ae28:	461a      	mov	r2, r3
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	fb03 f202 	mul.w	r2, r3, r2
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae34:	4413      	add	r3, r2
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	370c      	adds	r7, #12
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae40:	4770      	bx	lr

0801ae42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ae42:	b580      	push	{r7, lr}
 801ae44:	b086      	sub	sp, #24
 801ae46:	af00      	add	r7, sp, #0
 801ae48:	6078      	str	r0, [r7, #4]
 801ae4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	2b01      	cmp	r3, #1
 801ae56:	d904      	bls.n	801ae62 <get_fat+0x20>
 801ae58:	693b      	ldr	r3, [r7, #16]
 801ae5a:	695b      	ldr	r3, [r3, #20]
 801ae5c:	683a      	ldr	r2, [r7, #0]
 801ae5e:	429a      	cmp	r2, r3
 801ae60:	d302      	bcc.n	801ae68 <get_fat+0x26>
		val = 1;	/* Internal error */
 801ae62:	2301      	movs	r3, #1
 801ae64:	617b      	str	r3, [r7, #20]
 801ae66:	e08e      	b.n	801af86 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801ae68:	f04f 33ff 	mov.w	r3, #4294967295
 801ae6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801ae6e:	693b      	ldr	r3, [r7, #16]
 801ae70:	781b      	ldrb	r3, [r3, #0]
 801ae72:	2b03      	cmp	r3, #3
 801ae74:	d061      	beq.n	801af3a <get_fat+0xf8>
 801ae76:	2b03      	cmp	r3, #3
 801ae78:	dc7b      	bgt.n	801af72 <get_fat+0x130>
 801ae7a:	2b01      	cmp	r3, #1
 801ae7c:	d002      	beq.n	801ae84 <get_fat+0x42>
 801ae7e:	2b02      	cmp	r3, #2
 801ae80:	d041      	beq.n	801af06 <get_fat+0xc4>
 801ae82:	e076      	b.n	801af72 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	60fb      	str	r3, [r7, #12]
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	085b      	lsrs	r3, r3, #1
 801ae8c:	68fa      	ldr	r2, [r7, #12]
 801ae8e:	4413      	add	r3, r2
 801ae90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ae92:	693b      	ldr	r3, [r7, #16]
 801ae94:	6a1a      	ldr	r2, [r3, #32]
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	0a5b      	lsrs	r3, r3, #9
 801ae9a:	4413      	add	r3, r2
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	6938      	ldr	r0, [r7, #16]
 801aea0:	f7ff ff14 	bl	801accc <move_window>
 801aea4:	4603      	mov	r3, r0
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d166      	bne.n	801af78 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	1c5a      	adds	r2, r3, #1
 801aeae:	60fa      	str	r2, [r7, #12]
 801aeb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aeb4:	693a      	ldr	r2, [r7, #16]
 801aeb6:	4413      	add	r3, r2
 801aeb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aebc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801aebe:	693b      	ldr	r3, [r7, #16]
 801aec0:	6a1a      	ldr	r2, [r3, #32]
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	0a5b      	lsrs	r3, r3, #9
 801aec6:	4413      	add	r3, r2
 801aec8:	4619      	mov	r1, r3
 801aeca:	6938      	ldr	r0, [r7, #16]
 801aecc:	f7ff fefe 	bl	801accc <move_window>
 801aed0:	4603      	mov	r3, r0
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d152      	bne.n	801af7c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aedc:	693a      	ldr	r2, [r7, #16]
 801aede:	4413      	add	r3, r2
 801aee0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aee4:	021b      	lsls	r3, r3, #8
 801aee6:	68ba      	ldr	r2, [r7, #8]
 801aee8:	4313      	orrs	r3, r2
 801aeea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801aeec:	683b      	ldr	r3, [r7, #0]
 801aeee:	f003 0301 	and.w	r3, r3, #1
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d002      	beq.n	801aefc <get_fat+0xba>
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	091b      	lsrs	r3, r3, #4
 801aefa:	e002      	b.n	801af02 <get_fat+0xc0>
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801af02:	617b      	str	r3, [r7, #20]
			break;
 801af04:	e03f      	b.n	801af86 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801af06:	693b      	ldr	r3, [r7, #16]
 801af08:	6a1a      	ldr	r2, [r3, #32]
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	0a1b      	lsrs	r3, r3, #8
 801af0e:	4413      	add	r3, r2
 801af10:	4619      	mov	r1, r3
 801af12:	6938      	ldr	r0, [r7, #16]
 801af14:	f7ff feda 	bl	801accc <move_window>
 801af18:	4603      	mov	r3, r0
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d130      	bne.n	801af80 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801af1e:	693b      	ldr	r3, [r7, #16]
 801af20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	005b      	lsls	r3, r3, #1
 801af28:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801af2c:	4413      	add	r3, r2
 801af2e:	4618      	mov	r0, r3
 801af30:	f7ff fc1c 	bl	801a76c <ld_word>
 801af34:	4603      	mov	r3, r0
 801af36:	617b      	str	r3, [r7, #20]
			break;
 801af38:	e025      	b.n	801af86 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801af3a:	693b      	ldr	r3, [r7, #16]
 801af3c:	6a1a      	ldr	r2, [r3, #32]
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	09db      	lsrs	r3, r3, #7
 801af42:	4413      	add	r3, r2
 801af44:	4619      	mov	r1, r3
 801af46:	6938      	ldr	r0, [r7, #16]
 801af48:	f7ff fec0 	bl	801accc <move_window>
 801af4c:	4603      	mov	r3, r0
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d118      	bne.n	801af84 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801af52:	693b      	ldr	r3, [r7, #16]
 801af54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801af58:	683b      	ldr	r3, [r7, #0]
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801af60:	4413      	add	r3, r2
 801af62:	4618      	mov	r0, r3
 801af64:	f7ff fc1a 	bl	801a79c <ld_dword>
 801af68:	4603      	mov	r3, r0
 801af6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801af6e:	617b      	str	r3, [r7, #20]
			break;
 801af70:	e009      	b.n	801af86 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801af72:	2301      	movs	r3, #1
 801af74:	617b      	str	r3, [r7, #20]
 801af76:	e006      	b.n	801af86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af78:	bf00      	nop
 801af7a:	e004      	b.n	801af86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af7c:	bf00      	nop
 801af7e:	e002      	b.n	801af86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801af80:	bf00      	nop
 801af82:	e000      	b.n	801af86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801af84:	bf00      	nop
		}
	}

	return val;
 801af86:	697b      	ldr	r3, [r7, #20]
}
 801af88:	4618      	mov	r0, r3
 801af8a:	3718      	adds	r7, #24
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}

0801af90 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801af90:	b590      	push	{r4, r7, lr}
 801af92:	b089      	sub	sp, #36	@ 0x24
 801af94:	af00      	add	r7, sp, #0
 801af96:	60f8      	str	r0, [r7, #12]
 801af98:	60b9      	str	r1, [r7, #8]
 801af9a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801af9c:	2302      	movs	r3, #2
 801af9e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	2b01      	cmp	r3, #1
 801afa4:	f240 80d9 	bls.w	801b15a <put_fat+0x1ca>
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	695b      	ldr	r3, [r3, #20]
 801afac:	68ba      	ldr	r2, [r7, #8]
 801afae:	429a      	cmp	r2, r3
 801afb0:	f080 80d3 	bcs.w	801b15a <put_fat+0x1ca>
		switch (fs->fs_type) {
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	2b03      	cmp	r3, #3
 801afba:	f000 8096 	beq.w	801b0ea <put_fat+0x15a>
 801afbe:	2b03      	cmp	r3, #3
 801afc0:	f300 80cb 	bgt.w	801b15a <put_fat+0x1ca>
 801afc4:	2b01      	cmp	r3, #1
 801afc6:	d002      	beq.n	801afce <put_fat+0x3e>
 801afc8:	2b02      	cmp	r3, #2
 801afca:	d06e      	beq.n	801b0aa <put_fat+0x11a>
 801afcc:	e0c5      	b.n	801b15a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	61bb      	str	r3, [r7, #24]
 801afd2:	69bb      	ldr	r3, [r7, #24]
 801afd4:	085b      	lsrs	r3, r3, #1
 801afd6:	69ba      	ldr	r2, [r7, #24]
 801afd8:	4413      	add	r3, r2
 801afda:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	6a1a      	ldr	r2, [r3, #32]
 801afe0:	69bb      	ldr	r3, [r7, #24]
 801afe2:	0a5b      	lsrs	r3, r3, #9
 801afe4:	4413      	add	r3, r2
 801afe6:	4619      	mov	r1, r3
 801afe8:	68f8      	ldr	r0, [r7, #12]
 801afea:	f7ff fe6f 	bl	801accc <move_window>
 801afee:	4603      	mov	r3, r0
 801aff0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aff2:	7ffb      	ldrb	r3, [r7, #31]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	f040 80a9 	bne.w	801b14c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b000:	69bb      	ldr	r3, [r7, #24]
 801b002:	1c59      	adds	r1, r3, #1
 801b004:	61b9      	str	r1, [r7, #24]
 801b006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b00a:	4413      	add	r3, r2
 801b00c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	f003 0301 	and.w	r3, r3, #1
 801b014:	2b00      	cmp	r3, #0
 801b016:	d00d      	beq.n	801b034 <put_fat+0xa4>
 801b018:	697b      	ldr	r3, [r7, #20]
 801b01a:	781b      	ldrb	r3, [r3, #0]
 801b01c:	b25b      	sxtb	r3, r3
 801b01e:	f003 030f 	and.w	r3, r3, #15
 801b022:	b25a      	sxtb	r2, r3
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	b2db      	uxtb	r3, r3
 801b028:	011b      	lsls	r3, r3, #4
 801b02a:	b25b      	sxtb	r3, r3
 801b02c:	4313      	orrs	r3, r2
 801b02e:	b25b      	sxtb	r3, r3
 801b030:	b2db      	uxtb	r3, r3
 801b032:	e001      	b.n	801b038 <put_fat+0xa8>
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	b2db      	uxtb	r3, r3
 801b038:	697a      	ldr	r2, [r7, #20]
 801b03a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	2201      	movs	r2, #1
 801b040:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	6a1a      	ldr	r2, [r3, #32]
 801b046:	69bb      	ldr	r3, [r7, #24]
 801b048:	0a5b      	lsrs	r3, r3, #9
 801b04a:	4413      	add	r3, r2
 801b04c:	4619      	mov	r1, r3
 801b04e:	68f8      	ldr	r0, [r7, #12]
 801b050:	f7ff fe3c 	bl	801accc <move_window>
 801b054:	4603      	mov	r3, r0
 801b056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b058:	7ffb      	ldrb	r3, [r7, #31]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d178      	bne.n	801b150 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b064:	69bb      	ldr	r3, [r7, #24]
 801b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b06a:	4413      	add	r3, r2
 801b06c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b06e:	68bb      	ldr	r3, [r7, #8]
 801b070:	f003 0301 	and.w	r3, r3, #1
 801b074:	2b00      	cmp	r3, #0
 801b076:	d003      	beq.n	801b080 <put_fat+0xf0>
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	091b      	lsrs	r3, r3, #4
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	e00e      	b.n	801b09e <put_fat+0x10e>
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	781b      	ldrb	r3, [r3, #0]
 801b084:	b25b      	sxtb	r3, r3
 801b086:	f023 030f 	bic.w	r3, r3, #15
 801b08a:	b25a      	sxtb	r2, r3
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	0a1b      	lsrs	r3, r3, #8
 801b090:	b25b      	sxtb	r3, r3
 801b092:	f003 030f 	and.w	r3, r3, #15
 801b096:	b25b      	sxtb	r3, r3
 801b098:	4313      	orrs	r3, r2
 801b09a:	b25b      	sxtb	r3, r3
 801b09c:	b2db      	uxtb	r3, r3
 801b09e:	697a      	ldr	r2, [r7, #20]
 801b0a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	2201      	movs	r2, #1
 801b0a6:	70da      	strb	r2, [r3, #3]
			break;
 801b0a8:	e057      	b.n	801b15a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	6a1a      	ldr	r2, [r3, #32]
 801b0ae:	68bb      	ldr	r3, [r7, #8]
 801b0b0:	0a1b      	lsrs	r3, r3, #8
 801b0b2:	4413      	add	r3, r2
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	68f8      	ldr	r0, [r7, #12]
 801b0b8:	f7ff fe08 	bl	801accc <move_window>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b0c0:	7ffb      	ldrb	r3, [r7, #31]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d146      	bne.n	801b154 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	005b      	lsls	r3, r3, #1
 801b0d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b0d4:	4413      	add	r3, r2
 801b0d6:	687a      	ldr	r2, [r7, #4]
 801b0d8:	b292      	uxth	r2, r2
 801b0da:	4611      	mov	r1, r2
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7ff fb80 	bl	801a7e2 <st_word>
			fs->wflag = 1;
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	2201      	movs	r2, #1
 801b0e6:	70da      	strb	r2, [r3, #3]
			break;
 801b0e8:	e037      	b.n	801b15a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	6a1a      	ldr	r2, [r3, #32]
 801b0ee:	68bb      	ldr	r3, [r7, #8]
 801b0f0:	09db      	lsrs	r3, r3, #7
 801b0f2:	4413      	add	r3, r2
 801b0f4:	4619      	mov	r1, r3
 801b0f6:	68f8      	ldr	r0, [r7, #12]
 801b0f8:	f7ff fde8 	bl	801accc <move_window>
 801b0fc:	4603      	mov	r3, r0
 801b0fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b100:	7ffb      	ldrb	r3, [r7, #31]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d128      	bne.n	801b158 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b11a:	4413      	add	r3, r2
 801b11c:	4618      	mov	r0, r3
 801b11e:	f7ff fb3d 	bl	801a79c <ld_dword>
 801b122:	4603      	mov	r3, r0
 801b124:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b128:	4323      	orrs	r3, r4
 801b12a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	009b      	lsls	r3, r3, #2
 801b136:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b13a:	4413      	add	r3, r2
 801b13c:	6879      	ldr	r1, [r7, #4]
 801b13e:	4618      	mov	r0, r3
 801b140:	f7ff fb6a 	bl	801a818 <st_dword>
			fs->wflag = 1;
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	2201      	movs	r2, #1
 801b148:	70da      	strb	r2, [r3, #3]
			break;
 801b14a:	e006      	b.n	801b15a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b14c:	bf00      	nop
 801b14e:	e004      	b.n	801b15a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b150:	bf00      	nop
 801b152:	e002      	b.n	801b15a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b154:	bf00      	nop
 801b156:	e000      	b.n	801b15a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b158:	bf00      	nop
		}
	}
	return res;
 801b15a:	7ffb      	ldrb	r3, [r7, #31]
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3724      	adds	r7, #36	@ 0x24
 801b160:	46bd      	mov	sp, r7
 801b162:	bd90      	pop	{r4, r7, pc}

0801b164 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b088      	sub	sp, #32
 801b168:	af00      	add	r7, sp, #0
 801b16a:	60f8      	str	r0, [r7, #12]
 801b16c:	60b9      	str	r1, [r7, #8]
 801b16e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b170:	2300      	movs	r3, #0
 801b172:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	2b01      	cmp	r3, #1
 801b17e:	d904      	bls.n	801b18a <remove_chain+0x26>
 801b180:	69bb      	ldr	r3, [r7, #24]
 801b182:	695b      	ldr	r3, [r3, #20]
 801b184:	68ba      	ldr	r2, [r7, #8]
 801b186:	429a      	cmp	r2, r3
 801b188:	d301      	bcc.n	801b18e <remove_chain+0x2a>
 801b18a:	2302      	movs	r3, #2
 801b18c:	e04b      	b.n	801b226 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d00c      	beq.n	801b1ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b194:	f04f 32ff 	mov.w	r2, #4294967295
 801b198:	6879      	ldr	r1, [r7, #4]
 801b19a:	69b8      	ldr	r0, [r7, #24]
 801b19c:	f7ff fef8 	bl	801af90 <put_fat>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b1a4:	7ffb      	ldrb	r3, [r7, #31]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d001      	beq.n	801b1ae <remove_chain+0x4a>
 801b1aa:	7ffb      	ldrb	r3, [r7, #31]
 801b1ac:	e03b      	b.n	801b226 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b1ae:	68b9      	ldr	r1, [r7, #8]
 801b1b0:	68f8      	ldr	r0, [r7, #12]
 801b1b2:	f7ff fe46 	bl	801ae42 <get_fat>
 801b1b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b1b8:	697b      	ldr	r3, [r7, #20]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d031      	beq.n	801b222 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	2b01      	cmp	r3, #1
 801b1c2:	d101      	bne.n	801b1c8 <remove_chain+0x64>
 801b1c4:	2302      	movs	r3, #2
 801b1c6:	e02e      	b.n	801b226 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b1c8:	697b      	ldr	r3, [r7, #20]
 801b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1ce:	d101      	bne.n	801b1d4 <remove_chain+0x70>
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	e028      	b.n	801b226 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	68b9      	ldr	r1, [r7, #8]
 801b1d8:	69b8      	ldr	r0, [r7, #24]
 801b1da:	f7ff fed9 	bl	801af90 <put_fat>
 801b1de:	4603      	mov	r3, r0
 801b1e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b1e2:	7ffb      	ldrb	r3, [r7, #31]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d001      	beq.n	801b1ec <remove_chain+0x88>
 801b1e8:	7ffb      	ldrb	r3, [r7, #31]
 801b1ea:	e01c      	b.n	801b226 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b1ec:	69bb      	ldr	r3, [r7, #24]
 801b1ee:	691a      	ldr	r2, [r3, #16]
 801b1f0:	69bb      	ldr	r3, [r7, #24]
 801b1f2:	695b      	ldr	r3, [r3, #20]
 801b1f4:	3b02      	subs	r3, #2
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d20b      	bcs.n	801b212 <remove_chain+0xae>
			fs->free_clst++;
 801b1fa:	69bb      	ldr	r3, [r7, #24]
 801b1fc:	691b      	ldr	r3, [r3, #16]
 801b1fe:	1c5a      	adds	r2, r3, #1
 801b200:	69bb      	ldr	r3, [r7, #24]
 801b202:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801b204:	69bb      	ldr	r3, [r7, #24]
 801b206:	791b      	ldrb	r3, [r3, #4]
 801b208:	f043 0301 	orr.w	r3, r3, #1
 801b20c:	b2da      	uxtb	r2, r3
 801b20e:	69bb      	ldr	r3, [r7, #24]
 801b210:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b212:	697b      	ldr	r3, [r7, #20]
 801b214:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b216:	69bb      	ldr	r3, [r7, #24]
 801b218:	695b      	ldr	r3, [r3, #20]
 801b21a:	68ba      	ldr	r2, [r7, #8]
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d3c6      	bcc.n	801b1ae <remove_chain+0x4a>
 801b220:	e000      	b.n	801b224 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b222:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b224:	2300      	movs	r3, #0
}
 801b226:	4618      	mov	r0, r3
 801b228:	3720      	adds	r7, #32
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}

0801b22e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b22e:	b580      	push	{r7, lr}
 801b230:	b088      	sub	sp, #32
 801b232:	af00      	add	r7, sp, #0
 801b234:	6078      	str	r0, [r7, #4]
 801b236:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b23e:	683b      	ldr	r3, [r7, #0]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d10d      	bne.n	801b260 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b244:	693b      	ldr	r3, [r7, #16]
 801b246:	68db      	ldr	r3, [r3, #12]
 801b248:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b24a:	69bb      	ldr	r3, [r7, #24]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d004      	beq.n	801b25a <create_chain+0x2c>
 801b250:	693b      	ldr	r3, [r7, #16]
 801b252:	695b      	ldr	r3, [r3, #20]
 801b254:	69ba      	ldr	r2, [r7, #24]
 801b256:	429a      	cmp	r2, r3
 801b258:	d31b      	bcc.n	801b292 <create_chain+0x64>
 801b25a:	2301      	movs	r3, #1
 801b25c:	61bb      	str	r3, [r7, #24]
 801b25e:	e018      	b.n	801b292 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b260:	6839      	ldr	r1, [r7, #0]
 801b262:	6878      	ldr	r0, [r7, #4]
 801b264:	f7ff fded 	bl	801ae42 <get_fat>
 801b268:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	2b01      	cmp	r3, #1
 801b26e:	d801      	bhi.n	801b274 <create_chain+0x46>
 801b270:	2301      	movs	r3, #1
 801b272:	e070      	b.n	801b356 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b27a:	d101      	bne.n	801b280 <create_chain+0x52>
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	e06a      	b.n	801b356 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b280:	693b      	ldr	r3, [r7, #16]
 801b282:	695b      	ldr	r3, [r3, #20]
 801b284:	68fa      	ldr	r2, [r7, #12]
 801b286:	429a      	cmp	r2, r3
 801b288:	d201      	bcs.n	801b28e <create_chain+0x60>
 801b28a:	68fb      	ldr	r3, [r7, #12]
 801b28c:	e063      	b.n	801b356 <create_chain+0x128>
		scl = clst;
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b292:	69bb      	ldr	r3, [r7, #24]
 801b294:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	3301      	adds	r3, #1
 801b29a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b29c:	693b      	ldr	r3, [r7, #16]
 801b29e:	695b      	ldr	r3, [r3, #20]
 801b2a0:	69fa      	ldr	r2, [r7, #28]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d307      	bcc.n	801b2b6 <create_chain+0x88>
				ncl = 2;
 801b2a6:	2302      	movs	r3, #2
 801b2a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b2aa:	69fa      	ldr	r2, [r7, #28]
 801b2ac:	69bb      	ldr	r3, [r7, #24]
 801b2ae:	429a      	cmp	r2, r3
 801b2b0:	d901      	bls.n	801b2b6 <create_chain+0x88>
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	e04f      	b.n	801b356 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b2b6:	69f9      	ldr	r1, [r7, #28]
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	f7ff fdc2 	bl	801ae42 <get_fat>
 801b2be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d00e      	beq.n	801b2e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	2b01      	cmp	r3, #1
 801b2ca:	d003      	beq.n	801b2d4 <create_chain+0xa6>
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2d2:	d101      	bne.n	801b2d8 <create_chain+0xaa>
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	e03e      	b.n	801b356 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b2d8:	69fa      	ldr	r2, [r7, #28]
 801b2da:	69bb      	ldr	r3, [r7, #24]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d1da      	bne.n	801b296 <create_chain+0x68>
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	e038      	b.n	801b356 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b2e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b2e6:	f04f 32ff 	mov.w	r2, #4294967295
 801b2ea:	69f9      	ldr	r1, [r7, #28]
 801b2ec:	6938      	ldr	r0, [r7, #16]
 801b2ee:	f7ff fe4f 	bl	801af90 <put_fat>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b2f6:	7dfb      	ldrb	r3, [r7, #23]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d109      	bne.n	801b310 <create_chain+0xe2>
 801b2fc:	683b      	ldr	r3, [r7, #0]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d006      	beq.n	801b310 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b302:	69fa      	ldr	r2, [r7, #28]
 801b304:	6839      	ldr	r1, [r7, #0]
 801b306:	6938      	ldr	r0, [r7, #16]
 801b308:	f7ff fe42 	bl	801af90 <put_fat>
 801b30c:	4603      	mov	r3, r0
 801b30e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b310:	7dfb      	ldrb	r3, [r7, #23]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d116      	bne.n	801b344 <create_chain+0x116>
		fs->last_clst = ncl;
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	69fa      	ldr	r2, [r7, #28]
 801b31a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	691a      	ldr	r2, [r3, #16]
 801b320:	693b      	ldr	r3, [r7, #16]
 801b322:	695b      	ldr	r3, [r3, #20]
 801b324:	3b02      	subs	r3, #2
 801b326:	429a      	cmp	r2, r3
 801b328:	d804      	bhi.n	801b334 <create_chain+0x106>
 801b32a:	693b      	ldr	r3, [r7, #16]
 801b32c:	691b      	ldr	r3, [r3, #16]
 801b32e:	1e5a      	subs	r2, r3, #1
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801b334:	693b      	ldr	r3, [r7, #16]
 801b336:	791b      	ldrb	r3, [r3, #4]
 801b338:	f043 0301 	orr.w	r3, r3, #1
 801b33c:	b2da      	uxtb	r2, r3
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	711a      	strb	r2, [r3, #4]
 801b342:	e007      	b.n	801b354 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b344:	7dfb      	ldrb	r3, [r7, #23]
 801b346:	2b01      	cmp	r3, #1
 801b348:	d102      	bne.n	801b350 <create_chain+0x122>
 801b34a:	f04f 33ff 	mov.w	r3, #4294967295
 801b34e:	e000      	b.n	801b352 <create_chain+0x124>
 801b350:	2301      	movs	r3, #1
 801b352:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b354:	69fb      	ldr	r3, [r7, #28]
}
 801b356:	4618      	mov	r0, r3
 801b358:	3720      	adds	r7, #32
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}

0801b35e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b35e:	b480      	push	{r7}
 801b360:	b087      	sub	sp, #28
 801b362:	af00      	add	r7, sp, #0
 801b364:	6078      	str	r0, [r7, #4]
 801b366:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b372:	3304      	adds	r3, #4
 801b374:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	0a5b      	lsrs	r3, r3, #9
 801b37a:	68fa      	ldr	r2, [r7, #12]
 801b37c:	8952      	ldrh	r2, [r2, #10]
 801b37e:	fbb3 f3f2 	udiv	r3, r3, r2
 801b382:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	1d1a      	adds	r2, r3, #4
 801b388:	613a      	str	r2, [r7, #16]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d101      	bne.n	801b398 <clmt_clust+0x3a>
 801b394:	2300      	movs	r3, #0
 801b396:	e010      	b.n	801b3ba <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801b398:	697a      	ldr	r2, [r7, #20]
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	429a      	cmp	r2, r3
 801b39e:	d307      	bcc.n	801b3b0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801b3a0:	697a      	ldr	r2, [r7, #20]
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	1ad3      	subs	r3, r2, r3
 801b3a6:	617b      	str	r3, [r7, #20]
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	3304      	adds	r3, #4
 801b3ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b3ae:	e7e9      	b.n	801b384 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801b3b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b3b2:	693b      	ldr	r3, [r7, #16]
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	697b      	ldr	r3, [r7, #20]
 801b3b8:	4413      	add	r3, r2
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	371c      	adds	r7, #28
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c4:	4770      	bx	lr

0801b3c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b3c6:	b580      	push	{r7, lr}
 801b3c8:	b086      	sub	sp, #24
 801b3ca:	af00      	add	r7, sp, #0
 801b3cc:	6078      	str	r0, [r7, #4]
 801b3ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b3d6:	683b      	ldr	r3, [r7, #0]
 801b3d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b3dc:	d204      	bcs.n	801b3e8 <dir_sdi+0x22>
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	f003 031f 	and.w	r3, r3, #31
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d001      	beq.n	801b3ec <dir_sdi+0x26>
		return FR_INT_ERR;
 801b3e8:	2302      	movs	r3, #2
 801b3ea:	e063      	b.n	801b4b4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	683a      	ldr	r2, [r7, #0]
 801b3f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	689b      	ldr	r3, [r3, #8]
 801b3f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b3f8:	697b      	ldr	r3, [r7, #20]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d106      	bne.n	801b40c <dir_sdi+0x46>
 801b3fe:	693b      	ldr	r3, [r7, #16]
 801b400:	781b      	ldrb	r3, [r3, #0]
 801b402:	2b02      	cmp	r3, #2
 801b404:	d902      	bls.n	801b40c <dir_sdi+0x46>
		clst = fs->dirbase;
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b40a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b40c:	697b      	ldr	r3, [r7, #20]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d10c      	bne.n	801b42c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	095b      	lsrs	r3, r3, #5
 801b416:	693a      	ldr	r2, [r7, #16]
 801b418:	8912      	ldrh	r2, [r2, #8]
 801b41a:	4293      	cmp	r3, r2
 801b41c:	d301      	bcc.n	801b422 <dir_sdi+0x5c>
 801b41e:	2302      	movs	r3, #2
 801b420:	e048      	b.n	801b4b4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801b422:	693b      	ldr	r3, [r7, #16]
 801b424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	61da      	str	r2, [r3, #28]
 801b42a:	e029      	b.n	801b480 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b42c:	693b      	ldr	r3, [r7, #16]
 801b42e:	895b      	ldrh	r3, [r3, #10]
 801b430:	025b      	lsls	r3, r3, #9
 801b432:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b434:	e019      	b.n	801b46a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6979      	ldr	r1, [r7, #20]
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7ff fd01 	bl	801ae42 <get_fat>
 801b440:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b442:	697b      	ldr	r3, [r7, #20]
 801b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b448:	d101      	bne.n	801b44e <dir_sdi+0x88>
 801b44a:	2301      	movs	r3, #1
 801b44c:	e032      	b.n	801b4b4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	2b01      	cmp	r3, #1
 801b452:	d904      	bls.n	801b45e <dir_sdi+0x98>
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	695b      	ldr	r3, [r3, #20]
 801b458:	697a      	ldr	r2, [r7, #20]
 801b45a:	429a      	cmp	r2, r3
 801b45c:	d301      	bcc.n	801b462 <dir_sdi+0x9c>
 801b45e:	2302      	movs	r3, #2
 801b460:	e028      	b.n	801b4b4 <dir_sdi+0xee>
			ofs -= csz;
 801b462:	683a      	ldr	r2, [r7, #0]
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	1ad3      	subs	r3, r2, r3
 801b468:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b46a:	683a      	ldr	r2, [r7, #0]
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	429a      	cmp	r2, r3
 801b470:	d2e1      	bcs.n	801b436 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801b472:	6979      	ldr	r1, [r7, #20]
 801b474:	6938      	ldr	r0, [r7, #16]
 801b476:	f7ff fcc5 	bl	801ae04 <clust2sect>
 801b47a:	4602      	mov	r2, r0
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	697a      	ldr	r2, [r7, #20]
 801b484:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	69db      	ldr	r3, [r3, #28]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d101      	bne.n	801b492 <dir_sdi+0xcc>
 801b48e:	2302      	movs	r3, #2
 801b490:	e010      	b.n	801b4b4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	69da      	ldr	r2, [r3, #28]
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	0a5b      	lsrs	r3, r3, #9
 801b49a:	441a      	add	r2, r3
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b4ac:	441a      	add	r2, r3
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b4b2:	2300      	movs	r3, #0
}
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	3718      	adds	r7, #24
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	bd80      	pop	{r7, pc}

0801b4bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b086      	sub	sp, #24
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
 801b4c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	695b      	ldr	r3, [r3, #20]
 801b4d0:	3320      	adds	r3, #32
 801b4d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	69db      	ldr	r3, [r3, #28]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d003      	beq.n	801b4e4 <dir_next+0x28>
 801b4dc:	68bb      	ldr	r3, [r7, #8]
 801b4de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b4e2:	d301      	bcc.n	801b4e8 <dir_next+0x2c>
 801b4e4:	2304      	movs	r3, #4
 801b4e6:	e0aa      	b.n	801b63e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	f040 8098 	bne.w	801b624 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	69db      	ldr	r3, [r3, #28]
 801b4f8:	1c5a      	adds	r2, r3, #1
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	699b      	ldr	r3, [r3, #24]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d10b      	bne.n	801b51e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	095b      	lsrs	r3, r3, #5
 801b50a:	68fa      	ldr	r2, [r7, #12]
 801b50c:	8912      	ldrh	r2, [r2, #8]
 801b50e:	4293      	cmp	r3, r2
 801b510:	f0c0 8088 	bcc.w	801b624 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2200      	movs	r2, #0
 801b518:	61da      	str	r2, [r3, #28]
 801b51a:	2304      	movs	r3, #4
 801b51c:	e08f      	b.n	801b63e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	0a5b      	lsrs	r3, r3, #9
 801b522:	68fa      	ldr	r2, [r7, #12]
 801b524:	8952      	ldrh	r2, [r2, #10]
 801b526:	3a01      	subs	r2, #1
 801b528:	4013      	ands	r3, r2
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d17a      	bne.n	801b624 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b52e:	687a      	ldr	r2, [r7, #4]
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	699b      	ldr	r3, [r3, #24]
 801b534:	4619      	mov	r1, r3
 801b536:	4610      	mov	r0, r2
 801b538:	f7ff fc83 	bl	801ae42 <get_fat>
 801b53c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b53e:	697b      	ldr	r3, [r7, #20]
 801b540:	2b01      	cmp	r3, #1
 801b542:	d801      	bhi.n	801b548 <dir_next+0x8c>
 801b544:	2302      	movs	r3, #2
 801b546:	e07a      	b.n	801b63e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b54e:	d101      	bne.n	801b554 <dir_next+0x98>
 801b550:	2301      	movs	r3, #1
 801b552:	e074      	b.n	801b63e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	695b      	ldr	r3, [r3, #20]
 801b558:	697a      	ldr	r2, [r7, #20]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	d358      	bcc.n	801b610 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b55e:	683b      	ldr	r3, [r7, #0]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d104      	bne.n	801b56e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	2200      	movs	r2, #0
 801b568:	61da      	str	r2, [r3, #28]
 801b56a:	2304      	movs	r3, #4
 801b56c:	e067      	b.n	801b63e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b56e:	687a      	ldr	r2, [r7, #4]
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	699b      	ldr	r3, [r3, #24]
 801b574:	4619      	mov	r1, r3
 801b576:	4610      	mov	r0, r2
 801b578:	f7ff fe59 	bl	801b22e <create_chain>
 801b57c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b57e:	697b      	ldr	r3, [r7, #20]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d101      	bne.n	801b588 <dir_next+0xcc>
 801b584:	2307      	movs	r3, #7
 801b586:	e05a      	b.n	801b63e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	2b01      	cmp	r3, #1
 801b58c:	d101      	bne.n	801b592 <dir_next+0xd6>
 801b58e:	2302      	movs	r3, #2
 801b590:	e055      	b.n	801b63e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b598:	d101      	bne.n	801b59e <dir_next+0xe2>
 801b59a:	2301      	movs	r3, #1
 801b59c:	e04f      	b.n	801b63e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b59e:	68f8      	ldr	r0, [r7, #12]
 801b5a0:	f7ff fb50 	bl	801ac44 <sync_window>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d001      	beq.n	801b5ae <dir_next+0xf2>
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	e047      	b.n	801b63e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	3330      	adds	r3, #48	@ 0x30
 801b5b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b5b6:	2100      	movs	r1, #0
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f7ff f97a 	bl	801a8b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b5be:	2300      	movs	r3, #0
 801b5c0:	613b      	str	r3, [r7, #16]
 801b5c2:	6979      	ldr	r1, [r7, #20]
 801b5c4:	68f8      	ldr	r0, [r7, #12]
 801b5c6:	f7ff fc1d 	bl	801ae04 <clust2sect>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b5d0:	e012      	b.n	801b5f8 <dir_next+0x13c>
						fs->wflag = 1;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2201      	movs	r2, #1
 801b5d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b5d8:	68f8      	ldr	r0, [r7, #12]
 801b5da:	f7ff fb33 	bl	801ac44 <sync_window>
 801b5de:	4603      	mov	r3, r0
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d001      	beq.n	801b5e8 <dir_next+0x12c>
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	e02a      	b.n	801b63e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	613b      	str	r3, [r7, #16]
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5f2:	1c5a      	adds	r2, r3, #1
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	895b      	ldrh	r3, [r3, #10]
 801b5fc:	461a      	mov	r2, r3
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	4293      	cmp	r3, r2
 801b602:	d3e6      	bcc.n	801b5d2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	1ad2      	subs	r2, r2, r3
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	697a      	ldr	r2, [r7, #20]
 801b614:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b616:	6979      	ldr	r1, [r7, #20]
 801b618:	68f8      	ldr	r0, [r7, #12]
 801b61a:	f7ff fbf3 	bl	801ae04 <clust2sect>
 801b61e:	4602      	mov	r2, r0
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	68ba      	ldr	r2, [r7, #8]
 801b628:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b630:	68bb      	ldr	r3, [r7, #8]
 801b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b636:	441a      	add	r2, r3
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b63c:	2300      	movs	r3, #0
}
 801b63e:	4618      	mov	r0, r3
 801b640:	3718      	adds	r7, #24
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}

0801b646 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b646:	b580      	push	{r7, lr}
 801b648:	b086      	sub	sp, #24
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	6078      	str	r0, [r7, #4]
 801b64e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b656:	2100      	movs	r1, #0
 801b658:	6878      	ldr	r0, [r7, #4]
 801b65a:	f7ff feb4 	bl	801b3c6 <dir_sdi>
 801b65e:	4603      	mov	r3, r0
 801b660:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b662:	7dfb      	ldrb	r3, [r7, #23]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d12b      	bne.n	801b6c0 <dir_alloc+0x7a>
		n = 0;
 801b668:	2300      	movs	r3, #0
 801b66a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	69db      	ldr	r3, [r3, #28]
 801b670:	4619      	mov	r1, r3
 801b672:	68f8      	ldr	r0, [r7, #12]
 801b674:	f7ff fb2a 	bl	801accc <move_window>
 801b678:	4603      	mov	r3, r0
 801b67a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b67c:	7dfb      	ldrb	r3, [r7, #23]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d11d      	bne.n	801b6be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	6a1b      	ldr	r3, [r3, #32]
 801b686:	781b      	ldrb	r3, [r3, #0]
 801b688:	2be5      	cmp	r3, #229	@ 0xe5
 801b68a:	d004      	beq.n	801b696 <dir_alloc+0x50>
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	6a1b      	ldr	r3, [r3, #32]
 801b690:	781b      	ldrb	r3, [r3, #0]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d107      	bne.n	801b6a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	3301      	adds	r3, #1
 801b69a:	613b      	str	r3, [r7, #16]
 801b69c:	693a      	ldr	r2, [r7, #16]
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	429a      	cmp	r2, r3
 801b6a2:	d102      	bne.n	801b6aa <dir_alloc+0x64>
 801b6a4:	e00c      	b.n	801b6c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b6aa:	2101      	movs	r1, #1
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7ff ff05 	bl	801b4bc <dir_next>
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b6b6:	7dfb      	ldrb	r3, [r7, #23]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d0d7      	beq.n	801b66c <dir_alloc+0x26>
 801b6bc:	e000      	b.n	801b6c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b6be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b6c0:	7dfb      	ldrb	r3, [r7, #23]
 801b6c2:	2b04      	cmp	r3, #4
 801b6c4:	d101      	bne.n	801b6ca <dir_alloc+0x84>
 801b6c6:	2307      	movs	r3, #7
 801b6c8:	75fb      	strb	r3, [r7, #23]
	return res;
 801b6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3718      	adds	r7, #24
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}

0801b6d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b084      	sub	sp, #16
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	331a      	adds	r3, #26
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7ff f842 	bl	801a76c <ld_word>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	781b      	ldrb	r3, [r3, #0]
 801b6f0:	2b03      	cmp	r3, #3
 801b6f2:	d109      	bne.n	801b708 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	3314      	adds	r3, #20
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7ff f837 	bl	801a76c <ld_word>
 801b6fe:	4603      	mov	r3, r0
 801b700:	041b      	lsls	r3, r3, #16
 801b702:	68fa      	ldr	r2, [r7, #12]
 801b704:	4313      	orrs	r3, r2
 801b706:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b708:	68fb      	ldr	r3, [r7, #12]
}
 801b70a:	4618      	mov	r0, r3
 801b70c:	3710      	adds	r7, #16
 801b70e:	46bd      	mov	sp, r7
 801b710:	bd80      	pop	{r7, pc}

0801b712 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b712:	b580      	push	{r7, lr}
 801b714:	b084      	sub	sp, #16
 801b716:	af00      	add	r7, sp, #0
 801b718:	60f8      	str	r0, [r7, #12]
 801b71a:	60b9      	str	r1, [r7, #8]
 801b71c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	331a      	adds	r3, #26
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	b292      	uxth	r2, r2
 801b726:	4611      	mov	r1, r2
 801b728:	4618      	mov	r0, r3
 801b72a:	f7ff f85a 	bl	801a7e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	781b      	ldrb	r3, [r3, #0]
 801b732:	2b03      	cmp	r3, #3
 801b734:	d109      	bne.n	801b74a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	f103 0214 	add.w	r2, r3, #20
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	0c1b      	lsrs	r3, r3, #16
 801b740:	b29b      	uxth	r3, r3
 801b742:	4619      	mov	r1, r3
 801b744:	4610      	mov	r0, r2
 801b746:	f7ff f84c 	bl	801a7e2 <st_word>
	}
}
 801b74a:	bf00      	nop
 801b74c:	3710      	adds	r7, #16
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}

0801b752 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b752:	b580      	push	{r7, lr}
 801b754:	b086      	sub	sp, #24
 801b756:	af00      	add	r7, sp, #0
 801b758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b760:	2100      	movs	r1, #0
 801b762:	6878      	ldr	r0, [r7, #4]
 801b764:	f7ff fe2f 	bl	801b3c6 <dir_sdi>
 801b768:	4603      	mov	r3, r0
 801b76a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b76c:	7dfb      	ldrb	r3, [r7, #23]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d001      	beq.n	801b776 <dir_find+0x24>
 801b772:	7dfb      	ldrb	r3, [r7, #23]
 801b774:	e03e      	b.n	801b7f4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	69db      	ldr	r3, [r3, #28]
 801b77a:	4619      	mov	r1, r3
 801b77c:	6938      	ldr	r0, [r7, #16]
 801b77e:	f7ff faa5 	bl	801accc <move_window>
 801b782:	4603      	mov	r3, r0
 801b784:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b786:	7dfb      	ldrb	r3, [r7, #23]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d12f      	bne.n	801b7ec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	6a1b      	ldr	r3, [r3, #32]
 801b790:	781b      	ldrb	r3, [r3, #0]
 801b792:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b794:	7bfb      	ldrb	r3, [r7, #15]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d102      	bne.n	801b7a0 <dir_find+0x4e>
 801b79a:	2304      	movs	r3, #4
 801b79c:	75fb      	strb	r3, [r7, #23]
 801b79e:	e028      	b.n	801b7f2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	6a1b      	ldr	r3, [r3, #32]
 801b7a4:	330b      	adds	r3, #11
 801b7a6:	781b      	ldrb	r3, [r3, #0]
 801b7a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b7ac:	b2da      	uxtb	r2, r3
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6a1b      	ldr	r3, [r3, #32]
 801b7b6:	330b      	adds	r3, #11
 801b7b8:	781b      	ldrb	r3, [r3, #0]
 801b7ba:	f003 0308 	and.w	r3, r3, #8
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d10a      	bne.n	801b7d8 <dir_find+0x86>
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	6a18      	ldr	r0, [r3, #32]
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	3324      	adds	r3, #36	@ 0x24
 801b7ca:	220b      	movs	r2, #11
 801b7cc:	4619      	mov	r1, r3
 801b7ce:	f7ff f88b 	bl	801a8e8 <mem_cmp>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d00b      	beq.n	801b7f0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b7d8:	2100      	movs	r1, #0
 801b7da:	6878      	ldr	r0, [r7, #4]
 801b7dc:	f7ff fe6e 	bl	801b4bc <dir_next>
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b7e4:	7dfb      	ldrb	r3, [r7, #23]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d0c5      	beq.n	801b776 <dir_find+0x24>
 801b7ea:	e002      	b.n	801b7f2 <dir_find+0xa0>
		if (res != FR_OK) break;
 801b7ec:	bf00      	nop
 801b7ee:	e000      	b.n	801b7f2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b7f0:	bf00      	nop

	return res;
 801b7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	3718      	adds	r7, #24
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	bd80      	pop	{r7, pc}

0801b7fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b084      	sub	sp, #16
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801b80a:	2101      	movs	r1, #1
 801b80c:	6878      	ldr	r0, [r7, #4]
 801b80e:	f7ff ff1a 	bl	801b646 <dir_alloc>
 801b812:	4603      	mov	r3, r0
 801b814:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b816:	7bfb      	ldrb	r3, [r7, #15]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d11c      	bne.n	801b856 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	69db      	ldr	r3, [r3, #28]
 801b820:	4619      	mov	r1, r3
 801b822:	68b8      	ldr	r0, [r7, #8]
 801b824:	f7ff fa52 	bl	801accc <move_window>
 801b828:	4603      	mov	r3, r0
 801b82a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b82c:	7bfb      	ldrb	r3, [r7, #15]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d111      	bne.n	801b856 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	6a1b      	ldr	r3, [r3, #32]
 801b836:	2220      	movs	r2, #32
 801b838:	2100      	movs	r1, #0
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7ff f839 	bl	801a8b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6a18      	ldr	r0, [r3, #32]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	3324      	adds	r3, #36	@ 0x24
 801b848:	220b      	movs	r2, #11
 801b84a:	4619      	mov	r1, r3
 801b84c:	f7ff f810 	bl	801a870 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	2201      	movs	r2, #1
 801b854:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b856:	7bfb      	ldrb	r3, [r7, #15]
}
 801b858:	4618      	mov	r0, r3
 801b85a:	3710      	adds	r7, #16
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bd80      	pop	{r7, pc}

0801b860 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b088      	sub	sp, #32
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
 801b868:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801b86a:	683b      	ldr	r3, [r7, #0]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	60fb      	str	r3, [r7, #12]
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	3324      	adds	r3, #36	@ 0x24
 801b874:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801b876:	220b      	movs	r2, #11
 801b878:	2120      	movs	r1, #32
 801b87a:	68b8      	ldr	r0, [r7, #8]
 801b87c:	f7ff f819 	bl	801a8b2 <mem_set>
	si = i = 0; ni = 8;
 801b880:	2300      	movs	r3, #0
 801b882:	613b      	str	r3, [r7, #16]
 801b884:	693b      	ldr	r3, [r7, #16]
 801b886:	61fb      	str	r3, [r7, #28]
 801b888:	2308      	movs	r3, #8
 801b88a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801b88c:	69fb      	ldr	r3, [r7, #28]
 801b88e:	1c5a      	adds	r2, r3, #1
 801b890:	61fa      	str	r2, [r7, #28]
 801b892:	68fa      	ldr	r2, [r7, #12]
 801b894:	4413      	add	r3, r2
 801b896:	781b      	ldrb	r3, [r3, #0]
 801b898:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b89a:	7efb      	ldrb	r3, [r7, #27]
 801b89c:	2b20      	cmp	r3, #32
 801b89e:	d94e      	bls.n	801b93e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801b8a0:	7efb      	ldrb	r3, [r7, #27]
 801b8a2:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8a4:	d006      	beq.n	801b8b4 <create_name+0x54>
 801b8a6:	7efb      	ldrb	r3, [r7, #27]
 801b8a8:	2b5c      	cmp	r3, #92	@ 0x5c
 801b8aa:	d110      	bne.n	801b8ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b8ac:	e002      	b.n	801b8b4 <create_name+0x54>
 801b8ae:	69fb      	ldr	r3, [r7, #28]
 801b8b0:	3301      	adds	r3, #1
 801b8b2:	61fb      	str	r3, [r7, #28]
 801b8b4:	68fa      	ldr	r2, [r7, #12]
 801b8b6:	69fb      	ldr	r3, [r7, #28]
 801b8b8:	4413      	add	r3, r2
 801b8ba:	781b      	ldrb	r3, [r3, #0]
 801b8bc:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8be:	d0f6      	beq.n	801b8ae <create_name+0x4e>
 801b8c0:	68fa      	ldr	r2, [r7, #12]
 801b8c2:	69fb      	ldr	r3, [r7, #28]
 801b8c4:	4413      	add	r3, r2
 801b8c6:	781b      	ldrb	r3, [r3, #0]
 801b8c8:	2b5c      	cmp	r3, #92	@ 0x5c
 801b8ca:	d0f0      	beq.n	801b8ae <create_name+0x4e>
			break;
 801b8cc:	e038      	b.n	801b940 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801b8ce:	7efb      	ldrb	r3, [r7, #27]
 801b8d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8d2:	d003      	beq.n	801b8dc <create_name+0x7c>
 801b8d4:	693a      	ldr	r2, [r7, #16]
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	429a      	cmp	r2, r3
 801b8da:	d30c      	bcc.n	801b8f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	2b0b      	cmp	r3, #11
 801b8e0:	d002      	beq.n	801b8e8 <create_name+0x88>
 801b8e2:	7efb      	ldrb	r3, [r7, #27]
 801b8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8e6:	d001      	beq.n	801b8ec <create_name+0x8c>
 801b8e8:	2306      	movs	r3, #6
 801b8ea:	e044      	b.n	801b976 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801b8ec:	2308      	movs	r3, #8
 801b8ee:	613b      	str	r3, [r7, #16]
 801b8f0:	230b      	movs	r3, #11
 801b8f2:	617b      	str	r3, [r7, #20]
			continue;
 801b8f4:	e022      	b.n	801b93c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801b8f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	da04      	bge.n	801b908 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801b8fe:	7efb      	ldrb	r3, [r7, #27]
 801b900:	3b80      	subs	r3, #128	@ 0x80
 801b902:	4a1f      	ldr	r2, [pc, #124]	@ (801b980 <create_name+0x120>)
 801b904:	5cd3      	ldrb	r3, [r2, r3]
 801b906:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801b908:	7efb      	ldrb	r3, [r7, #27]
 801b90a:	4619      	mov	r1, r3
 801b90c:	481d      	ldr	r0, [pc, #116]	@ (801b984 <create_name+0x124>)
 801b90e:	f7ff f812 	bl	801a936 <chk_chr>
 801b912:	4603      	mov	r3, r0
 801b914:	2b00      	cmp	r3, #0
 801b916:	d001      	beq.n	801b91c <create_name+0xbc>
 801b918:	2306      	movs	r3, #6
 801b91a:	e02c      	b.n	801b976 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801b91c:	7efb      	ldrb	r3, [r7, #27]
 801b91e:	2b60      	cmp	r3, #96	@ 0x60
 801b920:	d905      	bls.n	801b92e <create_name+0xce>
 801b922:	7efb      	ldrb	r3, [r7, #27]
 801b924:	2b7a      	cmp	r3, #122	@ 0x7a
 801b926:	d802      	bhi.n	801b92e <create_name+0xce>
 801b928:	7efb      	ldrb	r3, [r7, #27]
 801b92a:	3b20      	subs	r3, #32
 801b92c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801b92e:	693b      	ldr	r3, [r7, #16]
 801b930:	1c5a      	adds	r2, r3, #1
 801b932:	613a      	str	r2, [r7, #16]
 801b934:	68ba      	ldr	r2, [r7, #8]
 801b936:	4413      	add	r3, r2
 801b938:	7efa      	ldrb	r2, [r7, #27]
 801b93a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801b93c:	e7a6      	b.n	801b88c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b93e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801b940:	68fa      	ldr	r2, [r7, #12]
 801b942:	69fb      	ldr	r3, [r7, #28]
 801b944:	441a      	add	r2, r3
 801b946:	683b      	ldr	r3, [r7, #0]
 801b948:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801b94a:	693b      	ldr	r3, [r7, #16]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d101      	bne.n	801b954 <create_name+0xf4>
 801b950:	2306      	movs	r3, #6
 801b952:	e010      	b.n	801b976 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	781b      	ldrb	r3, [r3, #0]
 801b958:	2be5      	cmp	r3, #229	@ 0xe5
 801b95a:	d102      	bne.n	801b962 <create_name+0x102>
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	2205      	movs	r2, #5
 801b960:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b962:	7efb      	ldrb	r3, [r7, #27]
 801b964:	2b20      	cmp	r3, #32
 801b966:	d801      	bhi.n	801b96c <create_name+0x10c>
 801b968:	2204      	movs	r2, #4
 801b96a:	e000      	b.n	801b96e <create_name+0x10e>
 801b96c:	2200      	movs	r2, #0
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	330b      	adds	r3, #11
 801b972:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801b974:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801b976:	4618      	mov	r0, r3
 801b978:	3720      	adds	r7, #32
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	0801eba0 	.word	0x0801eba0
 801b984:	0801e89c 	.word	0x0801e89c

0801b988 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b086      	sub	sp, #24
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801b996:	693b      	ldr	r3, [r7, #16]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801b99c:	e002      	b.n	801b9a4 <follow_path+0x1c>
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	603b      	str	r3, [r7, #0]
 801b9a4:	683b      	ldr	r3, [r7, #0]
 801b9a6:	781b      	ldrb	r3, [r3, #0]
 801b9a8:	2b2f      	cmp	r3, #47	@ 0x2f
 801b9aa:	d0f8      	beq.n	801b99e <follow_path+0x16>
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	781b      	ldrb	r3, [r3, #0]
 801b9b0:	2b5c      	cmp	r3, #92	@ 0x5c
 801b9b2:	d0f4      	beq.n	801b99e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801b9b4:	693b      	ldr	r3, [r7, #16]
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801b9ba:	683b      	ldr	r3, [r7, #0]
 801b9bc:	781b      	ldrb	r3, [r3, #0]
 801b9be:	2b1f      	cmp	r3, #31
 801b9c0:	d80a      	bhi.n	801b9d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	2280      	movs	r2, #128	@ 0x80
 801b9c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801b9ca:	2100      	movs	r1, #0
 801b9cc:	6878      	ldr	r0, [r7, #4]
 801b9ce:	f7ff fcfa 	bl	801b3c6 <dir_sdi>
 801b9d2:	4603      	mov	r3, r0
 801b9d4:	75fb      	strb	r3, [r7, #23]
 801b9d6:	e043      	b.n	801ba60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b9d8:	463b      	mov	r3, r7
 801b9da:	4619      	mov	r1, r3
 801b9dc:	6878      	ldr	r0, [r7, #4]
 801b9de:	f7ff ff3f 	bl	801b860 <create_name>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b9e6:	7dfb      	ldrb	r3, [r7, #23]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d134      	bne.n	801ba56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801b9ec:	6878      	ldr	r0, [r7, #4]
 801b9ee:	f7ff feb0 	bl	801b752 <dir_find>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801b9fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801b9fe:	7dfb      	ldrb	r3, [r7, #23]
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d00a      	beq.n	801ba1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ba04:	7dfb      	ldrb	r3, [r7, #23]
 801ba06:	2b04      	cmp	r3, #4
 801ba08:	d127      	bne.n	801ba5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ba0a:	7afb      	ldrb	r3, [r7, #11]
 801ba0c:	f003 0304 	and.w	r3, r3, #4
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d122      	bne.n	801ba5a <follow_path+0xd2>
 801ba14:	2305      	movs	r3, #5
 801ba16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801ba18:	e01f      	b.n	801ba5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ba1a:	7afb      	ldrb	r3, [r7, #11]
 801ba1c:	f003 0304 	and.w	r3, r3, #4
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d11c      	bne.n	801ba5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ba24:	693b      	ldr	r3, [r7, #16]
 801ba26:	799b      	ldrb	r3, [r3, #6]
 801ba28:	f003 0310 	and.w	r3, r3, #16
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d102      	bne.n	801ba36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ba30:	2305      	movs	r3, #5
 801ba32:	75fb      	strb	r3, [r7, #23]
 801ba34:	e014      	b.n	801ba60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	695b      	ldr	r3, [r3, #20]
 801ba40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba44:	4413      	add	r3, r2
 801ba46:	4619      	mov	r1, r3
 801ba48:	68f8      	ldr	r0, [r7, #12]
 801ba4a:	f7ff fe43 	bl	801b6d4 <ld_clust>
 801ba4e:	4602      	mov	r2, r0
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ba54:	e7c0      	b.n	801b9d8 <follow_path+0x50>
			if (res != FR_OK) break;
 801ba56:	bf00      	nop
 801ba58:	e002      	b.n	801ba60 <follow_path+0xd8>
				break;
 801ba5a:	bf00      	nop
 801ba5c:	e000      	b.n	801ba60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ba5e:	bf00      	nop
			}
		}
	}

	return res;
 801ba60:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba62:	4618      	mov	r0, r3
 801ba64:	3718      	adds	r7, #24
 801ba66:	46bd      	mov	sp, r7
 801ba68:	bd80      	pop	{r7, pc}

0801ba6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ba6a:	b480      	push	{r7}
 801ba6c:	b087      	sub	sp, #28
 801ba6e:	af00      	add	r7, sp, #0
 801ba70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ba72:	f04f 33ff 	mov.w	r3, #4294967295
 801ba76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d031      	beq.n	801bae4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	617b      	str	r3, [r7, #20]
 801ba86:	e002      	b.n	801ba8e <get_ldnumber+0x24>
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	617b      	str	r3, [r7, #20]
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	781b      	ldrb	r3, [r3, #0]
 801ba92:	2b20      	cmp	r3, #32
 801ba94:	d903      	bls.n	801ba9e <get_ldnumber+0x34>
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	2b3a      	cmp	r3, #58	@ 0x3a
 801ba9c:	d1f4      	bne.n	801ba88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ba9e:	697b      	ldr	r3, [r7, #20]
 801baa0:	781b      	ldrb	r3, [r3, #0]
 801baa2:	2b3a      	cmp	r3, #58	@ 0x3a
 801baa4:	d11c      	bne.n	801bae0 <get_ldnumber+0x76>
			tp = *path;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	1c5a      	adds	r2, r3, #1
 801bab0:	60fa      	str	r2, [r7, #12]
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	3b30      	subs	r3, #48	@ 0x30
 801bab6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bab8:	68bb      	ldr	r3, [r7, #8]
 801baba:	2b09      	cmp	r3, #9
 801babc:	d80e      	bhi.n	801badc <get_ldnumber+0x72>
 801babe:	68fa      	ldr	r2, [r7, #12]
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d10a      	bne.n	801badc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d107      	bne.n	801badc <get_ldnumber+0x72>
					vol = (int)i;
 801bacc:	68bb      	ldr	r3, [r7, #8]
 801bace:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bad0:	697b      	ldr	r3, [r7, #20]
 801bad2:	3301      	adds	r3, #1
 801bad4:	617b      	str	r3, [r7, #20]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	697a      	ldr	r2, [r7, #20]
 801bada:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801badc:	693b      	ldr	r3, [r7, #16]
 801bade:	e002      	b.n	801bae6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bae0:	2300      	movs	r3, #0
 801bae2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bae4:	693b      	ldr	r3, [r7, #16]
}
 801bae6:	4618      	mov	r0, r3
 801bae8:	371c      	adds	r7, #28
 801baea:	46bd      	mov	sp, r7
 801baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf0:	4770      	bx	lr
	...

0801baf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b082      	sub	sp, #8
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
 801bafc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	2200      	movs	r2, #0
 801bb02:	70da      	strb	r2, [r3, #3]
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	f04f 32ff 	mov.w	r2, #4294967295
 801bb0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801bb0c:	6839      	ldr	r1, [r7, #0]
 801bb0e:	6878      	ldr	r0, [r7, #4]
 801bb10:	f7ff f8dc 	bl	801accc <move_window>
 801bb14:	4603      	mov	r3, r0
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d001      	beq.n	801bb1e <check_fs+0x2a>
 801bb1a:	2304      	movs	r3, #4
 801bb1c:	e038      	b.n	801bb90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	3330      	adds	r3, #48	@ 0x30
 801bb22:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801bb26:	4618      	mov	r0, r3
 801bb28:	f7fe fe20 	bl	801a76c <ld_word>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	461a      	mov	r2, r3
 801bb30:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d001      	beq.n	801bb3c <check_fs+0x48>
 801bb38:	2303      	movs	r3, #3
 801bb3a:	e029      	b.n	801bb90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bb42:	2be9      	cmp	r3, #233	@ 0xe9
 801bb44:	d009      	beq.n	801bb5a <check_fs+0x66>
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bb4c:	2beb      	cmp	r3, #235	@ 0xeb
 801bb4e:	d11e      	bne.n	801bb8e <check_fs+0x9a>
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801bb56:	2b90      	cmp	r3, #144	@ 0x90
 801bb58:	d119      	bne.n	801bb8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	3330      	adds	r3, #48	@ 0x30
 801bb5e:	3336      	adds	r3, #54	@ 0x36
 801bb60:	4618      	mov	r0, r3
 801bb62:	f7fe fe1b 	bl	801a79c <ld_dword>
 801bb66:	4603      	mov	r3, r0
 801bb68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801bb6c:	4a0a      	ldr	r2, [pc, #40]	@ (801bb98 <check_fs+0xa4>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d101      	bne.n	801bb76 <check_fs+0x82>
 801bb72:	2300      	movs	r3, #0
 801bb74:	e00c      	b.n	801bb90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	3330      	adds	r3, #48	@ 0x30
 801bb7a:	3352      	adds	r3, #82	@ 0x52
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	f7fe fe0d 	bl	801a79c <ld_dword>
 801bb82:	4603      	mov	r3, r0
 801bb84:	4a05      	ldr	r2, [pc, #20]	@ (801bb9c <check_fs+0xa8>)
 801bb86:	4293      	cmp	r3, r2
 801bb88:	d101      	bne.n	801bb8e <check_fs+0x9a>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	e000      	b.n	801bb90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801bb8e:	2302      	movs	r3, #2
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	3708      	adds	r7, #8
 801bb94:	46bd      	mov	sp, r7
 801bb96:	bd80      	pop	{r7, pc}
 801bb98:	00544146 	.word	0x00544146
 801bb9c:	33544146 	.word	0x33544146

0801bba0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b096      	sub	sp, #88	@ 0x58
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	60f8      	str	r0, [r7, #12]
 801bba8:	60b9      	str	r1, [r7, #8]
 801bbaa:	4613      	mov	r3, r2
 801bbac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bbae:	68bb      	ldr	r3, [r7, #8]
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bbb4:	68f8      	ldr	r0, [r7, #12]
 801bbb6:	f7ff ff58 	bl	801ba6a <get_ldnumber>
 801bbba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801bbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	da01      	bge.n	801bbc6 <find_volume+0x26>
 801bbc2:	230b      	movs	r3, #11
 801bbc4:	e22d      	b.n	801c022 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bbc6:	4aa1      	ldr	r2, [pc, #644]	@ (801be4c <find_volume+0x2ac>)
 801bbc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d101      	bne.n	801bbda <find_volume+0x3a>
 801bbd6:	230c      	movs	r3, #12
 801bbd8:	e223      	b.n	801c022 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bbde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bbe0:	79fb      	ldrb	r3, [r7, #7]
 801bbe2:	f023 0301 	bic.w	r3, r3, #1
 801bbe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801bbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbea:	781b      	ldrb	r3, [r3, #0]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d01a      	beq.n	801bc26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbf2:	785b      	ldrb	r3, [r3, #1]
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f7fe fd19 	bl	801a62c <disk_status>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801bc00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bc04:	f003 0301 	and.w	r3, r3, #1
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d10c      	bne.n	801bc26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801bc0c:	79fb      	ldrb	r3, [r7, #7]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d007      	beq.n	801bc22 <find_volume+0x82>
 801bc12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bc16:	f003 0304 	and.w	r3, r3, #4
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d001      	beq.n	801bc22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801bc1e:	230a      	movs	r3, #10
 801bc20:	e1ff      	b.n	801c022 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801bc22:	2300      	movs	r3, #0
 801bc24:	e1fd      	b.n	801c022 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801bc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc28:	2200      	movs	r2, #0
 801bc2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bc2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bc2e:	b2da      	uxtb	r2, r3
 801bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc36:	785b      	ldrb	r3, [r3, #1]
 801bc38:	4618      	mov	r0, r3
 801bc3a:	f7fe fd11 	bl	801a660 <disk_initialize>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bc44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bc48:	f003 0301 	and.w	r3, r3, #1
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d001      	beq.n	801bc54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801bc50:	2303      	movs	r3, #3
 801bc52:	e1e6      	b.n	801c022 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801bc54:	79fb      	ldrb	r3, [r7, #7]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d007      	beq.n	801bc6a <find_volume+0xca>
 801bc5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bc5e:	f003 0304 	and.w	r3, r3, #4
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d001      	beq.n	801bc6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801bc66:	230a      	movs	r3, #10
 801bc68:	e1db      	b.n	801c022 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801bc6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bc70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bc72:	f7ff ff3f 	bl	801baf4 <check_fs>
 801bc76:	4603      	mov	r3, r0
 801bc78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801bc7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bc80:	2b02      	cmp	r3, #2
 801bc82:	d149      	bne.n	801bd18 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bc84:	2300      	movs	r3, #0
 801bc86:	643b      	str	r3, [r7, #64]	@ 0x40
 801bc88:	e01e      	b.n	801bcc8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bc90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc92:	011b      	lsls	r3, r3, #4
 801bc94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801bc98:	4413      	add	r3, r2
 801bc9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc9e:	3304      	adds	r3, #4
 801bca0:	781b      	ldrb	r3, [r3, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d006      	beq.n	801bcb4 <find_volume+0x114>
 801bca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bca8:	3308      	adds	r3, #8
 801bcaa:	4618      	mov	r0, r3
 801bcac:	f7fe fd76 	bl	801a79c <ld_dword>
 801bcb0:	4602      	mov	r2, r0
 801bcb2:	e000      	b.n	801bcb6 <find_volume+0x116>
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcb8:	009b      	lsls	r3, r3, #2
 801bcba:	3358      	adds	r3, #88	@ 0x58
 801bcbc:	443b      	add	r3, r7
 801bcbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bcc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	643b      	str	r3, [r7, #64]	@ 0x40
 801bcc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcca:	2b03      	cmp	r3, #3
 801bccc:	d9dd      	bls.n	801bc8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801bcce:	2300      	movs	r3, #0
 801bcd0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801bcd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d002      	beq.n	801bcde <find_volume+0x13e>
 801bcd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcda:	3b01      	subs	r3, #1
 801bcdc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801bcde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bce0:	009b      	lsls	r3, r3, #2
 801bce2:	3358      	adds	r3, #88	@ 0x58
 801bce4:	443b      	add	r3, r7
 801bce6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801bcea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801bcec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d005      	beq.n	801bcfe <find_volume+0x15e>
 801bcf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bcf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bcf6:	f7ff fefd 	bl	801baf4 <check_fs>
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	e000      	b.n	801bd00 <find_volume+0x160>
 801bcfe:	2303      	movs	r3, #3
 801bd00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801bd04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bd08:	2b01      	cmp	r3, #1
 801bd0a:	d905      	bls.n	801bd18 <find_volume+0x178>
 801bd0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bd0e:	3301      	adds	r3, #1
 801bd10:	643b      	str	r3, [r7, #64]	@ 0x40
 801bd12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bd14:	2b03      	cmp	r3, #3
 801bd16:	d9e2      	bls.n	801bcde <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801bd18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bd1c:	2b04      	cmp	r3, #4
 801bd1e:	d101      	bne.n	801bd24 <find_volume+0x184>
 801bd20:	2301      	movs	r3, #1
 801bd22:	e17e      	b.n	801c022 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801bd24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bd28:	2b01      	cmp	r3, #1
 801bd2a:	d901      	bls.n	801bd30 <find_volume+0x190>
 801bd2c:	230d      	movs	r3, #13
 801bd2e:	e178      	b.n	801c022 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd32:	3330      	adds	r3, #48	@ 0x30
 801bd34:	330b      	adds	r3, #11
 801bd36:	4618      	mov	r0, r3
 801bd38:	f7fe fd18 	bl	801a76c <ld_word>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bd42:	d001      	beq.n	801bd48 <find_volume+0x1a8>
 801bd44:	230d      	movs	r3, #13
 801bd46:	e16c      	b.n	801c022 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801bd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd4a:	3330      	adds	r3, #48	@ 0x30
 801bd4c:	3316      	adds	r3, #22
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7fe fd0c 	bl	801a76c <ld_word>
 801bd54:	4603      	mov	r3, r0
 801bd56:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801bd58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d106      	bne.n	801bd6c <find_volume+0x1cc>
 801bd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd60:	3330      	adds	r3, #48	@ 0x30
 801bd62:	3324      	adds	r3, #36	@ 0x24
 801bd64:	4618      	mov	r0, r3
 801bd66:	f7fe fd19 	bl	801a79c <ld_dword>
 801bd6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801bd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bd70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801bd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd74:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801bd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801bd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd7e:	789b      	ldrb	r3, [r3, #2]
 801bd80:	2b01      	cmp	r3, #1
 801bd82:	d005      	beq.n	801bd90 <find_volume+0x1f0>
 801bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd86:	789b      	ldrb	r3, [r3, #2]
 801bd88:	2b02      	cmp	r3, #2
 801bd8a:	d001      	beq.n	801bd90 <find_volume+0x1f0>
 801bd8c:	230d      	movs	r3, #13
 801bd8e:	e148      	b.n	801c022 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801bd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd92:	789b      	ldrb	r3, [r3, #2]
 801bd94:	461a      	mov	r2, r3
 801bd96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd98:	fb02 f303 	mul.w	r3, r2, r3
 801bd9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801bd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bda0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801bda4:	461a      	mov	r2, r3
 801bda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bda8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdac:	895b      	ldrh	r3, [r3, #10]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d008      	beq.n	801bdc4 <find_volume+0x224>
 801bdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdb4:	895b      	ldrh	r3, [r3, #10]
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdba:	895b      	ldrh	r3, [r3, #10]
 801bdbc:	3b01      	subs	r3, #1
 801bdbe:	4013      	ands	r3, r2
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d001      	beq.n	801bdc8 <find_volume+0x228>
 801bdc4:	230d      	movs	r3, #13
 801bdc6:	e12c      	b.n	801c022 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdca:	3330      	adds	r3, #48	@ 0x30
 801bdcc:	3311      	adds	r3, #17
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7fe fccc 	bl	801a76c <ld_word>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	461a      	mov	r2, r3
 801bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801bddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdde:	891b      	ldrh	r3, [r3, #8]
 801bde0:	f003 030f 	and.w	r3, r3, #15
 801bde4:	b29b      	uxth	r3, r3
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d001      	beq.n	801bdee <find_volume+0x24e>
 801bdea:	230d      	movs	r3, #13
 801bdec:	e119      	b.n	801c022 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801bdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdf0:	3330      	adds	r3, #48	@ 0x30
 801bdf2:	3313      	adds	r3, #19
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	f7fe fcb9 	bl	801a76c <ld_word>
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801bdfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801be00:	2b00      	cmp	r3, #0
 801be02:	d106      	bne.n	801be12 <find_volume+0x272>
 801be04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be06:	3330      	adds	r3, #48	@ 0x30
 801be08:	3320      	adds	r3, #32
 801be0a:	4618      	mov	r0, r3
 801be0c:	f7fe fcc6 	bl	801a79c <ld_dword>
 801be10:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801be12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be14:	3330      	adds	r3, #48	@ 0x30
 801be16:	330e      	adds	r3, #14
 801be18:	4618      	mov	r0, r3
 801be1a:	f7fe fca7 	bl	801a76c <ld_word>
 801be1e:	4603      	mov	r3, r0
 801be20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801be22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801be24:	2b00      	cmp	r3, #0
 801be26:	d101      	bne.n	801be2c <find_volume+0x28c>
 801be28:	230d      	movs	r3, #13
 801be2a:	e0fa      	b.n	801c022 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801be2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801be2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801be30:	4413      	add	r3, r2
 801be32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801be34:	8912      	ldrh	r2, [r2, #8]
 801be36:	0912      	lsrs	r2, r2, #4
 801be38:	b292      	uxth	r2, r2
 801be3a:	4413      	add	r3, r2
 801be3c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801be3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801be40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be42:	429a      	cmp	r2, r3
 801be44:	d204      	bcs.n	801be50 <find_volume+0x2b0>
 801be46:	230d      	movs	r3, #13
 801be48:	e0eb      	b.n	801c022 <find_volume+0x482>
 801be4a:	bf00      	nop
 801be4c:	24000acc 	.word	0x24000acc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801be50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be54:	1ad3      	subs	r3, r2, r3
 801be56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801be58:	8952      	ldrh	r2, [r2, #10]
 801be5a:	fbb3 f3f2 	udiv	r3, r3, r2
 801be5e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be62:	2b00      	cmp	r3, #0
 801be64:	d101      	bne.n	801be6a <find_volume+0x2ca>
 801be66:	230d      	movs	r3, #13
 801be68:	e0db      	b.n	801c022 <find_volume+0x482>
		fmt = FS_FAT32;
 801be6a:	2303      	movs	r3, #3
 801be6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801be70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be72:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801be76:	4293      	cmp	r3, r2
 801be78:	d802      	bhi.n	801be80 <find_volume+0x2e0>
 801be7a:	2302      	movs	r3, #2
 801be7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801be80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be82:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801be86:	4293      	cmp	r3, r2
 801be88:	d802      	bhi.n	801be90 <find_volume+0x2f0>
 801be8a:	2301      	movs	r3, #1
 801be8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be92:	1c9a      	adds	r2, r3, #2
 801be94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be96:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801be98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801be9c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801be9e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bea2:	441a      	add	r2, r3
 801bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bea6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801bea8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beac:	441a      	add	r2, r3
 801beae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beb0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801beb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801beb6:	2b03      	cmp	r3, #3
 801beb8:	d11e      	bne.n	801bef8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801beba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bebc:	3330      	adds	r3, #48	@ 0x30
 801bebe:	332a      	adds	r3, #42	@ 0x2a
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7fe fc53 	bl	801a76c <ld_word>
 801bec6:	4603      	mov	r3, r0
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d001      	beq.n	801bed0 <find_volume+0x330>
 801becc:	230d      	movs	r3, #13
 801bece:	e0a8      	b.n	801c022 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801bed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bed2:	891b      	ldrh	r3, [r3, #8]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d001      	beq.n	801bedc <find_volume+0x33c>
 801bed8:	230d      	movs	r3, #13
 801beda:	e0a2      	b.n	801c022 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801bedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bede:	3330      	adds	r3, #48	@ 0x30
 801bee0:	332c      	adds	r3, #44	@ 0x2c
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7fe fc5a 	bl	801a79c <ld_dword>
 801bee8:	4602      	mov	r2, r0
 801beea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beec:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801beee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bef0:	695b      	ldr	r3, [r3, #20]
 801bef2:	009b      	lsls	r3, r3, #2
 801bef4:	647b      	str	r3, [r7, #68]	@ 0x44
 801bef6:	e01f      	b.n	801bf38 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801bef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801befa:	891b      	ldrh	r3, [r3, #8]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d101      	bne.n	801bf04 <find_volume+0x364>
 801bf00:	230d      	movs	r3, #13
 801bf02:	e08e      	b.n	801c022 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf06:	6a1a      	ldr	r2, [r3, #32]
 801bf08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bf0a:	441a      	add	r2, r3
 801bf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf0e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801bf10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bf14:	2b02      	cmp	r3, #2
 801bf16:	d103      	bne.n	801bf20 <find_volume+0x380>
 801bf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf1a:	695b      	ldr	r3, [r3, #20]
 801bf1c:	005b      	lsls	r3, r3, #1
 801bf1e:	e00a      	b.n	801bf36 <find_volume+0x396>
 801bf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf22:	695a      	ldr	r2, [r3, #20]
 801bf24:	4613      	mov	r3, r2
 801bf26:	005b      	lsls	r3, r3, #1
 801bf28:	4413      	add	r3, r2
 801bf2a:	085a      	lsrs	r2, r3, #1
 801bf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf2e:	695b      	ldr	r3, [r3, #20]
 801bf30:	f003 0301 	and.w	r3, r3, #1
 801bf34:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801bf36:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf3a:	699a      	ldr	r2, [r3, #24]
 801bf3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bf3e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801bf42:	0a5b      	lsrs	r3, r3, #9
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d201      	bcs.n	801bf4c <find_volume+0x3ac>
 801bf48:	230d      	movs	r3, #13
 801bf4a:	e06a      	b.n	801c022 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801bf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 801bf52:	611a      	str	r2, [r3, #16]
 801bf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf56:	691a      	ldr	r2, [r3, #16]
 801bf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf5a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801bf5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf5e:	2280      	movs	r2, #128	@ 0x80
 801bf60:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801bf62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bf66:	2b03      	cmp	r3, #3
 801bf68:	d149      	bne.n	801bffe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801bf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf6c:	3330      	adds	r3, #48	@ 0x30
 801bf6e:	3330      	adds	r3, #48	@ 0x30
 801bf70:	4618      	mov	r0, r3
 801bf72:	f7fe fbfb 	bl	801a76c <ld_word>
 801bf76:	4603      	mov	r3, r0
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	d140      	bne.n	801bffe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801bf7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bf7e:	3301      	adds	r3, #1
 801bf80:	4619      	mov	r1, r3
 801bf82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bf84:	f7fe fea2 	bl	801accc <move_window>
 801bf88:	4603      	mov	r3, r0
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d137      	bne.n	801bffe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801bf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf90:	2200      	movs	r2, #0
 801bf92:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801bf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf96:	3330      	adds	r3, #48	@ 0x30
 801bf98:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	f7fe fbe5 	bl	801a76c <ld_word>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	461a      	mov	r2, r3
 801bfa6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801bfaa:	429a      	cmp	r2, r3
 801bfac:	d127      	bne.n	801bffe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801bfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfb0:	3330      	adds	r3, #48	@ 0x30
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	f7fe fbf2 	bl	801a79c <ld_dword>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	4a1c      	ldr	r2, [pc, #112]	@ (801c02c <find_volume+0x48c>)
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	d11e      	bne.n	801bffe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801bfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfc2:	3330      	adds	r3, #48	@ 0x30
 801bfc4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801bfc8:	4618      	mov	r0, r3
 801bfca:	f7fe fbe7 	bl	801a79c <ld_dword>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	4a17      	ldr	r2, [pc, #92]	@ (801c030 <find_volume+0x490>)
 801bfd2:	4293      	cmp	r3, r2
 801bfd4:	d113      	bne.n	801bffe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801bfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfd8:	3330      	adds	r3, #48	@ 0x30
 801bfda:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f7fe fbdc 	bl	801a79c <ld_dword>
 801bfe4:	4602      	mov	r2, r0
 801bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfe8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801bfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfec:	3330      	adds	r3, #48	@ 0x30
 801bfee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7fe fbd2 	bl	801a79c <ld_dword>
 801bff8:	4602      	mov	r2, r0
 801bffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bffc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801bffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c000:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801c004:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c006:	4b0b      	ldr	r3, [pc, #44]	@ (801c034 <find_volume+0x494>)
 801c008:	881b      	ldrh	r3, [r3, #0]
 801c00a:	3301      	adds	r3, #1
 801c00c:	b29a      	uxth	r2, r3
 801c00e:	4b09      	ldr	r3, [pc, #36]	@ (801c034 <find_volume+0x494>)
 801c010:	801a      	strh	r2, [r3, #0]
 801c012:	4b08      	ldr	r3, [pc, #32]	@ (801c034 <find_volume+0x494>)
 801c014:	881a      	ldrh	r2, [r3, #0]
 801c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c018:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c01a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c01c:	f7fe fdee 	bl	801abfc <clear_lock>
#endif
	return FR_OK;
 801c020:	2300      	movs	r3, #0
}
 801c022:	4618      	mov	r0, r3
 801c024:	3758      	adds	r7, #88	@ 0x58
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	41615252 	.word	0x41615252
 801c030:	61417272 	.word	0x61417272
 801c034:	24000ad0 	.word	0x24000ad0

0801c038 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b084      	sub	sp, #16
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c042:	2309      	movs	r3, #9
 801c044:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d01c      	beq.n	801c086 <validate+0x4e>
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d018      	beq.n	801c086 <validate+0x4e>
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d013      	beq.n	801c086 <validate+0x4e>
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	889a      	ldrh	r2, [r3, #4]
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	88db      	ldrh	r3, [r3, #6]
 801c068:	429a      	cmp	r2, r3
 801c06a:	d10c      	bne.n	801c086 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	785b      	ldrb	r3, [r3, #1]
 801c072:	4618      	mov	r0, r3
 801c074:	f7fe fada 	bl	801a62c <disk_status>
 801c078:	4603      	mov	r3, r0
 801c07a:	f003 0301 	and.w	r3, r3, #1
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d101      	bne.n	801c086 <validate+0x4e>
			res = FR_OK;
 801c082:	2300      	movs	r3, #0
 801c084:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c086:	7bfb      	ldrb	r3, [r7, #15]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d102      	bne.n	801c092 <validate+0x5a>
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	e000      	b.n	801c094 <validate+0x5c>
 801c092:	2300      	movs	r3, #0
 801c094:	683a      	ldr	r2, [r7, #0]
 801c096:	6013      	str	r3, [r2, #0]
	return res;
 801c098:	7bfb      	ldrb	r3, [r7, #15]
}
 801c09a:	4618      	mov	r0, r3
 801c09c:	3710      	adds	r7, #16
 801c09e:	46bd      	mov	sp, r7
 801c0a0:	bd80      	pop	{r7, pc}
	...

0801c0a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b088      	sub	sp, #32
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	60f8      	str	r0, [r7, #12]
 801c0ac:	60b9      	str	r1, [r7, #8]
 801c0ae:	4613      	mov	r3, r2
 801c0b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c0b2:	68bb      	ldr	r3, [r7, #8]
 801c0b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c0b6:	f107 0310 	add.w	r3, r7, #16
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7ff fcd5 	bl	801ba6a <get_ldnumber>
 801c0c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c0c2:	69fb      	ldr	r3, [r7, #28]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	da01      	bge.n	801c0cc <f_mount+0x28>
 801c0c8:	230b      	movs	r3, #11
 801c0ca:	e02b      	b.n	801c124 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c0cc:	4a17      	ldr	r2, [pc, #92]	@ (801c12c <f_mount+0x88>)
 801c0ce:	69fb      	ldr	r3, [r7, #28]
 801c0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c0d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c0d6:	69bb      	ldr	r3, [r7, #24]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d005      	beq.n	801c0e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c0dc:	69b8      	ldr	r0, [r7, #24]
 801c0de:	f7fe fd8d 	bl	801abfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c0e2:	69bb      	ldr	r3, [r7, #24]
 801c0e4:	2200      	movs	r2, #0
 801c0e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d002      	beq.n	801c0f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c0f4:	68fa      	ldr	r2, [r7, #12]
 801c0f6:	490d      	ldr	r1, [pc, #52]	@ (801c12c <f_mount+0x88>)
 801c0f8:	69fb      	ldr	r3, [r7, #28]
 801c0fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d002      	beq.n	801c10a <f_mount+0x66>
 801c104:	79fb      	ldrb	r3, [r7, #7]
 801c106:	2b01      	cmp	r3, #1
 801c108:	d001      	beq.n	801c10e <f_mount+0x6a>
 801c10a:	2300      	movs	r3, #0
 801c10c:	e00a      	b.n	801c124 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c10e:	f107 010c 	add.w	r1, r7, #12
 801c112:	f107 0308 	add.w	r3, r7, #8
 801c116:	2200      	movs	r2, #0
 801c118:	4618      	mov	r0, r3
 801c11a:	f7ff fd41 	bl	801bba0 <find_volume>
 801c11e:	4603      	mov	r3, r0
 801c120:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c122:	7dfb      	ldrb	r3, [r7, #23]
}
 801c124:	4618      	mov	r0, r3
 801c126:	3720      	adds	r7, #32
 801c128:	46bd      	mov	sp, r7
 801c12a:	bd80      	pop	{r7, pc}
 801c12c:	24000acc 	.word	0x24000acc

0801c130 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b098      	sub	sp, #96	@ 0x60
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	4613      	mov	r3, r2
 801c13c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d101      	bne.n	801c148 <f_open+0x18>
 801c144:	2309      	movs	r3, #9
 801c146:	e1a9      	b.n	801c49c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c148:	79fb      	ldrb	r3, [r7, #7]
 801c14a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c14e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c150:	79fa      	ldrb	r2, [r7, #7]
 801c152:	f107 0110 	add.w	r1, r7, #16
 801c156:	f107 0308 	add.w	r3, r7, #8
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7ff fd20 	bl	801bba0 <find_volume>
 801c160:	4603      	mov	r3, r0
 801c162:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801c166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	f040 818d 	bne.w	801c48a <f_open+0x35a>
		dj.obj.fs = fs;
 801c170:	693b      	ldr	r3, [r7, #16]
 801c172:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c174:	68ba      	ldr	r2, [r7, #8]
 801c176:	f107 0314 	add.w	r3, r7, #20
 801c17a:	4611      	mov	r1, r2
 801c17c:	4618      	mov	r0, r3
 801c17e:	f7ff fc03 	bl	801b988 <follow_path>
 801c182:	4603      	mov	r3, r0
 801c184:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c188:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d118      	bne.n	801c1c2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c190:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801c194:	b25b      	sxtb	r3, r3
 801c196:	2b00      	cmp	r3, #0
 801c198:	da03      	bge.n	801c1a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801c19a:	2306      	movs	r3, #6
 801c19c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c1a0:	e00f      	b.n	801c1c2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c1a2:	79fb      	ldrb	r3, [r7, #7]
 801c1a4:	2b01      	cmp	r3, #1
 801c1a6:	bf8c      	ite	hi
 801c1a8:	2301      	movhi	r3, #1
 801c1aa:	2300      	movls	r3, #0
 801c1ac:	b2db      	uxtb	r3, r3
 801c1ae:	461a      	mov	r2, r3
 801c1b0:	f107 0314 	add.w	r3, r7, #20
 801c1b4:	4611      	mov	r1, r2
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f7fe fbd8 	bl	801a96c <chk_lock>
 801c1bc:	4603      	mov	r3, r0
 801c1be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c1c2:	79fb      	ldrb	r3, [r7, #7]
 801c1c4:	f003 031c 	and.w	r3, r3, #28
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d07f      	beq.n	801c2cc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801c1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d017      	beq.n	801c204 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c1d8:	2b04      	cmp	r3, #4
 801c1da:	d10e      	bne.n	801c1fa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c1dc:	f7fe fc22 	bl	801aa24 <enq_lock>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d006      	beq.n	801c1f4 <f_open+0xc4>
 801c1e6:	f107 0314 	add.w	r3, r7, #20
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7ff fb06 	bl	801b7fc <dir_register>
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	e000      	b.n	801c1f6 <f_open+0xc6>
 801c1f4:	2312      	movs	r3, #18
 801c1f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c1fa:	79fb      	ldrb	r3, [r7, #7]
 801c1fc:	f043 0308 	orr.w	r3, r3, #8
 801c200:	71fb      	strb	r3, [r7, #7]
 801c202:	e010      	b.n	801c226 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c204:	7ebb      	ldrb	r3, [r7, #26]
 801c206:	f003 0311 	and.w	r3, r3, #17
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d003      	beq.n	801c216 <f_open+0xe6>
					res = FR_DENIED;
 801c20e:	2307      	movs	r3, #7
 801c210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c214:	e007      	b.n	801c226 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c216:	79fb      	ldrb	r3, [r7, #7]
 801c218:	f003 0304 	and.w	r3, r3, #4
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d002      	beq.n	801c226 <f_open+0xf6>
 801c220:	2308      	movs	r3, #8
 801c222:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c226:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d168      	bne.n	801c300 <f_open+0x1d0>
 801c22e:	79fb      	ldrb	r3, [r7, #7]
 801c230:	f003 0308 	and.w	r3, r3, #8
 801c234:	2b00      	cmp	r3, #0
 801c236:	d063      	beq.n	801c300 <f_open+0x1d0>
				dw = GET_FATTIME();
 801c238:	f7fd ff6c 	bl	801a114 <get_fattime>
 801c23c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c240:	330e      	adds	r3, #14
 801c242:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c244:	4618      	mov	r0, r3
 801c246:	f7fe fae7 	bl	801a818 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c24c:	3316      	adds	r3, #22
 801c24e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c250:	4618      	mov	r0, r3
 801c252:	f7fe fae1 	bl	801a818 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c258:	330b      	adds	r3, #11
 801c25a:	2220      	movs	r2, #32
 801c25c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c25e:	693b      	ldr	r3, [r7, #16]
 801c260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c262:	4611      	mov	r1, r2
 801c264:	4618      	mov	r0, r3
 801c266:	f7ff fa35 	bl	801b6d4 <ld_clust>
 801c26a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c26c:	693b      	ldr	r3, [r7, #16]
 801c26e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c270:	2200      	movs	r2, #0
 801c272:	4618      	mov	r0, r3
 801c274:	f7ff fa4d 	bl	801b712 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c27a:	331c      	adds	r3, #28
 801c27c:	2100      	movs	r1, #0
 801c27e:	4618      	mov	r0, r3
 801c280:	f7fe faca 	bl	801a818 <st_dword>
					fs->wflag = 1;
 801c284:	693b      	ldr	r3, [r7, #16]
 801c286:	2201      	movs	r2, #1
 801c288:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c28a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d037      	beq.n	801c300 <f_open+0x1d0>
						dw = fs->winsect;
 801c290:	693b      	ldr	r3, [r7, #16]
 801c292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c294:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801c296:	f107 0314 	add.w	r3, r7, #20
 801c29a:	2200      	movs	r2, #0
 801c29c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f7fe ff60 	bl	801b164 <remove_chain>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801c2aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d126      	bne.n	801c300 <f_open+0x1d0>
							res = move_window(fs, dw);
 801c2b2:	693b      	ldr	r3, [r7, #16]
 801c2b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	f7fe fd08 	bl	801accc <move_window>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c2c2:	693b      	ldr	r3, [r7, #16]
 801c2c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c2c6:	3a01      	subs	r2, #1
 801c2c8:	60da      	str	r2, [r3, #12]
 801c2ca:	e019      	b.n	801c300 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c2cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d115      	bne.n	801c300 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c2d4:	7ebb      	ldrb	r3, [r7, #26]
 801c2d6:	f003 0310 	and.w	r3, r3, #16
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d003      	beq.n	801c2e6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801c2de:	2304      	movs	r3, #4
 801c2e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c2e4:	e00c      	b.n	801c300 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c2e6:	79fb      	ldrb	r3, [r7, #7]
 801c2e8:	f003 0302 	and.w	r3, r3, #2
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d007      	beq.n	801c300 <f_open+0x1d0>
 801c2f0:	7ebb      	ldrb	r3, [r7, #26]
 801c2f2:	f003 0301 	and.w	r3, r3, #1
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d002      	beq.n	801c300 <f_open+0x1d0>
						res = FR_DENIED;
 801c2fa:	2307      	movs	r3, #7
 801c2fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801c300:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c304:	2b00      	cmp	r3, #0
 801c306:	d126      	bne.n	801c356 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c308:	79fb      	ldrb	r3, [r7, #7]
 801c30a:	f003 0308 	and.w	r3, r3, #8
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d003      	beq.n	801c31a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801c312:	79fb      	ldrb	r3, [r7, #7]
 801c314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c318:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c31a:	693b      	ldr	r3, [r7, #16]
 801c31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801c322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c328:	79fb      	ldrb	r3, [r7, #7]
 801c32a:	2b01      	cmp	r3, #1
 801c32c:	bf8c      	ite	hi
 801c32e:	2301      	movhi	r3, #1
 801c330:	2300      	movls	r3, #0
 801c332:	b2db      	uxtb	r3, r3
 801c334:	461a      	mov	r2, r3
 801c336:	f107 0314 	add.w	r3, r7, #20
 801c33a:	4611      	mov	r1, r2
 801c33c:	4618      	mov	r0, r3
 801c33e:	f7fe fb93 	bl	801aa68 <inc_lock>
 801c342:	4602      	mov	r2, r0
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	691b      	ldr	r3, [r3, #16]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d102      	bne.n	801c356 <f_open+0x226>
 801c350:	2302      	movs	r3, #2
 801c352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f040 8095 	bne.w	801c48a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c360:	693b      	ldr	r3, [r7, #16]
 801c362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c364:	4611      	mov	r1, r2
 801c366:	4618      	mov	r0, r3
 801c368:	f7ff f9b4 	bl	801b6d4 <ld_clust>
 801c36c:	4602      	mov	r2, r0
 801c36e:	68fb      	ldr	r3, [r7, #12]
 801c370:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c374:	331c      	adds	r3, #28
 801c376:	4618      	mov	r0, r3
 801c378:	f7fe fa10 	bl	801a79c <ld_dword>
 801c37c:	4602      	mov	r2, r0
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	2200      	movs	r2, #0
 801c386:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c388:	693a      	ldr	r2, [r7, #16]
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c38e:	693b      	ldr	r3, [r7, #16]
 801c390:	88da      	ldrh	r2, [r3, #6]
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	79fa      	ldrb	r2, [r7, #7]
 801c39a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	2200      	movs	r2, #0
 801c3a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	2200      	movs	r2, #0
 801c3a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	3330      	adds	r3, #48	@ 0x30
 801c3b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c3b6:	2100      	movs	r1, #0
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f7fe fa7a 	bl	801a8b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c3be:	79fb      	ldrb	r3, [r7, #7]
 801c3c0:	f003 0320 	and.w	r3, r3, #32
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d060      	beq.n	801c48a <f_open+0x35a>
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	68db      	ldr	r3, [r3, #12]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d05c      	beq.n	801c48a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	68da      	ldr	r2, [r3, #12]
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c3d8:	693b      	ldr	r3, [r7, #16]
 801c3da:	895b      	ldrh	r3, [r3, #10]
 801c3dc:	025b      	lsls	r3, r3, #9
 801c3de:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	689b      	ldr	r3, [r3, #8]
 801c3e4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	68db      	ldr	r3, [r3, #12]
 801c3ea:	657b      	str	r3, [r7, #84]	@ 0x54
 801c3ec:	e016      	b.n	801c41c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f7fe fd25 	bl	801ae42 <get_fat>
 801c3f8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801c3fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	d802      	bhi.n	801c406 <f_open+0x2d6>
 801c400:	2302      	movs	r3, #2
 801c402:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c40c:	d102      	bne.n	801c414 <f_open+0x2e4>
 801c40e:	2301      	movs	r3, #1
 801c410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c414:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c418:	1ad3      	subs	r3, r2, r3
 801c41a:	657b      	str	r3, [r7, #84]	@ 0x54
 801c41c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c420:	2b00      	cmp	r3, #0
 801c422:	d103      	bne.n	801c42c <f_open+0x2fc>
 801c424:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c428:	429a      	cmp	r2, r3
 801c42a:	d8e0      	bhi.n	801c3ee <f_open+0x2be>
				}
				fp->clust = clst;
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c430:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c432:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c436:	2b00      	cmp	r3, #0
 801c438:	d127      	bne.n	801c48a <f_open+0x35a>
 801c43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c440:	2b00      	cmp	r3, #0
 801c442:	d022      	beq.n	801c48a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c444:	693b      	ldr	r3, [r7, #16]
 801c446:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c448:	4618      	mov	r0, r3
 801c44a:	f7fe fcdb 	bl	801ae04 <clust2sect>
 801c44e:	6478      	str	r0, [r7, #68]	@ 0x44
 801c450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c452:	2b00      	cmp	r3, #0
 801c454:	d103      	bne.n	801c45e <f_open+0x32e>
						res = FR_INT_ERR;
 801c456:	2302      	movs	r3, #2
 801c458:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c45c:	e015      	b.n	801c48a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c460:	0a5a      	lsrs	r2, r3, #9
 801c462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c464:	441a      	add	r2, r3
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	7858      	ldrb	r0, [r3, #1]
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	6a1a      	ldr	r2, [r3, #32]
 801c478:	2301      	movs	r3, #1
 801c47a:	f7fe f919 	bl	801a6b0 <disk_read>
 801c47e:	4603      	mov	r3, r0
 801c480:	2b00      	cmp	r3, #0
 801c482:	d002      	beq.n	801c48a <f_open+0x35a>
 801c484:	2301      	movs	r3, #1
 801c486:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c48a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d002      	beq.n	801c498 <f_open+0x368>
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	2200      	movs	r2, #0
 801c496:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c498:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801c49c:	4618      	mov	r0, r3
 801c49e:	3760      	adds	r7, #96	@ 0x60
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	bd80      	pop	{r7, pc}

0801c4a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b08e      	sub	sp, #56	@ 0x38
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	60f8      	str	r0, [r7, #12]
 801c4ac:	60b9      	str	r1, [r7, #8]
 801c4ae:	607a      	str	r2, [r7, #4]
 801c4b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801c4b2:	68bb      	ldr	r3, [r7, #8]
 801c4b4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	f107 0214 	add.w	r2, r7, #20
 801c4c2:	4611      	mov	r1, r2
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	f7ff fdb7 	bl	801c038 <validate>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c4d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d107      	bne.n	801c4e8 <f_read+0x44>
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	7d5b      	ldrb	r3, [r3, #21]
 801c4dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801c4e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d002      	beq.n	801c4ee <f_read+0x4a>
 801c4e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c4ec:	e115      	b.n	801c71a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	7d1b      	ldrb	r3, [r3, #20]
 801c4f2:	f003 0301 	and.w	r3, r3, #1
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d101      	bne.n	801c4fe <f_read+0x5a>
 801c4fa:	2307      	movs	r3, #7
 801c4fc:	e10d      	b.n	801c71a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	68da      	ldr	r2, [r3, #12]
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	699b      	ldr	r3, [r3, #24]
 801c506:	1ad3      	subs	r3, r2, r3
 801c508:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801c50a:	687a      	ldr	r2, [r7, #4]
 801c50c:	6a3b      	ldr	r3, [r7, #32]
 801c50e:	429a      	cmp	r2, r3
 801c510:	f240 80fe 	bls.w	801c710 <f_read+0x26c>
 801c514:	6a3b      	ldr	r3, [r7, #32]
 801c516:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801c518:	e0fa      	b.n	801c710 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	699b      	ldr	r3, [r3, #24]
 801c51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c522:	2b00      	cmp	r3, #0
 801c524:	f040 80c6 	bne.w	801c6b4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	699b      	ldr	r3, [r3, #24]
 801c52c:	0a5b      	lsrs	r3, r3, #9
 801c52e:	697a      	ldr	r2, [r7, #20]
 801c530:	8952      	ldrh	r2, [r2, #10]
 801c532:	3a01      	subs	r2, #1
 801c534:	4013      	ands	r3, r2
 801c536:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801c538:	69fb      	ldr	r3, [r7, #28]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d12f      	bne.n	801c59e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	699b      	ldr	r3, [r3, #24]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d103      	bne.n	801c54e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	689b      	ldr	r3, [r3, #8]
 801c54a:	633b      	str	r3, [r7, #48]	@ 0x30
 801c54c:	e013      	b.n	801c576 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c552:	2b00      	cmp	r3, #0
 801c554:	d007      	beq.n	801c566 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	699b      	ldr	r3, [r3, #24]
 801c55a:	4619      	mov	r1, r3
 801c55c:	68f8      	ldr	r0, [r7, #12]
 801c55e:	f7fe fefe 	bl	801b35e <clmt_clust>
 801c562:	6338      	str	r0, [r7, #48]	@ 0x30
 801c564:	e007      	b.n	801c576 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801c566:	68fa      	ldr	r2, [r7, #12]
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	69db      	ldr	r3, [r3, #28]
 801c56c:	4619      	mov	r1, r3
 801c56e:	4610      	mov	r0, r2
 801c570:	f7fe fc67 	bl	801ae42 <get_fat>
 801c574:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c578:	2b01      	cmp	r3, #1
 801c57a:	d804      	bhi.n	801c586 <f_read+0xe2>
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	2202      	movs	r2, #2
 801c580:	755a      	strb	r2, [r3, #21]
 801c582:	2302      	movs	r3, #2
 801c584:	e0c9      	b.n	801c71a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c58c:	d104      	bne.n	801c598 <f_read+0xf4>
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	2201      	movs	r2, #1
 801c592:	755a      	strb	r2, [r3, #21]
 801c594:	2301      	movs	r3, #1
 801c596:	e0c0      	b.n	801c71a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c59c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c59e:	697a      	ldr	r2, [r7, #20]
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	69db      	ldr	r3, [r3, #28]
 801c5a4:	4619      	mov	r1, r3
 801c5a6:	4610      	mov	r0, r2
 801c5a8:	f7fe fc2c 	bl	801ae04 <clust2sect>
 801c5ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c5ae:	69bb      	ldr	r3, [r7, #24]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d104      	bne.n	801c5be <f_read+0x11a>
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	2202      	movs	r2, #2
 801c5b8:	755a      	strb	r2, [r3, #21]
 801c5ba:	2302      	movs	r3, #2
 801c5bc:	e0ad      	b.n	801c71a <f_read+0x276>
			sect += csect;
 801c5be:	69ba      	ldr	r2, [r7, #24]
 801c5c0:	69fb      	ldr	r3, [r7, #28]
 801c5c2:	4413      	add	r3, r2
 801c5c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	0a5b      	lsrs	r3, r3, #9
 801c5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801c5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d039      	beq.n	801c646 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c5d2:	69fa      	ldr	r2, [r7, #28]
 801c5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5d6:	4413      	add	r3, r2
 801c5d8:	697a      	ldr	r2, [r7, #20]
 801c5da:	8952      	ldrh	r2, [r2, #10]
 801c5dc:	4293      	cmp	r3, r2
 801c5de:	d905      	bls.n	801c5ec <f_read+0x148>
					cc = fs->csize - csect;
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	895b      	ldrh	r3, [r3, #10]
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	69fb      	ldr	r3, [r7, #28]
 801c5e8:	1ad3      	subs	r3, r2, r3
 801c5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	7858      	ldrb	r0, [r3, #1]
 801c5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5f2:	69ba      	ldr	r2, [r7, #24]
 801c5f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c5f6:	f7fe f85b 	bl	801a6b0 <disk_read>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d004      	beq.n	801c60a <f_read+0x166>
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	2201      	movs	r2, #1
 801c604:	755a      	strb	r2, [r3, #21]
 801c606:	2301      	movs	r3, #1
 801c608:	e087      	b.n	801c71a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	7d1b      	ldrb	r3, [r3, #20]
 801c60e:	b25b      	sxtb	r3, r3
 801c610:	2b00      	cmp	r3, #0
 801c612:	da14      	bge.n	801c63e <f_read+0x19a>
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	6a1a      	ldr	r2, [r3, #32]
 801c618:	69bb      	ldr	r3, [r7, #24]
 801c61a:	1ad3      	subs	r3, r2, r3
 801c61c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c61e:	429a      	cmp	r2, r3
 801c620:	d90d      	bls.n	801c63e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	6a1a      	ldr	r2, [r3, #32]
 801c626:	69bb      	ldr	r3, [r7, #24]
 801c628:	1ad3      	subs	r3, r2, r3
 801c62a:	025b      	lsls	r3, r3, #9
 801c62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c62e:	18d0      	adds	r0, r2, r3
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	3330      	adds	r3, #48	@ 0x30
 801c634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c638:	4619      	mov	r1, r3
 801c63a:	f7fe f919 	bl	801a870 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c640:	025b      	lsls	r3, r3, #9
 801c642:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801c644:	e050      	b.n	801c6e8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	6a1b      	ldr	r3, [r3, #32]
 801c64a:	69ba      	ldr	r2, [r7, #24]
 801c64c:	429a      	cmp	r2, r3
 801c64e:	d02e      	beq.n	801c6ae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	7d1b      	ldrb	r3, [r3, #20]
 801c654:	b25b      	sxtb	r3, r3
 801c656:	2b00      	cmp	r3, #0
 801c658:	da18      	bge.n	801c68c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c65a:	697b      	ldr	r3, [r7, #20]
 801c65c:	7858      	ldrb	r0, [r3, #1]
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	6a1a      	ldr	r2, [r3, #32]
 801c668:	2301      	movs	r3, #1
 801c66a:	f7fe f841 	bl	801a6f0 <disk_write>
 801c66e:	4603      	mov	r3, r0
 801c670:	2b00      	cmp	r3, #0
 801c672:	d004      	beq.n	801c67e <f_read+0x1da>
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	2201      	movs	r2, #1
 801c678:	755a      	strb	r2, [r3, #21]
 801c67a:	2301      	movs	r3, #1
 801c67c:	e04d      	b.n	801c71a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	7d1b      	ldrb	r3, [r3, #20]
 801c682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c686:	b2da      	uxtb	r2, r3
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c68c:	697b      	ldr	r3, [r7, #20]
 801c68e:	7858      	ldrb	r0, [r3, #1]
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c696:	2301      	movs	r3, #1
 801c698:	69ba      	ldr	r2, [r7, #24]
 801c69a:	f7fe f809 	bl	801a6b0 <disk_read>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d004      	beq.n	801c6ae <f_read+0x20a>
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2201      	movs	r2, #1
 801c6a8:	755a      	strb	r2, [r3, #21]
 801c6aa:	2301      	movs	r3, #1
 801c6ac:	e035      	b.n	801c71a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	69ba      	ldr	r2, [r7, #24]
 801c6b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	699b      	ldr	r3, [r3, #24]
 801c6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c6bc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801c6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801c6c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	429a      	cmp	r2, r3
 801c6c8:	d901      	bls.n	801c6ce <f_read+0x22a>
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	699b      	ldr	r3, [r3, #24]
 801c6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c6dc:	4413      	add	r3, r2
 801c6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c6e0:	4619      	mov	r1, r3
 801c6e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c6e4:	f7fe f8c4 	bl	801a870 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801c6e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ec:	4413      	add	r3, r2
 801c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	699a      	ldr	r2, [r3, #24]
 801c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6f6:	441a      	add	r2, r3
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	619a      	str	r2, [r3, #24]
 801c6fc:	683b      	ldr	r3, [r7, #0]
 801c6fe:	681a      	ldr	r2, [r3, #0]
 801c700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c702:	441a      	add	r2, r3
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	601a      	str	r2, [r3, #0]
 801c708:	687a      	ldr	r2, [r7, #4]
 801c70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c70c:	1ad3      	subs	r3, r2, r3
 801c70e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	2b00      	cmp	r3, #0
 801c714:	f47f af01 	bne.w	801c51a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801c718:	2300      	movs	r3, #0
}
 801c71a:	4618      	mov	r0, r3
 801c71c:	3738      	adds	r7, #56	@ 0x38
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}

0801c722 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801c722:	b580      	push	{r7, lr}
 801c724:	b086      	sub	sp, #24
 801c726:	af00      	add	r7, sp, #0
 801c728:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	f107 0208 	add.w	r2, r7, #8
 801c730:	4611      	mov	r1, r2
 801c732:	4618      	mov	r0, r3
 801c734:	f7ff fc80 	bl	801c038 <validate>
 801c738:	4603      	mov	r3, r0
 801c73a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c73c:	7dfb      	ldrb	r3, [r7, #23]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d168      	bne.n	801c814 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	7d1b      	ldrb	r3, [r3, #20]
 801c746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d062      	beq.n	801c814 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	7d1b      	ldrb	r3, [r3, #20]
 801c752:	b25b      	sxtb	r3, r3
 801c754:	2b00      	cmp	r3, #0
 801c756:	da15      	bge.n	801c784 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801c758:	68bb      	ldr	r3, [r7, #8]
 801c75a:	7858      	ldrb	r0, [r3, #1]
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	6a1a      	ldr	r2, [r3, #32]
 801c766:	2301      	movs	r3, #1
 801c768:	f7fd ffc2 	bl	801a6f0 <disk_write>
 801c76c:	4603      	mov	r3, r0
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d001      	beq.n	801c776 <f_sync+0x54>
 801c772:	2301      	movs	r3, #1
 801c774:	e04f      	b.n	801c816 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	7d1b      	ldrb	r3, [r3, #20]
 801c77a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c77e:	b2da      	uxtb	r2, r3
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801c784:	f7fd fcc6 	bl	801a114 <get_fattime>
 801c788:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801c78a:	68ba      	ldr	r2, [r7, #8]
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c790:	4619      	mov	r1, r3
 801c792:	4610      	mov	r0, r2
 801c794:	f7fe fa9a 	bl	801accc <move_window>
 801c798:	4603      	mov	r3, r0
 801c79a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801c79c:	7dfb      	ldrb	r3, [r7, #23]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d138      	bne.n	801c814 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	330b      	adds	r3, #11
 801c7ac:	781a      	ldrb	r2, [r3, #0]
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	330b      	adds	r3, #11
 801c7b2:	f042 0220 	orr.w	r2, r2, #32
 801c7b6:	b2d2      	uxtb	r2, r2
 801c7b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	6818      	ldr	r0, [r3, #0]
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	689b      	ldr	r3, [r3, #8]
 801c7c2:	461a      	mov	r2, r3
 801c7c4:	68f9      	ldr	r1, [r7, #12]
 801c7c6:	f7fe ffa4 	bl	801b712 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	f103 021c 	add.w	r2, r3, #28
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	68db      	ldr	r3, [r3, #12]
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	4610      	mov	r0, r2
 801c7d8:	f7fe f81e 	bl	801a818 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	3316      	adds	r3, #22
 801c7e0:	6939      	ldr	r1, [r7, #16]
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7fe f818 	bl	801a818 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	3312      	adds	r3, #18
 801c7ec:	2100      	movs	r1, #0
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f7fd fff7 	bl	801a7e2 <st_word>
					fs->wflag = 1;
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	2201      	movs	r2, #1
 801c7f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801c7fa:	68bb      	ldr	r3, [r7, #8]
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f7fe fa93 	bl	801ad28 <sync_fs>
 801c802:	4603      	mov	r3, r0
 801c804:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	7d1b      	ldrb	r3, [r3, #20]
 801c80a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c80e:	b2da      	uxtb	r2, r3
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801c814:	7dfb      	ldrb	r3, [r7, #23]
}
 801c816:	4618      	mov	r0, r3
 801c818:	3718      	adds	r7, #24
 801c81a:	46bd      	mov	sp, r7
 801c81c:	bd80      	pop	{r7, pc}

0801c81e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801c81e:	b580      	push	{r7, lr}
 801c820:	b084      	sub	sp, #16
 801c822:	af00      	add	r7, sp, #0
 801c824:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801c826:	6878      	ldr	r0, [r7, #4]
 801c828:	f7ff ff7b 	bl	801c722 <f_sync>
 801c82c:	4603      	mov	r3, r0
 801c82e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801c830:	7bfb      	ldrb	r3, [r7, #15]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d118      	bne.n	801c868 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	f107 0208 	add.w	r2, r7, #8
 801c83c:	4611      	mov	r1, r2
 801c83e:	4618      	mov	r0, r3
 801c840:	f7ff fbfa 	bl	801c038 <validate>
 801c844:	4603      	mov	r3, r0
 801c846:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c848:	7bfb      	ldrb	r3, [r7, #15]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d10c      	bne.n	801c868 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	691b      	ldr	r3, [r3, #16]
 801c852:	4618      	mov	r0, r3
 801c854:	f7fe f996 	bl	801ab84 <dec_lock>
 801c858:	4603      	mov	r3, r0
 801c85a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801c85c:	7bfb      	ldrb	r3, [r7, #15]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d102      	bne.n	801c868 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	2200      	movs	r2, #0
 801c866:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801c868:	7bfb      	ldrb	r3, [r7, #15]
}
 801c86a:	4618      	mov	r0, r3
 801c86c:	3710      	adds	r7, #16
 801c86e:	46bd      	mov	sp, r7
 801c870:	bd80      	pop	{r7, pc}
	...

0801c874 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801c874:	b480      	push	{r7}
 801c876:	b087      	sub	sp, #28
 801c878:	af00      	add	r7, sp, #0
 801c87a:	60f8      	str	r0, [r7, #12]
 801c87c:	60b9      	str	r1, [r7, #8]
 801c87e:	4613      	mov	r3, r2
 801c880:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801c882:	2301      	movs	r3, #1
 801c884:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801c886:	2300      	movs	r3, #0
 801c888:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801c88a:	4b1f      	ldr	r3, [pc, #124]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c88c:	7a5b      	ldrb	r3, [r3, #9]
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	2b00      	cmp	r3, #0
 801c892:	d131      	bne.n	801c8f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801c894:	4b1c      	ldr	r3, [pc, #112]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c896:	7a5b      	ldrb	r3, [r3, #9]
 801c898:	b2db      	uxtb	r3, r3
 801c89a:	461a      	mov	r2, r3
 801c89c:	4b1a      	ldr	r3, [pc, #104]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c89e:	2100      	movs	r1, #0
 801c8a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801c8a2:	4b19      	ldr	r3, [pc, #100]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8a4:	7a5b      	ldrb	r3, [r3, #9]
 801c8a6:	b2db      	uxtb	r3, r3
 801c8a8:	4a17      	ldr	r2, [pc, #92]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8aa:	009b      	lsls	r3, r3, #2
 801c8ac:	4413      	add	r3, r2
 801c8ae:	68fa      	ldr	r2, [r7, #12]
 801c8b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801c8b2:	4b15      	ldr	r3, [pc, #84]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8b4:	7a5b      	ldrb	r3, [r3, #9]
 801c8b6:	b2db      	uxtb	r3, r3
 801c8b8:	461a      	mov	r2, r3
 801c8ba:	4b13      	ldr	r3, [pc, #76]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8bc:	4413      	add	r3, r2
 801c8be:	79fa      	ldrb	r2, [r7, #7]
 801c8c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801c8c2:	4b11      	ldr	r3, [pc, #68]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8c4:	7a5b      	ldrb	r3, [r3, #9]
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	1c5a      	adds	r2, r3, #1
 801c8ca:	b2d1      	uxtb	r1, r2
 801c8cc:	4a0e      	ldr	r2, [pc, #56]	@ (801c908 <FATFS_LinkDriverEx+0x94>)
 801c8ce:	7251      	strb	r1, [r2, #9]
 801c8d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801c8d2:	7dbb      	ldrb	r3, [r7, #22]
 801c8d4:	3330      	adds	r3, #48	@ 0x30
 801c8d6:	b2da      	uxtb	r2, r3
 801c8d8:	68bb      	ldr	r3, [r7, #8]
 801c8da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801c8dc:	68bb      	ldr	r3, [r7, #8]
 801c8de:	3301      	adds	r3, #1
 801c8e0:	223a      	movs	r2, #58	@ 0x3a
 801c8e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801c8e4:	68bb      	ldr	r3, [r7, #8]
 801c8e6:	3302      	adds	r3, #2
 801c8e8:	222f      	movs	r2, #47	@ 0x2f
 801c8ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	3303      	adds	r3, #3
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801c8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	371c      	adds	r7, #28
 801c8fe:	46bd      	mov	sp, r7
 801c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c904:	4770      	bx	lr
 801c906:	bf00      	nop
 801c908:	24000af4 	.word	0x24000af4

0801c90c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801c916:	2200      	movs	r2, #0
 801c918:	6839      	ldr	r1, [r7, #0]
 801c91a:	6878      	ldr	r0, [r7, #4]
 801c91c:	f7ff ffaa 	bl	801c874 <FATFS_LinkDriverEx>
 801c920:	4603      	mov	r3, r0
}
 801c922:	4618      	mov	r0, r3
 801c924:	3708      	adds	r7, #8
 801c926:	46bd      	mov	sp, r7
 801c928:	bd80      	pop	{r7, pc}

0801c92a <_ZdlPvj>:
 801c92a:	f000 ba3b 	b.w	801cda4 <_ZdlPv>

0801c92e <__cxa_guard_acquire>:
 801c92e:	6802      	ldr	r2, [r0, #0]
 801c930:	07d2      	lsls	r2, r2, #31
 801c932:	4603      	mov	r3, r0
 801c934:	d405      	bmi.n	801c942 <__cxa_guard_acquire+0x14>
 801c936:	7842      	ldrb	r2, [r0, #1]
 801c938:	b102      	cbz	r2, 801c93c <__cxa_guard_acquire+0xe>
 801c93a:	deff      	udf	#255	@ 0xff
 801c93c:	2001      	movs	r0, #1
 801c93e:	7058      	strb	r0, [r3, #1]
 801c940:	4770      	bx	lr
 801c942:	2000      	movs	r0, #0
 801c944:	4770      	bx	lr

0801c946 <__cxa_guard_release>:
 801c946:	2301      	movs	r3, #1
 801c948:	6003      	str	r3, [r0, #0]
 801c94a:	4770      	bx	lr

0801c94c <_Znwj>:
 801c94c:	2801      	cmp	r0, #1
 801c94e:	bf38      	it	cc
 801c950:	2001      	movcc	r0, #1
 801c952:	b510      	push	{r4, lr}
 801c954:	4604      	mov	r4, r0
 801c956:	4620      	mov	r0, r4
 801c958:	f000 fad0 	bl	801cefc <malloc>
 801c95c:	b100      	cbz	r0, 801c960 <_Znwj+0x14>
 801c95e:	bd10      	pop	{r4, pc}
 801c960:	f000 fa22 	bl	801cda8 <_ZSt15get_new_handlerv>
 801c964:	b908      	cbnz	r0, 801c96a <_Znwj+0x1e>
 801c966:	f000 fac1 	bl	801ceec <abort>
 801c96a:	4780      	blx	r0
 801c96c:	e7f3      	b.n	801c956 <_Znwj+0xa>

0801c96e <_ZNSaIcEC1Ev>:
 801c96e:	4770      	bx	lr

0801c970 <_ZNSaIcED1Ev>:
 801c970:	4770      	bx	lr

0801c972 <_ZSt17__throw_bad_allocv>:
 801c972:	b508      	push	{r3, lr}
 801c974:	f000 faba 	bl	801ceec <abort>

0801c978 <_ZSt28__throw_bad_array_new_lengthv>:
 801c978:	b508      	push	{r3, lr}
 801c97a:	f000 fab7 	bl	801ceec <abort>

0801c97e <_ZSt19__throw_logic_errorPKc>:
 801c97e:	b508      	push	{r3, lr}
 801c980:	f000 fab4 	bl	801ceec <abort>

0801c984 <_ZSt20__throw_length_errorPKc>:
 801c984:	b508      	push	{r3, lr}
 801c986:	f000 fab1 	bl	801ceec <abort>

0801c98a <_ZSt25__throw_bad_function_callv>:
 801c98a:	b508      	push	{r3, lr}
 801c98c:	f000 faae 	bl	801ceec <abort>

0801c990 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 801c990:	4901      	ldr	r1, [pc, #4]	@ (801c998 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 801c992:	f000 ba95 	b.w	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801c996:	bf00      	nop
 801c998:	0801ec38 	.word	0x0801ec38

0801c99c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801c99c:	b10a      	cbz	r2, 801c9a2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801c99e:	f000 be9c 	b.w	801d6da <memcpy>
 801c9a2:	4770      	bx	lr

0801c9a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801c9a4:	6001      	str	r1, [r0, #0]
 801c9a6:	4770      	bx	lr

0801c9a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801c9a8:	6800      	ldr	r0, [r0, #0]
 801c9aa:	4770      	bx	lr

0801c9ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801c9ac:	3008      	adds	r0, #8
 801c9ae:	4770      	bx	lr

0801c9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801c9b0:	6081      	str	r1, [r0, #8]
 801c9b2:	4770      	bx	lr

0801c9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801c9b4:	6803      	ldr	r3, [r0, #0]
 801c9b6:	6041      	str	r1, [r0, #4]
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	545a      	strb	r2, [r3, r1]
 801c9bc:	4770      	bx	lr

0801c9be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801c9be:	f850 3b08 	ldr.w	r3, [r0], #8
 801c9c2:	1a1b      	subs	r3, r3, r0
 801c9c4:	4258      	negs	r0, r3
 801c9c6:	4158      	adcs	r0, r3
 801c9c8:	4770      	bx	lr
	...

0801c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801c9cc:	b508      	push	{r3, lr}
 801c9ce:	680b      	ldr	r3, [r1, #0]
 801c9d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c9d4:	d302      	bcc.n	801c9dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801c9d6:	480d      	ldr	r0, [pc, #52]	@ (801ca0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801c9d8:	f7ff ffd4 	bl	801c984 <_ZSt20__throw_length_errorPKc>
 801c9dc:	4293      	cmp	r3, r2
 801c9de:	d90b      	bls.n	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c9e0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801c9e4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801c9e8:	d206      	bcs.n	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c9ea:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801c9ee:	bf2a      	itet	cs
 801c9f0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801c9f4:	6008      	strcc	r0, [r1, #0]
 801c9f6:	600b      	strcs	r3, [r1, #0]
 801c9f8:	6808      	ldr	r0, [r1, #0]
 801c9fa:	3001      	adds	r0, #1
 801c9fc:	d501      	bpl.n	801ca02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801c9fe:	f7ff ffb8 	bl	801c972 <_ZSt17__throw_bad_allocv>
 801ca02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ca06:	f7ff bfa1 	b.w	801c94c <_Znwj>
 801ca0a:	bf00      	nop
 801ca0c:	0801ec40 	.word	0x0801ec40

0801ca10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801ca10:	b510      	push	{r4, lr}
 801ca12:	4604      	mov	r4, r0
 801ca14:	f7ff ffd3 	bl	801c9be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801ca18:	b920      	cbnz	r0, 801ca24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801ca1a:	6820      	ldr	r0, [r4, #0]
 801ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca20:	f000 b9c0 	b.w	801cda4 <_ZdlPv>
 801ca24:	bd10      	pop	{r4, pc}

0801ca26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801ca26:	6840      	ldr	r0, [r0, #4]
 801ca28:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801ca2c:	3901      	subs	r1, #1
 801ca2e:	1a09      	subs	r1, r1, r0
 801ca30:	4291      	cmp	r1, r2
 801ca32:	b508      	push	{r3, lr}
 801ca34:	d202      	bcs.n	801ca3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801ca36:	4618      	mov	r0, r3
 801ca38:	f7ff ffa4 	bl	801c984 <_ZSt20__throw_length_errorPKc>
 801ca3c:	bd08      	pop	{r3, pc}

0801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801ca3e:	2a01      	cmp	r2, #1
 801ca40:	b410      	push	{r4}
 801ca42:	d104      	bne.n	801ca4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801ca44:	780a      	ldrb	r2, [r1, #0]
 801ca46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca4a:	7002      	strb	r2, [r0, #0]
 801ca4c:	4770      	bx	lr
 801ca4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca52:	f7ff bfa3 	b.w	801c99c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801ca56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801ca56:	2a01      	cmp	r2, #1
 801ca58:	b430      	push	{r4, r5}
 801ca5a:	d103      	bne.n	801ca64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801ca5c:	780b      	ldrb	r3, [r1, #0]
 801ca5e:	7003      	strb	r3, [r0, #0]
 801ca60:	bc30      	pop	{r4, r5}
 801ca62:	4770      	bx	lr
 801ca64:	2a00      	cmp	r2, #0
 801ca66:	d0fb      	beq.n	801ca60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801ca68:	bc30      	pop	{r4, r5}
 801ca6a:	f000 bd4d 	b.w	801d508 <memmove>

0801ca6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801ca6e:	460b      	mov	r3, r1
 801ca70:	2b01      	cmp	r3, #1
 801ca72:	b410      	push	{r4}
 801ca74:	4611      	mov	r1, r2
 801ca76:	4604      	mov	r4, r0
 801ca78:	d103      	bne.n	801ca82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801ca7a:	7022      	strb	r2, [r4, #0]
 801ca7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca80:	4770      	bx	lr
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d0fa      	beq.n	801ca7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801ca86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca8a:	461a      	mov	r2, r3
 801ca8c:	f000 bd56 	b.w	801d53c <memset>

0801ca90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801ca90:	b508      	push	{r3, lr}
 801ca92:	1a52      	subs	r2, r2, r1
 801ca94:	f7ff ffd3 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801ca98:	bd08      	pop	{r3, pc}

0801ca9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801ca9a:	b508      	push	{r3, lr}
 801ca9c:	1a52      	subs	r2, r2, r1
 801ca9e:	f7ff ffce 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801caa2:	bd08      	pop	{r3, pc}

0801caa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801caa4:	b510      	push	{r4, lr}
 801caa6:	4604      	mov	r4, r0
 801caa8:	f7ff ffb2 	bl	801ca10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801caac:	4620      	mov	r0, r4
 801caae:	bd10      	pop	{r4, pc}

0801cab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cab2:	460c      	mov	r4, r1
 801cab4:	4605      	mov	r5, r0
 801cab6:	f7ff ff82 	bl	801c9be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801caba:	4606      	mov	r6, r0
 801cabc:	4620      	mov	r0, r4
 801cabe:	f7ff ff7e 	bl	801c9be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801cac2:	b190      	cbz	r0, 801caea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801cac4:	42a5      	cmp	r5, r4
 801cac6:	d00a      	beq.n	801cade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801cac8:	6862      	ldr	r2, [r4, #4]
 801caca:	b11a      	cbz	r2, 801cad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801cacc:	6821      	ldr	r1, [r4, #0]
 801cace:	6828      	ldr	r0, [r5, #0]
 801cad0:	f7ff ffb5 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cad4:	6863      	ldr	r3, [r4, #4]
 801cad6:	682a      	ldr	r2, [r5, #0]
 801cad8:	606b      	str	r3, [r5, #4]
 801cada:	2100      	movs	r1, #0
 801cadc:	54d1      	strb	r1, [r2, r3]
 801cade:	6822      	ldr	r2, [r4, #0]
 801cae0:	2300      	movs	r3, #0
 801cae2:	6063      	str	r3, [r4, #4]
 801cae4:	7013      	strb	r3, [r2, #0]
 801cae6:	4628      	mov	r0, r5
 801cae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801caea:	b90e      	cbnz	r6, 801caf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801caec:	6828      	ldr	r0, [r5, #0]
 801caee:	68af      	ldr	r7, [r5, #8]
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	602b      	str	r3, [r5, #0]
 801caf4:	6863      	ldr	r3, [r4, #4]
 801caf6:	606b      	str	r3, [r5, #4]
 801caf8:	68a3      	ldr	r3, [r4, #8]
 801cafa:	60ab      	str	r3, [r5, #8]
 801cafc:	b110      	cbz	r0, 801cb04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801cafe:	6020      	str	r0, [r4, #0]
 801cb00:	60a7      	str	r7, [r4, #8]
 801cb02:	e7ec      	b.n	801cade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801cb04:	f104 0308 	add.w	r3, r4, #8
 801cb08:	6023      	str	r3, [r4, #0]
 801cb0a:	e7e8      	b.n	801cade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801cb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801cb0c:	b510      	push	{r4, lr}
 801cb0e:	4604      	mov	r4, r0
 801cb10:	f7ff ff55 	bl	801c9be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801cb14:	b908      	cbnz	r0, 801cb1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801cb16:	68a0      	ldr	r0, [r4, #8]
 801cb18:	bd10      	pop	{r4, pc}
 801cb1a:	200f      	movs	r0, #15
 801cb1c:	e7fc      	b.n	801cb18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801cb1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801cb1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cb24:	461f      	mov	r7, r3
 801cb26:	6843      	ldr	r3, [r0, #4]
 801cb28:	eb01 0802 	add.w	r8, r1, r2
 801cb2c:	1ab2      	subs	r2, r6, r2
 801cb2e:	441a      	add	r2, r3
 801cb30:	4604      	mov	r4, r0
 801cb32:	460d      	mov	r5, r1
 801cb34:	eba3 0908 	sub.w	r9, r3, r8
 801cb38:	9201      	str	r2, [sp, #4]
 801cb3a:	f7ff ffe7 	bl	801cb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801cb3e:	a901      	add	r1, sp, #4
 801cb40:	4602      	mov	r2, r0
 801cb42:	4620      	mov	r0, r4
 801cb44:	f7ff ff42 	bl	801c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801cb48:	4682      	mov	sl, r0
 801cb4a:	b11d      	cbz	r5, 801cb54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801cb4c:	6821      	ldr	r1, [r4, #0]
 801cb4e:	462a      	mov	r2, r5
 801cb50:	f7ff ff75 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cb54:	b137      	cbz	r7, 801cb64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801cb56:	b12e      	cbz	r6, 801cb64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801cb58:	4632      	mov	r2, r6
 801cb5a:	4639      	mov	r1, r7
 801cb5c:	eb0a 0005 	add.w	r0, sl, r5
 801cb60:	f7ff ff6d 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cb64:	f1b9 0f00 	cmp.w	r9, #0
 801cb68:	d007      	beq.n	801cb7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801cb6a:	6821      	ldr	r1, [r4, #0]
 801cb6c:	4435      	add	r5, r6
 801cb6e:	464a      	mov	r2, r9
 801cb70:	4441      	add	r1, r8
 801cb72:	eb0a 0005 	add.w	r0, sl, r5
 801cb76:	f7ff ff62 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cb7a:	4620      	mov	r0, r4
 801cb7c:	f7ff ff48 	bl	801ca10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801cb80:	9b01      	ldr	r3, [sp, #4]
 801cb82:	f8c4 a000 	str.w	sl, [r4]
 801cb86:	60a3      	str	r3, [r4, #8]
 801cb88:	b002      	add	sp, #8
 801cb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801cb8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801cb8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb90:	4604      	mov	r4, r0
 801cb92:	9101      	str	r1, [sp, #4]
 801cb94:	f7ff ffba 	bl	801cb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801cb98:	9b01      	ldr	r3, [sp, #4]
 801cb9a:	4283      	cmp	r3, r0
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	d90f      	bls.n	801cbc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801cba0:	a901      	add	r1, sp, #4
 801cba2:	4620      	mov	r0, r4
 801cba4:	f7ff ff12 	bl	801c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801cba8:	6862      	ldr	r2, [r4, #4]
 801cbaa:	6821      	ldr	r1, [r4, #0]
 801cbac:	3201      	adds	r2, #1
 801cbae:	4605      	mov	r5, r0
 801cbb0:	f7ff ff45 	bl	801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cbb4:	4620      	mov	r0, r4
 801cbb6:	f7ff ff2b 	bl	801ca10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801cbba:	9b01      	ldr	r3, [sp, #4]
 801cbbc:	6025      	str	r5, [r4, #0]
 801cbbe:	60a3      	str	r3, [r4, #8]
 801cbc0:	b003      	add	sp, #12
 801cbc2:	bd30      	pop	{r4, r5, pc}

0801cbc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801cbc4:	6802      	ldr	r2, [r0, #0]
 801cbc6:	2300      	movs	r3, #0
 801cbc8:	6043      	str	r3, [r0, #4]
 801cbca:	7013      	strb	r3, [r2, #0]
 801cbcc:	4770      	bx	lr

0801cbce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801cbce:	6800      	ldr	r0, [r0, #0]
 801cbd0:	4408      	add	r0, r1
 801cbd2:	4770      	bx	lr

0801cbd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801cbd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cbd8:	4616      	mov	r6, r2
 801cbda:	461d      	mov	r5, r3
 801cbdc:	4604      	mov	r4, r0
 801cbde:	4b1b      	ldr	r3, [pc, #108]	@ (801cc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801cbe0:	462a      	mov	r2, r5
 801cbe2:	460f      	mov	r7, r1
 801cbe4:	4631      	mov	r1, r6
 801cbe6:	f7ff ff1e 	bl	801ca26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801cbea:	4620      	mov	r0, r4
 801cbec:	f7ff ff8e 	bl	801cb0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801cbf0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801cbf4:	eba5 0806 	sub.w	r8, r5, r6
 801cbf8:	44c8      	add	r8, r9
 801cbfa:	4540      	cmp	r0, r8
 801cbfc:	d31d      	bcc.n	801cc3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801cbfe:	19f3      	adds	r3, r6, r7
 801cc00:	ebb9 0203 	subs.w	r2, r9, r3
 801cc04:	d007      	beq.n	801cc16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cc06:	42ae      	cmp	r6, r5
 801cc08:	d005      	beq.n	801cc16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cc0a:	6820      	ldr	r0, [r4, #0]
 801cc0c:	4438      	add	r0, r7
 801cc0e:	1981      	adds	r1, r0, r6
 801cc10:	4428      	add	r0, r5
 801cc12:	f7ff ff20 	bl	801ca56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801cc16:	b135      	cbz	r5, 801cc26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801cc18:	6820      	ldr	r0, [r4, #0]
 801cc1a:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801cc1e:	4629      	mov	r1, r5
 801cc20:	4438      	add	r0, r7
 801cc22:	f7ff ff24 	bl	801ca6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801cc26:	6823      	ldr	r3, [r4, #0]
 801cc28:	f8c4 8004 	str.w	r8, [r4, #4]
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	4620      	mov	r0, r4
 801cc30:	f803 2008 	strb.w	r2, [r3, r8]
 801cc34:	b003      	add	sp, #12
 801cc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc3a:	9500      	str	r5, [sp, #0]
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	4632      	mov	r2, r6
 801cc40:	4639      	mov	r1, r7
 801cc42:	4620      	mov	r0, r4
 801cc44:	f7ff ff6b 	bl	801cb1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801cc48:	e7e5      	b.n	801cc16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cc4a:	bf00      	nop
 801cc4c:	0801ec58 	.word	0x0801ec58

0801cc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801cc50:	b507      	push	{r0, r1, r2, lr}
 801cc52:	9200      	str	r2, [sp, #0]
 801cc54:	460b      	mov	r3, r1
 801cc56:	2200      	movs	r2, #0
 801cc58:	6841      	ldr	r1, [r0, #4]
 801cc5a:	f7ff ffbb 	bl	801cbd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801cc5e:	b003      	add	sp, #12
 801cc60:	f85d fb04 	ldr.w	pc, [sp], #4

0801cc64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801cc64:	6800      	ldr	r0, [r0, #0]
 801cc66:	4770      	bx	lr

0801cc68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801cc68:	6001      	str	r1, [r0, #0]
 801cc6a:	4770      	bx	lr

0801cc6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801cc6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc6e:	1a53      	subs	r3, r2, r1
 801cc70:	2b0f      	cmp	r3, #15
 801cc72:	4604      	mov	r4, r0
 801cc74:	460d      	mov	r5, r1
 801cc76:	4616      	mov	r6, r2
 801cc78:	9301      	str	r3, [sp, #4]
 801cc7a:	d906      	bls.n	801cc8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	a901      	add	r1, sp, #4
 801cc80:	f7ff fea4 	bl	801c9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801cc84:	9b01      	ldr	r3, [sp, #4]
 801cc86:	6020      	str	r0, [r4, #0]
 801cc88:	60a3      	str	r3, [r4, #8]
 801cc8a:	4632      	mov	r2, r6
 801cc8c:	4629      	mov	r1, r5
 801cc8e:	6820      	ldr	r0, [r4, #0]
 801cc90:	f7ff fefe 	bl	801ca90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801cc94:	9b01      	ldr	r3, [sp, #4]
 801cc96:	6822      	ldr	r2, [r4, #0]
 801cc98:	6063      	str	r3, [r4, #4]
 801cc9a:	2100      	movs	r1, #0
 801cc9c:	54d1      	strb	r1, [r2, r3]
 801cc9e:	b002      	add	sp, #8
 801cca0:	bd70      	pop	{r4, r5, r6, pc}

0801cca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801cca2:	f100 0208 	add.w	r2, r0, #8
 801cca6:	b510      	push	{r4, lr}
 801cca8:	6002      	str	r2, [r0, #0]
 801ccaa:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ccae:	4604      	mov	r4, r0
 801ccb0:	f04f 0300 	mov.w	r3, #0
 801ccb4:	440a      	add	r2, r1
 801ccb6:	f7ff ffd9 	bl	801cc6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801ccba:	4620      	mov	r0, r4
 801ccbc:	bd10      	pop	{r4, pc}

0801ccbe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801ccbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ccc0:	2400      	movs	r4, #0
 801ccc2:	2310      	movs	r3, #16
 801ccc4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ccc8:	6803      	ldr	r3, [r0, #0]
 801ccca:	4615      	mov	r5, r2
 801cccc:	699e      	ldr	r6, [r3, #24]
 801ccce:	6812      	ldr	r2, [r2, #0]
 801ccd0:	466b      	mov	r3, sp
 801ccd2:	e9cd 4400 	strd	r4, r4, [sp]
 801ccd6:	47b0      	blx	r6
 801ccd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ccdc:	f003 0306 	and.w	r3, r3, #6
 801cce0:	2b06      	cmp	r3, #6
 801cce2:	bf03      	ittte	eq
 801cce4:	9b00      	ldreq	r3, [sp, #0]
 801cce6:	602b      	streq	r3, [r5, #0]
 801cce8:	2001      	moveq	r0, #1
 801ccea:	4620      	movne	r0, r4
 801ccec:	b004      	add	sp, #16
 801ccee:	bd70      	pop	{r4, r5, r6, pc}

0801ccf0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801ccf0:	9800      	ldr	r0, [sp, #0]
 801ccf2:	4290      	cmp	r0, r2
 801ccf4:	bf0c      	ite	eq
 801ccf6:	2006      	moveq	r0, #6
 801ccf8:	2001      	movne	r0, #1
 801ccfa:	4770      	bx	lr

0801ccfc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801ccfc:	b510      	push	{r4, lr}
 801ccfe:	4b03      	ldr	r3, [pc, #12]	@ (801cd0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801cd00:	6003      	str	r3, [r0, #0]
 801cd02:	4604      	mov	r4, r0
 801cd04:	f000 f8d9 	bl	801ceba <_ZNSt9type_infoD1Ev>
 801cd08:	4620      	mov	r0, r4
 801cd0a:	bd10      	pop	{r4, pc}
 801cd0c:	0801ecac 	.word	0x0801ecac

0801cd10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801cd10:	b510      	push	{r4, lr}
 801cd12:	4604      	mov	r4, r0
 801cd14:	f7ff fff2 	bl	801ccfc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801cd18:	4620      	mov	r0, r4
 801cd1a:	2108      	movs	r1, #8
 801cd1c:	f7ff fe05 	bl	801c92a <_ZdlPvj>
 801cd20:	4620      	mov	r0, r4
 801cd22:	bd10      	pop	{r4, pc}

0801cd24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd28:	461f      	mov	r7, r3
 801cd2a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801cd2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cd32:	4598      	cmp	r8, r3
 801cd34:	4606      	mov	r6, r0
 801cd36:	4615      	mov	r5, r2
 801cd38:	d107      	bne.n	801cd4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cd3a:	9907      	ldr	r1, [sp, #28]
 801cd3c:	f000 f8c0 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801cd40:	b118      	cbz	r0, 801cd4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cd42:	7165      	strb	r5, [r4, #5]
 801cd44:	2000      	movs	r0, #0
 801cd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd4a:	4639      	mov	r1, r7
 801cd4c:	4630      	mov	r0, r6
 801cd4e:	f000 f8b7 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801cd52:	2800      	cmp	r0, #0
 801cd54:	d0f6      	beq.n	801cd44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801cd56:	2301      	movs	r3, #1
 801cd58:	f8c4 8000 	str.w	r8, [r4]
 801cd5c:	7125      	strb	r5, [r4, #4]
 801cd5e:	71a3      	strb	r3, [r4, #6]
 801cd60:	e7f0      	b.n	801cd44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801cd62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801cd62:	b538      	push	{r3, r4, r5, lr}
 801cd64:	4615      	mov	r5, r2
 801cd66:	461c      	mov	r4, r3
 801cd68:	f000 f8aa 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801cd6c:	b120      	cbz	r0, 801cd78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801cd6e:	2308      	movs	r3, #8
 801cd70:	60e3      	str	r3, [r4, #12]
 801cd72:	2306      	movs	r3, #6
 801cd74:	6025      	str	r5, [r4, #0]
 801cd76:	7123      	strb	r3, [r4, #4]
 801cd78:	bd38      	pop	{r3, r4, r5, pc}

0801cd7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801cd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd7e:	4605      	mov	r5, r0
 801cd80:	460c      	mov	r4, r1
 801cd82:	4616      	mov	r6, r2
 801cd84:	461f      	mov	r7, r3
 801cd86:	f000 f89b 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801cd8a:	b948      	cbnz	r0, 801cda0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cd8c:	2f03      	cmp	r7, #3
 801cd8e:	d807      	bhi.n	801cda0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cd90:	6823      	ldr	r3, [r4, #0]
 801cd92:	4632      	mov	r2, r6
 801cd94:	4629      	mov	r1, r5
 801cd96:	4620      	mov	r0, r4
 801cd98:	695b      	ldr	r3, [r3, #20]
 801cd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd9e:	4718      	bx	r3
 801cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cda4 <_ZdlPv>:
 801cda4:	f000 b8b2 	b.w	801cf0c <free>

0801cda8 <_ZSt15get_new_handlerv>:
 801cda8:	4b02      	ldr	r3, [pc, #8]	@ (801cdb4 <_ZSt15get_new_handlerv+0xc>)
 801cdaa:	6818      	ldr	r0, [r3, #0]
 801cdac:	f3bf 8f5b 	dmb	ish
 801cdb0:	4770      	bx	lr
 801cdb2:	bf00      	nop
 801cdb4:	24000b00 	.word	0x24000b00

0801cdb8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801cdb8:	b510      	push	{r4, lr}
 801cdba:	4b03      	ldr	r3, [pc, #12]	@ (801cdc8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801cdbc:	6003      	str	r3, [r0, #0]
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	f7ff ff9c 	bl	801ccfc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	bd10      	pop	{r4, pc}
 801cdc8:	0801ed0c 	.word	0x0801ed0c

0801cdcc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801cdcc:	b510      	push	{r4, lr}
 801cdce:	4604      	mov	r4, r0
 801cdd0:	f7ff fff2 	bl	801cdb8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	210c      	movs	r1, #12
 801cdd8:	f7ff fda7 	bl	801c92a <_ZdlPvj>
 801cddc:	4620      	mov	r0, r4
 801cdde:	bd10      	pop	{r4, pc}

0801cde0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801cde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cde4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cde8:	4590      	cmp	r8, r2
 801cdea:	4606      	mov	r6, r0
 801cdec:	460f      	mov	r7, r1
 801cdee:	4615      	mov	r5, r2
 801cdf0:	461c      	mov	r4, r3
 801cdf2:	d00b      	beq.n	801ce0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801cdf4:	68b0      	ldr	r0, [r6, #8]
 801cdf6:	6803      	ldr	r3, [r0, #0]
 801cdf8:	f8cd 8018 	str.w	r8, [sp, #24]
 801cdfc:	6a1e      	ldr	r6, [r3, #32]
 801cdfe:	462a      	mov	r2, r5
 801ce00:	4623      	mov	r3, r4
 801ce02:	4639      	mov	r1, r7
 801ce04:	46b4      	mov	ip, r6
 801ce06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce0a:	4760      	bx	ip
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	f000 f857 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801ce12:	2800      	cmp	r0, #0
 801ce14:	d0ee      	beq.n	801cdf4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801ce16:	2006      	movs	r0, #6
 801ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ce1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801ce1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce20:	460d      	mov	r5, r1
 801ce22:	4619      	mov	r1, r3
 801ce24:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801ce28:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801ce2c:	4681      	mov	r9, r0
 801ce2e:	4617      	mov	r7, r2
 801ce30:	4698      	mov	r8, r3
 801ce32:	f000 f845 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801ce36:	b190      	cbz	r0, 801ce5e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801ce38:	2d00      	cmp	r5, #0
 801ce3a:	6034      	str	r4, [r6, #0]
 801ce3c:	7137      	strb	r7, [r6, #4]
 801ce3e:	db09      	blt.n	801ce54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801ce40:	442c      	add	r4, r5
 801ce42:	45a2      	cmp	sl, r4
 801ce44:	bf14      	ite	ne
 801ce46:	2401      	movne	r4, #1
 801ce48:	2406      	moveq	r4, #6
 801ce4a:	71b4      	strb	r4, [r6, #6]
 801ce4c:	2000      	movs	r0, #0
 801ce4e:	b001      	add	sp, #4
 801ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce54:	3502      	adds	r5, #2
 801ce56:	d1f9      	bne.n	801ce4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801ce58:	2301      	movs	r3, #1
 801ce5a:	71b3      	strb	r3, [r6, #6]
 801ce5c:	e7f6      	b.n	801ce4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801ce5e:	4554      	cmp	r4, sl
 801ce60:	d106      	bne.n	801ce70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801ce62:	4659      	mov	r1, fp
 801ce64:	4648      	mov	r0, r9
 801ce66:	f000 f82b 	bl	801cec0 <_ZNKSt9type_info7__equalERKS_>
 801ce6a:	b108      	cbz	r0, 801ce70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801ce6c:	7177      	strb	r7, [r6, #5]
 801ce6e:	e7ed      	b.n	801ce4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801ce70:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801ce74:	6803      	ldr	r3, [r0, #0]
 801ce76:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801ce7a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801ce7e:	69dc      	ldr	r4, [r3, #28]
 801ce80:	463a      	mov	r2, r7
 801ce82:	4643      	mov	r3, r8
 801ce84:	4629      	mov	r1, r5
 801ce86:	46a4      	mov	ip, r4
 801ce88:	b001      	add	sp, #4
 801ce8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce8e:	4760      	bx	ip

0801ce90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801ce90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce94:	4607      	mov	r7, r0
 801ce96:	460c      	mov	r4, r1
 801ce98:	4615      	mov	r5, r2
 801ce9a:	461e      	mov	r6, r3
 801ce9c:	f7ff ff61 	bl	801cd62 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801cea0:	b948      	cbnz	r0, 801ceb6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801cea2:	68b8      	ldr	r0, [r7, #8]
 801cea4:	6803      	ldr	r3, [r0, #0]
 801cea6:	699f      	ldr	r7, [r3, #24]
 801cea8:	462a      	mov	r2, r5
 801ceaa:	4633      	mov	r3, r6
 801ceac:	4621      	mov	r1, r4
 801ceae:	46bc      	mov	ip, r7
 801ceb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ceb4:	4760      	bx	ip
 801ceb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ceba <_ZNSt9type_infoD1Ev>:
 801ceba:	4770      	bx	lr

0801cebc <_ZNKSt9type_info14__is_pointer_pEv>:
 801cebc:	2000      	movs	r0, #0
 801cebe:	4770      	bx	lr

0801cec0 <_ZNKSt9type_info7__equalERKS_>:
 801cec0:	4281      	cmp	r1, r0
 801cec2:	b508      	push	{r3, lr}
 801cec4:	d00e      	beq.n	801cee4 <_ZNKSt9type_info7__equalERKS_+0x24>
 801cec6:	6840      	ldr	r0, [r0, #4]
 801cec8:	7803      	ldrb	r3, [r0, #0]
 801ceca:	2b2a      	cmp	r3, #42	@ 0x2a
 801cecc:	d00c      	beq.n	801cee8 <_ZNKSt9type_info7__equalERKS_+0x28>
 801cece:	6849      	ldr	r1, [r1, #4]
 801ced0:	780b      	ldrb	r3, [r1, #0]
 801ced2:	2b2a      	cmp	r3, #42	@ 0x2a
 801ced4:	bf08      	it	eq
 801ced6:	3101      	addeq	r1, #1
 801ced8:	f7e3 fa02 	bl	80002e0 <strcmp>
 801cedc:	fab0 f080 	clz	r0, r0
 801cee0:	0940      	lsrs	r0, r0, #5
 801cee2:	bd08      	pop	{r3, pc}
 801cee4:	2001      	movs	r0, #1
 801cee6:	e7fc      	b.n	801cee2 <_ZNKSt9type_info7__equalERKS_+0x22>
 801cee8:	2000      	movs	r0, #0
 801ceea:	e7fa      	b.n	801cee2 <_ZNKSt9type_info7__equalERKS_+0x22>

0801ceec <abort>:
 801ceec:	b508      	push	{r3, lr}
 801ceee:	2006      	movs	r0, #6
 801cef0:	f000 fb54 	bl	801d59c <raise>
 801cef4:	2001      	movs	r0, #1
 801cef6:	f7ee fd93 	bl	800ba20 <_exit>
	...

0801cefc <malloc>:
 801cefc:	4b02      	ldr	r3, [pc, #8]	@ (801cf08 <malloc+0xc>)
 801cefe:	4601      	mov	r1, r0
 801cf00:	6818      	ldr	r0, [r3, #0]
 801cf02:	f000 b82d 	b.w	801cf60 <_malloc_r>
 801cf06:	bf00      	nop
 801cf08:	24000038 	.word	0x24000038

0801cf0c <free>:
 801cf0c:	4b02      	ldr	r3, [pc, #8]	@ (801cf18 <free+0xc>)
 801cf0e:	4601      	mov	r1, r0
 801cf10:	6818      	ldr	r0, [r3, #0]
 801cf12:	f000 bbf1 	b.w	801d6f8 <_free_r>
 801cf16:	bf00      	nop
 801cf18:	24000038 	.word	0x24000038

0801cf1c <sbrk_aligned>:
 801cf1c:	b570      	push	{r4, r5, r6, lr}
 801cf1e:	4e0f      	ldr	r6, [pc, #60]	@ (801cf5c <sbrk_aligned+0x40>)
 801cf20:	460c      	mov	r4, r1
 801cf22:	6831      	ldr	r1, [r6, #0]
 801cf24:	4605      	mov	r5, r0
 801cf26:	b911      	cbnz	r1, 801cf2e <sbrk_aligned+0x12>
 801cf28:	f000 fb88 	bl	801d63c <_sbrk_r>
 801cf2c:	6030      	str	r0, [r6, #0]
 801cf2e:	4621      	mov	r1, r4
 801cf30:	4628      	mov	r0, r5
 801cf32:	f000 fb83 	bl	801d63c <_sbrk_r>
 801cf36:	1c43      	adds	r3, r0, #1
 801cf38:	d103      	bne.n	801cf42 <sbrk_aligned+0x26>
 801cf3a:	f04f 34ff 	mov.w	r4, #4294967295
 801cf3e:	4620      	mov	r0, r4
 801cf40:	bd70      	pop	{r4, r5, r6, pc}
 801cf42:	1cc4      	adds	r4, r0, #3
 801cf44:	f024 0403 	bic.w	r4, r4, #3
 801cf48:	42a0      	cmp	r0, r4
 801cf4a:	d0f8      	beq.n	801cf3e <sbrk_aligned+0x22>
 801cf4c:	1a21      	subs	r1, r4, r0
 801cf4e:	4628      	mov	r0, r5
 801cf50:	f000 fb74 	bl	801d63c <_sbrk_r>
 801cf54:	3001      	adds	r0, #1
 801cf56:	d1f2      	bne.n	801cf3e <sbrk_aligned+0x22>
 801cf58:	e7ef      	b.n	801cf3a <sbrk_aligned+0x1e>
 801cf5a:	bf00      	nop
 801cf5c:	24000b04 	.word	0x24000b04

0801cf60 <_malloc_r>:
 801cf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf64:	1ccd      	adds	r5, r1, #3
 801cf66:	f025 0503 	bic.w	r5, r5, #3
 801cf6a:	3508      	adds	r5, #8
 801cf6c:	2d0c      	cmp	r5, #12
 801cf6e:	bf38      	it	cc
 801cf70:	250c      	movcc	r5, #12
 801cf72:	2d00      	cmp	r5, #0
 801cf74:	4606      	mov	r6, r0
 801cf76:	db01      	blt.n	801cf7c <_malloc_r+0x1c>
 801cf78:	42a9      	cmp	r1, r5
 801cf7a:	d904      	bls.n	801cf86 <_malloc_r+0x26>
 801cf7c:	230c      	movs	r3, #12
 801cf7e:	6033      	str	r3, [r6, #0]
 801cf80:	2000      	movs	r0, #0
 801cf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d05c <_malloc_r+0xfc>
 801cf8a:	f000 f869 	bl	801d060 <__malloc_lock>
 801cf8e:	f8d8 3000 	ldr.w	r3, [r8]
 801cf92:	461c      	mov	r4, r3
 801cf94:	bb44      	cbnz	r4, 801cfe8 <_malloc_r+0x88>
 801cf96:	4629      	mov	r1, r5
 801cf98:	4630      	mov	r0, r6
 801cf9a:	f7ff ffbf 	bl	801cf1c <sbrk_aligned>
 801cf9e:	1c43      	adds	r3, r0, #1
 801cfa0:	4604      	mov	r4, r0
 801cfa2:	d158      	bne.n	801d056 <_malloc_r+0xf6>
 801cfa4:	f8d8 4000 	ldr.w	r4, [r8]
 801cfa8:	4627      	mov	r7, r4
 801cfaa:	2f00      	cmp	r7, #0
 801cfac:	d143      	bne.n	801d036 <_malloc_r+0xd6>
 801cfae:	2c00      	cmp	r4, #0
 801cfb0:	d04b      	beq.n	801d04a <_malloc_r+0xea>
 801cfb2:	6823      	ldr	r3, [r4, #0]
 801cfb4:	4639      	mov	r1, r7
 801cfb6:	4630      	mov	r0, r6
 801cfb8:	eb04 0903 	add.w	r9, r4, r3
 801cfbc:	f000 fb3e 	bl	801d63c <_sbrk_r>
 801cfc0:	4581      	cmp	r9, r0
 801cfc2:	d142      	bne.n	801d04a <_malloc_r+0xea>
 801cfc4:	6821      	ldr	r1, [r4, #0]
 801cfc6:	1a6d      	subs	r5, r5, r1
 801cfc8:	4629      	mov	r1, r5
 801cfca:	4630      	mov	r0, r6
 801cfcc:	f7ff ffa6 	bl	801cf1c <sbrk_aligned>
 801cfd0:	3001      	adds	r0, #1
 801cfd2:	d03a      	beq.n	801d04a <_malloc_r+0xea>
 801cfd4:	6823      	ldr	r3, [r4, #0]
 801cfd6:	442b      	add	r3, r5
 801cfd8:	6023      	str	r3, [r4, #0]
 801cfda:	f8d8 3000 	ldr.w	r3, [r8]
 801cfde:	685a      	ldr	r2, [r3, #4]
 801cfe0:	bb62      	cbnz	r2, 801d03c <_malloc_r+0xdc>
 801cfe2:	f8c8 7000 	str.w	r7, [r8]
 801cfe6:	e00f      	b.n	801d008 <_malloc_r+0xa8>
 801cfe8:	6822      	ldr	r2, [r4, #0]
 801cfea:	1b52      	subs	r2, r2, r5
 801cfec:	d420      	bmi.n	801d030 <_malloc_r+0xd0>
 801cfee:	2a0b      	cmp	r2, #11
 801cff0:	d917      	bls.n	801d022 <_malloc_r+0xc2>
 801cff2:	1961      	adds	r1, r4, r5
 801cff4:	42a3      	cmp	r3, r4
 801cff6:	6025      	str	r5, [r4, #0]
 801cff8:	bf18      	it	ne
 801cffa:	6059      	strne	r1, [r3, #4]
 801cffc:	6863      	ldr	r3, [r4, #4]
 801cffe:	bf08      	it	eq
 801d000:	f8c8 1000 	streq.w	r1, [r8]
 801d004:	5162      	str	r2, [r4, r5]
 801d006:	604b      	str	r3, [r1, #4]
 801d008:	4630      	mov	r0, r6
 801d00a:	f000 f82f 	bl	801d06c <__malloc_unlock>
 801d00e:	f104 000b 	add.w	r0, r4, #11
 801d012:	1d23      	adds	r3, r4, #4
 801d014:	f020 0007 	bic.w	r0, r0, #7
 801d018:	1ac2      	subs	r2, r0, r3
 801d01a:	bf1c      	itt	ne
 801d01c:	1a1b      	subne	r3, r3, r0
 801d01e:	50a3      	strne	r3, [r4, r2]
 801d020:	e7af      	b.n	801cf82 <_malloc_r+0x22>
 801d022:	6862      	ldr	r2, [r4, #4]
 801d024:	42a3      	cmp	r3, r4
 801d026:	bf0c      	ite	eq
 801d028:	f8c8 2000 	streq.w	r2, [r8]
 801d02c:	605a      	strne	r2, [r3, #4]
 801d02e:	e7eb      	b.n	801d008 <_malloc_r+0xa8>
 801d030:	4623      	mov	r3, r4
 801d032:	6864      	ldr	r4, [r4, #4]
 801d034:	e7ae      	b.n	801cf94 <_malloc_r+0x34>
 801d036:	463c      	mov	r4, r7
 801d038:	687f      	ldr	r7, [r7, #4]
 801d03a:	e7b6      	b.n	801cfaa <_malloc_r+0x4a>
 801d03c:	461a      	mov	r2, r3
 801d03e:	685b      	ldr	r3, [r3, #4]
 801d040:	42a3      	cmp	r3, r4
 801d042:	d1fb      	bne.n	801d03c <_malloc_r+0xdc>
 801d044:	2300      	movs	r3, #0
 801d046:	6053      	str	r3, [r2, #4]
 801d048:	e7de      	b.n	801d008 <_malloc_r+0xa8>
 801d04a:	230c      	movs	r3, #12
 801d04c:	6033      	str	r3, [r6, #0]
 801d04e:	4630      	mov	r0, r6
 801d050:	f000 f80c 	bl	801d06c <__malloc_unlock>
 801d054:	e794      	b.n	801cf80 <_malloc_r+0x20>
 801d056:	6005      	str	r5, [r0, #0]
 801d058:	e7d6      	b.n	801d008 <_malloc_r+0xa8>
 801d05a:	bf00      	nop
 801d05c:	24000b08 	.word	0x24000b08

0801d060 <__malloc_lock>:
 801d060:	4801      	ldr	r0, [pc, #4]	@ (801d068 <__malloc_lock+0x8>)
 801d062:	f000 bb38 	b.w	801d6d6 <__retarget_lock_acquire_recursive>
 801d066:	bf00      	nop
 801d068:	24000c4c 	.word	0x24000c4c

0801d06c <__malloc_unlock>:
 801d06c:	4801      	ldr	r0, [pc, #4]	@ (801d074 <__malloc_unlock+0x8>)
 801d06e:	f000 bb33 	b.w	801d6d8 <__retarget_lock_release_recursive>
 801d072:	bf00      	nop
 801d074:	24000c4c 	.word	0x24000c4c

0801d078 <realloc>:
 801d078:	4b02      	ldr	r3, [pc, #8]	@ (801d084 <realloc+0xc>)
 801d07a:	460a      	mov	r2, r1
 801d07c:	4601      	mov	r1, r0
 801d07e:	6818      	ldr	r0, [r3, #0]
 801d080:	f000 b802 	b.w	801d088 <_realloc_r>
 801d084:	24000038 	.word	0x24000038

0801d088 <_realloc_r>:
 801d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d08c:	4680      	mov	r8, r0
 801d08e:	4615      	mov	r5, r2
 801d090:	460c      	mov	r4, r1
 801d092:	b921      	cbnz	r1, 801d09e <_realloc_r+0x16>
 801d094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d098:	4611      	mov	r1, r2
 801d09a:	f7ff bf61 	b.w	801cf60 <_malloc_r>
 801d09e:	b92a      	cbnz	r2, 801d0ac <_realloc_r+0x24>
 801d0a0:	f000 fb2a 	bl	801d6f8 <_free_r>
 801d0a4:	2400      	movs	r4, #0
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0ac:	f000 fb6e 	bl	801d78c <_malloc_usable_size_r>
 801d0b0:	4285      	cmp	r5, r0
 801d0b2:	4606      	mov	r6, r0
 801d0b4:	d802      	bhi.n	801d0bc <_realloc_r+0x34>
 801d0b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d0ba:	d8f4      	bhi.n	801d0a6 <_realloc_r+0x1e>
 801d0bc:	4629      	mov	r1, r5
 801d0be:	4640      	mov	r0, r8
 801d0c0:	f7ff ff4e 	bl	801cf60 <_malloc_r>
 801d0c4:	4607      	mov	r7, r0
 801d0c6:	2800      	cmp	r0, #0
 801d0c8:	d0ec      	beq.n	801d0a4 <_realloc_r+0x1c>
 801d0ca:	42b5      	cmp	r5, r6
 801d0cc:	462a      	mov	r2, r5
 801d0ce:	4621      	mov	r1, r4
 801d0d0:	bf28      	it	cs
 801d0d2:	4632      	movcs	r2, r6
 801d0d4:	f000 fb01 	bl	801d6da <memcpy>
 801d0d8:	4621      	mov	r1, r4
 801d0da:	4640      	mov	r0, r8
 801d0dc:	f000 fb0c 	bl	801d6f8 <_free_r>
 801d0e0:	463c      	mov	r4, r7
 801d0e2:	e7e0      	b.n	801d0a6 <_realloc_r+0x1e>

0801d0e4 <std>:
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	b510      	push	{r4, lr}
 801d0e8:	4604      	mov	r4, r0
 801d0ea:	e9c0 3300 	strd	r3, r3, [r0]
 801d0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d0f2:	6083      	str	r3, [r0, #8]
 801d0f4:	8181      	strh	r1, [r0, #12]
 801d0f6:	6643      	str	r3, [r0, #100]	@ 0x64
 801d0f8:	81c2      	strh	r2, [r0, #14]
 801d0fa:	6183      	str	r3, [r0, #24]
 801d0fc:	4619      	mov	r1, r3
 801d0fe:	2208      	movs	r2, #8
 801d100:	305c      	adds	r0, #92	@ 0x5c
 801d102:	f000 fa1b 	bl	801d53c <memset>
 801d106:	4b0d      	ldr	r3, [pc, #52]	@ (801d13c <std+0x58>)
 801d108:	6263      	str	r3, [r4, #36]	@ 0x24
 801d10a:	4b0d      	ldr	r3, [pc, #52]	@ (801d140 <std+0x5c>)
 801d10c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d10e:	4b0d      	ldr	r3, [pc, #52]	@ (801d144 <std+0x60>)
 801d110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d112:	4b0d      	ldr	r3, [pc, #52]	@ (801d148 <std+0x64>)
 801d114:	6323      	str	r3, [r4, #48]	@ 0x30
 801d116:	4b0d      	ldr	r3, [pc, #52]	@ (801d14c <std+0x68>)
 801d118:	6224      	str	r4, [r4, #32]
 801d11a:	429c      	cmp	r4, r3
 801d11c:	d006      	beq.n	801d12c <std+0x48>
 801d11e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d122:	4294      	cmp	r4, r2
 801d124:	d002      	beq.n	801d12c <std+0x48>
 801d126:	33d0      	adds	r3, #208	@ 0xd0
 801d128:	429c      	cmp	r4, r3
 801d12a:	d105      	bne.n	801d138 <std+0x54>
 801d12c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d134:	f000 bace 	b.w	801d6d4 <__retarget_lock_init_recursive>
 801d138:	bd10      	pop	{r4, pc}
 801d13a:	bf00      	nop
 801d13c:	0801d359 	.word	0x0801d359
 801d140:	0801d37b 	.word	0x0801d37b
 801d144:	0801d3b3 	.word	0x0801d3b3
 801d148:	0801d3d7 	.word	0x0801d3d7
 801d14c:	24000b0c 	.word	0x24000b0c

0801d150 <stdio_exit_handler>:
 801d150:	4a02      	ldr	r2, [pc, #8]	@ (801d15c <stdio_exit_handler+0xc>)
 801d152:	4903      	ldr	r1, [pc, #12]	@ (801d160 <stdio_exit_handler+0x10>)
 801d154:	4803      	ldr	r0, [pc, #12]	@ (801d164 <stdio_exit_handler+0x14>)
 801d156:	f000 b869 	b.w	801d22c <_fwalk_sglue>
 801d15a:	bf00      	nop
 801d15c:	2400002c 	.word	0x2400002c
 801d160:	0801de45 	.word	0x0801de45
 801d164:	2400003c 	.word	0x2400003c

0801d168 <cleanup_stdio>:
 801d168:	6841      	ldr	r1, [r0, #4]
 801d16a:	4b0c      	ldr	r3, [pc, #48]	@ (801d19c <cleanup_stdio+0x34>)
 801d16c:	4299      	cmp	r1, r3
 801d16e:	b510      	push	{r4, lr}
 801d170:	4604      	mov	r4, r0
 801d172:	d001      	beq.n	801d178 <cleanup_stdio+0x10>
 801d174:	f000 fe66 	bl	801de44 <_fflush_r>
 801d178:	68a1      	ldr	r1, [r4, #8]
 801d17a:	4b09      	ldr	r3, [pc, #36]	@ (801d1a0 <cleanup_stdio+0x38>)
 801d17c:	4299      	cmp	r1, r3
 801d17e:	d002      	beq.n	801d186 <cleanup_stdio+0x1e>
 801d180:	4620      	mov	r0, r4
 801d182:	f000 fe5f 	bl	801de44 <_fflush_r>
 801d186:	68e1      	ldr	r1, [r4, #12]
 801d188:	4b06      	ldr	r3, [pc, #24]	@ (801d1a4 <cleanup_stdio+0x3c>)
 801d18a:	4299      	cmp	r1, r3
 801d18c:	d004      	beq.n	801d198 <cleanup_stdio+0x30>
 801d18e:	4620      	mov	r0, r4
 801d190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d194:	f000 be56 	b.w	801de44 <_fflush_r>
 801d198:	bd10      	pop	{r4, pc}
 801d19a:	bf00      	nop
 801d19c:	24000b0c 	.word	0x24000b0c
 801d1a0:	24000b74 	.word	0x24000b74
 801d1a4:	24000bdc 	.word	0x24000bdc

0801d1a8 <global_stdio_init.part.0>:
 801d1a8:	b510      	push	{r4, lr}
 801d1aa:	4b0b      	ldr	r3, [pc, #44]	@ (801d1d8 <global_stdio_init.part.0+0x30>)
 801d1ac:	4c0b      	ldr	r4, [pc, #44]	@ (801d1dc <global_stdio_init.part.0+0x34>)
 801d1ae:	4a0c      	ldr	r2, [pc, #48]	@ (801d1e0 <global_stdio_init.part.0+0x38>)
 801d1b0:	601a      	str	r2, [r3, #0]
 801d1b2:	4620      	mov	r0, r4
 801d1b4:	2200      	movs	r2, #0
 801d1b6:	2104      	movs	r1, #4
 801d1b8:	f7ff ff94 	bl	801d0e4 <std>
 801d1bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d1c0:	2201      	movs	r2, #1
 801d1c2:	2109      	movs	r1, #9
 801d1c4:	f7ff ff8e 	bl	801d0e4 <std>
 801d1c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d1cc:	2202      	movs	r2, #2
 801d1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1d2:	2112      	movs	r1, #18
 801d1d4:	f7ff bf86 	b.w	801d0e4 <std>
 801d1d8:	24000c44 	.word	0x24000c44
 801d1dc:	24000b0c 	.word	0x24000b0c
 801d1e0:	0801d151 	.word	0x0801d151

0801d1e4 <__sfp_lock_acquire>:
 801d1e4:	4801      	ldr	r0, [pc, #4]	@ (801d1ec <__sfp_lock_acquire+0x8>)
 801d1e6:	f000 ba76 	b.w	801d6d6 <__retarget_lock_acquire_recursive>
 801d1ea:	bf00      	nop
 801d1ec:	24000c4d 	.word	0x24000c4d

0801d1f0 <__sfp_lock_release>:
 801d1f0:	4801      	ldr	r0, [pc, #4]	@ (801d1f8 <__sfp_lock_release+0x8>)
 801d1f2:	f000 ba71 	b.w	801d6d8 <__retarget_lock_release_recursive>
 801d1f6:	bf00      	nop
 801d1f8:	24000c4d 	.word	0x24000c4d

0801d1fc <__sinit>:
 801d1fc:	b510      	push	{r4, lr}
 801d1fe:	4604      	mov	r4, r0
 801d200:	f7ff fff0 	bl	801d1e4 <__sfp_lock_acquire>
 801d204:	6a23      	ldr	r3, [r4, #32]
 801d206:	b11b      	cbz	r3, 801d210 <__sinit+0x14>
 801d208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d20c:	f7ff bff0 	b.w	801d1f0 <__sfp_lock_release>
 801d210:	4b04      	ldr	r3, [pc, #16]	@ (801d224 <__sinit+0x28>)
 801d212:	6223      	str	r3, [r4, #32]
 801d214:	4b04      	ldr	r3, [pc, #16]	@ (801d228 <__sinit+0x2c>)
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d1f5      	bne.n	801d208 <__sinit+0xc>
 801d21c:	f7ff ffc4 	bl	801d1a8 <global_stdio_init.part.0>
 801d220:	e7f2      	b.n	801d208 <__sinit+0xc>
 801d222:	bf00      	nop
 801d224:	0801d169 	.word	0x0801d169
 801d228:	24000c44 	.word	0x24000c44

0801d22c <_fwalk_sglue>:
 801d22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d230:	4607      	mov	r7, r0
 801d232:	4688      	mov	r8, r1
 801d234:	4614      	mov	r4, r2
 801d236:	2600      	movs	r6, #0
 801d238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d23c:	f1b9 0901 	subs.w	r9, r9, #1
 801d240:	d505      	bpl.n	801d24e <_fwalk_sglue+0x22>
 801d242:	6824      	ldr	r4, [r4, #0]
 801d244:	2c00      	cmp	r4, #0
 801d246:	d1f7      	bne.n	801d238 <_fwalk_sglue+0xc>
 801d248:	4630      	mov	r0, r6
 801d24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d24e:	89ab      	ldrh	r3, [r5, #12]
 801d250:	2b01      	cmp	r3, #1
 801d252:	d907      	bls.n	801d264 <_fwalk_sglue+0x38>
 801d254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d258:	3301      	adds	r3, #1
 801d25a:	d003      	beq.n	801d264 <_fwalk_sglue+0x38>
 801d25c:	4629      	mov	r1, r5
 801d25e:	4638      	mov	r0, r7
 801d260:	47c0      	blx	r8
 801d262:	4306      	orrs	r6, r0
 801d264:	3568      	adds	r5, #104	@ 0x68
 801d266:	e7e9      	b.n	801d23c <_fwalk_sglue+0x10>

0801d268 <iprintf>:
 801d268:	b40f      	push	{r0, r1, r2, r3}
 801d26a:	b507      	push	{r0, r1, r2, lr}
 801d26c:	4906      	ldr	r1, [pc, #24]	@ (801d288 <iprintf+0x20>)
 801d26e:	ab04      	add	r3, sp, #16
 801d270:	6808      	ldr	r0, [r1, #0]
 801d272:	f853 2b04 	ldr.w	r2, [r3], #4
 801d276:	6881      	ldr	r1, [r0, #8]
 801d278:	9301      	str	r3, [sp, #4]
 801d27a:	f000 fab9 	bl	801d7f0 <_vfiprintf_r>
 801d27e:	b003      	add	sp, #12
 801d280:	f85d eb04 	ldr.w	lr, [sp], #4
 801d284:	b004      	add	sp, #16
 801d286:	4770      	bx	lr
 801d288:	24000038 	.word	0x24000038

0801d28c <putchar>:
 801d28c:	4b02      	ldr	r3, [pc, #8]	@ (801d298 <putchar+0xc>)
 801d28e:	4601      	mov	r1, r0
 801d290:	6818      	ldr	r0, [r3, #0]
 801d292:	6882      	ldr	r2, [r0, #8]
 801d294:	f000 be60 	b.w	801df58 <_putc_r>
 801d298:	24000038 	.word	0x24000038

0801d29c <_puts_r>:
 801d29c:	6a03      	ldr	r3, [r0, #32]
 801d29e:	b570      	push	{r4, r5, r6, lr}
 801d2a0:	6884      	ldr	r4, [r0, #8]
 801d2a2:	4605      	mov	r5, r0
 801d2a4:	460e      	mov	r6, r1
 801d2a6:	b90b      	cbnz	r3, 801d2ac <_puts_r+0x10>
 801d2a8:	f7ff ffa8 	bl	801d1fc <__sinit>
 801d2ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2ae:	07db      	lsls	r3, r3, #31
 801d2b0:	d405      	bmi.n	801d2be <_puts_r+0x22>
 801d2b2:	89a3      	ldrh	r3, [r4, #12]
 801d2b4:	0598      	lsls	r0, r3, #22
 801d2b6:	d402      	bmi.n	801d2be <_puts_r+0x22>
 801d2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2ba:	f000 fa0c 	bl	801d6d6 <__retarget_lock_acquire_recursive>
 801d2be:	89a3      	ldrh	r3, [r4, #12]
 801d2c0:	0719      	lsls	r1, r3, #28
 801d2c2:	d502      	bpl.n	801d2ca <_puts_r+0x2e>
 801d2c4:	6923      	ldr	r3, [r4, #16]
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d135      	bne.n	801d336 <_puts_r+0x9a>
 801d2ca:	4621      	mov	r1, r4
 801d2cc:	4628      	mov	r0, r5
 801d2ce:	f000 f8c5 	bl	801d45c <__swsetup_r>
 801d2d2:	b380      	cbz	r0, 801d336 <_puts_r+0x9a>
 801d2d4:	f04f 35ff 	mov.w	r5, #4294967295
 801d2d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d2da:	07da      	lsls	r2, r3, #31
 801d2dc:	d405      	bmi.n	801d2ea <_puts_r+0x4e>
 801d2de:	89a3      	ldrh	r3, [r4, #12]
 801d2e0:	059b      	lsls	r3, r3, #22
 801d2e2:	d402      	bmi.n	801d2ea <_puts_r+0x4e>
 801d2e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d2e6:	f000 f9f7 	bl	801d6d8 <__retarget_lock_release_recursive>
 801d2ea:	4628      	mov	r0, r5
 801d2ec:	bd70      	pop	{r4, r5, r6, pc}
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	da04      	bge.n	801d2fc <_puts_r+0x60>
 801d2f2:	69a2      	ldr	r2, [r4, #24]
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	dc17      	bgt.n	801d328 <_puts_r+0x8c>
 801d2f8:	290a      	cmp	r1, #10
 801d2fa:	d015      	beq.n	801d328 <_puts_r+0x8c>
 801d2fc:	6823      	ldr	r3, [r4, #0]
 801d2fe:	1c5a      	adds	r2, r3, #1
 801d300:	6022      	str	r2, [r4, #0]
 801d302:	7019      	strb	r1, [r3, #0]
 801d304:	68a3      	ldr	r3, [r4, #8]
 801d306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d30a:	3b01      	subs	r3, #1
 801d30c:	60a3      	str	r3, [r4, #8]
 801d30e:	2900      	cmp	r1, #0
 801d310:	d1ed      	bne.n	801d2ee <_puts_r+0x52>
 801d312:	2b00      	cmp	r3, #0
 801d314:	da11      	bge.n	801d33a <_puts_r+0x9e>
 801d316:	4622      	mov	r2, r4
 801d318:	210a      	movs	r1, #10
 801d31a:	4628      	mov	r0, r5
 801d31c:	f000 f85f 	bl	801d3de <__swbuf_r>
 801d320:	3001      	adds	r0, #1
 801d322:	d0d7      	beq.n	801d2d4 <_puts_r+0x38>
 801d324:	250a      	movs	r5, #10
 801d326:	e7d7      	b.n	801d2d8 <_puts_r+0x3c>
 801d328:	4622      	mov	r2, r4
 801d32a:	4628      	mov	r0, r5
 801d32c:	f000 f857 	bl	801d3de <__swbuf_r>
 801d330:	3001      	adds	r0, #1
 801d332:	d1e7      	bne.n	801d304 <_puts_r+0x68>
 801d334:	e7ce      	b.n	801d2d4 <_puts_r+0x38>
 801d336:	3e01      	subs	r6, #1
 801d338:	e7e4      	b.n	801d304 <_puts_r+0x68>
 801d33a:	6823      	ldr	r3, [r4, #0]
 801d33c:	1c5a      	adds	r2, r3, #1
 801d33e:	6022      	str	r2, [r4, #0]
 801d340:	220a      	movs	r2, #10
 801d342:	701a      	strb	r2, [r3, #0]
 801d344:	e7ee      	b.n	801d324 <_puts_r+0x88>
	...

0801d348 <puts>:
 801d348:	4b02      	ldr	r3, [pc, #8]	@ (801d354 <puts+0xc>)
 801d34a:	4601      	mov	r1, r0
 801d34c:	6818      	ldr	r0, [r3, #0]
 801d34e:	f7ff bfa5 	b.w	801d29c <_puts_r>
 801d352:	bf00      	nop
 801d354:	24000038 	.word	0x24000038

0801d358 <__sread>:
 801d358:	b510      	push	{r4, lr}
 801d35a:	460c      	mov	r4, r1
 801d35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d360:	f000 f946 	bl	801d5f0 <_read_r>
 801d364:	2800      	cmp	r0, #0
 801d366:	bfab      	itete	ge
 801d368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d36a:	89a3      	ldrhlt	r3, [r4, #12]
 801d36c:	181b      	addge	r3, r3, r0
 801d36e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d372:	bfac      	ite	ge
 801d374:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d376:	81a3      	strhlt	r3, [r4, #12]
 801d378:	bd10      	pop	{r4, pc}

0801d37a <__swrite>:
 801d37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d37e:	461f      	mov	r7, r3
 801d380:	898b      	ldrh	r3, [r1, #12]
 801d382:	05db      	lsls	r3, r3, #23
 801d384:	4605      	mov	r5, r0
 801d386:	460c      	mov	r4, r1
 801d388:	4616      	mov	r6, r2
 801d38a:	d505      	bpl.n	801d398 <__swrite+0x1e>
 801d38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d390:	2302      	movs	r3, #2
 801d392:	2200      	movs	r2, #0
 801d394:	f000 f91a 	bl	801d5cc <_lseek_r>
 801d398:	89a3      	ldrh	r3, [r4, #12]
 801d39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d39e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d3a2:	81a3      	strh	r3, [r4, #12]
 801d3a4:	4632      	mov	r2, r6
 801d3a6:	463b      	mov	r3, r7
 801d3a8:	4628      	mov	r0, r5
 801d3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ae:	f000 b955 	b.w	801d65c <_write_r>

0801d3b2 <__sseek>:
 801d3b2:	b510      	push	{r4, lr}
 801d3b4:	460c      	mov	r4, r1
 801d3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3ba:	f000 f907 	bl	801d5cc <_lseek_r>
 801d3be:	1c43      	adds	r3, r0, #1
 801d3c0:	89a3      	ldrh	r3, [r4, #12]
 801d3c2:	bf15      	itete	ne
 801d3c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d3c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d3ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d3ce:	81a3      	strheq	r3, [r4, #12]
 801d3d0:	bf18      	it	ne
 801d3d2:	81a3      	strhne	r3, [r4, #12]
 801d3d4:	bd10      	pop	{r4, pc}

0801d3d6 <__sclose>:
 801d3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3da:	f000 b8e7 	b.w	801d5ac <_close_r>

0801d3de <__swbuf_r>:
 801d3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3e0:	460e      	mov	r6, r1
 801d3e2:	4614      	mov	r4, r2
 801d3e4:	4605      	mov	r5, r0
 801d3e6:	b118      	cbz	r0, 801d3f0 <__swbuf_r+0x12>
 801d3e8:	6a03      	ldr	r3, [r0, #32]
 801d3ea:	b90b      	cbnz	r3, 801d3f0 <__swbuf_r+0x12>
 801d3ec:	f7ff ff06 	bl	801d1fc <__sinit>
 801d3f0:	69a3      	ldr	r3, [r4, #24]
 801d3f2:	60a3      	str	r3, [r4, #8]
 801d3f4:	89a3      	ldrh	r3, [r4, #12]
 801d3f6:	071a      	lsls	r2, r3, #28
 801d3f8:	d501      	bpl.n	801d3fe <__swbuf_r+0x20>
 801d3fa:	6923      	ldr	r3, [r4, #16]
 801d3fc:	b943      	cbnz	r3, 801d410 <__swbuf_r+0x32>
 801d3fe:	4621      	mov	r1, r4
 801d400:	4628      	mov	r0, r5
 801d402:	f000 f82b 	bl	801d45c <__swsetup_r>
 801d406:	b118      	cbz	r0, 801d410 <__swbuf_r+0x32>
 801d408:	f04f 37ff 	mov.w	r7, #4294967295
 801d40c:	4638      	mov	r0, r7
 801d40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d410:	6823      	ldr	r3, [r4, #0]
 801d412:	6922      	ldr	r2, [r4, #16]
 801d414:	1a98      	subs	r0, r3, r2
 801d416:	6963      	ldr	r3, [r4, #20]
 801d418:	b2f6      	uxtb	r6, r6
 801d41a:	4283      	cmp	r3, r0
 801d41c:	4637      	mov	r7, r6
 801d41e:	dc05      	bgt.n	801d42c <__swbuf_r+0x4e>
 801d420:	4621      	mov	r1, r4
 801d422:	4628      	mov	r0, r5
 801d424:	f000 fd0e 	bl	801de44 <_fflush_r>
 801d428:	2800      	cmp	r0, #0
 801d42a:	d1ed      	bne.n	801d408 <__swbuf_r+0x2a>
 801d42c:	68a3      	ldr	r3, [r4, #8]
 801d42e:	3b01      	subs	r3, #1
 801d430:	60a3      	str	r3, [r4, #8]
 801d432:	6823      	ldr	r3, [r4, #0]
 801d434:	1c5a      	adds	r2, r3, #1
 801d436:	6022      	str	r2, [r4, #0]
 801d438:	701e      	strb	r6, [r3, #0]
 801d43a:	6962      	ldr	r2, [r4, #20]
 801d43c:	1c43      	adds	r3, r0, #1
 801d43e:	429a      	cmp	r2, r3
 801d440:	d004      	beq.n	801d44c <__swbuf_r+0x6e>
 801d442:	89a3      	ldrh	r3, [r4, #12]
 801d444:	07db      	lsls	r3, r3, #31
 801d446:	d5e1      	bpl.n	801d40c <__swbuf_r+0x2e>
 801d448:	2e0a      	cmp	r6, #10
 801d44a:	d1df      	bne.n	801d40c <__swbuf_r+0x2e>
 801d44c:	4621      	mov	r1, r4
 801d44e:	4628      	mov	r0, r5
 801d450:	f000 fcf8 	bl	801de44 <_fflush_r>
 801d454:	2800      	cmp	r0, #0
 801d456:	d0d9      	beq.n	801d40c <__swbuf_r+0x2e>
 801d458:	e7d6      	b.n	801d408 <__swbuf_r+0x2a>
	...

0801d45c <__swsetup_r>:
 801d45c:	b538      	push	{r3, r4, r5, lr}
 801d45e:	4b29      	ldr	r3, [pc, #164]	@ (801d504 <__swsetup_r+0xa8>)
 801d460:	4605      	mov	r5, r0
 801d462:	6818      	ldr	r0, [r3, #0]
 801d464:	460c      	mov	r4, r1
 801d466:	b118      	cbz	r0, 801d470 <__swsetup_r+0x14>
 801d468:	6a03      	ldr	r3, [r0, #32]
 801d46a:	b90b      	cbnz	r3, 801d470 <__swsetup_r+0x14>
 801d46c:	f7ff fec6 	bl	801d1fc <__sinit>
 801d470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d474:	0719      	lsls	r1, r3, #28
 801d476:	d422      	bmi.n	801d4be <__swsetup_r+0x62>
 801d478:	06da      	lsls	r2, r3, #27
 801d47a:	d407      	bmi.n	801d48c <__swsetup_r+0x30>
 801d47c:	2209      	movs	r2, #9
 801d47e:	602a      	str	r2, [r5, #0]
 801d480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d484:	81a3      	strh	r3, [r4, #12]
 801d486:	f04f 30ff 	mov.w	r0, #4294967295
 801d48a:	e033      	b.n	801d4f4 <__swsetup_r+0x98>
 801d48c:	0758      	lsls	r0, r3, #29
 801d48e:	d512      	bpl.n	801d4b6 <__swsetup_r+0x5a>
 801d490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d492:	b141      	cbz	r1, 801d4a6 <__swsetup_r+0x4a>
 801d494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d498:	4299      	cmp	r1, r3
 801d49a:	d002      	beq.n	801d4a2 <__swsetup_r+0x46>
 801d49c:	4628      	mov	r0, r5
 801d49e:	f000 f92b 	bl	801d6f8 <_free_r>
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d4a6:	89a3      	ldrh	r3, [r4, #12]
 801d4a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d4ac:	81a3      	strh	r3, [r4, #12]
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	6063      	str	r3, [r4, #4]
 801d4b2:	6923      	ldr	r3, [r4, #16]
 801d4b4:	6023      	str	r3, [r4, #0]
 801d4b6:	89a3      	ldrh	r3, [r4, #12]
 801d4b8:	f043 0308 	orr.w	r3, r3, #8
 801d4bc:	81a3      	strh	r3, [r4, #12]
 801d4be:	6923      	ldr	r3, [r4, #16]
 801d4c0:	b94b      	cbnz	r3, 801d4d6 <__swsetup_r+0x7a>
 801d4c2:	89a3      	ldrh	r3, [r4, #12]
 801d4c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d4cc:	d003      	beq.n	801d4d6 <__swsetup_r+0x7a>
 801d4ce:	4621      	mov	r1, r4
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	f000 fd05 	bl	801dee0 <__smakebuf_r>
 801d4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4da:	f013 0201 	ands.w	r2, r3, #1
 801d4de:	d00a      	beq.n	801d4f6 <__swsetup_r+0x9a>
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	60a2      	str	r2, [r4, #8]
 801d4e4:	6962      	ldr	r2, [r4, #20]
 801d4e6:	4252      	negs	r2, r2
 801d4e8:	61a2      	str	r2, [r4, #24]
 801d4ea:	6922      	ldr	r2, [r4, #16]
 801d4ec:	b942      	cbnz	r2, 801d500 <__swsetup_r+0xa4>
 801d4ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d4f2:	d1c5      	bne.n	801d480 <__swsetup_r+0x24>
 801d4f4:	bd38      	pop	{r3, r4, r5, pc}
 801d4f6:	0799      	lsls	r1, r3, #30
 801d4f8:	bf58      	it	pl
 801d4fa:	6962      	ldrpl	r2, [r4, #20]
 801d4fc:	60a2      	str	r2, [r4, #8]
 801d4fe:	e7f4      	b.n	801d4ea <__swsetup_r+0x8e>
 801d500:	2000      	movs	r0, #0
 801d502:	e7f7      	b.n	801d4f4 <__swsetup_r+0x98>
 801d504:	24000038 	.word	0x24000038

0801d508 <memmove>:
 801d508:	4288      	cmp	r0, r1
 801d50a:	b510      	push	{r4, lr}
 801d50c:	eb01 0402 	add.w	r4, r1, r2
 801d510:	d902      	bls.n	801d518 <memmove+0x10>
 801d512:	4284      	cmp	r4, r0
 801d514:	4623      	mov	r3, r4
 801d516:	d807      	bhi.n	801d528 <memmove+0x20>
 801d518:	1e43      	subs	r3, r0, #1
 801d51a:	42a1      	cmp	r1, r4
 801d51c:	d008      	beq.n	801d530 <memmove+0x28>
 801d51e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d522:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d526:	e7f8      	b.n	801d51a <memmove+0x12>
 801d528:	4402      	add	r2, r0
 801d52a:	4601      	mov	r1, r0
 801d52c:	428a      	cmp	r2, r1
 801d52e:	d100      	bne.n	801d532 <memmove+0x2a>
 801d530:	bd10      	pop	{r4, pc}
 801d532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d53a:	e7f7      	b.n	801d52c <memmove+0x24>

0801d53c <memset>:
 801d53c:	4402      	add	r2, r0
 801d53e:	4603      	mov	r3, r0
 801d540:	4293      	cmp	r3, r2
 801d542:	d100      	bne.n	801d546 <memset+0xa>
 801d544:	4770      	bx	lr
 801d546:	f803 1b01 	strb.w	r1, [r3], #1
 801d54a:	e7f9      	b.n	801d540 <memset+0x4>

0801d54c <_raise_r>:
 801d54c:	291f      	cmp	r1, #31
 801d54e:	b538      	push	{r3, r4, r5, lr}
 801d550:	4605      	mov	r5, r0
 801d552:	460c      	mov	r4, r1
 801d554:	d904      	bls.n	801d560 <_raise_r+0x14>
 801d556:	2316      	movs	r3, #22
 801d558:	6003      	str	r3, [r0, #0]
 801d55a:	f04f 30ff 	mov.w	r0, #4294967295
 801d55e:	bd38      	pop	{r3, r4, r5, pc}
 801d560:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d562:	b112      	cbz	r2, 801d56a <_raise_r+0x1e>
 801d564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d568:	b94b      	cbnz	r3, 801d57e <_raise_r+0x32>
 801d56a:	4628      	mov	r0, r5
 801d56c:	f000 f864 	bl	801d638 <_getpid_r>
 801d570:	4622      	mov	r2, r4
 801d572:	4601      	mov	r1, r0
 801d574:	4628      	mov	r0, r5
 801d576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d57a:	f000 b84b 	b.w	801d614 <_kill_r>
 801d57e:	2b01      	cmp	r3, #1
 801d580:	d00a      	beq.n	801d598 <_raise_r+0x4c>
 801d582:	1c59      	adds	r1, r3, #1
 801d584:	d103      	bne.n	801d58e <_raise_r+0x42>
 801d586:	2316      	movs	r3, #22
 801d588:	6003      	str	r3, [r0, #0]
 801d58a:	2001      	movs	r0, #1
 801d58c:	e7e7      	b.n	801d55e <_raise_r+0x12>
 801d58e:	2100      	movs	r1, #0
 801d590:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d594:	4620      	mov	r0, r4
 801d596:	4798      	blx	r3
 801d598:	2000      	movs	r0, #0
 801d59a:	e7e0      	b.n	801d55e <_raise_r+0x12>

0801d59c <raise>:
 801d59c:	4b02      	ldr	r3, [pc, #8]	@ (801d5a8 <raise+0xc>)
 801d59e:	4601      	mov	r1, r0
 801d5a0:	6818      	ldr	r0, [r3, #0]
 801d5a2:	f7ff bfd3 	b.w	801d54c <_raise_r>
 801d5a6:	bf00      	nop
 801d5a8:	24000038 	.word	0x24000038

0801d5ac <_close_r>:
 801d5ac:	b538      	push	{r3, r4, r5, lr}
 801d5ae:	4d06      	ldr	r5, [pc, #24]	@ (801d5c8 <_close_r+0x1c>)
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	4604      	mov	r4, r0
 801d5b4:	4608      	mov	r0, r1
 801d5b6:	602b      	str	r3, [r5, #0]
 801d5b8:	f7ee fa76 	bl	800baa8 <_close>
 801d5bc:	1c43      	adds	r3, r0, #1
 801d5be:	d102      	bne.n	801d5c6 <_close_r+0x1a>
 801d5c0:	682b      	ldr	r3, [r5, #0]
 801d5c2:	b103      	cbz	r3, 801d5c6 <_close_r+0x1a>
 801d5c4:	6023      	str	r3, [r4, #0]
 801d5c6:	bd38      	pop	{r3, r4, r5, pc}
 801d5c8:	24000c48 	.word	0x24000c48

0801d5cc <_lseek_r>:
 801d5cc:	b538      	push	{r3, r4, r5, lr}
 801d5ce:	4d07      	ldr	r5, [pc, #28]	@ (801d5ec <_lseek_r+0x20>)
 801d5d0:	4604      	mov	r4, r0
 801d5d2:	4608      	mov	r0, r1
 801d5d4:	4611      	mov	r1, r2
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	602a      	str	r2, [r5, #0]
 801d5da:	461a      	mov	r2, r3
 801d5dc:	f7ee fa8b 	bl	800baf6 <_lseek>
 801d5e0:	1c43      	adds	r3, r0, #1
 801d5e2:	d102      	bne.n	801d5ea <_lseek_r+0x1e>
 801d5e4:	682b      	ldr	r3, [r5, #0]
 801d5e6:	b103      	cbz	r3, 801d5ea <_lseek_r+0x1e>
 801d5e8:	6023      	str	r3, [r4, #0]
 801d5ea:	bd38      	pop	{r3, r4, r5, pc}
 801d5ec:	24000c48 	.word	0x24000c48

0801d5f0 <_read_r>:
 801d5f0:	b538      	push	{r3, r4, r5, lr}
 801d5f2:	4d07      	ldr	r5, [pc, #28]	@ (801d610 <_read_r+0x20>)
 801d5f4:	4604      	mov	r4, r0
 801d5f6:	4608      	mov	r0, r1
 801d5f8:	4611      	mov	r1, r2
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	602a      	str	r2, [r5, #0]
 801d5fe:	461a      	mov	r2, r3
 801d600:	f7ee fa19 	bl	800ba36 <_read>
 801d604:	1c43      	adds	r3, r0, #1
 801d606:	d102      	bne.n	801d60e <_read_r+0x1e>
 801d608:	682b      	ldr	r3, [r5, #0]
 801d60a:	b103      	cbz	r3, 801d60e <_read_r+0x1e>
 801d60c:	6023      	str	r3, [r4, #0]
 801d60e:	bd38      	pop	{r3, r4, r5, pc}
 801d610:	24000c48 	.word	0x24000c48

0801d614 <_kill_r>:
 801d614:	b538      	push	{r3, r4, r5, lr}
 801d616:	4d07      	ldr	r5, [pc, #28]	@ (801d634 <_kill_r+0x20>)
 801d618:	2300      	movs	r3, #0
 801d61a:	4604      	mov	r4, r0
 801d61c:	4608      	mov	r0, r1
 801d61e:	4611      	mov	r1, r2
 801d620:	602b      	str	r3, [r5, #0]
 801d622:	f7ee f9ed 	bl	800ba00 <_kill>
 801d626:	1c43      	adds	r3, r0, #1
 801d628:	d102      	bne.n	801d630 <_kill_r+0x1c>
 801d62a:	682b      	ldr	r3, [r5, #0]
 801d62c:	b103      	cbz	r3, 801d630 <_kill_r+0x1c>
 801d62e:	6023      	str	r3, [r4, #0]
 801d630:	bd38      	pop	{r3, r4, r5, pc}
 801d632:	bf00      	nop
 801d634:	24000c48 	.word	0x24000c48

0801d638 <_getpid_r>:
 801d638:	f7ee b9da 	b.w	800b9f0 <_getpid>

0801d63c <_sbrk_r>:
 801d63c:	b538      	push	{r3, r4, r5, lr}
 801d63e:	4d06      	ldr	r5, [pc, #24]	@ (801d658 <_sbrk_r+0x1c>)
 801d640:	2300      	movs	r3, #0
 801d642:	4604      	mov	r4, r0
 801d644:	4608      	mov	r0, r1
 801d646:	602b      	str	r3, [r5, #0]
 801d648:	f7ee fa62 	bl	800bb10 <_sbrk>
 801d64c:	1c43      	adds	r3, r0, #1
 801d64e:	d102      	bne.n	801d656 <_sbrk_r+0x1a>
 801d650:	682b      	ldr	r3, [r5, #0]
 801d652:	b103      	cbz	r3, 801d656 <_sbrk_r+0x1a>
 801d654:	6023      	str	r3, [r4, #0]
 801d656:	bd38      	pop	{r3, r4, r5, pc}
 801d658:	24000c48 	.word	0x24000c48

0801d65c <_write_r>:
 801d65c:	b538      	push	{r3, r4, r5, lr}
 801d65e:	4d07      	ldr	r5, [pc, #28]	@ (801d67c <_write_r+0x20>)
 801d660:	4604      	mov	r4, r0
 801d662:	4608      	mov	r0, r1
 801d664:	4611      	mov	r1, r2
 801d666:	2200      	movs	r2, #0
 801d668:	602a      	str	r2, [r5, #0]
 801d66a:	461a      	mov	r2, r3
 801d66c:	f7ee fa00 	bl	800ba70 <_write>
 801d670:	1c43      	adds	r3, r0, #1
 801d672:	d102      	bne.n	801d67a <_write_r+0x1e>
 801d674:	682b      	ldr	r3, [r5, #0]
 801d676:	b103      	cbz	r3, 801d67a <_write_r+0x1e>
 801d678:	6023      	str	r3, [r4, #0]
 801d67a:	bd38      	pop	{r3, r4, r5, pc}
 801d67c:	24000c48 	.word	0x24000c48

0801d680 <__errno>:
 801d680:	4b01      	ldr	r3, [pc, #4]	@ (801d688 <__errno+0x8>)
 801d682:	6818      	ldr	r0, [r3, #0]
 801d684:	4770      	bx	lr
 801d686:	bf00      	nop
 801d688:	24000038 	.word	0x24000038

0801d68c <__libc_init_array>:
 801d68c:	b570      	push	{r4, r5, r6, lr}
 801d68e:	4d0d      	ldr	r5, [pc, #52]	@ (801d6c4 <__libc_init_array+0x38>)
 801d690:	4c0d      	ldr	r4, [pc, #52]	@ (801d6c8 <__libc_init_array+0x3c>)
 801d692:	1b64      	subs	r4, r4, r5
 801d694:	10a4      	asrs	r4, r4, #2
 801d696:	2600      	movs	r6, #0
 801d698:	42a6      	cmp	r6, r4
 801d69a:	d109      	bne.n	801d6b0 <__libc_init_array+0x24>
 801d69c:	4d0b      	ldr	r5, [pc, #44]	@ (801d6cc <__libc_init_array+0x40>)
 801d69e:	4c0c      	ldr	r4, [pc, #48]	@ (801d6d0 <__libc_init_array+0x44>)
 801d6a0:	f000 fcb0 	bl	801e004 <_init>
 801d6a4:	1b64      	subs	r4, r4, r5
 801d6a6:	10a4      	asrs	r4, r4, #2
 801d6a8:	2600      	movs	r6, #0
 801d6aa:	42a6      	cmp	r6, r4
 801d6ac:	d105      	bne.n	801d6ba <__libc_init_array+0x2e>
 801d6ae:	bd70      	pop	{r4, r5, r6, pc}
 801d6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6b4:	4798      	blx	r3
 801d6b6:	3601      	adds	r6, #1
 801d6b8:	e7ee      	b.n	801d698 <__libc_init_array+0xc>
 801d6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6be:	4798      	blx	r3
 801d6c0:	3601      	adds	r6, #1
 801d6c2:	e7f2      	b.n	801d6aa <__libc_init_array+0x1e>
 801d6c4:	0801ed84 	.word	0x0801ed84
 801d6c8:	0801ed84 	.word	0x0801ed84
 801d6cc:	0801ed84 	.word	0x0801ed84
 801d6d0:	0801ed90 	.word	0x0801ed90

0801d6d4 <__retarget_lock_init_recursive>:
 801d6d4:	4770      	bx	lr

0801d6d6 <__retarget_lock_acquire_recursive>:
 801d6d6:	4770      	bx	lr

0801d6d8 <__retarget_lock_release_recursive>:
 801d6d8:	4770      	bx	lr

0801d6da <memcpy>:
 801d6da:	440a      	add	r2, r1
 801d6dc:	4291      	cmp	r1, r2
 801d6de:	f100 33ff 	add.w	r3, r0, #4294967295
 801d6e2:	d100      	bne.n	801d6e6 <memcpy+0xc>
 801d6e4:	4770      	bx	lr
 801d6e6:	b510      	push	{r4, lr}
 801d6e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d6f0:	4291      	cmp	r1, r2
 801d6f2:	d1f9      	bne.n	801d6e8 <memcpy+0xe>
 801d6f4:	bd10      	pop	{r4, pc}
	...

0801d6f8 <_free_r>:
 801d6f8:	b538      	push	{r3, r4, r5, lr}
 801d6fa:	4605      	mov	r5, r0
 801d6fc:	2900      	cmp	r1, #0
 801d6fe:	d041      	beq.n	801d784 <_free_r+0x8c>
 801d700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d704:	1f0c      	subs	r4, r1, #4
 801d706:	2b00      	cmp	r3, #0
 801d708:	bfb8      	it	lt
 801d70a:	18e4      	addlt	r4, r4, r3
 801d70c:	f7ff fca8 	bl	801d060 <__malloc_lock>
 801d710:	4a1d      	ldr	r2, [pc, #116]	@ (801d788 <_free_r+0x90>)
 801d712:	6813      	ldr	r3, [r2, #0]
 801d714:	b933      	cbnz	r3, 801d724 <_free_r+0x2c>
 801d716:	6063      	str	r3, [r4, #4]
 801d718:	6014      	str	r4, [r2, #0]
 801d71a:	4628      	mov	r0, r5
 801d71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d720:	f7ff bca4 	b.w	801d06c <__malloc_unlock>
 801d724:	42a3      	cmp	r3, r4
 801d726:	d908      	bls.n	801d73a <_free_r+0x42>
 801d728:	6820      	ldr	r0, [r4, #0]
 801d72a:	1821      	adds	r1, r4, r0
 801d72c:	428b      	cmp	r3, r1
 801d72e:	bf01      	itttt	eq
 801d730:	6819      	ldreq	r1, [r3, #0]
 801d732:	685b      	ldreq	r3, [r3, #4]
 801d734:	1809      	addeq	r1, r1, r0
 801d736:	6021      	streq	r1, [r4, #0]
 801d738:	e7ed      	b.n	801d716 <_free_r+0x1e>
 801d73a:	461a      	mov	r2, r3
 801d73c:	685b      	ldr	r3, [r3, #4]
 801d73e:	b10b      	cbz	r3, 801d744 <_free_r+0x4c>
 801d740:	42a3      	cmp	r3, r4
 801d742:	d9fa      	bls.n	801d73a <_free_r+0x42>
 801d744:	6811      	ldr	r1, [r2, #0]
 801d746:	1850      	adds	r0, r2, r1
 801d748:	42a0      	cmp	r0, r4
 801d74a:	d10b      	bne.n	801d764 <_free_r+0x6c>
 801d74c:	6820      	ldr	r0, [r4, #0]
 801d74e:	4401      	add	r1, r0
 801d750:	1850      	adds	r0, r2, r1
 801d752:	4283      	cmp	r3, r0
 801d754:	6011      	str	r1, [r2, #0]
 801d756:	d1e0      	bne.n	801d71a <_free_r+0x22>
 801d758:	6818      	ldr	r0, [r3, #0]
 801d75a:	685b      	ldr	r3, [r3, #4]
 801d75c:	6053      	str	r3, [r2, #4]
 801d75e:	4408      	add	r0, r1
 801d760:	6010      	str	r0, [r2, #0]
 801d762:	e7da      	b.n	801d71a <_free_r+0x22>
 801d764:	d902      	bls.n	801d76c <_free_r+0x74>
 801d766:	230c      	movs	r3, #12
 801d768:	602b      	str	r3, [r5, #0]
 801d76a:	e7d6      	b.n	801d71a <_free_r+0x22>
 801d76c:	6820      	ldr	r0, [r4, #0]
 801d76e:	1821      	adds	r1, r4, r0
 801d770:	428b      	cmp	r3, r1
 801d772:	bf04      	itt	eq
 801d774:	6819      	ldreq	r1, [r3, #0]
 801d776:	685b      	ldreq	r3, [r3, #4]
 801d778:	6063      	str	r3, [r4, #4]
 801d77a:	bf04      	itt	eq
 801d77c:	1809      	addeq	r1, r1, r0
 801d77e:	6021      	streq	r1, [r4, #0]
 801d780:	6054      	str	r4, [r2, #4]
 801d782:	e7ca      	b.n	801d71a <_free_r+0x22>
 801d784:	bd38      	pop	{r3, r4, r5, pc}
 801d786:	bf00      	nop
 801d788:	24000b08 	.word	0x24000b08

0801d78c <_malloc_usable_size_r>:
 801d78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d790:	1f18      	subs	r0, r3, #4
 801d792:	2b00      	cmp	r3, #0
 801d794:	bfbc      	itt	lt
 801d796:	580b      	ldrlt	r3, [r1, r0]
 801d798:	18c0      	addlt	r0, r0, r3
 801d79a:	4770      	bx	lr

0801d79c <__sfputc_r>:
 801d79c:	6893      	ldr	r3, [r2, #8]
 801d79e:	3b01      	subs	r3, #1
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	b410      	push	{r4}
 801d7a4:	6093      	str	r3, [r2, #8]
 801d7a6:	da08      	bge.n	801d7ba <__sfputc_r+0x1e>
 801d7a8:	6994      	ldr	r4, [r2, #24]
 801d7aa:	42a3      	cmp	r3, r4
 801d7ac:	db01      	blt.n	801d7b2 <__sfputc_r+0x16>
 801d7ae:	290a      	cmp	r1, #10
 801d7b0:	d103      	bne.n	801d7ba <__sfputc_r+0x1e>
 801d7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7b6:	f7ff be12 	b.w	801d3de <__swbuf_r>
 801d7ba:	6813      	ldr	r3, [r2, #0]
 801d7bc:	1c58      	adds	r0, r3, #1
 801d7be:	6010      	str	r0, [r2, #0]
 801d7c0:	7019      	strb	r1, [r3, #0]
 801d7c2:	4608      	mov	r0, r1
 801d7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7c8:	4770      	bx	lr

0801d7ca <__sfputs_r>:
 801d7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7cc:	4606      	mov	r6, r0
 801d7ce:	460f      	mov	r7, r1
 801d7d0:	4614      	mov	r4, r2
 801d7d2:	18d5      	adds	r5, r2, r3
 801d7d4:	42ac      	cmp	r4, r5
 801d7d6:	d101      	bne.n	801d7dc <__sfputs_r+0x12>
 801d7d8:	2000      	movs	r0, #0
 801d7da:	e007      	b.n	801d7ec <__sfputs_r+0x22>
 801d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7e0:	463a      	mov	r2, r7
 801d7e2:	4630      	mov	r0, r6
 801d7e4:	f7ff ffda 	bl	801d79c <__sfputc_r>
 801d7e8:	1c43      	adds	r3, r0, #1
 801d7ea:	d1f3      	bne.n	801d7d4 <__sfputs_r+0xa>
 801d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7f0 <_vfiprintf_r>:
 801d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7f4:	460d      	mov	r5, r1
 801d7f6:	b09d      	sub	sp, #116	@ 0x74
 801d7f8:	4614      	mov	r4, r2
 801d7fa:	4698      	mov	r8, r3
 801d7fc:	4606      	mov	r6, r0
 801d7fe:	b118      	cbz	r0, 801d808 <_vfiprintf_r+0x18>
 801d800:	6a03      	ldr	r3, [r0, #32]
 801d802:	b90b      	cbnz	r3, 801d808 <_vfiprintf_r+0x18>
 801d804:	f7ff fcfa 	bl	801d1fc <__sinit>
 801d808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d80a:	07d9      	lsls	r1, r3, #31
 801d80c:	d405      	bmi.n	801d81a <_vfiprintf_r+0x2a>
 801d80e:	89ab      	ldrh	r3, [r5, #12]
 801d810:	059a      	lsls	r2, r3, #22
 801d812:	d402      	bmi.n	801d81a <_vfiprintf_r+0x2a>
 801d814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d816:	f7ff ff5e 	bl	801d6d6 <__retarget_lock_acquire_recursive>
 801d81a:	89ab      	ldrh	r3, [r5, #12]
 801d81c:	071b      	lsls	r3, r3, #28
 801d81e:	d501      	bpl.n	801d824 <_vfiprintf_r+0x34>
 801d820:	692b      	ldr	r3, [r5, #16]
 801d822:	b99b      	cbnz	r3, 801d84c <_vfiprintf_r+0x5c>
 801d824:	4629      	mov	r1, r5
 801d826:	4630      	mov	r0, r6
 801d828:	f7ff fe18 	bl	801d45c <__swsetup_r>
 801d82c:	b170      	cbz	r0, 801d84c <_vfiprintf_r+0x5c>
 801d82e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d830:	07dc      	lsls	r4, r3, #31
 801d832:	d504      	bpl.n	801d83e <_vfiprintf_r+0x4e>
 801d834:	f04f 30ff 	mov.w	r0, #4294967295
 801d838:	b01d      	add	sp, #116	@ 0x74
 801d83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d83e:	89ab      	ldrh	r3, [r5, #12]
 801d840:	0598      	lsls	r0, r3, #22
 801d842:	d4f7      	bmi.n	801d834 <_vfiprintf_r+0x44>
 801d844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d846:	f7ff ff47 	bl	801d6d8 <__retarget_lock_release_recursive>
 801d84a:	e7f3      	b.n	801d834 <_vfiprintf_r+0x44>
 801d84c:	2300      	movs	r3, #0
 801d84e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d850:	2320      	movs	r3, #32
 801d852:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d856:	f8cd 800c 	str.w	r8, [sp, #12]
 801d85a:	2330      	movs	r3, #48	@ 0x30
 801d85c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801da0c <_vfiprintf_r+0x21c>
 801d860:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d864:	f04f 0901 	mov.w	r9, #1
 801d868:	4623      	mov	r3, r4
 801d86a:	469a      	mov	sl, r3
 801d86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d870:	b10a      	cbz	r2, 801d876 <_vfiprintf_r+0x86>
 801d872:	2a25      	cmp	r2, #37	@ 0x25
 801d874:	d1f9      	bne.n	801d86a <_vfiprintf_r+0x7a>
 801d876:	ebba 0b04 	subs.w	fp, sl, r4
 801d87a:	d00b      	beq.n	801d894 <_vfiprintf_r+0xa4>
 801d87c:	465b      	mov	r3, fp
 801d87e:	4622      	mov	r2, r4
 801d880:	4629      	mov	r1, r5
 801d882:	4630      	mov	r0, r6
 801d884:	f7ff ffa1 	bl	801d7ca <__sfputs_r>
 801d888:	3001      	adds	r0, #1
 801d88a:	f000 80a7 	beq.w	801d9dc <_vfiprintf_r+0x1ec>
 801d88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d890:	445a      	add	r2, fp
 801d892:	9209      	str	r2, [sp, #36]	@ 0x24
 801d894:	f89a 3000 	ldrb.w	r3, [sl]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	f000 809f 	beq.w	801d9dc <_vfiprintf_r+0x1ec>
 801d89e:	2300      	movs	r3, #0
 801d8a0:	f04f 32ff 	mov.w	r2, #4294967295
 801d8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8a8:	f10a 0a01 	add.w	sl, sl, #1
 801d8ac:	9304      	str	r3, [sp, #16]
 801d8ae:	9307      	str	r3, [sp, #28]
 801d8b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d8b4:	931a      	str	r3, [sp, #104]	@ 0x68
 801d8b6:	4654      	mov	r4, sl
 801d8b8:	2205      	movs	r2, #5
 801d8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8be:	4853      	ldr	r0, [pc, #332]	@ (801da0c <_vfiprintf_r+0x21c>)
 801d8c0:	f7e2 fd1e 	bl	8000300 <memchr>
 801d8c4:	9a04      	ldr	r2, [sp, #16]
 801d8c6:	b9d8      	cbnz	r0, 801d900 <_vfiprintf_r+0x110>
 801d8c8:	06d1      	lsls	r1, r2, #27
 801d8ca:	bf44      	itt	mi
 801d8cc:	2320      	movmi	r3, #32
 801d8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8d2:	0713      	lsls	r3, r2, #28
 801d8d4:	bf44      	itt	mi
 801d8d6:	232b      	movmi	r3, #43	@ 0x2b
 801d8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d8dc:	f89a 3000 	ldrb.w	r3, [sl]
 801d8e0:	2b2a      	cmp	r3, #42	@ 0x2a
 801d8e2:	d015      	beq.n	801d910 <_vfiprintf_r+0x120>
 801d8e4:	9a07      	ldr	r2, [sp, #28]
 801d8e6:	4654      	mov	r4, sl
 801d8e8:	2000      	movs	r0, #0
 801d8ea:	f04f 0c0a 	mov.w	ip, #10
 801d8ee:	4621      	mov	r1, r4
 801d8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8f4:	3b30      	subs	r3, #48	@ 0x30
 801d8f6:	2b09      	cmp	r3, #9
 801d8f8:	d94b      	bls.n	801d992 <_vfiprintf_r+0x1a2>
 801d8fa:	b1b0      	cbz	r0, 801d92a <_vfiprintf_r+0x13a>
 801d8fc:	9207      	str	r2, [sp, #28]
 801d8fe:	e014      	b.n	801d92a <_vfiprintf_r+0x13a>
 801d900:	eba0 0308 	sub.w	r3, r0, r8
 801d904:	fa09 f303 	lsl.w	r3, r9, r3
 801d908:	4313      	orrs	r3, r2
 801d90a:	9304      	str	r3, [sp, #16]
 801d90c:	46a2      	mov	sl, r4
 801d90e:	e7d2      	b.n	801d8b6 <_vfiprintf_r+0xc6>
 801d910:	9b03      	ldr	r3, [sp, #12]
 801d912:	1d19      	adds	r1, r3, #4
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	9103      	str	r1, [sp, #12]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	bfbb      	ittet	lt
 801d91c:	425b      	neglt	r3, r3
 801d91e:	f042 0202 	orrlt.w	r2, r2, #2
 801d922:	9307      	strge	r3, [sp, #28]
 801d924:	9307      	strlt	r3, [sp, #28]
 801d926:	bfb8      	it	lt
 801d928:	9204      	strlt	r2, [sp, #16]
 801d92a:	7823      	ldrb	r3, [r4, #0]
 801d92c:	2b2e      	cmp	r3, #46	@ 0x2e
 801d92e:	d10a      	bne.n	801d946 <_vfiprintf_r+0x156>
 801d930:	7863      	ldrb	r3, [r4, #1]
 801d932:	2b2a      	cmp	r3, #42	@ 0x2a
 801d934:	d132      	bne.n	801d99c <_vfiprintf_r+0x1ac>
 801d936:	9b03      	ldr	r3, [sp, #12]
 801d938:	1d1a      	adds	r2, r3, #4
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	9203      	str	r2, [sp, #12]
 801d93e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d942:	3402      	adds	r4, #2
 801d944:	9305      	str	r3, [sp, #20]
 801d946:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801da1c <_vfiprintf_r+0x22c>
 801d94a:	7821      	ldrb	r1, [r4, #0]
 801d94c:	2203      	movs	r2, #3
 801d94e:	4650      	mov	r0, sl
 801d950:	f7e2 fcd6 	bl	8000300 <memchr>
 801d954:	b138      	cbz	r0, 801d966 <_vfiprintf_r+0x176>
 801d956:	9b04      	ldr	r3, [sp, #16]
 801d958:	eba0 000a 	sub.w	r0, r0, sl
 801d95c:	2240      	movs	r2, #64	@ 0x40
 801d95e:	4082      	lsls	r2, r0
 801d960:	4313      	orrs	r3, r2
 801d962:	3401      	adds	r4, #1
 801d964:	9304      	str	r3, [sp, #16]
 801d966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d96a:	4829      	ldr	r0, [pc, #164]	@ (801da10 <_vfiprintf_r+0x220>)
 801d96c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d970:	2206      	movs	r2, #6
 801d972:	f7e2 fcc5 	bl	8000300 <memchr>
 801d976:	2800      	cmp	r0, #0
 801d978:	d03f      	beq.n	801d9fa <_vfiprintf_r+0x20a>
 801d97a:	4b26      	ldr	r3, [pc, #152]	@ (801da14 <_vfiprintf_r+0x224>)
 801d97c:	bb1b      	cbnz	r3, 801d9c6 <_vfiprintf_r+0x1d6>
 801d97e:	9b03      	ldr	r3, [sp, #12]
 801d980:	3307      	adds	r3, #7
 801d982:	f023 0307 	bic.w	r3, r3, #7
 801d986:	3308      	adds	r3, #8
 801d988:	9303      	str	r3, [sp, #12]
 801d98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d98c:	443b      	add	r3, r7
 801d98e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d990:	e76a      	b.n	801d868 <_vfiprintf_r+0x78>
 801d992:	fb0c 3202 	mla	r2, ip, r2, r3
 801d996:	460c      	mov	r4, r1
 801d998:	2001      	movs	r0, #1
 801d99a:	e7a8      	b.n	801d8ee <_vfiprintf_r+0xfe>
 801d99c:	2300      	movs	r3, #0
 801d99e:	3401      	adds	r4, #1
 801d9a0:	9305      	str	r3, [sp, #20]
 801d9a2:	4619      	mov	r1, r3
 801d9a4:	f04f 0c0a 	mov.w	ip, #10
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9ae:	3a30      	subs	r2, #48	@ 0x30
 801d9b0:	2a09      	cmp	r2, #9
 801d9b2:	d903      	bls.n	801d9bc <_vfiprintf_r+0x1cc>
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d0c6      	beq.n	801d946 <_vfiprintf_r+0x156>
 801d9b8:	9105      	str	r1, [sp, #20]
 801d9ba:	e7c4      	b.n	801d946 <_vfiprintf_r+0x156>
 801d9bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9c0:	4604      	mov	r4, r0
 801d9c2:	2301      	movs	r3, #1
 801d9c4:	e7f0      	b.n	801d9a8 <_vfiprintf_r+0x1b8>
 801d9c6:	ab03      	add	r3, sp, #12
 801d9c8:	9300      	str	r3, [sp, #0]
 801d9ca:	462a      	mov	r2, r5
 801d9cc:	4b12      	ldr	r3, [pc, #72]	@ (801da18 <_vfiprintf_r+0x228>)
 801d9ce:	a904      	add	r1, sp, #16
 801d9d0:	4630      	mov	r0, r6
 801d9d2:	f3af 8000 	nop.w
 801d9d6:	4607      	mov	r7, r0
 801d9d8:	1c78      	adds	r0, r7, #1
 801d9da:	d1d6      	bne.n	801d98a <_vfiprintf_r+0x19a>
 801d9dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9de:	07d9      	lsls	r1, r3, #31
 801d9e0:	d405      	bmi.n	801d9ee <_vfiprintf_r+0x1fe>
 801d9e2:	89ab      	ldrh	r3, [r5, #12]
 801d9e4:	059a      	lsls	r2, r3, #22
 801d9e6:	d402      	bmi.n	801d9ee <_vfiprintf_r+0x1fe>
 801d9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9ea:	f7ff fe75 	bl	801d6d8 <__retarget_lock_release_recursive>
 801d9ee:	89ab      	ldrh	r3, [r5, #12]
 801d9f0:	065b      	lsls	r3, r3, #25
 801d9f2:	f53f af1f 	bmi.w	801d834 <_vfiprintf_r+0x44>
 801d9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d9f8:	e71e      	b.n	801d838 <_vfiprintf_r+0x48>
 801d9fa:	ab03      	add	r3, sp, #12
 801d9fc:	9300      	str	r3, [sp, #0]
 801d9fe:	462a      	mov	r2, r5
 801da00:	4b05      	ldr	r3, [pc, #20]	@ (801da18 <_vfiprintf_r+0x228>)
 801da02:	a904      	add	r1, sp, #16
 801da04:	4630      	mov	r0, r6
 801da06:	f000 f879 	bl	801dafc <_printf_i>
 801da0a:	e7e4      	b.n	801d9d6 <_vfiprintf_r+0x1e6>
 801da0c:	0801ed48 	.word	0x0801ed48
 801da10:	0801ed52 	.word	0x0801ed52
 801da14:	00000000 	.word	0x00000000
 801da18:	0801d7cb 	.word	0x0801d7cb
 801da1c:	0801ed4e 	.word	0x0801ed4e

0801da20 <_printf_common>:
 801da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da24:	4616      	mov	r6, r2
 801da26:	4698      	mov	r8, r3
 801da28:	688a      	ldr	r2, [r1, #8]
 801da2a:	690b      	ldr	r3, [r1, #16]
 801da2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801da30:	4293      	cmp	r3, r2
 801da32:	bfb8      	it	lt
 801da34:	4613      	movlt	r3, r2
 801da36:	6033      	str	r3, [r6, #0]
 801da38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801da3c:	4607      	mov	r7, r0
 801da3e:	460c      	mov	r4, r1
 801da40:	b10a      	cbz	r2, 801da46 <_printf_common+0x26>
 801da42:	3301      	adds	r3, #1
 801da44:	6033      	str	r3, [r6, #0]
 801da46:	6823      	ldr	r3, [r4, #0]
 801da48:	0699      	lsls	r1, r3, #26
 801da4a:	bf42      	ittt	mi
 801da4c:	6833      	ldrmi	r3, [r6, #0]
 801da4e:	3302      	addmi	r3, #2
 801da50:	6033      	strmi	r3, [r6, #0]
 801da52:	6825      	ldr	r5, [r4, #0]
 801da54:	f015 0506 	ands.w	r5, r5, #6
 801da58:	d106      	bne.n	801da68 <_printf_common+0x48>
 801da5a:	f104 0a19 	add.w	sl, r4, #25
 801da5e:	68e3      	ldr	r3, [r4, #12]
 801da60:	6832      	ldr	r2, [r6, #0]
 801da62:	1a9b      	subs	r3, r3, r2
 801da64:	42ab      	cmp	r3, r5
 801da66:	dc26      	bgt.n	801dab6 <_printf_common+0x96>
 801da68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801da6c:	6822      	ldr	r2, [r4, #0]
 801da6e:	3b00      	subs	r3, #0
 801da70:	bf18      	it	ne
 801da72:	2301      	movne	r3, #1
 801da74:	0692      	lsls	r2, r2, #26
 801da76:	d42b      	bmi.n	801dad0 <_printf_common+0xb0>
 801da78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801da7c:	4641      	mov	r1, r8
 801da7e:	4638      	mov	r0, r7
 801da80:	47c8      	blx	r9
 801da82:	3001      	adds	r0, #1
 801da84:	d01e      	beq.n	801dac4 <_printf_common+0xa4>
 801da86:	6823      	ldr	r3, [r4, #0]
 801da88:	6922      	ldr	r2, [r4, #16]
 801da8a:	f003 0306 	and.w	r3, r3, #6
 801da8e:	2b04      	cmp	r3, #4
 801da90:	bf02      	ittt	eq
 801da92:	68e5      	ldreq	r5, [r4, #12]
 801da94:	6833      	ldreq	r3, [r6, #0]
 801da96:	1aed      	subeq	r5, r5, r3
 801da98:	68a3      	ldr	r3, [r4, #8]
 801da9a:	bf0c      	ite	eq
 801da9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801daa0:	2500      	movne	r5, #0
 801daa2:	4293      	cmp	r3, r2
 801daa4:	bfc4      	itt	gt
 801daa6:	1a9b      	subgt	r3, r3, r2
 801daa8:	18ed      	addgt	r5, r5, r3
 801daaa:	2600      	movs	r6, #0
 801daac:	341a      	adds	r4, #26
 801daae:	42b5      	cmp	r5, r6
 801dab0:	d11a      	bne.n	801dae8 <_printf_common+0xc8>
 801dab2:	2000      	movs	r0, #0
 801dab4:	e008      	b.n	801dac8 <_printf_common+0xa8>
 801dab6:	2301      	movs	r3, #1
 801dab8:	4652      	mov	r2, sl
 801daba:	4641      	mov	r1, r8
 801dabc:	4638      	mov	r0, r7
 801dabe:	47c8      	blx	r9
 801dac0:	3001      	adds	r0, #1
 801dac2:	d103      	bne.n	801dacc <_printf_common+0xac>
 801dac4:	f04f 30ff 	mov.w	r0, #4294967295
 801dac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dacc:	3501      	adds	r5, #1
 801dace:	e7c6      	b.n	801da5e <_printf_common+0x3e>
 801dad0:	18e1      	adds	r1, r4, r3
 801dad2:	1c5a      	adds	r2, r3, #1
 801dad4:	2030      	movs	r0, #48	@ 0x30
 801dad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dada:	4422      	add	r2, r4
 801dadc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dae4:	3302      	adds	r3, #2
 801dae6:	e7c7      	b.n	801da78 <_printf_common+0x58>
 801dae8:	2301      	movs	r3, #1
 801daea:	4622      	mov	r2, r4
 801daec:	4641      	mov	r1, r8
 801daee:	4638      	mov	r0, r7
 801daf0:	47c8      	blx	r9
 801daf2:	3001      	adds	r0, #1
 801daf4:	d0e6      	beq.n	801dac4 <_printf_common+0xa4>
 801daf6:	3601      	adds	r6, #1
 801daf8:	e7d9      	b.n	801daae <_printf_common+0x8e>
	...

0801dafc <_printf_i>:
 801dafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801db00:	7e0f      	ldrb	r7, [r1, #24]
 801db02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801db04:	2f78      	cmp	r7, #120	@ 0x78
 801db06:	4691      	mov	r9, r2
 801db08:	4680      	mov	r8, r0
 801db0a:	460c      	mov	r4, r1
 801db0c:	469a      	mov	sl, r3
 801db0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801db12:	d807      	bhi.n	801db24 <_printf_i+0x28>
 801db14:	2f62      	cmp	r7, #98	@ 0x62
 801db16:	d80a      	bhi.n	801db2e <_printf_i+0x32>
 801db18:	2f00      	cmp	r7, #0
 801db1a:	f000 80d2 	beq.w	801dcc2 <_printf_i+0x1c6>
 801db1e:	2f58      	cmp	r7, #88	@ 0x58
 801db20:	f000 80b9 	beq.w	801dc96 <_printf_i+0x19a>
 801db24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801db28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801db2c:	e03a      	b.n	801dba4 <_printf_i+0xa8>
 801db2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801db32:	2b15      	cmp	r3, #21
 801db34:	d8f6      	bhi.n	801db24 <_printf_i+0x28>
 801db36:	a101      	add	r1, pc, #4	@ (adr r1, 801db3c <_printf_i+0x40>)
 801db38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801db3c:	0801db95 	.word	0x0801db95
 801db40:	0801dba9 	.word	0x0801dba9
 801db44:	0801db25 	.word	0x0801db25
 801db48:	0801db25 	.word	0x0801db25
 801db4c:	0801db25 	.word	0x0801db25
 801db50:	0801db25 	.word	0x0801db25
 801db54:	0801dba9 	.word	0x0801dba9
 801db58:	0801db25 	.word	0x0801db25
 801db5c:	0801db25 	.word	0x0801db25
 801db60:	0801db25 	.word	0x0801db25
 801db64:	0801db25 	.word	0x0801db25
 801db68:	0801dca9 	.word	0x0801dca9
 801db6c:	0801dbd3 	.word	0x0801dbd3
 801db70:	0801dc63 	.word	0x0801dc63
 801db74:	0801db25 	.word	0x0801db25
 801db78:	0801db25 	.word	0x0801db25
 801db7c:	0801dccb 	.word	0x0801dccb
 801db80:	0801db25 	.word	0x0801db25
 801db84:	0801dbd3 	.word	0x0801dbd3
 801db88:	0801db25 	.word	0x0801db25
 801db8c:	0801db25 	.word	0x0801db25
 801db90:	0801dc6b 	.word	0x0801dc6b
 801db94:	6833      	ldr	r3, [r6, #0]
 801db96:	1d1a      	adds	r2, r3, #4
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	6032      	str	r2, [r6, #0]
 801db9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dba4:	2301      	movs	r3, #1
 801dba6:	e09d      	b.n	801dce4 <_printf_i+0x1e8>
 801dba8:	6833      	ldr	r3, [r6, #0]
 801dbaa:	6820      	ldr	r0, [r4, #0]
 801dbac:	1d19      	adds	r1, r3, #4
 801dbae:	6031      	str	r1, [r6, #0]
 801dbb0:	0606      	lsls	r6, r0, #24
 801dbb2:	d501      	bpl.n	801dbb8 <_printf_i+0xbc>
 801dbb4:	681d      	ldr	r5, [r3, #0]
 801dbb6:	e003      	b.n	801dbc0 <_printf_i+0xc4>
 801dbb8:	0645      	lsls	r5, r0, #25
 801dbba:	d5fb      	bpl.n	801dbb4 <_printf_i+0xb8>
 801dbbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dbc0:	2d00      	cmp	r5, #0
 801dbc2:	da03      	bge.n	801dbcc <_printf_i+0xd0>
 801dbc4:	232d      	movs	r3, #45	@ 0x2d
 801dbc6:	426d      	negs	r5, r5
 801dbc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dbcc:	4859      	ldr	r0, [pc, #356]	@ (801dd34 <_printf_i+0x238>)
 801dbce:	230a      	movs	r3, #10
 801dbd0:	e011      	b.n	801dbf6 <_printf_i+0xfa>
 801dbd2:	6821      	ldr	r1, [r4, #0]
 801dbd4:	6833      	ldr	r3, [r6, #0]
 801dbd6:	0608      	lsls	r0, r1, #24
 801dbd8:	f853 5b04 	ldr.w	r5, [r3], #4
 801dbdc:	d402      	bmi.n	801dbe4 <_printf_i+0xe8>
 801dbde:	0649      	lsls	r1, r1, #25
 801dbe0:	bf48      	it	mi
 801dbe2:	b2ad      	uxthmi	r5, r5
 801dbe4:	2f6f      	cmp	r7, #111	@ 0x6f
 801dbe6:	4853      	ldr	r0, [pc, #332]	@ (801dd34 <_printf_i+0x238>)
 801dbe8:	6033      	str	r3, [r6, #0]
 801dbea:	bf14      	ite	ne
 801dbec:	230a      	movne	r3, #10
 801dbee:	2308      	moveq	r3, #8
 801dbf0:	2100      	movs	r1, #0
 801dbf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dbf6:	6866      	ldr	r6, [r4, #4]
 801dbf8:	60a6      	str	r6, [r4, #8]
 801dbfa:	2e00      	cmp	r6, #0
 801dbfc:	bfa2      	ittt	ge
 801dbfe:	6821      	ldrge	r1, [r4, #0]
 801dc00:	f021 0104 	bicge.w	r1, r1, #4
 801dc04:	6021      	strge	r1, [r4, #0]
 801dc06:	b90d      	cbnz	r5, 801dc0c <_printf_i+0x110>
 801dc08:	2e00      	cmp	r6, #0
 801dc0a:	d04b      	beq.n	801dca4 <_printf_i+0x1a8>
 801dc0c:	4616      	mov	r6, r2
 801dc0e:	fbb5 f1f3 	udiv	r1, r5, r3
 801dc12:	fb03 5711 	mls	r7, r3, r1, r5
 801dc16:	5dc7      	ldrb	r7, [r0, r7]
 801dc18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dc1c:	462f      	mov	r7, r5
 801dc1e:	42bb      	cmp	r3, r7
 801dc20:	460d      	mov	r5, r1
 801dc22:	d9f4      	bls.n	801dc0e <_printf_i+0x112>
 801dc24:	2b08      	cmp	r3, #8
 801dc26:	d10b      	bne.n	801dc40 <_printf_i+0x144>
 801dc28:	6823      	ldr	r3, [r4, #0]
 801dc2a:	07df      	lsls	r7, r3, #31
 801dc2c:	d508      	bpl.n	801dc40 <_printf_i+0x144>
 801dc2e:	6923      	ldr	r3, [r4, #16]
 801dc30:	6861      	ldr	r1, [r4, #4]
 801dc32:	4299      	cmp	r1, r3
 801dc34:	bfde      	ittt	le
 801dc36:	2330      	movle	r3, #48	@ 0x30
 801dc38:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dc3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dc40:	1b92      	subs	r2, r2, r6
 801dc42:	6122      	str	r2, [r4, #16]
 801dc44:	f8cd a000 	str.w	sl, [sp]
 801dc48:	464b      	mov	r3, r9
 801dc4a:	aa03      	add	r2, sp, #12
 801dc4c:	4621      	mov	r1, r4
 801dc4e:	4640      	mov	r0, r8
 801dc50:	f7ff fee6 	bl	801da20 <_printf_common>
 801dc54:	3001      	adds	r0, #1
 801dc56:	d14a      	bne.n	801dcee <_printf_i+0x1f2>
 801dc58:	f04f 30ff 	mov.w	r0, #4294967295
 801dc5c:	b004      	add	sp, #16
 801dc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc62:	6823      	ldr	r3, [r4, #0]
 801dc64:	f043 0320 	orr.w	r3, r3, #32
 801dc68:	6023      	str	r3, [r4, #0]
 801dc6a:	4833      	ldr	r0, [pc, #204]	@ (801dd38 <_printf_i+0x23c>)
 801dc6c:	2778      	movs	r7, #120	@ 0x78
 801dc6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dc72:	6823      	ldr	r3, [r4, #0]
 801dc74:	6831      	ldr	r1, [r6, #0]
 801dc76:	061f      	lsls	r7, r3, #24
 801dc78:	f851 5b04 	ldr.w	r5, [r1], #4
 801dc7c:	d402      	bmi.n	801dc84 <_printf_i+0x188>
 801dc7e:	065f      	lsls	r7, r3, #25
 801dc80:	bf48      	it	mi
 801dc82:	b2ad      	uxthmi	r5, r5
 801dc84:	6031      	str	r1, [r6, #0]
 801dc86:	07d9      	lsls	r1, r3, #31
 801dc88:	bf44      	itt	mi
 801dc8a:	f043 0320 	orrmi.w	r3, r3, #32
 801dc8e:	6023      	strmi	r3, [r4, #0]
 801dc90:	b11d      	cbz	r5, 801dc9a <_printf_i+0x19e>
 801dc92:	2310      	movs	r3, #16
 801dc94:	e7ac      	b.n	801dbf0 <_printf_i+0xf4>
 801dc96:	4827      	ldr	r0, [pc, #156]	@ (801dd34 <_printf_i+0x238>)
 801dc98:	e7e9      	b.n	801dc6e <_printf_i+0x172>
 801dc9a:	6823      	ldr	r3, [r4, #0]
 801dc9c:	f023 0320 	bic.w	r3, r3, #32
 801dca0:	6023      	str	r3, [r4, #0]
 801dca2:	e7f6      	b.n	801dc92 <_printf_i+0x196>
 801dca4:	4616      	mov	r6, r2
 801dca6:	e7bd      	b.n	801dc24 <_printf_i+0x128>
 801dca8:	6833      	ldr	r3, [r6, #0]
 801dcaa:	6825      	ldr	r5, [r4, #0]
 801dcac:	6961      	ldr	r1, [r4, #20]
 801dcae:	1d18      	adds	r0, r3, #4
 801dcb0:	6030      	str	r0, [r6, #0]
 801dcb2:	062e      	lsls	r6, r5, #24
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	d501      	bpl.n	801dcbc <_printf_i+0x1c0>
 801dcb8:	6019      	str	r1, [r3, #0]
 801dcba:	e002      	b.n	801dcc2 <_printf_i+0x1c6>
 801dcbc:	0668      	lsls	r0, r5, #25
 801dcbe:	d5fb      	bpl.n	801dcb8 <_printf_i+0x1bc>
 801dcc0:	8019      	strh	r1, [r3, #0]
 801dcc2:	2300      	movs	r3, #0
 801dcc4:	6123      	str	r3, [r4, #16]
 801dcc6:	4616      	mov	r6, r2
 801dcc8:	e7bc      	b.n	801dc44 <_printf_i+0x148>
 801dcca:	6833      	ldr	r3, [r6, #0]
 801dccc:	1d1a      	adds	r2, r3, #4
 801dcce:	6032      	str	r2, [r6, #0]
 801dcd0:	681e      	ldr	r6, [r3, #0]
 801dcd2:	6862      	ldr	r2, [r4, #4]
 801dcd4:	2100      	movs	r1, #0
 801dcd6:	4630      	mov	r0, r6
 801dcd8:	f7e2 fb12 	bl	8000300 <memchr>
 801dcdc:	b108      	cbz	r0, 801dce2 <_printf_i+0x1e6>
 801dcde:	1b80      	subs	r0, r0, r6
 801dce0:	6060      	str	r0, [r4, #4]
 801dce2:	6863      	ldr	r3, [r4, #4]
 801dce4:	6123      	str	r3, [r4, #16]
 801dce6:	2300      	movs	r3, #0
 801dce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dcec:	e7aa      	b.n	801dc44 <_printf_i+0x148>
 801dcee:	6923      	ldr	r3, [r4, #16]
 801dcf0:	4632      	mov	r2, r6
 801dcf2:	4649      	mov	r1, r9
 801dcf4:	4640      	mov	r0, r8
 801dcf6:	47d0      	blx	sl
 801dcf8:	3001      	adds	r0, #1
 801dcfa:	d0ad      	beq.n	801dc58 <_printf_i+0x15c>
 801dcfc:	6823      	ldr	r3, [r4, #0]
 801dcfe:	079b      	lsls	r3, r3, #30
 801dd00:	d413      	bmi.n	801dd2a <_printf_i+0x22e>
 801dd02:	68e0      	ldr	r0, [r4, #12]
 801dd04:	9b03      	ldr	r3, [sp, #12]
 801dd06:	4298      	cmp	r0, r3
 801dd08:	bfb8      	it	lt
 801dd0a:	4618      	movlt	r0, r3
 801dd0c:	e7a6      	b.n	801dc5c <_printf_i+0x160>
 801dd0e:	2301      	movs	r3, #1
 801dd10:	4632      	mov	r2, r6
 801dd12:	4649      	mov	r1, r9
 801dd14:	4640      	mov	r0, r8
 801dd16:	47d0      	blx	sl
 801dd18:	3001      	adds	r0, #1
 801dd1a:	d09d      	beq.n	801dc58 <_printf_i+0x15c>
 801dd1c:	3501      	adds	r5, #1
 801dd1e:	68e3      	ldr	r3, [r4, #12]
 801dd20:	9903      	ldr	r1, [sp, #12]
 801dd22:	1a5b      	subs	r3, r3, r1
 801dd24:	42ab      	cmp	r3, r5
 801dd26:	dcf2      	bgt.n	801dd0e <_printf_i+0x212>
 801dd28:	e7eb      	b.n	801dd02 <_printf_i+0x206>
 801dd2a:	2500      	movs	r5, #0
 801dd2c:	f104 0619 	add.w	r6, r4, #25
 801dd30:	e7f5      	b.n	801dd1e <_printf_i+0x222>
 801dd32:	bf00      	nop
 801dd34:	0801ed59 	.word	0x0801ed59
 801dd38:	0801ed6a 	.word	0x0801ed6a

0801dd3c <__sflush_r>:
 801dd3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd44:	0716      	lsls	r6, r2, #28
 801dd46:	4605      	mov	r5, r0
 801dd48:	460c      	mov	r4, r1
 801dd4a:	d454      	bmi.n	801ddf6 <__sflush_r+0xba>
 801dd4c:	684b      	ldr	r3, [r1, #4]
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	dc02      	bgt.n	801dd58 <__sflush_r+0x1c>
 801dd52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	dd48      	ble.n	801ddea <__sflush_r+0xae>
 801dd58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd5a:	2e00      	cmp	r6, #0
 801dd5c:	d045      	beq.n	801ddea <__sflush_r+0xae>
 801dd5e:	2300      	movs	r3, #0
 801dd60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dd64:	682f      	ldr	r7, [r5, #0]
 801dd66:	6a21      	ldr	r1, [r4, #32]
 801dd68:	602b      	str	r3, [r5, #0]
 801dd6a:	d030      	beq.n	801ddce <__sflush_r+0x92>
 801dd6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dd6e:	89a3      	ldrh	r3, [r4, #12]
 801dd70:	0759      	lsls	r1, r3, #29
 801dd72:	d505      	bpl.n	801dd80 <__sflush_r+0x44>
 801dd74:	6863      	ldr	r3, [r4, #4]
 801dd76:	1ad2      	subs	r2, r2, r3
 801dd78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd7a:	b10b      	cbz	r3, 801dd80 <__sflush_r+0x44>
 801dd7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dd7e:	1ad2      	subs	r2, r2, r3
 801dd80:	2300      	movs	r3, #0
 801dd82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd84:	6a21      	ldr	r1, [r4, #32]
 801dd86:	4628      	mov	r0, r5
 801dd88:	47b0      	blx	r6
 801dd8a:	1c43      	adds	r3, r0, #1
 801dd8c:	89a3      	ldrh	r3, [r4, #12]
 801dd8e:	d106      	bne.n	801dd9e <__sflush_r+0x62>
 801dd90:	6829      	ldr	r1, [r5, #0]
 801dd92:	291d      	cmp	r1, #29
 801dd94:	d82b      	bhi.n	801ddee <__sflush_r+0xb2>
 801dd96:	4a2a      	ldr	r2, [pc, #168]	@ (801de40 <__sflush_r+0x104>)
 801dd98:	410a      	asrs	r2, r1
 801dd9a:	07d6      	lsls	r6, r2, #31
 801dd9c:	d427      	bmi.n	801ddee <__sflush_r+0xb2>
 801dd9e:	2200      	movs	r2, #0
 801dda0:	6062      	str	r2, [r4, #4]
 801dda2:	04d9      	lsls	r1, r3, #19
 801dda4:	6922      	ldr	r2, [r4, #16]
 801dda6:	6022      	str	r2, [r4, #0]
 801dda8:	d504      	bpl.n	801ddb4 <__sflush_r+0x78>
 801ddaa:	1c42      	adds	r2, r0, #1
 801ddac:	d101      	bne.n	801ddb2 <__sflush_r+0x76>
 801ddae:	682b      	ldr	r3, [r5, #0]
 801ddb0:	b903      	cbnz	r3, 801ddb4 <__sflush_r+0x78>
 801ddb2:	6560      	str	r0, [r4, #84]	@ 0x54
 801ddb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ddb6:	602f      	str	r7, [r5, #0]
 801ddb8:	b1b9      	cbz	r1, 801ddea <__sflush_r+0xae>
 801ddba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ddbe:	4299      	cmp	r1, r3
 801ddc0:	d002      	beq.n	801ddc8 <__sflush_r+0x8c>
 801ddc2:	4628      	mov	r0, r5
 801ddc4:	f7ff fc98 	bl	801d6f8 <_free_r>
 801ddc8:	2300      	movs	r3, #0
 801ddca:	6363      	str	r3, [r4, #52]	@ 0x34
 801ddcc:	e00d      	b.n	801ddea <__sflush_r+0xae>
 801ddce:	2301      	movs	r3, #1
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	47b0      	blx	r6
 801ddd4:	4602      	mov	r2, r0
 801ddd6:	1c50      	adds	r0, r2, #1
 801ddd8:	d1c9      	bne.n	801dd6e <__sflush_r+0x32>
 801ddda:	682b      	ldr	r3, [r5, #0]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d0c6      	beq.n	801dd6e <__sflush_r+0x32>
 801dde0:	2b1d      	cmp	r3, #29
 801dde2:	d001      	beq.n	801dde8 <__sflush_r+0xac>
 801dde4:	2b16      	cmp	r3, #22
 801dde6:	d11e      	bne.n	801de26 <__sflush_r+0xea>
 801dde8:	602f      	str	r7, [r5, #0]
 801ddea:	2000      	movs	r0, #0
 801ddec:	e022      	b.n	801de34 <__sflush_r+0xf8>
 801ddee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ddf2:	b21b      	sxth	r3, r3
 801ddf4:	e01b      	b.n	801de2e <__sflush_r+0xf2>
 801ddf6:	690f      	ldr	r7, [r1, #16]
 801ddf8:	2f00      	cmp	r7, #0
 801ddfa:	d0f6      	beq.n	801ddea <__sflush_r+0xae>
 801ddfc:	0793      	lsls	r3, r2, #30
 801ddfe:	680e      	ldr	r6, [r1, #0]
 801de00:	bf08      	it	eq
 801de02:	694b      	ldreq	r3, [r1, #20]
 801de04:	600f      	str	r7, [r1, #0]
 801de06:	bf18      	it	ne
 801de08:	2300      	movne	r3, #0
 801de0a:	eba6 0807 	sub.w	r8, r6, r7
 801de0e:	608b      	str	r3, [r1, #8]
 801de10:	f1b8 0f00 	cmp.w	r8, #0
 801de14:	dde9      	ble.n	801ddea <__sflush_r+0xae>
 801de16:	6a21      	ldr	r1, [r4, #32]
 801de18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801de1a:	4643      	mov	r3, r8
 801de1c:	463a      	mov	r2, r7
 801de1e:	4628      	mov	r0, r5
 801de20:	47b0      	blx	r6
 801de22:	2800      	cmp	r0, #0
 801de24:	dc08      	bgt.n	801de38 <__sflush_r+0xfc>
 801de26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de2e:	81a3      	strh	r3, [r4, #12]
 801de30:	f04f 30ff 	mov.w	r0, #4294967295
 801de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de38:	4407      	add	r7, r0
 801de3a:	eba8 0800 	sub.w	r8, r8, r0
 801de3e:	e7e7      	b.n	801de10 <__sflush_r+0xd4>
 801de40:	dfbffffe 	.word	0xdfbffffe

0801de44 <_fflush_r>:
 801de44:	b538      	push	{r3, r4, r5, lr}
 801de46:	690b      	ldr	r3, [r1, #16]
 801de48:	4605      	mov	r5, r0
 801de4a:	460c      	mov	r4, r1
 801de4c:	b913      	cbnz	r3, 801de54 <_fflush_r+0x10>
 801de4e:	2500      	movs	r5, #0
 801de50:	4628      	mov	r0, r5
 801de52:	bd38      	pop	{r3, r4, r5, pc}
 801de54:	b118      	cbz	r0, 801de5e <_fflush_r+0x1a>
 801de56:	6a03      	ldr	r3, [r0, #32]
 801de58:	b90b      	cbnz	r3, 801de5e <_fflush_r+0x1a>
 801de5a:	f7ff f9cf 	bl	801d1fc <__sinit>
 801de5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d0f3      	beq.n	801de4e <_fflush_r+0xa>
 801de66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de68:	07d0      	lsls	r0, r2, #31
 801de6a:	d404      	bmi.n	801de76 <_fflush_r+0x32>
 801de6c:	0599      	lsls	r1, r3, #22
 801de6e:	d402      	bmi.n	801de76 <_fflush_r+0x32>
 801de70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de72:	f7ff fc30 	bl	801d6d6 <__retarget_lock_acquire_recursive>
 801de76:	4628      	mov	r0, r5
 801de78:	4621      	mov	r1, r4
 801de7a:	f7ff ff5f 	bl	801dd3c <__sflush_r>
 801de7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de80:	07da      	lsls	r2, r3, #31
 801de82:	4605      	mov	r5, r0
 801de84:	d4e4      	bmi.n	801de50 <_fflush_r+0xc>
 801de86:	89a3      	ldrh	r3, [r4, #12]
 801de88:	059b      	lsls	r3, r3, #22
 801de8a:	d4e1      	bmi.n	801de50 <_fflush_r+0xc>
 801de8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de8e:	f7ff fc23 	bl	801d6d8 <__retarget_lock_release_recursive>
 801de92:	e7dd      	b.n	801de50 <_fflush_r+0xc>

0801de94 <__swhatbuf_r>:
 801de94:	b570      	push	{r4, r5, r6, lr}
 801de96:	460c      	mov	r4, r1
 801de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de9c:	2900      	cmp	r1, #0
 801de9e:	b096      	sub	sp, #88	@ 0x58
 801dea0:	4615      	mov	r5, r2
 801dea2:	461e      	mov	r6, r3
 801dea4:	da0d      	bge.n	801dec2 <__swhatbuf_r+0x2e>
 801dea6:	89a3      	ldrh	r3, [r4, #12]
 801dea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801deac:	f04f 0100 	mov.w	r1, #0
 801deb0:	bf14      	ite	ne
 801deb2:	2340      	movne	r3, #64	@ 0x40
 801deb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801deb8:	2000      	movs	r0, #0
 801deba:	6031      	str	r1, [r6, #0]
 801debc:	602b      	str	r3, [r5, #0]
 801debe:	b016      	add	sp, #88	@ 0x58
 801dec0:	bd70      	pop	{r4, r5, r6, pc}
 801dec2:	466a      	mov	r2, sp
 801dec4:	f000 f87c 	bl	801dfc0 <_fstat_r>
 801dec8:	2800      	cmp	r0, #0
 801deca:	dbec      	blt.n	801dea6 <__swhatbuf_r+0x12>
 801decc:	9901      	ldr	r1, [sp, #4]
 801dece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ded2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ded6:	4259      	negs	r1, r3
 801ded8:	4159      	adcs	r1, r3
 801deda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dede:	e7eb      	b.n	801deb8 <__swhatbuf_r+0x24>

0801dee0 <__smakebuf_r>:
 801dee0:	898b      	ldrh	r3, [r1, #12]
 801dee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dee4:	079d      	lsls	r5, r3, #30
 801dee6:	4606      	mov	r6, r0
 801dee8:	460c      	mov	r4, r1
 801deea:	d507      	bpl.n	801defc <__smakebuf_r+0x1c>
 801deec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801def0:	6023      	str	r3, [r4, #0]
 801def2:	6123      	str	r3, [r4, #16]
 801def4:	2301      	movs	r3, #1
 801def6:	6163      	str	r3, [r4, #20]
 801def8:	b003      	add	sp, #12
 801defa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801defc:	ab01      	add	r3, sp, #4
 801defe:	466a      	mov	r2, sp
 801df00:	f7ff ffc8 	bl	801de94 <__swhatbuf_r>
 801df04:	9f00      	ldr	r7, [sp, #0]
 801df06:	4605      	mov	r5, r0
 801df08:	4639      	mov	r1, r7
 801df0a:	4630      	mov	r0, r6
 801df0c:	f7ff f828 	bl	801cf60 <_malloc_r>
 801df10:	b948      	cbnz	r0, 801df26 <__smakebuf_r+0x46>
 801df12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df16:	059a      	lsls	r2, r3, #22
 801df18:	d4ee      	bmi.n	801def8 <__smakebuf_r+0x18>
 801df1a:	f023 0303 	bic.w	r3, r3, #3
 801df1e:	f043 0302 	orr.w	r3, r3, #2
 801df22:	81a3      	strh	r3, [r4, #12]
 801df24:	e7e2      	b.n	801deec <__smakebuf_r+0xc>
 801df26:	89a3      	ldrh	r3, [r4, #12]
 801df28:	6020      	str	r0, [r4, #0]
 801df2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801df2e:	81a3      	strh	r3, [r4, #12]
 801df30:	9b01      	ldr	r3, [sp, #4]
 801df32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801df36:	b15b      	cbz	r3, 801df50 <__smakebuf_r+0x70>
 801df38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df3c:	4630      	mov	r0, r6
 801df3e:	f000 f851 	bl	801dfe4 <_isatty_r>
 801df42:	b128      	cbz	r0, 801df50 <__smakebuf_r+0x70>
 801df44:	89a3      	ldrh	r3, [r4, #12]
 801df46:	f023 0303 	bic.w	r3, r3, #3
 801df4a:	f043 0301 	orr.w	r3, r3, #1
 801df4e:	81a3      	strh	r3, [r4, #12]
 801df50:	89a3      	ldrh	r3, [r4, #12]
 801df52:	431d      	orrs	r5, r3
 801df54:	81a5      	strh	r5, [r4, #12]
 801df56:	e7cf      	b.n	801def8 <__smakebuf_r+0x18>

0801df58 <_putc_r>:
 801df58:	b570      	push	{r4, r5, r6, lr}
 801df5a:	460d      	mov	r5, r1
 801df5c:	4614      	mov	r4, r2
 801df5e:	4606      	mov	r6, r0
 801df60:	b118      	cbz	r0, 801df6a <_putc_r+0x12>
 801df62:	6a03      	ldr	r3, [r0, #32]
 801df64:	b90b      	cbnz	r3, 801df6a <_putc_r+0x12>
 801df66:	f7ff f949 	bl	801d1fc <__sinit>
 801df6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df6c:	07d8      	lsls	r0, r3, #31
 801df6e:	d405      	bmi.n	801df7c <_putc_r+0x24>
 801df70:	89a3      	ldrh	r3, [r4, #12]
 801df72:	0599      	lsls	r1, r3, #22
 801df74:	d402      	bmi.n	801df7c <_putc_r+0x24>
 801df76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df78:	f7ff fbad 	bl	801d6d6 <__retarget_lock_acquire_recursive>
 801df7c:	68a3      	ldr	r3, [r4, #8]
 801df7e:	3b01      	subs	r3, #1
 801df80:	2b00      	cmp	r3, #0
 801df82:	60a3      	str	r3, [r4, #8]
 801df84:	da05      	bge.n	801df92 <_putc_r+0x3a>
 801df86:	69a2      	ldr	r2, [r4, #24]
 801df88:	4293      	cmp	r3, r2
 801df8a:	db12      	blt.n	801dfb2 <_putc_r+0x5a>
 801df8c:	b2eb      	uxtb	r3, r5
 801df8e:	2b0a      	cmp	r3, #10
 801df90:	d00f      	beq.n	801dfb2 <_putc_r+0x5a>
 801df92:	6823      	ldr	r3, [r4, #0]
 801df94:	1c5a      	adds	r2, r3, #1
 801df96:	6022      	str	r2, [r4, #0]
 801df98:	701d      	strb	r5, [r3, #0]
 801df9a:	b2ed      	uxtb	r5, r5
 801df9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df9e:	07da      	lsls	r2, r3, #31
 801dfa0:	d405      	bmi.n	801dfae <_putc_r+0x56>
 801dfa2:	89a3      	ldrh	r3, [r4, #12]
 801dfa4:	059b      	lsls	r3, r3, #22
 801dfa6:	d402      	bmi.n	801dfae <_putc_r+0x56>
 801dfa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dfaa:	f7ff fb95 	bl	801d6d8 <__retarget_lock_release_recursive>
 801dfae:	4628      	mov	r0, r5
 801dfb0:	bd70      	pop	{r4, r5, r6, pc}
 801dfb2:	4629      	mov	r1, r5
 801dfb4:	4622      	mov	r2, r4
 801dfb6:	4630      	mov	r0, r6
 801dfb8:	f7ff fa11 	bl	801d3de <__swbuf_r>
 801dfbc:	4605      	mov	r5, r0
 801dfbe:	e7ed      	b.n	801df9c <_putc_r+0x44>

0801dfc0 <_fstat_r>:
 801dfc0:	b538      	push	{r3, r4, r5, lr}
 801dfc2:	4d07      	ldr	r5, [pc, #28]	@ (801dfe0 <_fstat_r+0x20>)
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	4604      	mov	r4, r0
 801dfc8:	4608      	mov	r0, r1
 801dfca:	4611      	mov	r1, r2
 801dfcc:	602b      	str	r3, [r5, #0]
 801dfce:	f7ed fd77 	bl	800bac0 <_fstat>
 801dfd2:	1c43      	adds	r3, r0, #1
 801dfd4:	d102      	bne.n	801dfdc <_fstat_r+0x1c>
 801dfd6:	682b      	ldr	r3, [r5, #0]
 801dfd8:	b103      	cbz	r3, 801dfdc <_fstat_r+0x1c>
 801dfda:	6023      	str	r3, [r4, #0]
 801dfdc:	bd38      	pop	{r3, r4, r5, pc}
 801dfde:	bf00      	nop
 801dfe0:	24000c48 	.word	0x24000c48

0801dfe4 <_isatty_r>:
 801dfe4:	b538      	push	{r3, r4, r5, lr}
 801dfe6:	4d06      	ldr	r5, [pc, #24]	@ (801e000 <_isatty_r+0x1c>)
 801dfe8:	2300      	movs	r3, #0
 801dfea:	4604      	mov	r4, r0
 801dfec:	4608      	mov	r0, r1
 801dfee:	602b      	str	r3, [r5, #0]
 801dff0:	f7ed fd76 	bl	800bae0 <_isatty>
 801dff4:	1c43      	adds	r3, r0, #1
 801dff6:	d102      	bne.n	801dffe <_isatty_r+0x1a>
 801dff8:	682b      	ldr	r3, [r5, #0]
 801dffa:	b103      	cbz	r3, 801dffe <_isatty_r+0x1a>
 801dffc:	6023      	str	r3, [r4, #0]
 801dffe:	bd38      	pop	{r3, r4, r5, pc}
 801e000:	24000c48 	.word	0x24000c48

0801e004 <_init>:
 801e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e006:	bf00      	nop
 801e008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e00a:	bc08      	pop	{r3}
 801e00c:	469e      	mov	lr, r3
 801e00e:	4770      	bx	lr

0801e010 <_fini>:
 801e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e012:	bf00      	nop
 801e014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e016:	bc08      	pop	{r3}
 801e018:	469e      	mov	lr, r3
 801e01a:	4770      	bx	lr
