
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08011678  08011678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011b9c  08011b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011ba4  08011ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011bac  08011bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08011bb4  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ca8  240000c0  08011c70  000130c0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000d68  08011c70  00013d68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fcbd  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f44  00000000  00000000  00042da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001880  00000000  00000000  00047cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ed  00000000  00000000  00049570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f6a6  00000000  00000000  0004a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025a91  00000000  00000000  00089f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177dd1  00000000  00000000  000af994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00227765  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085ec  00000000  00000000  002277a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0022fd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011660 	.word	0x08011660

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	08011660 	.word	0x08011660

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <_ZN9InterruptC1Ev+0x1c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08011a08 	.word	0x08011a08

08000a08 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a16:	f00f ff5d 	bl	80108d4 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a1a:	4905      	ldr	r1, [pc, #20]	@ (8000a30 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08011678 	.word	0x08011678
 8000a30:	240000dc 	.word	0x240000dc

08000a34 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4610      	mov	r0, r2
 8000a46:	4798      	blx	r3
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240000dc 	.word	0x240000dc

08000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000a58:	687b      	ldr	r3, [r7, #4]
  }
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	111b      	asrs	r3, r3, #4
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	815a      	strh	r2, [r3, #10]
  }
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 ff47 	bl	8001938 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
  }
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  }
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	f023 0303 	bic.w	r3, r3, #3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	e000      	b.n	8000b26 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000b24:	2300      	movs	r3, #0
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	e000      	b.n	8000b3a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    return _begin;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
  }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 feef 	bl	8001950 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000b72:	4603      	mov	r3, r0
  }
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f000 f864 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000bac:	bf00      	nop
  }
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	1acb      	subs	r3, r1, r3
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f84a 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
  }
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	bf94      	ite	ls
 8000c26:	2301      	movls	r3, #1
 8000c28:	2300      	movhi	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
  }
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe1 	bl	8000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e008      	b.n	8000c6c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
    return _right;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
  }
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000c94:	2105      	movs	r1, #5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f886 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bdb0      	pop	{r4, r5, r7, pc}

08000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f871 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000ce4:	2106      	movs	r1, #6
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f85e 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f84b 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f83a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000d46:	2104      	movs	r1, #4
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f82d 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fdf1 	bl	8001938 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
  }
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f81a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8d5 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d7c:	687b      	ldr	r3, [r7, #4]
  }
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000d8e:	2120      	movs	r1, #32
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f809 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8c4 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d9e:	687b      	ldr	r3, [r7, #4]
  }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a1a      	ldrb	r2, [r3, #8]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	721a      	strb	r2, [r3, #8]
  }
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fef3 	bl	8000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3310      	adds	r3, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff8c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return _pool;
 8000e1c:	687b      	ldr	r3, [r7, #4]
  }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    return _data;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3310      	adds	r3, #16
  }
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000e42:	b084      	sub	sp, #16
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	f107 001c 	add.w	r0, r7, #28
 8000e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	461c      	mov	r4, r3
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3310      	adds	r3, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e78:	b004      	add	sp, #16
 8000e7a:	4770      	bx	lr

08000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00f fba4 	bl	80105d4 <malloc>
 8000e8c:	4603      	mov	r3, r0
  }
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    free(p);
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f00f fb9f 	bl	80105e4 <free>
  }
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff fe53 	bl	8000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8000ebe:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e017      	b.n	8000efa <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdc4 	bl	8000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	e005      	b.n	8000ef2 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fde0 	bl	8000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffcd 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  _head = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f54:	d904      	bls.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b39      	cmp	r3, #57	@ 0x39
 8000f5a:	d801      	bhi.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8000f6e:	b590      	push	{r4, r7, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fc      	ldr	r4, [r7, #12]
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdf4 	bl	8000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8000f94:	f104 0308 	add.w	r3, r4, #8
 8000f98:	463a      	mov	r2, r7
 8000f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9e:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d303      	bcc.n	8000fd4 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
      return;
 8000fd2:	e00b      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	1c58      	adds	r0, r3, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	6048      	str	r0, [r1, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e000      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8000fea:	bf00      	nop
  }
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    append('\0');
 8000ffe:	2100      	movs	r1, #0
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffd3 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0108 	add.w	r1, r3, #8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff fdca 	bl	8000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
  }
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff86 	bl	8000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	e000      	b.n	8001082 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	080116ac 	.word	0x080116ac

08001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6011      	str	r1, [r2, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
  }
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 80010c0:	2300      	movs	r3, #0
  }
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	e005      	b.n	8001130 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  }
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	080010cf 	.word	0x080010cf

08001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    return _code;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
  }
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d81b      	bhi.n	80011a0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001189 	.word	0x08001189
 8001174:	08001199 	.word	0x08001199
 8001178:	08001195 	.word	0x08001195
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
 8001184:	0800118d 	.word	0x0800118d
      case Ok:
        return "Ok";
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800118a:	e00a      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 800118e:	e008      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001192:	e006      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 8001196:	e004      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800119a:	e002      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 800119e:	e000      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	080116b0 	.word	0x080116b0
 80011b4:	080116b4 	.word	0x080116b4
 80011b8:	080116bc 	.word	0x080116bc
 80011bc:	080116c8 	.word	0x080116c8
 80011c0:	080116d8 	.word	0x080116d8
 80011c4:	080116e8 	.word	0x080116e8
 80011c8:	080116f8 	.word	0x080116f8

080011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2232      	movs	r2, #50	@ 0x32
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f818 	bl	8001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80011f8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	e00c      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e003      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800121e:	e7ec      	b.n	80011fa <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8001238:	2304      	movs	r3, #4
 800123a:	e000      	b.n	800123e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 800123c:	2300      	movs	r3, #0
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001240:	4413      	add	r3, r2
  }
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	080116fc 	.word	0x080116fc

08001254 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	2210      	movs	r2, #16
 8001278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800127c:	f7ff fbda 	bl	8000a34 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <__io_putchar+0x20>)
 8001296:	f00a fce4 	bl	800bc62 <HAL_UART_Transmit>
	  return ch;
 800129a:	687b      	ldr	r3, [r7, #4]
	}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000480 	.word	0x24000480

080012a8 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b08d      	sub	sp, #52	@ 0x34
 80012ae:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80012b0:	4852      	ldr	r0, [pc, #328]	@ (80013fc <_Z14readJsonConfigv+0x154>)
 80012b2:	f00f fb7f 	bl	80109b4 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80012b6:	4852      	ldr	r0, [pc, #328]	@ (8001400 <_Z14readJsonConfigv+0x158>)
 80012b8:	f00f fb7c 	bl	80109b4 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80012bc:	2200      	movs	r2, #0
 80012be:	4951      	ldr	r1, [pc, #324]	@ (8001404 <_Z14readJsonConfigv+0x15c>)
 80012c0:	4851      	ldr	r0, [pc, #324]	@ (8001408 <_Z14readJsonConfigv+0x160>)
 80012c2:	f00e fb8d 	bl	800f9e0 <f_mount>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80012d6:	484d      	ldr	r0, [pc, #308]	@ (800140c <_Z14readJsonConfigv+0x164>)
 80012d8:	f00f fafc 	bl	80108d4 <iprintf>
    	Error_Handler();
 80012dc:	f000 fb20 	bl	8001920 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80012e0:	e087      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80012e2:	2201      	movs	r2, #1
 80012e4:	494a      	ldr	r1, [pc, #296]	@ (8001410 <_Z14readJsonConfigv+0x168>)
 80012e6:	484b      	ldr	r0, [pc, #300]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80012e8:	f00e fbc0 	bl	800fa6c <f_open>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 80012fc:	4846      	ldr	r0, [pc, #280]	@ (8001418 <_Z14readJsonConfigv+0x170>)
 80012fe:	f00f fb59 	bl	80109b4 <puts>
			Error_Handler();
 8001302:	f000 fb0d 	bl	8001920 <Error_Handler>
}
 8001306:	e074      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		}
 8001308:	466b      	mov	r3, sp
 800130a:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 800130c:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	4841      	ldr	r0, [pc, #260]	@ (800141c <_Z14readJsonConfigv+0x174>)
 8001316:	f00f fadd 	bl	80108d4 <iprintf>
			char rtext[length];
 800131a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800131c:	1e4b      	subs	r3, r1, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	460a      	mov	r2, r1
 8001322:	2300      	movs	r3, #0
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	460a      	mov	r2, r1
 800133e:	2300      	movs	r3, #0
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	00eb      	lsls	r3, r5, #3
 800134e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001352:	00e2      	lsls	r2, r4, #3
 8001354:	460b      	mov	r3, r1
 8001356:	3307      	adds	r3, #7
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	ebad 0d03 	sub.w	sp, sp, r3
 8001360:	466b      	mov	r3, sp
 8001362:	3300      	adds	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	4829      	ldr	r0, [pc, #164]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800136e:	f00e fd37 	bl	800fde0 <f_read>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <_Z14readJsonConfigv+0xe2>
				printf("	JSON config file read FAILURE\n");
 8001382:	4827      	ldr	r0, [pc, #156]	@ (8001420 <_Z14readJsonConfigv+0x178>)
 8001384:	f00f fb16 	bl	80109b4 <puts>
 8001388:	e02f      	b.n	80013ea <_Z14readJsonConfigv+0x142>
				printf("	JSON config file read SUCCESS!\n");
 800138a:	4826      	ldr	r0, [pc, #152]	@ (8001424 <_Z14readJsonConfigv+0x17c>)
 800138c:	f00f fb12 	bl	80109b4 <puts>
				strJson.reserve(length + 1);
 8001390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001392:	3301      	adds	r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4824      	ldr	r0, [pc, #144]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 8001398:	f00f f875 	bl	8010486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a0:	e017      	b.n	80013d2 <_Z14readJsonConfigv+0x12a>
			    	strJson = strJson + rtext[i];
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a6:	4413      	add	r3, r2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	491e      	ldr	r1, [pc, #120]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fb1a 	bl	80019ea <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013be:	f00e fff3 	bl	80103a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e ffe8 	bl	801039c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ce:	3301      	adds	r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbe3      	blt.n	80013a2 <_Z14readJsonConfigv+0xfa>
			    printf("\n%s\n", strJson.c_str());
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013dc:	f00f f8b6 	bl	801054c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <_Z14readJsonConfigv+0x184>)
 80013e6:	f00f fa75 	bl	80108d4 <iprintf>
			f_close(&SDFile);
 80013ea:	480a      	ldr	r0, [pc, #40]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80013ec:	f00e feb5 	bl	801015a <f_close>
 80013f0:	46b5      	mov	sp, r6
}
 80013f2:	bf00      	nop
 80013f4:	3734      	adds	r7, #52	@ 0x34
 80013f6:	46bd      	mov	sp, r7
 80013f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013fc:	0801170c 	.word	0x0801170c
 8001400:	08011730 	.word	0x08011730
 8001404:	24000578 	.word	0x24000578
 8001408:	2400057c 	.word	0x2400057c
 800140c:	08011750 	.word	0x08011750
 8001410:	0801176c 	.word	0x0801176c
 8001414:	240007ac 	.word	0x240007ac
 8001418:	08011778 	.word	0x08011778
 800141c:	0801179c 	.word	0x0801179c
 8001420:	080117c0 	.word	0x080117c0
 8001424:	080117e0 	.word	0x080117e0
 8001428:	24000330 	.word	0x24000330
 800142c:	08011800 	.word	0x08011800

08001430 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001436:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <_Z15deserialiseJSONv+0xa0>)
 8001438:	f00f fabc 	bl	80109b4 <puts>

    const char *json = strJson.c_str();
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <_Z15deserialiseJSONv+0xa4>)
 800143e:	f00f f885 	bl	801054c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001442:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff febf 	bl	80011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800144e:	7a3a      	ldrb	r2, [r7, #8]
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	4821      	ldr	r0, [pc, #132]	@ (80014d8 <_Z15deserialiseJSONv+0xa8>)
 8001454:	f000 fadf 	bl	8001a16 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001458:	4603      	mov	r3, r0
 800145a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <_Z15deserialiseJSONv+0xac>)
 800145e:	f00f fa39 	bl	80108d4 <iprintf>

    switch (error.code())
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe6b 	bl	8001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800146a:	4603      	mov	r3, r0
 800146c:	2b03      	cmp	r3, #3
 800146e:	d011      	beq.n	8001494 <_Z15deserialiseJSONv+0x64>
 8001470:	2b03      	cmp	r3, #3
 8001472:	dc16      	bgt.n	80014a2 <_Z15deserialiseJSONv+0x72>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <_Z15deserialiseJSONv+0x4e>
 8001478:	2b02      	cmp	r3, #2
 800147a:	d004      	beq.n	8001486 <_Z15deserialiseJSONv+0x56>
 800147c:	e011      	b.n	80014a2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <_Z15deserialiseJSONv+0xb0>)
 8001480:	f00f fa98 	bl	80109b4 <puts>
            break;
 8001484:	e01f      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8001486:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <_Z15deserialiseJSONv+0xb4>)
 8001488:	f00f fa94 	bl	80109b4 <puts>
            configError = true;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
            break;
 8001492:	e018      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001494:	4815      	ldr	r0, [pc, #84]	@ (80014ec <_Z15deserialiseJSONv+0xbc>)
 8001496:	f00f fa8d 	bl	80109b4 <puts>
            configError = true;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
            break;
 80014a0:	e011      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80014a2:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <_Z15deserialiseJSONv+0xc0>)
 80014a4:	f00f fa16 	bl	80108d4 <iprintf>
            printf(error.c_str());
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe54 	bl	8001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00f fa0e 	bl	80108d4 <iprintf>
            printf("\n");
 80014b8:	200a      	movs	r0, #10
 80014ba:	f00f fa1d 	bl	80108f8 <putchar>
            configError = true;
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
            break;
 80014c4:	bf00      	nop
    }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08011808 	.word	0x08011808
 80014d4:	24000330 	.word	0x24000330
 80014d8:	24000350 	.word	0x24000350
 80014dc:	0801182c 	.word	0x0801182c
 80014e0:	08011848 	.word	0x08011848
 80014e4:	08011864 	.word	0x08011864
 80014e8:	24000380 	.word	0x24000380
 80014ec:	08011874 	.word	0x08011874
 80014f0:	08011888 	.word	0x08011888

080014f4 <_Z5setupv>:

void setup()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <_Z5setupv+0x24>)
 80014fa:	f00f fa5b 	bl	80109b4 <puts>

     // initialise the Remora comms
    comms->init();
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <_Z5setupv+0x28>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fa8a 	bl	8003a1c <_ZN11RemoraComms4initEv>
    comms->start();
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <_Z5setupv+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fbef 	bl	8003cf0 <_ZN11RemoraComms5startEv>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	080118a4 	.word	0x080118a4
 800151c:	24000514 	.word	0x24000514

08001520 <main>:


int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <main+0x90>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11b      	bne.n	8001574 <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <main+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001550:	f3bf 8f4f 	dsb	sy
}
 8001554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001556:	f3bf 8f6f 	isb	sy
}
 800155a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <main+0x90>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <main+0x90>)
 8001562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001566:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	e000      	b.n	8001576 <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001574:	bf00      	nop
	SCB_EnableICache();
	HAL_Init();
 8001576:	f002 fd47 	bl	8004008 <HAL_Init>
	SystemClock_Config();
 800157a:	f000 f81f 	bl	80015bc <_Z18SystemClock_Configv>

	MX_GPIO_Init(); // for SD card detect
 800157e:	f000 f973 	bl	8001868 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001582:	f000 f911 	bl	80017a8 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();
 8001586:	f000 f8e3 	bl	8001750 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800158a:	f00c fa4f 	bl	800da2c <MX_FATFS_Init>


	printf("Remora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <main+0x94>)
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <main+0x98>)
 800159a:	f00f f99b 	bl	80108d4 <iprintf>

	readJsonConfig();
 800159e:	f7ff fe83 	bl	80012a8 <_Z14readJsonConfigv>
	deserialiseJSON();
 80015a2:	f7ff ff45 	bl	8001430 <_Z15deserialiseJSONv>
	setup();
 80015a6:	f7ff ffa5 	bl	80014f4 <_Z5setupv>

	while (1)
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <main+0x8a>
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	080118f4 	.word	0x080118f4
 80015b8:	080118c8 	.word	0x080118c8

080015bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09e      	sub	sp, #120	@ 0x78
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c6:	224c      	movs	r2, #76	@ 0x4c
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00f faec 	bl	8010ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00f fae5 	bl	8010ba8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015de:	2002      	movs	r0, #2
 80015e0:	f004 fd6c 	bl	80060bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b56      	ldr	r3, [pc, #344]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	4a55      	ldr	r2, [pc, #340]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b52      	ldr	r3, [pc, #328]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a51      	ldr	r2, [pc, #324]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001616:	bf00      	nop
 8001618:	4b4b      	ldr	r3, [pc, #300]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f3      	bne.n	8001618 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b46      	ldr	r3, [pc, #280]	@ (800174c <_Z18SystemClock_Configv+0x190>)
 8001632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001636:	4a45      	ldr	r2, [pc, #276]	@ (800174c <_Z18SystemClock_Configv+0x190>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001640:	4b42      	ldr	r3, [pc, #264]	@ (800174c <_Z18SystemClock_Configv+0x190>)
 8001642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a3c      	ldr	r2, [pc, #240]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 800166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166c:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001674:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <_Z18SystemClock_Configv+0x188>)
 8001676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001680:	bf00      	nop
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <_Z18SystemClock_Configv+0x18c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f3      	bne.n	8001682 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <_Z18SystemClock_Configv+0x190>)
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	4a2a      	ldr	r2, [pc, #168]	@ (800174c <_Z18SystemClock_Configv+0x190>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b8:	2302      	movs	r3, #2
 80016ba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80016bc:	2305      	movs	r3, #5
 80016be:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016c0:	23c0      	movs	r3, #192	@ 0xc0
 80016c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016d0:	2308      	movs	r3, #8
 80016d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fd25 	bl	8006130 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80016f6:	f000 f913 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	233f      	movs	r3, #63	@ 0x3f
 80016fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2303      	movs	r3, #3
 8001700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001706:	2308      	movs	r3, #8
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800170a:	2340      	movs	r3, #64	@ 0x40
 800170c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800170e:	2340      	movs	r3, #64	@ 0x40
 8001710:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001718:	2340      	movs	r3, #64	@ 0x40
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2104      	movs	r1, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f005 f95e 	bl	80069e4 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8001738:	f000 f8f2 	bl	8001920 <Error_Handler>
  }
}
 800173c:	bf00      	nop
 800173e:	3778      	adds	r7, #120	@ 0x78
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58000400 	.word	0x58000400
 8001748:	58024800 	.word	0x58024800
 800174c:	58024400 	.word	0x58024400

08001750 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001762:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001766:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800176a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800176e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001778:	2208      	movs	r2, #8
 800177a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800177c:	4807      	ldr	r0, [pc, #28]	@ (800179c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800177e:	f008 f9bb 	bl	8009af8 <HAL_SD_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8001792:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8001794:	f00f f90e 	bl	80109b4 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	24000404 	.word	0x24000404
 80017a0:	52007000 	.word	0x52007000
 80017a4:	080118fc 	.word	0x080118fc

080017a8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001864 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80017b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f0:	481b      	ldr	r0, [pc, #108]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80017f2:	f00a f9e6 	bl	800bbc2 <HAL_UART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001806:	f000 f88b 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4814      	ldr	r0, [pc, #80]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800180e:	f00b fa78 	bl	800cd02 <HAL_UARTEx_SetTxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001822:	f000 f87d 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800182a:	f00b faa8 	bl	800cd7e <HAL_UARTEx_SetRxFifoThreshold>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800183e:	f000 f86f 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001842:	4807      	ldr	r0, [pc, #28]	@ (8001860 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001844:	f00b fa24 	bl	800cc90 <HAL_UARTEx_DisableFifoMode>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001858:	f000 f862 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000480 	.word	0x24000480
 8001864:	40011000 	.word	0x40011000

08001868 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 8001886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <_ZL12MX_GPIO_Initv+0xb0>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f6:	2310      	movs	r3, #16
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <_ZL12MX_GPIO_Initv+0xb4>)
 800190a:	f004 fa27 	bl	8005d5c <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58020800 	.word	0x58020800

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8001924:	4803      	ldr	r0, [pc, #12]	@ (8001934 <Error_Handler+0x14>)
 8001926:	f00e ffd5 	bl	80108d4 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800192a:	b672      	cpsid	i
}
 800192c:	bf00      	nop

  __disable_irq();
  while (1)
 800192e:	bf00      	nop
 8001930:	e7fd      	b.n	800192e <Error_Handler+0xe>
 8001932:	bf00      	nop
 8001934:	0801190c 	.word	0x0801190c

08001938 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
  }
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001958:	2110      	movs	r1, #16
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff f96c 	bl	8000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8001960:	4603      	mov	r3, r0
  }
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f85c 	bl	8001a36 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 80019a6:	b590      	push	{r4, r7, lr}
 80019a8:	b08b      	sub	sp, #44	@ 0x2c
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4621      	mov	r1, r4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f865 	bl	8001a86 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f103 0408 	add.w	r4, r3, #8
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f842 	bl	8001a54 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fa31 	bl	8000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}

080019ea <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f00e fdc3 	bl	8010586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	461a      	mov	r2, r3
 8001a04:	2101      	movs	r1, #1
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f00e fd96 	bl	8010538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8001a0c:	bf00      	nop
    }
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8001a22:	793a      	ldrb	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f839 	bl	8001a9e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]
  }
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f83c 	bl	8000ade <_ZN19ArduinoJson6101_11010addPaddingEj>
 8001a66:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	6979      	ldr	r1, [r7, #20]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f848 	bl	8001b02 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8001a72:	4603      	mov	r3, r0
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff f840 	bl	8000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	7039      	strb	r1, [r7, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8001a9e:	b5b0      	push	{r4, r5, r7, lr}
 8001aa0:	b08a      	sub	sp, #40	@ 0x28
 8001aa2:	af02      	add	r7, sp, #8
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff f9a1 	bl	8000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff f9af 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	68b8      	ldr	r0, [r7, #8]
 8001aba:	f000 f831 	bl	8001b20 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8001abe:	4605      	mov	r5, r0
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff f9a7 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f837 	bl	8001b3e <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	793b      	ldrb	r3, [r7, #4]
 8001ad4:	f107 0010 	add.w	r0, r7, #16
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	462a      	mov	r2, r5
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f000 f83c 	bl	8001b5c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff f9a0 	bl	8000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f845 	bl	8001b82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}

08001b02 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f9b3 	bl	8000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8001b16:	4603      	mov	r3, r0
  }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fa9c 	bl	800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f863 	bl	8001c18 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8001b6a:	7e3b      	ldrb	r3, [r7, #24]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f85f 	bl	8001c38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f871 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001b92:	4603      	mov	r3, r0
 8001b94:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff faaf 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8001bc6:	7b3b      	ldrb	r3, [r7, #12]
 8001bc8:	e022      	b.n	8001c10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f932 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b5b      	cmp	r3, #91	@ 0x5b
 8001bd4:	d002      	beq.n	8001bdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8001bd6:	2b7b      	cmp	r3, #123	@ 0x7b
 8001bd8:	d00a      	beq.n	8001bf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8001bda:	e013      	b.n	8001c04 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7ff f8c1 	bl	8000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f94d 	bl	8001e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8001bec:	4603      	mov	r3, r0
 8001bee:	e00f      	b.n	8001c10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	f7ff f8c8 	bl	8000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fa6a 	bl	80020d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8001c00:	4603      	mov	r3, r0
 8001c02:	e005      	b.n	8001c10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fc27 	bl	800245a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	bf00      	nop
  }
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa00 	bl	800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
  }
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	7e3a      	ldrb	r2, [r7, #24]
 8001c5c:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	739a      	strb	r2, [r3, #14]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8d9 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c86:	f200 80c7 	bhi.w	8001e18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8001c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001d51 	.word	0x08001d51
 8001c94:	08001e19 	.word	0x08001e19
 8001c98:	08001e19 	.word	0x08001e19
 8001c9c:	08001e19 	.word	0x08001e19
 8001ca0:	08001e19 	.word	0x08001e19
 8001ca4:	08001e19 	.word	0x08001e19
 8001ca8:	08001e19 	.word	0x08001e19
 8001cac:	08001e19 	.word	0x08001e19
 8001cb0:	08001e19 	.word	0x08001e19
 8001cb4:	08001d61 	.word	0x08001d61
 8001cb8:	08001d61 	.word	0x08001d61
 8001cbc:	08001e19 	.word	0x08001e19
 8001cc0:	08001e19 	.word	0x08001e19
 8001cc4:	08001d61 	.word	0x08001d61
 8001cc8:	08001e19 	.word	0x08001e19
 8001ccc:	08001e19 	.word	0x08001e19
 8001cd0:	08001e19 	.word	0x08001e19
 8001cd4:	08001e19 	.word	0x08001e19
 8001cd8:	08001e19 	.word	0x08001e19
 8001cdc:	08001e19 	.word	0x08001e19
 8001ce0:	08001e19 	.word	0x08001e19
 8001ce4:	08001e19 	.word	0x08001e19
 8001ce8:	08001e19 	.word	0x08001e19
 8001cec:	08001e19 	.word	0x08001e19
 8001cf0:	08001e19 	.word	0x08001e19
 8001cf4:	08001e19 	.word	0x08001e19
 8001cf8:	08001e19 	.word	0x08001e19
 8001cfc:	08001e19 	.word	0x08001e19
 8001d00:	08001e19 	.word	0x08001e19
 8001d04:	08001e19 	.word	0x08001e19
 8001d08:	08001e19 	.word	0x08001e19
 8001d0c:	08001e19 	.word	0x08001e19
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001e19 	.word	0x08001e19
 8001d18:	08001e19 	.word	0x08001e19
 8001d1c:	08001e19 	.word	0x08001e19
 8001d20:	08001e19 	.word	0x08001e19
 8001d24:	08001e19 	.word	0x08001e19
 8001d28:	08001e19 	.word	0x08001e19
 8001d2c:	08001e19 	.word	0x08001e19
 8001d30:	08001e19 	.word	0x08001e19
 8001d34:	08001e19 	.word	0x08001e19
 8001d38:	08001e19 	.word	0x08001e19
 8001d3c:	08001e19 	.word	0x08001e19
 8001d40:	08001e19 	.word	0x08001e19
 8001d44:	08001e19 	.word	0x08001e19
 8001d48:	08001e19 	.word	0x08001e19
 8001d4c:	08001d69 	.word	0x08001d69
          return DeserializationError::IncompleteInput;
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f9c3 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001d5c:	7b3b      	ldrb	r3, [r7, #12]
 8001d5e:	e064      	b.n	8001e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fb99 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8001d66:	e05f      	b.n	8001e28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb95 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f860 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d78:	d002      	beq.n	8001d80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8001d7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d7c:	d02a      	beq.n	8001dd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8001d7e:	e042      	b.n	8001e06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fb89 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8001d86:	2300      	movs	r3, #0
 8001d88:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f852 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001d94:	7f7b      	ldrb	r3, [r7, #29]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f99e 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001da6:	7c3b      	ldrb	r3, [r7, #16]
 8001da8:	e03f      	b.n	8001e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8001daa:	7f7b      	ldrb	r3, [r7, #29]
 8001dac:	2b2f      	cmp	r3, #47	@ 0x2f
 8001dae:	d107      	bne.n	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fb6e 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8001dbc:	bf00      	nop
              break;
 8001dbe:	e02a      	b.n	8001e16 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8001dc0:	7f7b      	ldrb	r3, [r7, #29]
 8001dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
                move();
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fb63 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8001dd2:	e7da      	b.n	8001d8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb5f 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f82a 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001de4:	7fbb      	ldrb	r3, [r7, #30]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f976 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001df6:	7d3b      	ldrb	r3, [r7, #20]
 8001df8:	e017      	b.n	8001e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8001dfa:	7fbb      	ldrb	r3, [r7, #30]
 8001dfc:	2b0a      	cmp	r3, #10
 8001dfe:	d000      	beq.n	8001e02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8001e00:	e7e8      	b.n	8001dd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8001e02:	bf00      	nop
              break;
 8001e04:	e007      	b.n	8001e16 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f968 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001e12:	7e3b      	ldrb	r3, [r7, #24]
 8001e14:	e009      	b.n	8001e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8001e16:	e007      	b.n	8001e28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f95f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001e24:	7f3b      	ldrb	r3, [r7, #28]
 8001e26:	e000      	b.n	8001e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8001e28:	e728      	b.n	8001c7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop

08001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7b9b      	ldrb	r3, [r3, #14]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d017      	beq.n	8001e7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f932 	bl	80010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	735a      	strb	r2, [r3, #13]
 8001e60:	e008      	b.n	8001e74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f916 	bl	8001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	739a      	strb	r2, [r3, #14]
    return _current;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7b5b      	ldrb	r3, [r3, #13]
  }
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b098      	sub	sp, #96	@ 0x60
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f91f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ea4:	7c3b      	ldrb	r3, [r7, #16]
 8001ea6:	e111      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eac:	235b      	movs	r3, #91	@ 0x5b
 8001eae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8001eb2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001eb4:	f7ff ffbe 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e003      	b.n	8001eda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8001ed2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ed4:	f000 fae0 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8001ed8:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8001eda:	f083 0301 	eor.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8f9 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ef0:	7d3b      	ldrb	r3, [r7, #20]
 8001ef2:	e0eb      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff febd 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001efa:	4603      	mov	r3, r0
 8001efc:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f8fb 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8001f22:	2300      	movs	r3, #0
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8001f2e:	7b3b      	ldrb	r3, [r7, #12]
 8001f30:	e0cc      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f36:	235d      	movs	r3, #93	@ 0x5d
 8001f38:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8001f3c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f3e:	f7ff ff79 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e003      	b.n	8001f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8001f5c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f5e:	f000 fa9b 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8001f62:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8b7 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f78:	e0a8      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f7fe ffbe 	bl	8000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8001f86:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8001f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8001f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f92:	2103      	movs	r1, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f8a4 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f9e:	e095      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8001fac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fde7 	bl	8001b82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8001fc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fc8:	f107 020c 	add.w	r2, r7, #12
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f898 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8001fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8001ff4:	7b3b      	ldrb	r3, [r7, #12]
 8001ff6:	e069      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fe3b 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001ffe:	4603      	mov	r3, r0
 8002000:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002006:	f107 020c 	add.w	r2, r7, #12
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f879 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002026:	2300      	movs	r3, #0
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002032:	7b3b      	ldrb	r3, [r7, #12]
 8002034:	e04a      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800203a:	235d      	movs	r3, #93	@ 0x5d
 800203c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002040:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002042:	f7ff fef7 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800204e:	4293      	cmp	r3, r2
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 800205c:	2300      	movs	r3, #0
 800205e:	e003      	b.n	8002068 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002060:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002062:	f000 fa19 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002066:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 800206c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f835 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002078:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800207c:	e026      	b.n	80020cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	643b      	str	r3, [r7, #64]	@ 0x40
 8002082:	232c      	movs	r3, #44	@ 0x2c
 8002084:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002088:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800208a:	f7ff fed3 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002096:	4293      	cmp	r3, r2
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 80020a4:	2300      	movs	r3, #0
 80020a6:	e003      	b.n	80020b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 80020a8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80020aa:	f000 f9f5 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80020ae:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f43f af5f 	beq.w	8001f7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 80020bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020c0:	2102      	movs	r1, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f80d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020c8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 80020cc:	4618      	mov	r0, r3
 80020ce:	3760      	adds	r7, #96	@ 0x60
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b0a3      	sub	sp, #140	@ 0x8c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7b1b      	ldrb	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2105      	movs	r1, #5
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fff8 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020f2:	7c3b      	ldrb	r3, [r7, #16]
 80020f4:	e1ad      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020fc:	237b      	movs	r3, #123	@ 0x7b
 80020fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 8002102:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002106:	f7ff fe95 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002112:	4293      	cmp	r3, r2
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8002120:	2300      	movs	r3, #0
 8002122:	e004      	b.n	800212e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8002124:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002128:	f000 f9b6 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800212c:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ffcf 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002144:	7d3b      	ldrb	r3, [r7, #20]
 8002146:	e184      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fd93 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800214e:	4603      	mov	r3, r0
 8002150:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	f107 020c 	add.w	r2, r7, #12
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ffd1 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8002176:	2300      	movs	r3, #0
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8002182:	7b3b      	ldrb	r3, [r7, #12]
 8002184:	e165      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800218a:	237d      	movs	r3, #125	@ 0x7d
 800218c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8002190:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002192:	f7ff fe4f 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800219e:	4293      	cmp	r3, r2
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 80021ac:	2300      	movs	r3, #0
 80021ae:	e003      	b.n	80021b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80021b0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80021b2:	f000 f971 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80021b6:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80021bc:	f107 0320 	add.w	r3, r7, #32
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe ff8d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80021c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021cc:	e141      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f7fe fe6a 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80021da:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 80021de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 80021e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ea:	2103      	movs	r1, #3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff78 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80021f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021f6:	e12c      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f957 	bl	80024b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8002204:	4603      	mov	r3, r0
 8002206:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002208:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220c:	f107 020c 	add.w	r2, r7, #12
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ff76 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 800222c:	2300      	movs	r3, #0
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8002238:	7b3b      	ldrb	r3, [r7, #12]
 800223a:	e10a      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 800223c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fb91 	bl	800196a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f7fe fc1c 	bl	8000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fd0e 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002258:	4603      	mov	r3, r0
 800225a:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 800225c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff4c 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8002280:	2300      	movs	r3, #0
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 800228c:	7b3b      	ldrb	r3, [r7, #12]
 800228e:	e0e0      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	673b      	str	r3, [r7, #112]	@ 0x70
 8002294:	233a      	movs	r3, #58	@ 0x3a
 8002296:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 800229a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800229c:	f7ff fdca 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 80022b6:	2300      	movs	r3, #0
 80022b8:	e003      	b.n	80022c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 80022ba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80022bc:	f000 f8ec 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80022c0:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 80022cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022d0:	2102      	movs	r1, #2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe ff05 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80022d8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022dc:	e0b9      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7b1b      	ldrb	r3, [r3, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 80022ea:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80022ee:	f7fe fbaf 	bl	8000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fc43 	bl	8001b82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80022fc:	4603      	mov	r3, r0
 80022fe:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	3301      	adds	r3, #1
 8002306:	b2da      	uxtb	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 800230c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002310:	f107 020c 	add.w	r2, r7, #12
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fef4 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800231c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8002322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8002330:	2300      	movs	r3, #0
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	e088      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fc97 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002346:	4603      	mov	r3, r0
 8002348:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800234a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800234e:	f107 020c 	add.w	r2, r7, #12
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fed5 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800235a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 800236e:	2300      	movs	r3, #0
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	e069      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002382:	237d      	movs	r3, #125	@ 0x7d
 8002384:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8002388:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800238a:	f7ff fd53 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002396:	4293      	cmp	r3, r2
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80023a4:	2300      	movs	r3, #0
 80023a6:	e003      	b.n	80023b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80023a8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80023aa:	f000 f875 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80023ae:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 80023b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fe91 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80023c0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023c4:	e045      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ca:	232c      	movs	r3, #44	@ 0x2c
 80023cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 80023d0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023d2:	f7ff fd2f 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023de:	4293      	cmp	r3, r2
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 80023ec:	2300      	movs	r3, #0
 80023ee:	e003      	b.n	80023f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 80023f0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023f2:	f000 f851 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80023f6:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 8002402:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fe6a 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800240e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002412:	e01e      	b.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fc2d 	bl	8001c74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800241a:	4603      	mov	r3, r0
 800241c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800241e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002422:	f107 020c 	add.w	r2, r7, #12
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fe6b 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800242e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8002434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 8002442:	2300      	movs	r3, #0
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f43f aebf 	beq.w	80021ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8002450:	7b3b      	ldrb	r3, [r7, #12]
  }
 8002452:	4618      	mov	r0, r3
 8002454:	378c      	adds	r7, #140	@ 0x8c
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fce5 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f83f 	bl	80024f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f84c 	bl	8002518 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8002480:	4603      	mov	r3, r0
 8002482:	e005      	b.n	8002490 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f881 	bl	800258e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 800248c:	4603      	mov	r3, r0
 800248e:	bf00      	nop
  }
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    _loaded = false;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	739a      	strb	r2, [r3, #14]
  }
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fcb9 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f813 	bl	80024f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f92f 	bl	8002736 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80024d8:	4603      	mov	r3, r0
 80024da:	e005      	b.n	80024e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f9c1 	bl	8002866 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 80024e4:	4603      	mov	r3, r0
 80024e6:	bf00      	nop
  }
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b27      	cmp	r3, #39	@ 0x27
 80024fe:	d002      	beq.n	8002506 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b22      	cmp	r3, #34	@ 0x22
 8002504:	d101      	bne.n	800250a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 800250a:	2300      	movs	r3, #0
  }
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f904 	bl	8002736 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 800252e:	4603      	mov	r3, r0
 8002530:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	f107 020c 	add.w	r2, r7, #12
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fde1 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 8002556:	2300      	movs	r3, #0
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8002562:	7b3b      	ldrb	r3, [r7, #12]
 8002564:	e00f      	b.n	8002586 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f9fe 	bl	800196a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 800256e:	4603      	mov	r3, r0
 8002570:	4619      	mov	r1, r3
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	f7fe fbe2 	bl	8000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fdaf 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002584:	7f3b      	ldrb	r3, [r7, #28]
  }
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 800258e:	b580      	push	{r7, lr}
 8002590:	b0a0      	sub	sp, #128	@ 0x80
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fc48 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 80025aa:	e013      	b.n	80025d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff73 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 80025b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 80025bc:	3380      	adds	r3, #128	@ 0x80
 80025be:	443b      	add	r3, r7
 80025c0:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80025c4:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fc33 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 80025d4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f9af 	bl	800293c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80025e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80025ea:	d801      	bhi.n	80025f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1da      	bne.n	80025ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 80025f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80025fa:	3380      	adds	r3, #128	@ 0x80
 80025fc:	443b      	add	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8002604:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002608:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 800260c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002610:	2b74      	cmp	r3, #116	@ 0x74
 8002612:	d114      	bne.n	800263e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8002614:	2101      	movs	r1, #1
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f7fe fb36 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 800261c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002620:	2b04      	cmp	r3, #4
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800262a:	461a      	mov	r2, r3
 800262c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fd55 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002638:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800263c:	e077      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 800263e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002642:	2b66      	cmp	r3, #102	@ 0x66
 8002644:	d114      	bne.n	8002670 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8002646:	2100      	movs	r1, #0
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	f7fe fb1d 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 800264e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002652:	2b05      	cmp	r3, #5
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800265c:	461a      	mov	r2, r3
 800265e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fd3c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800266a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800266e:	e05e      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8002670:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002674:	2b6e      	cmp	r3, #110	@ 0x6e
 8002676:	d110      	bne.n	800269a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8002678:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800267c:	2b04      	cmp	r3, #4
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8002686:	461a      	mov	r2, r3
 8002688:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fd27 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002694:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002698:	e049      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f97b 	bl	80029a0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fb7c 	bl	8002dac <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d021      	beq.n	80026fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	dc2f      	bgt.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d00f      	beq.n	80026e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	d12b      	bne.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 80026c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f7fe fb17 	bl	8000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 80026d0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fd03 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80026dc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80026e0:	e025      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 80026e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f7fe faf6 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 80026ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fcf5 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80026f8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80026fc:	e017      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 80026fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8002702:	eeb0 0b47 	vmov.f64	d0, d7
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	f7fe fad3 	bl	8000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 800270c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fce5 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002718:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800271c:	e007      	b.n	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 800271e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fcdc 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800272a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 800272e:	4618      	mov	r0, r3
 8002730:	3780      	adds	r7, #128	@ 0x80
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b08c      	sub	sp, #48	@ 0x30
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f103 0208 	add.w	r2, r3, #8
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fc7d 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fb6e 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002758:	4603      	mov	r3, r0
 800275a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fe9a 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fb65 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fe91 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8002776:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800277a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800277e:	429a      	cmp	r2, r3
 8002780:	d04f      	beq.n	8002822 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8002782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fca6 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002796:	7e3b      	ldrb	r3, [r7, #24]
 8002798:	e061      	b.n	800285e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 800279a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800279e:	2b5c      	cmp	r3, #92	@ 0x5c
 80027a0:	d136      	bne.n	8002810 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fb46 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 80027ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fc90 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027c2:	7f3b      	ldrb	r3, [r7, #28]
 80027c4:	e04b      	b.n	800285e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 80027c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027ca:	2b75      	cmp	r3, #117	@ 0x75
 80027cc:	d108      	bne.n	80027e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 80027ce:	f107 0320 	add.w	r3, r7, #32
 80027d2:	2104      	movs	r1, #4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fc84 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027de:	e03e      	b.n	800285e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 80027e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcff 	bl	80011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 80027f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 80027f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fc6f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002808:	e029      	b.n	800285e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fe44 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 8002810:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fbc6 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 8002820:	e7a0      	b.n	8002764 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8002822:	bf00      	nop
    result = builder.complete();
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fbe4 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 800282e:	4602      	mov	r2, r0
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 800283c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002840:	2103      	movs	r1, #3
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fc4d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002848:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800284c:	e007      	b.n	800285e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 800284e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fc44 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800285a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 800285e:	4618      	mov	r0, r3
 8002860:	3730      	adds	r7, #48	@ 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b08a      	sub	sp, #40	@ 0x28
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0208 	add.w	r2, r3, #8
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fbe5 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fad6 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002888:	4603      	mov	r3, r0
 800288a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8002896:	f107 0318 	add.w	r3, r7, #24
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fc20 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028a2:	7e3b      	ldrb	r3, [r7, #24]
 80028a4:	e046      	b.n	8002934 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f846 	bl	800293c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fdee 	bl	8002498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 80028bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80028c0:	f107 0308 	add.w	r3, r7, #8
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fb70 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fab1 	bl	8001e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 80028d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f82d 	bl	800293c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e6      	bne.n	80028b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 80028e8:	e007      	b.n	80028fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fbf6 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028f6:	7f3b      	ldrb	r3, [r7, #28]
 80028f8:	e01c      	b.n	8002934 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 80028fa:	f107 0308 	add.w	r3, r7, #8
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fb79 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8002904:	4602      	mov	r2, r0
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fbe2 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800291e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002922:	e007      	b.n	8002934 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fbd9 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002930:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	@ 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2239      	movs	r2, #57	@ 0x39
 800294a:	2130      	movs	r1, #48	@ 0x30
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fa39 	bl	8002dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002952:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11a      	bne.n	800298e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	227a      	movs	r2, #122	@ 0x7a
 800295c:	215f      	movs	r1, #95	@ 0x5f
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa30 	bl	8002dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d111      	bne.n	800298e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	225a      	movs	r2, #90	@ 0x5a
 800296e:	2141      	movs	r1, #65	@ 0x41
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa27 	bl	8002dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002976:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002978:	2b00      	cmp	r3, #0
 800297a:	d108      	bne.n	800298e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002980:	d005      	beq.n	800298e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b2d      	cmp	r3, #45	@ 0x2d
 8002986:	d002      	beq.n	800298e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b2e      	cmp	r3, #46	@ 0x2e
 800298c:	d101      	bne.n	8002992 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8002992:	2300      	movs	r3, #0
  }
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	0000      	movs	r0, r0
	...

080029a0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b0a2      	sub	sp, #136	@ 0x88
 80029a6:	af02      	add	r7, sp, #8
 80029a8:	6478      	str	r0, [r7, #68]	@ 0x44
 80029aa:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 80029b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80029b8:	d008      	beq.n	80029cc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 80029ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80029bc:	d10a      	bne.n	80029d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 80029c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c6:	3301      	adds	r3, #1
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80029ca:	e003      	b.n	80029d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 80029cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ce:	3301      	adds	r3, #1
 80029d0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80029d2:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 80029d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80029da:	d003      	beq.n	80029e4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 80029dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80029e2:	d109      	bne.n	80029f8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 80029e4:	f000 fa08 	bl	8002df8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 80029e8:	eeb0 7b40 	vmov.f64	d7, d0
 80029ec:	eeb0 0b47 	vmov.f64	d0, d7
 80029f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80029f2:	f000 fa0f 	bl	8002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80029f6:	e1d4      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 80029f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b69      	cmp	r3, #105	@ 0x69
 80029fe:	d003      	beq.n	8002a08 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8002a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b49      	cmp	r3, #73	@ 0x49
 8002a06:	d114      	bne.n	8002a32 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8002a08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8002a10:	f000 fa16 	bl	8002e40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002a14:	eeb0 7b40 	vmov.f64	d7, d0
 8002a18:	eeb1 7b47 	vneg.f64	d7, d7
 8002a1c:	e003      	b.n	8002a26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8002a1e:	f000 fa0f 	bl	8002e40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002a22:	eeb0 7b40 	vmov.f64	d7, d0
 8002a26:	eeb0 0b47 	vmov.f64	d0, d7
 8002a2a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a2c:	f000 f9f2 	bl	8002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002a30:	e1b7      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8002a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fa85 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a4e:	d001      	beq.n	8002a54 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8002a5a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002a5c:	f000 f9fe 	bl	8002e5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002a60:	e19f      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8002a80:	e054      	b.n	8002b2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8002a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3b30      	subs	r3, #48	@ 0x30
 8002a88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8002a8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a90:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002a94:	49b2      	ldr	r1, [pc, #712]	@ (8002d60 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8002a96:	418b      	sbcs	r3, r1
 8002a98:	d251      	bcs.n	8002b3e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8002a9a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	0099      	lsls	r1, r3, #2
 8002aac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ab0:	0090      	lsls	r0, r2, #2
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	eb12 0804 	adds.w	r8, r2, r4
 8002aba:	eb43 0905 	adc.w	r9, r3, r5
 8002abe:	eb18 0308 	adds.w	r3, r8, r8
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	eb49 0309 	adc.w	r3, r9, r9
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002ace:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8002ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ada:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002adc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002af0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002af4:	4621      	mov	r1, r4
 8002af6:	4291      	cmp	r1, r2
 8002af8:	4629      	mov	r1, r5
 8002afa:	eb71 0303 	sbcs.w	r3, r1, r3
 8002afe:	d320      	bcc.n	8002b42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8002b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002b04:	2200      	movs	r2, #0
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002b12:	4621      	mov	r1, r4
 8002b14:	1851      	adds	r1, r2, r1
 8002b16:	6139      	str	r1, [r7, #16]
 8002b18:	4629      	mov	r1, r5
 8002b1a:	414b      	adcs	r3, r1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b22:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8002b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b28:	3301      	adds	r3, #1
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fa08 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1a2      	bne.n	8002a82 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8002b3c:	e002      	b.n	8002b44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8002b42:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8002b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11b      	bne.n	8002b84 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8002b4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b56:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b58:	f000 f99c 	bl	8002e94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8002b5c:	e121      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002b5e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b62:	f04f 020a 	mov.w	r2, #10
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f7fd fdc5 	bl	80006f8 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8002b76:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8002b84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8c:	d2e7      	bcs.n	8002b5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002b8e:	e009      	b.n	8002ba4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8002b90:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8002b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe f9cc 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ed      	bne.n	8002b90 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bba:	d14c      	bne.n	8002c56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002bc2:	e040      	b.n	8002c46 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8002bc4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bc8:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002bcc:	4965      	ldr	r1, [pc, #404]	@ (8002d64 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8002bce:	418b      	sbcs	r3, r1
 8002bd0:	d236      	bcs.n	8002c40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002bd2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	462b      	mov	r3, r5
 8002bda:	f04f 0000 	mov.w	r0, #0
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002be8:	0090      	lsls	r0, r2, #2
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	eb12 0a04 	adds.w	sl, r2, r4
 8002bf2:	eb43 0b05 	adc.w	fp, r3, r5
 8002bf6:	eb1a 030a 	adds.w	r3, sl, sl
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	eb4b 030b 	adc.w	r3, fp, fp
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c06:	4652      	mov	r2, sl
 8002c08:	465b      	mov	r3, fp
 8002c0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c0c:	7809      	ldrb	r1, [r1, #0]
 8002c0e:	3930      	subs	r1, #48	@ 0x30
 8002c10:	b2c9      	uxtb	r1, r1
 8002c12:	b2c9      	uxtb	r1, r1
 8002c14:	2000      	movs	r0, #0
 8002c16:	6239      	str	r1, [r7, #32]
 8002c18:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c1e:	4621      	mov	r1, r4
 8002c20:	1851      	adds	r1, r2, r1
 8002c22:	6039      	str	r1, [r7, #0]
 8002c24:	4629      	mov	r1, r5
 8002c26:	414b      	adcs	r3, r1
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c2e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8002c32:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8002c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c42:	3301      	adds	r3, #1
 8002c44:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f97b 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1b6      	bne.n	8002bc4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b65      	cmp	r3, #101	@ 0x65
 8002c60:	d003      	beq.n	8002c6a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8002c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b45      	cmp	r3, #69	@ 0x45
 8002c68:	d164      	bne.n	8002d34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8002c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8002c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c7c:	d106      	bne.n	8002c8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8002c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c86:	3301      	adds	r3, #1
 8002c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c8a:	e044      	b.n	8002d16 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b2b      	cmp	r3, #43	@ 0x2b
 8002c92:	d140      	bne.n	8002d16 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	3301      	adds	r3, #1
 8002c98:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8002c9a:	e03c      	b.n	8002d16 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8002c9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3b30      	subs	r3, #48	@ 0x30
 8002cae:	4413      	add	r3, r2
 8002cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8002cb2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8002cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cb8:	4413      	add	r3, r2
 8002cba:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002cbe:	dd27      	ble.n	8002d10 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8002cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8002cc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8002cd0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8002d50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8002cd4:	e001      	b.n	8002cda <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8002cd6:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8002d58 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8002cda:	eeb0 0b47 	vmov.f64	d0, d7
 8002cde:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ce0:	f000 f898 	bl	8002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002ce4:	e05d      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8002ce6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8002cee:	f000 f8a7 	bl	8002e40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002cf2:	eeb0 7b40 	vmov.f64	d7, d0
 8002cf6:	eeb1 7b47 	vneg.f64	d7, d7
 8002cfa:	e003      	b.n	8002d04 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8002cfc:	f000 f8a0 	bl	8002e40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002d00:	eeb0 7b40 	vmov.f64	d7, d0
 8002d04:	eeb0 0b47 	vmov.f64	d0, d7
 8002d08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d0a:	f000 f883 	bl	8002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002d0e:	e048      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8002d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d12:	3301      	adds	r3, #1
 8002d14:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe f913 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ba      	bne.n	8002c9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8002d26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d30:	425b      	negs	r3, r3
 8002d32:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8002d34:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d3a:	4413      	add	r3, r2
 8002d3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d010      	beq.n	8002d68 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8002d46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d48:	f000 f888 	bl	8002e5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002d4c:	e029      	b.n	8002da2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8002d4e:	bf00      	nop
 8002d50:	00000000 	.word	0x00000000
 8002d54:	80000000 	.word	0x80000000
	...
 8002d60:	19999999 	.word	0x19999999
 8002d64:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8002d68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d6c:	f7fd fc8e 	bl	800068c <__aeabi_ul2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002d76:	ec43 2b10 	vmov	d0, r2, r3
 8002d7a:	f000 f8ac 	bl	8002ed6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8002d7e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8002d82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8002d8a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002d8e:	eeb1 7b47 	vneg.f64	d7, d7
 8002d92:	e001      	b.n	8002d98 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8002d94:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002d98:	eeb0 0b47 	vmov.f64	d0, d7
 8002d9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d9e:	f000 f839 	bl	8002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8002da2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002da4:	3780      	adds	r7, #128	@ 0x80
 8002da6:	46bd      	mov	sp, r7
 8002da8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dac <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    return _type;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7c1b      	ldrb	r3, [r3, #16]
  }
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	71bb      	strb	r3, [r7, #6]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8002dd6:	79ba      	ldrb	r2, [r7, #6]
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d805      	bhi.n	8002dea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002dde:	79fa      	ldrb	r2, [r7, #7]
 8002de0:	797b      	ldrb	r3, [r7, #5]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d801      	bhi.n	8002dea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8002dea:	2300      	movs	r3, #0
  }
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4804      	ldr	r0, [pc, #16]	@ (8002e10 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8002e00:	f000 f8b9 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002e04:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002e08:	eeb0 0b47 	vmov.f64	d0, d7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	7ff80000 	.word	0x7ff80000

08002e14 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	ed87 0b00 	vstr	d0, [r7]
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e26:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	741a      	strb	r2, [r3, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8002e44:	2100      	movs	r1, #0
 8002e46:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8002e48:	f000 f895 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002e4c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002e50:	eeb0 0b47 	vmov.f64	d0, d7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	7ff00000 	.word	0x7ff00000

08002e5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9c1 2300 	strd	r2, r3, [r1]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	741a      	strb	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea6:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8002eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eae:	f7fd fbed 	bl	800068c <__aeabi_ul2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8002ebc:	7e3b      	ldrb	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	e000      	b.n	8002ec8 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8002ec6:	2206      	movs	r2, #6
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ee0:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dd1d      	ble.n	8002f24 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
 8002eec:	e016      	b.n	8002f1c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f860 	bl	8002fc0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8002f00:	eeb0 6b40 	vmov.f64	d6, d0
 8002f04:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f0c:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	105b      	asrs	r3, r3, #1
 8002f14:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 8002f22:	e01f      	b.n	8002f64 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	425b      	negs	r3, r3
 8002f28:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75bb      	strb	r3, [r7, #22]
 8002f2e:	e016      	b.n	8002f5e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f8a3 	bl	8003088 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8002f42:	eeb0 6b40 	vmov.f64	d6, d0
 8002f46:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f4e:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	105b      	asrs	r3, r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8002f58:	7dbb      	ldrb	r3, [r7, #22]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	75bb      	strb	r3, [r7, #22]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8002f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f68:	ec43 2b17 	vmov	d7, r2, r3
  }
 8002f6c:	eeb0 0b47 	vmov.f64	d0, d7
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8002f76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	469a      	mov	sl, r3
 8002f88:	4693      	mov	fp, r2
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	4653      	mov	r3, sl
 8002f94:	2200      	movs	r2, #0
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	2000      	movs	r0, #0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	ea42 0804 	orr.w	r8, r2, r4
 8002fa2:	ea43 0905 	orr.w	r9, r3, r5
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4649      	mov	r1, r9
 8002faa:	f000 f913 	bl	80031d4 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8002fae:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002fb2:	eeb0 0b47 	vmov.f64	d0, d7
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002fc0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3bf 8f5b 	dmb	ish
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d031      	beq.n	8003046 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 8002fe2:	481f      	ldr	r0, [pc, #124]	@ (8003060 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8002fe4:	f00d f941 	bl	801026a <__cxa_guard_acquire>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d026      	beq.n	8003046 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8002ff8:	491a      	ldr	r1, [pc, #104]	@ (8003064 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8002ffa:	481b      	ldr	r0, [pc, #108]	@ (8003068 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8002ffc:	f7ff ffbb 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003000:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003006:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 800300a:	4919      	ldr	r1, [pc, #100]	@ (8003070 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 800300c:	4819      	ldr	r0, [pc, #100]	@ (8003074 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 800300e:	f7ff ffb2 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003012:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003018:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 800301c:	4916      	ldr	r1, [pc, #88]	@ (8003078 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 800301e:	4817      	ldr	r0, [pc, #92]	@ (800307c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8003020:	f7ff ffa9 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003024:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003028:	4b10      	ldr	r3, [pc, #64]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800302a:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 800302e:	4914      	ldr	r1, [pc, #80]	@ (8003080 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8003030:	4814      	ldr	r0, [pc, #80]	@ (8003084 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8003032:	f7ff ffa0 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003036:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800303a:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800303c:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003040:	4807      	ldr	r0, [pc, #28]	@ (8003060 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003042:	f00d f91e 	bl	8010282 <__cxa_guard_release>
    return factors[index];
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003056:	eeb0 0b47 	vmov.f64	d0, d7
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	24000518 	.word	0x24000518
 8003064:	b5056e17 	.word	0xb5056e17
 8003068:	4693b8b5 	.word	0x4693b8b5
 800306c:	24000008 	.word	0x24000008
 8003070:	e93ff9f5 	.word	0xe93ff9f5
 8003074:	4d384f03 	.word	0x4d384f03
 8003078:	f9301d32 	.word	0xf9301d32
 800307c:	5a827748 	.word	0x5a827748
 8003080:	7f73bf3c 	.word	0x7f73bf3c
 8003084:	75154fdd 	.word	0x75154fdd

08003088 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003090:	4b3c      	ldr	r3, [pc, #240]	@ (8003184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3bf 8f5b 	dmb	ish
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d05e      	beq.n	8003168 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 80030aa:	4836      	ldr	r0, [pc, #216]	@ (8003184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80030ac:	f00d f8dd 	bl	801026a <__cxa_guard_acquire>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d053      	beq.n	8003168 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 80030c0:	4931      	ldr	r1, [pc, #196]	@ (8003188 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 80030c2:	4832      	ldr	r0, [pc, #200]	@ (800318c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 80030c4:	f7ff ff57 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030c8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030cc:	4b30      	ldr	r3, [pc, #192]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030ce:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 80030d2:	4930      	ldr	r1, [pc, #192]	@ (8003194 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 80030d4:	4830      	ldr	r0, [pc, #192]	@ (8003198 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 80030d6:	f7ff ff4e 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030da:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030de:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030e0:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80030e4:	492d      	ldr	r1, [pc, #180]	@ (800319c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80030e6:	482e      	ldr	r0, [pc, #184]	@ (80031a0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80030e8:	f7ff ff45 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030ec:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80030f0:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80030f2:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80030f6:	492b      	ldr	r1, [pc, #172]	@ (80031a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80030f8:	482b      	ldr	r0, [pc, #172]	@ (80031a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80030fa:	f7ff ff3c 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80030fe:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003102:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003104:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8003108:	4928      	ldr	r1, [pc, #160]	@ (80031ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 800310a:	4829      	ldr	r0, [pc, #164]	@ (80031b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 800310c:	f7ff ff33 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003110:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003114:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003116:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 800311a:	4926      	ldr	r1, [pc, #152]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 800311c:	4826      	ldr	r0, [pc, #152]	@ (80031b8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 800311e:	f7ff ff2a 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003122:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003126:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003128:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 800312c:	4923      	ldr	r1, [pc, #140]	@ (80031bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 800312e:	4824      	ldr	r0, [pc, #144]	@ (80031c0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8003130:	f7ff ff21 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003134:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003138:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800313a:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 800313e:	4921      	ldr	r1, [pc, #132]	@ (80031c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8003140:	4821      	ldr	r0, [pc, #132]	@ (80031c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8003142:	f7ff ff18 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003146:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800314a:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800314c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8003150:	491e      	ldr	r1, [pc, #120]	@ (80031cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8003152:	481f      	ldr	r0, [pc, #124]	@ (80031d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8003154:	f7ff ff0f 	bl	8002f76 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003158:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800315e:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003162:	4808      	ldr	r0, [pc, #32]	@ (8003184 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003164:	f00d f88d 	bl	8010282 <__cxa_guard_release>
    return factors[index];
 8003168:	4a09      	ldr	r2, [pc, #36]	@ (8003190 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003178:	eeb0 0b47 	vmov.f64	d0, d7
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24000568 	.word	0x24000568
 8003188:	9999999a 	.word	0x9999999a
 800318c:	3fb99999 	.word	0x3fb99999
 8003190:	24000520 	.word	0x24000520
 8003194:	47ae147b 	.word	0x47ae147b
 8003198:	3f847ae1 	.word	0x3f847ae1
 800319c:	eb1c432d 	.word	0xeb1c432d
 80031a0:	3f1a36e2 	.word	0x3f1a36e2
 80031a4:	e2308c3a 	.word	0xe2308c3a
 80031a8:	3e45798e 	.word	0x3e45798e
 80031ac:	97d889bc 	.word	0x97d889bc
 80031b0:	3c9cd2b2 	.word	0x3c9cd2b2
 80031b4:	d5a8a733 	.word	0xd5a8a733
 80031b8:	3949f623 	.word	0x3949f623
 80031bc:	44f4a73d 	.word	0x44f4a73d
 80031c0:	32a50ffd 	.word	0x32a50ffd
 80031c4:	cf8c979d 	.word	0xcf8c979d
 80031c8:	255bba08 	.word	0x255bba08
 80031cc:	64ac6f43 	.word	0x64ac6f43
 80031d0:	0ac80628 	.word	0x0ac80628

080031d4 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80031de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80031e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80031ee:	eeb0 0b47 	vmov.f64	d0, d7
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d12d      	bne.n	8003268 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003212:	4293      	cmp	r3, r2
 8003214:	d128      	bne.n	8003268 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::string strJson;
 8003216:	481d      	ldr	r0, [pc, #116]	@ (800328c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003218:	f00d f8b9 	bl	801038e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 800321c:	4622      	mov	r2, r4
 800321e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003222:	481b      	ldr	r0, [pc, #108]	@ (8003290 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003224:	f7fe fbbf 	bl	80019a6 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8003228:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fbab 	bl	8001988 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8003232:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fba3 	bl	8001988 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 8003248:	f44f 7017 	mov.w	r0, #604	@ 0x25c
 800324c:	f00d f81c 	bl	8010288 <_Znwj>
 8003250:	4603      	mov	r3, r0
 8003252:	461c      	mov	r4, r3
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800325e:	4620      	mov	r0, r4
 8003260:	f000 fbb6 	bl	80039d0 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003266:	601c      	str	r4, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003274:	4293      	cmp	r3, r2
 8003276:	d105      	bne.n	8003284 <_Z41__static_initialization_and_destruction_0ii+0x88>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8003278:	4805      	ldr	r0, [pc, #20]	@ (8003290 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800327a:	f000 f817 	bl	80032ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800327e:	4803      	ldr	r0, [pc, #12]	@ (800328c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003280:	f00d f88c 	bl	801039c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bd90      	pop	{r4, r7, pc}
 800328c:	24000330 	.word	0x24000330
 8003290:	24000348 	.word	0x24000348
 8003294:	24000370 	.word	0x24000370
 8003298:	24000378 	.word	0x24000378
 800329c:	24000000 	.word	0x24000000
 80032a0:	24000004 	.word	0x24000004
 80032a4:	40013000 	.word	0x40013000
 80032a8:	24000514 	.word	0x24000514

080032ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    freePool();
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f805 	bl	80032c4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 80032cc:	687c      	ldr	r4, [r7, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3308      	adds	r3, #8
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fd9e 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80032d8:	4603      	mov	r3, r0
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fc36 	bl	8000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4619      	mov	r1, r3
 80032e4:	4620      	mov	r0, r4
 80032e6:	f000 f804 	bl	80032f2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fdc8 	bl	8000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800330e:	b580      	push	{r7, lr}
 8003310:	af00      	add	r7, sp, #0
 8003312:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff ff70 	bl	80031fc <_Z41__static_initialization_and_destruction_0ii>
 800331c:	bd80      	pop	{r7, pc}

0800331e <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 800331e:	b580      	push	{r7, lr}
 8003320:	af00      	add	r7, sp, #0
 8003322:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003326:	2000      	movs	r0, #0
 8003328:	f7ff ff68 	bl	80031fc <_Z41__static_initialization_and_destruction_0ii>
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_MspInit+0x30>)
 8003338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800333c:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <HAL_MspInit+0x30>)
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_MspInit+0x30>)
 8003348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	58024400 	.word	0x58024400

08003364 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b0bc      	sub	sp, #240	@ 0xf0
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	22c0      	movs	r2, #192	@ 0xc0
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f00d fc0f 	bl	8010ba8 <memset>
  if(hsd->Instance==SDMMC1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3c      	ldr	r2, [pc, #240]	@ (8003480 <HAL_SD_MspInit+0x11c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d171      	bne.n	8003478 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003394:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a4:	f107 0318 	add.w	r3, r7, #24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fea7 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80033b4:	f7fe fab4 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80033b8:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033be:	4a31      	ldr	r2, [pc, #196]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80033c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033dc:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033e6:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f4:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033fa:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_SD_MspInit+0x120>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003404:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <HAL_SD_MspInit+0x120>)
 8003406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003412:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800342c:	230c      	movs	r3, #12
 800342e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003432:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003436:	4619      	mov	r1, r3
 8003438:	4813      	ldr	r0, [pc, #76]	@ (8003488 <HAL_SD_MspInit+0x124>)
 800343a:	f002 fc8f 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800343e:	2304      	movs	r3, #4
 8003440:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003456:	230c      	movs	r3, #12
 8003458:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003460:	4619      	mov	r1, r3
 8003462:	480a      	ldr	r0, [pc, #40]	@ (800348c <HAL_SD_MspInit+0x128>)
 8003464:	f002 fc7a 	bl	8005d5c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	2100      	movs	r1, #0
 800346c:	2031      	movs	r0, #49	@ 0x31
 800346e:	f000 ff68 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003472:	2031      	movs	r0, #49	@ 0x31
 8003474:	f000 ff7f 	bl	8004376 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003478:	bf00      	nop
 800347a:	37f0      	adds	r7, #240	@ 0xf0
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	52007000 	.word	0x52007000
 8003484:	58024400 	.word	0x58024400
 8003488:	58020800 	.word	0x58020800
 800348c:	58020c00 	.word	0x58020c00

08003490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	@ 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	22c0      	movs	r2, #192	@ 0xc0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00d fb79 	bl	8010ba8 <memset>
  if(huart->Instance==USART1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	@ (8003558 <HAL_UART_MspInit+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d146      	bne.n	800354e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034c0:	f04f 0201 	mov.w	r2, #1
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d2:	f107 0310 	add.w	r3, r7, #16
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fe10 	bl	80070fc <HAL_RCCEx_PeriphCLKConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034e2:	f7fe fa1d 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e6:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_UART_MspInit+0xcc>)
 80034e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ec:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <HAL_UART_MspInit+0xcc>)
 80034ee:	f043 0310 	orr.w	r3, r3, #16
 80034f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f6:	4b19      	ldr	r3, [pc, #100]	@ (800355c <HAL_UART_MspInit+0xcc>)
 80034f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_UART_MspInit+0xcc>)
 8003506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350a:	4a14      	ldr	r2, [pc, #80]	@ (800355c <HAL_UART_MspInit+0xcc>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_UART_MspInit+0xcc>)
 8003516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003522:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800353c:	2307      	movs	r3, #7
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003546:	4619      	mov	r1, r3
 8003548:	4805      	ldr	r0, [pc, #20]	@ (8003560 <HAL_UART_MspInit+0xd0>)
 800354a:	f002 fc07 	bl	8005d5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800354e:	bf00      	nop
 8003550:	37e8      	adds	r7, #232	@ 0xe8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40011000 	.word	0x40011000
 800355c:	58024400 	.word	0x58024400
 8003560:	58020000 	.word	0x58020000

08003564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <NMI_Handler+0x4>

0800356c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <MemManage_Handler+0x4>

0800357c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <BusFault_Handler+0x4>

08003584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <UsageFault_Handler+0x4>

0800358c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ba:	f000 fd97 	bl	80040ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80035f0:	4802      	ldr	r0, [pc, #8]	@ (80035fc <SDMMC1_IRQHandler+0x10>)
 80035f2:	f006 fcf1 	bl	8009fd8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	24000404 	.word	0x24000404

08003600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
	return 1;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <_kill>:

int _kill(int pid, int sig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800361a:	f00d fb67 	bl	8010cec <__errno>
 800361e:	4603      	mov	r3, r0
 8003620:	2216      	movs	r2, #22
 8003622:	601a      	str	r2, [r3, #0]
	return -1;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_exit>:

void _exit (int status)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003638:	f04f 31ff 	mov.w	r1, #4294967295
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ffe7 	bl	8003610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <_exit+0x12>

08003646 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e00a      	b.n	800366e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003658:	f3af 8000 	nop.w
 800365c:	4601      	mov	r1, r0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	60ba      	str	r2, [r7, #8]
 8003664:	b2ca      	uxtb	r2, r1
 8003666:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3301      	adds	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	dbf0      	blt.n	8003658 <_read+0x12>
	}

return len;
 8003676:	687b      	ldr	r3, [r7, #4]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e009      	b.n	80036a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	60ba      	str	r2, [r7, #8]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fdf2 	bl	8001284 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3301      	adds	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	dbf1      	blt.n	8003692 <_write+0x12>
	}
	return len;
 80036ae:	687b      	ldr	r3, [r7, #4]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_close>:

int _close(int file)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	return -1;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036e0:	605a      	str	r2, [r3, #4]
	return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_isatty>:

int _isatty(int file)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	return 1;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
	return 0;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003728:	4a14      	ldr	r2, [pc, #80]	@ (800377c <_sbrk+0x5c>)
 800372a:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <_sbrk+0x60>)
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <_sbrk+0x64>)
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <_sbrk+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <_sbrk+0x64>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003750:	f00d facc 	bl	8010cec <__errno>
 8003754:	4603      	mov	r3, r0
 8003756:	220c      	movs	r2, #12
 8003758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	e009      	b.n	8003774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003766:	4b07      	ldr	r3, [pc, #28]	@ (8003784 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <_sbrk+0x64>)
 8003770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	24080000 	.word	0x24080000
 8003780:	00000400 	.word	0x00000400
 8003784:	2400056c 	.word	0x2400056c
 8003788:	24000d68 	.word	0x24000d68

0800378c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003790:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <SystemInit+0xe4>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	4a36      	ldr	r2, [pc, #216]	@ (8003870 <SystemInit+0xe4>)
 8003798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800379c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037a0:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <SystemInit+0xe8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d807      	bhi.n	80037bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <SystemInit+0xe8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 030f 	bic.w	r3, r3, #15
 80037b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <SystemInit+0xe8>)
 80037b6:	f043 0307 	orr.w	r3, r3, #7
 80037ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003878 <SystemInit+0xec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <SystemInit+0xec>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <SystemInit+0xec>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003878 <SystemInit+0xec>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4929      	ldr	r1, [pc, #164]	@ (8003878 <SystemInit+0xec>)
 80037d4:	4b29      	ldr	r3, [pc, #164]	@ (800387c <SystemInit+0xf0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037da:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <SystemInit+0xe8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037e6:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <SystemInit+0xe8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 030f 	bic.w	r3, r3, #15
 80037ee:	4a21      	ldr	r2, [pc, #132]	@ (8003874 <SystemInit+0xe8>)
 80037f0:	f043 0307 	orr.w	r3, r3, #7
 80037f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <SystemInit+0xec>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <SystemInit+0xec>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003802:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <SystemInit+0xec>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <SystemInit+0xec>)
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <SystemInit+0xf4>)
 800380c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800380e:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <SystemInit+0xec>)
 8003810:	4a1c      	ldr	r2, [pc, #112]	@ (8003884 <SystemInit+0xf8>)
 8003812:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <SystemInit+0xec>)
 8003816:	4a1c      	ldr	r2, [pc, #112]	@ (8003888 <SystemInit+0xfc>)
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800381a:	4b17      	ldr	r3, [pc, #92]	@ (8003878 <SystemInit+0xec>)
 800381c:	2200      	movs	r2, #0
 800381e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003820:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <SystemInit+0xec>)
 8003822:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <SystemInit+0xfc>)
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <SystemInit+0xec>)
 8003828:	2200      	movs	r2, #0
 800382a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <SystemInit+0xec>)
 800382e:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <SystemInit+0xfc>)
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <SystemInit+0xec>)
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003838:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <SystemInit+0xec>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0e      	ldr	r2, [pc, #56]	@ (8003878 <SystemInit+0xec>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003842:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <SystemInit+0xec>)
 8003846:	2200      	movs	r2, #0
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <SystemInit+0x100>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <SystemInit+0x104>)
 8003850:	4013      	ands	r3, r2
 8003852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003856:	d202      	bcs.n	800385e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003858:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <SystemInit+0x108>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <SystemInit+0x10c>)
 8003860:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003864:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	52002000 	.word	0x52002000
 8003878:	58024400 	.word	0x58024400
 800387c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003880:	02020200 	.word	0x02020200
 8003884:	01ff0000 	.word	0x01ff0000
 8003888:	01010280 	.word	0x01010280
 800388c:	5c001000 	.word	0x5c001000
 8003890:	ffff0000 	.word	0xffff0000
 8003894:	51008108 	.word	0x51008108
 8003898:	52004000 	.word	0x52004000

0800389c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	4a08      	ldr	r2, [pc, #32]	@ (80038c8 <_ZN6ModuleC1Ev+0x2c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 80038b6:	4805      	ldr	r0, [pc, #20]	@ (80038cc <_ZN6ModuleC1Ev+0x30>)
 80038b8:	f00d f87c 	bl	80109b4 <puts>
}
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	08011a24 	.word	0x08011a24
 80038cc:	08011914 	.word	0x08011914

080038d0 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4a04      	ldr	r2, [pc, #16]	@ (80038ec <_ZN6ModuleD1Ev+0x1c>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	08011a24 	.word	0x08011a24

080038f0 <_ZN6ModuleD0Ev>:
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ffe9 	bl	80038d0 <_ZN6ModuleD1Ev>
 80038fe:	2114      	movs	r1, #20
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00c fcb0 	bl	8010266 <_ZdlPvj>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_ZN6Module9configureEv>:
void Module::configure(){}
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f830 	bl	80009e8 <_ZN9InterruptC1Ev>
 8003988:	4a07      	ldr	r2, [pc, #28]	@ (80039a8 <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4619      	mov	r1, r3
 8003998:	68b8      	ldr	r0, [r7, #8]
 800399a:	f7fd f835 	bl	8000a08 <_ZN9Interrupt8RegisterEiPS_>
}
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08011a48 	.word	0x08011a48

080039ac <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3318      	adds	r3, #24
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5b 	bl	800389c <_ZN6ModuleC1Ev>
 80039e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	220a      	movs	r2, #10
 8003a0a:	849a      	strh	r2, [r3, #36]	@ 0x24


}
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08011a54 	.word	0x08011a54

08003a1c <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b0bd      	sub	sp, #244	@ 0xf4
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a34:	f107 0318 	add.w	r3, r7, #24
 8003a38:	22c0      	movs	r2, #192	@ 0xc0
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00d f8b3 	bl	8010ba8 <memset>

    if(this->spiHandle.Instance == SPI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	4aa2      	ldr	r2, [pc, #648]	@ (8003cd0 <_ZN11RemoraComms4initEv+0x2b4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f040 80f8 	bne.w	8003c3e <_ZN11RemoraComms4initEv+0x222>
    {
		printf("Initialising GPIO for SPI\n");
 8003a4e:	48a1      	ldr	r0, [pc, #644]	@ (8003cd4 <_ZN11RemoraComms4initEv+0x2b8>)
 8003a50:	f00c ffb0 	bl	80109b4 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a54:	4ba0      	ldr	r3, [pc, #640]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a5a:	4a9f      	ldr	r2, [pc, #636]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a64:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697b      	ldr	r3, [r7, #20]
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */

	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a72:	23f0      	movs	r3, #240	@ 0xf0
 8003a74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003a94:	4619      	mov	r1, r3
 8003a96:	4891      	ldr	r0, [pc, #580]	@ (8003cdc <_ZN11RemoraComms4initEv+0x2c0>)
 8003a98:	f002 f960 	bl	8005d5c <HAL_GPIO_Init>

        printf("Initialising SPI1 slave\n");
 8003a9c:	4890      	ldr	r0, [pc, #576]	@ (8003ce0 <_ZN11RemoraComms4initEv+0x2c4>)
 8003a9e:	f00c ff89 	bl	80109b4 <puts>

		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
		*/

		// Peripheral clock enable
		__HAL_RCC_SPI1_CLK_ENABLE();
 8003aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aa8:	4a8b      	ldr	r2, [pc, #556]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003aaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ab2:	4b89      	ldr	r3, [pc, #548]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	693b      	ldr	r3, [r7, #16]


        this->spiHandle.Init.Mode           = SPI_MODE_SLAVE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            = SPI_NSS_HARD_INPUT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         = SPI_TIMODE_DISABLE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  = 0x0;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54

        this->spiHandle.Init.NSSPMode 		= SPI_NSS_PULSE_DISABLE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 	= SPI_NSS_POLARITY_LOW;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 	= SPI_FIFO_THRESHOLD_01DATA;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 		= SPI_IO_SWAP_DISABLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3328      	adds	r3, #40	@ 0x28
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f007 fc3e 	bl	800b3c0 <HAL_SPI_Init>

        printf("Initialising DMA for SPI\n");
 8003b44:	4867      	ldr	r0, [pc, #412]	@ (8003ce4 <_ZN11RemoraComms4initEv+0x2c8>)
 8003b46:	f00c ff35 	bl	80109b4 <puts>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8003b4a:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b50:	4a61      	ldr	r2, [pc, #388]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ce8 <_ZN11RemoraComms4initEv+0x2cc>)
 8003b6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2226      	movs	r2, #38	@ 0x26
 8003b74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2240      	movs	r2, #64	@ 0x40
 8003b7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	33b0      	adds	r3, #176	@ 0xb0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fbf3 	bl	80043ac <HAL_DMA_Init>

        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a42      	ldr	r2, [pc, #264]	@ (8003cec <_ZN11RemoraComms4initEv+0x2d0>)
 8003be2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2225      	movs	r2, #37	@ 0x25
 8003bea:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c04:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c1e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fbb7 	bl	80043ac <HAL_DMA_Init>
    }

	// Interrupt pin is the NSS pin
    // Configure GPIO pin : PA_4

    GPIO_InitStruct = {0};
 8003c3e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4e:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c54:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <_ZN11RemoraComms4initEv+0x2bc>)
 8003c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c84:	4619      	mov	r1, r3
 8003c86:	4815      	ldr	r0, [pc, #84]	@ (8003cdc <_ZN11RemoraComms4initEv+0x2c0>)
 8003c88:	f002 f868 	bl	8005d5c <HAL_GPIO_Init>

    interruptPtr = new ModuleInterrupt(this->irq, this);
 8003c8c:	2008      	movs	r0, #8
 8003c8e:	f00c fafb 	bl	8010288 <_Znwj>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461c      	mov	r4, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7ff fe66 	bl	8003974 <_ZN15ModuleInterruptC1EiP6Module>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621c      	str	r4, [r3, #32]
	HAL_NVIC_SetPriority(this->irq, 5, 0);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2105      	movs	r1, #5
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb43 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irq);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fb57 	bl	8004376 <HAL_NVIC_EnableIRQ>

}
 8003cc8:	bf00      	nop
 8003cca:	37f4      	adds	r7, #244	@ 0xf4
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	40013000 	.word	0x40013000
 8003cd4:	0801196c 	.word	0x0801196c
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	58020000 	.word	0x58020000
 8003ce0:	08011988 	.word	0x08011988
 8003ce4:	080119a0 	.word	0x080119a0
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40020028 	.word	0x40020028

08003cf0 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    this->ptrTxData->header = PRU_DATA;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f042 0261 	orr.w	r2, r2, #97	@ 0x61
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	785a      	ldrb	r2, [r3, #1]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f042 0274 	orr.w	r2, r2, #116	@ 0x74
 8003d0e:	705a      	strb	r2, [r3, #1]
 8003d10:	789a      	ldrb	r2, [r3, #2]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f042 0261 	orr.w	r2, r2, #97	@ 0x61
 8003d18:	709a      	strb	r2, [r3, #2]
 8003d1a:	78da      	ldrb	r2, [r3, #3]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f042 0264 	orr.w	r2, r2, #100	@ 0x64
 8003d22:	70da      	strb	r2, [r3, #3]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), SPI_BUFF_SIZE+32);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f023 031f 	bic.w	r3, r3, #31
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	2360      	movs	r3, #96	@ 0x60
 8003d30:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	dd1d      	ble.n	8003d74 <_ZN11RemoraComms5startEv+0x84>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d48:	f3bf 8f4f 	dsb	sy
}
 8003d4c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003d4e:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <_ZN11RemoraComms5startEv+0xfc>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3320      	adds	r3, #32
 8003d5a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b20      	subs	r3, #32
 8003d60:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	dcf2      	bgt.n	8003d4e <_ZN11RemoraComms5startEv+0x5e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d6e:	f3bf 8f6f 	isb	sy
}
 8003d72:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8003d74:	bf00      	nop
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), SPI_BUFF_SIZE+32);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f203 2319 	addw	r3, r3, #537	@ 0x219
 8003d7c:	f023 031f 	bic.w	r3, r3, #31
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d82:	2360      	movs	r3, #96	@ 0x60
 8003d84:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dd1d      	ble.n	8003dc8 <_ZN11RemoraComms5startEv+0xd8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	f003 021f 	and.w	r2, r3, #31
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d9c:	f3bf 8f4f 	dsb	sy
}
 8003da0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003da2:	4a12      	ldr	r2, [pc, #72]	@ (8003dec <_ZN11RemoraComms5startEv+0xfc>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3320      	adds	r3, #32
 8003dae:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3b20      	subs	r3, #32
 8003db4:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	dcf2      	bgt.n	8003da2 <_ZN11RemoraComms5startEv+0xb2>
  __ASM volatile ("dsb 0xF":::"memory");
 8003dbc:	f3bf 8f4f 	dsb	sy
}
 8003dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003dc2:	f3bf 8f6f 	isb	sy
}
 8003dc6:	bf00      	nop
}
 8003dc8:	bf00      	nop
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 2219 	addw	r2, r3, #537	@ 0x219
 8003ddc:	2340      	movs	r3, #64	@ 0x40
 8003dde:	f007 fc1d 	bl	800b61c <HAL_SPI_TransmitReceive_DMA>
}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	@ 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <_ZN11RemoraComms15handleInterruptEv>:


void RemoraComms::handleInterrupt()
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	@ 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	//printf("RemoraComms interrupt\n");

	switch (this->spiRxBuffer.header)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3219 	ldr.w	r3, [r3, #537]	@ 0x219
 8003dfe:	4a53      	ldr	r2, [pc, #332]	@ (8003f4c <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <_ZN11RemoraComms15handleInterruptEv+0x1c>
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <_ZN11RemoraComms15handleInterruptEv+0x160>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <_ZN11RemoraComms15handleInterruptEv+0x2e>
 8003e0a:	e02a      	b.n	8003e62 <_ZN11RemoraComms15handleInterruptEv+0x72>
	{
	  case PRU_READ:
		this->SPIdata = true;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
		this->rejectCnt = 0;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
		// READ so do nothing with the received data
		break;
 8003e1c:	e032      	b.n	8003e84 <_ZN11RemoraComms15handleInterruptEv+0x94>

	  case PRU_WRITE:
		this->SPIdata = true;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a
		this->rejectCnt = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2e:	b672      	cpsid	i
}
 8003e30:	bf00      	nop
		// Do it the slower way. This does not seem to impact performance but not great to stay in ISR context for longer.. :-(

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e36:	e00e      	b.n	8003e56 <_ZN11RemoraComms15handleInterruptEv+0x66>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	440b      	add	r3, r1
 8003e42:	f203 2319 	addw	r3, r3, #537	@ 0x219
 8003e46:	7819      	ldrb	r1, [r3, #0]
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	4413      	add	r3, r2
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	3301      	adds	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e5a:	dded      	ble.n	8003e38 <_ZN11RemoraComms15handleInterruptEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e5c:	b662      	cpsie	i
}
 8003e5e:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 8003e60:	e010      	b.n	8003e84 <_ZN11RemoraComms15handleInterruptEv+0x94>

	  default:
		this->rejectCnt++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 8003e68:	3301      	adds	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f883 2259 	strb.w	r2, [r3, #601]	@ 0x259
		if (this->rejectCnt > 5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3259 	ldrb.w	r3, [r3, #601]	@ 0x259
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d903      	bls.n	8003e84 <_ZN11RemoraComms15handleInterruptEv+0x94>
		{
			this->SPIdataError = true;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 225b 	strb.w	r2, [r3, #603]	@ 0x25b
		}
		// reset SPI somehow
	}

    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), SPI_BUFF_SIZE+32);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f023 031f 	bic.w	r3, r3, #31
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	2360      	movs	r3, #96	@ 0x60
 8003e90:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dd1d      	ble.n	8003ed4 <_ZN11RemoraComms15handleInterruptEv+0xe4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea8:	f3bf 8f4f 	dsb	sy
}
 8003eac:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003eae:	4a29      	ldr	r2, [pc, #164]	@ (8003f54 <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3320      	adds	r3, #32
 8003eba:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	3b20      	subs	r3, #32
 8003ec0:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dcf2      	bgt.n	8003eae <_ZN11RemoraComms15handleInterruptEv+0xbe>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ec8:	f3bf 8f4f 	dsb	sy
}
 8003ecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ece:	f3bf 8f6f 	isb	sy
}
 8003ed2:	bf00      	nop
}
 8003ed4:	bf00      	nop
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), SPI_BUFF_SIZE+32);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f203 2319 	addw	r3, r3, #537	@ 0x219
 8003edc:	f023 031f 	bic.w	r3, r3, #31
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee2:	2360      	movs	r3, #96	@ 0x60
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dd1d      	ble.n	8003f28 <_ZN11RemoraComms15handleInterruptEv+0x138>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	f003 021f 	and.w	r2, r3, #31
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	4413      	add	r3, r2
 8003ef6:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8003efc:	f3bf 8f4f 	dsb	sy
}
 8003f00:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003f02:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3320      	adds	r3, #32
 8003f0e:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	3b20      	subs	r3, #32
 8003f14:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dcf2      	bgt.n	8003f02 <_ZN11RemoraComms15handleInterruptEv+0x112>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f1c:	f3bf 8f4f 	dsb	sy
}
 8003f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f22:	f3bf 8f6f 	isb	sy
}
 8003f26:	bf00      	nop
}
 8003f28:	bf00      	nop
	HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4619      	mov	r1, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f203 2219 	addw	r2, r3, #537	@ 0x219
 8003f3c:	2340      	movs	r3, #64	@ 0x40
 8003f3e:	f007 fb6d 	bl	800b61c <HAL_SPI_TransmitReceive_DMA>
}
 8003f42:	bf00      	nop
 8003f44:	3730      	adds	r7, #48	@ 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	72656164 	.word	0x72656164
 8003f50:	77726974 	.word	0x77726974
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <_ZN11RemoraCommsD1Ev+0x20>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fca7 	bl	80038d0 <_ZN6ModuleD1Ev>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08011a54 	.word	0x08011a54

08003f90 <_ZN11RemoraCommsD0Ev>:
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ffe7 	bl	8003f6c <_ZN11RemoraCommsD1Ev>
 8003f9e:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f00c f95f 	bl	8010266 <_ZdlPvj>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fb8:	f7ff fbe8 	bl	800378c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fbc:	480c      	ldr	r0, [pc, #48]	@ (8003ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fbe:	490d      	ldr	r1, [pc, #52]	@ (8003ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc4:	e002      	b.n	8003fcc <LoopCopyDataInit>

08003fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fca:	3304      	adds	r3, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd0:	d3f9      	bcc.n	8003fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8004000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd8:	e001      	b.n	8003fde <LoopFillZerobss>

08003fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fdc:	3204      	adds	r2, #4

08003fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe0:	d3fb      	bcc.n	8003fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe2:	f00c fe89 	bl	8010cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fe6:	f7fd fa9b 	bl	8001520 <main>
  bx  lr
 8003fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ff4:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8003ff8:	08011bb4 	.word	0x08011bb4
  ldr r2, =_sbss
 8003ffc:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8004000:	24000d68 	.word	0x24000d68

08004004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004004:	e7fe      	b.n	8004004 <ADC3_IRQHandler>
	...

08004008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800400e:	2003      	movs	r0, #3
 8004010:	f000 f98c 	bl	800432c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004014:	f002 fe9c 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_Init+0x68>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	4913      	ldr	r1, [pc, #76]	@ (8004074 <HAL_Init+0x6c>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004032:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <HAL_Init+0x68>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a0e      	ldr	r2, [pc, #56]	@ (8004074 <HAL_Init+0x6c>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	4a0b      	ldr	r2, [pc, #44]	@ (8004078 <HAL_Init+0x70>)
 800404a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800404c:	4a0b      	ldr	r2, [pc, #44]	@ (800407c <HAL_Init+0x74>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004052:	200f      	movs	r0, #15
 8004054:	f000 f814 	bl	8004080 <HAL_InitTick>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e002      	b.n	8004068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004062:	f7ff f965 	bl	8003330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58024400 	.word	0x58024400
 8004074:	08011a0c 	.word	0x08011a0c
 8004078:	24000054 	.word	0x24000054
 800407c:	24000050 	.word	0x24000050

08004080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004088:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_InitTick+0x60>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e021      	b.n	80040d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004094:	4b13      	ldr	r3, [pc, #76]	@ (80040e4 <HAL_InitTick+0x64>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_InitTick+0x60>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f971 	bl	8004392 <HAL_SYSTICK_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00e      	b.n	80040d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d80a      	bhi.n	80040d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c0:	2200      	movs	r2, #0
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f000 f93b 	bl	8004342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040cc:	4a06      	ldr	r2, [pc, #24]	@ (80040e8 <HAL_InitTick+0x68>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2400005c 	.word	0x2400005c
 80040e4:	24000050 	.word	0x24000050
 80040e8:	24000058 	.word	0x24000058

080040ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_IncTick+0x20>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_IncTick+0x24>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4413      	add	r3, r2
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_IncTick+0x24>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2400005c 	.word	0x2400005c
 8004110:	24000570 	.word	0x24000570

08004114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return uwTick;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <HAL_GetTick+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	24000570 	.word	0x24000570

0800412c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff ffee 	bl	8004114 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d005      	beq.n	8004152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004146:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_Delay+0x44>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004152:	bf00      	nop
 8004154:	f7ff ffde 	bl	8004114 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d8f7      	bhi.n	8004154 <HAL_Delay+0x28>
  {
  }
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2400005c 	.word	0x2400005c

08004174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <HAL_GetREVID+0x14>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0c1b      	lsrs	r3, r3, #16
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	5c001000 	.word	0x5c001000

0800418c <__NVIC_SetPriorityGrouping>:
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <__NVIC_SetPriorityGrouping+0x40>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ba:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <__NVIC_SetPriorityGrouping+0x40>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	60d3      	str	r3, [r2, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00
 80041d0:	05fa0000 	.word	0x05fa0000

080041d4 <__NVIC_GetPriorityGrouping>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <__NVIC_GetPriorityGrouping+0x18>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 0307 	and.w	r3, r3, #7
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_EnableIRQ>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	db0b      	blt.n	800421a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	4907      	ldr	r1, [pc, #28]	@ (8004228 <__NVIC_EnableIRQ+0x38>)
 800420a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2001      	movs	r0, #1
 8004212:	fa00 f202 	lsl.w	r2, r0, r2
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000e100 	.word	0xe000e100

0800422c <__NVIC_SetPriority>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db0a      	blt.n	8004256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	490c      	ldr	r1, [pc, #48]	@ (8004278 <__NVIC_SetPriority+0x4c>)
 8004246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	440b      	add	r3, r1
 8004250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004254:	e00a      	b.n	800426c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4908      	ldr	r1, [pc, #32]	@ (800427c <__NVIC_SetPriority+0x50>)
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	3b04      	subs	r3, #4
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	440b      	add	r3, r1
 800426a:	761a      	strb	r2, [r3, #24]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <NVIC_EncodePriority>:
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	@ 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f1c3 0307 	rsb	r3, r3, #7
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf28      	it	cs
 800429e:	2304      	movcs	r3, #4
 80042a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d902      	bls.n	80042b0 <NVIC_EncodePriority+0x30>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3b03      	subs	r3, #3
 80042ae:	e000      	b.n	80042b2 <NVIC_EncodePriority+0x32>
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	401a      	ands	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c8:	f04f 31ff 	mov.w	r1, #4294967295
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43d9      	mvns	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	4313      	orrs	r3, r2
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	@ 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f8:	d301      	bcc.n	80042fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00f      	b.n	800431e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <SysTick_Config+0x40>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004306:	210f      	movs	r1, #15
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f7ff ff8e 	bl	800422c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <SysTick_Config+0x40>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004316:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <SysTick_Config+0x40>)
 8004318:	2207      	movs	r2, #7
 800431a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	e000e010 	.word	0xe000e010

0800432c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff29 	bl	800418c <__NVIC_SetPriorityGrouping>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	4603      	mov	r3, r0
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004350:	f7ff ff40 	bl	80041d4 <__NVIC_GetPriorityGrouping>
 8004354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f7ff ff90 	bl	8004280 <NVIC_EncodePriority>
 8004360:	4602      	mov	r2, r0
 8004362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff5f 	bl	800422c <__NVIC_SetPriority>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff33 	bl	80041f0 <__NVIC_EnableIRQ>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ffa4 	bl	80042e8 <SysTick_Config>
 80043a0:	4603      	mov	r3, r0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7ff feae 	bl	8004114 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e316      	b.n	80049f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a66      	ldr	r2, [pc, #408]	@ (8004564 <HAL_DMA_Init+0x1b8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d04a      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a65      	ldr	r2, [pc, #404]	@ (8004568 <HAL_DMA_Init+0x1bc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d045      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a63      	ldr	r2, [pc, #396]	@ (800456c <HAL_DMA_Init+0x1c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d040      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a62      	ldr	r2, [pc, #392]	@ (8004570 <HAL_DMA_Init+0x1c4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d03b      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a60      	ldr	r2, [pc, #384]	@ (8004574 <HAL_DMA_Init+0x1c8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d036      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004578 <HAL_DMA_Init+0x1cc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d031      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5d      	ldr	r2, [pc, #372]	@ (800457c <HAL_DMA_Init+0x1d0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02c      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5c      	ldr	r2, [pc, #368]	@ (8004580 <HAL_DMA_Init+0x1d4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d027      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5a      	ldr	r2, [pc, #360]	@ (8004584 <HAL_DMA_Init+0x1d8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a59      	ldr	r2, [pc, #356]	@ (8004588 <HAL_DMA_Init+0x1dc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01d      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a57      	ldr	r2, [pc, #348]	@ (800458c <HAL_DMA_Init+0x1e0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a56      	ldr	r2, [pc, #344]	@ (8004590 <HAL_DMA_Init+0x1e4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a54      	ldr	r2, [pc, #336]	@ (8004594 <HAL_DMA_Init+0x1e8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a53      	ldr	r2, [pc, #332]	@ (8004598 <HAL_DMA_Init+0x1ec>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a51      	ldr	r2, [pc, #324]	@ (800459c <HAL_DMA_Init+0x1f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_DMA_Init+0xb8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a50      	ldr	r2, [pc, #320]	@ (80045a0 <HAL_DMA_Init+0x1f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_DMA_Init+0xbc>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_DMA_Init+0xbe>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 813b 	beq.w	80046e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a37      	ldr	r2, [pc, #220]	@ (8004564 <HAL_DMA_Init+0x1b8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d04a      	beq.n	8004520 <HAL_DMA_Init+0x174>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <HAL_DMA_Init+0x1bc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d045      	beq.n	8004520 <HAL_DMA_Init+0x174>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <HAL_DMA_Init+0x1c0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d040      	beq.n	8004520 <HAL_DMA_Init+0x174>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <HAL_DMA_Init+0x1c4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d03b      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a31      	ldr	r2, [pc, #196]	@ (8004574 <HAL_DMA_Init+0x1c8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d036      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_DMA_Init+0x1cc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d031      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_DMA_Init+0x1d0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02c      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_DMA_Init+0x1d4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d027      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <HAL_DMA_Init+0x1d8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_DMA_Init+0x1dc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d01d      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_DMA_Init+0x1e0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_DMA_Init+0x1e4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_DMA_Init+0x174>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_DMA_Init+0x1e8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_DMA_Init+0x174>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <HAL_DMA_Init+0x1ec>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_DMA_Init+0x174>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_DMA_Init+0x1f0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_DMA_Init+0x174>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_DMA_Init+0x1f4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <HAL_DMA_Init+0x186>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e007      	b.n	8004542 <HAL_DMA_Init+0x196>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004542:	e02f      	b.n	80045a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004544:	f7ff fde6 	bl	8004114 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b05      	cmp	r3, #5
 8004550:	d928      	bls.n	80045a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2203      	movs	r2, #3
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e246      	b.n	80049f2 <HAL_DMA_Init+0x646>
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1c8      	bne.n	8004544 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4b83      	ldr	r3, [pc, #524]	@ (80047cc <HAL_DMA_Init+0x420>)
 80045be:	4013      	ands	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80045ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d107      	bne.n	8004608 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	4313      	orrs	r3, r2
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004608:	4b71      	ldr	r3, [pc, #452]	@ (80047d0 <HAL_DMA_Init+0x424>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b71      	ldr	r3, [pc, #452]	@ (80047d4 <HAL_DMA_Init+0x428>)
 800460e:	4013      	ands	r3, r2
 8004610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004614:	d328      	bcc.n	8004668 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b28      	cmp	r3, #40	@ 0x28
 800461c:	d903      	bls.n	8004626 <HAL_DMA_Init+0x27a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b2e      	cmp	r3, #46	@ 0x2e
 8004624:	d917      	bls.n	8004656 <HAL_DMA_Init+0x2aa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b3e      	cmp	r3, #62	@ 0x3e
 800462c:	d903      	bls.n	8004636 <HAL_DMA_Init+0x28a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b42      	cmp	r3, #66	@ 0x42
 8004634:	d90f      	bls.n	8004656 <HAL_DMA_Init+0x2aa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b46      	cmp	r3, #70	@ 0x46
 800463c:	d903      	bls.n	8004646 <HAL_DMA_Init+0x29a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b48      	cmp	r3, #72	@ 0x48
 8004644:	d907      	bls.n	8004656 <HAL_DMA_Init+0x2aa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b4e      	cmp	r3, #78	@ 0x4e
 800464c:	d905      	bls.n	800465a <HAL_DMA_Init+0x2ae>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b52      	cmp	r3, #82	@ 0x52
 8004654:	d801      	bhi.n	800465a <HAL_DMA_Init+0x2ae>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_DMA_Init+0x2b0>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004666:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	2b04      	cmp	r3, #4
 8004690:	d117      	bne.n	80046c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f001 f9cf 	bl	8005a48 <DMA_CheckFifoParam>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2240      	movs	r2, #64	@ 0x40
 80046b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e197      	b.n	80049f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f90a 	bl	80058e4 <DMA_CalcBaseAndBitshift>
 80046d0:	4603      	mov	r3, r0
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	223f      	movs	r2, #63	@ 0x3f
 80046de:	409a      	lsls	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e0cd      	b.n	8004882 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a3b      	ldr	r2, [pc, #236]	@ (80047d8 <HAL_DMA_Init+0x42c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a39      	ldr	r2, [pc, #228]	@ (80047dc <HAL_DMA_Init+0x430>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a38      	ldr	r2, [pc, #224]	@ (80047e0 <HAL_DMA_Init+0x434>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a36      	ldr	r2, [pc, #216]	@ (80047e4 <HAL_DMA_Init+0x438>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a35      	ldr	r2, [pc, #212]	@ (80047e8 <HAL_DMA_Init+0x43c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a33      	ldr	r2, [pc, #204]	@ (80047ec <HAL_DMA_Init+0x440>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <HAL_DMA_Init+0x444>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_Init+0x38a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a30      	ldr	r2, [pc, #192]	@ (80047f4 <HAL_DMA_Init+0x448>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_DMA_Init+0x38e>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_DMA_Init+0x390>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8097 	beq.w	8004870 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a24      	ldr	r2, [pc, #144]	@ (80047d8 <HAL_DMA_Init+0x42c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d021      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <HAL_DMA_Init+0x430>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01c      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <HAL_DMA_Init+0x434>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d017      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	@ (80047e4 <HAL_DMA_Init+0x438>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d012      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_DMA_Init+0x43c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00d      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_DMA_Init+0x440>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d008      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_DMA_Init+0x444>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <HAL_DMA_Init+0x3e4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_DMA_Init+0x448>)
 800478e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <HAL_DMA_Init+0x44c>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	d021      	beq.n	80047fc <HAL_DMA_Init+0x450>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b80      	cmp	r3, #128	@ 0x80
 80047be:	d102      	bne.n	80047c6 <HAL_DMA_Init+0x41a>
 80047c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047c4:	e01b      	b.n	80047fe <HAL_DMA_Init+0x452>
 80047c6:	2300      	movs	r3, #0
 80047c8:	e019      	b.n	80047fe <HAL_DMA_Init+0x452>
 80047ca:	bf00      	nop
 80047cc:	fe10803f 	.word	0xfe10803f
 80047d0:	5c001000 	.word	0x5c001000
 80047d4:	ffff0000 	.word	0xffff0000
 80047d8:	58025408 	.word	0x58025408
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025430 	.word	0x58025430
 80047e4:	58025444 	.word	0x58025444
 80047e8:	58025458 	.word	0x58025458
 80047ec:	5802546c 	.word	0x5802546c
 80047f0:	58025480 	.word	0x58025480
 80047f4:	58025494 	.word	0x58025494
 80047f8:	fffe000f 	.word	0xfffe000f
 80047fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800480c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800481c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800482c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b6e      	ldr	r3, [pc, #440]	@ (80049fc <HAL_DMA_Init+0x650>)
 8004844:	4413      	add	r3, r2
 8004846:	4a6e      	ldr	r2, [pc, #440]	@ (8004a00 <HAL_DMA_Init+0x654>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 f845 	bl	80058e4 <DMA_CalcBaseAndBitshift>
 800485a:	4603      	mov	r3, r0
 800485c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2201      	movs	r2, #1
 8004868:	409a      	lsls	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e008      	b.n	8004882 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2240      	movs	r2, #64	@ 0x40
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0b7      	b.n	80049f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5f      	ldr	r2, [pc, #380]	@ (8004a04 <HAL_DMA_Init+0x658>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d072      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5d      	ldr	r2, [pc, #372]	@ (8004a08 <HAL_DMA_Init+0x65c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d06d      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a5c      	ldr	r2, [pc, #368]	@ (8004a0c <HAL_DMA_Init+0x660>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d068      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a10 <HAL_DMA_Init+0x664>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d063      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a59      	ldr	r2, [pc, #356]	@ (8004a14 <HAL_DMA_Init+0x668>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d05e      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a57      	ldr	r2, [pc, #348]	@ (8004a18 <HAL_DMA_Init+0x66c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d059      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	@ (8004a1c <HAL_DMA_Init+0x670>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d054      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <HAL_DMA_Init+0x674>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d04f      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a53      	ldr	r2, [pc, #332]	@ (8004a24 <HAL_DMA_Init+0x678>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a51      	ldr	r2, [pc, #324]	@ (8004a28 <HAL_DMA_Init+0x67c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a50      	ldr	r2, [pc, #320]	@ (8004a2c <HAL_DMA_Init+0x680>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a30 <HAL_DMA_Init+0x684>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004a34 <HAL_DMA_Init+0x688>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4b      	ldr	r2, [pc, #300]	@ (8004a38 <HAL_DMA_Init+0x68c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4a      	ldr	r2, [pc, #296]	@ (8004a3c <HAL_DMA_Init+0x690>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a48      	ldr	r2, [pc, #288]	@ (8004a40 <HAL_DMA_Init+0x694>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a47      	ldr	r2, [pc, #284]	@ (8004a44 <HAL_DMA_Init+0x698>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a45      	ldr	r2, [pc, #276]	@ (8004a48 <HAL_DMA_Init+0x69c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a44      	ldr	r2, [pc, #272]	@ (8004a4c <HAL_DMA_Init+0x6a0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a42      	ldr	r2, [pc, #264]	@ (8004a50 <HAL_DMA_Init+0x6a4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a41      	ldr	r2, [pc, #260]	@ (8004a54 <HAL_DMA_Init+0x6a8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3f      	ldr	r2, [pc, #252]	@ (8004a58 <HAL_DMA_Init+0x6ac>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3e      	ldr	r2, [pc, #248]	@ (8004a5c <HAL_DMA_Init+0x6b0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_Init+0x5c6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a60 <HAL_DMA_Init+0x6b4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_DMA_Init+0x5ca>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_DMA_Init+0x5cc>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d032      	beq.n	80049e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 f8df 	bl	8005b40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b80      	cmp	r3, #128	@ 0x80
 8004988:	d102      	bne.n	8004990 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_DMA_Init+0x624>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d80c      	bhi.n	80049d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 f95c 	bl	8005c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	e008      	b.n	80049e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	a7fdabf8 	.word	0xa7fdabf8
 8004a00:	cccccccd 	.word	0xcccccccd
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494

08004a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e226      	b.n	8004ece <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_DMA_Start_IT+0x2a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e21f      	b.n	8004ece <HAL_DMA_Start_IT+0x46a>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	f040 820a 	bne.w	8004eb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a68      	ldr	r2, [pc, #416]	@ (8004c58 <HAL_DMA_Start_IT+0x1f4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a66      	ldr	r2, [pc, #408]	@ (8004c5c <HAL_DMA_Start_IT+0x1f8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a65      	ldr	r2, [pc, #404]	@ (8004c60 <HAL_DMA_Start_IT+0x1fc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a63      	ldr	r2, [pc, #396]	@ (8004c64 <HAL_DMA_Start_IT+0x200>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a62      	ldr	r2, [pc, #392]	@ (8004c68 <HAL_DMA_Start_IT+0x204>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a60      	ldr	r2, [pc, #384]	@ (8004c6c <HAL_DMA_Start_IT+0x208>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c70 <HAL_DMA_Start_IT+0x20c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c74 <HAL_DMA_Start_IT+0x210>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5c      	ldr	r2, [pc, #368]	@ (8004c78 <HAL_DMA_Start_IT+0x214>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5a      	ldr	r2, [pc, #360]	@ (8004c7c <HAL_DMA_Start_IT+0x218>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a59      	ldr	r2, [pc, #356]	@ (8004c80 <HAL_DMA_Start_IT+0x21c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a57      	ldr	r2, [pc, #348]	@ (8004c84 <HAL_DMA_Start_IT+0x220>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a56      	ldr	r2, [pc, #344]	@ (8004c88 <HAL_DMA_Start_IT+0x224>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a54      	ldr	r2, [pc, #336]	@ (8004c8c <HAL_DMA_Start_IT+0x228>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a53      	ldr	r2, [pc, #332]	@ (8004c90 <HAL_DMA_Start_IT+0x22c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_Start_IT+0xee>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a51      	ldr	r2, [pc, #324]	@ (8004c94 <HAL_DMA_Start_IT+0x230>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <HAL_DMA_Start_IT+0x100>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e007      	b.n	8004b74 <HAL_DMA_Start_IT+0x110>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fd06 	bl	800558c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a34      	ldr	r2, [pc, #208]	@ (8004c58 <HAL_DMA_Start_IT+0x1f4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d04a      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	@ (8004c5c <HAL_DMA_Start_IT+0x1f8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d045      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <HAL_DMA_Start_IT+0x1fc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d040      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	@ (8004c64 <HAL_DMA_Start_IT+0x200>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d03b      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <HAL_DMA_Start_IT+0x204>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d036      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <HAL_DMA_Start_IT+0x208>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d031      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c70 <HAL_DMA_Start_IT+0x20c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d02c      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2a      	ldr	r2, [pc, #168]	@ (8004c74 <HAL_DMA_Start_IT+0x210>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d027      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <HAL_DMA_Start_IT+0x214>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a27      	ldr	r2, [pc, #156]	@ (8004c7c <HAL_DMA_Start_IT+0x218>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01d      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <HAL_DMA_Start_IT+0x21c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <HAL_DMA_Start_IT+0x220>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <HAL_DMA_Start_IT+0x224>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	@ (8004c8c <HAL_DMA_Start_IT+0x228>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <HAL_DMA_Start_IT+0x22c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_DMA_Start_IT+0x1bc>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <HAL_DMA_Start_IT+0x230>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Start_IT+0x1c0>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_DMA_Start_IT+0x1c2>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d036      	beq.n	8004c98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f023 021e 	bic.w	r2, r3, #30
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0216 	orr.w	r2, r2, #22
 8004c3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d03e      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0208 	orr.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e035      	b.n	8004cc4 <HAL_DMA_Start_IT+0x260>
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 020e 	bic.w	r2, r3, #14
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 020a 	orr.w	r2, r2, #10
 8004caa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0204 	orr.w	r2, r2, #4
 8004cc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a83      	ldr	r2, [pc, #524]	@ (8004ed8 <HAL_DMA_Start_IT+0x474>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d072      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a82      	ldr	r2, [pc, #520]	@ (8004edc <HAL_DMA_Start_IT+0x478>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d06d      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a80      	ldr	r2, [pc, #512]	@ (8004ee0 <HAL_DMA_Start_IT+0x47c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d068      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ee4 <HAL_DMA_Start_IT+0x480>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d063      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee8 <HAL_DMA_Start_IT+0x484>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d05e      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8004eec <HAL_DMA_Start_IT+0x488>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d059      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7a      	ldr	r2, [pc, #488]	@ (8004ef0 <HAL_DMA_Start_IT+0x48c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d054      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a79      	ldr	r2, [pc, #484]	@ (8004ef4 <HAL_DMA_Start_IT+0x490>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04f      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a77      	ldr	r2, [pc, #476]	@ (8004ef8 <HAL_DMA_Start_IT+0x494>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04a      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a76      	ldr	r2, [pc, #472]	@ (8004efc <HAL_DMA_Start_IT+0x498>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d045      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a74      	ldr	r2, [pc, #464]	@ (8004f00 <HAL_DMA_Start_IT+0x49c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a73      	ldr	r2, [pc, #460]	@ (8004f04 <HAL_DMA_Start_IT+0x4a0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d03b      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a71      	ldr	r2, [pc, #452]	@ (8004f08 <HAL_DMA_Start_IT+0x4a4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d036      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a70      	ldr	r2, [pc, #448]	@ (8004f0c <HAL_DMA_Start_IT+0x4a8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a6e      	ldr	r2, [pc, #440]	@ (8004f10 <HAL_DMA_Start_IT+0x4ac>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f14 <HAL_DMA_Start_IT+0x4b0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d027      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6b      	ldr	r2, [pc, #428]	@ (8004f18 <HAL_DMA_Start_IT+0x4b4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6a      	ldr	r2, [pc, #424]	@ (8004f1c <HAL_DMA_Start_IT+0x4b8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a68      	ldr	r2, [pc, #416]	@ (8004f20 <HAL_DMA_Start_IT+0x4bc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a67      	ldr	r2, [pc, #412]	@ (8004f24 <HAL_DMA_Start_IT+0x4c0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a65      	ldr	r2, [pc, #404]	@ (8004f28 <HAL_DMA_Start_IT+0x4c4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a64      	ldr	r2, [pc, #400]	@ (8004f2c <HAL_DMA_Start_IT+0x4c8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a62      	ldr	r2, [pc, #392]	@ (8004f30 <HAL_DMA_Start_IT+0x4cc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_Start_IT+0x350>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a61      	ldr	r2, [pc, #388]	@ (8004f34 <HAL_DMA_Start_IT+0x4d0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_DMA_Start_IT+0x354>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_DMA_Start_IT+0x356>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01a      	beq.n	8004df4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a37      	ldr	r2, [pc, #220]	@ (8004ed8 <HAL_DMA_Start_IT+0x474>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a36      	ldr	r2, [pc, #216]	@ (8004edc <HAL_DMA_Start_IT+0x478>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d045      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a34      	ldr	r2, [pc, #208]	@ (8004ee0 <HAL_DMA_Start_IT+0x47c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a33      	ldr	r2, [pc, #204]	@ (8004ee4 <HAL_DMA_Start_IT+0x480>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a31      	ldr	r2, [pc, #196]	@ (8004ee8 <HAL_DMA_Start_IT+0x484>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d036      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a30      	ldr	r2, [pc, #192]	@ (8004eec <HAL_DMA_Start_IT+0x488>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d031      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef0 <HAL_DMA_Start_IT+0x48c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef4 <HAL_DMA_Start_IT+0x490>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef8 <HAL_DMA_Start_IT+0x494>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2a      	ldr	r2, [pc, #168]	@ (8004efc <HAL_DMA_Start_IT+0x498>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	@ (8004f00 <HAL_DMA_Start_IT+0x49c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a27      	ldr	r2, [pc, #156]	@ (8004f04 <HAL_DMA_Start_IT+0x4a0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a25      	ldr	r2, [pc, #148]	@ (8004f08 <HAL_DMA_Start_IT+0x4a4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a24      	ldr	r2, [pc, #144]	@ (8004f0c <HAL_DMA_Start_IT+0x4a8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_DMA_Start_IT+0x4ac>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_Start_IT+0x430>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <HAL_DMA_Start_IT+0x4b0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_Start_IT+0x442>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e012      	b.n	8004ecc <HAL_DMA_Start_IT+0x468>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e009      	b.n	8004ecc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ebe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40020010 	.word	0x40020010
 8004edc:	40020028 	.word	0x40020028
 8004ee0:	40020040 	.word	0x40020040
 8004ee4:	40020058 	.word	0x40020058
 8004ee8:	40020070 	.word	0x40020070
 8004eec:	40020088 	.word	0x40020088
 8004ef0:	400200a0 	.word	0x400200a0
 8004ef4:	400200b8 	.word	0x400200b8
 8004ef8:	40020410 	.word	0x40020410
 8004efc:	40020428 	.word	0x40020428
 8004f00:	40020440 	.word	0x40020440
 8004f04:	40020458 	.word	0x40020458
 8004f08:	40020470 	.word	0x40020470
 8004f0c:	40020488 	.word	0x40020488
 8004f10:	400204a0 	.word	0x400204a0
 8004f14:	400204b8 	.word	0x400204b8
 8004f18:	58025408 	.word	0x58025408
 8004f1c:	5802541c 	.word	0x5802541c
 8004f20:	58025430 	.word	0x58025430
 8004f24:	58025444 	.word	0x58025444
 8004f28:	58025458 	.word	0x58025458
 8004f2c:	5802546c 	.word	0x5802546c
 8004f30:	58025480 	.word	0x58025480
 8004f34:	58025494 	.word	0x58025494

08004f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004f40:	f7ff f8e8 	bl	8004114 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e2dc      	b.n	800550a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d008      	beq.n	8004f6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2280      	movs	r2, #128	@ 0x80
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e2cd      	b.n	800550a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a76      	ldr	r2, [pc, #472]	@ (800514c <HAL_DMA_Abort+0x214>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d04a      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a74      	ldr	r2, [pc, #464]	@ (8005150 <HAL_DMA_Abort+0x218>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d045      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	@ (8005154 <HAL_DMA_Abort+0x21c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d040      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a71      	ldr	r2, [pc, #452]	@ (8005158 <HAL_DMA_Abort+0x220>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d03b      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a70      	ldr	r2, [pc, #448]	@ (800515c <HAL_DMA_Abort+0x224>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d036      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8005160 <HAL_DMA_Abort+0x228>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d031      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6d      	ldr	r2, [pc, #436]	@ (8005164 <HAL_DMA_Abort+0x22c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d02c      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a6b      	ldr	r2, [pc, #428]	@ (8005168 <HAL_DMA_Abort+0x230>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d027      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800516c <HAL_DMA_Abort+0x234>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a68      	ldr	r2, [pc, #416]	@ (8005170 <HAL_DMA_Abort+0x238>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01d      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a67      	ldr	r2, [pc, #412]	@ (8005174 <HAL_DMA_Abort+0x23c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_DMA_Abort+0x240>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a64      	ldr	r2, [pc, #400]	@ (800517c <HAL_DMA_Abort+0x244>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a62      	ldr	r2, [pc, #392]	@ (8005180 <HAL_DMA_Abort+0x248>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a61      	ldr	r2, [pc, #388]	@ (8005184 <HAL_DMA_Abort+0x24c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_DMA_Abort+0xd6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a5f      	ldr	r2, [pc, #380]	@ (8005188 <HAL_DMA_Abort+0x250>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <HAL_DMA_Abort+0xda>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <HAL_DMA_Abort+0xdc>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 021e 	bic.w	r2, r2, #30
 8005026:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005036:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e00a      	b.n	8005056 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 020e 	bic.w	r2, r2, #14
 800504e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3c      	ldr	r2, [pc, #240]	@ (800514c <HAL_DMA_Abort+0x214>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d072      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3a      	ldr	r2, [pc, #232]	@ (8005150 <HAL_DMA_Abort+0x218>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d06d      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a39      	ldr	r2, [pc, #228]	@ (8005154 <HAL_DMA_Abort+0x21c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d068      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a37      	ldr	r2, [pc, #220]	@ (8005158 <HAL_DMA_Abort+0x220>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d063      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a36      	ldr	r2, [pc, #216]	@ (800515c <HAL_DMA_Abort+0x224>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d05e      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a34      	ldr	r2, [pc, #208]	@ (8005160 <HAL_DMA_Abort+0x228>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d059      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <HAL_DMA_Abort+0x22c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d054      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a31      	ldr	r2, [pc, #196]	@ (8005168 <HAL_DMA_Abort+0x230>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d04f      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a30      	ldr	r2, [pc, #192]	@ (800516c <HAL_DMA_Abort+0x234>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d04a      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_DMA_Abort+0x238>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d045      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2d      	ldr	r2, [pc, #180]	@ (8005174 <HAL_DMA_Abort+0x23c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d040      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <HAL_DMA_Abort+0x240>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d03b      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2a      	ldr	r2, [pc, #168]	@ (800517c <HAL_DMA_Abort+0x244>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d036      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a28      	ldr	r2, [pc, #160]	@ (8005180 <HAL_DMA_Abort+0x248>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a27      	ldr	r2, [pc, #156]	@ (8005184 <HAL_DMA_Abort+0x24c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d02c      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a25      	ldr	r2, [pc, #148]	@ (8005188 <HAL_DMA_Abort+0x250>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d027      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a24      	ldr	r2, [pc, #144]	@ (800518c <HAL_DMA_Abort+0x254>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a22      	ldr	r2, [pc, #136]	@ (8005190 <HAL_DMA_Abort+0x258>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01d      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a21      	ldr	r2, [pc, #132]	@ (8005194 <HAL_DMA_Abort+0x25c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <HAL_DMA_Abort+0x260>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1e      	ldr	r2, [pc, #120]	@ (800519c <HAL_DMA_Abort+0x264>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <HAL_DMA_Abort+0x268>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <HAL_DMA_Abort+0x26c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_DMA_Abort+0x20e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <HAL_DMA_Abort+0x270>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d132      	bne.n	80051ac <HAL_DMA_Abort+0x274>
 8005146:	2301      	movs	r3, #1
 8005148:	e031      	b.n	80051ae <HAL_DMA_Abort+0x276>
 800514a:	bf00      	nop
 800514c:	40020010 	.word	0x40020010
 8005150:	40020028 	.word	0x40020028
 8005154:	40020040 	.word	0x40020040
 8005158:	40020058 	.word	0x40020058
 800515c:	40020070 	.word	0x40020070
 8005160:	40020088 	.word	0x40020088
 8005164:	400200a0 	.word	0x400200a0
 8005168:	400200b8 	.word	0x400200b8
 800516c:	40020410 	.word	0x40020410
 8005170:	40020428 	.word	0x40020428
 8005174:	40020440 	.word	0x40020440
 8005178:	40020458 	.word	0x40020458
 800517c:	40020470 	.word	0x40020470
 8005180:	40020488 	.word	0x40020488
 8005184:	400204a0 	.word	0x400204a0
 8005188:	400204b8 	.word	0x400204b8
 800518c:	58025408 	.word	0x58025408
 8005190:	5802541c 	.word	0x5802541c
 8005194:	58025430 	.word	0x58025430
 8005198:	58025444 	.word	0x58025444
 800519c:	58025458 	.word	0x58025458
 80051a0:	5802546c 	.word	0x5802546c
 80051a4:	58025480 	.word	0x58025480
 80051a8:	58025494 	.word	0x58025494
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a6d      	ldr	r2, [pc, #436]	@ (800537c <HAL_DMA_Abort+0x444>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d04a      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005380 <HAL_DMA_Abort+0x448>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d045      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_DMA_Abort+0x44c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d040      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a68      	ldr	r2, [pc, #416]	@ (8005388 <HAL_DMA_Abort+0x450>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d03b      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a67      	ldr	r2, [pc, #412]	@ (800538c <HAL_DMA_Abort+0x454>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d036      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a65      	ldr	r2, [pc, #404]	@ (8005390 <HAL_DMA_Abort+0x458>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d031      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a64      	ldr	r2, [pc, #400]	@ (8005394 <HAL_DMA_Abort+0x45c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d02c      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a62      	ldr	r2, [pc, #392]	@ (8005398 <HAL_DMA_Abort+0x460>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d027      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a61      	ldr	r2, [pc, #388]	@ (800539c <HAL_DMA_Abort+0x464>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d022      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5f      	ldr	r2, [pc, #380]	@ (80053a0 <HAL_DMA_Abort+0x468>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01d      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a5e      	ldr	r2, [pc, #376]	@ (80053a4 <HAL_DMA_Abort+0x46c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d018      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a5c      	ldr	r2, [pc, #368]	@ (80053a8 <HAL_DMA_Abort+0x470>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a5b      	ldr	r2, [pc, #364]	@ (80053ac <HAL_DMA_Abort+0x474>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a59      	ldr	r2, [pc, #356]	@ (80053b0 <HAL_DMA_Abort+0x478>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a58      	ldr	r2, [pc, #352]	@ (80053b4 <HAL_DMA_Abort+0x47c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_DMA_Abort+0x32a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a56      	ldr	r2, [pc, #344]	@ (80053b8 <HAL_DMA_Abort+0x480>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <HAL_DMA_Abort+0x33c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e007      	b.n	8005284 <HAL_DMA_Abort+0x34c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005284:	e013      	b.n	80052ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005286:	f7fe ff45 	bl	8004114 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b05      	cmp	r3, #5
 8005292:	d90c      	bls.n	80052ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e12d      	b.n	800550a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2f      	ldr	r2, [pc, #188]	@ (800537c <HAL_DMA_Abort+0x444>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d04a      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005380 <HAL_DMA_Abort+0x448>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d045      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <HAL_DMA_Abort+0x44c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d040      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005388 <HAL_DMA_Abort+0x450>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d03b      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a29      	ldr	r2, [pc, #164]	@ (800538c <HAL_DMA_Abort+0x454>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d036      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a27      	ldr	r2, [pc, #156]	@ (8005390 <HAL_DMA_Abort+0x458>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d031      	beq.n	800535a <HAL_DMA_Abort+0x422>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a26      	ldr	r2, [pc, #152]	@ (8005394 <HAL_DMA_Abort+0x45c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d02c      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a24      	ldr	r2, [pc, #144]	@ (8005398 <HAL_DMA_Abort+0x460>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d027      	beq.n	800535a <HAL_DMA_Abort+0x422>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_DMA_Abort+0x464>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d022      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <HAL_DMA_Abort+0x468>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01d      	beq.n	800535a <HAL_DMA_Abort+0x422>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <HAL_DMA_Abort+0x46c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <HAL_DMA_Abort+0x470>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <HAL_DMA_Abort+0x474>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_DMA_Abort+0x422>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_DMA_Abort+0x478>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1a      	ldr	r2, [pc, #104]	@ (80053b4 <HAL_DMA_Abort+0x47c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_DMA_Abort+0x422>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <HAL_DMA_Abort+0x480>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <HAL_DMA_Abort+0x426>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_DMA_Abort+0x428>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02b      	beq.n	80053bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005368:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	223f      	movs	r2, #63	@ 0x3f
 8005374:	409a      	lsls	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	e02a      	b.n	80053d2 <HAL_DMA_Abort+0x49a>
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	409a      	lsls	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4f      	ldr	r2, [pc, #316]	@ (8005514 <HAL_DMA_Abort+0x5dc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d072      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a4d      	ldr	r2, [pc, #308]	@ (8005518 <HAL_DMA_Abort+0x5e0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d06d      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a4c      	ldr	r2, [pc, #304]	@ (800551c <HAL_DMA_Abort+0x5e4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d068      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005520 <HAL_DMA_Abort+0x5e8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d063      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a49      	ldr	r2, [pc, #292]	@ (8005524 <HAL_DMA_Abort+0x5ec>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d05e      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a47      	ldr	r2, [pc, #284]	@ (8005528 <HAL_DMA_Abort+0x5f0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d059      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a46      	ldr	r2, [pc, #280]	@ (800552c <HAL_DMA_Abort+0x5f4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d054      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a44      	ldr	r2, [pc, #272]	@ (8005530 <HAL_DMA_Abort+0x5f8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d04f      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a43      	ldr	r2, [pc, #268]	@ (8005534 <HAL_DMA_Abort+0x5fc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d04a      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a41      	ldr	r2, [pc, #260]	@ (8005538 <HAL_DMA_Abort+0x600>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d045      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a40      	ldr	r2, [pc, #256]	@ (800553c <HAL_DMA_Abort+0x604>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d040      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a3e      	ldr	r2, [pc, #248]	@ (8005540 <HAL_DMA_Abort+0x608>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d03b      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a3d      	ldr	r2, [pc, #244]	@ (8005544 <HAL_DMA_Abort+0x60c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d036      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a3b      	ldr	r2, [pc, #236]	@ (8005548 <HAL_DMA_Abort+0x610>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d031      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a3a      	ldr	r2, [pc, #232]	@ (800554c <HAL_DMA_Abort+0x614>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d02c      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a38      	ldr	r2, [pc, #224]	@ (8005550 <HAL_DMA_Abort+0x618>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d027      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a37      	ldr	r2, [pc, #220]	@ (8005554 <HAL_DMA_Abort+0x61c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d022      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a35      	ldr	r2, [pc, #212]	@ (8005558 <HAL_DMA_Abort+0x620>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01d      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a34      	ldr	r2, [pc, #208]	@ (800555c <HAL_DMA_Abort+0x624>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d018      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a32      	ldr	r2, [pc, #200]	@ (8005560 <HAL_DMA_Abort+0x628>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a31      	ldr	r2, [pc, #196]	@ (8005564 <HAL_DMA_Abort+0x62c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00e      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005568 <HAL_DMA_Abort+0x630>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2e      	ldr	r2, [pc, #184]	@ (800556c <HAL_DMA_Abort+0x634>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_DMA_Abort+0x58a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005570 <HAL_DMA_Abort+0x638>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_Abort+0x58e>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_DMA_Abort+0x590>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d015      	beq.n	80054f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40020010 	.word	0x40020010
 8005518:	40020028 	.word	0x40020028
 800551c:	40020040 	.word	0x40020040
 8005520:	40020058 	.word	0x40020058
 8005524:	40020070 	.word	0x40020070
 8005528:	40020088 	.word	0x40020088
 800552c:	400200a0 	.word	0x400200a0
 8005530:	400200b8 	.word	0x400200b8
 8005534:	40020410 	.word	0x40020410
 8005538:	40020428 	.word	0x40020428
 800553c:	40020440 	.word	0x40020440
 8005540:	40020458 	.word	0x40020458
 8005544:	40020470 	.word	0x40020470
 8005548:	40020488 	.word	0x40020488
 800554c:	400204a0 	.word	0x400204a0
 8005550:	400204b8 	.word	0x400204b8
 8005554:	58025408 	.word	0x58025408
 8005558:	5802541c 	.word	0x5802541c
 800555c:	58025430 	.word	0x58025430
 8005560:	58025444 	.word	0x58025444
 8005564:	58025458 	.word	0x58025458
 8005568:	5802546c 	.word	0x5802546c
 800556c:	58025480 	.word	0x58025480
 8005570:	58025494 	.word	0x58025494

08005574 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7f      	ldr	r2, [pc, #508]	@ (80057a8 <DMA_SetConfig+0x21c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d072      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7d      	ldr	r2, [pc, #500]	@ (80057ac <DMA_SetConfig+0x220>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d06d      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7c      	ldr	r2, [pc, #496]	@ (80057b0 <DMA_SetConfig+0x224>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d068      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7a      	ldr	r2, [pc, #488]	@ (80057b4 <DMA_SetConfig+0x228>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d063      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a79      	ldr	r2, [pc, #484]	@ (80057b8 <DMA_SetConfig+0x22c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d05e      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a77      	ldr	r2, [pc, #476]	@ (80057bc <DMA_SetConfig+0x230>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d059      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a76      	ldr	r2, [pc, #472]	@ (80057c0 <DMA_SetConfig+0x234>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d054      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a74      	ldr	r2, [pc, #464]	@ (80057c4 <DMA_SetConfig+0x238>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d04f      	beq.n	8005696 <DMA_SetConfig+0x10a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a73      	ldr	r2, [pc, #460]	@ (80057c8 <DMA_SetConfig+0x23c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d04a      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a71      	ldr	r2, [pc, #452]	@ (80057cc <DMA_SetConfig+0x240>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d045      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a70      	ldr	r2, [pc, #448]	@ (80057d0 <DMA_SetConfig+0x244>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d040      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <DMA_SetConfig+0x248>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d03b      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6d      	ldr	r2, [pc, #436]	@ (80057d8 <DMA_SetConfig+0x24c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d036      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6b      	ldr	r2, [pc, #428]	@ (80057dc <DMA_SetConfig+0x250>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d031      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6a      	ldr	r2, [pc, #424]	@ (80057e0 <DMA_SetConfig+0x254>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d02c      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a68      	ldr	r2, [pc, #416]	@ (80057e4 <DMA_SetConfig+0x258>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d027      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a67      	ldr	r2, [pc, #412]	@ (80057e8 <DMA_SetConfig+0x25c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a65      	ldr	r2, [pc, #404]	@ (80057ec <DMA_SetConfig+0x260>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a64      	ldr	r2, [pc, #400]	@ (80057f0 <DMA_SetConfig+0x264>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a62      	ldr	r2, [pc, #392]	@ (80057f4 <DMA_SetConfig+0x268>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a61      	ldr	r2, [pc, #388]	@ (80057f8 <DMA_SetConfig+0x26c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a5f      	ldr	r2, [pc, #380]	@ (80057fc <DMA_SetConfig+0x270>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <DMA_SetConfig+0x10a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5e      	ldr	r2, [pc, #376]	@ (8005800 <DMA_SetConfig+0x274>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <DMA_SetConfig+0x10a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5c      	ldr	r2, [pc, #368]	@ (8005804 <DMA_SetConfig+0x278>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <DMA_SetConfig+0x10e>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <DMA_SetConfig+0x110>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a39      	ldr	r2, [pc, #228]	@ (80057a8 <DMA_SetConfig+0x21c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a38      	ldr	r2, [pc, #224]	@ (80057ac <DMA_SetConfig+0x220>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a36      	ldr	r2, [pc, #216]	@ (80057b0 <DMA_SetConfig+0x224>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a35      	ldr	r2, [pc, #212]	@ (80057b4 <DMA_SetConfig+0x228>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a33      	ldr	r2, [pc, #204]	@ (80057b8 <DMA_SetConfig+0x22c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a32      	ldr	r2, [pc, #200]	@ (80057bc <DMA_SetConfig+0x230>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <DMA_SetConfig+0x1d0>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a30      	ldr	r2, [pc, #192]	@ (80057c0 <DMA_SetConfig+0x234>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2f      	ldr	r2, [pc, #188]	@ (80057c4 <DMA_SetConfig+0x238>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <DMA_SetConfig+0x1d0>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2d      	ldr	r2, [pc, #180]	@ (80057c8 <DMA_SetConfig+0x23c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2c      	ldr	r2, [pc, #176]	@ (80057cc <DMA_SetConfig+0x240>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <DMA_SetConfig+0x244>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <DMA_SetConfig+0x1d0>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a29      	ldr	r2, [pc, #164]	@ (80057d4 <DMA_SetConfig+0x248>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <DMA_SetConfig+0x24c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <DMA_SetConfig+0x1d0>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <DMA_SetConfig+0x250>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a24      	ldr	r2, [pc, #144]	@ (80057e0 <DMA_SetConfig+0x254>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <DMA_SetConfig+0x1d0>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a23      	ldr	r2, [pc, #140]	@ (80057e4 <DMA_SetConfig+0x258>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <DMA_SetConfig+0x1d4>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <DMA_SetConfig+0x1d6>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d059      	beq.n	800581a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	223f      	movs	r2, #63	@ 0x3f
 8005770:	409a      	lsls	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005784:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d138      	bne.n	8005808 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057a6:	e086      	b.n	80058b6 <DMA_SetConfig+0x32a>
 80057a8:	40020010 	.word	0x40020010
 80057ac:	40020028 	.word	0x40020028
 80057b0:	40020040 	.word	0x40020040
 80057b4:	40020058 	.word	0x40020058
 80057b8:	40020070 	.word	0x40020070
 80057bc:	40020088 	.word	0x40020088
 80057c0:	400200a0 	.word	0x400200a0
 80057c4:	400200b8 	.word	0x400200b8
 80057c8:	40020410 	.word	0x40020410
 80057cc:	40020428 	.word	0x40020428
 80057d0:	40020440 	.word	0x40020440
 80057d4:	40020458 	.word	0x40020458
 80057d8:	40020470 	.word	0x40020470
 80057dc:	40020488 	.word	0x40020488
 80057e0:	400204a0 	.word	0x400204a0
 80057e4:	400204b8 	.word	0x400204b8
 80057e8:	58025408 	.word	0x58025408
 80057ec:	5802541c 	.word	0x5802541c
 80057f0:	58025430 	.word	0x58025430
 80057f4:	58025444 	.word	0x58025444
 80057f8:	58025458 	.word	0x58025458
 80057fc:	5802546c 	.word	0x5802546c
 8005800:	58025480 	.word	0x58025480
 8005804:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
}
 8005818:	e04d      	b.n	80058b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a29      	ldr	r2, [pc, #164]	@ (80058c4 <DMA_SetConfig+0x338>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <DMA_SetConfig+0x2de>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <DMA_SetConfig+0x33c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <DMA_SetConfig+0x2de>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a26      	ldr	r2, [pc, #152]	@ (80058cc <DMA_SetConfig+0x340>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <DMA_SetConfig+0x2de>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a24      	ldr	r2, [pc, #144]	@ (80058d0 <DMA_SetConfig+0x344>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <DMA_SetConfig+0x2de>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a23      	ldr	r2, [pc, #140]	@ (80058d4 <DMA_SetConfig+0x348>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <DMA_SetConfig+0x2de>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a21      	ldr	r2, [pc, #132]	@ (80058d8 <DMA_SetConfig+0x34c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <DMA_SetConfig+0x2de>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a20      	ldr	r2, [pc, #128]	@ (80058dc <DMA_SetConfig+0x350>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <DMA_SetConfig+0x2de>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1e      	ldr	r2, [pc, #120]	@ (80058e0 <DMA_SetConfig+0x354>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <DMA_SetConfig+0x2e2>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <DMA_SetConfig+0x2e4>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d020      	beq.n	80058b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	d108      	bne.n	80058a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	60da      	str	r2, [r3, #12]
}
 80058a4:	e007      	b.n	80058b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	58025408 	.word	0x58025408
 80058c8:	5802541c 	.word	0x5802541c
 80058cc:	58025430 	.word	0x58025430
 80058d0:	58025444 	.word	0x58025444
 80058d4:	58025458 	.word	0x58025458
 80058d8:	5802546c 	.word	0x5802546c
 80058dc:	58025480 	.word	0x58025480
 80058e0:	58025494 	.word	0x58025494

080058e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a42      	ldr	r2, [pc, #264]	@ (80059fc <DMA_CalcBaseAndBitshift+0x118>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04a      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a41      	ldr	r2, [pc, #260]	@ (8005a00 <DMA_CalcBaseAndBitshift+0x11c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d045      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a3f      	ldr	r2, [pc, #252]	@ (8005a04 <DMA_CalcBaseAndBitshift+0x120>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d040      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a08 <DMA_CalcBaseAndBitshift+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d03b      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a3c      	ldr	r2, [pc, #240]	@ (8005a0c <DMA_CalcBaseAndBitshift+0x128>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d036      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3b      	ldr	r2, [pc, #236]	@ (8005a10 <DMA_CalcBaseAndBitshift+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d031      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a39      	ldr	r2, [pc, #228]	@ (8005a14 <DMA_CalcBaseAndBitshift+0x130>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02c      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a38      	ldr	r2, [pc, #224]	@ (8005a18 <DMA_CalcBaseAndBitshift+0x134>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d027      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a36      	ldr	r2, [pc, #216]	@ (8005a1c <DMA_CalcBaseAndBitshift+0x138>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <DMA_CalcBaseAndBitshift+0x13c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a33      	ldr	r2, [pc, #204]	@ (8005a24 <DMA_CalcBaseAndBitshift+0x140>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a32      	ldr	r2, [pc, #200]	@ (8005a28 <DMA_CalcBaseAndBitshift+0x144>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a30      	ldr	r2, [pc, #192]	@ (8005a2c <DMA_CalcBaseAndBitshift+0x148>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2f      	ldr	r2, [pc, #188]	@ (8005a30 <DMA_CalcBaseAndBitshift+0x14c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a34 <DMA_CalcBaseAndBitshift+0x150>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <DMA_CalcBaseAndBitshift+0xa8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <DMA_CalcBaseAndBitshift+0x154>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d101      	bne.n	8005990 <DMA_CalcBaseAndBitshift+0xac>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <DMA_CalcBaseAndBitshift+0xae>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d024      	beq.n	80059e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	3b10      	subs	r3, #16
 800599e:	4a27      	ldr	r2, [pc, #156]	@ (8005a3c <DMA_CalcBaseAndBitshift+0x158>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	4a24      	ldr	r2, [pc, #144]	@ (8005a40 <DMA_CalcBaseAndBitshift+0x15c>)
 80059b0:	5cd3      	ldrb	r3, [r2, r3]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d908      	bls.n	80059d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <DMA_CalcBaseAndBitshift+0x160>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80059ce:	e00d      	b.n	80059ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a44 <DMA_CalcBaseAndBitshift+0x160>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059de:	e005      	b.n	80059ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40020010 	.word	0x40020010
 8005a00:	40020028 	.word	0x40020028
 8005a04:	40020040 	.word	0x40020040
 8005a08:	40020058 	.word	0x40020058
 8005a0c:	40020070 	.word	0x40020070
 8005a10:	40020088 	.word	0x40020088
 8005a14:	400200a0 	.word	0x400200a0
 8005a18:	400200b8 	.word	0x400200b8
 8005a1c:	40020410 	.word	0x40020410
 8005a20:	40020428 	.word	0x40020428
 8005a24:	40020440 	.word	0x40020440
 8005a28:	40020458 	.word	0x40020458
 8005a2c:	40020470 	.word	0x40020470
 8005a30:	40020488 	.word	0x40020488
 8005a34:	400204a0 	.word	0x400204a0
 8005a38:	400204b8 	.word	0x400204b8
 8005a3c:	aaaaaaab 	.word	0xaaaaaaab
 8005a40:	08011a70 	.word	0x08011a70
 8005a44:	fffffc00 	.word	0xfffffc00

08005a48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d120      	bne.n	8005a9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d858      	bhi.n	8005b16 <DMA_CheckFifoParam+0xce>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <DMA_CheckFifoParam+0x24>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a8f 	.word	0x08005a8f
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005b17 	.word	0x08005b17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d048      	beq.n	8005b1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a8c:	e045      	b.n	8005b1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a96:	d142      	bne.n	8005b1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a9c:	e03f      	b.n	8005b1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa6:	d123      	bne.n	8005af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d838      	bhi.n	8005b22 <DMA_CheckFifoParam+0xda>
 8005ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab8 <DMA_CheckFifoParam+0x70>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005acf 	.word	0x08005acf
 8005ac0:	08005ac9 	.word	0x08005ac9
 8005ac4:	08005ae1 	.word	0x08005ae1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
        break;
 8005acc:	e030      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d025      	beq.n	8005b26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ade:	e022      	b.n	8005b26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ae8:	d11f      	bne.n	8005b2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aee:	e01c      	b.n	8005b2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d902      	bls.n	8005afe <DMA_CheckFifoParam+0xb6>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d003      	beq.n	8005b04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005afc:	e018      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
        break;
 8005b02:	e015      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
    break;
 8005b14:	e00b      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
        break;
 8005b16:	bf00      	nop
 8005b18:	e00a      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e008      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e006      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        break;
 8005b22:	bf00      	nop
 8005b24:	e004      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        break;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <DMA_CheckFifoParam+0xe8>
    break;
 8005b2e:	bf00      	nop
    }
  }

  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop

08005b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a38      	ldr	r2, [pc, #224]	@ (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a36      	ldr	r2, [pc, #216]	@ (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a35      	ldr	r2, [pc, #212]	@ (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a33      	ldr	r2, [pc, #204]	@ (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a32      	ldr	r2, [pc, #200]	@ (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01a      	beq.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3b08      	subs	r3, #8
 8005bb0:	4a28      	ldr	r2, [pc, #160]	@ (8005c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4b26      	ldr	r3, [pc, #152]	@ (8005c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a24      	ldr	r2, [pc, #144]	@ (8005c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005bcc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bdc:	e024      	b.n	8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	3b10      	subs	r3, #16
 8005be6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d806      	bhi.n	8005c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d902      	bls.n	8005c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3308      	adds	r3, #8
 8005c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4b18      	ldr	r3, [pc, #96]	@ (8005c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a16      	ldr	r2, [pc, #88]	@ (8005c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	58025408 	.word	0x58025408
 8005c38:	5802541c 	.word	0x5802541c
 8005c3c:	58025430 	.word	0x58025430
 8005c40:	58025444 	.word	0x58025444
 8005c44:	58025458 	.word	0x58025458
 8005c48:	5802546c 	.word	0x5802546c
 8005c4c:	58025480 	.word	0x58025480
 8005c50:	58025494 	.word	0x58025494
 8005c54:	cccccccd 	.word	0xcccccccd
 8005c58:	16009600 	.word	0x16009600
 8005c5c:	58025880 	.word	0x58025880
 8005c60:	aaaaaaab 	.word	0xaaaaaaab
 8005c64:	400204b8 	.word	0x400204b8
 8005c68:	4002040f 	.word	0x4002040f
 8005c6c:	10008200 	.word	0x10008200
 8005c70:	40020880 	.word	0x40020880

08005c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04a      	beq.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d847      	bhi.n	8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	@ (8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cfc:	671a      	str	r2, [r3, #112]	@ 0x70
 8005cfe:	e009      	b.n	8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a11      	ldr	r2, [pc, #68]	@ (8005d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d12:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	2201      	movs	r2, #1
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	58025408 	.word	0x58025408
 8005d30:	5802541c 	.word	0x5802541c
 8005d34:	58025430 	.word	0x58025430
 8005d38:	58025444 	.word	0x58025444
 8005d3c:	58025458 	.word	0x58025458
 8005d40:	5802546c 	.word	0x5802546c
 8005d44:	58025480 	.word	0x58025480
 8005d48:	58025494 	.word	0x58025494
 8005d4c:	1600963f 	.word	0x1600963f
 8005d50:	58025940 	.word	0x58025940
 8005d54:	1000823f 	.word	0x1000823f
 8005d58:	40020940 	.word	0x40020940

08005d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	@ 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d6a:	4b89      	ldr	r3, [pc, #548]	@ (8005f90 <HAL_GPIO_Init+0x234>)
 8005d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d6e:	e194      	b.n	800609a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8186 	beq.w	8006094 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d005      	beq.n	8005da0 <HAL_GPIO_Init+0x44>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d130      	bne.n	8005e02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	2203      	movs	r2, #3
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0201 	and.w	r2, r3, #1
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d017      	beq.n	8005e3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	2203      	movs	r2, #3
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d123      	bne.n	8005e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	08da      	lsrs	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	08da      	lsrs	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3208      	adds	r2, #8
 8005e8c:	69b9      	ldr	r1, [r7, #24]
 8005e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0203 	and.w	r2, r3, #3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80e0 	beq.w	8006094 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8005f94 <HAL_GPIO_Init+0x238>)
 8005ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eda:	4a2e      	ldr	r2, [pc, #184]	@ (8005f94 <HAL_GPIO_Init+0x238>)
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f94 <HAL_GPIO_Init+0x238>)
 8005ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ef2:	4a29      	ldr	r2, [pc, #164]	@ (8005f98 <HAL_GPIO_Init+0x23c>)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	220f      	movs	r2, #15
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4013      	ands	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <HAL_GPIO_Init+0x240>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d052      	beq.n	8005fc4 <HAL_GPIO_Init+0x268>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <HAL_GPIO_Init+0x244>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d031      	beq.n	8005f8a <HAL_GPIO_Init+0x22e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <HAL_GPIO_Init+0x248>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d02b      	beq.n	8005f86 <HAL_GPIO_Init+0x22a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <HAL_GPIO_Init+0x24c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d025      	beq.n	8005f82 <HAL_GPIO_Init+0x226>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	@ (8005fac <HAL_GPIO_Init+0x250>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <HAL_GPIO_Init+0x222>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb0 <HAL_GPIO_Init+0x254>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d019      	beq.n	8005f7a <HAL_GPIO_Init+0x21e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb4 <HAL_GPIO_Init+0x258>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_GPIO_Init+0x21a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a19      	ldr	r2, [pc, #100]	@ (8005fb8 <HAL_GPIO_Init+0x25c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00d      	beq.n	8005f72 <HAL_GPIO_Init+0x216>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a18      	ldr	r2, [pc, #96]	@ (8005fbc <HAL_GPIO_Init+0x260>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <HAL_GPIO_Init+0x212>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <HAL_GPIO_Init+0x264>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d101      	bne.n	8005f6a <HAL_GPIO_Init+0x20e>
 8005f66:	2309      	movs	r3, #9
 8005f68:	e02d      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e02b      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	e029      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f72:	2307      	movs	r3, #7
 8005f74:	e027      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f76:	2306      	movs	r3, #6
 8005f78:	e025      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f7a:	2305      	movs	r3, #5
 8005f7c:	e023      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f7e:	2304      	movs	r3, #4
 8005f80:	e021      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f82:	2303      	movs	r3, #3
 8005f84:	e01f      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e01d      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e01b      	b.n	8005fc6 <HAL_GPIO_Init+0x26a>
 8005f8e:	bf00      	nop
 8005f90:	58000080 	.word	0x58000080
 8005f94:	58024400 	.word	0x58024400
 8005f98:	58000400 	.word	0x58000400
 8005f9c:	58020000 	.word	0x58020000
 8005fa0:	58020400 	.word	0x58020400
 8005fa4:	58020800 	.word	0x58020800
 8005fa8:	58020c00 	.word	0x58020c00
 8005fac:	58021000 	.word	0x58021000
 8005fb0:	58021400 	.word	0x58021400
 8005fb4:	58021800 	.word	0x58021800
 8005fb8:	58021c00 	.word	0x58021c00
 8005fbc:	58022000 	.word	0x58022000
 8005fc0:	58022400 	.word	0x58022400
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	f002 0203 	and.w	r2, r2, #3
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	4093      	lsls	r3, r2
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fd6:	4938      	ldr	r1, [pc, #224]	@ (80060b8 <HAL_GPIO_Init+0x35c>)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	3302      	adds	r3, #2
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800600a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f47f ae63 	bne.w	8005d70 <HAL_GPIO_Init+0x14>
  }
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	3724      	adds	r7, #36	@ 0x24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	58000400 	.word	0x58000400

080060bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80060c4:	4b19      	ldr	r3, [pc, #100]	@ (800612c <HAL_PWREx_ConfigSupply+0x70>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d00a      	beq.n	80060e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060d0:	4b16      	ldr	r3, [pc, #88]	@ (800612c <HAL_PWREx_ConfigSupply+0x70>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e01f      	b.n	8006122 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e01d      	b.n	8006122 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060e6:	4b11      	ldr	r3, [pc, #68]	@ (800612c <HAL_PWREx_ConfigSupply+0x70>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f023 0207 	bic.w	r2, r3, #7
 80060ee:	490f      	ldr	r1, [pc, #60]	@ (800612c <HAL_PWREx_ConfigSupply+0x70>)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060f6:	f7fe f80d 	bl	8004114 <HAL_GetTick>
 80060fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060fc:	e009      	b.n	8006112 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060fe:	f7fe f809 	bl	8004114 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800610c:	d901      	bls.n	8006112 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e007      	b.n	8006122 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006112:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_PWREx_ConfigSupply+0x70>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800611a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611e:	d1ee      	bne.n	80060fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	58024800 	.word	0x58024800

08006130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	@ 0x30
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f000 bc48 	b.w	80069d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8088 	beq.w	8006262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006152:	4b99      	ldr	r3, [pc, #612]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800615c:	4b96      	ldr	r3, [pc, #600]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800615e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006160:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006164:	2b10      	cmp	r3, #16
 8006166:	d007      	beq.n	8006178 <HAL_RCC_OscConfig+0x48>
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	2b18      	cmp	r3, #24
 800616c:	d111      	bne.n	8006192 <HAL_RCC_OscConfig+0x62>
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d10c      	bne.n	8006192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006178:	4b8f      	ldr	r3, [pc, #572]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d06d      	beq.n	8006260 <HAL_RCC_OscConfig+0x130>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d169      	bne.n	8006260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f000 bc21 	b.w	80069d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800619a:	d106      	bne.n	80061aa <HAL_RCC_OscConfig+0x7a>
 800619c:	4b86      	ldr	r3, [pc, #536]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a85      	ldr	r2, [pc, #532]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e02e      	b.n	8006208 <HAL_RCC_OscConfig+0xd8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0x9c>
 80061b2:	4b81      	ldr	r3, [pc, #516]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a80      	ldr	r2, [pc, #512]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b7e      	ldr	r3, [pc, #504]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a7d      	ldr	r2, [pc, #500]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e01d      	b.n	8006208 <HAL_RCC_OscConfig+0xd8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0xc0>
 80061d6:	4b78      	ldr	r3, [pc, #480]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a77      	ldr	r2, [pc, #476]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b75      	ldr	r3, [pc, #468]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a74      	ldr	r2, [pc, #464]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e00b      	b.n	8006208 <HAL_RCC_OscConfig+0xd8>
 80061f0:	4b71      	ldr	r3, [pc, #452]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a70      	ldr	r2, [pc, #448]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	4b6e      	ldr	r3, [pc, #440]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a6d      	ldr	r2, [pc, #436]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fd ff80 	bl	8004114 <HAL_GetTick>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006218:	f7fd ff7c 	bl	8004114 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b64      	cmp	r3, #100	@ 0x64
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e3d4      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800622a:	4b63      	ldr	r3, [pc, #396]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0xe8>
 8006236:	e014      	b.n	8006262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fd ff6c 	bl	8004114 <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006240:	f7fd ff68 	bl	8004114 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	@ 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e3c0      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006252:	4b59      	ldr	r3, [pc, #356]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x110>
 800625e:	e000      	b.n	8006262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80ca 	beq.w	8006404 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006270:	4b51      	ldr	r3, [pc, #324]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006278:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800627a:	4b4f      	ldr	r3, [pc, #316]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_RCC_OscConfig+0x166>
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	2b18      	cmp	r3, #24
 800628a:	d156      	bne.n	800633a <HAL_RCC_OscConfig+0x20a>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d151      	bne.n	800633a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006296:	4b48      	ldr	r3, [pc, #288]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_RCC_OscConfig+0x17e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e392      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062ae:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 0219 	bic.w	r2, r3, #25
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	493f      	ldr	r1, [pc, #252]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fd ff28 	bl	8004114 <HAL_GetTick>
 80062c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c8:	f7fd ff24 	bl	8004114 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e37c      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062da:	4b37      	ldr	r3, [pc, #220]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e6:	f7fd ff45 	bl	8004174 <HAL_GetREVID>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d817      	bhi.n	8006324 <HAL_RCC_OscConfig+0x1f4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d108      	bne.n	800630e <HAL_RCC_OscConfig+0x1de>
 80062fc:	4b2e      	ldr	r3, [pc, #184]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006304:	4a2c      	ldr	r2, [pc, #176]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800630a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800630c:	e07a      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630e:	4b2a      	ldr	r3, [pc, #168]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	031b      	lsls	r3, r3, #12
 800631c:	4926      	ldr	r1, [pc, #152]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800631e:	4313      	orrs	r3, r2
 8006320:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006322:	e06f      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006324:	4b24      	ldr	r3, [pc, #144]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	061b      	lsls	r3, r3, #24
 8006332:	4921      	ldr	r1, [pc, #132]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006338:	e064      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d047      	beq.n	80063d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006342:	4b1d      	ldr	r3, [pc, #116]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 0219 	bic.w	r2, r3, #25
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	491a      	ldr	r1, [pc, #104]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fd fede 	bl	8004114 <HAL_GetTick>
 8006358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635c:	f7fd feda 	bl	8004114 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e332      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800636e:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637a:	f7fd fefb 	bl	8004174 <HAL_GetREVID>
 800637e:	4603      	mov	r3, r0
 8006380:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006384:	4293      	cmp	r3, r2
 8006386:	d819      	bhi.n	80063bc <HAL_RCC_OscConfig+0x28c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b40      	cmp	r3, #64	@ 0x40
 800638e:	d108      	bne.n	80063a2 <HAL_RCC_OscConfig+0x272>
 8006390:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006398:	4a07      	ldr	r2, [pc, #28]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639e:	6053      	str	r3, [r2, #4]
 80063a0:	e030      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
 80063a2:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	4901      	ldr	r1, [pc, #4]	@ (80063b8 <HAL_RCC_OscConfig+0x288>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]
 80063b6:	e025      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
 80063b8:	58024400 	.word	0x58024400
 80063bc:	4b9a      	ldr	r3, [pc, #616]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	4997      	ldr	r1, [pc, #604]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	604b      	str	r3, [r1, #4]
 80063d0:	e018      	b.n	8006404 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063d2:	4b95      	ldr	r3, [pc, #596]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a94      	ldr	r2, [pc, #592]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fd fe99 	bl	8004114 <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e6:	f7fd fe95 	bl	8004114 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e2ed      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063f8:	4b8b      	ldr	r3, [pc, #556]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a9 	beq.w	8006564 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006412:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800641a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800641c:	4b82      	ldr	r3, [pc, #520]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d007      	beq.n	8006438 <HAL_RCC_OscConfig+0x308>
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b18      	cmp	r3, #24
 800642c:	d13a      	bne.n	80064a4 <HAL_RCC_OscConfig+0x374>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d135      	bne.n	80064a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006438:	4b7b      	ldr	r3, [pc, #492]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_OscConfig+0x320>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b80      	cmp	r3, #128	@ 0x80
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e2c1      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006450:	f7fd fe90 	bl	8004174 <HAL_GetREVID>
 8006454:	4603      	mov	r3, r0
 8006456:	f241 0203 	movw	r2, #4099	@ 0x1003
 800645a:	4293      	cmp	r3, r2
 800645c:	d817      	bhi.n	800648e <HAL_RCC_OscConfig+0x35e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	2b20      	cmp	r3, #32
 8006464:	d108      	bne.n	8006478 <HAL_RCC_OscConfig+0x348>
 8006466:	4b70      	ldr	r3, [pc, #448]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800646e:	4a6e      	ldr	r2, [pc, #440]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006476:	e075      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006478:	4b6b      	ldr	r3, [pc, #428]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	069b      	lsls	r3, r3, #26
 8006486:	4968      	ldr	r1, [pc, #416]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800648c:	e06a      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800648e:	4b66      	ldr	r3, [pc, #408]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	4962      	ldr	r1, [pc, #392]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064a2:	e05f      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d042      	beq.n	8006532 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fd fe2c 	bl	8004114 <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064c0:	f7fd fe28 	bl	8004114 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e280      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064d2:	4b55      	ldr	r3, [pc, #340]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064de:	f7fd fe49 	bl	8004174 <HAL_GetREVID>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d817      	bhi.n	800651c <HAL_RCC_OscConfig+0x3ec>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d108      	bne.n	8006506 <HAL_RCC_OscConfig+0x3d6>
 80064f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80064fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006502:	6053      	str	r3, [r2, #4]
 8006504:	e02e      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
 8006506:	4b48      	ldr	r3, [pc, #288]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	069b      	lsls	r3, r3, #26
 8006514:	4944      	ldr	r1, [pc, #272]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
 800651a:	e023      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
 800651c:	4b42      	ldr	r3, [pc, #264]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	493f      	ldr	r1, [pc, #252]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800652c:	4313      	orrs	r3, r2
 800652e:	60cb      	str	r3, [r1, #12]
 8006530:	e018      	b.n	8006564 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006532:	4b3d      	ldr	r3, [pc, #244]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3c      	ldr	r2, [pc, #240]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 8006538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fd fde9 	bl	8004114 <HAL_GetTick>
 8006542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006546:	f7fd fde5 	bl	8004114 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e23d      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006558:	4b33      	ldr	r3, [pc, #204]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d036      	beq.n	80065de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d019      	beq.n	80065ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006578:	4b2b      	ldr	r3, [pc, #172]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800657a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657c:	4a2a      	ldr	r2, [pc, #168]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fd fdc6 	bl	8004114 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658c:	f7fd fdc2 	bl	8004114 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e21a      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800659e:	4b22      	ldr	r3, [pc, #136]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x45c>
 80065aa:	e018      	b.n	80065de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fd fdac 	bl	8004114 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c0:	f7fd fda8 	bl	8004114 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e200      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065d2:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d039      	beq.n	800665e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01c      	beq.n	800662c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065fe:	f7fd fd89 	bl	8004114 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006606:	f7fd fd85 	bl	8004114 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e1dd      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_RCC_OscConfig+0x4f8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x4d6>
 8006624:	e01b      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800662c:	4b9b      	ldr	r3, [pc, #620]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a9a      	ldr	r2, [pc, #616]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006638:	f7fd fd6c 	bl	8004114 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006640:	f7fd fd68 	bl	8004114 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e1c0      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006652:	4b92      	ldr	r3, [pc, #584]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8081 	beq.w	800676e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800666c:	4b8c      	ldr	r3, [pc, #560]	@ (80068a0 <HAL_RCC_OscConfig+0x770>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a8b      	ldr	r2, [pc, #556]	@ (80068a0 <HAL_RCC_OscConfig+0x770>)
 8006672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006678:	f7fd fd4c 	bl	8004114 <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006680:	f7fd fd48 	bl	8004114 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b64      	cmp	r3, #100	@ 0x64
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e1a0      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006692:	4b83      	ldr	r3, [pc, #524]	@ (80068a0 <HAL_RCC_OscConfig+0x770>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d106      	bne.n	80066b4 <HAL_RCC_OscConfig+0x584>
 80066a6:	4b7d      	ldr	r3, [pc, #500]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066aa:	4a7c      	ldr	r2, [pc, #496]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b2:	e02d      	b.n	8006710 <HAL_RCC_OscConfig+0x5e0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10c      	bne.n	80066d6 <HAL_RCC_OscConfig+0x5a6>
 80066bc:	4b77      	ldr	r3, [pc, #476]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c0:	4a76      	ldr	r2, [pc, #472]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c8:	4b74      	ldr	r3, [pc, #464]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	4a73      	ldr	r2, [pc, #460]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066ce:	f023 0304 	bic.w	r3, r3, #4
 80066d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d4:	e01c      	b.n	8006710 <HAL_RCC_OscConfig+0x5e0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d10c      	bne.n	80066f8 <HAL_RCC_OscConfig+0x5c8>
 80066de:	4b6f      	ldr	r3, [pc, #444]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	4a6e      	ldr	r2, [pc, #440]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066e4:	f043 0304 	orr.w	r3, r3, #4
 80066e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ea:	4b6c      	ldr	r3, [pc, #432]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	4a6b      	ldr	r2, [pc, #428]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f6:	e00b      	b.n	8006710 <HAL_RCC_OscConfig+0x5e0>
 80066f8:	4b68      	ldr	r3, [pc, #416]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	4a67      	ldr	r2, [pc, #412]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	6713      	str	r3, [r2, #112]	@ 0x70
 8006704:	4b65      	ldr	r3, [pc, #404]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006708:	4a64      	ldr	r2, [pc, #400]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800670a:	f023 0304 	bic.w	r3, r3, #4
 800670e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d015      	beq.n	8006744 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fd fcfc 	bl	8004114 <HAL_GetTick>
 800671c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800671e:	e00a      	b.n	8006736 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006720:	f7fd fcf8 	bl	8004114 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e14e      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006736:	4b59      	ldr	r3, [pc, #356]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0ee      	beq.n	8006720 <HAL_RCC_OscConfig+0x5f0>
 8006742:	e014      	b.n	800676e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fd fce6 	bl	8004114 <HAL_GetTick>
 8006748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800674a:	e00a      	b.n	8006762 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674c:	f7fd fce2 	bl	8004114 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e138      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006762:	4b4e      	ldr	r3, [pc, #312]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1ee      	bne.n	800674c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 812d 	beq.w	80069d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006778:	4b48      	ldr	r3, [pc, #288]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006780:	2b18      	cmp	r3, #24
 8006782:	f000 80bd 	beq.w	8006900 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	2b02      	cmp	r3, #2
 800678c:	f040 809e 	bne.w	80068cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006790:	4b42      	ldr	r3, [pc, #264]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a41      	ldr	r2, [pc, #260]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800679a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fd fcba 	bl	8004114 <HAL_GetTick>
 80067a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fd fcb6 	bl	8004114 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e10e      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067b6:	4b39      	ldr	r3, [pc, #228]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c2:	4b36      	ldr	r3, [pc, #216]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80067c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c6:	4b37      	ldr	r3, [pc, #220]	@ (80068a4 <HAL_RCC_OscConfig+0x774>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067d2:	0112      	lsls	r2, r2, #4
 80067d4:	430a      	orrs	r2, r1
 80067d6:	4931      	ldr	r1, [pc, #196]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	628b      	str	r3, [r1, #40]	@ 0x28
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e0:	3b01      	subs	r3, #1
 80067e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ea:	3b01      	subs	r3, #1
 80067ec:	025b      	lsls	r3, r3, #9
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f6:	3b01      	subs	r3, #1
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006804:	3b01      	subs	r3, #1
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800680c:	4923      	ldr	r1, [pc, #140]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800680e:	4313      	orrs	r3, r2
 8006810:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006812:	4b22      	ldr	r3, [pc, #136]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	4a21      	ldr	r2, [pc, #132]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800681e:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006822:	4b21      	ldr	r3, [pc, #132]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800682a:	00d2      	lsls	r2, r2, #3
 800682c:	491b      	ldr	r1, [pc, #108]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006832:	4b1a      	ldr	r3, [pc, #104]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	f023 020c 	bic.w	r2, r3, #12
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	4917      	ldr	r1, [pc, #92]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006840:	4313      	orrs	r3, r2
 8006842:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006844:	4b15      	ldr	r3, [pc, #84]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	f023 0202 	bic.w	r2, r3, #2
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006850:	4912      	ldr	r1, [pc, #72]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006856:	4b11      	ldr	r3, [pc, #68]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	4a10      	ldr	r2, [pc, #64]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800685c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4b0e      	ldr	r3, [pc, #56]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4a0d      	ldr	r2, [pc, #52]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800686c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	4a0a      	ldr	r2, [pc, #40]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800687a:	4b08      	ldr	r3, [pc, #32]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	4a07      	ldr	r2, [pc, #28]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006886:	4b05      	ldr	r3, [pc, #20]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a04      	ldr	r2, [pc, #16]	@ (800689c <HAL_RCC_OscConfig+0x76c>)
 800688c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006892:	f7fd fc3f 	bl	8004114 <HAL_GetTick>
 8006896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006898:	e011      	b.n	80068be <HAL_RCC_OscConfig+0x78e>
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
 80068a0:	58024800 	.word	0x58024800
 80068a4:	fffffc0c 	.word	0xfffffc0c
 80068a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ac:	f7fd fc32 	bl	8004114 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e08a      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068be:	4b47      	ldr	r3, [pc, #284]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x77c>
 80068ca:	e082      	b.n	80069d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068cc:	4b43      	ldr	r3, [pc, #268]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a42      	ldr	r2, [pc, #264]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80068d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fd fc1c 	bl	8004114 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fd fc18 	bl	8004114 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e070      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068f2:	4b3a      	ldr	r3, [pc, #232]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x7b0>
 80068fe:	e068      	b.n	80069d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006900:	4b36      	ldr	r3, [pc, #216]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006906:	4b35      	ldr	r3, [pc, #212]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	2b01      	cmp	r3, #1
 8006912:	d031      	beq.n	8006978 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f003 0203 	and.w	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800691e:	429a      	cmp	r2, r3
 8006920:	d12a      	bne.n	8006978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800692e:	429a      	cmp	r2, r3
 8006930:	d122      	bne.n	8006978 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d11a      	bne.n	8006978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	0a5b      	lsrs	r3, r3, #9
 8006946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d111      	bne.n	8006978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d108      	bne.n	8006978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	0e1b      	lsrs	r3, r3, #24
 800696a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006972:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e02b      	b.n	80069d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800697c:	4b17      	ldr	r3, [pc, #92]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	08db      	lsrs	r3, r3, #3
 8006982:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006986:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d01f      	beq.n	80069d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006992:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800699e:	f7fd fbb9 	bl	8004114 <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069a4:	bf00      	nop
 80069a6:	f7fd fbb5 	bl	8004114 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d0f9      	beq.n	80069a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069b2:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80069b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_RCC_OscConfig+0x8b0>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069be:	00d2      	lsls	r2, r2, #3
 80069c0:	4906      	ldr	r1, [pc, #24]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80069c6:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	4a04      	ldr	r2, [pc, #16]	@ (80069dc <HAL_RCC_OscConfig+0x8ac>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3730      	adds	r7, #48	@ 0x30
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	58024400 	.word	0x58024400
 80069e0:	ffff0007 	.word	0xffff0007

080069e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e19c      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f8:	4b8a      	ldr	r3, [pc, #552]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d910      	bls.n	8006a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a06:	4b87      	ldr	r3, [pc, #540]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 020f 	bic.w	r2, r3, #15
 8006a0e:	4985      	ldr	r1, [pc, #532]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b83      	ldr	r3, [pc, #524]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e184      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d010      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	4b7b      	ldr	r3, [pc, #492]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d908      	bls.n	8006a56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a44:	4b78      	ldr	r3, [pc, #480]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4975      	ldr	r1, [pc, #468]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d010      	beq.n	8006a84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	4b70      	ldr	r3, [pc, #448]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d908      	bls.n	8006a84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a72:	4b6d      	ldr	r3, [pc, #436]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	496a      	ldr	r1, [pc, #424]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	4b64      	ldr	r3, [pc, #400]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d908      	bls.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006aa0:	4b61      	ldr	r3, [pc, #388]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	495e      	ldr	r1, [pc, #376]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69da      	ldr	r2, [r3, #28]
 8006ac2:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d908      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ace:	4b56      	ldr	r3, [pc, #344]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	4953      	ldr	r1, [pc, #332]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	4b4d      	ldr	r3, [pc, #308]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d908      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b4a      	ldr	r3, [pc, #296]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f023 020f 	bic.w	r2, r3, #15
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4947      	ldr	r1, [pc, #284]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d055      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b1a:	4b43      	ldr	r3, [pc, #268]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4940      	ldr	r1, [pc, #256]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b34:	4b3c      	ldr	r3, [pc, #240]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d121      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0f6      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b4c:	4b36      	ldr	r3, [pc, #216]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d115      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0ea      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d107      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b64:	4b30      	ldr	r3, [pc, #192]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0de      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b74:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0d6      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b84:	4b28      	ldr	r3, [pc, #160]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f023 0207 	bic.w	r2, r3, #7
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	4925      	ldr	r1, [pc, #148]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b96:	f7fd fabd 	bl	8004114 <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9e:	f7fd fab9 	bl	8004114 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0be      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d1eb      	bne.n	8006b9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d208      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be2:	4b11      	ldr	r3, [pc, #68]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f023 020f 	bic.w	r2, r3, #15
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	490e      	ldr	r1, [pc, #56]	@ (8006c28 <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d214      	bcs.n	8006c2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b08      	ldr	r3, [pc, #32]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 020f 	bic.w	r2, r3, #15
 8006c0a:	4906      	ldr	r1, [pc, #24]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <HAL_RCC_ClockConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e086      	b.n	8006d32 <HAL_RCC_ClockConfig+0x34e>
 8006c24:	52002000 	.word	0x52002000
 8006c28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d208      	bcs.n	8006c5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c48:	4b3c      	ldr	r3, [pc, #240]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	4939      	ldr	r1, [pc, #228]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	4b34      	ldr	r3, [pc, #208]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d208      	bcs.n	8006c88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c76:	4b31      	ldr	r3, [pc, #196]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	492e      	ldr	r1, [pc, #184]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	4b28      	ldr	r3, [pc, #160]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d208      	bcs.n	8006cb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ca4:	4b25      	ldr	r3, [pc, #148]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	4922      	ldr	r1, [pc, #136]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69da      	ldr	r2, [r3, #28]
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d208      	bcs.n	8006ce4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4917      	ldr	r1, [pc, #92]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ce4:	f000 f834 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	4912      	ldr	r1, [pc, #72]	@ (8006d40 <HAL_RCC_ClockConfig+0x35c>)
 8006cf6:	5ccb      	ldrb	r3, [r1, r3]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d02:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <HAL_RCC_ClockConfig+0x358>)
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8006d40 <HAL_RCC_ClockConfig+0x35c>)
 8006d0c:	5cd3      	ldrb	r3, [r2, r3]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	4a0a      	ldr	r2, [pc, #40]	@ (8006d44 <HAL_RCC_ClockConfig+0x360>)
 8006d1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d48 <HAL_RCC_ClockConfig+0x364>)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d22:	4b0a      	ldr	r3, [pc, #40]	@ (8006d4c <HAL_RCC_ClockConfig+0x368>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fd f9aa 	bl	8004080 <HAL_InitTick>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	08011a0c 	.word	0x08011a0c
 8006d44:	24000054 	.word	0x24000054
 8006d48:	24000050 	.word	0x24000050
 8006d4c:	24000058 	.word	0x24000058

08006d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	@ 0x24
 8006d54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d56:	4bb3      	ldr	r3, [pc, #716]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d5e:	2b18      	cmp	r3, #24
 8006d60:	f200 8155 	bhi.w	800700e <HAL_RCC_GetSysClockFreq+0x2be>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	0800700f 	.word	0x0800700f
 8006d74:	0800700f 	.word	0x0800700f
 8006d78:	0800700f 	.word	0x0800700f
 8006d7c:	0800700f 	.word	0x0800700f
 8006d80:	0800700f 	.word	0x0800700f
 8006d84:	0800700f 	.word	0x0800700f
 8006d88:	0800700f 	.word	0x0800700f
 8006d8c:	08006df7 	.word	0x08006df7
 8006d90:	0800700f 	.word	0x0800700f
 8006d94:	0800700f 	.word	0x0800700f
 8006d98:	0800700f 	.word	0x0800700f
 8006d9c:	0800700f 	.word	0x0800700f
 8006da0:	0800700f 	.word	0x0800700f
 8006da4:	0800700f 	.word	0x0800700f
 8006da8:	0800700f 	.word	0x0800700f
 8006dac:	08006dfd 	.word	0x08006dfd
 8006db0:	0800700f 	.word	0x0800700f
 8006db4:	0800700f 	.word	0x0800700f
 8006db8:	0800700f 	.word	0x0800700f
 8006dbc:	0800700f 	.word	0x0800700f
 8006dc0:	0800700f 	.word	0x0800700f
 8006dc4:	0800700f 	.word	0x0800700f
 8006dc8:	0800700f 	.word	0x0800700f
 8006dcc:	08006e03 	.word	0x08006e03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd0:	4b94      	ldr	r3, [pc, #592]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ddc:	4b91      	ldr	r3, [pc, #580]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	4a90      	ldr	r2, [pc, #576]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006dee:	e111      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006df0:	4b8d      	ldr	r3, [pc, #564]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006df2:	61bb      	str	r3, [r7, #24]
      break;
 8006df4:	e10e      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006df6:	4b8d      	ldr	r3, [pc, #564]	@ (800702c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006df8:	61bb      	str	r3, [r7, #24]
      break;
 8006dfa:	e10b      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dfe:	61bb      	str	r3, [r7, #24]
      break;
 8006e00:	e108      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e02:	4b88      	ldr	r3, [pc, #544]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e0c:	4b85      	ldr	r3, [pc, #532]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	091b      	lsrs	r3, r3, #4
 8006e12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e18:	4b82      	ldr	r3, [pc, #520]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e22:	4b80      	ldr	r3, [pc, #512]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80e1 	beq.w	8007008 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f000 8083 	beq.w	8006f54 <HAL_RCC_GetSysClockFreq+0x204>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	f200 80a1 	bhi.w	8006f98 <HAL_RCC_GetSysClockFreq+0x248>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x114>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d056      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e62:	e099      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e64:	4b6f      	ldr	r3, [pc, #444]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02d      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e70:	4b6c      	ldr	r3, [pc, #432]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a6b      	ldr	r2, [pc, #428]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b62      	ldr	r3, [pc, #392]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006eca:	e087      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007038 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ede:	4b51      	ldr	r3, [pc, #324]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f0e:	e065      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800703c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b40      	ldr	r3, [pc, #256]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f52:	e043      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007040 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b2f      	ldr	r3, [pc, #188]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f96:	e021      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800703c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b1e      	ldr	r3, [pc, #120]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fbe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007034 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006fdc:	4b11      	ldr	r3, [pc, #68]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	0a5b      	lsrs	r3, r3, #9
 8006fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007000:	ee17 3a90 	vmov	r3, s15
 8007004:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007006:	e005      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	61bb      	str	r3, [r7, #24]
      break;
 800700c:	e002      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800700e:	4b07      	ldr	r3, [pc, #28]	@ (800702c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007010:	61bb      	str	r3, [r7, #24]
      break;
 8007012:	bf00      	nop
  }

  return sysclockfreq;
 8007014:	69bb      	ldr	r3, [r7, #24]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3724      	adds	r7, #36	@ 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	03d09000 	.word	0x03d09000
 800702c:	003d0900 	.word	0x003d0900
 8007030:	017d7840 	.word	0x017d7840
 8007034:	46000000 	.word	0x46000000
 8007038:	4c742400 	.word	0x4c742400
 800703c:	4a742400 	.word	0x4a742400
 8007040:	4bbebc20 	.word	0x4bbebc20

08007044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800704a:	f7ff fe81 	bl	8006d50 <HAL_RCC_GetSysClockFreq>
 800704e:	4602      	mov	r2, r0
 8007050:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <HAL_RCC_GetHCLKFreq+0x50>)
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	490f      	ldr	r1, [pc, #60]	@ (8007098 <HAL_RCC_GetHCLKFreq+0x54>)
 800705c:	5ccb      	ldrb	r3, [r1, r3]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007068:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <HAL_RCC_GetHCLKFreq+0x50>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	4a09      	ldr	r2, [pc, #36]	@ (8007098 <HAL_RCC_GetHCLKFreq+0x54>)
 8007072:	5cd3      	ldrb	r3, [r2, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	4a07      	ldr	r2, [pc, #28]	@ (800709c <HAL_RCC_GetHCLKFreq+0x58>)
 8007080:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007082:	4a07      	ldr	r2, [pc, #28]	@ (80070a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <HAL_RCC_GetHCLKFreq+0x58>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	08011a0c 	.word	0x08011a0c
 800709c:	24000054 	.word	0x24000054
 80070a0:	24000050 	.word	0x24000050

080070a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070a8:	f7ff ffcc 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	4904      	ldr	r1, [pc, #16]	@ (80070cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ba:	5ccb      	ldrb	r3, [r1, r3]
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58024400 	.word	0x58024400
 80070cc:	08011a0c 	.word	0x08011a0c

080070d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070d4:	f7ff ffb6 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	4904      	ldr	r1, [pc, #16]	@ (80070f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	58024400 	.word	0x58024400
 80070f8:	08011a0c 	.word	0x08011a0c

080070fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007100:	b0ca      	sub	sp, #296	@ 0x128
 8007102:	af00      	add	r7, sp, #0
 8007104:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800710e:	2300      	movs	r3, #0
 8007110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007120:	2500      	movs	r5, #0
 8007122:	ea54 0305 	orrs.w	r3, r4, r5
 8007126:	d049      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800712e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007132:	d02f      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007134:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007138:	d828      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800713a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800713e:	d01a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007140:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007144:	d822      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800714a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800714e:	d007      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007150:	e01c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007152:	4bb8      	ldr	r3, [pc, #736]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4ab7      	ldr	r2, [pc, #732]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800715c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800715e:	e01a      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007164:	3308      	adds	r3, #8
 8007166:	2102      	movs	r1, #2
 8007168:	4618      	mov	r0, r3
 800716a:	f002 fb61 	bl	8009830 <RCCEx_PLL2_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007174:	e00f      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	3328      	adds	r3, #40	@ 0x28
 800717c:	2102      	movs	r1, #2
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fc08 	bl	8009994 <RCCEx_PLL3_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800718a:	e004      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800719e:	4ba5      	ldr	r3, [pc, #660]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ae:	430b      	orrs	r3, r1
 80071b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80071b2:	e003      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80071c8:	f04f 0900 	mov.w	r9, #0
 80071cc:	ea58 0309 	orrs.w	r3, r8, r9
 80071d0:	d047      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d82a      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80071dc:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071f9 	.word	0x080071f9
 80071e8:	08007207 	.word	0x08007207
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	0800723b 	.word	0x0800723b
 80071f4:	0800723b 	.word	0x0800723b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	4a8d      	ldr	r2, [pc, #564]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007204:	e01a      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	3308      	adds	r3, #8
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f002 fb0e 	bl	8009830 <RCCEx_PLL2_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800721a:	e00f      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	3328      	adds	r3, #40	@ 0x28
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f002 fbb5 	bl	8009994 <RCCEx_PLL3_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007230:	e004      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007238:	e000      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800723a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007244:	4b7b      	ldr	r3, [pc, #492]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007248:	f023 0107 	bic.w	r1, r3, #7
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007252:	4a78      	ldr	r2, [pc, #480]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007254:	430b      	orrs	r3, r1
 8007256:	6513      	str	r3, [r2, #80]	@ 0x50
 8007258:	e003      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800726e:	f04f 0b00 	mov.w	fp, #0
 8007272:	ea5a 030b 	orrs.w	r3, sl, fp
 8007276:	d04c      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007282:	d030      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007288:	d829      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800728a:	2bc0      	cmp	r3, #192	@ 0xc0
 800728c:	d02d      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800728e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007290:	d825      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007292:	2b80      	cmp	r3, #128	@ 0x80
 8007294:	d018      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007296:	2b80      	cmp	r3, #128	@ 0x80
 8007298:	d821      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d007      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80072a2:	e01c      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a4:	4b63      	ldr	r3, [pc, #396]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	4a62      	ldr	r2, [pc, #392]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072b0:	e01c      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	3308      	adds	r3, #8
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f002 fab8 	bl	8009830 <RCCEx_PLL2_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072c6:	e011      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	3328      	adds	r3, #40	@ 0x28
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f002 fb5f 	bl	8009994 <RCCEx_PLL3_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007302:	4a4c      	ldr	r2, [pc, #304]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6513      	str	r3, [r2, #80]	@ 0x50
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800731e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007328:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d053      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007336:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800733a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800733e:	d035      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007340:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007344:	d82e      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007346:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800734a:	d031      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800734c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007350:	d828      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007352:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007356:	d01a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800735c:	d822      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007366:	d007      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007368:	e01c      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800736a:	4b32      	ldr	r3, [pc, #200]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	4a31      	ldr	r2, [pc, #196]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007376:	e01c      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737c:	3308      	adds	r3, #8
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f002 fa55 	bl	8009830 <RCCEx_PLL2_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800738c:	e011      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007392:	3328      	adds	r3, #40	@ 0x28
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f002 fafc 	bl	8009994 <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073a2:	e006      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073aa:	e002      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073ac:	bf00      	nop
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80073e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073ea:	2300      	movs	r3, #0
 80073ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80073f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80073f4:	460b      	mov	r3, r1
 80073f6:	4313      	orrs	r3, r2
 80073f8:	d056      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007402:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007406:	d038      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007408:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800740c:	d831      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800740e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007412:	d034      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007414:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007418:	d82b      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800741a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800741e:	d01d      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007424:	d825      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d006      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800742a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007430:	e01f      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007432:	bf00      	nop
 8007434:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4ba2      	ldr	r3, [pc, #648]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4aa1      	ldr	r2, [pc, #644]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007444:	e01c      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	3308      	adds	r3, #8
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f002 f9ee 	bl	8009830 <RCCEx_PLL2_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800745a:	e011      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007460:	3328      	adds	r3, #40	@ 0x28
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f002 fa95 	bl	8009994 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007470:	e006      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007478:	e002      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800747a:	bf00      	nop
 800747c:	e000      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800747e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007488:	4b8e      	ldr	r3, [pc, #568]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800748a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007494:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007498:	4a8a      	ldr	r2, [pc, #552]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800749a:	430b      	orrs	r3, r1
 800749c:	6593      	str	r3, [r2, #88]	@ 0x58
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d03a      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ce:	2b30      	cmp	r3, #48	@ 0x30
 80074d0:	d01f      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80074d2:	2b30      	cmp	r3, #48	@ 0x30
 80074d4:	d819      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d00c      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d815      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d019      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d111      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e6:	4b77      	ldr	r3, [pc, #476]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	4a76      	ldr	r2, [pc, #472]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80074f2:	e011      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	3308      	adds	r3, #8
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 f997 	bl	8009830 <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007508:	e006      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007510:	e002      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007520:	4b68      	ldr	r3, [pc, #416]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007524:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800752e:	4a65      	ldr	r2, [pc, #404]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007530:	430b      	orrs	r3, r1
 8007532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007534:	e003      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800754a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007554:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d051      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007568:	d035      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800756a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800756e:	d82e      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007574:	d031      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007576:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800757a:	d828      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007580:	d01a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007586:	d822      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007590:	d007      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007592:	e01c      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007594:	4b4b      	ldr	r3, [pc, #300]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	4a4a      	ldr	r2, [pc, #296]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800759a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800759e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075a0:	e01c      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	3308      	adds	r3, #8
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f002 f940 	bl	8009830 <RCCEx_PLL2_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075b6:	e011      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075bc:	3328      	adds	r3, #40	@ 0x28
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f002 f9e7 	bl	8009994 <RCCEx_PLL3_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d4:	e002      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075e4:	4b37      	ldr	r3, [pc, #220]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f2:	4a34      	ldr	r2, [pc, #208]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80075f8:	e003      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800760e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007612:	2300      	movs	r3, #0
 8007614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007618:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800761c:	460b      	mov	r3, r1
 800761e:	4313      	orrs	r3, r2
 8007620:	d056      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800762c:	d033      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800762e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007632:	d82c      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007634:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007638:	d02f      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800763a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800763e:	d826      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007640:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007644:	d02b      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007646:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800764a:	d820      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800764c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007650:	d012      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007656:	d81a      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d022      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007660:	d115      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	3308      	adds	r3, #8
 8007668:	2101      	movs	r1, #1
 800766a:	4618      	mov	r0, r3
 800766c:	f002 f8e0 	bl	8009830 <RCCEx_PLL2_Config>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007676:	e015      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	3328      	adds	r3, #40	@ 0x28
 800767e:	2101      	movs	r1, #1
 8007680:	4618      	mov	r0, r3
 8007682:	f002 f987 	bl	8009994 <RCCEx_PLL3_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800768c:	e00a      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007696:	bf00      	nop
 8007698:	e004      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ba:	4a02      	ldr	r2, [pc, #8]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6513      	str	r3, [r2, #80]	@ 0x50
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80076dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4313      	orrs	r3, r2
 80076ee:	d055      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076fc:	d033      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80076fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007702:	d82c      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007708:	d02f      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d826      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007710:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007714:	d02b      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007716:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800771a:	d820      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800771c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007720:	d012      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007726:	d81a      	bhi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d022      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800772c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007730:	d115      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	3308      	adds	r3, #8
 8007738:	2101      	movs	r1, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f002 f878 	bl	8009830 <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007746:	e015      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774c:	3328      	adds	r3, #40	@ 0x28
 800774e:	2101      	movs	r1, #1
 8007750:	4618      	mov	r0, r3
 8007752:	f002 f91f 	bl	8009994 <RCCEx_PLL3_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800775c:	e00a      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007764:	e006      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007766:	bf00      	nop
 8007768:	e004      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800776a:	bf00      	nop
 800776c:	e002      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800776e:	bf00      	nop
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800777c:	4ba3      	ldr	r3, [pc, #652]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007780:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800778c:	4a9f      	ldr	r2, [pc, #636]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800778e:	430b      	orrs	r3, r1
 8007790:	6593      	str	r3, [r2, #88]	@ 0x58
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d037      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c6:	d00e      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077cc:	d816      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d018      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d111      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077dc:	4a8b      	ldr	r2, [pc, #556]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077e4:	e00f      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	3308      	adds	r3, #8
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f002 f81e 	bl	8009830 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077fa:	e004      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007802:	e000      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800780e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007812:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781c:	4a7b      	ldr	r2, [pc, #492]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800781e:	430b      	orrs	r3, r1
 8007820:	6513      	str	r3, [r2, #80]	@ 0x50
 8007822:	e003      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007842:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d039      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007852:	2b03      	cmp	r3, #3
 8007854:	d81c      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007856:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	08007899 	.word	0x08007899
 8007860:	0800786d 	.word	0x0800786d
 8007864:	0800787b 	.word	0x0800787b
 8007868:	08007899 	.word	0x08007899
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786c:	4b67      	ldr	r3, [pc, #412]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	4a66      	ldr	r2, [pc, #408]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	3308      	adds	r3, #8
 8007880:	2102      	movs	r1, #2
 8007882:	4618      	mov	r0, r3
 8007884:	f001 ffd4 	bl	8009830 <RCCEx_PLL2_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800788e:	e004      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078a2:	4b5a      	ldr	r3, [pc, #360]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a6:	f023 0103 	bic.w	r1, r3, #3
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b0:	4a56      	ldr	r2, [pc, #344]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	f000 809f 	beq.w	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078ee:	f7fc fc11 	bl	8004114 <HAL_GetTick>
 80078f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078f6:	e00b      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f8:	f7fc fc0c 	bl	8004114 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b64      	cmp	r3, #100	@ 0x64
 8007906:	d903      	bls.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800790e:	e005      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007910:	4b3f      	ldr	r3, [pc, #252]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0ed      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800791c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007920:	2b00      	cmp	r3, #0
 8007922:	d179      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007924:	4b39      	ldr	r3, [pc, #228]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007926:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007930:	4053      	eors	r3, r2
 8007932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007936:	2b00      	cmp	r3, #0
 8007938:	d015      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800793a:	4b34      	ldr	r3, [pc, #208]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007942:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007946:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794a:	4a30      	ldr	r2, [pc, #192]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800794c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007950:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007952:	4b2e      	ldr	r3, [pc, #184]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	4a2d      	ldr	r2, [pc, #180]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800795c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800795e:	4a2b      	ldr	r2, [pc, #172]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007964:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800796e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007972:	d118      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007974:	f7fc fbce 	bl	8004114 <HAL_GetTick>
 8007978:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800797c:	e00d      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797e:	f7fc fbc9 	bl	8004114 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007988:	1ad2      	subs	r2, r2, r3
 800798a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800798e:	429a      	cmp	r2, r3
 8007990:	d903      	bls.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007998:	e005      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800799a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800799c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0eb      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80079a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d129      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079be:	d10e      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80079c0:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079d0:	091a      	lsrs	r2, r3, #4
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	4a0d      	ldr	r2, [pc, #52]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d8:	430b      	orrs	r3, r1
 80079da:	6113      	str	r3, [r2, #16]
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80079de:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	4a0a      	ldr	r2, [pc, #40]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079e8:	6113      	str	r3, [r2, #16]
 80079ea:	4b08      	ldr	r3, [pc, #32]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079fa:	4a04      	ldr	r2, [pc, #16]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a00:	e00e      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007a0a:	e009      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	58024800 	.word	0x58024800
 8007a14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f002 0301 	and.w	r3, r2, #1
 8007a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a30:	2300      	movs	r3, #0
 8007a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f000 8089 	beq.w	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a48:	2b28      	cmp	r3, #40	@ 0x28
 8007a4a:	d86b      	bhi.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007b2d 	.word	0x08007b2d
 8007a58:	08007b25 	.word	0x08007b25
 8007a5c:	08007b25 	.word	0x08007b25
 8007a60:	08007b25 	.word	0x08007b25
 8007a64:	08007b25 	.word	0x08007b25
 8007a68:	08007b25 	.word	0x08007b25
 8007a6c:	08007b25 	.word	0x08007b25
 8007a70:	08007b25 	.word	0x08007b25
 8007a74:	08007af9 	.word	0x08007af9
 8007a78:	08007b25 	.word	0x08007b25
 8007a7c:	08007b25 	.word	0x08007b25
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b25 	.word	0x08007b25
 8007a88:	08007b25 	.word	0x08007b25
 8007a8c:	08007b25 	.word	0x08007b25
 8007a90:	08007b25 	.word	0x08007b25
 8007a94:	08007b0f 	.word	0x08007b0f
 8007a98:	08007b25 	.word	0x08007b25
 8007a9c:	08007b25 	.word	0x08007b25
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007b25 	.word	0x08007b25
 8007aa8:	08007b25 	.word	0x08007b25
 8007aac:	08007b25 	.word	0x08007b25
 8007ab0:	08007b25 	.word	0x08007b25
 8007ab4:	08007b2d 	.word	0x08007b2d
 8007ab8:	08007b25 	.word	0x08007b25
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007b25 	.word	0x08007b25
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007b25 	.word	0x08007b25
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b25 	.word	0x08007b25
 8007ae8:	08007b25 	.word	0x08007b25
 8007aec:	08007b25 	.word	0x08007b25
 8007af0:	08007b25 	.word	0x08007b25
 8007af4:	08007b2d 	.word	0x08007b2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	3308      	adds	r3, #8
 8007afe:	2101      	movs	r1, #1
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 fe95 	bl	8009830 <RCCEx_PLL2_Config>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b0c:	e00f      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	3328      	adds	r3, #40	@ 0x28
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 ff3c 	bl	8009994 <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b22:	e004      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b2a:	e000      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b36:	4bbf      	ldr	r3, [pc, #764]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b44:	4abb      	ldr	r2, [pc, #748]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f002 0302 	and.w	r3, r2, #2
 8007b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d041      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d824      	bhi.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007bd1 	.word	0x08007bd1
 8007b88:	08007b9d 	.word	0x08007b9d
 8007b8c:	08007bb3 	.word	0x08007bb3
 8007b90:	08007bd1 	.word	0x08007bd1
 8007b94:	08007bd1 	.word	0x08007bd1
 8007b98:	08007bd1 	.word	0x08007bd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fe43 	bl	8009830 <RCCEx_PLL2_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e00f      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	3328      	adds	r3, #40	@ 0x28
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 feea 	bl	8009994 <RCCEx_PLL3_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bc6:	e004      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bce:	e000      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bda:	4b96      	ldr	r3, [pc, #600]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	f023 0107 	bic.w	r1, r3, #7
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007be8:	4a92      	ldr	r2, [pc, #584]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bee:	e003      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 0304 	and.w	r3, r2, #4
 8007c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	d044      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d825      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007c24:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c79 	.word	0x08007c79
 8007c30:	08007c45 	.word	0x08007c45
 8007c34:	08007c5b 	.word	0x08007c5b
 8007c38:	08007c79 	.word	0x08007c79
 8007c3c:	08007c79 	.word	0x08007c79
 8007c40:	08007c79 	.word	0x08007c79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 fdef 	bl	8009830 <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c58:	e00f      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3328      	adds	r3, #40	@ 0x28
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fe96 	bl	8009994 <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e004      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c76:	e000      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c82:	4b6c      	ldr	r3, [pc, #432]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c86:	f023 0107 	bic.w	r1, r3, #7
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c92:	4a68      	ldr	r2, [pc, #416]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c98:	e003      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f002 0320 	and.w	r3, r2, #32
 8007cae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	d055      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cce:	d033      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cd4:	d82c      	bhi.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cda:	d02f      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce0:	d826      	bhi.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ce2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ce6:	d02b      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cec:	d820      	bhi.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf2:	d012      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf8:	d81a      	bhi.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d022      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d02:	d115      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	3308      	adds	r3, #8
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 fd8f 	bl	8009830 <RCCEx_PLL2_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d18:	e015      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3328      	adds	r3, #40	@ 0x28
 8007d20:	2102      	movs	r1, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fe36 	bl	8009994 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d2e:	e00a      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d36:	e006      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d38:	bf00      	nop
 8007d3a:	e004      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d3c:	bf00      	nop
 8007d3e:	e002      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d4e:	4b39      	ldr	r3, [pc, #228]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5e:	4a35      	ldr	r2, [pc, #212]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d64:	e003      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	d058      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d9a:	d033      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007da0:	d82c      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da6:	d02f      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dac:	d826      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007db2:	d02b      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007db4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007db8:	d820      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dbe:	d012      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dc4:	d81a      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d022      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dce:	d115      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fd29 	bl	8009830 <RCCEx_PLL2_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007de4:	e015      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	3328      	adds	r3, #40	@ 0x28
 8007dec:	2102      	movs	r1, #2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fdd0 	bl	8009994 <RCCEx_PLL3_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007dfa:	e00a      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e02:	e006      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e04:	bf00      	nop
 8007e06:	e004      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10e      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e1a:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e2a:	4a02      	ldr	r2, [pc, #8]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e30:	e006      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007e32:	bf00      	nop
 8007e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	d055      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e6c:	d033      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007e6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e72:	d82c      	bhi.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e78:	d02f      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e7e:	d826      	bhi.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e84:	d02b      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007e86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e8a:	d820      	bhi.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e90:	d012      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e96:	d81a      	bhi.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d022      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea0:	d115      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 fcc0 	bl	8009830 <RCCEx_PLL2_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007eb6:	e015      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebc:	3328      	adds	r3, #40	@ 0x28
 8007ebe:	2102      	movs	r1, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fd67 	bl	8009994 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ecc:	e00a      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed4:	e006      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ed6:	bf00      	nop
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007eec:	4ba1      	ldr	r3, [pc, #644]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007efc:	4a9d      	ldr	r2, [pc, #628]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f002 0308 	and.w	r3, r2, #8
 8007f18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f26:	460b      	mov	r3, r1
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d01e      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f38:	d10c      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	3328      	adds	r3, #40	@ 0x28
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fd26 	bl	8009994 <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f54:	4b87      	ldr	r3, [pc, #540]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f64:	4a83      	ldr	r2, [pc, #524]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f002 0310 	and.w	r3, r2, #16
 8007f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d01e      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	d10c      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9c:	3328      	adds	r3, #40	@ 0x28
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fcf7 	bl	8009994 <RCCEx_PLL3_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fb2:	4b70      	ldr	r3, [pc, #448]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fde:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	d03e      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff4:	d022      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ffa:	d81b      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008004:	d00b      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008006:	e015      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	3308      	adds	r3, #8
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fc0d 	bl	8009830 <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800801c:	e00f      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	3328      	adds	r3, #40	@ 0x28
 8008024:	2102      	movs	r1, #2
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fcb4 	bl	8009994 <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008046:	4b4b      	ldr	r3, [pc, #300]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008056:	4a47      	ldr	r2, [pc, #284]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008058:	430b      	orrs	r3, r1
 800805a:	6593      	str	r3, [r2, #88]	@ 0x58
 800805c:	e003      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008074:	2300      	movs	r3, #0
 8008076:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008078:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d03b      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800808e:	d01f      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008090:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008094:	d818      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800809a:	d003      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800809c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080a0:	d007      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80080a2:	e011      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a4:	4b33      	ldr	r3, [pc, #204]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	4a32      	ldr	r2, [pc, #200]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080b0:	e00f      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	3328      	adds	r3, #40	@ 0x28
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fc6a 	bl	8009994 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80080c6:	e004      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80080d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080da:	4b26      	ldr	r3, [pc, #152]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	4a22      	ldr	r2, [pc, #136]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80080f0:	e003      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008106:	673b      	str	r3, [r7, #112]	@ 0x70
 8008108:	2300      	movs	r3, #0
 800810a:	677b      	str	r3, [r7, #116]	@ 0x74
 800810c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d034      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008124:	d007      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008126:	e011      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008128:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008134:	e00e      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813a:	3308      	adds	r3, #8
 800813c:	2102      	movs	r1, #2
 800813e:	4618      	mov	r0, r3
 8008140:	f001 fb76 	bl	8009830 <RCCEx_PLL2_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800814a:	e003      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10d      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800815c:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008160:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800816a:	4a02      	ldr	r2, [pc, #8]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800816c:	430b      	orrs	r3, r1
 800816e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008170:	e006      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800818c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800818e:	2300      	movs	r3, #0
 8008190:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008192:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008196:	460b      	mov	r3, r1
 8008198:	4313      	orrs	r3, r2
 800819a:	d00c      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	3328      	adds	r3, #40	@ 0x28
 80081a2:	2102      	movs	r1, #2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 fbf5 	bl	8009994 <RCCEx_PLL3_Config>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80081c4:	2300      	movs	r3, #0
 80081c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80081c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d038      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081de:	d018      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80081e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e4:	d811      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ea:	d014      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80081ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f0:	d80b      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d011      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80081f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081fa:	d106      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fc:	4bc3      	ldr	r3, [pc, #780]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	4ac2      	ldr	r2, [pc, #776]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008208:	e008      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008210:	e004      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008212:	bf00      	nop
 8008214:	e002      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008216:	bf00      	nop
 8008218:	e000      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800821a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008224:	4bb9      	ldr	r3, [pc, #740]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008228:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008234:	4ab5      	ldr	r2, [pc, #724]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008236:	430b      	orrs	r3, r1
 8008238:	6553      	str	r3, [r2, #84]	@ 0x54
 800823a:	e003      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008252:	2300      	movs	r3, #0
 8008254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008256:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800825a:	460b      	mov	r3, r1
 800825c:	4313      	orrs	r3, r2
 800825e:	d009      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008260:	4baa      	ldr	r3, [pc, #680]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008264:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826e:	4aa7      	ldr	r2, [pc, #668]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008280:	653b      	str	r3, [r7, #80]	@ 0x50
 8008282:	2300      	movs	r3, #0
 8008284:	657b      	str	r3, [r7, #84]	@ 0x54
 8008286:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d00a      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008290:	4b9e      	ldr	r3, [pc, #632]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082a0:	4a9a      	ldr	r2, [pc, #616]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082b4:	2300      	movs	r3, #0
 80082b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d009      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082c2:	4b92      	ldr	r3, [pc, #584]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	4a8e      	ldr	r2, [pc, #568]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d2:	430b      	orrs	r3, r1
 80082d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80082e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e4:	2300      	movs	r3, #0
 80082e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80082e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80082ec:	460b      	mov	r3, r1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082f2:	4b86      	ldr	r3, [pc, #536]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	4a85      	ldr	r2, [pc, #532]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082fc:	6113      	str	r3, [r2, #16]
 80082fe:	4b83      	ldr	r3, [pc, #524]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008300:	6919      	ldr	r1, [r3, #16]
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800830a:	4a80      	ldr	r2, [pc, #512]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800830c:	430b      	orrs	r3, r1
 800830e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800831c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008322:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d009      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800832c:	4b77      	ldr	r3, [pc, #476]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800832e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008330:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833a:	4a74      	ldr	r2, [pc, #464]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800833c:	430b      	orrs	r3, r1
 800833e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800834c:	633b      	str	r3, [r7, #48]	@ 0x30
 800834e:	2300      	movs	r3, #0
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
 8008352:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008356:	460b      	mov	r3, r1
 8008358:	4313      	orrs	r3, r2
 800835a:	d00a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800835c:	4b6b      	ldr	r3, [pc, #428]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800835e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008360:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800836c:	4a67      	ldr	r2, [pc, #412]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800836e:	430b      	orrs	r3, r1
 8008370:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	2100      	movs	r1, #0
 800837c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008384:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008388:	460b      	mov	r3, r1
 800838a:	4313      	orrs	r3, r2
 800838c:	d011      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008392:	3308      	adds	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fa4a 	bl	8009830 <RCCEx_PLL2_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	2100      	movs	r1, #0
 80083bc:	6239      	str	r1, [r7, #32]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083c8:	460b      	mov	r3, r1
 80083ca:	4313      	orrs	r3, r2
 80083cc:	d011      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	3308      	adds	r3, #8
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 fa2a 	bl	8009830 <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	2100      	movs	r1, #0
 80083fc:	61b9      	str	r1, [r7, #24]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008408:	460b      	mov	r3, r1
 800840a:	4313      	orrs	r3, r2
 800840c:	d011      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008412:	3308      	adds	r3, #8
 8008414:	2102      	movs	r1, #2
 8008416:	4618      	mov	r0, r3
 8008418:	f001 fa0a 	bl	8009830 <RCCEx_PLL2_Config>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	2100      	movs	r1, #0
 800843c:	6139      	str	r1, [r7, #16]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008448:	460b      	mov	r3, r1
 800844a:	4313      	orrs	r3, r2
 800844c:	d011      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008452:	3328      	adds	r3, #40	@ 0x28
 8008454:	2100      	movs	r1, #0
 8008456:	4618      	mov	r0, r3
 8008458:	f001 fa9c 	bl	8009994 <RCCEx_PLL3_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	2100      	movs	r1, #0
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	f003 0310 	and.w	r3, r3, #16
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008488:	460b      	mov	r3, r1
 800848a:	4313      	orrs	r3, r2
 800848c:	d011      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	3328      	adds	r3, #40	@ 0x28
 8008494:	2101      	movs	r1, #1
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fa7c 	bl	8009994 <RCCEx_PLL3_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	2100      	movs	r1, #0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084c8:	460b      	mov	r3, r1
 80084ca:	4313      	orrs	r3, r2
 80084cc:	d011      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d2:	3328      	adds	r3, #40	@ 0x28
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fa5c 	bl	8009994 <RCCEx_PLL3_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80084f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008506:	46bd      	mov	sp, r7
 8008508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800850c:	58024400 	.word	0x58024400

08008510 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b090      	sub	sp, #64	@ 0x40
 8008514:	af00      	add	r7, sp, #0
 8008516:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800851a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008522:	430b      	orrs	r3, r1
 8008524:	f040 8094 	bne.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008528:	4b9e      	ldr	r3, [pc, #632]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800852a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	2b04      	cmp	r3, #4
 8008536:	f200 8087 	bhi.w	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800853a:	a201      	add	r2, pc, #4	@ (adr r2, 8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008555 	.word	0x08008555
 8008544:	0800857d 	.word	0x0800857d
 8008548:	080085a5 	.word	0x080085a5
 800854c:	08008641 	.word	0x08008641
 8008550:	080085cd 	.word	0x080085cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008554:	4b93      	ldr	r3, [pc, #588]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800855c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008560:	d108      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008566:	4618      	mov	r0, r3
 8008568:	f001 f810 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008570:	f000 bd45 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008578:	f000 bd41 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800857c:	4b89      	ldr	r3, [pc, #548]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008588:	d108      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858a:	f107 0318 	add.w	r3, r7, #24
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fd54 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008598:	f000 bd31 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	f000 bd2d 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085a4:	4b7f      	ldr	r3, [pc, #508]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b0:	d108      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fe94 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c0:	f000 bd1d 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c8:	f000 bd19 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085cc:	4b75      	ldr	r3, [pc, #468]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085d6:	4b73      	ldr	r3, [pc, #460]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d10c      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80085e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e8:	4b6e      	ldr	r3, [pc, #440]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a6d      	ldr	r2, [pc, #436]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085fa:	e01f      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085fc:	4b69      	ldr	r3, [pc, #420]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	d106      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008610:	d102      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008612:	4b66      	ldr	r3, [pc, #408]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008616:	e011      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008618:	4b62      	ldr	r3, [pc, #392]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008624:	d106      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862c:	d102      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800862e:	4b60      	ldr	r3, [pc, #384]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008632:	e003      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008638:	f000 bce1 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800863c:	f000 bcdf 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008640:	4b5c      	ldr	r3, [pc, #368]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008644:	f000 bcdb 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864c:	f000 bcd7 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008654:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008658:	430b      	orrs	r3, r1
 800865a:	f040 80ad 	bne.w	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800865e:	4b51      	ldr	r3, [pc, #324]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008662:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008666:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800866e:	d056      	beq.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008676:	f200 8090 	bhi.w	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2bc0      	cmp	r3, #192	@ 0xc0
 800867e:	f000 8088 	beq.w	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2bc0      	cmp	r3, #192	@ 0xc0
 8008686:	f200 8088 	bhi.w	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	2b80      	cmp	r3, #128	@ 0x80
 800868e:	d032      	beq.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	2b80      	cmp	r3, #128	@ 0x80
 8008694:	f200 8081 	bhi.w	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d014      	beq.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80086a4:	e079      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a6:	4b3f      	ldr	r3, [pc, #252]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b2:	d108      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 ff67 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c2:	f000 bc9c 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ca:	f000 bc98 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ce:	4b35      	ldr	r3, [pc, #212]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086da:	d108      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086dc:	f107 0318 	add.w	r3, r7, #24
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fcab 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ea:	f000 bc88 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f2:	f000 bc84 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f6:	4b2b      	ldr	r3, [pc, #172]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008702:	d108      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008704:	f107 030c 	add.w	r3, r7, #12
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fdeb 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008712:	f000 bc74 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871a:	f000 bc70 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800871e:	4b21      	ldr	r3, [pc, #132]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008722:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008728:	4b1e      	ldr	r3, [pc, #120]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b04      	cmp	r3, #4
 8008732:	d10c      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800873a:	4b1a      	ldr	r3, [pc, #104]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a18      	ldr	r2, [pc, #96]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874c:	e01f      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800874e:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875a:	d106      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800875c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008762:	d102      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008764:	4b11      	ldr	r3, [pc, #68]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008768:	e011      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800876a:	4b0e      	ldr	r3, [pc, #56]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008776:	d106      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800877e:	d102      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008780:	4b0b      	ldr	r3, [pc, #44]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008784:	e003      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800878a:	f000 bc38 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800878e:	f000 bc36 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008792:	4b08      	ldr	r3, [pc, #32]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008796:	f000 bc32 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879e:	f000 bc2e 	b.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
 80087a8:	03d09000 	.word	0x03d09000
 80087ac:	003d0900 	.word	0x003d0900
 80087b0:	017d7840 	.word	0x017d7840
 80087b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80087c0:	430b      	orrs	r3, r1
 80087c2:	f040 809c 	bne.w	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80087c6:	4b9e      	ldr	r3, [pc, #632]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80087ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087d6:	d054      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087de:	f200 808b 	bhi.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087e8:	f000 8083 	beq.w	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80087f2:	f200 8081 	bhi.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087fc:	d02f      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008804:	d878      	bhi.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008812:	d012      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008814:	e070      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008816:	4b8a      	ldr	r3, [pc, #552]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008822:	d107      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008828:	4618      	mov	r0, r3
 800882a:	f000 feaf 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008832:	e3e4      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008838:	e3e1      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800883a:	4b81      	ldr	r3, [pc, #516]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008848:	f107 0318 	add.w	r3, r7, #24
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fbf5 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008856:	e3d2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800885c:	e3cf      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885e:	4b78      	ldr	r3, [pc, #480]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fd37 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887a:	e3c0      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008880:	e3bd      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008882:	4b6f      	ldr	r3, [pc, #444]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008886:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800888c:	4b6c      	ldr	r3, [pc, #432]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b04      	cmp	r3, #4
 8008896:	d10c      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889e:	4b68      	ldr	r3, [pc, #416]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	4a66      	ldr	r2, [pc, #408]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b0:	e01e      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088b2:	4b63      	ldr	r3, [pc, #396]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	d106      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088c6:	d102      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088cc:	e010      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ce:	4b5c      	ldr	r3, [pc, #368]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088da:	d106      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80088dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e2:	d102      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088e4:	4b59      	ldr	r3, [pc, #356]	@ (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e8:	e002      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088ee:	e386      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088f0:	e385      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088f2:	4b57      	ldr	r3, [pc, #348]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f6:	e382      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e37f      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80088fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008902:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008906:	430b      	orrs	r3, r1
 8008908:	f040 80a7 	bne.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800890c:	4b4c      	ldr	r3, [pc, #304]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008910:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008914:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800891c:	d055      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008924:	f200 8096 	bhi.w	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800892e:	f000 8084 	beq.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008938:	f200 808c 	bhi.w	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008942:	d030      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800894a:	f200 8083 	bhi.w	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800895a:	d012      	beq.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800895c:	e07a      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800895e:	4b38      	ldr	r3, [pc, #224]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800896a:	d107      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800896c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fe0b 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897a:	e340      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008980:	e33d      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008982:	4b2f      	ldr	r3, [pc, #188]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800898a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800898e:	d107      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008990:	f107 0318 	add.w	r3, r7, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fb51 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800899e:	e32e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a4:	e32b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a6:	4b26      	ldr	r3, [pc, #152]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b2:	d107      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b4:	f107 030c 	add.w	r3, r7, #12
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fc93 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c2:	e31c      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c8:	e319      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d10c      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80089e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e6:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	4a14      	ldr	r2, [pc, #80]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f8:	e01e      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089fa:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a06:	d106      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a0e:	d102      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a10:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a14:	e010      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a16:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a22:	d106      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2a:	d102      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a2c:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a36:	e2e2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a38:	e2e1      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a3a:	4b05      	ldr	r3, [pc, #20]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a3e:	e2de      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a40:	58024400 	.word	0x58024400
 8008a44:	03d09000 	.word	0x03d09000
 8008a48:	003d0900 	.word	0x003d0900
 8008a4c:	017d7840 	.word	0x017d7840
 8008a50:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a58:	e2d1      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a5e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a62:	430b      	orrs	r3, r1
 8008a64:	f040 809c 	bne.w	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a68:	4b93      	ldr	r3, [pc, #588]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a6c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a78:	d054      	beq.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a80:	f200 808b 	bhi.w	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a8a:	f000 8083 	beq.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a94:	f200 8081 	bhi.w	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a9e:	d02f      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	d878      	bhi.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab4:	d012      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008ab6:	e070      	b.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ac4:	d107      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fd5e 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad4:	e293      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	e290      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008adc:	4b76      	ldr	r3, [pc, #472]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ae8:	d107      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aea:	f107 0318 	add.w	r3, r7, #24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 faa4 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af8:	e281      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afe:	e27e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b00:	4b6d      	ldr	r3, [pc, #436]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b0c:	d107      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fbe6 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b1c:	e26f      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b22:	e26c      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b24:	4b64      	ldr	r3, [pc, #400]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b2c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b2e:	4b62      	ldr	r3, [pc, #392]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b40:	4b5d      	ldr	r3, [pc, #372]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	08db      	lsrs	r3, r3, #3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b52:	e01e      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b54:	4b58      	ldr	r3, [pc, #352]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b60:	d106      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b68:	d102      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b6a:	4b55      	ldr	r3, [pc, #340]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b6e:	e010      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b70:	4b51      	ldr	r3, [pc, #324]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b7c:	d106      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b84:	d102      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b86:	4b4f      	ldr	r3, [pc, #316]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b8a:	e002      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b90:	e235      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b92:	e234      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b94:	4b4c      	ldr	r3, [pc, #304]	@ (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b98:	e231      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9e:	e22e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	f040 808f 	bne.w	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008bae:	4b42      	ldr	r3, [pc, #264]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bbe:	d06b      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bc6:	d874      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bce:	d056      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bd6:	d86c      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bde:	d03b      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008be6:	d864      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bee:	d021      	beq.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bf6:	d85c      	bhi.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c04:	d004      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008c06:	e054      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c08:	f7fe fa4c 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 8008c0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c0e:	e1f6      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c10:	4b29      	ldr	r3, [pc, #164]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fa0a 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2c:	e1e7      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c32:	e1e4      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c34:	4b20      	ldr	r3, [pc, #128]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c40:	d107      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fb4c 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c50:	e1d5      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c56:	e1d2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c58:	4b17      	ldr	r3, [pc, #92]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d109      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c64:	4b14      	ldr	r3, [pc, #80]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	08db      	lsrs	r3, r3, #3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c76:	e1c2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7c:	e1bf      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8a:	d102      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e1b5      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e1b2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c98:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca4:	d102      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008ca6:	4b07      	ldr	r3, [pc, #28]	@ (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008caa:	e1a8      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb0:	e1a5      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e1a2      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	03d09000 	.word	0x03d09000
 8008cc0:	003d0900 	.word	0x003d0900
 8008cc4:	017d7840 	.word	0x017d7840
 8008cc8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	d173      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008cd8:	4b9c      	ldr	r3, [pc, #624]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ce0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ce8:	d02f      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf0:	d863      	bhi.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cfe:	d012      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008d00:	e05b      	b.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d02:	4b92      	ldr	r3, [pc, #584]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d10:	f107 0318 	add.w	r3, r7, #24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f991 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1e:	e16e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d24:	e16b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d26:	4b89      	ldr	r3, [pc, #548]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d32:	d107      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fad3 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d42:	e15c      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d48:	e159      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d4a:	4b80      	ldr	r3, [pc, #512]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d54:	4b7d      	ldr	r3, [pc, #500]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d10c      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d66:	4b79      	ldr	r3, [pc, #484]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	08db      	lsrs	r3, r3, #3
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	4a77      	ldr	r2, [pc, #476]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d72:	fa22 f303 	lsr.w	r3, r2, r3
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d78:	e01e      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d7a:	4b74      	ldr	r3, [pc, #464]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d86:	d106      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8e:	d102      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d90:	4b70      	ldr	r3, [pc, #448]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d94:	e010      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d96:	4b6d      	ldr	r3, [pc, #436]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da2:	d106      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008daa:	d102      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dac:	4b6a      	ldr	r3, [pc, #424]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db0:	e002      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008db6:	e122      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008db8:	e121      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbe:	e11e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008dc8:	430b      	orrs	r3, r1
 8008dca:	d133      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d004      	beq.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de2:	d012      	beq.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008de4:	e023      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008de6:	4b59      	ldr	r3, [pc, #356]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008df2:	d107      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fbc7 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e02:	e0fc      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e08:	e0f9      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e0a:	4b50      	ldr	r3, [pc, #320]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e16:	d107      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e18:	f107 0318 	add.w	r3, r7, #24
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f90d 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e26:	e0ea      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2c:	e0e7      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e32:	e0e4      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e38:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	f040 808d 	bne.w	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e42:	4b42      	ldr	r3, [pc, #264]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e52:	d06b      	beq.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e5a:	d874      	bhi.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e62:	d056      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6a:	d86c      	bhi.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e72:	d03b      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e7a:	d864      	bhi.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e82:	d021      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e8a:	d85c      	bhi.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e98:	d004      	beq.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e9a:	e054      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e9c:	f000 f8b8 	bl	8009010 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ea0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ea2:	e0ac      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea4:	4b29      	ldr	r3, [pc, #164]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb2:	f107 0318 	add.w	r3, r7, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f8c0 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec0:	e09d      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec6:	e09a      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec8:	4b20      	ldr	r3, [pc, #128]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed4:	d107      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fa02 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee4:	e08b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eea:	e088      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eec:	4b17      	ldr	r3, [pc, #92]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d109      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef8:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	4a13      	ldr	r2, [pc, #76]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
 8008f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f0a:	e078      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f10:	e075      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f12:	4b0e      	ldr	r3, [pc, #56]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1e:	d102      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008f20:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f24:	e06b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2a:	e068      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f2c:	4b07      	ldr	r3, [pc, #28]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f38:	d102      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008f3a:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3e:	e05e      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f44:	e05b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4a:	e058      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
 8008f58:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f60:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f64:	430b      	orrs	r3, r1
 8008f66:	d148      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f68:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f78:	d02a      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f80:	d838      	bhi.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f8e:	d00d      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f90:	e030      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f92:	4b1d      	ldr	r3, [pc, #116]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f9e:	d102      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800900c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa4:	e02b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008faa:	e028      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fac:	4b16      	ldr	r3, [pc, #88]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fae4 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc8:	e019      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fce:	e016      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fdc:	d107      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f82a 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fec:	e007      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e004      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	e001      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009000:	4618      	mov	r0, r3
 8009002:	3740      	adds	r7, #64	@ 0x40
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	58024400 	.word	0x58024400
 800900c:	017d7840 	.word	0x017d7840

08009010 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009014:	f7fe f816 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8009018:	4602      	mov	r2, r0
 800901a:	4b06      	ldr	r3, [pc, #24]	@ (8009034 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	091b      	lsrs	r3, r3, #4
 8009020:	f003 0307 	and.w	r3, r3, #7
 8009024:	4904      	ldr	r1, [pc, #16]	@ (8009038 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009026:	5ccb      	ldrb	r3, [r1, r3]
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009030:	4618      	mov	r0, r3
 8009032:	bd80      	pop	{r7, pc}
 8009034:	58024400 	.word	0x58024400
 8009038:	08011a0c 	.word	0x08011a0c

0800903c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	@ 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009044:	4ba1      	ldr	r3, [pc, #644]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800904e:	4b9f      	ldr	r3, [pc, #636]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009052:	0b1b      	lsrs	r3, r3, #12
 8009054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009058:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800905a:	4b9c      	ldr	r3, [pc, #624]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	091b      	lsrs	r3, r3, #4
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009066:	4b99      	ldr	r3, [pc, #612]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906a:	08db      	lsrs	r3, r3, #3
 800906c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8111 	beq.w	80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b02      	cmp	r3, #2
 800908e:	f000 8083 	beq.w	8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f200 80a1 	bhi.w	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d056      	beq.n	8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090a6:	e099      	b.n	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a8:	4b88      	ldr	r3, [pc, #544]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d02d      	beq.n	8009110 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b4:	4b85      	ldr	r3, [pc, #532]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a84      	ldr	r2, [pc, #528]	@ (80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090de:	4b7b      	ldr	r3, [pc, #492]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800910e:	e087      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800911e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009122:	4b6a      	ldr	r3, [pc, #424]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009132:	ed97 6a03 	vldr	s12, [r7, #12]
 8009136:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800913a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009152:	e065      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b59      	ldr	r3, [pc, #356]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009176:	ed97 6a03 	vldr	s12, [r7, #12]
 800917a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009196:	e043      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b48      	ldr	r3, [pc, #288]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80091be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091da:	e021      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ee:	4b37      	ldr	r3, [pc, #220]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009202:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009220:	4b2a      	ldr	r3, [pc, #168]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009224:	0a5b      	lsrs	r3, r3, #9
 8009226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800923a:	edd7 6a07 	vldr	s13, [r7, #28]
 800923e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009246:	ee17 2a90 	vmov	r2, s15
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800924e:	4b1f      	ldr	r3, [pc, #124]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009268:	edd7 6a07 	vldr	s13, [r7, #28]
 800926c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009274:	ee17 2a90 	vmov	r2, s15
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800927c:	4b13      	ldr	r3, [pc, #76]	@ (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	0e1b      	lsrs	r3, r3, #24
 8009282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009296:	edd7 6a07 	vldr	s13, [r7, #28]
 800929a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a2:	ee17 2a90 	vmov	r2, s15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092aa:	e008      	b.n	80092be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	609a      	str	r2, [r3, #8]
}
 80092be:	bf00      	nop
 80092c0:	3724      	adds	r7, #36	@ 0x24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
 80092d0:	03d09000 	.word	0x03d09000
 80092d4:	46000000 	.word	0x46000000
 80092d8:	4c742400 	.word	0x4c742400
 80092dc:	4a742400 	.word	0x4a742400
 80092e0:	4bbebc20 	.word	0x4bbebc20

080092e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b089      	sub	sp, #36	@ 0x24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092ec:	4ba1      	ldr	r3, [pc, #644]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	f003 0303 	and.w	r3, r3, #3
 80092f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092f6:	4b9f      	ldr	r3, [pc, #636]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	0d1b      	lsrs	r3, r3, #20
 80092fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009300:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009302:	4b9c      	ldr	r3, [pc, #624]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009306:	0a1b      	lsrs	r3, r3, #8
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800930e:	4b99      	ldr	r3, [pc, #612]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009312:	08db      	lsrs	r3, r3, #3
 8009314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	fb02 f303 	mul.w	r3, r2, r3
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8111 	beq.w	8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f000 8083 	beq.w	8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b02      	cmp	r3, #2
 800933e:	f200 80a1 	bhi.w	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d056      	beq.n	80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800934e:	e099      	b.n	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009350:	4b88      	ldr	r3, [pc, #544]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d02d      	beq.n	80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800935c:	4b85      	ldr	r3, [pc, #532]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a84      	ldr	r2, [pc, #528]	@ (8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009386:	4b7b      	ldr	r3, [pc, #492]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009396:	ed97 6a03 	vldr	s12, [r7, #12]
 800939a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093b6:	e087      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a03 	vldr	s12, [r7, #12]
 80093de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fa:	e065      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b59      	ldr	r3, [pc, #356]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009422:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943e:	e043      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b48      	ldr	r3, [pc, #288]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a03 	vldr	s12, [r7, #12]
 8009466:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009482:	e021      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b37      	ldr	r3, [pc, #220]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094cc:	0a5b      	lsrs	r3, r3, #9
 80094ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fa:	0c1b      	lsrs	r3, r3, #16
 80094fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800950c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009510:	edd7 6a07 	vldr	s13, [r7, #28]
 8009514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951c:	ee17 2a90 	vmov	r2, s15
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009524:	4b13      	ldr	r3, [pc, #76]	@ (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009528:	0e1b      	lsrs	r3, r3, #24
 800952a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954a:	ee17 2a90 	vmov	r2, s15
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009552:	e008      	b.n	8009566 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
}
 8009566:	bf00      	nop
 8009568:	3724      	adds	r7, #36	@ 0x24
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	58024400 	.word	0x58024400
 8009578:	03d09000 	.word	0x03d09000
 800957c:	46000000 	.word	0x46000000
 8009580:	4c742400 	.word	0x4c742400
 8009584:	4a742400 	.word	0x4a742400
 8009588:	4bbebc20 	.word	0x4bbebc20

0800958c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800958c:	b480      	push	{r7}
 800958e:	b089      	sub	sp, #36	@ 0x24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009594:	4ba0      	ldr	r3, [pc, #640]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800959e:	4b9e      	ldr	r3, [pc, #632]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a2:	091b      	lsrs	r3, r3, #4
 80095a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095aa:	4b9b      	ldr	r3, [pc, #620]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80095b4:	4b98      	ldr	r3, [pc, #608]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b8:	08db      	lsrs	r3, r3, #3
 80095ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8111 	beq.w	80097fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	f000 8083 	beq.w	80096e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	f200 80a1 	bhi.w	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d056      	beq.n	80096a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095f4:	e099      	b.n	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f6:	4b88      	ldr	r3, [pc, #544]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d02d      	beq.n	800965e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009602:	4b85      	ldr	r3, [pc, #532]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	08db      	lsrs	r3, r3, #3
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	4a83      	ldr	r2, [pc, #524]	@ (800981c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800960e:	fa22 f303 	lsr.w	r3, r2, r3
 8009612:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962c:	4b7a      	ldr	r3, [pc, #488]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009640:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009658:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800965c:	e087      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009668:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800966c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009670:	4b69      	ldr	r3, [pc, #420]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009680:	ed97 6a03 	vldr	s12, [r7, #12]
 8009684:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a0:	e065      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009828 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b4:	4b58      	ldr	r3, [pc, #352]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e4:	e043      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f8:	4b47      	ldr	r3, [pc, #284]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	ed97 6a03 	vldr	s12, [r7, #12]
 800970c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800971c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009728:	e021      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973c:	4b36      	ldr	r3, [pc, #216]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009750:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800976c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800976e:	4b2a      	ldr	r3, [pc, #168]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009772:	0a5b      	lsrs	r3, r3, #9
 8009774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009788:	edd7 6a07 	vldr	s13, [r7, #28]
 800978c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009794:	ee17 2a90 	vmov	r2, s15
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800979c:	4b1e      	ldr	r3, [pc, #120]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a0:	0c1b      	lsrs	r3, r3, #16
 80097a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c2:	ee17 2a90 	vmov	r2, s15
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ce:	0e1b      	lsrs	r3, r3, #24
 80097d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f0:	ee17 2a90 	vmov	r2, s15
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097f8:	e008      	b.n	800980c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	609a      	str	r2, [r3, #8]
}
 800980c:	bf00      	nop
 800980e:	3724      	adds	r7, #36	@ 0x24
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	58024400 	.word	0x58024400
 800981c:	03d09000 	.word	0x03d09000
 8009820:	46000000 	.word	0x46000000
 8009824:	4c742400 	.word	0x4c742400
 8009828:	4a742400 	.word	0x4a742400
 800982c:	4bbebc20 	.word	0x4bbebc20

08009830 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983e:	4b53      	ldr	r3, [pc, #332]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b03      	cmp	r3, #3
 8009848:	d101      	bne.n	800984e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e099      	b.n	8009982 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984e:	4b4f      	ldr	r3, [pc, #316]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a4e      	ldr	r2, [pc, #312]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009854:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800985a:	f7fa fc5b 	bl	8004114 <HAL_GetTick>
 800985e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009860:	e008      	b.n	8009874 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009862:	f7fa fc57 	bl	8004114 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d901      	bls.n	8009874 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e086      	b.n	8009982 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009874:	4b45      	ldr	r3, [pc, #276]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f0      	bne.n	8009862 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009880:	4b42      	ldr	r3, [pc, #264]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009884:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	031b      	lsls	r3, r3, #12
 800988e:	493f      	ldr	r1, [pc, #252]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	628b      	str	r3, [r1, #40]	@ 0x28
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	3b01      	subs	r3, #1
 800989a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	025b      	lsls	r3, r3, #9
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	041b      	lsls	r3, r3, #16
 80098b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	3b01      	subs	r3, #1
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c4:	4931      	ldr	r1, [pc, #196]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098ca:	4b30      	ldr	r3, [pc, #192]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	492d      	ldr	r1, [pc, #180]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098dc:	4b2b      	ldr	r3, [pc, #172]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	f023 0220 	bic.w	r2, r3, #32
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	4928      	ldr	r1, [pc, #160]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ee:	4b27      	ldr	r3, [pc, #156]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f2:	4a26      	ldr	r2, [pc, #152]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	f023 0310 	bic.w	r3, r3, #16
 80098f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098fa:	4b24      	ldr	r3, [pc, #144]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 80098fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fe:	4b24      	ldr	r3, [pc, #144]	@ (8009990 <RCCEx_PLL2_Config+0x160>)
 8009900:	4013      	ands	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	69d2      	ldr	r2, [r2, #28]
 8009906:	00d2      	lsls	r2, r2, #3
 8009908:	4920      	ldr	r1, [pc, #128]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 800990a:	4313      	orrs	r3, r2
 800990c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800990e:	4b1f      	ldr	r3, [pc, #124]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	4a1e      	ldr	r2, [pc, #120]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009914:	f043 0310 	orr.w	r3, r3, #16
 8009918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009920:	4b1a      	ldr	r3, [pc, #104]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009924:	4a19      	ldr	r2, [pc, #100]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009926:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800992a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800992c:	e00f      	b.n	800994e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d106      	bne.n	8009942 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009934:	4b15      	ldr	r3, [pc, #84]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	4a14      	ldr	r2, [pc, #80]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 800993a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009940:	e005      	b.n	800994e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009942:	4b12      	ldr	r3, [pc, #72]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	4a11      	ldr	r2, [pc, #68]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009948:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800994c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800994e:	4b0f      	ldr	r3, [pc, #60]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a0e      	ldr	r2, [pc, #56]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009954:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800995a:	f7fa fbdb 	bl	8004114 <HAL_GetTick>
 800995e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009960:	e008      	b.n	8009974 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009962:	f7fa fbd7 	bl	8004114 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e006      	b.n	8009982 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009974:	4b05      	ldr	r3, [pc, #20]	@ (800998c <RCCEx_PLL2_Config+0x15c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
 8009990:	ffff0007 	.word	0xffff0007

08009994 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099a2:	4b53      	ldr	r3, [pc, #332]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d101      	bne.n	80099b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e099      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099b2:	4b4f      	ldr	r3, [pc, #316]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a4e      	ldr	r2, [pc, #312]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099be:	f7fa fba9 	bl	8004114 <HAL_GetTick>
 80099c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c4:	e008      	b.n	80099d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099c6:	f7fa fba5 	bl	8004114 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d901      	bls.n	80099d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e086      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d8:	4b45      	ldr	r3, [pc, #276]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1f0      	bne.n	80099c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e4:	4b42      	ldr	r3, [pc, #264]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	051b      	lsls	r3, r3, #20
 80099f2:	493f      	ldr	r1, [pc, #252]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	025b      	lsls	r3, r3, #9
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a28:	4931      	ldr	r1, [pc, #196]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2e:	4b30      	ldr	r3, [pc, #192]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	492d      	ldr	r1, [pc, #180]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a40:	4b2b      	ldr	r3, [pc, #172]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	4928      	ldr	r1, [pc, #160]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a52:	4b27      	ldr	r3, [pc, #156]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a56:	4a26      	ldr	r2, [pc, #152]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a5e:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a62:	4b24      	ldr	r3, [pc, #144]	@ (8009af4 <RCCEx_PLL3_Config+0x160>)
 8009a64:	4013      	ands	r3, r2
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	69d2      	ldr	r2, [r2, #28]
 8009a6a:	00d2      	lsls	r2, r2, #3
 8009a6c:	4920      	ldr	r1, [pc, #128]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a72:	4b1f      	ldr	r3, [pc, #124]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a76:	4a1e      	ldr	r2, [pc, #120]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a84:	4b1a      	ldr	r3, [pc, #104]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a88:	4a19      	ldr	r2, [pc, #100]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a90:	e00f      	b.n	8009ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a98:	4b15      	ldr	r3, [pc, #84]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9c:	4a14      	ldr	r2, [pc, #80]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009aa4:	e005      	b.n	8009ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aa6:	4b12      	ldr	r3, [pc, #72]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aaa:	4a11      	ldr	r2, [pc, #68]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009abe:	f7fa fb29 	bl	8004114 <HAL_GetTick>
 8009ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac4:	e008      	b.n	8009ad8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac6:	f7fa fb25 	bl	8004114 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e006      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad8:	4b05      	ldr	r3, [pc, #20]	@ (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	58024400 	.word	0x58024400
 8009af4:	ffff0007 	.word	0xffff0007

08009af8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	@ 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e075      	b.n	8009bf6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7f9 fc21 	bl	8003364 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2204      	movs	r2, #4
 8009b26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f868 	bl	8009c00 <HAL_SD_InitCard>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e05d      	b.n	8009bf6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fdaf 	bl	800a6a4 <HAL_SD_GetCardStatus>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e052      	b.n	8009bf6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009b50:	7e3b      	ldrb	r3, [r7, #24]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009b56:	7e7b      	ldrb	r3, [r7, #25]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d10a      	bne.n	8009b7a <HAL_SD_Init+0x82>
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <HAL_SD_Init+0x78>
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b76:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b78:	e00b      	b.n	8009b92 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d104      	bne.n	8009b8c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b88:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b8a:	e002      	b.n	8009b92 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fe6d 	bl	800a878 <HAL_SD_ConfigWideBusOperation>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e026      	b.n	8009bf6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009ba8:	f7fa fab4 	bl	8004114 <HAL_GetTick>
 8009bac:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009bae:	e011      	b.n	8009bd4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bb0:	f7fa fab0 	bl	8004114 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d109      	bne.n	8009bd4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bc6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e010      	b.n	8009bf6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 ff61 	bl	800aa9c <HAL_SD_GetCardState>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d1e7      	bne.n	8009bb0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3728      	adds	r7, #40	@ 0x28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b08d      	sub	sp, #52	@ 0x34
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009c18:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009c1c:	f04f 0100 	mov.w	r1, #0
 8009c20:	f7fe fc76 	bl	8008510 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c24:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009c3a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e070      	b.n	8009d22 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	0a1b      	lsrs	r3, r3, #8
 8009c44:	4a39      	ldr	r2, [pc, #228]	@ (8009d2c <HAL_SD_InitCard+0x12c>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	091b      	lsrs	r3, r3, #4
 8009c4c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681c      	ldr	r4, [r3, #0]
 8009c52:	466a      	mov	r2, sp
 8009c54:	f107 0318 	add.w	r3, r7, #24
 8009c58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c60:	f107 030c 	add.w	r3, r7, #12
 8009c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c66:	4620      	mov	r0, r4
 8009c68:	f003 f916 	bl	800ce98 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f003 f959 	bl	800cf28 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c86:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009c8e:	4a28      	ldr	r2, [pc, #160]	@ (8009d30 <HAL_SD_InitCard+0x130>)
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c96:	3301      	adds	r3, #1
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fa fa47 	bl	800412c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 ffea 	bl	800ac78 <SD_PowerON>
 8009ca4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e02e      	b.n	8009d22 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff09 	bl	800aadc <SD_InitCard>
 8009cca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e01b      	b.n	8009d22 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f003 f9ae 	bl	800d054 <SDMMC_CmdBlockLength>
 8009cf8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00f      	beq.n	8009d20 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a0b      	ldr	r2, [pc, #44]	@ (8009d34 <HAL_SD_InitCard+0x134>)
 8009d06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	372c      	adds	r7, #44	@ 0x2c
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd90      	pop	{r4, r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	014f8b59 	.word	0x014f8b59
 8009d30:	00012110 	.word	0x00012110
 8009d34:	1fe00fff 	.word	0x1fe00fff

08009d38 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08c      	sub	sp, #48	@ 0x30
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e08d      	b.n	8009e7c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	f040 8086 	bne.w	8009e7a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	441a      	add	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d907      	bls.n	8009d92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e074      	b.n	8009e7c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2203      	movs	r2, #3
 8009d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	025a      	lsls	r2, r3, #9
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d002      	beq.n	8009dbe <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dba:	025b      	lsls	r3, r3, #9
 8009dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	025b      	lsls	r3, r3, #9
 8009dc8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009dca:	2390      	movs	r3, #144	@ 0x90
 8009dcc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f107 0210 	add.w	r2, r7, #16
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f003 f909 	bl	800cffc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009df8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2201      	movs	r2, #1
 8009e08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d90a      	bls.n	8009e26 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2282      	movs	r2, #130	@ 0x82
 8009e14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f003 f95f 	bl	800d0e0 <SDMMC_CmdReadMultiBlock>
 8009e22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009e24:	e009      	b.n	8009e3a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2281      	movs	r2, #129	@ 0x81
 8009e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e32:	4618      	mov	r0, r3
 8009e34:	f003 f931 	bl	800d09a <SDMMC_CmdReadSingleBlock>
 8009e38:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d012      	beq.n	8009e66 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a0f      	ldr	r2, [pc, #60]	@ (8009e84 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009e46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e00a      	b.n	8009e7c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009e74:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e000      	b.n	8009e7c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009e7a:	2302      	movs	r3, #2
  }
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3730      	adds	r7, #48	@ 0x30
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	1fe00fff 	.word	0x1fe00fff

08009e88 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08c      	sub	sp, #48	@ 0x30
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d107      	bne.n	8009eb0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e08d      	b.n	8009fcc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	f040 8086 	bne.w	8009fca <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	441a      	add	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d907      	bls.n	8009ee2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e074      	b.n	8009fcc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2203      	movs	r2, #3
 8009ee6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	025a      	lsls	r2, r3, #9
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d002      	beq.n	8009f0e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0a:	025b      	lsls	r3, r3, #9
 8009f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	025b      	lsls	r3, r3, #9
 8009f18:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f1a:	2390      	movs	r3, #144	@ 0x90
 8009f1c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f107 0210 	add.w	r2, r7, #16
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f003 f861 	bl	800cffc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f48:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2201      	movs	r2, #1
 8009f58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d90a      	bls.n	8009f76 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	22a0      	movs	r2, #160	@ 0xa0
 8009f64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f003 f8fd 	bl	800d16c <SDMMC_CmdWriteMultiBlock>
 8009f72:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f74:	e009      	b.n	8009f8a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2290      	movs	r2, #144	@ 0x90
 8009f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f82:	4618      	mov	r0, r3
 8009f84:	f003 f8cf 	bl	800d126 <SDMMC_CmdWriteSingleBlock>
 8009f88:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0f      	ldr	r2, [pc, #60]	@ (8009fd4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009f96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e00a      	b.n	8009fcc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8009fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e000      	b.n	8009fcc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009fca:	2302      	movs	r3, #2
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3730      	adds	r7, #48	@ 0x30
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	1fe00fff 	.word	0x1fe00fff

08009fd8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <HAL_SD_IRQHandler+0x2e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0308 	and.w	r3, r3, #8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 f926 	bl	800b250 <SD_Read_IT>
 800a004:	e19a      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80ac 	beq.w	800a16e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a01e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4b59      	ldr	r3, [pc, #356]	@ (800a190 <HAL_SD_IRQHandler+0x1b8>)
 800a02c:	400b      	ands	r3, r1
 800a02e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a03e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a04e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d038      	beq.n	800a0cc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <HAL_SD_IRQHandler+0x96>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d011      	beq.n	800a092 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f003 f89e 	bl	800d1b4 <SDMMC_CmdStopTransfer>
 800a078:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d008      	beq.n	800a092 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f95b 	bl	800a348 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a3f      	ldr	r2, [pc, #252]	@ (800a194 <HAL_SD_IRQHandler+0x1bc>)
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <HAL_SD_IRQHandler+0xe4>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f003 fd2b 	bl	800db18 <HAL_SD_RxCpltCallback>
 800a0c2:	e13b      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f003 fd1d 	bl	800db04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a0ca:	e137      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 8132 	beq.w	800a33c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f003 0302 	and.w	r3, r3, #2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d104      	bne.n	800a104 <HAL_SD_IRQHandler+0x12c>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d011      	beq.n	800a128 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f003 f853 	bl	800d1b4 <SDMMC_CmdStopTransfer>
 800a10e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d008      	beq.n	800a128 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f910 	bl	800a348 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f003 0310 	and.w	r3, r3, #16
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d104      	bne.n	800a14a <HAL_SD_IRQHandler+0x172>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f003 fcda 	bl	800db04 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d105      	bne.n	800a166 <HAL_SD_IRQHandler+0x18e>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80eb 	beq.w	800a33c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f003 fcd6 	bl	800db18 <HAL_SD_RxCpltCallback>
}
 800a16c:	e0e6      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_SD_IRQHandler+0x1c0>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d008      	beq.n	800a198 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 f8a8 	bl	800b2dc <SD_Write_IT>
 800a18c:	e0d6      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
 800a18e:	bf00      	nop
 800a190:	ffff3ec5 	.word	0xffff3ec5
 800a194:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 809d 	beq.w	800a2e2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ba:	f043 0202 	orr.w	r2, r3, #2
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1d4:	f043 0208 	orr.w	r2, r3, #8
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d005      	beq.n	800a1f6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ee:	f043 0220 	orr.w	r2, r3, #32
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1fc:	f003 0310 	and.w	r3, r3, #16
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a208:	f043 0210 	orr.w	r2, r3, #16
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a4b      	ldr	r2, [pc, #300]	@ (800a344 <HAL_SD_IRQHandler+0x36c>)
 800a216:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a226:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a236:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a246:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a256:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f002 ffa9 	bl	800d1b4 <SDMMC_CmdStopTransfer>
 800a262:	4602      	mov	r2, r0
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a27c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a286:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f851 	bl	800a348 <HAL_SD_ErrorCallback>
}
 800a2a6:	e049      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d044      	beq.n	800a33c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d040      	beq.n	800a33c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a2c8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f834 	bl	800a348 <HAL_SD_ErrorCallback>
}
 800a2e0:	e02c      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d025      	beq.n	800a33c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 f84a 	bl	800b3ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a318:	e010      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f832 	bl	800b384 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a320:	e00c      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f833 	bl	800b398 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a332:	e003      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 f81b 	bl	800b370 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a33a:	e7ff      	b.n	800a33c <HAL_SD_IRQHandler+0x364>
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	18000f3a 	.word	0x18000f3a

0800a348 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a36a:	0f9b      	lsrs	r3, r3, #30
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a376:	0e9b      	lsrs	r3, r3, #26
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a388:	0e1b      	lsrs	r3, r3, #24
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	b2da      	uxtb	r2, r3
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3a6:	0a1b      	lsrs	r3, r3, #8
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3bc:	0d1b      	lsrs	r3, r3, #20
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c8:	0c1b      	lsrs	r3, r3, #16
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3da:	0bdb      	lsrs	r3, r3, #15
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ec:	0b9b      	lsrs	r3, r3, #14
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3fe:	0b5b      	lsrs	r3, r3, #13
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	b2da      	uxtb	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a410:	0b1b      	lsrs	r3, r3, #12
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2200      	movs	r2, #0
 800a422:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d163      	bne.n	800a4f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a430:	009a      	lsls	r2, r3, #2
 800a432:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a436:	4013      	ands	r3, r2
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a43c:	0f92      	lsrs	r2, r2, #30
 800a43e:	431a      	orrs	r2, r3
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a448:	0edb      	lsrs	r3, r3, #27
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	b2da      	uxtb	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a45a:	0e1b      	lsrs	r3, r3, #24
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	b2da      	uxtb	r2, r3
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a46c:	0d5b      	lsrs	r3, r3, #21
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	b2da      	uxtb	r2, r3
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47e:	0c9b      	lsrs	r3, r3, #18
 800a480:	b2db      	uxtb	r3, r3
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	b2da      	uxtb	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a490:	0bdb      	lsrs	r3, r3, #15
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f003 0307 	and.w	r3, r3, #7
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	7e1b      	ldrb	r3, [r3, #24]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a4be:	fb03 f202 	mul.w	r2, r3, r2
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	7a1b      	ldrb	r3, [r3, #8]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a4e0:	0a52      	lsrs	r2, r2, #9
 800a4e2:	fb03 f202 	mul.w	r2, r3, r2
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4f0:	655a      	str	r2, [r3, #84]	@ 0x54
 800a4f2:	e031      	b.n	800a558 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d11d      	bne.n	800a538 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	431a      	orrs	r2, r3
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	3301      	adds	r3, #1
 800a518:	029a      	lsls	r2, r3, #10
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a52c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	655a      	str	r2, [r3, #84]	@ 0x54
 800a536:	e00f      	b.n	800a558 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a58      	ldr	r2, [pc, #352]	@ (800a6a0 <HAL_SD_GetCardCSD+0x344>)
 800a53e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a544:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e09d      	b.n	800a694 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a55c:	0b9b      	lsrs	r3, r3, #14
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	b2da      	uxtb	r2, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56e:	09db      	lsrs	r3, r3, #7
 800a570:	b2db      	uxtb	r3, r3
 800a572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a576:	b2da      	uxtb	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a586:	b2da      	uxtb	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a590:	0fdb      	lsrs	r3, r3, #31
 800a592:	b2da      	uxtb	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a59c:	0f5b      	lsrs	r3, r3, #29
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ae:	0e9b      	lsrs	r3, r3, #26
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c0:	0d9b      	lsrs	r3, r3, #22
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 030f 	and.w	r3, r3, #15
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5d2:	0d5b      	lsrs	r3, r3, #21
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a602:	0bdb      	lsrs	r3, r3, #15
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a616:	0b9b      	lsrs	r3, r3, #14
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a62a:	0b5b      	lsrs	r3, r3, #13
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a63e:	0b1b      	lsrs	r3, r3, #12
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	b2da      	uxtb	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a652:	0a9b      	lsrs	r3, r3, #10
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a682:	b2da      	uxtb	r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	1fe00fff 	.word	0x1fe00fff

0800a6a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b094      	sub	sp, #80	@ 0x50
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d101      	bne.n	800a6c4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e0a7      	b.n	800a814 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a6c4:	f107 0308 	add.w	r3, r7, #8
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fb62 	bl	800ad94 <SD_SendSDStatus>
 800a6d0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d011      	beq.n	800a6fc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a4f      	ldr	r2, [pc, #316]	@ (800a81c <HAL_SD_GetCardStatus+0x178>)
 800a6de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a6fa:	e070      	b.n	800a7de <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	099b      	lsrs	r3, r3, #6
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	b2da      	uxtb	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	b2da      	uxtb	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	0a1b      	lsrs	r3, r3, #8
 800a720:	b29b      	uxth	r3, r3
 800a722:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a726:	b29a      	uxth	r2, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	0e1b      	lsrs	r3, r3, #24
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	b29a      	uxth	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	061a      	lsls	r2, r3, #24
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a742:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a74c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	0e1b      	lsrs	r3, r3, #24
 800a752:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	b2da      	uxtb	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	0d1b      	lsrs	r3, r3, #20
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	b29b      	uxth	r3, r3
 800a780:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a784:	b29a      	uxth	r2, r3
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	b29a      	uxth	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	0a9b      	lsrs	r3, r3, #10
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	0a1b      	lsrs	r3, r3, #8
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 0303 	and.w	r3, r3, #3
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	091b      	lsrs	r3, r3, #4
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 030f 	and.w	r3, r3, #15
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	0e1b      	lsrs	r3, r3, #24
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f002 fc34 	bl	800d054 <SDMMC_CmdBlockLength>
 800a7ec:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00d      	beq.n	800a810 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a08      	ldr	r2, [pc, #32]	@ (800a81c <HAL_SD_GetCardStatus+0x178>)
 800a7fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a800:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a810:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a814:	4618      	mov	r0, r3
 800a816:	3750      	adds	r7, #80	@ 0x50
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	1fe00fff 	.word	0x1fe00fff

0800a820 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b08d      	sub	sp, #52	@ 0x34
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2203      	movs	r2, #3
 800a88c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a894:	2b03      	cmp	r3, #3
 800a896:	d02e      	beq.n	800a8f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a89e:	d106      	bne.n	800a8ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8ac:	e029      	b.n	800a902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8b4:	d10a      	bne.n	800a8cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fb64 	bl	800af84 <SD_WideBus_Enable>
 800a8bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8ca:	e01a      	b.n	800a902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fba1 	bl	800b01a <SD_WideBus_Disable>
 800a8d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8e6:	e00c      	b.n	800a902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8f4:	e005      	b.n	800a902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a5f      	ldr	r2, [pc, #380]	@ (800aa8c <HAL_SD_ConfigWideBusOperation+0x214>)
 800a910:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a918:	e096      	b.n	800aa48 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a91a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a91e:	f04f 0100 	mov.w	r1, #0
 800a922:	f7fd fdf5 	bl	8008510 <HAL_RCCEx_GetPeriphCLKFreq>
 800a926:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 8083 	beq.w	800aa36 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	695a      	ldr	r2, [r3, #20]
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	4950      	ldr	r1, [pc, #320]	@ (800aa90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a94e:	fba1 1303 	umull	r1, r3, r1, r3
 800a952:	0e1b      	lsrs	r3, r3, #24
 800a954:	429a      	cmp	r2, r3
 800a956:	d303      	bcc.n	800a960 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e05a      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a968:	d103      	bne.n	800a972 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	61bb      	str	r3, [r7, #24]
 800a970:	e051      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97a:	d126      	bne.n	800a9ca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10e      	bne.n	800a9a2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	4a43      	ldr	r2, [pc, #268]	@ (800aa94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d906      	bls.n	800a99a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	4a40      	ldr	r2, [pc, #256]	@ (800aa90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a990:	fba2 2303 	umull	r2, r3, r2, r3
 800a994:	0e5b      	lsrs	r3, r3, #25
 800a996:	61bb      	str	r3, [r7, #24]
 800a998:	e03d      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	61bb      	str	r3, [r7, #24]
 800a9a0:	e039      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ae:	4a39      	ldr	r2, [pc, #228]	@ (800aa94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d906      	bls.n	800a9c2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	4a36      	ldr	r2, [pc, #216]	@ (800aa90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9bc:	0e5b      	lsrs	r3, r3, #25
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	e029      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	61bb      	str	r3, [r7, #24]
 800a9c8:	e025      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10e      	bne.n	800a9f0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4a30      	ldr	r2, [pc, #192]	@ (800aa98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d906      	bls.n	800a9e8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4a2c      	ldr	r2, [pc, #176]	@ (800aa90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	0e1b      	lsrs	r3, r3, #24
 800a9e4:	61bb      	str	r3, [r7, #24]
 800a9e6:	e016      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	e012      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fc:	4a26      	ldr	r2, [pc, #152]	@ (800aa98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d906      	bls.n	800aa10 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	4a22      	ldr	r2, [pc, #136]	@ (800aa90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	0e1b      	lsrs	r3, r3, #24
 800aa0c:	61bb      	str	r3, [r7, #24]
 800aa0e:	e002      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681c      	ldr	r4, [r3, #0]
 800aa1a:	466a      	mov	r2, sp
 800aa1c:	f107 0314 	add.w	r3, r7, #20
 800aa20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa24:	e882 0003 	stmia.w	r2, {r0, r1}
 800aa28:	f107 0308 	add.w	r3, r7, #8
 800aa2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f002 fa32 	bl	800ce98 <SDMMC_Init>
 800aa34:	e008      	b.n	800aa48 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 faff 	bl	800d054 <SDMMC_CmdBlockLength>
 800aa56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00c      	beq.n	800aa78 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a0a      	ldr	r2, [pc, #40]	@ (800aa8c <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa64:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800aa80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	372c      	adds	r7, #44	@ 0x2c
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd90      	pop	{r4, r7, pc}
 800aa8c:	1fe00fff 	.word	0x1fe00fff
 800aa90:	55e63b89 	.word	0x55e63b89
 800aa94:	02faf080 	.word	0x02faf080
 800aa98:	017d7840 	.word	0x017d7840

0800aa9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa40 	bl	800af34 <SD_SendStatus>
 800aab4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	0a5b      	lsrs	r3, r3, #9
 800aacc:	f003 030f 	and.w	r3, r3, #15
 800aad0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aad2:	693b      	ldr	r3, [r7, #16]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b090      	sub	sp, #64	@ 0x40
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800aae8:	f7f9 fb14 	bl	8004114 <HAL_GetTick>
 800aaec:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f002 fa29 	bl	800cf4a <SDMMC_GetPowerState>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aafe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ab02:	e0b5      	b.n	800ac70 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d02e      	beq.n	800ab6a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f002 fc74 	bl	800d3fe <SDMMC_CmdSendCID>
 800ab16:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <SD_InitCard+0x46>
    {
      return errorstate;
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	e0a6      	b.n	800ac70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2100      	movs	r1, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 fa54 	bl	800cfd6 <SDMMC_GetResponse>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2104      	movs	r1, #4
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f002 fa4b 	bl	800cfd6 <SDMMC_GetResponse>
 800ab40:	4602      	mov	r2, r0
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2108      	movs	r1, #8
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f002 fa42 	bl	800cfd6 <SDMMC_GetResponse>
 800ab52:	4602      	mov	r2, r0
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	210c      	movs	r1, #12
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 fa39 	bl	800cfd6 <SDMMC_GetResponse>
 800ab64:	4602      	mov	r2, r0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d01d      	beq.n	800abae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ab72:	e019      	b.n	800aba8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f107 020a 	add.w	r2, r7, #10
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f002 fc7c 	bl	800d47c <SDMMC_CmdSetRelAdd>
 800ab84:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8e:	e06f      	b.n	800ac70 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ab90:	f7f9 fac0 	bl	8004114 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d902      	bls.n	800aba8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800aba2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aba6:	e063      	b.n	800ac70 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800aba8:	897b      	ldrh	r3, [r7, #10]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0e2      	beq.n	800ab74 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d036      	beq.n	800ac24 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800abb6:	897b      	ldrh	r3, [r7, #10]
 800abb8:	461a      	mov	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc6:	041b      	lsls	r3, r3, #16
 800abc8:	4619      	mov	r1, r3
 800abca:	4610      	mov	r0, r2
 800abcc:	f002 fc36 	bl	800d43c <SDMMC_CmdSendCSD>
 800abd0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <SD_InitCard+0x100>
    {
      return errorstate;
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	e049      	b.n	800ac70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f002 f9f7 	bl	800cfd6 <SDMMC_GetResponse>
 800abe8:	4602      	mov	r2, r0
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2104      	movs	r1, #4
 800abf4:	4618      	mov	r0, r3
 800abf6:	f002 f9ee 	bl	800cfd6 <SDMMC_GetResponse>
 800abfa:	4602      	mov	r2, r0
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2108      	movs	r1, #8
 800ac06:	4618      	mov	r0, r3
 800ac08:	f002 f9e5 	bl	800cfd6 <SDMMC_GetResponse>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	210c      	movs	r1, #12
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 f9dc 	bl	800cfd6 <SDMMC_GetResponse>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2104      	movs	r1, #4
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f002 f9d3 	bl	800cfd6 <SDMMC_GetResponse>
 800ac30:	4603      	mov	r3, r0
 800ac32:	0d1a      	lsrs	r2, r3, #20
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff fb8c 	bl	800a35c <HAL_SD_GetCardCSD>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac4e:	e00f      	b.n	800ac70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac58:	041b      	lsls	r3, r3, #16
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f002 fae5 	bl	800d22c <SDMMC_CmdSelDesel>
 800ac62:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <SD_InitCard+0x192>
  {
    return errorstate;
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	e000      	b.n	800ac70 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3740      	adds	r7, #64	@ 0x40
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f002 faee 	bl	800d272 <SDMMC_CmdGoIdleState>
 800ac96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	e072      	b.n	800ad88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 fb01 	bl	800d2ae <SDMMC_CmdOperCond>
 800acac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acb4:	d10d      	bne.n	800acd2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f002 fad6 	bl	800d272 <SDMMC_CmdGoIdleState>
 800acc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <SD_PowerON+0x60>
    {
      return errorstate;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	e05a      	b.n	800ad88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d137      	bne.n	800ad50 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f002 fb01 	bl	800d2ee <SDMMC_CmdAppCommand>
 800acec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d02d      	beq.n	800ad50 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acf4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800acf8:	e046      	b.n	800ad88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2100      	movs	r1, #0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 faf4 	bl	800d2ee <SDMMC_CmdAppCommand>
 800ad06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	e03a      	b.n	800ad88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	491e      	ldr	r1, [pc, #120]	@ (800ad90 <SD_PowerON+0x118>)
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f002 fb0b 	bl	800d334 <SDMMC_CmdAppOperCommand>
 800ad1e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ad2a:	e02d      	b.n	800ad88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f002 f94f 	bl	800cfd6 <SDMMC_GetResponse>
 800ad38:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	0fdb      	lsrs	r3, r3, #31
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d101      	bne.n	800ad46 <SD_PowerON+0xce>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <SD_PowerON+0xd0>
 800ad46:	2300      	movs	r3, #0
 800ad48:	613b      	str	r3, [r7, #16]

    count++;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d802      	bhi.n	800ad60 <SD_PowerON+0xe8>
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0cc      	beq.n	800acfa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d902      	bls.n	800ad70 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad6e:	e00b      	b.n	800ad88 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	c1100000 	.word	0xc1100000

0800ad94 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08c      	sub	sp, #48	@ 0x30
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad9e:	f7f9 f9b9 	bl	8004114 <HAL_GetTick>
 800ada2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 f911 	bl	800cfd6 <SDMMC_GetResponse>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adbe:	d102      	bne.n	800adc6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800adc4:	e0b0      	b.n	800af28 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2140      	movs	r1, #64	@ 0x40
 800adcc:	4618      	mov	r0, r3
 800adce:	f002 f941 	bl	800d054 <SDMMC_CmdBlockLength>
 800add2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	e0a0      	b.n	800af28 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adee:	041b      	lsls	r3, r3, #16
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f002 fa7b 	bl	800d2ee <SDMMC_CmdAppCommand>
 800adf8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	e08d      	b.n	800af28 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ae12:	2340      	movs	r3, #64	@ 0x40
 800ae14:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ae16:	2360      	movs	r3, #96	@ 0x60
 800ae18:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae22:	2301      	movs	r3, #1
 800ae24:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f107 0208 	add.w	r2, r7, #8
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f002 f8e3 	bl	800cffc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f002 fb63 	bl	800d506 <SDMMC_CmdStatusRegister>
 800ae40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d02b      	beq.n	800aea0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	e069      	b.n	800af28 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d013      	beq.n	800ae8a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ae62:	2300      	movs	r3, #0
 800ae64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae66:	e00d      	b.n	800ae84 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f002 f83d 	bl	800ceec <SDMMC_ReadFIFO>
 800ae72:	4602      	mov	r2, r0
 800ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae76:	601a      	str	r2, [r3, #0]
        pData++;
 800ae78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae80:	3301      	adds	r3, #1
 800ae82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae86:	2b07      	cmp	r3, #7
 800ae88:	d9ee      	bls.n	800ae68 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae8a:	f7f9 f943 	bl	8004114 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae98:	d102      	bne.n	800aea0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae9e:	e043      	b.n	800af28 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0d2      	beq.n	800ae54 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb4:	f003 0308 	and.w	r3, r3, #8
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aebc:	2308      	movs	r3, #8
 800aebe:	e033      	b.n	800af28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aece:	2302      	movs	r3, #2
 800aed0:	e02a      	b.n	800af28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d017      	beq.n	800af10 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800aee0:	2320      	movs	r3, #32
 800aee2:	e021      	b.n	800af28 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 ffff 	bl	800ceec <SDMMC_ReadFIFO>
 800aeee:	4602      	mov	r2, r0
 800aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef2:	601a      	str	r2, [r3, #0]
    pData++;
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	3304      	adds	r3, #4
 800aef8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aefa:	f7f9 f90b 	bl	8004114 <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af08:	d102      	bne.n	800af10 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af0a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af0e:	e00b      	b.n	800af28 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e2      	bne.n	800aee4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a03      	ldr	r2, [pc, #12]	@ (800af30 <SD_SendSDStatus+0x19c>)
 800af24:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3730      	adds	r7, #48	@ 0x30
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	18000f3a 	.word	0x18000f3a

0800af34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af48:	e018      	b.n	800af7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af52:	041b      	lsls	r3, r3, #16
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	f002 fab2 	bl	800d4c0 <SDMMC_CmdSendStatus>
 800af5c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <SD_SendStatus+0x34>
  {
    return errorstate;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	e009      	b.n	800af7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2100      	movs	r1, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f002 f831 	bl	800cfd6 <SDMMC_GetResponse>
 800af74:	4602      	mov	r2, r0
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2100      	movs	r1, #0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f002 f81b 	bl	800cfd6 <SDMMC_GetResponse>
 800afa0:	4603      	mov	r3, r0
 800afa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afaa:	d102      	bne.n	800afb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800afb0:	e02f      	b.n	800b012 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afb2:	f107 030c 	add.w	r3, r7, #12
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f879 	bl	800b0b0 <SD_FindSCR>
 800afbe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	e023      	b.n	800b012 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01c      	beq.n	800b00e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afdc:	041b      	lsls	r3, r3, #16
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f002 f984 	bl	800d2ee <SDMMC_CmdAppCommand>
 800afe6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	e00f      	b.n	800b012 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2102      	movs	r1, #2
 800aff8:	4618      	mov	r0, r3
 800affa:	f002 f9bb 	bl	800d374 <SDMMC_CmdBusWidth>
 800affe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	e003      	b.n	800b012 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	e001      	b.n	800b012 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b00e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b012:	4618      	mov	r0, r3
 800b014:	3718      	adds	r7, #24
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b086      	sub	sp, #24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f001 ffd0 	bl	800cfd6 <SDMMC_GetResponse>
 800b036:	4603      	mov	r3, r0
 800b038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b03c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b040:	d102      	bne.n	800b048 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b042:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b046:	e02f      	b.n	800b0a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b048:	f107 030c 	add.w	r3, r7, #12
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f82e 	bl	800b0b0 <SD_FindSCR>
 800b054:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	e023      	b.n	800b0a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d01c      	beq.n	800b0a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f002 f939 	bl	800d2ee <SDMMC_CmdAppCommand>
 800b07c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	e00f      	b.n	800b0a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f002 f970 	bl	800d374 <SDMMC_CmdBusWidth>
 800b094:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	e003      	b.n	800b0a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e001      	b.n	800b0a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3718      	adds	r7, #24
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08e      	sub	sp, #56	@ 0x38
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b0ba:	f7f9 f82b 	bl	8004114 <HAL_GetTick>
 800b0be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60bb      	str	r3, [r7, #8]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2108      	movs	r1, #8
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f001 ffbc 	bl	800d054 <SDMMC_CmdBlockLength>
 800b0dc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	e0ad      	b.n	800b244 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f002 f8fa 	bl	800d2ee <SDMMC_CmdAppCommand>
 800b0fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	e09e      	b.n	800b244 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b106:	f04f 33ff 	mov.w	r3, #4294967295
 800b10a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b10c:	2308      	movs	r3, #8
 800b10e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b110:	2330      	movs	r3, #48	@ 0x30
 800b112:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b114:	2302      	movs	r3, #2
 800b116:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b118:	2300      	movs	r3, #0
 800b11a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b11c:	2301      	movs	r3, #1
 800b11e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f107 0210 	add.w	r2, r7, #16
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 ff66 	bl	800cffc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f002 f940 	bl	800d3ba <SDMMC_CmdSendSCR>
 800b13a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d027      	beq.n	800b192 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b144:	e07e      	b.n	800b244 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d113      	bne.n	800b17c <SD_FindSCR+0xcc>
 800b154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b156:	2b00      	cmp	r3, #0
 800b158:	d110      	bne.n	800b17c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 fec4 	bl	800ceec <SDMMC_ReadFIFO>
 800b164:	4603      	mov	r3, r0
 800b166:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 febd 	bl	800ceec <SDMMC_ReadFIFO>
 800b172:	4603      	mov	r3, r0
 800b174:	60fb      	str	r3, [r7, #12]
      index++;
 800b176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b178:	3301      	adds	r3, #1
 800b17a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b17c:	f7f8 ffca 	bl	8004114 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d102      	bne.n	800b192 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b18c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b190:	e058      	b.n	800b244 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b198:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b19c:	4013      	ands	r3, r2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d0d1      	beq.n	800b146 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1a8:	f003 0308 	and.w	r3, r3, #8
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2208      	movs	r2, #8
 800b1b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	e043      	b.n	800b244 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e036      	b.n	800b244 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1dc:	f003 0320 	and.w	r3, r3, #32
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	e029      	b.n	800b244 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a15      	ldr	r2, [pc, #84]	@ (800b24c <SD_FindSCR+0x19c>)
 800b1f6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	061a      	lsls	r2, r3, #24
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	021b      	lsls	r3, r3, #8
 800b200:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b204:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	0a1b      	lsrs	r3, r3, #8
 800b20a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b20e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	0e1b      	lsrs	r3, r3, #24
 800b214:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b218:	601a      	str	r2, [r3, #0]
    scr++;
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	3304      	adds	r3, #4
 800b21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	061a      	lsls	r2, r3, #24
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	021b      	lsls	r3, r3, #8
 800b228:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b22c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	0a1b      	lsrs	r3, r3, #8
 800b232:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b236:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	0e1b      	lsrs	r3, r3, #24
 800b23c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b240:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3738      	adds	r7, #56	@ 0x38
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	18000f3a 	.word	0x18000f3a

0800b250 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b262:	2b1f      	cmp	r3, #31
 800b264:	d936      	bls.n	800b2d4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e027      	b.n	800b2bc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4618      	mov	r0, r3
 800b272:	f001 fe3b 	bl	800ceec <SDMMC_ReadFIFO>
 800b276:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	3301      	adds	r3, #1
 800b284:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	3301      	adds	r3, #1
 800b294:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	0c1b      	lsrs	r3, r3, #16
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	0e1b      	lsrs	r3, r3, #24
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2b07      	cmp	r3, #7
 800b2c0:	d9d4      	bls.n	800b26c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2cc:	f1a3 0220 	sub.w	r2, r3, #32
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	2b1f      	cmp	r3, #31
 800b2f0:	d93a      	bls.n	800b368 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e02b      	b.n	800b350 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	3301      	adds	r3, #1
 800b302:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	021a      	lsls	r2, r3, #8
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	3301      	adds	r3, #1
 800b314:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	041a      	lsls	r2, r3, #16
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	3301      	adds	r3, #1
 800b326:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	061a      	lsls	r2, r3, #24
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	3301      	adds	r3, #1
 800b338:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f107 020c 	add.w	r2, r7, #12
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f001 fdde 	bl	800cf06 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	3301      	adds	r3, #1
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b07      	cmp	r3, #7
 800b354:	d9d0      	bls.n	800b2f8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a1b      	ldr	r3, [r3, #32]
 800b360:	f1a3 0220 	sub.w	r2, r3, #32
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	621a      	str	r2, [r3, #32]
  }
}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e10f      	b.n	800b5f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a87      	ldr	r2, [pc, #540]	@ (800b5fc <HAL_SPI_Init+0x23c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00f      	beq.n	800b402 <HAL_SPI_Init+0x42>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a86      	ldr	r2, [pc, #536]	@ (800b600 <HAL_SPI_Init+0x240>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00a      	beq.n	800b402 <HAL_SPI_Init+0x42>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a84      	ldr	r2, [pc, #528]	@ (800b604 <HAL_SPI_Init+0x244>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d005      	beq.n	800b402 <HAL_SPI_Init+0x42>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	2b0f      	cmp	r3, #15
 800b3fc:	d901      	bls.n	800b402 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e0f7      	b.n	800b5f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fbc2 	bl	800bb8c <SPI_GetPacketSize>
 800b408:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a7b      	ldr	r2, [pc, #492]	@ (800b5fc <HAL_SPI_Init+0x23c>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00c      	beq.n	800b42e <HAL_SPI_Init+0x6e>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a79      	ldr	r2, [pc, #484]	@ (800b600 <HAL_SPI_Init+0x240>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d007      	beq.n	800b42e <HAL_SPI_Init+0x6e>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a78      	ldr	r2, [pc, #480]	@ (800b604 <HAL_SPI_Init+0x244>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d002      	beq.n	800b42e <HAL_SPI_Init+0x6e>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b08      	cmp	r3, #8
 800b42c:	d811      	bhi.n	800b452 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b432:	4a72      	ldr	r2, [pc, #456]	@ (800b5fc <HAL_SPI_Init+0x23c>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d009      	beq.n	800b44c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a70      	ldr	r2, [pc, #448]	@ (800b600 <HAL_SPI_Init+0x240>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d004      	beq.n	800b44c <HAL_SPI_Init+0x8c>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a6f      	ldr	r2, [pc, #444]	@ (800b604 <HAL_SPI_Init+0x244>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d104      	bne.n	800b456 <HAL_SPI_Init+0x96>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b10      	cmp	r3, #16
 800b450:	d901      	bls.n	800b456 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e0cd      	b.n	800b5f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f8cc 	bl	800b608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 0201 	bic.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b492:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b49c:	d119      	bne.n	800b4d2 <HAL_SPI_Init+0x112>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4a6:	d103      	bne.n	800b4b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d008      	beq.n	800b4c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10c      	bne.n	800b4d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4c0:	d107      	bne.n	800b4d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00f      	beq.n	800b4fe <HAL_SPI_Init+0x13e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	2b06      	cmp	r3, #6
 800b4e4:	d90b      	bls.n	800b4fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	e007      	b.n	800b50e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b50c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69da      	ldr	r2, [r3, #28]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b516:	431a      	orrs	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b520:	ea42 0103 	orr.w	r1, r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b538:	431a      	orrs	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	431a      	orrs	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b56e:	ea42 0103 	orr.w	r1, r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d113      	bne.n	800b5ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b598:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b5ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f022 0201 	bic.w	r2, r2, #1
 800b5bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	40013000 	.word	0x40013000
 800b600:	40003800 	.word	0x40003800
 800b604:	40003c00 	.word	0x40003c00

0800b608 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b01      	cmp	r3, #1
 800b634:	d001      	beq.n	800b63a <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800b636:	2302      	movs	r3, #2
 800b638:	e18a      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_SPI_TransmitReceive_DMA+0x30>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <HAL_SPI_TransmitReceive_DMA+0x30>
 800b646:	887b      	ldrh	r3, [r7, #2]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e17f      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_SPI_TransmitReceive_DMA+0x42>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e178      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2205      	movs	r2, #5
 800b66a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	887a      	ldrh	r2, [r7, #2]
 800b680:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	887a      	ldrh	r2, [r7, #2]
 800b688:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	887a      	ldrh	r2, [r7, #2]
 800b696:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	887a      	ldrh	r2, [r7, #2]
 800b69e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b6bc:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b6cc:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d905      	bls.n	800b6e2 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6e0:	d10f      	bne.n	800b702 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b6e6:	2b07      	cmp	r3, #7
 800b6e8:	d911      	bls.n	800b70e <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6f4:	d00b      	beq.n	800b70e <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6fa:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b6fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b700:	d005      	beq.n	800b70e <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e120      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b07      	cmp	r3, #7
 800b714:	d840      	bhi.n	800b798 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b720:	d109      	bne.n	800b736 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b728:	b29b      	uxth	r3, r3
 800b72a:	3301      	adds	r3, #1
 800b72c:	105b      	asrs	r3, r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b740:	d109      	bne.n	800b756 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b748:	b29b      	uxth	r3, r3
 800b74a:	3303      	adds	r3, #3
 800b74c:	109b      	asrs	r3, r3, #2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b760:	d109      	bne.n	800b776 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b768:	b29b      	uxth	r3, r3
 800b76a:	3301      	adds	r3, #1
 800b76c:	105b      	asrs	r3, r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b780:	d12e      	bne.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b788:	b29b      	uxth	r3, r3
 800b78a:	3303      	adds	r3, #3
 800b78c:	109b      	asrs	r3, r3, #2
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b796:	e023      	b.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	2b0f      	cmp	r3, #15
 800b79e:	d81f      	bhi.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7aa:	d109      	bne.n	800b7c0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	105b      	asrs	r3, r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7ca:	d109      	bne.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	105b      	asrs	r3, r3, #1
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7e4:	4a5c      	ldr	r2, [pc, #368]	@ (800b958 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800b7e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ec:	4a5b      	ldr	r2, [pc, #364]	@ (800b95c <HAL_SPI_TransmitReceive_DMA+0x340>)
 800b7ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7f4:	4a5a      	ldr	r2, [pc, #360]	@ (800b960 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b7f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3330      	adds	r3, #48	@ 0x30
 800b80a:	4619      	mov	r1, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b810:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b818:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b81a:	f7f9 f923 	bl	8004a64 <HAL_DMA_Start_IT>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d011      	beq.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b82a:	f043 0210 	orr.w	r2, r3, #16
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e083      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b856:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b85c:	2200      	movs	r2, #0
 800b85e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b864:	2200      	movs	r2, #0
 800b866:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b86c:	2200      	movs	r2, #0
 800b86e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b874:	4a3a      	ldr	r2, [pc, #232]	@ (800b960 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b876:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b880:	4619      	mov	r1, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3320      	adds	r3, #32
 800b888:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b890:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b892:	f7f9 f8e7 	bl	8004a64 <HAL_DMA_Start_IT>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d016      	beq.n	800b8ca <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7f9 fb49 	bl	8004f38 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ac:	f043 0210 	orr.w	r2, r3, #16
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e042      	b.n	800b950 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8d4:	d108      	bne.n	800b8e8 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6859      	ldr	r1, [r3, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	4b20      	ldr	r3, [pc, #128]	@ (800b964 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800b8e2:	400b      	ands	r3, r1
 800b8e4:	6053      	str	r3, [r2, #4]
 800b8e6:	e009      	b.n	800b8fc <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b964 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	8879      	ldrh	r1, [r7, #2]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	6812      	ldr	r2, [r2, #0]
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b90a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691a      	ldr	r2, [r3, #16]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800b91a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f042 0201 	orr.w	r2, r2, #1
 800b92a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b934:	d107      	bne.n	800b946 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b944:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	0800b9eb 	.word	0x0800b9eb
 800b95c:	0800b9a5 	.word	0x0800b9a5
 800b960:	0800ba07 	.word	0x0800ba07
 800b964:	ffff0000 	.word	0xffff0000

0800b968 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b07      	cmp	r3, #7
 800b9bc:	d011      	beq.n	800b9e2 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9c8:	d103      	bne.n	800b9d2 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff ffcc 	bl	800b968 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b9d0:	e007      	b.n	800b9e2 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	691a      	ldr	r2, [r3, #16]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f042 0208 	orr.w	r2, r2, #8
 800b9e0:	611a      	str	r2, [r3, #16]
}
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f6:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff ffbf 	bl	800b97c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba12:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7f9 fdad 	bl	8005574 <HAL_DMA_GetError>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d011      	beq.n	800ba44 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f813 	bl	800ba4c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba2c:	f043 0210 	orr.w	r2, r3, #16
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff ffa6 	bl	800b990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ba44:	bf00      	nop
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699a      	ldr	r2, [r3, #24]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0208 	orr.w	r2, r2, #8
 800ba6a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	699a      	ldr	r2, [r3, #24]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0210 	orr.w	r2, r2, #16
 800ba7a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6919      	ldr	r1, [r3, #16]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	4b3c      	ldr	r3, [pc, #240]	@ (800bb88 <SPI_CloseTransfer+0x13c>)
 800ba98:	400b      	ands	r3, r1
 800ba9a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800baaa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d014      	beq.n	800bae2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0320 	and.w	r3, r3, #32
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00f      	beq.n	800bae2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699a      	ldr	r2, [r3, #24]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0220 	orr.w	r2, r2, #32
 800bae0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d014      	beq.n	800bb18 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00f      	beq.n	800bb18 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bafe:	f043 0204 	orr.w	r2, r3, #4
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb16:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00f      	beq.n	800bb42 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb28:	f043 0201 	orr.w	r2, r3, #1
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb40:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00f      	beq.n	800bb6c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb52:	f043 0208 	orr.w	r2, r3, #8
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	699a      	ldr	r2, [r3, #24]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb6a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bb7c:	bf00      	nop
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	fffffc90 	.word	0xfffffc90

0800bb8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb98:	095b      	lsrs	r3, r3, #5
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	3301      	adds	r3, #1
 800bba4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	3307      	adds	r3, #7
 800bbaa:	08db      	lsrs	r3, r3, #3
 800bbac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e042      	b.n	800bc5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7f7 fc52 	bl	8003490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2224      	movs	r2, #36	@ 0x24
 800bbf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0201 	bic.w	r2, r2, #1
 800bc02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fe1f 	bl	800c850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f8b4 	bl	800bd80 <UART_SetConfig>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d101      	bne.n	800bc22 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e01b      	b.n	800bc5a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f042 0201 	orr.w	r2, r2, #1
 800bc50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fe9e 	bl	800c994 <UART_CheckIdleState>
 800bc58:	4603      	mov	r3, r0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b08a      	sub	sp, #40	@ 0x28
 800bc66:	af02      	add	r7, sp, #8
 800bc68:	60f8      	str	r0, [r7, #12]
 800bc6a:	60b9      	str	r1, [r7, #8]
 800bc6c:	603b      	str	r3, [r7, #0]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d17b      	bne.n	800bd74 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <HAL_UART_Transmit+0x26>
 800bc82:	88fb      	ldrh	r3, [r7, #6]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e074      	b.n	800bd76 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2221      	movs	r2, #33	@ 0x21
 800bc98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc9c:	f7f8 fa3a 	bl	8004114 <HAL_GetTick>
 800bca0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	88fa      	ldrh	r2, [r7, #6]
 800bca6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	88fa      	ldrh	r2, [r7, #6]
 800bcae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcba:	d108      	bne.n	800bcce <HAL_UART_Transmit+0x6c>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	61bb      	str	r3, [r7, #24]
 800bccc:	e003      	b.n	800bcd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bcd6:	e030      	b.n	800bd3a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2200      	movs	r2, #0
 800bce0:	2180      	movs	r1, #128	@ 0x80
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 ff00 	bl	800cae8 <UART_WaitOnFlagUntilTimeout>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d005      	beq.n	800bcfa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e03d      	b.n	800bd76 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10b      	bne.n	800bd18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	461a      	mov	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	3302      	adds	r3, #2
 800bd14:	61bb      	str	r3, [r7, #24]
 800bd16:	e007      	b.n	800bd28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	781a      	ldrb	r2, [r3, #0]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	3301      	adds	r3, #1
 800bd26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	3b01      	subs	r3, #1
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1c8      	bne.n	800bcd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2140      	movs	r1, #64	@ 0x40
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 fec9 	bl	800cae8 <UART_WaitOnFlagUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2220      	movs	r2, #32
 800bd60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e006      	b.n	800bd76 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2220      	movs	r2, #32
 800bd6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	e000      	b.n	800bd76 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bd74:	2302      	movs	r3, #2
  }
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd84:	b092      	sub	sp, #72	@ 0x48
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	431a      	orrs	r2, r3
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	69db      	ldr	r3, [r3, #28]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4bbe      	ldr	r3, [pc, #760]	@ (800c0a8 <UART_SetConfig+0x328>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	6812      	ldr	r2, [r2, #0]
 800bdb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bdb8:	430b      	orrs	r3, r1
 800bdba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4ab3      	ldr	r2, [pc, #716]	@ (800c0ac <UART_SetConfig+0x32c>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d004      	beq.n	800bdec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bde8:	4313      	orrs	r3, r2
 800bdea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689a      	ldr	r2, [r3, #8]
 800bdf2:	4baf      	ldr	r3, [pc, #700]	@ (800c0b0 <UART_SetConfig+0x330>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bdfc:	430b      	orrs	r3, r1
 800bdfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be06:	f023 010f 	bic.w	r1, r3, #15
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4aa6      	ldr	r2, [pc, #664]	@ (800c0b4 <UART_SetConfig+0x334>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d177      	bne.n	800bf10 <UART_SetConfig+0x190>
 800be20:	4ba5      	ldr	r3, [pc, #660]	@ (800c0b8 <UART_SetConfig+0x338>)
 800be22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be28:	2b28      	cmp	r3, #40	@ 0x28
 800be2a:	d86d      	bhi.n	800bf08 <UART_SetConfig+0x188>
 800be2c:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <UART_SetConfig+0xb4>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800bed9 	.word	0x0800bed9
 800be38:	0800bf09 	.word	0x0800bf09
 800be3c:	0800bf09 	.word	0x0800bf09
 800be40:	0800bf09 	.word	0x0800bf09
 800be44:	0800bf09 	.word	0x0800bf09
 800be48:	0800bf09 	.word	0x0800bf09
 800be4c:	0800bf09 	.word	0x0800bf09
 800be50:	0800bf09 	.word	0x0800bf09
 800be54:	0800bee1 	.word	0x0800bee1
 800be58:	0800bf09 	.word	0x0800bf09
 800be5c:	0800bf09 	.word	0x0800bf09
 800be60:	0800bf09 	.word	0x0800bf09
 800be64:	0800bf09 	.word	0x0800bf09
 800be68:	0800bf09 	.word	0x0800bf09
 800be6c:	0800bf09 	.word	0x0800bf09
 800be70:	0800bf09 	.word	0x0800bf09
 800be74:	0800bee9 	.word	0x0800bee9
 800be78:	0800bf09 	.word	0x0800bf09
 800be7c:	0800bf09 	.word	0x0800bf09
 800be80:	0800bf09 	.word	0x0800bf09
 800be84:	0800bf09 	.word	0x0800bf09
 800be88:	0800bf09 	.word	0x0800bf09
 800be8c:	0800bf09 	.word	0x0800bf09
 800be90:	0800bf09 	.word	0x0800bf09
 800be94:	0800bef1 	.word	0x0800bef1
 800be98:	0800bf09 	.word	0x0800bf09
 800be9c:	0800bf09 	.word	0x0800bf09
 800bea0:	0800bf09 	.word	0x0800bf09
 800bea4:	0800bf09 	.word	0x0800bf09
 800bea8:	0800bf09 	.word	0x0800bf09
 800beac:	0800bf09 	.word	0x0800bf09
 800beb0:	0800bf09 	.word	0x0800bf09
 800beb4:	0800bef9 	.word	0x0800bef9
 800beb8:	0800bf09 	.word	0x0800bf09
 800bebc:	0800bf09 	.word	0x0800bf09
 800bec0:	0800bf09 	.word	0x0800bf09
 800bec4:	0800bf09 	.word	0x0800bf09
 800bec8:	0800bf09 	.word	0x0800bf09
 800becc:	0800bf09 	.word	0x0800bf09
 800bed0:	0800bf09 	.word	0x0800bf09
 800bed4:	0800bf01 	.word	0x0800bf01
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bede:	e222      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bee0:	2304      	movs	r3, #4
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bee6:	e21e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bee8:	2308      	movs	r3, #8
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beee:	e21a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bef0:	2310      	movs	r3, #16
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bef6:	e216      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bef8:	2320      	movs	r3, #32
 800befa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800befe:	e212      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf00:	2340      	movs	r3, #64	@ 0x40
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf06:	e20e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf08:	2380      	movs	r3, #128	@ 0x80
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0e:	e20a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a69      	ldr	r2, [pc, #420]	@ (800c0bc <UART_SetConfig+0x33c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d130      	bne.n	800bf7c <UART_SetConfig+0x1fc>
 800bf1a:	4b67      	ldr	r3, [pc, #412]	@ (800c0b8 <UART_SetConfig+0x338>)
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf1e:	f003 0307 	and.w	r3, r3, #7
 800bf22:	2b05      	cmp	r3, #5
 800bf24:	d826      	bhi.n	800bf74 <UART_SetConfig+0x1f4>
 800bf26:	a201      	add	r2, pc, #4	@ (adr r2, 800bf2c <UART_SetConfig+0x1ac>)
 800bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2c:	0800bf45 	.word	0x0800bf45
 800bf30:	0800bf4d 	.word	0x0800bf4d
 800bf34:	0800bf55 	.word	0x0800bf55
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf65 	.word	0x0800bf65
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	2300      	movs	r3, #0
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4a:	e1ec      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf52:	e1e8      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf54:	2308      	movs	r3, #8
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf5a:	e1e4      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf62:	e1e0      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf64:	2320      	movs	r3, #32
 800bf66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf6a:	e1dc      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf6c:	2340      	movs	r3, #64	@ 0x40
 800bf6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf72:	e1d8      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf74:	2380      	movs	r3, #128	@ 0x80
 800bf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7a:	e1d4      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a4f      	ldr	r2, [pc, #316]	@ (800c0c0 <UART_SetConfig+0x340>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d130      	bne.n	800bfe8 <UART_SetConfig+0x268>
 800bf86:	4b4c      	ldr	r3, [pc, #304]	@ (800c0b8 <UART_SetConfig+0x338>)
 800bf88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf8a:	f003 0307 	and.w	r3, r3, #7
 800bf8e:	2b05      	cmp	r3, #5
 800bf90:	d826      	bhi.n	800bfe0 <UART_SetConfig+0x260>
 800bf92:	a201      	add	r2, pc, #4	@ (adr r2, 800bf98 <UART_SetConfig+0x218>)
 800bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf98:	0800bfb1 	.word	0x0800bfb1
 800bf9c:	0800bfb9 	.word	0x0800bfb9
 800bfa0:	0800bfc1 	.word	0x0800bfc1
 800bfa4:	0800bfc9 	.word	0x0800bfc9
 800bfa8:	0800bfd1 	.word	0x0800bfd1
 800bfac:	0800bfd9 	.word	0x0800bfd9
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb6:	e1b6      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfb8:	2304      	movs	r3, #4
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfbe:	e1b2      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfc0:	2308      	movs	r3, #8
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc6:	e1ae      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfc8:	2310      	movs	r3, #16
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfce:	e1aa      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfd0:	2320      	movs	r3, #32
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfd6:	e1a6      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfd8:	2340      	movs	r3, #64	@ 0x40
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfde:	e1a2      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfe0:	2380      	movs	r3, #128	@ 0x80
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe6:	e19e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a35      	ldr	r2, [pc, #212]	@ (800c0c4 <UART_SetConfig+0x344>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d130      	bne.n	800c054 <UART_SetConfig+0x2d4>
 800bff2:	4b31      	ldr	r3, [pc, #196]	@ (800c0b8 <UART_SetConfig+0x338>)
 800bff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	d826      	bhi.n	800c04c <UART_SetConfig+0x2cc>
 800bffe:	a201      	add	r2, pc, #4	@ (adr r2, 800c004 <UART_SetConfig+0x284>)
 800c000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c004:	0800c01d 	.word	0x0800c01d
 800c008:	0800c025 	.word	0x0800c025
 800c00c:	0800c02d 	.word	0x0800c02d
 800c010:	0800c035 	.word	0x0800c035
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c045 	.word	0x0800c045
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c022:	e180      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c024:	2304      	movs	r3, #4
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02a:	e17c      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c02c:	2308      	movs	r3, #8
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c032:	e178      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c034:	2310      	movs	r3, #16
 800c036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03a:	e174      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c03c:	2320      	movs	r3, #32
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c042:	e170      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c044:	2340      	movs	r3, #64	@ 0x40
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04a:	e16c      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c04c:	2380      	movs	r3, #128	@ 0x80
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e168      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c8 <UART_SetConfig+0x348>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d142      	bne.n	800c0e4 <UART_SetConfig+0x364>
 800c05e:	4b16      	ldr	r3, [pc, #88]	@ (800c0b8 <UART_SetConfig+0x338>)
 800c060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	2b05      	cmp	r3, #5
 800c068:	d838      	bhi.n	800c0dc <UART_SetConfig+0x35c>
 800c06a:	a201      	add	r2, pc, #4	@ (adr r2, 800c070 <UART_SetConfig+0x2f0>)
 800c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c070:	0800c089 	.word	0x0800c089
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c099 	.word	0x0800c099
 800c07c:	0800c0a1 	.word	0x0800c0a1
 800c080:	0800c0cd 	.word	0x0800c0cd
 800c084:	0800c0d5 	.word	0x0800c0d5
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08e:	e14a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c090:	2304      	movs	r3, #4
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c096:	e146      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c098:	2308      	movs	r3, #8
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09e:	e142      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a6:	e13e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c0a8:	cfff69f3 	.word	0xcfff69f3
 800c0ac:	58000c00 	.word	0x58000c00
 800c0b0:	11fff4ff 	.word	0x11fff4ff
 800c0b4:	40011000 	.word	0x40011000
 800c0b8:	58024400 	.word	0x58024400
 800c0bc:	40004400 	.word	0x40004400
 800c0c0:	40004800 	.word	0x40004800
 800c0c4:	40004c00 	.word	0x40004c00
 800c0c8:	40005000 	.word	0x40005000
 800c0cc:	2320      	movs	r3, #32
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e128      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c0d4:	2340      	movs	r3, #64	@ 0x40
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e124      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c0dc:	2380      	movs	r3, #128	@ 0x80
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e2:	e120      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4acb      	ldr	r2, [pc, #812]	@ (800c418 <UART_SetConfig+0x698>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d176      	bne.n	800c1dc <UART_SetConfig+0x45c>
 800c0ee:	4bcb      	ldr	r3, [pc, #812]	@ (800c41c <UART_SetConfig+0x69c>)
 800c0f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0f6:	2b28      	cmp	r3, #40	@ 0x28
 800c0f8:	d86c      	bhi.n	800c1d4 <UART_SetConfig+0x454>
 800c0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c100 <UART_SetConfig+0x380>)
 800c0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c100:	0800c1a5 	.word	0x0800c1a5
 800c104:	0800c1d5 	.word	0x0800c1d5
 800c108:	0800c1d5 	.word	0x0800c1d5
 800c10c:	0800c1d5 	.word	0x0800c1d5
 800c110:	0800c1d5 	.word	0x0800c1d5
 800c114:	0800c1d5 	.word	0x0800c1d5
 800c118:	0800c1d5 	.word	0x0800c1d5
 800c11c:	0800c1d5 	.word	0x0800c1d5
 800c120:	0800c1ad 	.word	0x0800c1ad
 800c124:	0800c1d5 	.word	0x0800c1d5
 800c128:	0800c1d5 	.word	0x0800c1d5
 800c12c:	0800c1d5 	.word	0x0800c1d5
 800c130:	0800c1d5 	.word	0x0800c1d5
 800c134:	0800c1d5 	.word	0x0800c1d5
 800c138:	0800c1d5 	.word	0x0800c1d5
 800c13c:	0800c1d5 	.word	0x0800c1d5
 800c140:	0800c1b5 	.word	0x0800c1b5
 800c144:	0800c1d5 	.word	0x0800c1d5
 800c148:	0800c1d5 	.word	0x0800c1d5
 800c14c:	0800c1d5 	.word	0x0800c1d5
 800c150:	0800c1d5 	.word	0x0800c1d5
 800c154:	0800c1d5 	.word	0x0800c1d5
 800c158:	0800c1d5 	.word	0x0800c1d5
 800c15c:	0800c1d5 	.word	0x0800c1d5
 800c160:	0800c1bd 	.word	0x0800c1bd
 800c164:	0800c1d5 	.word	0x0800c1d5
 800c168:	0800c1d5 	.word	0x0800c1d5
 800c16c:	0800c1d5 	.word	0x0800c1d5
 800c170:	0800c1d5 	.word	0x0800c1d5
 800c174:	0800c1d5 	.word	0x0800c1d5
 800c178:	0800c1d5 	.word	0x0800c1d5
 800c17c:	0800c1d5 	.word	0x0800c1d5
 800c180:	0800c1c5 	.word	0x0800c1c5
 800c184:	0800c1d5 	.word	0x0800c1d5
 800c188:	0800c1d5 	.word	0x0800c1d5
 800c18c:	0800c1d5 	.word	0x0800c1d5
 800c190:	0800c1d5 	.word	0x0800c1d5
 800c194:	0800c1d5 	.word	0x0800c1d5
 800c198:	0800c1d5 	.word	0x0800c1d5
 800c19c:	0800c1d5 	.word	0x0800c1d5
 800c1a0:	0800c1cd 	.word	0x0800c1cd
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e0bc      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e0b8      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e0b4      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e0b0      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	e0ac      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1cc:	2340      	movs	r3, #64	@ 0x40
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d2:	e0a8      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1d4:	2380      	movs	r3, #128	@ 0x80
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e0a4      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a8f      	ldr	r2, [pc, #572]	@ (800c420 <UART_SetConfig+0x6a0>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d130      	bne.n	800c248 <UART_SetConfig+0x4c8>
 800c1e6:	4b8d      	ldr	r3, [pc, #564]	@ (800c41c <UART_SetConfig+0x69c>)
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b05      	cmp	r3, #5
 800c1f0:	d826      	bhi.n	800c240 <UART_SetConfig+0x4c0>
 800c1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f8 <UART_SetConfig+0x478>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c211 	.word	0x0800c211
 800c1fc:	0800c219 	.word	0x0800c219
 800c200:	0800c221 	.word	0x0800c221
 800c204:	0800c229 	.word	0x0800c229
 800c208:	0800c231 	.word	0x0800c231
 800c20c:	0800c239 	.word	0x0800c239
 800c210:	2300      	movs	r3, #0
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c216:	e086      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c218:	2304      	movs	r3, #4
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21e:	e082      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c220:	2308      	movs	r3, #8
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e07e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c228:	2310      	movs	r3, #16
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e07a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c230:	2320      	movs	r3, #32
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e076      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c238:	2340      	movs	r3, #64	@ 0x40
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e072      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c240:	2380      	movs	r3, #128	@ 0x80
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e06e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a75      	ldr	r2, [pc, #468]	@ (800c424 <UART_SetConfig+0x6a4>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d130      	bne.n	800c2b4 <UART_SetConfig+0x534>
 800c252:	4b72      	ldr	r3, [pc, #456]	@ (800c41c <UART_SetConfig+0x69c>)
 800c254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d826      	bhi.n	800c2ac <UART_SetConfig+0x52c>
 800c25e:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <UART_SetConfig+0x4e4>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c27d 	.word	0x0800c27d
 800c268:	0800c285 	.word	0x0800c285
 800c26c:	0800c28d 	.word	0x0800c28d
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c29d 	.word	0x0800c29d
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	2300      	movs	r3, #0
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e050      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c284:	2304      	movs	r3, #4
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e04c      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c28c:	2308      	movs	r3, #8
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e048      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c294:	2310      	movs	r3, #16
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e044      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c29c:	2320      	movs	r3, #32
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e040      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c2a4:	2340      	movs	r3, #64	@ 0x40
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e03c      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c2ac:	2380      	movs	r3, #128	@ 0x80
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e038      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a5b      	ldr	r2, [pc, #364]	@ (800c428 <UART_SetConfig+0x6a8>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d130      	bne.n	800c320 <UART_SetConfig+0x5a0>
 800c2be:	4b57      	ldr	r3, [pc, #348]	@ (800c41c <UART_SetConfig+0x69c>)
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d826      	bhi.n	800c318 <UART_SetConfig+0x598>
 800c2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <UART_SetConfig+0x550>)
 800c2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d0:	0800c2e9 	.word	0x0800c2e9
 800c2d4:	0800c2f1 	.word	0x0800c2f1
 800c2d8:	0800c2f9 	.word	0x0800c2f9
 800c2dc:	0800c301 	.word	0x0800c301
 800c2e0:	0800c309 	.word	0x0800c309
 800c2e4:	0800c311 	.word	0x0800c311
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e01a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f6:	e016      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e012      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c300:	2310      	movs	r3, #16
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e00e      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c308:	2320      	movs	r3, #32
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e00a      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c310:	2340      	movs	r3, #64	@ 0x40
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e006      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c318:	2380      	movs	r3, #128	@ 0x80
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e002      	b.n	800c326 <UART_SetConfig+0x5a6>
 800c320:	2380      	movs	r3, #128	@ 0x80
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a3f      	ldr	r2, [pc, #252]	@ (800c428 <UART_SetConfig+0x6a8>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	f040 80f8 	bne.w	800c522 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c332:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c336:	2b20      	cmp	r3, #32
 800c338:	dc46      	bgt.n	800c3c8 <UART_SetConfig+0x648>
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	f2c0 8082 	blt.w	800c444 <UART_SetConfig+0x6c4>
 800c340:	3b02      	subs	r3, #2
 800c342:	2b1e      	cmp	r3, #30
 800c344:	d87e      	bhi.n	800c444 <UART_SetConfig+0x6c4>
 800c346:	a201      	add	r2, pc, #4	@ (adr r2, 800c34c <UART_SetConfig+0x5cc>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c3cf 	.word	0x0800c3cf
 800c350:	0800c445 	.word	0x0800c445
 800c354:	0800c3d7 	.word	0x0800c3d7
 800c358:	0800c445 	.word	0x0800c445
 800c35c:	0800c445 	.word	0x0800c445
 800c360:	0800c445 	.word	0x0800c445
 800c364:	0800c3e7 	.word	0x0800c3e7
 800c368:	0800c445 	.word	0x0800c445
 800c36c:	0800c445 	.word	0x0800c445
 800c370:	0800c445 	.word	0x0800c445
 800c374:	0800c445 	.word	0x0800c445
 800c378:	0800c445 	.word	0x0800c445
 800c37c:	0800c445 	.word	0x0800c445
 800c380:	0800c445 	.word	0x0800c445
 800c384:	0800c3f7 	.word	0x0800c3f7
 800c388:	0800c445 	.word	0x0800c445
 800c38c:	0800c445 	.word	0x0800c445
 800c390:	0800c445 	.word	0x0800c445
 800c394:	0800c445 	.word	0x0800c445
 800c398:	0800c445 	.word	0x0800c445
 800c39c:	0800c445 	.word	0x0800c445
 800c3a0:	0800c445 	.word	0x0800c445
 800c3a4:	0800c445 	.word	0x0800c445
 800c3a8:	0800c445 	.word	0x0800c445
 800c3ac:	0800c445 	.word	0x0800c445
 800c3b0:	0800c445 	.word	0x0800c445
 800c3b4:	0800c445 	.word	0x0800c445
 800c3b8:	0800c445 	.word	0x0800c445
 800c3bc:	0800c445 	.word	0x0800c445
 800c3c0:	0800c445 	.word	0x0800c445
 800c3c4:	0800c437 	.word	0x0800c437
 800c3c8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ca:	d037      	beq.n	800c43c <UART_SetConfig+0x6bc>
 800c3cc:	e03a      	b.n	800c444 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3ce:	f7fc fe1f 	bl	8009010 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3d4:	e03c      	b.n	800c450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fc fe2e 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3e4:	e034      	b.n	800c450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3e6:	f107 0318 	add.w	r3, r7, #24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fc ff7a 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f4:	e02c      	b.n	800c450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3f6:	4b09      	ldr	r3, [pc, #36]	@ (800c41c <UART_SetConfig+0x69c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d016      	beq.n	800c430 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c402:	4b06      	ldr	r3, [pc, #24]	@ (800c41c <UART_SetConfig+0x69c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	08db      	lsrs	r3, r3, #3
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	4a07      	ldr	r2, [pc, #28]	@ (800c42c <UART_SetConfig+0x6ac>)
 800c40e:	fa22 f303 	lsr.w	r3, r2, r3
 800c412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c414:	e01c      	b.n	800c450 <UART_SetConfig+0x6d0>
 800c416:	bf00      	nop
 800c418:	40011400 	.word	0x40011400
 800c41c:	58024400 	.word	0x58024400
 800c420:	40007800 	.word	0x40007800
 800c424:	40007c00 	.word	0x40007c00
 800c428:	58000c00 	.word	0x58000c00
 800c42c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c430:	4b9d      	ldr	r3, [pc, #628]	@ (800c6a8 <UART_SetConfig+0x928>)
 800c432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c434:	e00c      	b.n	800c450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c436:	4b9d      	ldr	r3, [pc, #628]	@ (800c6ac <UART_SetConfig+0x92c>)
 800c438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c43a:	e009      	b.n	800c450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c43c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c442:	e005      	b.n	800c450 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c44e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 81de 	beq.w	800c814 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	4a94      	ldr	r2, [pc, #592]	@ (800c6b0 <UART_SetConfig+0x930>)
 800c45e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c462:	461a      	mov	r2, r3
 800c464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c466:	fbb3 f3f2 	udiv	r3, r3, r2
 800c46a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	4613      	mov	r3, r2
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	4413      	add	r3, r2
 800c476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c478:	429a      	cmp	r2, r3
 800c47a:	d305      	bcc.n	800c488 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c484:	429a      	cmp	r2, r3
 800c486:	d903      	bls.n	800c490 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c48e:	e1c1      	b.n	800c814 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c492:	2200      	movs	r2, #0
 800c494:	60bb      	str	r3, [r7, #8]
 800c496:	60fa      	str	r2, [r7, #12]
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49c:	4a84      	ldr	r2, [pc, #528]	@ (800c6b0 <UART_SetConfig+0x930>)
 800c49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	607a      	str	r2, [r7, #4]
 800c4aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4b2:	f7f4 f921 	bl	80006f8 <__aeabi_uldivmod>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f04f 0200 	mov.w	r2, #0
 800c4c2:	f04f 0300 	mov.w	r3, #0
 800c4c6:	020b      	lsls	r3, r1, #8
 800c4c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4cc:	0202      	lsls	r2, r0, #8
 800c4ce:	6979      	ldr	r1, [r7, #20]
 800c4d0:	6849      	ldr	r1, [r1, #4]
 800c4d2:	0849      	lsrs	r1, r1, #1
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	4605      	mov	r5, r0
 800c4da:	eb12 0804 	adds.w	r8, r2, r4
 800c4de:	eb43 0905 	adc.w	r9, r3, r5
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	4693      	mov	fp, r2
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	465b      	mov	r3, fp
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	f7f4 f900 	bl	80006f8 <__aeabi_uldivmod>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c506:	d308      	bcc.n	800c51a <UART_SetConfig+0x79a>
 800c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c50e:	d204      	bcs.n	800c51a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c516:	60da      	str	r2, [r3, #12]
 800c518:	e17c      	b.n	800c814 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c520:	e178      	b.n	800c814 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c52a:	f040 80c5 	bne.w	800c6b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c52e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c532:	2b20      	cmp	r3, #32
 800c534:	dc48      	bgt.n	800c5c8 <UART_SetConfig+0x848>
 800c536:	2b00      	cmp	r3, #0
 800c538:	db7b      	blt.n	800c632 <UART_SetConfig+0x8b2>
 800c53a:	2b20      	cmp	r3, #32
 800c53c:	d879      	bhi.n	800c632 <UART_SetConfig+0x8b2>
 800c53e:	a201      	add	r2, pc, #4	@ (adr r2, 800c544 <UART_SetConfig+0x7c4>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c5cf 	.word	0x0800c5cf
 800c548:	0800c5d7 	.word	0x0800c5d7
 800c54c:	0800c633 	.word	0x0800c633
 800c550:	0800c633 	.word	0x0800c633
 800c554:	0800c5df 	.word	0x0800c5df
 800c558:	0800c633 	.word	0x0800c633
 800c55c:	0800c633 	.word	0x0800c633
 800c560:	0800c633 	.word	0x0800c633
 800c564:	0800c5ef 	.word	0x0800c5ef
 800c568:	0800c633 	.word	0x0800c633
 800c56c:	0800c633 	.word	0x0800c633
 800c570:	0800c633 	.word	0x0800c633
 800c574:	0800c633 	.word	0x0800c633
 800c578:	0800c633 	.word	0x0800c633
 800c57c:	0800c633 	.word	0x0800c633
 800c580:	0800c633 	.word	0x0800c633
 800c584:	0800c5ff 	.word	0x0800c5ff
 800c588:	0800c633 	.word	0x0800c633
 800c58c:	0800c633 	.word	0x0800c633
 800c590:	0800c633 	.word	0x0800c633
 800c594:	0800c633 	.word	0x0800c633
 800c598:	0800c633 	.word	0x0800c633
 800c59c:	0800c633 	.word	0x0800c633
 800c5a0:	0800c633 	.word	0x0800c633
 800c5a4:	0800c633 	.word	0x0800c633
 800c5a8:	0800c633 	.word	0x0800c633
 800c5ac:	0800c633 	.word	0x0800c633
 800c5b0:	0800c633 	.word	0x0800c633
 800c5b4:	0800c633 	.word	0x0800c633
 800c5b8:	0800c633 	.word	0x0800c633
 800c5bc:	0800c633 	.word	0x0800c633
 800c5c0:	0800c633 	.word	0x0800c633
 800c5c4:	0800c625 	.word	0x0800c625
 800c5c8:	2b40      	cmp	r3, #64	@ 0x40
 800c5ca:	d02e      	beq.n	800c62a <UART_SetConfig+0x8aa>
 800c5cc:	e031      	b.n	800c632 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ce:	f7fa fd69 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 800c5d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5d4:	e033      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5d6:	f7fa fd7b 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 800c5da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5dc:	e02f      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fc fd2a 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ec:	e027      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ee:	f107 0318 	add.w	r3, r7, #24
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fc fe76 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5fc:	e01f      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5fe:	4b2d      	ldr	r3, [pc, #180]	@ (800c6b4 <UART_SetConfig+0x934>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b00      	cmp	r3, #0
 800c608:	d009      	beq.n	800c61e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c60a:	4b2a      	ldr	r3, [pc, #168]	@ (800c6b4 <UART_SetConfig+0x934>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	08db      	lsrs	r3, r3, #3
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	4a24      	ldr	r2, [pc, #144]	@ (800c6a8 <UART_SetConfig+0x928>)
 800c616:	fa22 f303 	lsr.w	r3, r2, r3
 800c61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c61c:	e00f      	b.n	800c63e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c61e:	4b22      	ldr	r3, [pc, #136]	@ (800c6a8 <UART_SetConfig+0x928>)
 800c620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c622:	e00c      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c624:	4b21      	ldr	r3, [pc, #132]	@ (800c6ac <UART_SetConfig+0x92c>)
 800c626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c628:	e009      	b.n	800c63e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c62a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c630:	e005      	b.n	800c63e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c63c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 80e7 	beq.w	800c814 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64a:	4a19      	ldr	r2, [pc, #100]	@ (800c6b0 <UART_SetConfig+0x930>)
 800c64c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c650:	461a      	mov	r2, r3
 800c652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c654:	fbb3 f3f2 	udiv	r3, r3, r2
 800c658:	005a      	lsls	r2, r3, #1
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	085b      	lsrs	r3, r3, #1
 800c660:	441a      	add	r2, r3
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	2b0f      	cmp	r3, #15
 800c670:	d916      	bls.n	800c6a0 <UART_SetConfig+0x920>
 800c672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c678:	d212      	bcs.n	800c6a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f023 030f 	bic.w	r3, r3, #15
 800c682:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	b29b      	uxth	r3, r3
 800c68a:	f003 0307 	and.w	r3, r3, #7
 800c68e:	b29a      	uxth	r2, r3
 800c690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c692:	4313      	orrs	r3, r2
 800c694:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c69c:	60da      	str	r2, [r3, #12]
 800c69e:	e0b9      	b.n	800c814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6a6:	e0b5      	b.n	800c814 <UART_SetConfig+0xa94>
 800c6a8:	03d09000 	.word	0x03d09000
 800c6ac:	003d0900 	.word	0x003d0900
 800c6b0:	08011a78 	.word	0x08011a78
 800c6b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	dc49      	bgt.n	800c754 <UART_SetConfig+0x9d4>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	db7c      	blt.n	800c7be <UART_SetConfig+0xa3e>
 800c6c4:	2b20      	cmp	r3, #32
 800c6c6:	d87a      	bhi.n	800c7be <UART_SetConfig+0xa3e>
 800c6c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d0 <UART_SetConfig+0x950>)
 800c6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ce:	bf00      	nop
 800c6d0:	0800c75b 	.word	0x0800c75b
 800c6d4:	0800c763 	.word	0x0800c763
 800c6d8:	0800c7bf 	.word	0x0800c7bf
 800c6dc:	0800c7bf 	.word	0x0800c7bf
 800c6e0:	0800c76b 	.word	0x0800c76b
 800c6e4:	0800c7bf 	.word	0x0800c7bf
 800c6e8:	0800c7bf 	.word	0x0800c7bf
 800c6ec:	0800c7bf 	.word	0x0800c7bf
 800c6f0:	0800c77b 	.word	0x0800c77b
 800c6f4:	0800c7bf 	.word	0x0800c7bf
 800c6f8:	0800c7bf 	.word	0x0800c7bf
 800c6fc:	0800c7bf 	.word	0x0800c7bf
 800c700:	0800c7bf 	.word	0x0800c7bf
 800c704:	0800c7bf 	.word	0x0800c7bf
 800c708:	0800c7bf 	.word	0x0800c7bf
 800c70c:	0800c7bf 	.word	0x0800c7bf
 800c710:	0800c78b 	.word	0x0800c78b
 800c714:	0800c7bf 	.word	0x0800c7bf
 800c718:	0800c7bf 	.word	0x0800c7bf
 800c71c:	0800c7bf 	.word	0x0800c7bf
 800c720:	0800c7bf 	.word	0x0800c7bf
 800c724:	0800c7bf 	.word	0x0800c7bf
 800c728:	0800c7bf 	.word	0x0800c7bf
 800c72c:	0800c7bf 	.word	0x0800c7bf
 800c730:	0800c7bf 	.word	0x0800c7bf
 800c734:	0800c7bf 	.word	0x0800c7bf
 800c738:	0800c7bf 	.word	0x0800c7bf
 800c73c:	0800c7bf 	.word	0x0800c7bf
 800c740:	0800c7bf 	.word	0x0800c7bf
 800c744:	0800c7bf 	.word	0x0800c7bf
 800c748:	0800c7bf 	.word	0x0800c7bf
 800c74c:	0800c7bf 	.word	0x0800c7bf
 800c750:	0800c7b1 	.word	0x0800c7b1
 800c754:	2b40      	cmp	r3, #64	@ 0x40
 800c756:	d02e      	beq.n	800c7b6 <UART_SetConfig+0xa36>
 800c758:	e031      	b.n	800c7be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c75a:	f7fa fca3 	bl	80070a4 <HAL_RCC_GetPCLK1Freq>
 800c75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c760:	e033      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c762:	f7fa fcb5 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 800c766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c768:	e02f      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fc64 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c778:	e027      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c77a:	f107 0318 	add.w	r3, r7, #24
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fc fdb0 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c788:	e01f      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c78a:	4b2d      	ldr	r3, [pc, #180]	@ (800c840 <UART_SetConfig+0xac0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c796:	4b2a      	ldr	r3, [pc, #168]	@ (800c840 <UART_SetConfig+0xac0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	08db      	lsrs	r3, r3, #3
 800c79c:	f003 0303 	and.w	r3, r3, #3
 800c7a0:	4a28      	ldr	r2, [pc, #160]	@ (800c844 <UART_SetConfig+0xac4>)
 800c7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7a8:	e00f      	b.n	800c7ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c7aa:	4b26      	ldr	r3, [pc, #152]	@ (800c844 <UART_SetConfig+0xac4>)
 800c7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ae:	e00c      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7b0:	4b25      	ldr	r3, [pc, #148]	@ (800c848 <UART_SetConfig+0xac8>)
 800c7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7b4:	e009      	b.n	800c7ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7bc:	e005      	b.n	800c7ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7c8:	bf00      	nop
    }

    if (pclk != 0U)
 800c7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d021      	beq.n	800c814 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c84c <UART_SetConfig+0xacc>)
 800c7d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7de:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	085b      	lsrs	r3, r3, #1
 800c7e8:	441a      	add	r2, r3
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f6:	2b0f      	cmp	r3, #15
 800c7f8:	d909      	bls.n	800c80e <UART_SetConfig+0xa8e>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c800:	d205      	bcs.n	800c80e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	b29a      	uxth	r2, r3
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60da      	str	r2, [r3, #12]
 800c80c:	e002      	b.n	800c814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2201      	movs	r2, #1
 800c818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2201      	movs	r2, #1
 800c820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2200      	movs	r2, #0
 800c828:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2200      	movs	r2, #0
 800c82e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c830:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c834:	4618      	mov	r0, r3
 800c836:	3748      	adds	r7, #72	@ 0x48
 800c838:	46bd      	mov	sp, r7
 800c83a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c83e:	bf00      	nop
 800c840:	58024400 	.word	0x58024400
 800c844:	03d09000 	.word	0x03d09000
 800c848:	003d0900 	.word	0x003d0900
 800c84c:	08011a78 	.word	0x08011a78

0800c850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c85c:	f003 0308 	and.w	r3, r3, #8
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a0:	f003 0302 	and.w	r3, r3, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c2:	f003 0304 	and.w	r3, r3, #4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e4:	f003 0310 	and.w	r3, r3, #16
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d01a      	beq.n	800c966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c94a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c94e:	d10a      	bne.n	800c966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	430a      	orrs	r2, r1
 800c964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00a      	beq.n	800c988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	430a      	orrs	r2, r1
 800c986:	605a      	str	r2, [r3, #4]
  }
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b098      	sub	sp, #96	@ 0x60
 800c998:	af02      	add	r7, sp, #8
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9a4:	f7f7 fbb6 	bl	8004114 <HAL_GetTick>
 800c9a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0308 	and.w	r3, r3, #8
 800c9b4:	2b08      	cmp	r3, #8
 800c9b6:	d12f      	bne.n	800ca18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f88e 	bl	800cae8 <UART_WaitOnFlagUntilTimeout>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d022      	beq.n	800ca18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9f8:	e841 2300 	strex	r3, r2, [r1]
 800c9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1e6      	bne.n	800c9d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2220      	movs	r2, #32
 800ca08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e063      	b.n	800cae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	2b04      	cmp	r3, #4
 800ca24:	d149      	bne.n	800caba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f857 	bl	800cae8 <UART_WaitOnFlagUntilTimeout>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d03c      	beq.n	800caba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	e853 3f00 	ldrex	r3, [r3]
 800ca4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e6      	bne.n	800ca40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3308      	adds	r3, #8
 800ca78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	e853 3f00 	ldrex	r3, [r3]
 800ca80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3308      	adds	r3, #8
 800ca90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca92:	61fa      	str	r2, [r7, #28]
 800ca94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca96:	69b9      	ldr	r1, [r7, #24]
 800ca98:	69fa      	ldr	r2, [r7, #28]
 800ca9a:	e841 2300 	strex	r3, r2, [r1]
 800ca9e:	617b      	str	r3, [r7, #20]
   return(result);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1e5      	bne.n	800ca72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2220      	movs	r2, #32
 800caaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e012      	b.n	800cae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2220      	movs	r2, #32
 800cabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2220      	movs	r2, #32
 800cac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3758      	adds	r7, #88	@ 0x58
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	4613      	mov	r3, r2
 800caf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caf8:	e04f      	b.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d04b      	beq.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb02:	f7f7 fb07 	bl	8004114 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	69ba      	ldr	r2, [r7, #24]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d302      	bcc.n	800cb18 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d101      	bne.n	800cb1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e04e      	b.n	800cbba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0304 	and.w	r3, r3, #4
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d037      	beq.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	2b80      	cmp	r3, #128	@ 0x80
 800cb2e:	d034      	beq.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b40      	cmp	r3, #64	@ 0x40
 800cb34:	d031      	beq.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	f003 0308 	and.w	r3, r3, #8
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d110      	bne.n	800cb66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2208      	movs	r2, #8
 800cb4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f000 f839 	bl	800cbc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2208      	movs	r2, #8
 800cb56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e029      	b.n	800cbba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	69db      	ldr	r3, [r3, #28]
 800cb6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb74:	d111      	bne.n	800cb9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f000 f81f 	bl	800cbc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e00f      	b.n	800cbba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	69da      	ldr	r2, [r3, #28]
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4013      	ands	r3, r2
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	bf0c      	ite	eq
 800cbaa:	2301      	moveq	r3, #1
 800cbac:	2300      	movne	r3, #0
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d0a0      	beq.n	800cafa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
	...

0800cbc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b095      	sub	sp, #84	@ 0x54
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbea:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e6      	bne.n	800cbcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3308      	adds	r3, #8
 800cc04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	e853 3f00 	ldrex	r3, [r3]
 800cc0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	4b1e      	ldr	r3, [pc, #120]	@ (800cc8c <UART_EndRxTransfer+0xc8>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc26:	e841 2300 	strex	r3, r2, [r1]
 800cc2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1e5      	bne.n	800cbfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d118      	bne.n	800cc6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	e853 3f00 	ldrex	r3, [r3]
 800cc46:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	f023 0310 	bic.w	r3, r3, #16
 800cc4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	461a      	mov	r2, r3
 800cc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc58:	61bb      	str	r3, [r7, #24]
 800cc5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6979      	ldr	r1, [r7, #20]
 800cc5e:	69ba      	ldr	r2, [r7, #24]
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	613b      	str	r3, [r7, #16]
   return(result);
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e6      	bne.n	800cc3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc80:	bf00      	nop
 800cc82:	3754      	adds	r7, #84	@ 0x54
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	effffffe 	.word	0xeffffffe

0800cc90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d101      	bne.n	800cca6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cca2:	2302      	movs	r3, #2
 800cca4:	e027      	b.n	800ccf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2224      	movs	r2, #36	@ 0x24
 800ccb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0201 	bic.w	r2, r2, #1
 800cccc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ccd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2220      	movs	r2, #32
 800cce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d101      	bne.n	800cd1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd16:	2302      	movs	r3, #2
 800cd18:	e02d      	b.n	800cd76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2224      	movs	r2, #36	@ 0x24
 800cd26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0201 	bic.w	r2, r2, #1
 800cd40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f850 	bl	800cdfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2220      	movs	r2, #32
 800cd68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d101      	bne.n	800cd96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd92:	2302      	movs	r3, #2
 800cd94:	e02d      	b.n	800cdf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2224      	movs	r2, #36	@ 0x24
 800cda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f022 0201 	bic.w	r2, r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f812 	bl	800cdfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2220      	movs	r2, #32
 800cde4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d108      	bne.n	800ce1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce1c:	e031      	b.n	800ce82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce1e:	2310      	movs	r3, #16
 800ce20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce22:	2310      	movs	r3, #16
 800ce24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	0e5b      	lsrs	r3, r3, #25
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0307 	and.w	r3, r3, #7
 800ce34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	0f5b      	lsrs	r3, r3, #29
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	f003 0307 	and.w	r3, r3, #7
 800ce44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
 800ce48:	7b3a      	ldrb	r2, [r7, #12]
 800ce4a:	4911      	ldr	r1, [pc, #68]	@ (800ce90 <UARTEx_SetNbDataToProcess+0x94>)
 800ce4c:	5c8a      	ldrb	r2, [r1, r2]
 800ce4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce52:	7b3a      	ldrb	r2, [r7, #12]
 800ce54:	490f      	ldr	r1, [pc, #60]	@ (800ce94 <UARTEx_SetNbDataToProcess+0x98>)
 800ce56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	7b7a      	ldrb	r2, [r7, #13]
 800ce68:	4909      	ldr	r1, [pc, #36]	@ (800ce90 <UARTEx_SetNbDataToProcess+0x94>)
 800ce6a:	5c8a      	ldrb	r2, [r1, r2]
 800ce6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce70:	7b7a      	ldrb	r2, [r7, #13]
 800ce72:	4908      	ldr	r1, [pc, #32]	@ (800ce94 <UARTEx_SetNbDataToProcess+0x98>)
 800ce74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ce82:	bf00      	nop
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	08011a90 	.word	0x08011a90
 800ce94:	08011a98 	.word	0x08011a98

0800ce98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ce98:	b084      	sub	sp, #16
 800ce9a:	b480      	push	{r7}
 800ce9c:	b085      	sub	sp, #20
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	f107 001c 	add.w	r0, r7, #28
 800cea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ceae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ceb2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ceb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ceba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800cebe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	4b07      	ldr	r3, [pc, #28]	@ (800cee8 <SDMMC_Init+0x50>)
 800cecc:	4013      	ands	r3, r2
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	431a      	orrs	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	b004      	add	sp, #16
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	ffc02c00 	.word	0xffc02c00

0800ceec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f043 0203 	orr.w	r2, r3, #3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0303 	and.w	r3, r3, #3
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
	...

0800cf68 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cf86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cf8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cf92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <SDMMC_SendCommand+0x50>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	fffee0c0 	.word	0xfffee0c0

0800cfbc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	b2db      	uxtb	r3, r3
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b085      	sub	sp, #20
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
 800cfde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3314      	adds	r3, #20
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	4413      	add	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d022:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d028:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d02e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	4313      	orrs	r3, r2
 800d034:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	431a      	orrs	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d046:	2300      	movs	r3, #0

}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d062:	2310      	movs	r3, #16
 800d064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d06c:	2300      	movs	r3, #0
 800d06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d076:	f107 0308 	add.w	r3, r7, #8
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7ff ff73 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d086:	2110      	movs	r1, #16
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fa5f 	bl	800d54c <SDMMC_GetCmdResp1>
 800d08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d090:	69fb      	ldr	r3, [r7, #28]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3720      	adds	r7, #32
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b088      	sub	sp, #32
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
 800d0a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d0a8:	2311      	movs	r3, #17
 800d0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0bc:	f107 0308 	add.w	r3, r7, #8
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff ff50 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d0c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0cc:	2111      	movs	r1, #17
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fa3c 	bl	800d54c <SDMMC_GetCmdResp1>
 800d0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d0ee:	2312      	movs	r3, #18
 800d0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d102:	f107 0308 	add.w	r3, r7, #8
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff ff2d 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d10e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d112:	2112      	movs	r1, #18
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fa19 	bl	800d54c <SDMMC_GetCmdResp1>
 800d11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d11c:	69fb      	ldr	r3, [r7, #28]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b088      	sub	sp, #32
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d134:	2318      	movs	r3, #24
 800d136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d13e:	2300      	movs	r3, #0
 800d140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff ff0a 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d154:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d158:	2118      	movs	r1, #24
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f9f6 	bl	800d54c <SDMMC_GetCmdResp1>
 800d160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d162:	69fb      	ldr	r3, [r7, #28]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d17a:	2319      	movs	r3, #25
 800d17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d17e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff fee7 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d19a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d19e:	2119      	movs	r1, #25
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f9d3 	bl	800d54c <SDMMC_GetCmdResp1>
 800d1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a8:	69fb      	ldr	r3, [r7, #28]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d1c0:	230c      	movs	r3, #12
 800d1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ec:	f107 0308 	add.w	r3, r7, #8
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff feb8 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d1f8:	4a0b      	ldr	r2, [pc, #44]	@ (800d228 <SDMMC_CmdStopTransfer+0x74>)
 800d1fa:	210c      	movs	r1, #12
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f9a5 	bl	800d54c <SDMMC_GetCmdResp1>
 800d202:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d216:	d101      	bne.n	800d21c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d218:	2300      	movs	r3, #0
 800d21a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d21c:	69fb      	ldr	r3, [r7, #28]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3720      	adds	r7, #32
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	05f5e100 	.word	0x05f5e100

0800d22c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d23a:	2307      	movs	r3, #7
 800d23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d23e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d244:	2300      	movs	r3, #0
 800d246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d24c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d24e:	f107 0308 	add.w	r3, r7, #8
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fe87 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d25a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d25e:	2107      	movs	r1, #7
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f973 	bl	800d54c <SDMMC_GetCmdResp1>
 800d266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d268:	69fb      	ldr	r3, [r7, #28]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b088      	sub	sp, #32
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d282:	2300      	movs	r3, #0
 800d284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d28a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d28e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d290:	f107 0308 	add.w	r3, r7, #8
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fe66 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fb97 	bl	800d9d0 <SDMMC_GetCmdError>
 800d2a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b088      	sub	sp, #32
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d2b6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d2ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d2bc:	2308      	movs	r3, #8
 800d2be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2d0:	f107 0308 	add.w	r3, r7, #8
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7ff fe46 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fb29 	bl	800d934 <SDMMC_GetCmdResp7>
 800d2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2e4:	69fb      	ldr	r3, [r7, #28]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b088      	sub	sp, #32
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d2fc:	2337      	movs	r3, #55	@ 0x37
 800d2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d30a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d30e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d310:	f107 0308 	add.w	r3, r7, #8
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff fe26 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d31c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d320:	2137      	movs	r1, #55	@ 0x37
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f912 	bl	800d54c <SDMMC_GetCmdResp1>
 800d328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d32a:	69fb      	ldr	r3, [r7, #28]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d342:	2329      	movs	r3, #41	@ 0x29
 800d344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d356:	f107 0308 	add.w	r3, r7, #8
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fe03 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fa2e 	bl	800d7c4 <SDMMC_GetCmdResp3>
 800d368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d382:	2306      	movs	r3, #6
 800d384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d386:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d396:	f107 0308 	add.w	r3, r7, #8
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f7ff fde3 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d3a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3a6:	2106      	movs	r1, #6
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f8cf 	bl	800d54c <SDMMC_GetCmdResp1>
 800d3ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3b0:	69fb      	ldr	r3, [r7, #28]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3720      	adds	r7, #32
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b088      	sub	sp, #32
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d3c6:	2333      	movs	r3, #51	@ 0x33
 800d3c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff fdc1 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ea:	2133      	movs	r1, #51	@ 0x33
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f8ad 	bl	800d54c <SDMMC_GetCmdResp1>
 800d3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f4:	69fb      	ldr	r3, [r7, #28]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3720      	adds	r7, #32
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b088      	sub	sp, #32
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d406:	2300      	movs	r3, #0
 800d408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d40a:	2302      	movs	r3, #2
 800d40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d40e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d414:	2300      	movs	r3, #0
 800d416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d41e:	f107 0308 	add.w	r3, r7, #8
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff fd9f 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f980 	bl	800d730 <SDMMC_GetCmdResp2>
 800d430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d432:	69fb      	ldr	r3, [r7, #28]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d44a:	2309      	movs	r3, #9
 800d44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d44e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d454:	2300      	movs	r3, #0
 800d456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d45c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d45e:	f107 0308 	add.w	r3, r7, #8
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fd7f 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f960 	bl	800d730 <SDMMC_GetCmdResp2>
 800d470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d472:	69fb      	ldr	r3, [r7, #28]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d486:	2300      	movs	r3, #0
 800d488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d48a:	2303      	movs	r3, #3
 800d48c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d48e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d494:	2300      	movs	r3, #0
 800d496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d49c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d49e:	f107 0308 	add.w	r3, r7, #8
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff fd5f 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	2103      	movs	r1, #3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f9c8 	bl	800d844 <SDMMC_GetCmdResp6>
 800d4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d4ce:	230d      	movs	r3, #13
 800d4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e2:	f107 0308 	add.w	r3, r7, #8
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f7ff fd3d 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d4ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4f2:	210d      	movs	r1, #13
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f829 	bl	800d54c <SDMMC_GetCmdResp1>
 800d4fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3720      	adds	r7, #32
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b088      	sub	sp, #32
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d50e:	2300      	movs	r3, #0
 800d510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d512:	230d      	movs	r3, #13
 800d514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d526:	f107 0308 	add.w	r3, r7, #8
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fd1b 	bl	800cf68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d532:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d536:	210d      	movs	r1, #13
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f807 	bl	800d54c <SDMMC_GetCmdResp1>
 800d53e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d540:	69fb      	ldr	r3, [r7, #28]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	460b      	mov	r3, r1
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d55a:	4b70      	ldr	r3, [pc, #448]	@ (800d71c <SDMMC_GetCmdResp1+0x1d0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a70      	ldr	r2, [pc, #448]	@ (800d720 <SDMMC_GetCmdResp1+0x1d4>)
 800d560:	fba2 2303 	umull	r2, r3, r2, r3
 800d564:	0a5a      	lsrs	r2, r3, #9
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	fb02 f303 	mul.w	r3, r2, r3
 800d56c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	1e5a      	subs	r2, r3, #1
 800d572:	61fa      	str	r2, [r7, #28]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d578:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d57c:	e0c9      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d582:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d584:	69ba      	ldr	r2, [r7, #24]
 800d586:	4b67      	ldr	r3, [pc, #412]	@ (800d724 <SDMMC_GetCmdResp1+0x1d8>)
 800d588:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0ef      	beq.n	800d56e <SDMMC_GetCmdResp1+0x22>
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1ea      	bne.n	800d56e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d59c:	f003 0304 	and.w	r3, r3, #4
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d004      	beq.n	800d5ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2204      	movs	r2, #4
 800d5a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5aa:	2304      	movs	r3, #4
 800d5ac:	e0b1      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d004      	beq.n	800d5c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e0a6      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4a58      	ldr	r2, [pc, #352]	@ (800d728 <SDMMC_GetCmdResp1+0x1dc>)
 800d5c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7ff fcf6 	bl	800cfbc <SDMMC_GetCommandResponse>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d001      	beq.n	800d5de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e099      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d5de:	2100      	movs	r1, #0
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff fcf8 	bl	800cfd6 <SDMMC_GetResponse>
 800d5e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	4b50      	ldr	r3, [pc, #320]	@ (800d72c <SDMMC_GetCmdResp1+0x1e0>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e08d      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	da02      	bge.n	800d602 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d5fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d600:	e087      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d60c:	2340      	movs	r3, #64	@ 0x40
 800d60e:	e080      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d61a:	2380      	movs	r3, #128	@ 0x80
 800d61c:	e079      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d62c:	e071      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d63c:	e069      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64c:	e061      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d002      	beq.n	800d65e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d658:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d65c:	e059      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d66c:	e051      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d67c:	e049      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d688:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d68c:	e041      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d69c:	e039      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d6ac:	e031      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d6bc:	e029      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d6c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d6cc:	e021      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d6dc:	e019      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d6ec:	e011      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d6f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d6fc:	e009      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f003 0308 	and.w	r3, r3, #8
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d708:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d70c:	e001      	b.n	800d712 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d70e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	24000050 	.word	0x24000050
 800d720:	10624dd3 	.word	0x10624dd3
 800d724:	00200045 	.word	0x00200045
 800d728:	002000c5 	.word	0x002000c5
 800d72c:	fdffe008 	.word	0xfdffe008

0800d730 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d738:	4b1f      	ldr	r3, [pc, #124]	@ (800d7b8 <SDMMC_GetCmdResp2+0x88>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a1f      	ldr	r2, [pc, #124]	@ (800d7bc <SDMMC_GetCmdResp2+0x8c>)
 800d73e:	fba2 2303 	umull	r2, r3, r2, r3
 800d742:	0a5b      	lsrs	r3, r3, #9
 800d744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d748:	fb02 f303 	mul.w	r3, r2, r3
 800d74c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	1e5a      	subs	r2, r3, #1
 800d752:	60fa      	str	r2, [r7, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d758:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d75c:	e026      	b.n	800d7ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d762:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d0ef      	beq.n	800d74e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1ea      	bne.n	800d74e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d004      	beq.n	800d78e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2204      	movs	r2, #4
 800d788:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d78a:	2304      	movs	r3, #4
 800d78c:	e00e      	b.n	800d7ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d004      	beq.n	800d7a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e003      	b.n	800d7ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a06      	ldr	r2, [pc, #24]	@ (800d7c0 <SDMMC_GetCmdResp2+0x90>)
 800d7a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	24000050 	.word	0x24000050
 800d7bc:	10624dd3 	.word	0x10624dd3
 800d7c0:	002000c5 	.word	0x002000c5

0800d7c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d838 <SDMMC_GetCmdResp3+0x74>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a1a      	ldr	r2, [pc, #104]	@ (800d83c <SDMMC_GetCmdResp3+0x78>)
 800d7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d6:	0a5b      	lsrs	r3, r3, #9
 800d7d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	60fa      	str	r2, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7f0:	e01b      	b.n	800d82a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ef      	beq.n	800d7e2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1ea      	bne.n	800d7e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d004      	beq.n	800d822 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2204      	movs	r2, #4
 800d81c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d81e:	2304      	movs	r3, #4
 800d820:	e003      	b.n	800d82a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a06      	ldr	r2, [pc, #24]	@ (800d840 <SDMMC_GetCmdResp3+0x7c>)
 800d826:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	24000050 	.word	0x24000050
 800d83c:	10624dd3 	.word	0x10624dd3
 800d840:	002000c5 	.word	0x002000c5

0800d844 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	460b      	mov	r3, r1
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d852:	4b35      	ldr	r3, [pc, #212]	@ (800d928 <SDMMC_GetCmdResp6+0xe4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a35      	ldr	r2, [pc, #212]	@ (800d92c <SDMMC_GetCmdResp6+0xe8>)
 800d858:	fba2 2303 	umull	r2, r3, r2, r3
 800d85c:	0a5b      	lsrs	r3, r3, #9
 800d85e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d862:	fb02 f303 	mul.w	r3, r2, r3
 800d866:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	1e5a      	subs	r2, r3, #1
 800d86c:	61fa      	str	r2, [r7, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d872:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d876:	e052      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d87c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d884:	2b00      	cmp	r3, #0
 800d886:	d0ef      	beq.n	800d868 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1ea      	bne.n	800d868 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d896:	f003 0304 	and.w	r3, r3, #4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2204      	movs	r2, #4
 800d8a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8a4:	2304      	movs	r3, #4
 800d8a6:	e03a      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d004      	beq.n	800d8be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e02f      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff fb7c 	bl	800cfbc <SDMMC_GetCommandResponse>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d001      	beq.n	800d8d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e025      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4a16      	ldr	r2, [pc, #88]	@ (800d930 <SDMMC_GetCmdResp6+0xec>)
 800d8d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d8d8:	2100      	movs	r1, #0
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7ff fb7b 	bl	800cfd6 <SDMMC_GetResponse>
 800d8e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	0c1b      	lsrs	r3, r3, #16
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e011      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d908:	e009      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d918:	e001      	b.n	800d91e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d91a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3720      	adds	r7, #32
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	24000050 	.word	0x24000050
 800d92c:	10624dd3 	.word	0x10624dd3
 800d930:	002000c5 	.word	0x002000c5

0800d934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d93c:	4b22      	ldr	r3, [pc, #136]	@ (800d9c8 <SDMMC_GetCmdResp7+0x94>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a22      	ldr	r2, [pc, #136]	@ (800d9cc <SDMMC_GetCmdResp7+0x98>)
 800d942:	fba2 2303 	umull	r2, r3, r2, r3
 800d946:	0a5b      	lsrs	r3, r3, #9
 800d948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d94c:	fb02 f303 	mul.w	r3, r2, r3
 800d950:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	1e5a      	subs	r2, r3, #1
 800d956:	60fa      	str	r2, [r7, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d95c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d960:	e02c      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d966:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0ef      	beq.n	800d952 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1ea      	bne.n	800d952 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d004      	beq.n	800d992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2204      	movs	r2, #4
 800d98c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d98e:	2304      	movs	r3, #4
 800d990:	e014      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d004      	beq.n	800d9a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e009      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2240      	movs	r2, #64	@ 0x40
 800d9b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d9ba:	2300      	movs	r3, #0

}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	24000050 	.word	0x24000050
 800d9cc:	10624dd3 	.word	0x10624dd3

0800d9d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d9d8:	4b11      	ldr	r3, [pc, #68]	@ (800da20 <SDMMC_GetCmdError+0x50>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a11      	ldr	r2, [pc, #68]	@ (800da24 <SDMMC_GetCmdError+0x54>)
 800d9de:	fba2 2303 	umull	r2, r3, r2, r3
 800d9e2:	0a5b      	lsrs	r3, r3, #9
 800d9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	1e5a      	subs	r2, r3, #1
 800d9f2:	60fa      	str	r2, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9fc:	e009      	b.n	800da12 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0f1      	beq.n	800d9ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a06      	ldr	r2, [pc, #24]	@ (800da28 <SDMMC_GetCmdError+0x58>)
 800da0e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	24000050 	.word	0x24000050
 800da24:	10624dd3 	.word	0x10624dd3
 800da28:	002000c5 	.word	0x002000c5

0800da2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da30:	4904      	ldr	r1, [pc, #16]	@ (800da44 <MX_FATFS_Init+0x18>)
 800da32:	4805      	ldr	r0, [pc, #20]	@ (800da48 <MX_FATFS_Init+0x1c>)
 800da34:	f002 fc08 	bl	8010248 <FATFS_LinkDriver>
 800da38:	4603      	mov	r3, r0
 800da3a:	461a      	mov	r2, r3
 800da3c:	4b03      	ldr	r3, [pc, #12]	@ (800da4c <MX_FATFS_Init+0x20>)
 800da3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800da40:	bf00      	nop
 800da42:	bd80      	pop	{r7, pc}
 800da44:	24000578 	.word	0x24000578
 800da48:	08011aa0 	.word	0x08011aa0
 800da4c:	24000574 	.word	0x24000574

0800da50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800da50:	b480      	push	{r7}
 800da52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800da54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800da56:	4618      	mov	r0, r3
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	68f9      	ldr	r1, [r7, #12]
 800da76:	4806      	ldr	r0, [pc, #24]	@ (800da90 <BSP_SD_ReadBlocks_DMA+0x30>)
 800da78:	f7fc f95e 	bl	8009d38 <HAL_SD_ReadBlocks_DMA>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da86:	7dfb      	ldrb	r3, [r7, #23]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	24000404 	.word	0x24000404

0800da94 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	68f9      	ldr	r1, [r7, #12]
 800daaa:	4806      	ldr	r0, [pc, #24]	@ (800dac4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800daac:	f7fc f9ec 	bl	8009e88 <HAL_SD_WriteBlocks_DMA>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800daba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	24000404 	.word	0x24000404

0800dac8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dacc:	4805      	ldr	r0, [pc, #20]	@ (800dae4 <BSP_SD_GetCardState+0x1c>)
 800dace:	f7fc ffe5 	bl	800aa9c <HAL_SD_GetCardState>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	bf14      	ite	ne
 800dad8:	2301      	movne	r3, #1
 800dada:	2300      	moveq	r3, #0
 800dadc:	b2db      	uxtb	r3, r3
}
 800dade:	4618      	mov	r0, r3
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	24000404 	.word	0x24000404

0800dae8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800daf0:	6879      	ldr	r1, [r7, #4]
 800daf2:	4803      	ldr	r0, [pc, #12]	@ (800db00 <BSP_SD_GetCardInfo+0x18>)
 800daf4:	f7fc fe94 	bl	800a820 <HAL_SD_GetCardInfo>
}
 800daf8:	bf00      	nop
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	24000404 	.word	0x24000404

0800db04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800db0c:	f000 fa14 	bl	800df38 <BSP_SD_WriteCpltCallback>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db20:	f000 fa16 	bl	800df50 <BSP_SD_ReadCpltCallback>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800db34:	f7f6 faee 	bl	8004114 <HAL_GetTick>
 800db38:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800db3a:	e006      	b.n	800db4a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db3c:	f7ff ffc4 	bl	800dac8 <BSP_SD_GetCardState>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800db46:	2300      	movs	r3, #0
 800db48:	e009      	b.n	800db5e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800db4a:	f7f6 fae3 	bl	8004114 <HAL_GetTick>
 800db4e:	4602      	mov	r2, r0
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	1ad3      	subs	r3, r2, r3
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	429a      	cmp	r2, r3
 800db58:	d8f0      	bhi.n	800db3c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800db5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800db72:	4b0b      	ldr	r3, [pc, #44]	@ (800dba0 <SD_CheckStatus+0x38>)
 800db74:	2201      	movs	r2, #1
 800db76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800db78:	f7ff ffa6 	bl	800dac8 <BSP_SD_GetCardState>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d107      	bne.n	800db92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800db82:	4b07      	ldr	r3, [pc, #28]	@ (800dba0 <SD_CheckStatus+0x38>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	b2db      	uxtb	r3, r3
 800db88:	f023 0301 	bic.w	r3, r3, #1
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	4b04      	ldr	r3, [pc, #16]	@ (800dba0 <SD_CheckStatus+0x38>)
 800db90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db92:	4b03      	ldr	r3, [pc, #12]	@ (800dba0 <SD_CheckStatus+0x38>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	b2db      	uxtb	r3, r3
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	2400005d 	.word	0x2400005d

0800dba4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800dbae:	79fb      	ldrb	r3, [r7, #7]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff ffd9 	bl	800db68 <SD_CheckStatus>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4b04      	ldr	r3, [pc, #16]	@ (800dbcc <SD_initialize+0x28>)
 800dbbc:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800dbbe:	4b03      	ldr	r3, [pc, #12]	@ (800dbcc <SD_initialize+0x28>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	b2db      	uxtb	r3, r3
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	2400005d 	.word	0x2400005d

0800dbd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7ff ffc3 	bl	800db68 <SD_CheckStatus>
 800dbe2:	4603      	mov	r3, r0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60b9      	str	r1, [r7, #8]
 800dbf4:	607a      	str	r2, [r7, #4]
 800dbf6:	603b      	str	r3, [r7, #0]
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dc00:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dc04:	f7ff ff92 	bl	800db2c <SD_CheckStatusWithTimeout>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	da01      	bge.n	800dc12 <SD_read+0x26>
  {
    return res;
 800dc0e:	7ffb      	ldrb	r3, [r7, #31]
 800dc10:	e08b      	b.n	800dd2a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f003 0303 	and.w	r3, r3, #3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d13b      	bne.n	800dc94 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f7ff ff1d 	bl	800da60 <BSP_SD_ReadBlocks_DMA>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d17d      	bne.n	800dd28 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dc2c:	4b41      	ldr	r3, [pc, #260]	@ (800dd34 <SD_read+0x148>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dc32:	f7f6 fa6f 	bl	8004114 <HAL_GetTick>
 800dc36:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dc38:	bf00      	nop
 800dc3a:	4b3e      	ldr	r3, [pc, #248]	@ (800dd34 <SD_read+0x148>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d108      	bne.n	800dc54 <SD_read+0x68>
 800dc42:	f7f6 fa67 	bl	8004114 <HAL_GetTick>
 800dc46:	4602      	mov	r2, r0
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d9f2      	bls.n	800dc3a <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800dc54:	4b37      	ldr	r3, [pc, #220]	@ (800dd34 <SD_read+0x148>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d102      	bne.n	800dc62 <SD_read+0x76>
      {
        res = RES_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	77fb      	strb	r3, [r7, #31]
 800dc60:	e062      	b.n	800dd28 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800dc62:	4b34      	ldr	r3, [pc, #208]	@ (800dd34 <SD_read+0x148>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dc68:	f7f6 fa54 	bl	8004114 <HAL_GetTick>
 800dc6c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dc6e:	e007      	b.n	800dc80 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc70:	f7ff ff2a 	bl	800dac8 <BSP_SD_GetCardState>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d102      	bne.n	800dc80 <SD_read+0x94>
          {
            res = RES_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dc7e:	e053      	b.n	800dd28 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dc80:	f7f6 fa48 	bl	8004114 <HAL_GetTick>
 800dc84:	4602      	mov	r2, r0
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d9ee      	bls.n	800dc70 <SD_read+0x84>
 800dc92:	e049      	b.n	800dd28 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800dc94:	2300      	movs	r3, #0
 800dc96:	61bb      	str	r3, [r7, #24]
 800dc98:	e037      	b.n	800dd0a <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	4619      	mov	r1, r3
 800dca4:	4824      	ldr	r0, [pc, #144]	@ (800dd38 <SD_read+0x14c>)
 800dca6:	f7ff fedb 	bl	800da60 <BSP_SD_ReadBlocks_DMA>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800dcae:	7fbb      	ldrb	r3, [r7, #30]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d12f      	bne.n	800dd14 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800dcb4:	f7f6 fa2e 	bl	8004114 <HAL_GetTick>
 800dcb8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dcba:	bf00      	nop
 800dcbc:	4b1d      	ldr	r3, [pc, #116]	@ (800dd34 <SD_read+0x148>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d108      	bne.n	800dcd6 <SD_read+0xea>
 800dcc4:	f7f6 fa26 	bl	8004114 <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d9f2      	bls.n	800dcbc <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 800dcd6:	4b17      	ldr	r3, [pc, #92]	@ (800dd34 <SD_read+0x148>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d102      	bne.n	800dce4 <SD_read+0xf8>
          {
            res = RES_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	77fb      	strb	r3, [r7, #31]
            break;
 800dce2:	e018      	b.n	800dd16 <SD_read+0x12a>
          }
          ReadStatus = 0;
 800dce4:	4b13      	ldr	r3, [pc, #76]	@ (800dd34 <SD_read+0x148>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	4a12      	ldr	r2, [pc, #72]	@ (800dd38 <SD_read+0x14c>)
 800dcee:	4618      	mov	r0, r3
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f003 f825 	bl	8010d46 <memcpy>
          buff += BLOCKSIZE;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800dd02:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	3301      	adds	r3, #1
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d8c3      	bhi.n	800dc9a <SD_read+0xae>
 800dd12:	e000      	b.n	800dd16 <SD_read+0x12a>
        }
        else
        {
          break;
 800dd14:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d104      	bne.n	800dd28 <SD_read+0x13c>
 800dd1e:	7fbb      	ldrb	r3, [r7, #30]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <SD_read+0x13c>
        res = RES_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 800dd28:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	24000be0 	.word	0x24000be0
 800dd38:	240009dc 	.word	0x240009dc

0800dd3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b088      	sub	sp, #32
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800dd50:	4b4b      	ldr	r3, [pc, #300]	@ (800de80 <SD_write+0x144>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd56:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dd5a:	f7ff fee7 	bl	800db2c <SD_CheckStatusWithTimeout>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	da01      	bge.n	800dd68 <SD_write+0x2c>
  {
    return res;
 800dd64:	7ffb      	ldrb	r3, [r7, #31]
 800dd66:	e087      	b.n	800de78 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f003 0303 	and.w	r3, r3, #3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d138      	bne.n	800dde4 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	68b8      	ldr	r0, [r7, #8]
 800dd78:	f7ff fe8c 	bl	800da94 <BSP_SD_WriteBlocks_DMA>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d179      	bne.n	800de76 <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dd82:	f7f6 f9c7 	bl	8004114 <HAL_GetTick>
 800dd86:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd88:	bf00      	nop
 800dd8a:	4b3d      	ldr	r3, [pc, #244]	@ (800de80 <SD_write+0x144>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d108      	bne.n	800dda4 <SD_write+0x68>
 800dd92:	f7f6 f9bf 	bl	8004114 <HAL_GetTick>
 800dd96:	4602      	mov	r2, r0
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d9f2      	bls.n	800dd8a <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800dda4:	4b36      	ldr	r3, [pc, #216]	@ (800de80 <SD_write+0x144>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <SD_write+0x76>
      {
        res = RES_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	77fb      	strb	r3, [r7, #31]
 800ddb0:	e061      	b.n	800de76 <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 800ddb2:	4b33      	ldr	r3, [pc, #204]	@ (800de80 <SD_write+0x144>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ddb8:	f7f6 f9ac 	bl	8004114 <HAL_GetTick>
 800ddbc:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ddbe:	e007      	b.n	800ddd0 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ddc0:	f7ff fe82 	bl	800dac8 <BSP_SD_GetCardState>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d102      	bne.n	800ddd0 <SD_write+0x94>
          {
            res = RES_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	77fb      	strb	r3, [r7, #31]
            break;
 800ddce:	e052      	b.n	800de76 <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ddd0:	f7f6 f9a0 	bl	8004114 <HAL_GetTick>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d9ee      	bls.n	800ddc0 <SD_write+0x84>
 800dde2:	e048      	b.n	800de76 <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800dde4:	2300      	movs	r3, #0
 800dde6:	61bb      	str	r3, [r7, #24]
 800dde8:	e034      	b.n	800de54 <SD_write+0x118>
      {
        WriteStatus = 0;
 800ddea:	4b25      	ldr	r3, [pc, #148]	@ (800de80 <SD_write+0x144>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800ddf0:	4a24      	ldr	r2, [pc, #144]	@ (800de84 <SD_write+0x148>)
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f002 ffa2 	bl	8010d46 <memcpy>
        buff += BLOCKSIZE;
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800de08:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	4619      	mov	r1, r3
 800de14:	481b      	ldr	r0, [pc, #108]	@ (800de84 <SD_write+0x148>)
 800de16:	f7ff fe3d 	bl	800da94 <BSP_SD_WriteBlocks_DMA>
 800de1a:	4603      	mov	r3, r0
 800de1c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800de1e:	7fbb      	ldrb	r3, [r7, #30]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d11c      	bne.n	800de5e <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800de24:	f7f6 f976 	bl	8004114 <HAL_GetTick>
 800de28:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de2a:	bf00      	nop
 800de2c:	4b14      	ldr	r3, [pc, #80]	@ (800de80 <SD_write+0x144>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d108      	bne.n	800de46 <SD_write+0x10a>
 800de34:	f7f6 f96e 	bl	8004114 <HAL_GetTick>
 800de38:	4602      	mov	r2, r0
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800de42:	4293      	cmp	r3, r2
 800de44:	d9f2      	bls.n	800de2c <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 800de46:	4b0e      	ldr	r3, [pc, #56]	@ (800de80 <SD_write+0x144>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <SD_write+0x126>
      for (i = 0; i < count; i++)
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	3301      	adds	r3, #1
 800de52:	61bb      	str	r3, [r7, #24]
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d8c6      	bhi.n	800ddea <SD_write+0xae>
 800de5c:	e002      	b.n	800de64 <SD_write+0x128>
          }

        }
        else
        {
          break;
 800de5e:	bf00      	nop
 800de60:	e000      	b.n	800de64 <SD_write+0x128>
            break;
 800de62:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	683a      	ldr	r2, [r7, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d104      	bne.n	800de76 <SD_write+0x13a>
 800de6c:	7fbb      	ldrb	r3, [r7, #30]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <SD_write+0x13a>
        res = RES_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 800de76:	7ffb      	ldrb	r3, [r7, #31]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3720      	adds	r7, #32
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	24000bdc 	.word	0x24000bdc
 800de84:	240009dc 	.word	0x240009dc

0800de88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08c      	sub	sp, #48	@ 0x30
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	4603      	mov	r3, r0
 800de90:	603a      	str	r2, [r7, #0]
 800de92:	71fb      	strb	r3, [r7, #7]
 800de94:	460b      	mov	r3, r1
 800de96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de9e:	4b25      	ldr	r3, [pc, #148]	@ (800df34 <SD_ioctl+0xac>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <SD_ioctl+0x28>
 800deac:	2303      	movs	r3, #3
 800deae:	e03c      	b.n	800df2a <SD_ioctl+0xa2>

  switch (cmd)
 800deb0:	79bb      	ldrb	r3, [r7, #6]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d834      	bhi.n	800df20 <SD_ioctl+0x98>
 800deb6:	a201      	add	r2, pc, #4	@ (adr r2, 800debc <SD_ioctl+0x34>)
 800deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debc:	0800decd 	.word	0x0800decd
 800dec0:	0800ded5 	.word	0x0800ded5
 800dec4:	0800deed 	.word	0x0800deed
 800dec8:	0800df07 	.word	0x0800df07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ded2:	e028      	b.n	800df26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ded4:	f107 0308 	add.w	r3, r7, #8
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff fe05 	bl	800dae8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dede:	6a3a      	ldr	r2, [r7, #32]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800deea:	e01c      	b.n	800df26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800deec:	f107 0308 	add.w	r3, r7, #8
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff fdf9 	bl	800dae8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800def6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def8:	b29a      	uxth	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800df04:	e00f      	b.n	800df26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df06:	f107 0308 	add.w	r3, r7, #8
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff fdec 	bl	800dae8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df12:	0a5a      	lsrs	r2, r3, #9
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800df1e:	e002      	b.n	800df26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df20:	2304      	movs	r3, #4
 800df22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800df26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3730      	adds	r7, #48	@ 0x30
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	2400005d 	.word	0x2400005d

0800df38 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800df3c:	4b03      	ldr	r3, [pc, #12]	@ (800df4c <BSP_SD_WriteCpltCallback+0x14>)
 800df3e:	2201      	movs	r2, #1
 800df40:	601a      	str	r2, [r3, #0]
}
 800df42:	bf00      	nop
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	24000bdc 	.word	0x24000bdc

0800df50 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800df50:	b480      	push	{r7}
 800df52:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800df54:	4b03      	ldr	r3, [pc, #12]	@ (800df64 <BSP_SD_ReadCpltCallback+0x14>)
 800df56:	2201      	movs	r2, #1
 800df58:	601a      	str	r2, [r3, #0]
}
 800df5a:	bf00      	nop
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	24000be0 	.word	0x24000be0

0800df68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	4a08      	ldr	r2, [pc, #32]	@ (800df98 <disk_status+0x30>)
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	79fa      	ldrb	r2, [r7, #7]
 800df80:	4905      	ldr	r1, [pc, #20]	@ (800df98 <disk_status+0x30>)
 800df82:	440a      	add	r2, r1
 800df84:	7a12      	ldrb	r2, [r2, #8]
 800df86:	4610      	mov	r0, r2
 800df88:	4798      	blx	r3
 800df8a:	4603      	mov	r3, r0
 800df8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	24000c0c 	.word	0x24000c0c

0800df9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	4a0e      	ldr	r2, [pc, #56]	@ (800dfe8 <disk_initialize+0x4c>)
 800dfae:	5cd3      	ldrb	r3, [r2, r3]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d114      	bne.n	800dfde <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	4a0c      	ldr	r2, [pc, #48]	@ (800dfe8 <disk_initialize+0x4c>)
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	79fa      	ldrb	r2, [r7, #7]
 800dfc2:	4909      	ldr	r1, [pc, #36]	@ (800dfe8 <disk_initialize+0x4c>)
 800dfc4:	440a      	add	r2, r1
 800dfc6:	7a12      	ldrb	r2, [r2, #8]
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d103      	bne.n	800dfde <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	4a03      	ldr	r2, [pc, #12]	@ (800dfe8 <disk_initialize+0x4c>)
 800dfda:	2101      	movs	r1, #1
 800dfdc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800dfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	24000c0c 	.word	0x24000c0c

0800dfec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dfec:	b590      	push	{r4, r7, lr}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60b9      	str	r1, [r7, #8]
 800dff4:	607a      	str	r2, [r7, #4]
 800dff6:	603b      	str	r3, [r7, #0]
 800dff8:	4603      	mov	r3, r0
 800dffa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	4a0a      	ldr	r2, [pc, #40]	@ (800e028 <disk_read+0x3c>)
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	689c      	ldr	r4, [r3, #8]
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	4a07      	ldr	r2, [pc, #28]	@ (800e028 <disk_read+0x3c>)
 800e00c:	4413      	add	r3, r2
 800e00e:	7a18      	ldrb	r0, [r3, #8]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	68b9      	ldr	r1, [r7, #8]
 800e016:	47a0      	blx	r4
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}
 800e026:	bf00      	nop
 800e028:	24000c0c 	.word	0x24000c0c

0800e02c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e02c:	b590      	push	{r4, r7, lr}
 800e02e:	b087      	sub	sp, #28
 800e030:	af00      	add	r7, sp, #0
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	607a      	str	r2, [r7, #4]
 800e036:	603b      	str	r3, [r7, #0]
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	4a0a      	ldr	r2, [pc, #40]	@ (800e068 <disk_write+0x3c>)
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	4413      	add	r3, r2
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	68dc      	ldr	r4, [r3, #12]
 800e048:	7bfb      	ldrb	r3, [r7, #15]
 800e04a:	4a07      	ldr	r2, [pc, #28]	@ (800e068 <disk_write+0x3c>)
 800e04c:	4413      	add	r3, r2
 800e04e:	7a18      	ldrb	r0, [r3, #8]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	68b9      	ldr	r1, [r7, #8]
 800e056:	47a0      	blx	r4
 800e058:	4603      	mov	r3, r0
 800e05a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	bd90      	pop	{r4, r7, pc}
 800e066:	bf00      	nop
 800e068:	24000c0c 	.word	0x24000c0c

0800e06c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	4603      	mov	r3, r0
 800e074:	603a      	str	r2, [r7, #0]
 800e076:	71fb      	strb	r3, [r7, #7]
 800e078:	460b      	mov	r3, r1
 800e07a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e07c:	79fb      	ldrb	r3, [r7, #7]
 800e07e:	4a09      	ldr	r2, [pc, #36]	@ (800e0a4 <disk_ioctl+0x38>)
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	79fa      	ldrb	r2, [r7, #7]
 800e08a:	4906      	ldr	r1, [pc, #24]	@ (800e0a4 <disk_ioctl+0x38>)
 800e08c:	440a      	add	r2, r1
 800e08e:	7a10      	ldrb	r0, [r2, #8]
 800e090:	79b9      	ldrb	r1, [r7, #6]
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	4798      	blx	r3
 800e096:	4603      	mov	r3, r0
 800e098:	73fb      	strb	r3, [r7, #15]
  return res;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	24000c0c 	.word	0x24000c0c

0800e0a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e0b8:	89fb      	ldrh	r3, [r7, #14]
 800e0ba:	021b      	lsls	r3, r3, #8
 800e0bc:	b21a      	sxth	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b21b      	sxth	r3, r3
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	b21b      	sxth	r3, r3
 800e0c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e0ca:	89fb      	ldrh	r3, [r7, #14]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3303      	adds	r3, #3
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	021b      	lsls	r3, r3, #8
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	3202      	adds	r2, #2
 800e0f0:	7812      	ldrb	r2, [r2, #0]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	021b      	lsls	r3, r3, #8
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	3201      	adds	r2, #1
 800e0fe:	7812      	ldrb	r2, [r2, #0]
 800e100:	4313      	orrs	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	021b      	lsls	r3, r3, #8
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	7812      	ldrb	r2, [r2, #0]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e110:	68fb      	ldr	r3, [r7, #12]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e11e:	b480      	push	{r7}
 800e120:	b083      	sub	sp, #12
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	460b      	mov	r3, r1
 800e128:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	887a      	ldrh	r2, [r7, #2]
 800e132:	b2d2      	uxtb	r2, r2
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	887b      	ldrh	r3, [r7, #2]
 800e138:	0a1b      	lsrs	r3, r3, #8
 800e13a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	1c5a      	adds	r2, r3, #1
 800e140:	607a      	str	r2, [r7, #4]
 800e142:	887a      	ldrh	r2, [r7, #2]
 800e144:	b2d2      	uxtb	r2, r2
 800e146:	701a      	strb	r2, [r3, #0]
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	b2d2      	uxtb	r2, r2
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	0a1b      	lsrs	r3, r3, #8
 800e16e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	b2d2      	uxtb	r2, r2
 800e17a:	701a      	strb	r2, [r3, #0]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	b2d2      	uxtb	r2, r2
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	607a      	str	r2, [r7, #4]
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e1ac:	b480      	push	{r7}
 800e1ae:	b087      	sub	sp, #28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00d      	beq.n	800e1e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	1c53      	adds	r3, r2, #1
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	1c59      	adds	r1, r3, #1
 800e1d0:	6179      	str	r1, [r7, #20]
 800e1d2:	7812      	ldrb	r2, [r2, #0]
 800e1d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1f1      	bne.n	800e1c6 <mem_cpy+0x1a>
	}
}
 800e1e2:	bf00      	nop
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr

0800e1ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e1ee:	b480      	push	{r7}
 800e1f0:	b087      	sub	sp, #28
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	60f8      	str	r0, [r7, #12]
 800e1f6:	60b9      	str	r1, [r7, #8]
 800e1f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	1c5a      	adds	r2, r3, #1
 800e202:	617a      	str	r2, [r7, #20]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	b2d2      	uxtb	r2, r2
 800e208:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	607b      	str	r3, [r7, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1f3      	bne.n	800e1fe <mem_set+0x10>
}
 800e216:	bf00      	nop
 800e218:	bf00      	nop
 800e21a:	371c      	adds	r7, #28
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e224:	b480      	push	{r7}
 800e226:	b089      	sub	sp, #36	@ 0x24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	61fb      	str	r3, [r7, #28]
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	1c5a      	adds	r2, r3, #1
 800e240:	61fa      	str	r2, [r7, #28]
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	4619      	mov	r1, r3
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	61ba      	str	r2, [r7, #24]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	1acb      	subs	r3, r1, r3
 800e250:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3b01      	subs	r3, #1
 800e256:	607b      	str	r3, [r7, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <mem_cmp+0x40>
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d0eb      	beq.n	800e23c <mem_cmp+0x18>

	return r;
 800e264:	697b      	ldr	r3, [r7, #20]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3724      	adds	r7, #36	@ 0x24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e27c:	e002      	b.n	800e284 <chk_chr+0x12>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	3301      	adds	r3, #1
 800e282:	607b      	str	r3, [r7, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <chk_chr+0x26>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	461a      	mov	r2, r3
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	4293      	cmp	r3, r2
 800e296:	d1f2      	bne.n	800e27e <chk_chr+0xc>
	return *str;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	781b      	ldrb	r3, [r3, #0]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	60fb      	str	r3, [r7, #12]
 800e2ba:	e029      	b.n	800e310 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e2bc:	4a27      	ldr	r2, [pc, #156]	@ (800e35c <chk_lock+0xb4>)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	011b      	lsls	r3, r3, #4
 800e2c2:	4413      	add	r3, r2
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d01d      	beq.n	800e306 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e2ca:	4a24      	ldr	r2, [pc, #144]	@ (800e35c <chk_lock+0xb4>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	011b      	lsls	r3, r3, #4
 800e2d0:	4413      	add	r3, r2
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d116      	bne.n	800e30a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800e35c <chk_lock+0xb4>)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	011b      	lsls	r3, r3, #4
 800e2e2:	4413      	add	r3, r2
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d10c      	bne.n	800e30a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e2f0:	4a1a      	ldr	r2, [pc, #104]	@ (800e35c <chk_lock+0xb4>)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	011b      	lsls	r3, r3, #4
 800e2f6:	4413      	add	r3, r2
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e300:	429a      	cmp	r2, r3
 800e302:	d102      	bne.n	800e30a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e304:	e007      	b.n	800e316 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e306:	2301      	movs	r3, #1
 800e308:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3301      	adds	r3, #1
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d9d2      	bls.n	800e2bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d109      	bne.n	800e330 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <chk_lock+0x80>
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	2b02      	cmp	r3, #2
 800e326:	d101      	bne.n	800e32c <chk_lock+0x84>
 800e328:	2300      	movs	r3, #0
 800e32a:	e010      	b.n	800e34e <chk_lock+0xa6>
 800e32c:	2312      	movs	r3, #18
 800e32e:	e00e      	b.n	800e34e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d108      	bne.n	800e348 <chk_lock+0xa0>
 800e336:	4a09      	ldr	r2, [pc, #36]	@ (800e35c <chk_lock+0xb4>)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	011b      	lsls	r3, r3, #4
 800e33c:	4413      	add	r3, r2
 800e33e:	330c      	adds	r3, #12
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e346:	d101      	bne.n	800e34c <chk_lock+0xa4>
 800e348:	2310      	movs	r3, #16
 800e34a:	e000      	b.n	800e34e <chk_lock+0xa6>
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	24000bec 	.word	0x24000bec

0800e360 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e366:	2300      	movs	r3, #0
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	e002      	b.n	800e372 <enq_lock+0x12>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3301      	adds	r3, #1
 800e370:	607b      	str	r3, [r7, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d806      	bhi.n	800e386 <enq_lock+0x26>
 800e378:	4a09      	ldr	r2, [pc, #36]	@ (800e3a0 <enq_lock+0x40>)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	011b      	lsls	r3, r3, #4
 800e37e:	4413      	add	r3, r2
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1f2      	bne.n	800e36c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	bf14      	ite	ne
 800e38c:	2301      	movne	r3, #1
 800e38e:	2300      	moveq	r3, #0
 800e390:	b2db      	uxtb	r3, r3
}
 800e392:	4618      	mov	r0, r3
 800e394:	370c      	adds	r7, #12
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	24000bec 	.word	0x24000bec

0800e3a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	e01f      	b.n	800e3f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e3b4:	4a41      	ldr	r2, [pc, #260]	@ (800e4bc <inc_lock+0x118>)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	011b      	lsls	r3, r3, #4
 800e3ba:	4413      	add	r3, r2
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d113      	bne.n	800e3ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e3c6:	4a3d      	ldr	r2, [pc, #244]	@ (800e4bc <inc_lock+0x118>)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	011b      	lsls	r3, r3, #4
 800e3cc:	4413      	add	r3, r2
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d109      	bne.n	800e3ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e3da:	4a38      	ldr	r2, [pc, #224]	@ (800e4bc <inc_lock+0x118>)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	4413      	add	r3, r2
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d006      	beq.n	800e3fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	60fb      	str	r3, [r7, #12]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d9dc      	bls.n	800e3b4 <inc_lock+0x10>
 800e3fa:	e000      	b.n	800e3fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e3fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d132      	bne.n	800e46a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e404:	2300      	movs	r3, #0
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	e002      	b.n	800e410 <inc_lock+0x6c>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3301      	adds	r3, #1
 800e40e:	60fb      	str	r3, [r7, #12]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d806      	bhi.n	800e424 <inc_lock+0x80>
 800e416:	4a29      	ldr	r2, [pc, #164]	@ (800e4bc <inc_lock+0x118>)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	011b      	lsls	r3, r3, #4
 800e41c:	4413      	add	r3, r2
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1f2      	bne.n	800e40a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b02      	cmp	r3, #2
 800e428:	d101      	bne.n	800e42e <inc_lock+0x8a>
 800e42a:	2300      	movs	r3, #0
 800e42c:	e040      	b.n	800e4b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	4922      	ldr	r1, [pc, #136]	@ (800e4bc <inc_lock+0x118>)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	011b      	lsls	r3, r3, #4
 800e438:	440b      	add	r3, r1
 800e43a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	689a      	ldr	r2, [r3, #8]
 800e440:	491e      	ldr	r1, [pc, #120]	@ (800e4bc <inc_lock+0x118>)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	011b      	lsls	r3, r3, #4
 800e446:	440b      	add	r3, r1
 800e448:	3304      	adds	r3, #4
 800e44a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	695a      	ldr	r2, [r3, #20]
 800e450:	491a      	ldr	r1, [pc, #104]	@ (800e4bc <inc_lock+0x118>)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	011b      	lsls	r3, r3, #4
 800e456:	440b      	add	r3, r1
 800e458:	3308      	adds	r3, #8
 800e45a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e45c:	4a17      	ldr	r2, [pc, #92]	@ (800e4bc <inc_lock+0x118>)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	4413      	add	r3, r2
 800e464:	330c      	adds	r3, #12
 800e466:	2200      	movs	r2, #0
 800e468:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d009      	beq.n	800e484 <inc_lock+0xe0>
 800e470:	4a12      	ldr	r2, [pc, #72]	@ (800e4bc <inc_lock+0x118>)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	011b      	lsls	r3, r3, #4
 800e476:	4413      	add	r3, r2
 800e478:	330c      	adds	r3, #12
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <inc_lock+0xe0>
 800e480:	2300      	movs	r3, #0
 800e482:	e015      	b.n	800e4b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d108      	bne.n	800e49c <inc_lock+0xf8>
 800e48a:	4a0c      	ldr	r2, [pc, #48]	@ (800e4bc <inc_lock+0x118>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	011b      	lsls	r3, r3, #4
 800e490:	4413      	add	r3, r2
 800e492:	330c      	adds	r3, #12
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	3301      	adds	r3, #1
 800e498:	b29a      	uxth	r2, r3
 800e49a:	e001      	b.n	800e4a0 <inc_lock+0xfc>
 800e49c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4a0:	4906      	ldr	r1, [pc, #24]	@ (800e4bc <inc_lock+0x118>)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	011b      	lsls	r3, r3, #4
 800e4a6:	440b      	add	r3, r1
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	3301      	adds	r3, #1
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	24000bec 	.word	0x24000bec

0800e4c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	607b      	str	r3, [r7, #4]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d825      	bhi.n	800e520 <dec_lock+0x60>
		n = Files[i].ctr;
 800e4d4:	4a17      	ldr	r2, [pc, #92]	@ (800e534 <dec_lock+0x74>)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	011b      	lsls	r3, r3, #4
 800e4da:	4413      	add	r3, r2
 800e4dc:	330c      	adds	r3, #12
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e4e2:	89fb      	ldrh	r3, [r7, #14]
 800e4e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4e8:	d101      	bne.n	800e4ee <dec_lock+0x2e>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e4ee:	89fb      	ldrh	r3, [r7, #14]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <dec_lock+0x3a>
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e4fa:	4a0e      	ldr	r2, [pc, #56]	@ (800e534 <dec_lock+0x74>)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	4413      	add	r3, r2
 800e502:	330c      	adds	r3, #12
 800e504:	89fa      	ldrh	r2, [r7, #14]
 800e506:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e508:	89fb      	ldrh	r3, [r7, #14]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <dec_lock+0x5a>
 800e50e:	4a09      	ldr	r2, [pc, #36]	@ (800e534 <dec_lock+0x74>)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	4413      	add	r3, r2
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	737b      	strb	r3, [r7, #13]
 800e51e:	e001      	b.n	800e524 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e520:	2302      	movs	r3, #2
 800e522:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e524:	7b7b      	ldrb	r3, [r7, #13]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	24000bec 	.word	0x24000bec

0800e538 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e540:	2300      	movs	r3, #0
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e010      	b.n	800e568 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e546:	4a0d      	ldr	r2, [pc, #52]	@ (800e57c <clear_lock+0x44>)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	011b      	lsls	r3, r3, #4
 800e54c:	4413      	add	r3, r2
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	429a      	cmp	r2, r3
 800e554:	d105      	bne.n	800e562 <clear_lock+0x2a>
 800e556:	4a09      	ldr	r2, [pc, #36]	@ (800e57c <clear_lock+0x44>)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	011b      	lsls	r3, r3, #4
 800e55c:	4413      	add	r3, r2
 800e55e:	2200      	movs	r2, #0
 800e560:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3301      	adds	r3, #1
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d9eb      	bls.n	800e546 <clear_lock+0xe>
	}
}
 800e56e:	bf00      	nop
 800e570:	bf00      	nop
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	24000bec 	.word	0x24000bec

0800e580 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	78db      	ldrb	r3, [r3, #3]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d034      	beq.n	800e5fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e598:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7858      	ldrb	r0, [r3, #1]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	f7ff fd40 	bl	800e02c <disk_write>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d002      	beq.n	800e5b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	73fb      	strb	r3, [r7, #15]
 800e5b6:	e022      	b.n	800e5fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	697a      	ldr	r2, [r7, #20]
 800e5c4:	1ad2      	subs	r2, r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d217      	bcs.n	800e5fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	789b      	ldrb	r3, [r3, #2]
 800e5d2:	613b      	str	r3, [r7, #16]
 800e5d4:	e010      	b.n	800e5f8 <sync_window+0x78>
					wsect += fs->fsize;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	4413      	add	r3, r2
 800e5de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7858      	ldrb	r0, [r3, #1]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	f7ff fd1d 	bl	800e02c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	613b      	str	r3, [r7, #16]
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d8eb      	bhi.n	800e5d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d01b      	beq.n	800e658 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7ff ffad 	bl	800e580 <sync_window>
 800e626:	4603      	mov	r3, r0
 800e628:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d113      	bne.n	800e658 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7858      	ldrb	r0, [r3, #1]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e63a:	2301      	movs	r3, #1
 800e63c:	683a      	ldr	r2, [r7, #0]
 800e63e:	f7ff fcd5 	bl	800dfec <disk_read>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e648:	f04f 33ff 	mov.w	r3, #4294967295
 800e64c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e64e:	2301      	movs	r3, #1
 800e650:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e658:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
	...

0800e664 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff ff87 	bl	800e580 <sync_window>
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e676:	7bfb      	ldrb	r3, [r7, #15]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d158      	bne.n	800e72e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b03      	cmp	r3, #3
 800e682:	d148      	bne.n	800e716 <sync_fs+0xb2>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	791b      	ldrb	r3, [r3, #4]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d144      	bne.n	800e716 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3330      	adds	r3, #48	@ 0x30
 800e690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e694:	2100      	movs	r1, #0
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff fda9 	bl	800e1ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	3330      	adds	r3, #48	@ 0x30
 800e6a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e6a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7ff fd38 	bl	800e11e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	3330      	adds	r3, #48	@ 0x30
 800e6b2:	4921      	ldr	r1, [pc, #132]	@ (800e738 <sync_fs+0xd4>)
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7ff fd4d 	bl	800e154 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3330      	adds	r3, #48	@ 0x30
 800e6be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e6c2:	491e      	ldr	r1, [pc, #120]	@ (800e73c <sync_fs+0xd8>)
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7ff fd45 	bl	800e154 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	3330      	adds	r3, #48	@ 0x30
 800e6ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	f7ff fd3b 	bl	800e154 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	3330      	adds	r3, #48	@ 0x30
 800e6e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	f7ff fd31 	bl	800e154 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7858      	ldrb	r0, [r3, #1]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	2301      	movs	r3, #1
 800e70c:	f7ff fc8e 	bl	800e02c <disk_write>
			fs->fsi_flag = 0;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	785b      	ldrb	r3, [r3, #1]
 800e71a:	2200      	movs	r2, #0
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fca4 	bl	800e06c <disk_ioctl>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <sync_fs+0xca>
 800e72a:	2301      	movs	r3, #1
 800e72c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	41615252 	.word	0x41615252
 800e73c:	61417272 	.word	0x61417272

0800e740 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	3b02      	subs	r3, #2
 800e74e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	3b02      	subs	r3, #2
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d301      	bcc.n	800e760 <clust2sect+0x20>
 800e75c:	2300      	movs	r3, #0
 800e75e:	e008      	b.n	800e772 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	895b      	ldrh	r3, [r3, #10]
 800e764:	461a      	mov	r2, r3
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	fb03 f202 	mul.w	r2, r3, r2
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e770:	4413      	add	r3, r2
}
 800e772:	4618      	mov	r0, r3
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b086      	sub	sp, #24
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d904      	bls.n	800e79e <get_fat+0x20>
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d302      	bcc.n	800e7a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e79e:	2301      	movs	r3, #1
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	e08e      	b.n	800e8c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d061      	beq.n	800e876 <get_fat+0xf8>
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	dc7b      	bgt.n	800e8ae <get_fat+0x130>
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d002      	beq.n	800e7c0 <get_fat+0x42>
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d041      	beq.n	800e842 <get_fat+0xc4>
 800e7be:	e076      	b.n	800e8ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	085b      	lsrs	r3, r3, #1
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6a1a      	ldr	r2, [r3, #32]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	0a5b      	lsrs	r3, r3, #9
 800e7d6:	4413      	add	r3, r2
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6938      	ldr	r0, [r7, #16]
 800e7dc:	f7ff ff14 	bl	800e608 <move_window>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d166      	bne.n	800e8b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	60fa      	str	r2, [r7, #12]
 800e7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e7f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6a1a      	ldr	r2, [r3, #32]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	0a5b      	lsrs	r3, r3, #9
 800e802:	4413      	add	r3, r2
 800e804:	4619      	mov	r1, r3
 800e806:	6938      	ldr	r0, [r7, #16]
 800e808:	f7ff fefe 	bl	800e608 <move_window>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d152      	bne.n	800e8b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4413      	add	r3, r2
 800e81c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e820:	021b      	lsls	r3, r3, #8
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	4313      	orrs	r3, r2
 800e826:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d002      	beq.n	800e838 <get_fat+0xba>
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	091b      	lsrs	r3, r3, #4
 800e836:	e002      	b.n	800e83e <get_fat+0xc0>
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e83e:	617b      	str	r3, [r7, #20]
			break;
 800e840:	e03f      	b.n	800e8c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	6a1a      	ldr	r2, [r3, #32]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	0a1b      	lsrs	r3, r3, #8
 800e84a:	4413      	add	r3, r2
 800e84c:	4619      	mov	r1, r3
 800e84e:	6938      	ldr	r0, [r7, #16]
 800e850:	f7ff feda 	bl	800e608 <move_window>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d130      	bne.n	800e8bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e868:	4413      	add	r3, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff fc1c 	bl	800e0a8 <ld_word>
 800e870:	4603      	mov	r3, r0
 800e872:	617b      	str	r3, [r7, #20]
			break;
 800e874:	e025      	b.n	800e8c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	6a1a      	ldr	r2, [r3, #32]
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	09db      	lsrs	r3, r3, #7
 800e87e:	4413      	add	r3, r2
 800e880:	4619      	mov	r1, r3
 800e882:	6938      	ldr	r0, [r7, #16]
 800e884:	f7ff fec0 	bl	800e608 <move_window>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d118      	bne.n	800e8c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e89c:	4413      	add	r3, r2
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff fc1a 	bl	800e0d8 <ld_dword>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e8aa:	617b      	str	r3, [r7, #20]
			break;
 800e8ac:	e009      	b.n	800e8c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	e006      	b.n	800e8c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8b4:	bf00      	nop
 800e8b6:	e004      	b.n	800e8c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8b8:	bf00      	nop
 800e8ba:	e002      	b.n	800e8c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e8bc:	bf00      	nop
 800e8be:	e000      	b.n	800e8c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e8c0:	bf00      	nop
		}
	}

	return val;
 800e8c2:	697b      	ldr	r3, [r7, #20]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e8cc:	b590      	push	{r4, r7, lr}
 800e8ce:	b089      	sub	sp, #36	@ 0x24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e8d8:	2302      	movs	r3, #2
 800e8da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	f240 80d9 	bls.w	800ea96 <put_fat+0x1ca>
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	f080 80d3 	bcs.w	800ea96 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	2b03      	cmp	r3, #3
 800e8f6:	f000 8096 	beq.w	800ea26 <put_fat+0x15a>
 800e8fa:	2b03      	cmp	r3, #3
 800e8fc:	f300 80cb 	bgt.w	800ea96 <put_fat+0x1ca>
 800e900:	2b01      	cmp	r3, #1
 800e902:	d002      	beq.n	800e90a <put_fat+0x3e>
 800e904:	2b02      	cmp	r3, #2
 800e906:	d06e      	beq.n	800e9e6 <put_fat+0x11a>
 800e908:	e0c5      	b.n	800ea96 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	61bb      	str	r3, [r7, #24]
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	085b      	lsrs	r3, r3, #1
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	4413      	add	r3, r2
 800e916:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6a1a      	ldr	r2, [r3, #32]
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	0a5b      	lsrs	r3, r3, #9
 800e920:	4413      	add	r3, r2
 800e922:	4619      	mov	r1, r3
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7ff fe6f 	bl	800e608 <move_window>
 800e92a:	4603      	mov	r3, r0
 800e92c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e92e:	7ffb      	ldrb	r3, [r7, #31]
 800e930:	2b00      	cmp	r3, #0
 800e932:	f040 80a9 	bne.w	800ea88 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	1c59      	adds	r1, r3, #1
 800e940:	61b9      	str	r1, [r7, #24]
 800e942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e946:	4413      	add	r3, r2
 800e948:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00d      	beq.n	800e970 <put_fat+0xa4>
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	b25b      	sxtb	r3, r3
 800e95a:	f003 030f 	and.w	r3, r3, #15
 800e95e:	b25a      	sxtb	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	b2db      	uxtb	r3, r3
 800e964:	011b      	lsls	r3, r3, #4
 800e966:	b25b      	sxtb	r3, r3
 800e968:	4313      	orrs	r3, r2
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	e001      	b.n	800e974 <put_fat+0xa8>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	b2db      	uxtb	r3, r3
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2201      	movs	r2, #1
 800e97c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6a1a      	ldr	r2, [r3, #32]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	0a5b      	lsrs	r3, r3, #9
 800e986:	4413      	add	r3, r2
 800e988:	4619      	mov	r1, r3
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff fe3c 	bl	800e608 <move_window>
 800e990:	4603      	mov	r3, r0
 800e992:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e994:	7ffb      	ldrb	r3, [r7, #31]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d178      	bne.n	800ea8c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a6:	4413      	add	r3, r2
 800e9a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	f003 0301 	and.w	r3, r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d003      	beq.n	800e9bc <put_fat+0xf0>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	091b      	lsrs	r3, r3, #4
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	e00e      	b.n	800e9da <put_fat+0x10e>
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	b25b      	sxtb	r3, r3
 800e9c2:	f023 030f 	bic.w	r3, r3, #15
 800e9c6:	b25a      	sxtb	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	0a1b      	lsrs	r3, r3, #8
 800e9cc:	b25b      	sxtb	r3, r3
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	b25b      	sxtb	r3, r3
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	b25b      	sxtb	r3, r3
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	697a      	ldr	r2, [r7, #20]
 800e9dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	70da      	strb	r2, [r3, #3]
			break;
 800e9e4:	e057      	b.n	800ea96 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6a1a      	ldr	r2, [r3, #32]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	0a1b      	lsrs	r3, r3, #8
 800e9ee:	4413      	add	r3, r2
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff fe08 	bl	800e608 <move_window>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9fc:	7ffb      	ldrb	r3, [r7, #31]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d146      	bne.n	800ea90 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ea10:	4413      	add	r3, r2
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	b292      	uxth	r2, r2
 800ea16:	4611      	mov	r1, r2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fb80 	bl	800e11e <st_word>
			fs->wflag = 1;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2201      	movs	r2, #1
 800ea22:	70da      	strb	r2, [r3, #3]
			break;
 800ea24:	e037      	b.n	800ea96 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6a1a      	ldr	r2, [r3, #32]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	09db      	lsrs	r3, r3, #7
 800ea2e:	4413      	add	r3, r2
 800ea30:	4619      	mov	r1, r3
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7ff fde8 	bl	800e608 <move_window>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea3c:	7ffb      	ldrb	r3, [r7, #31]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d128      	bne.n	800ea94 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ea56:	4413      	add	r3, r2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff fb3d 	bl	800e0d8 <ld_dword>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ea64:	4323      	orrs	r3, r4
 800ea66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ea76:	4413      	add	r3, r2
 800ea78:	6879      	ldr	r1, [r7, #4]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fb6a 	bl	800e154 <st_dword>
			fs->wflag = 1;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2201      	movs	r2, #1
 800ea84:	70da      	strb	r2, [r3, #3]
			break;
 800ea86:	e006      	b.n	800ea96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea88:	bf00      	nop
 800ea8a:	e004      	b.n	800ea96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea8c:	bf00      	nop
 800ea8e:	e002      	b.n	800ea96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea90:	bf00      	nop
 800ea92:	e000      	b.n	800ea96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea94:	bf00      	nop
		}
	}
	return res;
 800ea96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3724      	adds	r7, #36	@ 0x24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd90      	pop	{r4, r7, pc}

0800eaa0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d904      	bls.n	800eac6 <remove_chain+0x26>
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d301      	bcc.n	800eaca <remove_chain+0x2a>
 800eac6:	2302      	movs	r3, #2
 800eac8:	e04b      	b.n	800eb62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00c      	beq.n	800eaea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ead0:	f04f 32ff 	mov.w	r2, #4294967295
 800ead4:	6879      	ldr	r1, [r7, #4]
 800ead6:	69b8      	ldr	r0, [r7, #24]
 800ead8:	f7ff fef8 	bl	800e8cc <put_fat>
 800eadc:	4603      	mov	r3, r0
 800eade:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eae0:	7ffb      	ldrb	r3, [r7, #31]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <remove_chain+0x4a>
 800eae6:	7ffb      	ldrb	r3, [r7, #31]
 800eae8:	e03b      	b.n	800eb62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eaea:	68b9      	ldr	r1, [r7, #8]
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f7ff fe46 	bl	800e77e <get_fat>
 800eaf2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d031      	beq.n	800eb5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d101      	bne.n	800eb04 <remove_chain+0x64>
 800eb00:	2302      	movs	r3, #2
 800eb02:	e02e      	b.n	800eb62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0a:	d101      	bne.n	800eb10 <remove_chain+0x70>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e028      	b.n	800eb62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eb10:	2200      	movs	r2, #0
 800eb12:	68b9      	ldr	r1, [r7, #8]
 800eb14:	69b8      	ldr	r0, [r7, #24]
 800eb16:	f7ff fed9 	bl	800e8cc <put_fat>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eb1e:	7ffb      	ldrb	r3, [r7, #31]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <remove_chain+0x88>
 800eb24:	7ffb      	ldrb	r3, [r7, #31]
 800eb26:	e01c      	b.n	800eb62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	691a      	ldr	r2, [r3, #16]
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	3b02      	subs	r3, #2
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d20b      	bcs.n	800eb4e <remove_chain+0xae>
			fs->free_clst++;
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	791b      	ldrb	r3, [r3, #4]
 800eb44:	f043 0301 	orr.w	r3, r3, #1
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d3c6      	bcc.n	800eaea <remove_chain+0x4a>
 800eb5c:	e000      	b.n	800eb60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eb5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3720      	adds	r7, #32
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b088      	sub	sp, #32
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10d      	bne.n	800eb9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <create_chain+0x2c>
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d31b      	bcc.n	800ebce <create_chain+0x64>
 800eb96:	2301      	movs	r3, #1
 800eb98:	61bb      	str	r3, [r7, #24]
 800eb9a:	e018      	b.n	800ebce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb9c:	6839      	ldr	r1, [r7, #0]
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fded 	bl	800e77e <get_fat>
 800eba4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d801      	bhi.n	800ebb0 <create_chain+0x46>
 800ebac:	2301      	movs	r3, #1
 800ebae:	e070      	b.n	800ec92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb6:	d101      	bne.n	800ebbc <create_chain+0x52>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	e06a      	b.n	800ec92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d201      	bcs.n	800ebca <create_chain+0x60>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	e063      	b.n	800ec92 <create_chain+0x128>
		scl = clst;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ebce:	69bb      	ldr	r3, [r7, #24]
 800ebd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	69fa      	ldr	r2, [r7, #28]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d307      	bcc.n	800ebf2 <create_chain+0x88>
				ncl = 2;
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ebe6:	69fa      	ldr	r2, [r7, #28]
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d901      	bls.n	800ebf2 <create_chain+0x88>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	e04f      	b.n	800ec92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ebf2:	69f9      	ldr	r1, [r7, #28]
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fdc2 	bl	800e77e <get_fat>
 800ebfa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00e      	beq.n	800ec20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d003      	beq.n	800ec10 <create_chain+0xa6>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0e:	d101      	bne.n	800ec14 <create_chain+0xaa>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	e03e      	b.n	800ec92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d1da      	bne.n	800ebd2 <create_chain+0x68>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	e038      	b.n	800ec92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ec20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ec22:	f04f 32ff 	mov.w	r2, #4294967295
 800ec26:	69f9      	ldr	r1, [r7, #28]
 800ec28:	6938      	ldr	r0, [r7, #16]
 800ec2a:	f7ff fe4f 	bl	800e8cc <put_fat>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d109      	bne.n	800ec4c <create_chain+0xe2>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d006      	beq.n	800ec4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ec3e:	69fa      	ldr	r2, [r7, #28]
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6938      	ldr	r0, [r7, #16]
 800ec44:	f7ff fe42 	bl	800e8cc <put_fat>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ec4c:	7dfb      	ldrb	r3, [r7, #23]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d116      	bne.n	800ec80 <create_chain+0x116>
		fs->last_clst = ncl;
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	69fa      	ldr	r2, [r7, #28]
 800ec56:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	691a      	ldr	r2, [r3, #16]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	695b      	ldr	r3, [r3, #20]
 800ec60:	3b02      	subs	r3, #2
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d804      	bhi.n	800ec70 <create_chain+0x106>
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	1e5a      	subs	r2, r3, #1
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	791b      	ldrb	r3, [r3, #4]
 800ec74:	f043 0301 	orr.w	r3, r3, #1
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	711a      	strb	r2, [r3, #4]
 800ec7e:	e007      	b.n	800ec90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d102      	bne.n	800ec8c <create_chain+0x122>
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	e000      	b.n	800ec8e <create_chain+0x124>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec90:	69fb      	ldr	r3, [r7, #28]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3720      	adds	r7, #32
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec9a:	b480      	push	{r7}
 800ec9c:	b087      	sub	sp, #28
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
 800eca2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecae:	3304      	adds	r3, #4
 800ecb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	0a5b      	lsrs	r3, r3, #9
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	8952      	ldrh	r2, [r2, #10]
 800ecba:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	1d1a      	adds	r2, r3, #4
 800ecc4:	613a      	str	r2, [r7, #16]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d101      	bne.n	800ecd4 <clmt_clust+0x3a>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	e010      	b.n	800ecf6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d307      	bcc.n	800ecec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	617b      	str	r3, [r7, #20]
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	3304      	adds	r3, #4
 800ece8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ecea:	e7e9      	b.n	800ecc0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ecec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	4413      	add	r3, r2
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	371c      	adds	r7, #28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b086      	sub	sp, #24
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ed18:	d204      	bcs.n	800ed24 <dir_sdi+0x22>
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	f003 031f 	and.w	r3, r3, #31
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ed24:	2302      	movs	r3, #2
 800ed26:	e063      	b.n	800edf0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d106      	bne.n	800ed48 <dir_sdi+0x46>
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d902      	bls.n	800ed48 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10c      	bne.n	800ed68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	095b      	lsrs	r3, r3, #5
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	8912      	ldrh	r2, [r2, #8]
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d301      	bcc.n	800ed5e <dir_sdi+0x5c>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e048      	b.n	800edf0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	61da      	str	r2, [r3, #28]
 800ed66:	e029      	b.n	800edbc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	895b      	ldrh	r3, [r3, #10]
 800ed6c:	025b      	lsls	r3, r3, #9
 800ed6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed70:	e019      	b.n	800eda6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6979      	ldr	r1, [r7, #20]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7ff fd01 	bl	800e77e <get_fat>
 800ed7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed84:	d101      	bne.n	800ed8a <dir_sdi+0x88>
 800ed86:	2301      	movs	r3, #1
 800ed88:	e032      	b.n	800edf0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d904      	bls.n	800ed9a <dir_sdi+0x98>
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d301      	bcc.n	800ed9e <dir_sdi+0x9c>
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	e028      	b.n	800edf0 <dir_sdi+0xee>
			ofs -= csz;
 800ed9e:	683a      	ldr	r2, [r7, #0]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d2e1      	bcs.n	800ed72 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800edae:	6979      	ldr	r1, [r7, #20]
 800edb0:	6938      	ldr	r0, [r7, #16]
 800edb2:	f7ff fcc5 	bl	800e740 <clust2sect>
 800edb6:	4602      	mov	r2, r0
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <dir_sdi+0xcc>
 800edca:	2302      	movs	r3, #2
 800edcc:	e010      	b.n	800edf0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	69da      	ldr	r2, [r3, #28]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	0a5b      	lsrs	r3, r3, #9
 800edd6:	441a      	add	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede8:	441a      	add	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	695b      	ldr	r3, [r3, #20]
 800ee0c:	3320      	adds	r3, #32
 800ee0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d003      	beq.n	800ee20 <dir_next+0x28>
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee1e:	d301      	bcc.n	800ee24 <dir_next+0x2c>
 800ee20:	2304      	movs	r3, #4
 800ee22:	e0aa      	b.n	800ef7a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 8098 	bne.w	800ef60 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10b      	bne.n	800ee5a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	095b      	lsrs	r3, r3, #5
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	8912      	ldrh	r2, [r2, #8]
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	f0c0 8088 	bcc.w	800ef60 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	61da      	str	r2, [r3, #28]
 800ee56:	2304      	movs	r3, #4
 800ee58:	e08f      	b.n	800ef7a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	0a5b      	lsrs	r3, r3, #9
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	8952      	ldrh	r2, [r2, #10]
 800ee62:	3a01      	subs	r2, #1
 800ee64:	4013      	ands	r3, r2
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d17a      	bne.n	800ef60 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	4619      	mov	r1, r3
 800ee72:	4610      	mov	r0, r2
 800ee74:	f7ff fc83 	bl	800e77e <get_fat>
 800ee78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d801      	bhi.n	800ee84 <dir_next+0x8c>
 800ee80:	2302      	movs	r3, #2
 800ee82:	e07a      	b.n	800ef7a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d101      	bne.n	800ee90 <dir_next+0x98>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e074      	b.n	800ef7a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d358      	bcc.n	800ef4c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d104      	bne.n	800eeaa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	61da      	str	r2, [r3, #28]
 800eea6:	2304      	movs	r3, #4
 800eea8:	e067      	b.n	800ef7a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7ff fe59 	bl	800eb6a <create_chain>
 800eeb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <dir_next+0xcc>
 800eec0:	2307      	movs	r3, #7
 800eec2:	e05a      	b.n	800ef7a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d101      	bne.n	800eece <dir_next+0xd6>
 800eeca:	2302      	movs	r3, #2
 800eecc:	e055      	b.n	800ef7a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed4:	d101      	bne.n	800eeda <dir_next+0xe2>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e04f      	b.n	800ef7a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f7ff fb50 	bl	800e580 <sync_window>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <dir_next+0xf2>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e047      	b.n	800ef7a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3330      	adds	r3, #48	@ 0x30
 800eeee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eef2:	2100      	movs	r1, #0
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff f97a 	bl	800e1ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eefa:	2300      	movs	r3, #0
 800eefc:	613b      	str	r3, [r7, #16]
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7ff fc1d 	bl	800e740 <clust2sect>
 800ef06:	4602      	mov	r2, r0
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ef0c:	e012      	b.n	800ef34 <dir_next+0x13c>
						fs->wflag = 1;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff fb33 	bl	800e580 <sync_window>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <dir_next+0x12c>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e02a      	b.n	800ef7a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	3301      	adds	r3, #1
 800ef28:	613b      	str	r3, [r7, #16]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	895b      	ldrh	r3, [r3, #10]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d3e6      	bcc.n	800ef0e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	1ad2      	subs	r2, r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ef52:	6979      	ldr	r1, [r7, #20]
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f7ff fbf3 	bl	800e740 <clust2sect>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef72:	441a      	add	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b086      	sub	sp, #24
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ef92:	2100      	movs	r1, #0
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff feb4 	bl	800ed02 <dir_sdi>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d12b      	bne.n	800effc <dir_alloc+0x7a>
		n = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	4619      	mov	r1, r3
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f7ff fb2a 	bl	800e608 <move_window>
 800efb4:	4603      	mov	r3, r0
 800efb6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d11d      	bne.n	800effa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2be5      	cmp	r3, #229	@ 0xe5
 800efc6:	d004      	beq.n	800efd2 <dir_alloc+0x50>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a1b      	ldr	r3, [r3, #32]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d107      	bne.n	800efe2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	3301      	adds	r3, #1
 800efd6:	613b      	str	r3, [r7, #16]
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d102      	bne.n	800efe6 <dir_alloc+0x64>
 800efe0:	e00c      	b.n	800effc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800efe2:	2300      	movs	r3, #0
 800efe4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800efe6:	2101      	movs	r1, #1
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff ff05 	bl	800edf8 <dir_next>
 800efee:	4603      	mov	r3, r0
 800eff0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eff2:	7dfb      	ldrb	r3, [r7, #23]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d0d7      	beq.n	800efa8 <dir_alloc+0x26>
 800eff8:	e000      	b.n	800effc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800effa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800effc:	7dfb      	ldrb	r3, [r7, #23]
 800effe:	2b04      	cmp	r3, #4
 800f000:	d101      	bne.n	800f006 <dir_alloc+0x84>
 800f002:	2307      	movs	r3, #7
 800f004:	75fb      	strb	r3, [r7, #23]
	return res;
 800f006:	7dfb      	ldrb	r3, [r7, #23]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3718      	adds	r7, #24
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	331a      	adds	r3, #26
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff f842 	bl	800e0a8 <ld_word>
 800f024:	4603      	mov	r3, r0
 800f026:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d109      	bne.n	800f044 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	3314      	adds	r3, #20
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff f837 	bl	800e0a8 <ld_word>
 800f03a:	4603      	mov	r3, r0
 800f03c:	041b      	lsls	r3, r3, #16
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	4313      	orrs	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f044:	68fb      	ldr	r3, [r7, #12]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b084      	sub	sp, #16
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	331a      	adds	r3, #26
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	b292      	uxth	r2, r2
 800f062:	4611      	mov	r1, r2
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff f85a 	bl	800e11e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d109      	bne.n	800f086 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	f103 0214 	add.w	r2, r3, #20
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	0c1b      	lsrs	r3, r3, #16
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	4619      	mov	r1, r3
 800f080:	4610      	mov	r0, r2
 800f082:	f7ff f84c 	bl	800e11e <st_word>
	}
}
 800f086:	bf00      	nop
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b086      	sub	sp, #24
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f09c:	2100      	movs	r1, #0
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7ff fe2f 	bl	800ed02 <dir_sdi>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <dir_find+0x24>
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	e03e      	b.n	800f130 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	69db      	ldr	r3, [r3, #28]
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	6938      	ldr	r0, [r7, #16]
 800f0ba:	f7ff faa5 	bl	800e608 <move_window>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d12f      	bne.n	800f128 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6a1b      	ldr	r3, [r3, #32]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <dir_find+0x4e>
 800f0d6:	2304      	movs	r3, #4
 800f0d8:	75fb      	strb	r3, [r7, #23]
 800f0da:	e028      	b.n	800f12e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a1b      	ldr	r3, [r3, #32]
 800f0e0:	330b      	adds	r3, #11
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0e8:	b2da      	uxtb	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	330b      	adds	r3, #11
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	f003 0308 	and.w	r3, r3, #8
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10a      	bne.n	800f114 <dir_find+0x86>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a18      	ldr	r0, [r3, #32]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	3324      	adds	r3, #36	@ 0x24
 800f106:	220b      	movs	r2, #11
 800f108:	4619      	mov	r1, r3
 800f10a:	f7ff f88b 	bl	800e224 <mem_cmp>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00b      	beq.n	800f12c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f114:	2100      	movs	r1, #0
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff fe6e 	bl	800edf8 <dir_next>
 800f11c:	4603      	mov	r3, r0
 800f11e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d0c5      	beq.n	800f0b2 <dir_find+0x24>
 800f126:	e002      	b.n	800f12e <dir_find+0xa0>
		if (res != FR_OK) break;
 800f128:	bf00      	nop
 800f12a:	e000      	b.n	800f12e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f12c:	bf00      	nop

	return res;
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f146:	2101      	movs	r1, #1
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff ff1a 	bl	800ef82 <dir_alloc>
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f152:	7bfb      	ldrb	r3, [r7, #15]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d11c      	bne.n	800f192 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	69db      	ldr	r3, [r3, #28]
 800f15c:	4619      	mov	r1, r3
 800f15e:	68b8      	ldr	r0, [r7, #8]
 800f160:	f7ff fa52 	bl	800e608 <move_window>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d111      	bne.n	800f192 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	2220      	movs	r2, #32
 800f174:	2100      	movs	r1, #0
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff f839 	bl	800e1ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a18      	ldr	r0, [r3, #32]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3324      	adds	r3, #36	@ 0x24
 800f184:	220b      	movs	r2, #11
 800f186:	4619      	mov	r1, r3
 800f188:	f7ff f810 	bl	800e1ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2201      	movs	r2, #1
 800f190:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f192:	7bfb      	ldrb	r3, [r7, #15]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3324      	adds	r3, #36	@ 0x24
 800f1b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f1b2:	220b      	movs	r2, #11
 800f1b4:	2120      	movs	r1, #32
 800f1b6:	68b8      	ldr	r0, [r7, #8]
 800f1b8:	f7ff f819 	bl	800e1ee <mem_set>
	si = i = 0; ni = 8;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	613b      	str	r3, [r7, #16]
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	61fb      	str	r3, [r7, #28]
 800f1c4:	2308      	movs	r3, #8
 800f1c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	61fa      	str	r2, [r7, #28]
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f1d6:	7efb      	ldrb	r3, [r7, #27]
 800f1d8:	2b20      	cmp	r3, #32
 800f1da:	d94e      	bls.n	800f27a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f1dc:	7efb      	ldrb	r3, [r7, #27]
 800f1de:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1e0:	d006      	beq.n	800f1f0 <create_name+0x54>
 800f1e2:	7efb      	ldrb	r3, [r7, #27]
 800f1e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f1e6:	d110      	bne.n	800f20a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f1e8:	e002      	b.n	800f1f0 <create_name+0x54>
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	61fb      	str	r3, [r7, #28]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1fa:	d0f6      	beq.n	800f1ea <create_name+0x4e>
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b5c      	cmp	r3, #92	@ 0x5c
 800f206:	d0f0      	beq.n	800f1ea <create_name+0x4e>
			break;
 800f208:	e038      	b.n	800f27c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f20a:	7efb      	ldrb	r3, [r7, #27]
 800f20c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f20e:	d003      	beq.n	800f218 <create_name+0x7c>
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	429a      	cmp	r2, r3
 800f216:	d30c      	bcc.n	800f232 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b0b      	cmp	r3, #11
 800f21c:	d002      	beq.n	800f224 <create_name+0x88>
 800f21e:	7efb      	ldrb	r3, [r7, #27]
 800f220:	2b2e      	cmp	r3, #46	@ 0x2e
 800f222:	d001      	beq.n	800f228 <create_name+0x8c>
 800f224:	2306      	movs	r3, #6
 800f226:	e044      	b.n	800f2b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f228:	2308      	movs	r3, #8
 800f22a:	613b      	str	r3, [r7, #16]
 800f22c:	230b      	movs	r3, #11
 800f22e:	617b      	str	r3, [r7, #20]
			continue;
 800f230:	e022      	b.n	800f278 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f232:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f236:	2b00      	cmp	r3, #0
 800f238:	da04      	bge.n	800f244 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f23a:	7efb      	ldrb	r3, [r7, #27]
 800f23c:	3b80      	subs	r3, #128	@ 0x80
 800f23e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2bc <create_name+0x120>)
 800f240:	5cd3      	ldrb	r3, [r2, r3]
 800f242:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f244:	7efb      	ldrb	r3, [r7, #27]
 800f246:	4619      	mov	r1, r3
 800f248:	481d      	ldr	r0, [pc, #116]	@ (800f2c0 <create_name+0x124>)
 800f24a:	f7ff f812 	bl	800e272 <chk_chr>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d001      	beq.n	800f258 <create_name+0xbc>
 800f254:	2306      	movs	r3, #6
 800f256:	e02c      	b.n	800f2b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f258:	7efb      	ldrb	r3, [r7, #27]
 800f25a:	2b60      	cmp	r3, #96	@ 0x60
 800f25c:	d905      	bls.n	800f26a <create_name+0xce>
 800f25e:	7efb      	ldrb	r3, [r7, #27]
 800f260:	2b7a      	cmp	r3, #122	@ 0x7a
 800f262:	d802      	bhi.n	800f26a <create_name+0xce>
 800f264:	7efb      	ldrb	r3, [r7, #27]
 800f266:	3b20      	subs	r3, #32
 800f268:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	613a      	str	r2, [r7, #16]
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	4413      	add	r3, r2
 800f274:	7efa      	ldrb	r2, [r7, #27]
 800f276:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f278:	e7a6      	b.n	800f1c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f27a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	441a      	add	r2, r3
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <create_name+0xf4>
 800f28c:	2306      	movs	r3, #6
 800f28e:	e010      	b.n	800f2b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	2be5      	cmp	r3, #229	@ 0xe5
 800f296:	d102      	bne.n	800f29e <create_name+0x102>
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2205      	movs	r2, #5
 800f29c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f29e:	7efb      	ldrb	r3, [r7, #27]
 800f2a0:	2b20      	cmp	r3, #32
 800f2a2:	d801      	bhi.n	800f2a8 <create_name+0x10c>
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	e000      	b.n	800f2aa <create_name+0x10e>
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	330b      	adds	r3, #11
 800f2ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f2b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3720      	adds	r7, #32
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	08011ab4 	.word	0x08011ab4
 800f2c0:	080119bc 	.word	0x080119bc

0800f2c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f2d8:	e002      	b.n	800f2e0 <follow_path+0x1c>
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	603b      	str	r3, [r7, #0]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2e6:	d0f8      	beq.n	800f2da <follow_path+0x16>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800f2ee:	d0f4      	beq.n	800f2da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	2b1f      	cmp	r3, #31
 800f2fc:	d80a      	bhi.n	800f314 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2280      	movs	r2, #128	@ 0x80
 800f302:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f306:	2100      	movs	r1, #0
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7ff fcfa 	bl	800ed02 <dir_sdi>
 800f30e:	4603      	mov	r3, r0
 800f310:	75fb      	strb	r3, [r7, #23]
 800f312:	e043      	b.n	800f39c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f314:	463b      	mov	r3, r7
 800f316:	4619      	mov	r1, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff ff3f 	bl	800f19c <create_name>
 800f31e:	4603      	mov	r3, r0
 800f320:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f322:	7dfb      	ldrb	r3, [r7, #23]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d134      	bne.n	800f392 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff feb0 	bl	800f08e <dir_find>
 800f32e:	4603      	mov	r3, r0
 800f330:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f338:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00a      	beq.n	800f356 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f340:	7dfb      	ldrb	r3, [r7, #23]
 800f342:	2b04      	cmp	r3, #4
 800f344:	d127      	bne.n	800f396 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f346:	7afb      	ldrb	r3, [r7, #11]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d122      	bne.n	800f396 <follow_path+0xd2>
 800f350:	2305      	movs	r3, #5
 800f352:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f354:	e01f      	b.n	800f396 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f356:	7afb      	ldrb	r3, [r7, #11]
 800f358:	f003 0304 	and.w	r3, r3, #4
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d11c      	bne.n	800f39a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	799b      	ldrb	r3, [r3, #6]
 800f364:	f003 0310 	and.w	r3, r3, #16
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d102      	bne.n	800f372 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f36c:	2305      	movs	r3, #5
 800f36e:	75fb      	strb	r3, [r7, #23]
 800f370:	e014      	b.n	800f39c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	695b      	ldr	r3, [r3, #20]
 800f37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f380:	4413      	add	r3, r2
 800f382:	4619      	mov	r1, r3
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff fe43 	bl	800f010 <ld_clust>
 800f38a:	4602      	mov	r2, r0
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f390:	e7c0      	b.n	800f314 <follow_path+0x50>
			if (res != FR_OK) break;
 800f392:	bf00      	nop
 800f394:	e002      	b.n	800f39c <follow_path+0xd8>
				break;
 800f396:	bf00      	nop
 800f398:	e000      	b.n	800f39c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f39a:	bf00      	nop
			}
		}
	}

	return res;
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3718      	adds	r7, #24
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b087      	sub	sp, #28
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d031      	beq.n	800f420 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	617b      	str	r3, [r7, #20]
 800f3c2:	e002      	b.n	800f3ca <get_ldnumber+0x24>
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	617b      	str	r3, [r7, #20]
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b20      	cmp	r3, #32
 800f3d0:	d903      	bls.n	800f3da <get_ldnumber+0x34>
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800f3d8:	d1f4      	bne.n	800f3c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	2b3a      	cmp	r3, #58	@ 0x3a
 800f3e0:	d11c      	bne.n	800f41c <get_ldnumber+0x76>
			tp = *path;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	60fa      	str	r2, [r7, #12]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	3b30      	subs	r3, #48	@ 0x30
 800f3f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	2b09      	cmp	r3, #9
 800f3f8:	d80e      	bhi.n	800f418 <get_ldnumber+0x72>
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d10a      	bne.n	800f418 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d107      	bne.n	800f418 <get_ldnumber+0x72>
					vol = (int)i;
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	3301      	adds	r3, #1
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	e002      	b.n	800f422 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f41c:	2300      	movs	r3, #0
 800f41e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f420:	693b      	ldr	r3, [r7, #16]
}
 800f422:	4618      	mov	r0, r3
 800f424:	371c      	adds	r7, #28
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
	...

0800f430 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	70da      	strb	r2, [r3, #3]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f04f 32ff 	mov.w	r2, #4294967295
 800f446:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff f8dc 	bl	800e608 <move_window>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <check_fs+0x2a>
 800f456:	2304      	movs	r3, #4
 800f458:	e038      	b.n	800f4cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3330      	adds	r3, #48	@ 0x30
 800f45e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f462:	4618      	mov	r0, r3
 800f464:	f7fe fe20 	bl	800e0a8 <ld_word>
 800f468:	4603      	mov	r3, r0
 800f46a:	461a      	mov	r2, r3
 800f46c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f470:	429a      	cmp	r2, r3
 800f472:	d001      	beq.n	800f478 <check_fs+0x48>
 800f474:	2303      	movs	r3, #3
 800f476:	e029      	b.n	800f4cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f47e:	2be9      	cmp	r3, #233	@ 0xe9
 800f480:	d009      	beq.n	800f496 <check_fs+0x66>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f488:	2beb      	cmp	r3, #235	@ 0xeb
 800f48a:	d11e      	bne.n	800f4ca <check_fs+0x9a>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f492:	2b90      	cmp	r3, #144	@ 0x90
 800f494:	d119      	bne.n	800f4ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3330      	adds	r3, #48	@ 0x30
 800f49a:	3336      	adds	r3, #54	@ 0x36
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fe fe1b 	bl	800e0d8 <ld_dword>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f4a8:	4a0a      	ldr	r2, [pc, #40]	@ (800f4d4 <check_fs+0xa4>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d101      	bne.n	800f4b2 <check_fs+0x82>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	e00c      	b.n	800f4cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	3330      	adds	r3, #48	@ 0x30
 800f4b6:	3352      	adds	r3, #82	@ 0x52
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fe fe0d 	bl	800e0d8 <ld_dword>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4a05      	ldr	r2, [pc, #20]	@ (800f4d8 <check_fs+0xa8>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d101      	bne.n	800f4ca <check_fs+0x9a>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e000      	b.n	800f4cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f4ca:	2302      	movs	r3, #2
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	00544146 	.word	0x00544146
 800f4d8:	33544146 	.word	0x33544146

0800f4dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b096      	sub	sp, #88	@ 0x58
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7ff ff58 	bl	800f3a6 <get_ldnumber>
 800f4f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	da01      	bge.n	800f502 <find_volume+0x26>
 800f4fe:	230b      	movs	r3, #11
 800f500:	e22d      	b.n	800f95e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f502:	4aa1      	ldr	r2, [pc, #644]	@ (800f788 <find_volume+0x2ac>)
 800f504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d101      	bne.n	800f516 <find_volume+0x3a>
 800f512:	230c      	movs	r3, #12
 800f514:	e223      	b.n	800f95e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f51a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f51c:	79fb      	ldrb	r3, [r7, #7]
 800f51e:	f023 0301 	bic.w	r3, r3, #1
 800f522:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01a      	beq.n	800f562 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52e:	785b      	ldrb	r3, [r3, #1]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fe fd19 	bl	800df68 <disk_status>
 800f536:	4603      	mov	r3, r0
 800f538:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f53c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10c      	bne.n	800f562 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d007      	beq.n	800f55e <find_volume+0x82>
 800f54e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f552:	f003 0304 	and.w	r3, r3, #4
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f55a:	230a      	movs	r3, #10
 800f55c:	e1ff      	b.n	800f95e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f55e:	2300      	movs	r3, #0
 800f560:	e1fd      	b.n	800f95e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f564:	2200      	movs	r2, #0
 800f566:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f572:	785b      	ldrb	r3, [r3, #1]
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fd11 	bl	800df9c <disk_initialize>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f580:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f584:	f003 0301 	and.w	r3, r3, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f58c:	2303      	movs	r3, #3
 800f58e:	e1e6      	b.n	800f95e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d007      	beq.n	800f5a6 <find_volume+0xca>
 800f596:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f59a:	f003 0304 	and.w	r3, r3, #4
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f5a2:	230a      	movs	r3, #10
 800f5a4:	e1db      	b.n	800f95e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f5aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f5ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f5ae:	f7ff ff3f 	bl	800f430 <check_fs>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f5b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d149      	bne.n	800f654 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5c4:	e01e      	b.n	800f604 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f5cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ce:	011b      	lsls	r3, r3, #4
 800f5d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f5d4:	4413      	add	r3, r2
 800f5d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5da:	3304      	adds	r3, #4
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d006      	beq.n	800f5f0 <find_volume+0x114>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fe fd76 	bl	800e0d8 <ld_dword>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	e000      	b.n	800f5f2 <find_volume+0x116>
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	3358      	adds	r3, #88	@ 0x58
 800f5f8:	443b      	add	r3, r7
 800f5fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f600:	3301      	adds	r3, #1
 800f602:	643b      	str	r3, [r7, #64]	@ 0x40
 800f604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f606:	2b03      	cmp	r3, #3
 800f608:	d9dd      	bls.n	800f5c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f60a:	2300      	movs	r3, #0
 800f60c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <find_volume+0x13e>
 800f614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f616:	3b01      	subs	r3, #1
 800f618:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	3358      	adds	r3, #88	@ 0x58
 800f620:	443b      	add	r3, r7
 800f622:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f626:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d005      	beq.n	800f63a <find_volume+0x15e>
 800f62e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f630:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f632:	f7ff fefd 	bl	800f430 <check_fs>
 800f636:	4603      	mov	r3, r0
 800f638:	e000      	b.n	800f63c <find_volume+0x160>
 800f63a:	2303      	movs	r3, #3
 800f63c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f640:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f644:	2b01      	cmp	r3, #1
 800f646:	d905      	bls.n	800f654 <find_volume+0x178>
 800f648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f64a:	3301      	adds	r3, #1
 800f64c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f64e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f650:	2b03      	cmp	r3, #3
 800f652:	d9e2      	bls.n	800f61a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f658:	2b04      	cmp	r3, #4
 800f65a:	d101      	bne.n	800f660 <find_volume+0x184>
 800f65c:	2301      	movs	r3, #1
 800f65e:	e17e      	b.n	800f95e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f664:	2b01      	cmp	r3, #1
 800f666:	d901      	bls.n	800f66c <find_volume+0x190>
 800f668:	230d      	movs	r3, #13
 800f66a:	e178      	b.n	800f95e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f66e:	3330      	adds	r3, #48	@ 0x30
 800f670:	330b      	adds	r3, #11
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fd18 	bl	800e0a8 <ld_word>
 800f678:	4603      	mov	r3, r0
 800f67a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f67e:	d001      	beq.n	800f684 <find_volume+0x1a8>
 800f680:	230d      	movs	r3, #13
 800f682:	e16c      	b.n	800f95e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f686:	3330      	adds	r3, #48	@ 0x30
 800f688:	3316      	adds	r3, #22
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe fd0c 	bl	800e0a8 <ld_word>
 800f690:	4603      	mov	r3, r0
 800f692:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f696:	2b00      	cmp	r3, #0
 800f698:	d106      	bne.n	800f6a8 <find_volume+0x1cc>
 800f69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69c:	3330      	adds	r3, #48	@ 0x30
 800f69e:	3324      	adds	r3, #36	@ 0x24
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fe fd19 	bl	800e0d8 <ld_dword>
 800f6a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f6ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ba:	789b      	ldrb	r3, [r3, #2]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d005      	beq.n	800f6cc <find_volume+0x1f0>
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c2:	789b      	ldrb	r3, [r3, #2]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d001      	beq.n	800f6cc <find_volume+0x1f0>
 800f6c8:	230d      	movs	r3, #13
 800f6ca:	e148      	b.n	800f95e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ce:	789b      	ldrb	r3, [r3, #2]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6d4:	fb02 f303 	mul.w	r3, r2, r3
 800f6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	895b      	ldrh	r3, [r3, #10]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d008      	beq.n	800f700 <find_volume+0x224>
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f0:	895b      	ldrh	r3, [r3, #10]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f6:	895b      	ldrh	r3, [r3, #10]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <find_volume+0x228>
 800f700:	230d      	movs	r3, #13
 800f702:	e12c      	b.n	800f95e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f706:	3330      	adds	r3, #48	@ 0x30
 800f708:	3311      	adds	r3, #17
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fccc 	bl	800e0a8 <ld_word>
 800f710:	4603      	mov	r3, r0
 800f712:	461a      	mov	r2, r3
 800f714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f716:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71a:	891b      	ldrh	r3, [r3, #8]
 800f71c:	f003 030f 	and.w	r3, r3, #15
 800f720:	b29b      	uxth	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <find_volume+0x24e>
 800f726:	230d      	movs	r3, #13
 800f728:	e119      	b.n	800f95e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72c:	3330      	adds	r3, #48	@ 0x30
 800f72e:	3313      	adds	r3, #19
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fcb9 	bl	800e0a8 <ld_word>
 800f736:	4603      	mov	r3, r0
 800f738:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f73a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d106      	bne.n	800f74e <find_volume+0x272>
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	3330      	adds	r3, #48	@ 0x30
 800f744:	3320      	adds	r3, #32
 800f746:	4618      	mov	r0, r3
 800f748:	f7fe fcc6 	bl	800e0d8 <ld_dword>
 800f74c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f750:	3330      	adds	r3, #48	@ 0x30
 800f752:	330e      	adds	r3, #14
 800f754:	4618      	mov	r0, r3
 800f756:	f7fe fca7 	bl	800e0a8 <ld_word>
 800f75a:	4603      	mov	r3, r0
 800f75c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f75e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f760:	2b00      	cmp	r3, #0
 800f762:	d101      	bne.n	800f768 <find_volume+0x28c>
 800f764:	230d      	movs	r3, #13
 800f766:	e0fa      	b.n	800f95e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f768:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f76c:	4413      	add	r3, r2
 800f76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f770:	8912      	ldrh	r2, [r2, #8]
 800f772:	0912      	lsrs	r2, r2, #4
 800f774:	b292      	uxth	r2, r2
 800f776:	4413      	add	r3, r2
 800f778:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f77a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77e:	429a      	cmp	r2, r3
 800f780:	d204      	bcs.n	800f78c <find_volume+0x2b0>
 800f782:	230d      	movs	r3, #13
 800f784:	e0eb      	b.n	800f95e <find_volume+0x482>
 800f786:	bf00      	nop
 800f788:	24000be4 	.word	0x24000be4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f78c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f794:	8952      	ldrh	r2, [r2, #10]
 800f796:	fbb3 f3f2 	udiv	r3, r3, r2
 800f79a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <find_volume+0x2ca>
 800f7a2:	230d      	movs	r3, #13
 800f7a4:	e0db      	b.n	800f95e <find_volume+0x482>
		fmt = FS_FAT32;
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d802      	bhi.n	800f7bc <find_volume+0x2e0>
 800f7b6:	2302      	movs	r3, #2
 800f7b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d802      	bhi.n	800f7cc <find_volume+0x2f0>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	1c9a      	adds	r2, r3, #2
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f7d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f7dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7de:	441a      	add	r2, r3
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f7e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e8:	441a      	add	r2, r3
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f7ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d11e      	bne.n	800f834 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f8:	3330      	adds	r3, #48	@ 0x30
 800f7fa:	332a      	adds	r3, #42	@ 0x2a
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fe fc53 	bl	800e0a8 <ld_word>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <find_volume+0x330>
 800f808:	230d      	movs	r3, #13
 800f80a:	e0a8      	b.n	800f95e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80e:	891b      	ldrh	r3, [r3, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <find_volume+0x33c>
 800f814:	230d      	movs	r3, #13
 800f816:	e0a2      	b.n	800f95e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	3330      	adds	r3, #48	@ 0x30
 800f81c:	332c      	adds	r3, #44	@ 0x2c
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe fc5a 	bl	800e0d8 <ld_dword>
 800f824:	4602      	mov	r2, r0
 800f826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f828:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82c:	695b      	ldr	r3, [r3, #20]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	647b      	str	r3, [r7, #68]	@ 0x44
 800f832:	e01f      	b.n	800f874 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f836:	891b      	ldrh	r3, [r3, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <find_volume+0x364>
 800f83c:	230d      	movs	r3, #13
 800f83e:	e08e      	b.n	800f95e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f842:	6a1a      	ldr	r2, [r3, #32]
 800f844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f846:	441a      	add	r2, r3
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f84c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f850:	2b02      	cmp	r3, #2
 800f852:	d103      	bne.n	800f85c <find_volume+0x380>
 800f854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	e00a      	b.n	800f872 <find_volume+0x396>
 800f85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85e:	695a      	ldr	r2, [r3, #20]
 800f860:	4613      	mov	r3, r2
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	4413      	add	r3, r2
 800f866:	085a      	lsrs	r2, r3, #1
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	695b      	ldr	r3, [r3, #20]
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f872:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f876:	699a      	ldr	r2, [r3, #24]
 800f878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f87a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f87e:	0a5b      	lsrs	r3, r3, #9
 800f880:	429a      	cmp	r2, r3
 800f882:	d201      	bcs.n	800f888 <find_volume+0x3ac>
 800f884:	230d      	movs	r3, #13
 800f886:	e06a      	b.n	800f95e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f88a:	f04f 32ff 	mov.w	r2, #4294967295
 800f88e:	611a      	str	r2, [r3, #16]
 800f890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f892:	691a      	ldr	r2, [r3, #16]
 800f894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f896:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89a:	2280      	movs	r2, #128	@ 0x80
 800f89c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f89e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d149      	bne.n	800f93a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a8:	3330      	adds	r3, #48	@ 0x30
 800f8aa:	3330      	adds	r3, #48	@ 0x30
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fe fbfb 	bl	800e0a8 <ld_word>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d140      	bne.n	800f93a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f8c0:	f7fe fea2 	bl	800e608 <move_window>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d137      	bne.n	800f93a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d2:	3330      	adds	r3, #48	@ 0x30
 800f8d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fbe5 	bl	800e0a8 <ld_word>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d127      	bne.n	800f93a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ec:	3330      	adds	r3, #48	@ 0x30
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fe fbf2 	bl	800e0d8 <ld_dword>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	4a1c      	ldr	r2, [pc, #112]	@ (800f968 <find_volume+0x48c>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d11e      	bne.n	800f93a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fe:	3330      	adds	r3, #48	@ 0x30
 800f900:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fbe7 	bl	800e0d8 <ld_dword>
 800f90a:	4603      	mov	r3, r0
 800f90c:	4a17      	ldr	r2, [pc, #92]	@ (800f96c <find_volume+0x490>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d113      	bne.n	800f93a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f914:	3330      	adds	r3, #48	@ 0x30
 800f916:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe fbdc 	bl	800e0d8 <ld_dword>
 800f920:	4602      	mov	r2, r0
 800f922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f924:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f928:	3330      	adds	r3, #48	@ 0x30
 800f92a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fe fbd2 	bl	800e0d8 <ld_dword>
 800f934:	4602      	mov	r2, r0
 800f936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f938:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f940:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f942:	4b0b      	ldr	r3, [pc, #44]	@ (800f970 <find_volume+0x494>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	3301      	adds	r3, #1
 800f948:	b29a      	uxth	r2, r3
 800f94a:	4b09      	ldr	r3, [pc, #36]	@ (800f970 <find_volume+0x494>)
 800f94c:	801a      	strh	r2, [r3, #0]
 800f94e:	4b08      	ldr	r3, [pc, #32]	@ (800f970 <find_volume+0x494>)
 800f950:	881a      	ldrh	r2, [r3, #0]
 800f952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f954:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f956:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f958:	f7fe fdee 	bl	800e538 <clear_lock>
#endif
	return FR_OK;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3758      	adds	r7, #88	@ 0x58
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	41615252 	.word	0x41615252
 800f96c:	61417272 	.word	0x61417272
 800f970:	24000be8 	.word	0x24000be8

0800f974 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f97e:	2309      	movs	r3, #9
 800f980:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d01c      	beq.n	800f9c2 <validate+0x4e>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d018      	beq.n	800f9c2 <validate+0x4e>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d013      	beq.n	800f9c2 <validate+0x4e>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	889a      	ldrh	r2, [r3, #4]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	88db      	ldrh	r3, [r3, #6]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d10c      	bne.n	800f9c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	785b      	ldrb	r3, [r3, #1]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe fada 	bl	800df68 <disk_status>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	f003 0301 	and.w	r3, r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d101      	bne.n	800f9c2 <validate+0x4e>
			res = FR_OK;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d102      	bne.n	800f9ce <validate+0x5a>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	e000      	b.n	800f9d0 <validate+0x5c>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	683a      	ldr	r2, [r7, #0]
 800f9d2:	6013      	str	r3, [r2, #0]
	return res;
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
	...

0800f9e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f9f2:	f107 0310 	add.w	r3, r7, #16
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fcd5 	bl	800f3a6 <get_ldnumber>
 800f9fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	da01      	bge.n	800fa08 <f_mount+0x28>
 800fa04:	230b      	movs	r3, #11
 800fa06:	e02b      	b.n	800fa60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa08:	4a17      	ldr	r2, [pc, #92]	@ (800fa68 <f_mount+0x88>)
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d005      	beq.n	800fa24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa18:	69b8      	ldr	r0, [r7, #24]
 800fa1a:	f7fe fd8d 	bl	800e538 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	2200      	movs	r2, #0
 800fa22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d002      	beq.n	800fa30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	490d      	ldr	r1, [pc, #52]	@ (800fa68 <f_mount+0x88>)
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <f_mount+0x66>
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d001      	beq.n	800fa4a <f_mount+0x6a>
 800fa46:	2300      	movs	r3, #0
 800fa48:	e00a      	b.n	800fa60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa4a:	f107 010c 	add.w	r1, r7, #12
 800fa4e:	f107 0308 	add.w	r3, r7, #8
 800fa52:	2200      	movs	r2, #0
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fd41 	bl	800f4dc <find_volume>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3720      	adds	r7, #32
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	24000be4 	.word	0x24000be4

0800fa6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b098      	sub	sp, #96	@ 0x60
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	4613      	mov	r3, r2
 800fa78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d101      	bne.n	800fa84 <f_open+0x18>
 800fa80:	2309      	movs	r3, #9
 800fa82:	e1a9      	b.n	800fdd8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa84:	79fb      	ldrb	r3, [r7, #7]
 800fa86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fa8c:	79fa      	ldrb	r2, [r7, #7]
 800fa8e:	f107 0110 	add.w	r1, r7, #16
 800fa92:	f107 0308 	add.w	r3, r7, #8
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7ff fd20 	bl	800f4dc <find_volume>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800faa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f040 818d 	bne.w	800fdc6 <f_open+0x35a>
		dj.obj.fs = fs;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	f107 0314 	add.w	r3, r7, #20
 800fab6:	4611      	mov	r1, r2
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff fc03 	bl	800f2c4 <follow_path>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fac4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d118      	bne.n	800fafe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800facc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fad0:	b25b      	sxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	da03      	bge.n	800fade <f_open+0x72>
				res = FR_INVALID_NAME;
 800fad6:	2306      	movs	r3, #6
 800fad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fadc:	e00f      	b.n	800fafe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	bf8c      	ite	hi
 800fae4:	2301      	movhi	r3, #1
 800fae6:	2300      	movls	r3, #0
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	461a      	mov	r2, r3
 800faec:	f107 0314 	add.w	r3, r7, #20
 800faf0:	4611      	mov	r1, r2
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fe fbd8 	bl	800e2a8 <chk_lock>
 800faf8:	4603      	mov	r3, r0
 800fafa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	f003 031c 	and.w	r3, r3, #28
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d07f      	beq.n	800fc08 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fb08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d017      	beq.n	800fb40 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d10e      	bne.n	800fb36 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb18:	f7fe fc22 	bl	800e360 <enq_lock>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <f_open+0xc4>
 800fb22:	f107 0314 	add.w	r3, r7, #20
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fb06 	bl	800f138 <dir_register>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	e000      	b.n	800fb32 <f_open+0xc6>
 800fb30:	2312      	movs	r3, #18
 800fb32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	f043 0308 	orr.w	r3, r3, #8
 800fb3c:	71fb      	strb	r3, [r7, #7]
 800fb3e:	e010      	b.n	800fb62 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb40:	7ebb      	ldrb	r3, [r7, #26]
 800fb42:	f003 0311 	and.w	r3, r3, #17
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <f_open+0xe6>
					res = FR_DENIED;
 800fb4a:	2307      	movs	r3, #7
 800fb4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fb50:	e007      	b.n	800fb62 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb52:	79fb      	ldrb	r3, [r7, #7]
 800fb54:	f003 0304 	and.w	r3, r3, #4
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d002      	beq.n	800fb62 <f_open+0xf6>
 800fb5c:	2308      	movs	r3, #8
 800fb5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d168      	bne.n	800fc3c <f_open+0x1d0>
 800fb6a:	79fb      	ldrb	r3, [r7, #7]
 800fb6c:	f003 0308 	and.w	r3, r3, #8
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d063      	beq.n	800fc3c <f_open+0x1d0>
				dw = GET_FATTIME();
 800fb74:	f7fd ff6c 	bl	800da50 <get_fattime>
 800fb78:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7c:	330e      	adds	r3, #14
 800fb7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fae7 	bl	800e154 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb88:	3316      	adds	r3, #22
 800fb8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fe fae1 	bl	800e154 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb94:	330b      	adds	r3, #11
 800fb96:	2220      	movs	r2, #32
 800fb98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff fa35 	bl	800f010 <ld_clust>
 800fba6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fbac:	2200      	movs	r2, #0
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff fa4d 	bl	800f04e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbb6:	331c      	adds	r3, #28
 800fbb8:	2100      	movs	r1, #0
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe faca 	bl	800e154 <st_dword>
					fs->wflag = 1;
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d037      	beq.n	800fc3c <f_open+0x1d0>
						dw = fs->winsect;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fbd2:	f107 0314 	add.w	r3, r7, #20
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fe ff60 	bl	800eaa0 <remove_chain>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d126      	bne.n	800fc3c <f_open+0x1d0>
							res = move_window(fs, dw);
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe fd08 	bl	800e608 <move_window>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc02:	3a01      	subs	r2, #1
 800fc04:	60da      	str	r2, [r3, #12]
 800fc06:	e019      	b.n	800fc3c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fc08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d115      	bne.n	800fc3c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fc10:	7ebb      	ldrb	r3, [r7, #26]
 800fc12:	f003 0310 	and.w	r3, r3, #16
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d003      	beq.n	800fc22 <f_open+0x1b6>
					res = FR_NO_FILE;
 800fc1a:	2304      	movs	r3, #4
 800fc1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc20:	e00c      	b.n	800fc3c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	f003 0302 	and.w	r3, r3, #2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d007      	beq.n	800fc3c <f_open+0x1d0>
 800fc2c:	7ebb      	ldrb	r3, [r7, #26]
 800fc2e:	f003 0301 	and.w	r3, r3, #1
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d002      	beq.n	800fc3c <f_open+0x1d0>
						res = FR_DENIED;
 800fc36:	2307      	movs	r3, #7
 800fc38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fc3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d126      	bne.n	800fc92 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	f003 0308 	and.w	r3, r3, #8
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fc4e:	79fb      	ldrb	r3, [r7, #7]
 800fc50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fc5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	bf8c      	ite	hi
 800fc6a:	2301      	movhi	r3, #1
 800fc6c:	2300      	movls	r3, #0
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	461a      	mov	r2, r3
 800fc72:	f107 0314 	add.w	r3, r7, #20
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fe fb93 	bl	800e3a4 <inc_lock>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <f_open+0x226>
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fc92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f040 8095 	bne.w	800fdc6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fca0:	4611      	mov	r1, r2
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7ff f9b4 	bl	800f010 <ld_clust>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fcae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcb0:	331c      	adds	r3, #28
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe fa10 	bl	800e0d8 <ld_dword>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	88da      	ldrh	r2, [r3, #6]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	79fa      	ldrb	r2, [r7, #7]
 800fcd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3330      	adds	r3, #48	@ 0x30
 800fcee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7fe fa7a 	bl	800e1ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	f003 0320 	and.w	r3, r3, #32
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d060      	beq.n	800fdc6 <f_open+0x35a>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d05c      	beq.n	800fdc6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	68da      	ldr	r2, [r3, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	895b      	ldrh	r3, [r3, #10]
 800fd18:	025b      	lsls	r3, r3, #9
 800fd1a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	657b      	str	r3, [r7, #84]	@ 0x54
 800fd28:	e016      	b.n	800fd58 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fd25 	bl	800e77e <get_fat>
 800fd34:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fd36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d802      	bhi.n	800fd42 <f_open+0x2d6>
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd48:	d102      	bne.n	800fd50 <f_open+0x2e4>
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fd52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	657b      	str	r3, [r7, #84]	@ 0x54
 800fd58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d103      	bne.n	800fd68 <f_open+0x2fc>
 800fd60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fd62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d8e0      	bhi.n	800fd2a <f_open+0x2be>
				}
				fp->clust = clst;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fd6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d127      	bne.n	800fdc6 <f_open+0x35a>
 800fd76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d022      	beq.n	800fdc6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe fcdb 	bl	800e740 <clust2sect>
 800fd8a:	6478      	str	r0, [r7, #68]	@ 0x44
 800fd8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d103      	bne.n	800fd9a <f_open+0x32e>
						res = FR_INT_ERR;
 800fd92:	2302      	movs	r3, #2
 800fd94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fd98:	e015      	b.n	800fdc6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fd9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd9c:	0a5a      	lsrs	r2, r3, #9
 800fd9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fda0:	441a      	add	r2, r3
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	7858      	ldrb	r0, [r3, #1]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6a1a      	ldr	r2, [r3, #32]
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	f7fe f919 	bl	800dfec <disk_read>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <f_open+0x35a>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fdc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <f_open+0x368>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fdd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3760      	adds	r7, #96	@ 0x60
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08e      	sub	sp, #56	@ 0x38
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f107 0214 	add.w	r2, r7, #20
 800fdfe:	4611      	mov	r1, r2
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff fdb7 	bl	800f974 <validate>
 800fe06:	4603      	mov	r3, r0
 800fe08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d107      	bne.n	800fe24 <f_read+0x44>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	7d5b      	ldrb	r3, [r3, #21]
 800fe18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fe1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <f_read+0x4a>
 800fe24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe28:	e115      	b.n	8010056 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	7d1b      	ldrb	r3, [r3, #20]
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d101      	bne.n	800fe3a <f_read+0x5a>
 800fe36:	2307      	movs	r3, #7
 800fe38:	e10d      	b.n	8010056 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	68da      	ldr	r2, [r3, #12]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6a3b      	ldr	r3, [r7, #32]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	f240 80fe 	bls.w	801004c <f_read+0x26c>
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fe54:	e0fa      	b.n	801004c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f040 80c6 	bne.w	800fff0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	0a5b      	lsrs	r3, r3, #9
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	8952      	ldrh	r2, [r2, #10]
 800fe6e:	3a01      	subs	r2, #1
 800fe70:	4013      	ands	r3, r2
 800fe72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d12f      	bne.n	800feda <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d103      	bne.n	800fe8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe88:	e013      	b.n	800feb2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d007      	beq.n	800fea2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	4619      	mov	r1, r3
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f7fe fefe 	bl	800ec9a <clmt_clust>
 800fe9e:	6338      	str	r0, [r7, #48]	@ 0x30
 800fea0:	e007      	b.n	800feb2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	69db      	ldr	r3, [r3, #28]
 800fea8:	4619      	mov	r1, r3
 800feaa:	4610      	mov	r0, r2
 800feac:	f7fe fc67 	bl	800e77e <get_fat>
 800feb0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d804      	bhi.n	800fec2 <f_read+0xe2>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2202      	movs	r2, #2
 800febc:	755a      	strb	r2, [r3, #21]
 800febe:	2302      	movs	r3, #2
 800fec0:	e0c9      	b.n	8010056 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec8:	d104      	bne.n	800fed4 <f_read+0xf4>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2201      	movs	r2, #1
 800fece:	755a      	strb	r2, [r3, #21]
 800fed0:	2301      	movs	r3, #1
 800fed2:	e0c0      	b.n	8010056 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fed8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800feda:	697a      	ldr	r2, [r7, #20]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	4619      	mov	r1, r3
 800fee2:	4610      	mov	r0, r2
 800fee4:	f7fe fc2c 	bl	800e740 <clust2sect>
 800fee8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d104      	bne.n	800fefa <f_read+0x11a>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2202      	movs	r2, #2
 800fef4:	755a      	strb	r2, [r3, #21]
 800fef6:	2302      	movs	r3, #2
 800fef8:	e0ad      	b.n	8010056 <f_read+0x276>
			sect += csect;
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	4413      	add	r3, r2
 800ff00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	0a5b      	lsrs	r3, r3, #9
 800ff06:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d039      	beq.n	800ff82 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff0e:	69fa      	ldr	r2, [r7, #28]
 800ff10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff12:	4413      	add	r3, r2
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	8952      	ldrh	r2, [r2, #10]
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d905      	bls.n	800ff28 <f_read+0x148>
					cc = fs->csize - csect;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	895b      	ldrh	r3, [r3, #10]
 800ff20:	461a      	mov	r2, r3
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	7858      	ldrb	r0, [r3, #1]
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	69ba      	ldr	r2, [r7, #24]
 800ff30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff32:	f7fe f85b 	bl	800dfec <disk_read>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d004      	beq.n	800ff46 <f_read+0x166>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	755a      	strb	r2, [r3, #21]
 800ff42:	2301      	movs	r3, #1
 800ff44:	e087      	b.n	8010056 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	7d1b      	ldrb	r3, [r3, #20]
 800ff4a:	b25b      	sxtb	r3, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	da14      	bge.n	800ff7a <f_read+0x19a>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6a1a      	ldr	r2, [r3, #32]
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d90d      	bls.n	800ff7a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6a1a      	ldr	r2, [r3, #32]
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	1ad3      	subs	r3, r2, r3
 800ff66:	025b      	lsls	r3, r3, #9
 800ff68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff6a:	18d0      	adds	r0, r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	3330      	adds	r3, #48	@ 0x30
 800ff70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff74:	4619      	mov	r1, r3
 800ff76:	f7fe f919 	bl	800e1ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ff7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7c:	025b      	lsls	r3, r3, #9
 800ff7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ff80:	e050      	b.n	8010024 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	69ba      	ldr	r2, [r7, #24]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d02e      	beq.n	800ffea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	7d1b      	ldrb	r3, [r3, #20]
 800ff90:	b25b      	sxtb	r3, r3
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	da18      	bge.n	800ffc8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	7858      	ldrb	r0, [r3, #1]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6a1a      	ldr	r2, [r3, #32]
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	f7fe f841 	bl	800e02c <disk_write>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d004      	beq.n	800ffba <f_read+0x1da>
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	755a      	strb	r2, [r3, #21]
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e04d      	b.n	8010056 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	7d1b      	ldrb	r3, [r3, #20]
 800ffbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	7858      	ldrb	r0, [r3, #1]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	69ba      	ldr	r2, [r7, #24]
 800ffd6:	f7fe f809 	bl	800dfec <disk_read>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d004      	beq.n	800ffea <f_read+0x20a>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	755a      	strb	r2, [r3, #21]
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e035      	b.n	8010056 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	69ba      	ldr	r2, [r7, #24]
 800ffee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fff8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	429a      	cmp	r2, r3
 8010004:	d901      	bls.n	801000a <f_read+0x22a>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	699b      	ldr	r3, [r3, #24]
 8010014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010018:	4413      	add	r3, r2
 801001a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801001c:	4619      	mov	r1, r3
 801001e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010020:	f7fe f8c4 	bl	800e1ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010028:	4413      	add	r3, r2
 801002a:	627b      	str	r3, [r7, #36]	@ 0x24
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	699a      	ldr	r2, [r3, #24]
 8010030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010032:	441a      	add	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	619a      	str	r2, [r3, #24]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003e:	441a      	add	r2, r3
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f47f af01 	bne.w	800fe56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010054:	2300      	movs	r3, #0
}
 8010056:	4618      	mov	r0, r3
 8010058:	3738      	adds	r7, #56	@ 0x38
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b086      	sub	sp, #24
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f107 0208 	add.w	r2, r7, #8
 801006c:	4611      	mov	r1, r2
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fc80 	bl	800f974 <validate>
 8010074:	4603      	mov	r3, r0
 8010076:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010078:	7dfb      	ldrb	r3, [r7, #23]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d168      	bne.n	8010150 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7d1b      	ldrb	r3, [r3, #20]
 8010082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010086:	2b00      	cmp	r3, #0
 8010088:	d062      	beq.n	8010150 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	7d1b      	ldrb	r3, [r3, #20]
 801008e:	b25b      	sxtb	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	da15      	bge.n	80100c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	7858      	ldrb	r0, [r3, #1]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a1a      	ldr	r2, [r3, #32]
 80100a2:	2301      	movs	r3, #1
 80100a4:	f7fd ffc2 	bl	800e02c <disk_write>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <f_sync+0x54>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e04f      	b.n	8010152 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	7d1b      	ldrb	r3, [r3, #20]
 80100b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100ba:	b2da      	uxtb	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80100c0:	f7fd fcc6 	bl	800da50 <get_fattime>
 80100c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100cc:	4619      	mov	r1, r3
 80100ce:	4610      	mov	r0, r2
 80100d0:	f7fe fa9a 	bl	800e608 <move_window>
 80100d4:	4603      	mov	r3, r0
 80100d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d138      	bne.n	8010150 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	330b      	adds	r3, #11
 80100e8:	781a      	ldrb	r2, [r3, #0]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	330b      	adds	r3, #11
 80100ee:	f042 0220 	orr.w	r2, r2, #32
 80100f2:	b2d2      	uxtb	r2, r2
 80100f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6818      	ldr	r0, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	461a      	mov	r2, r3
 8010100:	68f9      	ldr	r1, [r7, #12]
 8010102:	f7fe ffa4 	bl	800f04e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f103 021c 	add.w	r2, r3, #28
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	4619      	mov	r1, r3
 8010112:	4610      	mov	r0, r2
 8010114:	f7fe f81e 	bl	800e154 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3316      	adds	r3, #22
 801011c:	6939      	ldr	r1, [r7, #16]
 801011e:	4618      	mov	r0, r3
 8010120:	f7fe f818 	bl	800e154 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3312      	adds	r3, #18
 8010128:	2100      	movs	r1, #0
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd fff7 	bl	800e11e <st_word>
					fs->wflag = 1;
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2201      	movs	r2, #1
 8010134:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fa93 	bl	800e664 <sync_fs>
 801013e:	4603      	mov	r3, r0
 8010140:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	7d1b      	ldrb	r3, [r3, #20]
 8010146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801014a:	b2da      	uxtb	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010150:	7dfb      	ldrb	r3, [r7, #23]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3718      	adds	r7, #24
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7ff ff7b 	bl	801005e <f_sync>
 8010168:	4603      	mov	r3, r0
 801016a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801016c:	7bfb      	ldrb	r3, [r7, #15]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d118      	bne.n	80101a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f107 0208 	add.w	r2, r7, #8
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff fbfa 	bl	800f974 <validate>
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10c      	bne.n	80101a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	691b      	ldr	r3, [r3, #16]
 801018e:	4618      	mov	r0, r3
 8010190:	f7fe f996 	bl	800e4c0 <dec_lock>
 8010194:	4603      	mov	r3, r0
 8010196:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010198:	7bfb      	ldrb	r3, [r7, #15]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d102      	bne.n	80101a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80101a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b087      	sub	sp, #28
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	4613      	mov	r3, r2
 80101bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80101be:	2301      	movs	r3, #1
 80101c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80101c6:	4b1f      	ldr	r3, [pc, #124]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101c8:	7a5b      	ldrb	r3, [r3, #9]
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d131      	bne.n	8010234 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80101d0:	4b1c      	ldr	r3, [pc, #112]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101d2:	7a5b      	ldrb	r3, [r3, #9]
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	461a      	mov	r2, r3
 80101d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101da:	2100      	movs	r1, #0
 80101dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80101de:	4b19      	ldr	r3, [pc, #100]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101e0:	7a5b      	ldrb	r3, [r3, #9]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	4a17      	ldr	r2, [pc, #92]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4413      	add	r3, r2
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80101ee:	4b15      	ldr	r3, [pc, #84]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101f0:	7a5b      	ldrb	r3, [r3, #9]
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	461a      	mov	r2, r3
 80101f6:	4b13      	ldr	r3, [pc, #76]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 80101f8:	4413      	add	r3, r2
 80101fa:	79fa      	ldrb	r2, [r7, #7]
 80101fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80101fe:	4b11      	ldr	r3, [pc, #68]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 8010200:	7a5b      	ldrb	r3, [r3, #9]
 8010202:	b2db      	uxtb	r3, r3
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	b2d1      	uxtb	r1, r2
 8010208:	4a0e      	ldr	r2, [pc, #56]	@ (8010244 <FATFS_LinkDriverEx+0x94>)
 801020a:	7251      	strb	r1, [r2, #9]
 801020c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801020e:	7dbb      	ldrb	r3, [r7, #22]
 8010210:	3330      	adds	r3, #48	@ 0x30
 8010212:	b2da      	uxtb	r2, r3
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	3301      	adds	r3, #1
 801021c:	223a      	movs	r2, #58	@ 0x3a
 801021e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	3302      	adds	r3, #2
 8010224:	222f      	movs	r2, #47	@ 0x2f
 8010226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	3303      	adds	r3, #3
 801022c:	2200      	movs	r2, #0
 801022e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010234:	7dfb      	ldrb	r3, [r7, #23]
}
 8010236:	4618      	mov	r0, r3
 8010238:	371c      	adds	r7, #28
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	24000c0c 	.word	0x24000c0c

08010248 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010252:	2200      	movs	r2, #0
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7ff ffaa 	bl	80101b0 <FATFS_LinkDriverEx>
 801025c:	4603      	mov	r3, r0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <_ZdlPvj>:
 8010266:	f000 b99c 	b.w	80105a2 <_ZdlPv>

0801026a <__cxa_guard_acquire>:
 801026a:	6802      	ldr	r2, [r0, #0]
 801026c:	07d2      	lsls	r2, r2, #31
 801026e:	4603      	mov	r3, r0
 8010270:	d405      	bmi.n	801027e <__cxa_guard_acquire+0x14>
 8010272:	7842      	ldrb	r2, [r0, #1]
 8010274:	b102      	cbz	r2, 8010278 <__cxa_guard_acquire+0xe>
 8010276:	deff      	udf	#255	@ 0xff
 8010278:	2001      	movs	r0, #1
 801027a:	7058      	strb	r0, [r3, #1]
 801027c:	4770      	bx	lr
 801027e:	2000      	movs	r0, #0
 8010280:	4770      	bx	lr

08010282 <__cxa_guard_release>:
 8010282:	2301      	movs	r3, #1
 8010284:	6003      	str	r3, [r0, #0]
 8010286:	4770      	bx	lr

08010288 <_Znwj>:
 8010288:	2801      	cmp	r0, #1
 801028a:	bf38      	it	cc
 801028c:	2001      	movcc	r0, #1
 801028e:	b510      	push	{r4, lr}
 8010290:	4604      	mov	r4, r0
 8010292:	4620      	mov	r0, r4
 8010294:	f000 f99e 	bl	80105d4 <malloc>
 8010298:	b100      	cbz	r0, 801029c <_Znwj+0x14>
 801029a:	bd10      	pop	{r4, pc}
 801029c:	f000 f984 	bl	80105a8 <_ZSt15get_new_handlerv>
 80102a0:	b908      	cbnz	r0, 80102a6 <_Znwj+0x1e>
 80102a2:	f000 f98f 	bl	80105c4 <abort>
 80102a6:	4780      	blx	r0
 80102a8:	e7f3      	b.n	8010292 <_Znwj+0xa>

080102aa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80102aa:	b10a      	cbz	r2, 80102b0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80102ac:	f000 bd4b 	b.w	8010d46 <memcpy>
 80102b0:	4770      	bx	lr

080102b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80102b2:	f850 3b08 	ldr.w	r3, [r0], #8
 80102b6:	1a1b      	subs	r3, r3, r0
 80102b8:	4258      	negs	r0, r3
 80102ba:	4158      	adcs	r0, r3
 80102bc:	4770      	bx	lr
	...

080102c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80102c0:	b508      	push	{r3, lr}
 80102c2:	680b      	ldr	r3, [r1, #0]
 80102c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102c8:	d302      	bcc.n	80102d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80102ca:	480d      	ldr	r0, [pc, #52]	@ (8010300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80102cc:	f000 f977 	bl	80105be <_ZSt20__throw_length_errorPKc>
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d90b      	bls.n	80102ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80102d4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80102d8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80102dc:	d206      	bcs.n	80102ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80102de:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80102e2:	bf2a      	itet	cs
 80102e4:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80102e8:	6008      	strcc	r0, [r1, #0]
 80102ea:	600b      	strcs	r3, [r1, #0]
 80102ec:	6808      	ldr	r0, [r1, #0]
 80102ee:	3001      	adds	r0, #1
 80102f0:	d501      	bpl.n	80102f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80102f2:	f000 f961 	bl	80105b8 <_ZSt17__throw_bad_allocv>
 80102f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80102fa:	f7ff bfc5 	b.w	8010288 <_Znwj>
 80102fe:	bf00      	nop
 8010300:	08011b34 	.word	0x08011b34

08010304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010304:	b510      	push	{r4, lr}
 8010306:	4604      	mov	r4, r0
 8010308:	f7ff ffd3 	bl	80102b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801030c:	b920      	cbnz	r0, 8010318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801030e:	6820      	ldr	r0, [r4, #0]
 8010310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010314:	f000 b945 	b.w	80105a2 <_ZdlPv>
 8010318:	bd10      	pop	{r4, pc}

0801031a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801031a:	6840      	ldr	r0, [r0, #4]
 801031c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8010320:	3901      	subs	r1, #1
 8010322:	1a09      	subs	r1, r1, r0
 8010324:	4291      	cmp	r1, r2
 8010326:	b508      	push	{r3, lr}
 8010328:	d202      	bcs.n	8010330 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801032a:	4618      	mov	r0, r3
 801032c:	f000 f947 	bl	80105be <_ZSt20__throw_length_errorPKc>
 8010330:	bd08      	pop	{r3, pc}

08010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010332:	2a01      	cmp	r2, #1
 8010334:	b410      	push	{r4}
 8010336:	d104      	bne.n	8010342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8010338:	780a      	ldrb	r2, [r1, #0]
 801033a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801033e:	7002      	strb	r2, [r0, #0]
 8010340:	4770      	bx	lr
 8010342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010346:	f7ff bfb0 	b.w	80102aa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801034a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801034a:	2a01      	cmp	r2, #1
 801034c:	b430      	push	{r4, r5}
 801034e:	d103      	bne.n	8010358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010350:	780b      	ldrb	r3, [r1, #0]
 8010352:	7003      	strb	r3, [r0, #0]
 8010354:	bc30      	pop	{r4, r5}
 8010356:	4770      	bx	lr
 8010358:	2a00      	cmp	r2, #0
 801035a:	d0fb      	beq.n	8010354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801035c:	bc30      	pop	{r4, r5}
 801035e:	f000 bc09 	b.w	8010b74 <memmove>

08010362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8010362:	460b      	mov	r3, r1
 8010364:	2b01      	cmp	r3, #1
 8010366:	b410      	push	{r4}
 8010368:	4611      	mov	r1, r2
 801036a:	4604      	mov	r4, r0
 801036c:	d103      	bne.n	8010376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801036e:	7022      	strb	r2, [r4, #0]
 8010370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	2b00      	cmp	r3, #0
 8010378:	d0fa      	beq.n	8010370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801037a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801037e:	461a      	mov	r2, r3
 8010380:	f000 bc12 	b.w	8010ba8 <memset>

08010384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8010384:	b508      	push	{r3, lr}
 8010386:	1a52      	subs	r2, r2, r1
 8010388:	f7ff ffd3 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801038c:	bd08      	pop	{r3, pc}

0801038e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801038e:	f100 0208 	add.w	r2, r0, #8
 8010392:	6002      	str	r2, [r0, #0]
 8010394:	2200      	movs	r2, #0
 8010396:	6042      	str	r2, [r0, #4]
 8010398:	7202      	strb	r2, [r0, #8]
 801039a:	4770      	bx	lr

0801039c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801039c:	b510      	push	{r4, lr}
 801039e:	4604      	mov	r4, r0
 80103a0:	f7ff ffb0 	bl	8010304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80103a4:	4620      	mov	r0, r4
 80103a6:	bd10      	pop	{r4, pc}

080103a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	460c      	mov	r4, r1
 80103ac:	4605      	mov	r5, r0
 80103ae:	f7ff ff80 	bl	80102b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80103b2:	4606      	mov	r6, r0
 80103b4:	4620      	mov	r0, r4
 80103b6:	f7ff ff7c 	bl	80102b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80103ba:	b190      	cbz	r0, 80103e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 80103bc:	42a5      	cmp	r5, r4
 80103be:	d00a      	beq.n	80103d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80103c0:	6862      	ldr	r2, [r4, #4]
 80103c2:	b11a      	cbz	r2, 80103cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 80103c4:	6821      	ldr	r1, [r4, #0]
 80103c6:	6828      	ldr	r0, [r5, #0]
 80103c8:	f7ff ffb3 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80103cc:	6863      	ldr	r3, [r4, #4]
 80103ce:	682a      	ldr	r2, [r5, #0]
 80103d0:	606b      	str	r3, [r5, #4]
 80103d2:	2100      	movs	r1, #0
 80103d4:	54d1      	strb	r1, [r2, r3]
 80103d6:	6822      	ldr	r2, [r4, #0]
 80103d8:	2300      	movs	r3, #0
 80103da:	6063      	str	r3, [r4, #4]
 80103dc:	7013      	strb	r3, [r2, #0]
 80103de:	4628      	mov	r0, r5
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e2:	b90e      	cbnz	r6, 80103e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80103e4:	6828      	ldr	r0, [r5, #0]
 80103e6:	68af      	ldr	r7, [r5, #8]
 80103e8:	6823      	ldr	r3, [r4, #0]
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	6863      	ldr	r3, [r4, #4]
 80103ee:	606b      	str	r3, [r5, #4]
 80103f0:	68a3      	ldr	r3, [r4, #8]
 80103f2:	60ab      	str	r3, [r5, #8]
 80103f4:	b110      	cbz	r0, 80103fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80103f6:	6020      	str	r0, [r4, #0]
 80103f8:	60a7      	str	r7, [r4, #8]
 80103fa:	e7ec      	b.n	80103d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80103fc:	f104 0308 	add.w	r3, r4, #8
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	e7e8      	b.n	80103d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08010404 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8010404:	b510      	push	{r4, lr}
 8010406:	4604      	mov	r4, r0
 8010408:	f7ff ff53 	bl	80102b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801040c:	b908      	cbnz	r0, 8010412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801040e:	68a0      	ldr	r0, [r4, #8]
 8010410:	bd10      	pop	{r4, pc}
 8010412:	200f      	movs	r0, #15
 8010414:	e7fc      	b.n	8010410 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08010416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8010416:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801041a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801041c:	461f      	mov	r7, r3
 801041e:	6843      	ldr	r3, [r0, #4]
 8010420:	eb01 0802 	add.w	r8, r1, r2
 8010424:	1ab2      	subs	r2, r6, r2
 8010426:	441a      	add	r2, r3
 8010428:	4604      	mov	r4, r0
 801042a:	460d      	mov	r5, r1
 801042c:	eba3 0908 	sub.w	r9, r3, r8
 8010430:	9201      	str	r2, [sp, #4]
 8010432:	f7ff ffe7 	bl	8010404 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8010436:	a901      	add	r1, sp, #4
 8010438:	4602      	mov	r2, r0
 801043a:	4620      	mov	r0, r4
 801043c:	f7ff ff40 	bl	80102c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010440:	4682      	mov	sl, r0
 8010442:	b11d      	cbz	r5, 801044c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8010444:	6821      	ldr	r1, [r4, #0]
 8010446:	462a      	mov	r2, r5
 8010448:	f7ff ff73 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801044c:	b137      	cbz	r7, 801045c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801044e:	b12e      	cbz	r6, 801045c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010450:	4632      	mov	r2, r6
 8010452:	4639      	mov	r1, r7
 8010454:	eb0a 0005 	add.w	r0, sl, r5
 8010458:	f7ff ff6b 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801045c:	f1b9 0f00 	cmp.w	r9, #0
 8010460:	d007      	beq.n	8010472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8010462:	6821      	ldr	r1, [r4, #0]
 8010464:	4435      	add	r5, r6
 8010466:	464a      	mov	r2, r9
 8010468:	4441      	add	r1, r8
 801046a:	eb0a 0005 	add.w	r0, sl, r5
 801046e:	f7ff ff60 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010472:	4620      	mov	r0, r4
 8010474:	f7ff ff46 	bl	8010304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010478:	9b01      	ldr	r3, [sp, #4]
 801047a:	f8c4 a000 	str.w	sl, [r4]
 801047e:	60a3      	str	r3, [r4, #8]
 8010480:	b002      	add	sp, #8
 8010482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8010486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010488:	4604      	mov	r4, r0
 801048a:	9101      	str	r1, [sp, #4]
 801048c:	f7ff ffba 	bl	8010404 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8010490:	9b01      	ldr	r3, [sp, #4]
 8010492:	4283      	cmp	r3, r0
 8010494:	4602      	mov	r2, r0
 8010496:	d90f      	bls.n	80104b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8010498:	a901      	add	r1, sp, #4
 801049a:	4620      	mov	r0, r4
 801049c:	f7ff ff10 	bl	80102c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80104a0:	6862      	ldr	r2, [r4, #4]
 80104a2:	6821      	ldr	r1, [r4, #0]
 80104a4:	3201      	adds	r2, #1
 80104a6:	4605      	mov	r5, r0
 80104a8:	f7ff ff43 	bl	8010332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80104ac:	4620      	mov	r0, r4
 80104ae:	f7ff ff29 	bl	8010304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80104b2:	9b01      	ldr	r3, [sp, #4]
 80104b4:	6025      	str	r5, [r4, #0]
 80104b6:	60a3      	str	r3, [r4, #8]
 80104b8:	b003      	add	sp, #12
 80104ba:	bd30      	pop	{r4, r5, pc}

080104bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80104bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104c0:	4616      	mov	r6, r2
 80104c2:	461d      	mov	r5, r3
 80104c4:	4604      	mov	r4, r0
 80104c6:	4b1b      	ldr	r3, [pc, #108]	@ (8010534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80104c8:	462a      	mov	r2, r5
 80104ca:	460f      	mov	r7, r1
 80104cc:	4631      	mov	r1, r6
 80104ce:	f7ff ff24 	bl	801031a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7ff ff96 	bl	8010404 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80104d8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80104dc:	eba5 0806 	sub.w	r8, r5, r6
 80104e0:	44c8      	add	r8, r9
 80104e2:	4540      	cmp	r0, r8
 80104e4:	d31d      	bcc.n	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80104e6:	19f3      	adds	r3, r6, r7
 80104e8:	ebb9 0203 	subs.w	r2, r9, r3
 80104ec:	d007      	beq.n	80104fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80104ee:	42ae      	cmp	r6, r5
 80104f0:	d005      	beq.n	80104fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80104f2:	6820      	ldr	r0, [r4, #0]
 80104f4:	4438      	add	r0, r7
 80104f6:	1981      	adds	r1, r0, r6
 80104f8:	4428      	add	r0, r5
 80104fa:	f7ff ff26 	bl	801034a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80104fe:	b135      	cbz	r5, 801050e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8010506:	4629      	mov	r1, r5
 8010508:	4438      	add	r0, r7
 801050a:	f7ff ff2a 	bl	8010362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	f8c4 8004 	str.w	r8, [r4, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	4620      	mov	r0, r4
 8010518:	f803 2008 	strb.w	r2, [r3, r8]
 801051c:	b003      	add	sp, #12
 801051e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010522:	9500      	str	r5, [sp, #0]
 8010524:	2300      	movs	r3, #0
 8010526:	4632      	mov	r2, r6
 8010528:	4639      	mov	r1, r7
 801052a:	4620      	mov	r0, r4
 801052c:	f7ff ff73 	bl	8010416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010530:	e7e5      	b.n	80104fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010532:	bf00      	nop
 8010534:	08011b4c 	.word	0x08011b4c

08010538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8010538:	b507      	push	{r0, r1, r2, lr}
 801053a:	9200      	str	r2, [sp, #0]
 801053c:	460b      	mov	r3, r1
 801053e:	2200      	movs	r2, #0
 8010540:	6841      	ldr	r1, [r0, #4]
 8010542:	f7ff ffbb 	bl	80104bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8010546:	b003      	add	sp, #12
 8010548:	f85d fb04 	ldr.w	pc, [sp], #4

0801054c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801054c:	6800      	ldr	r0, [r0, #0]
 801054e:	4770      	bx	lr

08010550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8010550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010552:	1a53      	subs	r3, r2, r1
 8010554:	2b0f      	cmp	r3, #15
 8010556:	4604      	mov	r4, r0
 8010558:	460d      	mov	r5, r1
 801055a:	4616      	mov	r6, r2
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	d906      	bls.n	801056e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8010560:	2200      	movs	r2, #0
 8010562:	a901      	add	r1, sp, #4
 8010564:	f7ff feac 	bl	80102c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010568:	9b01      	ldr	r3, [sp, #4]
 801056a:	6020      	str	r0, [r4, #0]
 801056c:	60a3      	str	r3, [r4, #8]
 801056e:	4632      	mov	r2, r6
 8010570:	4629      	mov	r1, r5
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	f7ff ff06 	bl	8010384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8010578:	9b01      	ldr	r3, [sp, #4]
 801057a:	6822      	ldr	r2, [r4, #0]
 801057c:	6063      	str	r3, [r4, #4]
 801057e:	2100      	movs	r1, #0
 8010580:	54d1      	strb	r1, [r2, r3]
 8010582:	b002      	add	sp, #8
 8010584:	bd70      	pop	{r4, r5, r6, pc}

08010586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8010586:	f100 0208 	add.w	r2, r0, #8
 801058a:	b510      	push	{r4, lr}
 801058c:	6002      	str	r2, [r0, #0]
 801058e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8010592:	4604      	mov	r4, r0
 8010594:	f04f 0300 	mov.w	r3, #0
 8010598:	440a      	add	r2, r1
 801059a:	f7ff ffd9 	bl	8010550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801059e:	4620      	mov	r0, r4
 80105a0:	bd10      	pop	{r4, pc}

080105a2 <_ZdlPv>:
 80105a2:	f000 b81f 	b.w	80105e4 <free>
	...

080105a8 <_ZSt15get_new_handlerv>:
 80105a8:	4b02      	ldr	r3, [pc, #8]	@ (80105b4 <_ZSt15get_new_handlerv+0xc>)
 80105aa:	6818      	ldr	r0, [r3, #0]
 80105ac:	f3bf 8f5b 	dmb	ish
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	24000c18 	.word	0x24000c18

080105b8 <_ZSt17__throw_bad_allocv>:
 80105b8:	b508      	push	{r3, lr}
 80105ba:	f000 f803 	bl	80105c4 <abort>

080105be <_ZSt20__throw_length_errorPKc>:
 80105be:	b508      	push	{r3, lr}
 80105c0:	f000 f800 	bl	80105c4 <abort>

080105c4 <abort>:
 80105c4:	b508      	push	{r3, lr}
 80105c6:	2006      	movs	r0, #6
 80105c8:	f000 fb1e 	bl	8010c08 <raise>
 80105cc:	2001      	movs	r0, #1
 80105ce:	f7f3 f82f 	bl	8003630 <_exit>
	...

080105d4 <malloc>:
 80105d4:	4b02      	ldr	r3, [pc, #8]	@ (80105e0 <malloc+0xc>)
 80105d6:	4601      	mov	r1, r0
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	f000 b82d 	b.w	8010638 <_malloc_r>
 80105de:	bf00      	nop
 80105e0:	2400006c 	.word	0x2400006c

080105e4 <free>:
 80105e4:	4b02      	ldr	r3, [pc, #8]	@ (80105f0 <free+0xc>)
 80105e6:	4601      	mov	r1, r0
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	f000 bbbb 	b.w	8010d64 <_free_r>
 80105ee:	bf00      	nop
 80105f0:	2400006c 	.word	0x2400006c

080105f4 <sbrk_aligned>:
 80105f4:	b570      	push	{r4, r5, r6, lr}
 80105f6:	4e0f      	ldr	r6, [pc, #60]	@ (8010634 <sbrk_aligned+0x40>)
 80105f8:	460c      	mov	r4, r1
 80105fa:	6831      	ldr	r1, [r6, #0]
 80105fc:	4605      	mov	r5, r0
 80105fe:	b911      	cbnz	r1, 8010606 <sbrk_aligned+0x12>
 8010600:	f000 fb52 	bl	8010ca8 <_sbrk_r>
 8010604:	6030      	str	r0, [r6, #0]
 8010606:	4621      	mov	r1, r4
 8010608:	4628      	mov	r0, r5
 801060a:	f000 fb4d 	bl	8010ca8 <_sbrk_r>
 801060e:	1c43      	adds	r3, r0, #1
 8010610:	d103      	bne.n	801061a <sbrk_aligned+0x26>
 8010612:	f04f 34ff 	mov.w	r4, #4294967295
 8010616:	4620      	mov	r0, r4
 8010618:	bd70      	pop	{r4, r5, r6, pc}
 801061a:	1cc4      	adds	r4, r0, #3
 801061c:	f024 0403 	bic.w	r4, r4, #3
 8010620:	42a0      	cmp	r0, r4
 8010622:	d0f8      	beq.n	8010616 <sbrk_aligned+0x22>
 8010624:	1a21      	subs	r1, r4, r0
 8010626:	4628      	mov	r0, r5
 8010628:	f000 fb3e 	bl	8010ca8 <_sbrk_r>
 801062c:	3001      	adds	r0, #1
 801062e:	d1f2      	bne.n	8010616 <sbrk_aligned+0x22>
 8010630:	e7ef      	b.n	8010612 <sbrk_aligned+0x1e>
 8010632:	bf00      	nop
 8010634:	24000c1c 	.word	0x24000c1c

08010638 <_malloc_r>:
 8010638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801063c:	1ccd      	adds	r5, r1, #3
 801063e:	f025 0503 	bic.w	r5, r5, #3
 8010642:	3508      	adds	r5, #8
 8010644:	2d0c      	cmp	r5, #12
 8010646:	bf38      	it	cc
 8010648:	250c      	movcc	r5, #12
 801064a:	2d00      	cmp	r5, #0
 801064c:	4606      	mov	r6, r0
 801064e:	db01      	blt.n	8010654 <_malloc_r+0x1c>
 8010650:	42a9      	cmp	r1, r5
 8010652:	d904      	bls.n	801065e <_malloc_r+0x26>
 8010654:	230c      	movs	r3, #12
 8010656:	6033      	str	r3, [r6, #0]
 8010658:	2000      	movs	r0, #0
 801065a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801065e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010734 <_malloc_r+0xfc>
 8010662:	f000 f869 	bl	8010738 <__malloc_lock>
 8010666:	f8d8 3000 	ldr.w	r3, [r8]
 801066a:	461c      	mov	r4, r3
 801066c:	bb44      	cbnz	r4, 80106c0 <_malloc_r+0x88>
 801066e:	4629      	mov	r1, r5
 8010670:	4630      	mov	r0, r6
 8010672:	f7ff ffbf 	bl	80105f4 <sbrk_aligned>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	4604      	mov	r4, r0
 801067a:	d158      	bne.n	801072e <_malloc_r+0xf6>
 801067c:	f8d8 4000 	ldr.w	r4, [r8]
 8010680:	4627      	mov	r7, r4
 8010682:	2f00      	cmp	r7, #0
 8010684:	d143      	bne.n	801070e <_malloc_r+0xd6>
 8010686:	2c00      	cmp	r4, #0
 8010688:	d04b      	beq.n	8010722 <_malloc_r+0xea>
 801068a:	6823      	ldr	r3, [r4, #0]
 801068c:	4639      	mov	r1, r7
 801068e:	4630      	mov	r0, r6
 8010690:	eb04 0903 	add.w	r9, r4, r3
 8010694:	f000 fb08 	bl	8010ca8 <_sbrk_r>
 8010698:	4581      	cmp	r9, r0
 801069a:	d142      	bne.n	8010722 <_malloc_r+0xea>
 801069c:	6821      	ldr	r1, [r4, #0]
 801069e:	1a6d      	subs	r5, r5, r1
 80106a0:	4629      	mov	r1, r5
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff ffa6 	bl	80105f4 <sbrk_aligned>
 80106a8:	3001      	adds	r0, #1
 80106aa:	d03a      	beq.n	8010722 <_malloc_r+0xea>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	442b      	add	r3, r5
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	f8d8 3000 	ldr.w	r3, [r8]
 80106b6:	685a      	ldr	r2, [r3, #4]
 80106b8:	bb62      	cbnz	r2, 8010714 <_malloc_r+0xdc>
 80106ba:	f8c8 7000 	str.w	r7, [r8]
 80106be:	e00f      	b.n	80106e0 <_malloc_r+0xa8>
 80106c0:	6822      	ldr	r2, [r4, #0]
 80106c2:	1b52      	subs	r2, r2, r5
 80106c4:	d420      	bmi.n	8010708 <_malloc_r+0xd0>
 80106c6:	2a0b      	cmp	r2, #11
 80106c8:	d917      	bls.n	80106fa <_malloc_r+0xc2>
 80106ca:	1961      	adds	r1, r4, r5
 80106cc:	42a3      	cmp	r3, r4
 80106ce:	6025      	str	r5, [r4, #0]
 80106d0:	bf18      	it	ne
 80106d2:	6059      	strne	r1, [r3, #4]
 80106d4:	6863      	ldr	r3, [r4, #4]
 80106d6:	bf08      	it	eq
 80106d8:	f8c8 1000 	streq.w	r1, [r8]
 80106dc:	5162      	str	r2, [r4, r5]
 80106de:	604b      	str	r3, [r1, #4]
 80106e0:	4630      	mov	r0, r6
 80106e2:	f000 f82f 	bl	8010744 <__malloc_unlock>
 80106e6:	f104 000b 	add.w	r0, r4, #11
 80106ea:	1d23      	adds	r3, r4, #4
 80106ec:	f020 0007 	bic.w	r0, r0, #7
 80106f0:	1ac2      	subs	r2, r0, r3
 80106f2:	bf1c      	itt	ne
 80106f4:	1a1b      	subne	r3, r3, r0
 80106f6:	50a3      	strne	r3, [r4, r2]
 80106f8:	e7af      	b.n	801065a <_malloc_r+0x22>
 80106fa:	6862      	ldr	r2, [r4, #4]
 80106fc:	42a3      	cmp	r3, r4
 80106fe:	bf0c      	ite	eq
 8010700:	f8c8 2000 	streq.w	r2, [r8]
 8010704:	605a      	strne	r2, [r3, #4]
 8010706:	e7eb      	b.n	80106e0 <_malloc_r+0xa8>
 8010708:	4623      	mov	r3, r4
 801070a:	6864      	ldr	r4, [r4, #4]
 801070c:	e7ae      	b.n	801066c <_malloc_r+0x34>
 801070e:	463c      	mov	r4, r7
 8010710:	687f      	ldr	r7, [r7, #4]
 8010712:	e7b6      	b.n	8010682 <_malloc_r+0x4a>
 8010714:	461a      	mov	r2, r3
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	42a3      	cmp	r3, r4
 801071a:	d1fb      	bne.n	8010714 <_malloc_r+0xdc>
 801071c:	2300      	movs	r3, #0
 801071e:	6053      	str	r3, [r2, #4]
 8010720:	e7de      	b.n	80106e0 <_malloc_r+0xa8>
 8010722:	230c      	movs	r3, #12
 8010724:	6033      	str	r3, [r6, #0]
 8010726:	4630      	mov	r0, r6
 8010728:	f000 f80c 	bl	8010744 <__malloc_unlock>
 801072c:	e794      	b.n	8010658 <_malloc_r+0x20>
 801072e:	6005      	str	r5, [r0, #0]
 8010730:	e7d6      	b.n	80106e0 <_malloc_r+0xa8>
 8010732:	bf00      	nop
 8010734:	24000c20 	.word	0x24000c20

08010738 <__malloc_lock>:
 8010738:	4801      	ldr	r0, [pc, #4]	@ (8010740 <__malloc_lock+0x8>)
 801073a:	f000 bb02 	b.w	8010d42 <__retarget_lock_acquire_recursive>
 801073e:	bf00      	nop
 8010740:	24000d64 	.word	0x24000d64

08010744 <__malloc_unlock>:
 8010744:	4801      	ldr	r0, [pc, #4]	@ (801074c <__malloc_unlock+0x8>)
 8010746:	f000 bafd 	b.w	8010d44 <__retarget_lock_release_recursive>
 801074a:	bf00      	nop
 801074c:	24000d64 	.word	0x24000d64

08010750 <std>:
 8010750:	2300      	movs	r3, #0
 8010752:	b510      	push	{r4, lr}
 8010754:	4604      	mov	r4, r0
 8010756:	e9c0 3300 	strd	r3, r3, [r0]
 801075a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801075e:	6083      	str	r3, [r0, #8]
 8010760:	8181      	strh	r1, [r0, #12]
 8010762:	6643      	str	r3, [r0, #100]	@ 0x64
 8010764:	81c2      	strh	r2, [r0, #14]
 8010766:	6183      	str	r3, [r0, #24]
 8010768:	4619      	mov	r1, r3
 801076a:	2208      	movs	r2, #8
 801076c:	305c      	adds	r0, #92	@ 0x5c
 801076e:	f000 fa1b 	bl	8010ba8 <memset>
 8010772:	4b0d      	ldr	r3, [pc, #52]	@ (80107a8 <std+0x58>)
 8010774:	6263      	str	r3, [r4, #36]	@ 0x24
 8010776:	4b0d      	ldr	r3, [pc, #52]	@ (80107ac <std+0x5c>)
 8010778:	62a3      	str	r3, [r4, #40]	@ 0x28
 801077a:	4b0d      	ldr	r3, [pc, #52]	@ (80107b0 <std+0x60>)
 801077c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801077e:	4b0d      	ldr	r3, [pc, #52]	@ (80107b4 <std+0x64>)
 8010780:	6323      	str	r3, [r4, #48]	@ 0x30
 8010782:	4b0d      	ldr	r3, [pc, #52]	@ (80107b8 <std+0x68>)
 8010784:	6224      	str	r4, [r4, #32]
 8010786:	429c      	cmp	r4, r3
 8010788:	d006      	beq.n	8010798 <std+0x48>
 801078a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801078e:	4294      	cmp	r4, r2
 8010790:	d002      	beq.n	8010798 <std+0x48>
 8010792:	33d0      	adds	r3, #208	@ 0xd0
 8010794:	429c      	cmp	r4, r3
 8010796:	d105      	bne.n	80107a4 <std+0x54>
 8010798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107a0:	f000 bace 	b.w	8010d40 <__retarget_lock_init_recursive>
 80107a4:	bd10      	pop	{r4, pc}
 80107a6:	bf00      	nop
 80107a8:	080109c5 	.word	0x080109c5
 80107ac:	080109e7 	.word	0x080109e7
 80107b0:	08010a1f 	.word	0x08010a1f
 80107b4:	08010a43 	.word	0x08010a43
 80107b8:	24000c24 	.word	0x24000c24

080107bc <stdio_exit_handler>:
 80107bc:	4a02      	ldr	r2, [pc, #8]	@ (80107c8 <stdio_exit_handler+0xc>)
 80107be:	4903      	ldr	r1, [pc, #12]	@ (80107cc <stdio_exit_handler+0x10>)
 80107c0:	4803      	ldr	r0, [pc, #12]	@ (80107d0 <stdio_exit_handler+0x14>)
 80107c2:	f000 b869 	b.w	8010898 <_fwalk_sglue>
 80107c6:	bf00      	nop
 80107c8:	24000060 	.word	0x24000060
 80107cc:	080114a1 	.word	0x080114a1
 80107d0:	24000070 	.word	0x24000070

080107d4 <cleanup_stdio>:
 80107d4:	6841      	ldr	r1, [r0, #4]
 80107d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010808 <cleanup_stdio+0x34>)
 80107d8:	4299      	cmp	r1, r3
 80107da:	b510      	push	{r4, lr}
 80107dc:	4604      	mov	r4, r0
 80107de:	d001      	beq.n	80107e4 <cleanup_stdio+0x10>
 80107e0:	f000 fe5e 	bl	80114a0 <_fflush_r>
 80107e4:	68a1      	ldr	r1, [r4, #8]
 80107e6:	4b09      	ldr	r3, [pc, #36]	@ (801080c <cleanup_stdio+0x38>)
 80107e8:	4299      	cmp	r1, r3
 80107ea:	d002      	beq.n	80107f2 <cleanup_stdio+0x1e>
 80107ec:	4620      	mov	r0, r4
 80107ee:	f000 fe57 	bl	80114a0 <_fflush_r>
 80107f2:	68e1      	ldr	r1, [r4, #12]
 80107f4:	4b06      	ldr	r3, [pc, #24]	@ (8010810 <cleanup_stdio+0x3c>)
 80107f6:	4299      	cmp	r1, r3
 80107f8:	d004      	beq.n	8010804 <cleanup_stdio+0x30>
 80107fa:	4620      	mov	r0, r4
 80107fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010800:	f000 be4e 	b.w	80114a0 <_fflush_r>
 8010804:	bd10      	pop	{r4, pc}
 8010806:	bf00      	nop
 8010808:	24000c24 	.word	0x24000c24
 801080c:	24000c8c 	.word	0x24000c8c
 8010810:	24000cf4 	.word	0x24000cf4

08010814 <global_stdio_init.part.0>:
 8010814:	b510      	push	{r4, lr}
 8010816:	4b0b      	ldr	r3, [pc, #44]	@ (8010844 <global_stdio_init.part.0+0x30>)
 8010818:	4c0b      	ldr	r4, [pc, #44]	@ (8010848 <global_stdio_init.part.0+0x34>)
 801081a:	4a0c      	ldr	r2, [pc, #48]	@ (801084c <global_stdio_init.part.0+0x38>)
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	4620      	mov	r0, r4
 8010820:	2200      	movs	r2, #0
 8010822:	2104      	movs	r1, #4
 8010824:	f7ff ff94 	bl	8010750 <std>
 8010828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801082c:	2201      	movs	r2, #1
 801082e:	2109      	movs	r1, #9
 8010830:	f7ff ff8e 	bl	8010750 <std>
 8010834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010838:	2202      	movs	r2, #2
 801083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801083e:	2112      	movs	r1, #18
 8010840:	f7ff bf86 	b.w	8010750 <std>
 8010844:	24000d5c 	.word	0x24000d5c
 8010848:	24000c24 	.word	0x24000c24
 801084c:	080107bd 	.word	0x080107bd

08010850 <__sfp_lock_acquire>:
 8010850:	4801      	ldr	r0, [pc, #4]	@ (8010858 <__sfp_lock_acquire+0x8>)
 8010852:	f000 ba76 	b.w	8010d42 <__retarget_lock_acquire_recursive>
 8010856:	bf00      	nop
 8010858:	24000d65 	.word	0x24000d65

0801085c <__sfp_lock_release>:
 801085c:	4801      	ldr	r0, [pc, #4]	@ (8010864 <__sfp_lock_release+0x8>)
 801085e:	f000 ba71 	b.w	8010d44 <__retarget_lock_release_recursive>
 8010862:	bf00      	nop
 8010864:	24000d65 	.word	0x24000d65

08010868 <__sinit>:
 8010868:	b510      	push	{r4, lr}
 801086a:	4604      	mov	r4, r0
 801086c:	f7ff fff0 	bl	8010850 <__sfp_lock_acquire>
 8010870:	6a23      	ldr	r3, [r4, #32]
 8010872:	b11b      	cbz	r3, 801087c <__sinit+0x14>
 8010874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010878:	f7ff bff0 	b.w	801085c <__sfp_lock_release>
 801087c:	4b04      	ldr	r3, [pc, #16]	@ (8010890 <__sinit+0x28>)
 801087e:	6223      	str	r3, [r4, #32]
 8010880:	4b04      	ldr	r3, [pc, #16]	@ (8010894 <__sinit+0x2c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1f5      	bne.n	8010874 <__sinit+0xc>
 8010888:	f7ff ffc4 	bl	8010814 <global_stdio_init.part.0>
 801088c:	e7f2      	b.n	8010874 <__sinit+0xc>
 801088e:	bf00      	nop
 8010890:	080107d5 	.word	0x080107d5
 8010894:	24000d5c 	.word	0x24000d5c

08010898 <_fwalk_sglue>:
 8010898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4607      	mov	r7, r0
 801089e:	4688      	mov	r8, r1
 80108a0:	4614      	mov	r4, r2
 80108a2:	2600      	movs	r6, #0
 80108a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108a8:	f1b9 0901 	subs.w	r9, r9, #1
 80108ac:	d505      	bpl.n	80108ba <_fwalk_sglue+0x22>
 80108ae:	6824      	ldr	r4, [r4, #0]
 80108b0:	2c00      	cmp	r4, #0
 80108b2:	d1f7      	bne.n	80108a4 <_fwalk_sglue+0xc>
 80108b4:	4630      	mov	r0, r6
 80108b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ba:	89ab      	ldrh	r3, [r5, #12]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d907      	bls.n	80108d0 <_fwalk_sglue+0x38>
 80108c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108c4:	3301      	adds	r3, #1
 80108c6:	d003      	beq.n	80108d0 <_fwalk_sglue+0x38>
 80108c8:	4629      	mov	r1, r5
 80108ca:	4638      	mov	r0, r7
 80108cc:	47c0      	blx	r8
 80108ce:	4306      	orrs	r6, r0
 80108d0:	3568      	adds	r5, #104	@ 0x68
 80108d2:	e7e9      	b.n	80108a8 <_fwalk_sglue+0x10>

080108d4 <iprintf>:
 80108d4:	b40f      	push	{r0, r1, r2, r3}
 80108d6:	b507      	push	{r0, r1, r2, lr}
 80108d8:	4906      	ldr	r1, [pc, #24]	@ (80108f4 <iprintf+0x20>)
 80108da:	ab04      	add	r3, sp, #16
 80108dc:	6808      	ldr	r0, [r1, #0]
 80108de:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e2:	6881      	ldr	r1, [r0, #8]
 80108e4:	9301      	str	r3, [sp, #4]
 80108e6:	f000 fab1 	bl	8010e4c <_vfiprintf_r>
 80108ea:	b003      	add	sp, #12
 80108ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80108f0:	b004      	add	sp, #16
 80108f2:	4770      	bx	lr
 80108f4:	2400006c 	.word	0x2400006c

080108f8 <putchar>:
 80108f8:	4b02      	ldr	r3, [pc, #8]	@ (8010904 <putchar+0xc>)
 80108fa:	4601      	mov	r1, r0
 80108fc:	6818      	ldr	r0, [r3, #0]
 80108fe:	6882      	ldr	r2, [r0, #8]
 8010900:	f000 be58 	b.w	80115b4 <_putc_r>
 8010904:	2400006c 	.word	0x2400006c

08010908 <_puts_r>:
 8010908:	6a03      	ldr	r3, [r0, #32]
 801090a:	b570      	push	{r4, r5, r6, lr}
 801090c:	6884      	ldr	r4, [r0, #8]
 801090e:	4605      	mov	r5, r0
 8010910:	460e      	mov	r6, r1
 8010912:	b90b      	cbnz	r3, 8010918 <_puts_r+0x10>
 8010914:	f7ff ffa8 	bl	8010868 <__sinit>
 8010918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801091a:	07db      	lsls	r3, r3, #31
 801091c:	d405      	bmi.n	801092a <_puts_r+0x22>
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	0598      	lsls	r0, r3, #22
 8010922:	d402      	bmi.n	801092a <_puts_r+0x22>
 8010924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010926:	f000 fa0c 	bl	8010d42 <__retarget_lock_acquire_recursive>
 801092a:	89a3      	ldrh	r3, [r4, #12]
 801092c:	0719      	lsls	r1, r3, #28
 801092e:	d502      	bpl.n	8010936 <_puts_r+0x2e>
 8010930:	6923      	ldr	r3, [r4, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d135      	bne.n	80109a2 <_puts_r+0x9a>
 8010936:	4621      	mov	r1, r4
 8010938:	4628      	mov	r0, r5
 801093a:	f000 f8c5 	bl	8010ac8 <__swsetup_r>
 801093e:	b380      	cbz	r0, 80109a2 <_puts_r+0x9a>
 8010940:	f04f 35ff 	mov.w	r5, #4294967295
 8010944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010946:	07da      	lsls	r2, r3, #31
 8010948:	d405      	bmi.n	8010956 <_puts_r+0x4e>
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	059b      	lsls	r3, r3, #22
 801094e:	d402      	bmi.n	8010956 <_puts_r+0x4e>
 8010950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010952:	f000 f9f7 	bl	8010d44 <__retarget_lock_release_recursive>
 8010956:	4628      	mov	r0, r5
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	2b00      	cmp	r3, #0
 801095c:	da04      	bge.n	8010968 <_puts_r+0x60>
 801095e:	69a2      	ldr	r2, [r4, #24]
 8010960:	429a      	cmp	r2, r3
 8010962:	dc17      	bgt.n	8010994 <_puts_r+0x8c>
 8010964:	290a      	cmp	r1, #10
 8010966:	d015      	beq.n	8010994 <_puts_r+0x8c>
 8010968:	6823      	ldr	r3, [r4, #0]
 801096a:	1c5a      	adds	r2, r3, #1
 801096c:	6022      	str	r2, [r4, #0]
 801096e:	7019      	strb	r1, [r3, #0]
 8010970:	68a3      	ldr	r3, [r4, #8]
 8010972:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010976:	3b01      	subs	r3, #1
 8010978:	60a3      	str	r3, [r4, #8]
 801097a:	2900      	cmp	r1, #0
 801097c:	d1ed      	bne.n	801095a <_puts_r+0x52>
 801097e:	2b00      	cmp	r3, #0
 8010980:	da11      	bge.n	80109a6 <_puts_r+0x9e>
 8010982:	4622      	mov	r2, r4
 8010984:	210a      	movs	r1, #10
 8010986:	4628      	mov	r0, r5
 8010988:	f000 f85f 	bl	8010a4a <__swbuf_r>
 801098c:	3001      	adds	r0, #1
 801098e:	d0d7      	beq.n	8010940 <_puts_r+0x38>
 8010990:	250a      	movs	r5, #10
 8010992:	e7d7      	b.n	8010944 <_puts_r+0x3c>
 8010994:	4622      	mov	r2, r4
 8010996:	4628      	mov	r0, r5
 8010998:	f000 f857 	bl	8010a4a <__swbuf_r>
 801099c:	3001      	adds	r0, #1
 801099e:	d1e7      	bne.n	8010970 <_puts_r+0x68>
 80109a0:	e7ce      	b.n	8010940 <_puts_r+0x38>
 80109a2:	3e01      	subs	r6, #1
 80109a4:	e7e4      	b.n	8010970 <_puts_r+0x68>
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	6022      	str	r2, [r4, #0]
 80109ac:	220a      	movs	r2, #10
 80109ae:	701a      	strb	r2, [r3, #0]
 80109b0:	e7ee      	b.n	8010990 <_puts_r+0x88>
	...

080109b4 <puts>:
 80109b4:	4b02      	ldr	r3, [pc, #8]	@ (80109c0 <puts+0xc>)
 80109b6:	4601      	mov	r1, r0
 80109b8:	6818      	ldr	r0, [r3, #0]
 80109ba:	f7ff bfa5 	b.w	8010908 <_puts_r>
 80109be:	bf00      	nop
 80109c0:	2400006c 	.word	0x2400006c

080109c4 <__sread>:
 80109c4:	b510      	push	{r4, lr}
 80109c6:	460c      	mov	r4, r1
 80109c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109cc:	f000 f946 	bl	8010c5c <_read_r>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	bfab      	itete	ge
 80109d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80109d6:	89a3      	ldrhlt	r3, [r4, #12]
 80109d8:	181b      	addge	r3, r3, r0
 80109da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80109de:	bfac      	ite	ge
 80109e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80109e2:	81a3      	strhlt	r3, [r4, #12]
 80109e4:	bd10      	pop	{r4, pc}

080109e6 <__swrite>:
 80109e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ea:	461f      	mov	r7, r3
 80109ec:	898b      	ldrh	r3, [r1, #12]
 80109ee:	05db      	lsls	r3, r3, #23
 80109f0:	4605      	mov	r5, r0
 80109f2:	460c      	mov	r4, r1
 80109f4:	4616      	mov	r6, r2
 80109f6:	d505      	bpl.n	8010a04 <__swrite+0x1e>
 80109f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109fc:	2302      	movs	r3, #2
 80109fe:	2200      	movs	r2, #0
 8010a00:	f000 f91a 	bl	8010c38 <_lseek_r>
 8010a04:	89a3      	ldrh	r3, [r4, #12]
 8010a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010a0e:	81a3      	strh	r3, [r4, #12]
 8010a10:	4632      	mov	r2, r6
 8010a12:	463b      	mov	r3, r7
 8010a14:	4628      	mov	r0, r5
 8010a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1a:	f000 b955 	b.w	8010cc8 <_write_r>

08010a1e <__sseek>:
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	460c      	mov	r4, r1
 8010a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a26:	f000 f907 	bl	8010c38 <_lseek_r>
 8010a2a:	1c43      	adds	r3, r0, #1
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	bf15      	itete	ne
 8010a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010a3a:	81a3      	strheq	r3, [r4, #12]
 8010a3c:	bf18      	it	ne
 8010a3e:	81a3      	strhne	r3, [r4, #12]
 8010a40:	bd10      	pop	{r4, pc}

08010a42 <__sclose>:
 8010a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a46:	f000 b8e7 	b.w	8010c18 <_close_r>

08010a4a <__swbuf_r>:
 8010a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4c:	460e      	mov	r6, r1
 8010a4e:	4614      	mov	r4, r2
 8010a50:	4605      	mov	r5, r0
 8010a52:	b118      	cbz	r0, 8010a5c <__swbuf_r+0x12>
 8010a54:	6a03      	ldr	r3, [r0, #32]
 8010a56:	b90b      	cbnz	r3, 8010a5c <__swbuf_r+0x12>
 8010a58:	f7ff ff06 	bl	8010868 <__sinit>
 8010a5c:	69a3      	ldr	r3, [r4, #24]
 8010a5e:	60a3      	str	r3, [r4, #8]
 8010a60:	89a3      	ldrh	r3, [r4, #12]
 8010a62:	071a      	lsls	r2, r3, #28
 8010a64:	d501      	bpl.n	8010a6a <__swbuf_r+0x20>
 8010a66:	6923      	ldr	r3, [r4, #16]
 8010a68:	b943      	cbnz	r3, 8010a7c <__swbuf_r+0x32>
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f000 f82b 	bl	8010ac8 <__swsetup_r>
 8010a72:	b118      	cbz	r0, 8010a7c <__swbuf_r+0x32>
 8010a74:	f04f 37ff 	mov.w	r7, #4294967295
 8010a78:	4638      	mov	r0, r7
 8010a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	6922      	ldr	r2, [r4, #16]
 8010a80:	1a98      	subs	r0, r3, r2
 8010a82:	6963      	ldr	r3, [r4, #20]
 8010a84:	b2f6      	uxtb	r6, r6
 8010a86:	4283      	cmp	r3, r0
 8010a88:	4637      	mov	r7, r6
 8010a8a:	dc05      	bgt.n	8010a98 <__swbuf_r+0x4e>
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f000 fd06 	bl	80114a0 <_fflush_r>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d1ed      	bne.n	8010a74 <__swbuf_r+0x2a>
 8010a98:	68a3      	ldr	r3, [r4, #8]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	60a3      	str	r3, [r4, #8]
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	6022      	str	r2, [r4, #0]
 8010aa4:	701e      	strb	r6, [r3, #0]
 8010aa6:	6962      	ldr	r2, [r4, #20]
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d004      	beq.n	8010ab8 <__swbuf_r+0x6e>
 8010aae:	89a3      	ldrh	r3, [r4, #12]
 8010ab0:	07db      	lsls	r3, r3, #31
 8010ab2:	d5e1      	bpl.n	8010a78 <__swbuf_r+0x2e>
 8010ab4:	2e0a      	cmp	r6, #10
 8010ab6:	d1df      	bne.n	8010a78 <__swbuf_r+0x2e>
 8010ab8:	4621      	mov	r1, r4
 8010aba:	4628      	mov	r0, r5
 8010abc:	f000 fcf0 	bl	80114a0 <_fflush_r>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d0d9      	beq.n	8010a78 <__swbuf_r+0x2e>
 8010ac4:	e7d6      	b.n	8010a74 <__swbuf_r+0x2a>
	...

08010ac8 <__swsetup_r>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	4b29      	ldr	r3, [pc, #164]	@ (8010b70 <__swsetup_r+0xa8>)
 8010acc:	4605      	mov	r5, r0
 8010ace:	6818      	ldr	r0, [r3, #0]
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	b118      	cbz	r0, 8010adc <__swsetup_r+0x14>
 8010ad4:	6a03      	ldr	r3, [r0, #32]
 8010ad6:	b90b      	cbnz	r3, 8010adc <__swsetup_r+0x14>
 8010ad8:	f7ff fec6 	bl	8010868 <__sinit>
 8010adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae0:	0719      	lsls	r1, r3, #28
 8010ae2:	d422      	bmi.n	8010b2a <__swsetup_r+0x62>
 8010ae4:	06da      	lsls	r2, r3, #27
 8010ae6:	d407      	bmi.n	8010af8 <__swsetup_r+0x30>
 8010ae8:	2209      	movs	r2, #9
 8010aea:	602a      	str	r2, [r5, #0]
 8010aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010af0:	81a3      	strh	r3, [r4, #12]
 8010af2:	f04f 30ff 	mov.w	r0, #4294967295
 8010af6:	e033      	b.n	8010b60 <__swsetup_r+0x98>
 8010af8:	0758      	lsls	r0, r3, #29
 8010afa:	d512      	bpl.n	8010b22 <__swsetup_r+0x5a>
 8010afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010afe:	b141      	cbz	r1, 8010b12 <__swsetup_r+0x4a>
 8010b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b04:	4299      	cmp	r1, r3
 8010b06:	d002      	beq.n	8010b0e <__swsetup_r+0x46>
 8010b08:	4628      	mov	r0, r5
 8010b0a:	f000 f92b 	bl	8010d64 <_free_r>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b12:	89a3      	ldrh	r3, [r4, #12]
 8010b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010b18:	81a3      	strh	r3, [r4, #12]
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	6063      	str	r3, [r4, #4]
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	f043 0308 	orr.w	r3, r3, #8
 8010b28:	81a3      	strh	r3, [r4, #12]
 8010b2a:	6923      	ldr	r3, [r4, #16]
 8010b2c:	b94b      	cbnz	r3, 8010b42 <__swsetup_r+0x7a>
 8010b2e:	89a3      	ldrh	r3, [r4, #12]
 8010b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b38:	d003      	beq.n	8010b42 <__swsetup_r+0x7a>
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f000 fcfd 	bl	801153c <__smakebuf_r>
 8010b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b46:	f013 0201 	ands.w	r2, r3, #1
 8010b4a:	d00a      	beq.n	8010b62 <__swsetup_r+0x9a>
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	60a2      	str	r2, [r4, #8]
 8010b50:	6962      	ldr	r2, [r4, #20]
 8010b52:	4252      	negs	r2, r2
 8010b54:	61a2      	str	r2, [r4, #24]
 8010b56:	6922      	ldr	r2, [r4, #16]
 8010b58:	b942      	cbnz	r2, 8010b6c <__swsetup_r+0xa4>
 8010b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010b5e:	d1c5      	bne.n	8010aec <__swsetup_r+0x24>
 8010b60:	bd38      	pop	{r3, r4, r5, pc}
 8010b62:	0799      	lsls	r1, r3, #30
 8010b64:	bf58      	it	pl
 8010b66:	6962      	ldrpl	r2, [r4, #20]
 8010b68:	60a2      	str	r2, [r4, #8]
 8010b6a:	e7f4      	b.n	8010b56 <__swsetup_r+0x8e>
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	e7f7      	b.n	8010b60 <__swsetup_r+0x98>
 8010b70:	2400006c 	.word	0x2400006c

08010b74 <memmove>:
 8010b74:	4288      	cmp	r0, r1
 8010b76:	b510      	push	{r4, lr}
 8010b78:	eb01 0402 	add.w	r4, r1, r2
 8010b7c:	d902      	bls.n	8010b84 <memmove+0x10>
 8010b7e:	4284      	cmp	r4, r0
 8010b80:	4623      	mov	r3, r4
 8010b82:	d807      	bhi.n	8010b94 <memmove+0x20>
 8010b84:	1e43      	subs	r3, r0, #1
 8010b86:	42a1      	cmp	r1, r4
 8010b88:	d008      	beq.n	8010b9c <memmove+0x28>
 8010b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b92:	e7f8      	b.n	8010b86 <memmove+0x12>
 8010b94:	4402      	add	r2, r0
 8010b96:	4601      	mov	r1, r0
 8010b98:	428a      	cmp	r2, r1
 8010b9a:	d100      	bne.n	8010b9e <memmove+0x2a>
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ba6:	e7f7      	b.n	8010b98 <memmove+0x24>

08010ba8 <memset>:
 8010ba8:	4402      	add	r2, r0
 8010baa:	4603      	mov	r3, r0
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d100      	bne.n	8010bb2 <memset+0xa>
 8010bb0:	4770      	bx	lr
 8010bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8010bb6:	e7f9      	b.n	8010bac <memset+0x4>

08010bb8 <_raise_r>:
 8010bb8:	291f      	cmp	r1, #31
 8010bba:	b538      	push	{r3, r4, r5, lr}
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	d904      	bls.n	8010bcc <_raise_r+0x14>
 8010bc2:	2316      	movs	r3, #22
 8010bc4:	6003      	str	r3, [r0, #0]
 8010bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010bce:	b112      	cbz	r2, 8010bd6 <_raise_r+0x1e>
 8010bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bd4:	b94b      	cbnz	r3, 8010bea <_raise_r+0x32>
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f000 f864 	bl	8010ca4 <_getpid_r>
 8010bdc:	4622      	mov	r2, r4
 8010bde:	4601      	mov	r1, r0
 8010be0:	4628      	mov	r0, r5
 8010be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010be6:	f000 b84b 	b.w	8010c80 <_kill_r>
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d00a      	beq.n	8010c04 <_raise_r+0x4c>
 8010bee:	1c59      	adds	r1, r3, #1
 8010bf0:	d103      	bne.n	8010bfa <_raise_r+0x42>
 8010bf2:	2316      	movs	r3, #22
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	2001      	movs	r0, #1
 8010bf8:	e7e7      	b.n	8010bca <_raise_r+0x12>
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c00:	4620      	mov	r0, r4
 8010c02:	4798      	blx	r3
 8010c04:	2000      	movs	r0, #0
 8010c06:	e7e0      	b.n	8010bca <_raise_r+0x12>

08010c08 <raise>:
 8010c08:	4b02      	ldr	r3, [pc, #8]	@ (8010c14 <raise+0xc>)
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	6818      	ldr	r0, [r3, #0]
 8010c0e:	f7ff bfd3 	b.w	8010bb8 <_raise_r>
 8010c12:	bf00      	nop
 8010c14:	2400006c 	.word	0x2400006c

08010c18 <_close_r>:
 8010c18:	b538      	push	{r3, r4, r5, lr}
 8010c1a:	4d06      	ldr	r5, [pc, #24]	@ (8010c34 <_close_r+0x1c>)
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4604      	mov	r4, r0
 8010c20:	4608      	mov	r0, r1
 8010c22:	602b      	str	r3, [r5, #0]
 8010c24:	f7f2 fd48 	bl	80036b8 <_close>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d102      	bne.n	8010c32 <_close_r+0x1a>
 8010c2c:	682b      	ldr	r3, [r5, #0]
 8010c2e:	b103      	cbz	r3, 8010c32 <_close_r+0x1a>
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	24000d60 	.word	0x24000d60

08010c38 <_lseek_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d07      	ldr	r5, [pc, #28]	@ (8010c58 <_lseek_r+0x20>)
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	4608      	mov	r0, r1
 8010c40:	4611      	mov	r1, r2
 8010c42:	2200      	movs	r2, #0
 8010c44:	602a      	str	r2, [r5, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	f7f2 fd5d 	bl	8003706 <_lseek>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	d102      	bne.n	8010c56 <_lseek_r+0x1e>
 8010c50:	682b      	ldr	r3, [r5, #0]
 8010c52:	b103      	cbz	r3, 8010c56 <_lseek_r+0x1e>
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	bd38      	pop	{r3, r4, r5, pc}
 8010c58:	24000d60 	.word	0x24000d60

08010c5c <_read_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d07      	ldr	r5, [pc, #28]	@ (8010c7c <_read_r+0x20>)
 8010c60:	4604      	mov	r4, r0
 8010c62:	4608      	mov	r0, r1
 8010c64:	4611      	mov	r1, r2
 8010c66:	2200      	movs	r2, #0
 8010c68:	602a      	str	r2, [r5, #0]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	f7f2 fceb 	bl	8003646 <_read>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	d102      	bne.n	8010c7a <_read_r+0x1e>
 8010c74:	682b      	ldr	r3, [r5, #0]
 8010c76:	b103      	cbz	r3, 8010c7a <_read_r+0x1e>
 8010c78:	6023      	str	r3, [r4, #0]
 8010c7a:	bd38      	pop	{r3, r4, r5, pc}
 8010c7c:	24000d60 	.word	0x24000d60

08010c80 <_kill_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4d07      	ldr	r5, [pc, #28]	@ (8010ca0 <_kill_r+0x20>)
 8010c84:	2300      	movs	r3, #0
 8010c86:	4604      	mov	r4, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	602b      	str	r3, [r5, #0]
 8010c8e:	f7f2 fcbf 	bl	8003610 <_kill>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	d102      	bne.n	8010c9c <_kill_r+0x1c>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	b103      	cbz	r3, 8010c9c <_kill_r+0x1c>
 8010c9a:	6023      	str	r3, [r4, #0]
 8010c9c:	bd38      	pop	{r3, r4, r5, pc}
 8010c9e:	bf00      	nop
 8010ca0:	24000d60 	.word	0x24000d60

08010ca4 <_getpid_r>:
 8010ca4:	f7f2 bcac 	b.w	8003600 <_getpid>

08010ca8 <_sbrk_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4d06      	ldr	r5, [pc, #24]	@ (8010cc4 <_sbrk_r+0x1c>)
 8010cac:	2300      	movs	r3, #0
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4608      	mov	r0, r1
 8010cb2:	602b      	str	r3, [r5, #0]
 8010cb4:	f7f2 fd34 	bl	8003720 <_sbrk>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	d102      	bne.n	8010cc2 <_sbrk_r+0x1a>
 8010cbc:	682b      	ldr	r3, [r5, #0]
 8010cbe:	b103      	cbz	r3, 8010cc2 <_sbrk_r+0x1a>
 8010cc0:	6023      	str	r3, [r4, #0]
 8010cc2:	bd38      	pop	{r3, r4, r5, pc}
 8010cc4:	24000d60 	.word	0x24000d60

08010cc8 <_write_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	4d07      	ldr	r5, [pc, #28]	@ (8010ce8 <_write_r+0x20>)
 8010ccc:	4604      	mov	r4, r0
 8010cce:	4608      	mov	r0, r1
 8010cd0:	4611      	mov	r1, r2
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	602a      	str	r2, [r5, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	f7f2 fcd2 	bl	8003680 <_write>
 8010cdc:	1c43      	adds	r3, r0, #1
 8010cde:	d102      	bne.n	8010ce6 <_write_r+0x1e>
 8010ce0:	682b      	ldr	r3, [r5, #0]
 8010ce2:	b103      	cbz	r3, 8010ce6 <_write_r+0x1e>
 8010ce4:	6023      	str	r3, [r4, #0]
 8010ce6:	bd38      	pop	{r3, r4, r5, pc}
 8010ce8:	24000d60 	.word	0x24000d60

08010cec <__errno>:
 8010cec:	4b01      	ldr	r3, [pc, #4]	@ (8010cf4 <__errno+0x8>)
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	2400006c 	.word	0x2400006c

08010cf8 <__libc_init_array>:
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8010d30 <__libc_init_array+0x38>)
 8010cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8010d34 <__libc_init_array+0x3c>)
 8010cfe:	1b64      	subs	r4, r4, r5
 8010d00:	10a4      	asrs	r4, r4, #2
 8010d02:	2600      	movs	r6, #0
 8010d04:	42a6      	cmp	r6, r4
 8010d06:	d109      	bne.n	8010d1c <__libc_init_array+0x24>
 8010d08:	4d0b      	ldr	r5, [pc, #44]	@ (8010d38 <__libc_init_array+0x40>)
 8010d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8010d3c <__libc_init_array+0x44>)
 8010d0c:	f000 fca8 	bl	8011660 <_init>
 8010d10:	1b64      	subs	r4, r4, r5
 8010d12:	10a4      	asrs	r4, r4, #2
 8010d14:	2600      	movs	r6, #0
 8010d16:	42a6      	cmp	r6, r4
 8010d18:	d105      	bne.n	8010d26 <__libc_init_array+0x2e>
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}
 8010d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d20:	4798      	blx	r3
 8010d22:	3601      	adds	r6, #1
 8010d24:	e7ee      	b.n	8010d04 <__libc_init_array+0xc>
 8010d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d2a:	4798      	blx	r3
 8010d2c:	3601      	adds	r6, #1
 8010d2e:	e7f2      	b.n	8010d16 <__libc_init_array+0x1e>
 8010d30:	08011ba4 	.word	0x08011ba4
 8010d34:	08011ba4 	.word	0x08011ba4
 8010d38:	08011ba4 	.word	0x08011ba4
 8010d3c:	08011bac 	.word	0x08011bac

08010d40 <__retarget_lock_init_recursive>:
 8010d40:	4770      	bx	lr

08010d42 <__retarget_lock_acquire_recursive>:
 8010d42:	4770      	bx	lr

08010d44 <__retarget_lock_release_recursive>:
 8010d44:	4770      	bx	lr

08010d46 <memcpy>:
 8010d46:	440a      	add	r2, r1
 8010d48:	4291      	cmp	r1, r2
 8010d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d4e:	d100      	bne.n	8010d52 <memcpy+0xc>
 8010d50:	4770      	bx	lr
 8010d52:	b510      	push	{r4, lr}
 8010d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d5c:	4291      	cmp	r1, r2
 8010d5e:	d1f9      	bne.n	8010d54 <memcpy+0xe>
 8010d60:	bd10      	pop	{r4, pc}
	...

08010d64 <_free_r>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4605      	mov	r5, r0
 8010d68:	2900      	cmp	r1, #0
 8010d6a:	d041      	beq.n	8010df0 <_free_r+0x8c>
 8010d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d70:	1f0c      	subs	r4, r1, #4
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	bfb8      	it	lt
 8010d76:	18e4      	addlt	r4, r4, r3
 8010d78:	f7ff fcde 	bl	8010738 <__malloc_lock>
 8010d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8010df4 <_free_r+0x90>)
 8010d7e:	6813      	ldr	r3, [r2, #0]
 8010d80:	b933      	cbnz	r3, 8010d90 <_free_r+0x2c>
 8010d82:	6063      	str	r3, [r4, #4]
 8010d84:	6014      	str	r4, [r2, #0]
 8010d86:	4628      	mov	r0, r5
 8010d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d8c:	f7ff bcda 	b.w	8010744 <__malloc_unlock>
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	d908      	bls.n	8010da6 <_free_r+0x42>
 8010d94:	6820      	ldr	r0, [r4, #0]
 8010d96:	1821      	adds	r1, r4, r0
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf01      	itttt	eq
 8010d9c:	6819      	ldreq	r1, [r3, #0]
 8010d9e:	685b      	ldreq	r3, [r3, #4]
 8010da0:	1809      	addeq	r1, r1, r0
 8010da2:	6021      	streq	r1, [r4, #0]
 8010da4:	e7ed      	b.n	8010d82 <_free_r+0x1e>
 8010da6:	461a      	mov	r2, r3
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	b10b      	cbz	r3, 8010db0 <_free_r+0x4c>
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	d9fa      	bls.n	8010da6 <_free_r+0x42>
 8010db0:	6811      	ldr	r1, [r2, #0]
 8010db2:	1850      	adds	r0, r2, r1
 8010db4:	42a0      	cmp	r0, r4
 8010db6:	d10b      	bne.n	8010dd0 <_free_r+0x6c>
 8010db8:	6820      	ldr	r0, [r4, #0]
 8010dba:	4401      	add	r1, r0
 8010dbc:	1850      	adds	r0, r2, r1
 8010dbe:	4283      	cmp	r3, r0
 8010dc0:	6011      	str	r1, [r2, #0]
 8010dc2:	d1e0      	bne.n	8010d86 <_free_r+0x22>
 8010dc4:	6818      	ldr	r0, [r3, #0]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	6053      	str	r3, [r2, #4]
 8010dca:	4408      	add	r0, r1
 8010dcc:	6010      	str	r0, [r2, #0]
 8010dce:	e7da      	b.n	8010d86 <_free_r+0x22>
 8010dd0:	d902      	bls.n	8010dd8 <_free_r+0x74>
 8010dd2:	230c      	movs	r3, #12
 8010dd4:	602b      	str	r3, [r5, #0]
 8010dd6:	e7d6      	b.n	8010d86 <_free_r+0x22>
 8010dd8:	6820      	ldr	r0, [r4, #0]
 8010dda:	1821      	adds	r1, r4, r0
 8010ddc:	428b      	cmp	r3, r1
 8010dde:	bf04      	itt	eq
 8010de0:	6819      	ldreq	r1, [r3, #0]
 8010de2:	685b      	ldreq	r3, [r3, #4]
 8010de4:	6063      	str	r3, [r4, #4]
 8010de6:	bf04      	itt	eq
 8010de8:	1809      	addeq	r1, r1, r0
 8010dea:	6021      	streq	r1, [r4, #0]
 8010dec:	6054      	str	r4, [r2, #4]
 8010dee:	e7ca      	b.n	8010d86 <_free_r+0x22>
 8010df0:	bd38      	pop	{r3, r4, r5, pc}
 8010df2:	bf00      	nop
 8010df4:	24000c20 	.word	0x24000c20

08010df8 <__sfputc_r>:
 8010df8:	6893      	ldr	r3, [r2, #8]
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	b410      	push	{r4}
 8010e00:	6093      	str	r3, [r2, #8]
 8010e02:	da08      	bge.n	8010e16 <__sfputc_r+0x1e>
 8010e04:	6994      	ldr	r4, [r2, #24]
 8010e06:	42a3      	cmp	r3, r4
 8010e08:	db01      	blt.n	8010e0e <__sfputc_r+0x16>
 8010e0a:	290a      	cmp	r1, #10
 8010e0c:	d103      	bne.n	8010e16 <__sfputc_r+0x1e>
 8010e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e12:	f7ff be1a 	b.w	8010a4a <__swbuf_r>
 8010e16:	6813      	ldr	r3, [r2, #0]
 8010e18:	1c58      	adds	r0, r3, #1
 8010e1a:	6010      	str	r0, [r2, #0]
 8010e1c:	7019      	strb	r1, [r3, #0]
 8010e1e:	4608      	mov	r0, r1
 8010e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <__sfputs_r>:
 8010e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e28:	4606      	mov	r6, r0
 8010e2a:	460f      	mov	r7, r1
 8010e2c:	4614      	mov	r4, r2
 8010e2e:	18d5      	adds	r5, r2, r3
 8010e30:	42ac      	cmp	r4, r5
 8010e32:	d101      	bne.n	8010e38 <__sfputs_r+0x12>
 8010e34:	2000      	movs	r0, #0
 8010e36:	e007      	b.n	8010e48 <__sfputs_r+0x22>
 8010e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e3c:	463a      	mov	r2, r7
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7ff ffda 	bl	8010df8 <__sfputc_r>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	d1f3      	bne.n	8010e30 <__sfputs_r+0xa>
 8010e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e4c <_vfiprintf_r>:
 8010e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	460d      	mov	r5, r1
 8010e52:	b09d      	sub	sp, #116	@ 0x74
 8010e54:	4614      	mov	r4, r2
 8010e56:	4698      	mov	r8, r3
 8010e58:	4606      	mov	r6, r0
 8010e5a:	b118      	cbz	r0, 8010e64 <_vfiprintf_r+0x18>
 8010e5c:	6a03      	ldr	r3, [r0, #32]
 8010e5e:	b90b      	cbnz	r3, 8010e64 <_vfiprintf_r+0x18>
 8010e60:	f7ff fd02 	bl	8010868 <__sinit>
 8010e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e66:	07d9      	lsls	r1, r3, #31
 8010e68:	d405      	bmi.n	8010e76 <_vfiprintf_r+0x2a>
 8010e6a:	89ab      	ldrh	r3, [r5, #12]
 8010e6c:	059a      	lsls	r2, r3, #22
 8010e6e:	d402      	bmi.n	8010e76 <_vfiprintf_r+0x2a>
 8010e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e72:	f7ff ff66 	bl	8010d42 <__retarget_lock_acquire_recursive>
 8010e76:	89ab      	ldrh	r3, [r5, #12]
 8010e78:	071b      	lsls	r3, r3, #28
 8010e7a:	d501      	bpl.n	8010e80 <_vfiprintf_r+0x34>
 8010e7c:	692b      	ldr	r3, [r5, #16]
 8010e7e:	b99b      	cbnz	r3, 8010ea8 <_vfiprintf_r+0x5c>
 8010e80:	4629      	mov	r1, r5
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7ff fe20 	bl	8010ac8 <__swsetup_r>
 8010e88:	b170      	cbz	r0, 8010ea8 <_vfiprintf_r+0x5c>
 8010e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e8c:	07dc      	lsls	r4, r3, #31
 8010e8e:	d504      	bpl.n	8010e9a <_vfiprintf_r+0x4e>
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295
 8010e94:	b01d      	add	sp, #116	@ 0x74
 8010e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9a:	89ab      	ldrh	r3, [r5, #12]
 8010e9c:	0598      	lsls	r0, r3, #22
 8010e9e:	d4f7      	bmi.n	8010e90 <_vfiprintf_r+0x44>
 8010ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ea2:	f7ff ff4f 	bl	8010d44 <__retarget_lock_release_recursive>
 8010ea6:	e7f3      	b.n	8010e90 <_vfiprintf_r+0x44>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eac:	2320      	movs	r3, #32
 8010eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eb6:	2330      	movs	r3, #48	@ 0x30
 8010eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011068 <_vfiprintf_r+0x21c>
 8010ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ec0:	f04f 0901 	mov.w	r9, #1
 8010ec4:	4623      	mov	r3, r4
 8010ec6:	469a      	mov	sl, r3
 8010ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ecc:	b10a      	cbz	r2, 8010ed2 <_vfiprintf_r+0x86>
 8010ece:	2a25      	cmp	r2, #37	@ 0x25
 8010ed0:	d1f9      	bne.n	8010ec6 <_vfiprintf_r+0x7a>
 8010ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ed6:	d00b      	beq.n	8010ef0 <_vfiprintf_r+0xa4>
 8010ed8:	465b      	mov	r3, fp
 8010eda:	4622      	mov	r2, r4
 8010edc:	4629      	mov	r1, r5
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f7ff ffa1 	bl	8010e26 <__sfputs_r>
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	f000 80a7 	beq.w	8011038 <_vfiprintf_r+0x1ec>
 8010eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010eec:	445a      	add	r2, fp
 8010eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f000 809f 	beq.w	8011038 <_vfiprintf_r+0x1ec>
 8010efa:	2300      	movs	r3, #0
 8010efc:	f04f 32ff 	mov.w	r2, #4294967295
 8010f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f04:	f10a 0a01 	add.w	sl, sl, #1
 8010f08:	9304      	str	r3, [sp, #16]
 8010f0a:	9307      	str	r3, [sp, #28]
 8010f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f12:	4654      	mov	r4, sl
 8010f14:	2205      	movs	r2, #5
 8010f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f1a:	4853      	ldr	r0, [pc, #332]	@ (8011068 <_vfiprintf_r+0x21c>)
 8010f1c:	f7ef f9e0 	bl	80002e0 <memchr>
 8010f20:	9a04      	ldr	r2, [sp, #16]
 8010f22:	b9d8      	cbnz	r0, 8010f5c <_vfiprintf_r+0x110>
 8010f24:	06d1      	lsls	r1, r2, #27
 8010f26:	bf44      	itt	mi
 8010f28:	2320      	movmi	r3, #32
 8010f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f2e:	0713      	lsls	r3, r2, #28
 8010f30:	bf44      	itt	mi
 8010f32:	232b      	movmi	r3, #43	@ 0x2b
 8010f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f38:	f89a 3000 	ldrb.w	r3, [sl]
 8010f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f3e:	d015      	beq.n	8010f6c <_vfiprintf_r+0x120>
 8010f40:	9a07      	ldr	r2, [sp, #28]
 8010f42:	4654      	mov	r4, sl
 8010f44:	2000      	movs	r0, #0
 8010f46:	f04f 0c0a 	mov.w	ip, #10
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f50:	3b30      	subs	r3, #48	@ 0x30
 8010f52:	2b09      	cmp	r3, #9
 8010f54:	d94b      	bls.n	8010fee <_vfiprintf_r+0x1a2>
 8010f56:	b1b0      	cbz	r0, 8010f86 <_vfiprintf_r+0x13a>
 8010f58:	9207      	str	r2, [sp, #28]
 8010f5a:	e014      	b.n	8010f86 <_vfiprintf_r+0x13a>
 8010f5c:	eba0 0308 	sub.w	r3, r0, r8
 8010f60:	fa09 f303 	lsl.w	r3, r9, r3
 8010f64:	4313      	orrs	r3, r2
 8010f66:	9304      	str	r3, [sp, #16]
 8010f68:	46a2      	mov	sl, r4
 8010f6a:	e7d2      	b.n	8010f12 <_vfiprintf_r+0xc6>
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	1d19      	adds	r1, r3, #4
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	9103      	str	r1, [sp, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	bfbb      	ittet	lt
 8010f78:	425b      	neglt	r3, r3
 8010f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8010f7e:	9307      	strge	r3, [sp, #28]
 8010f80:	9307      	strlt	r3, [sp, #28]
 8010f82:	bfb8      	it	lt
 8010f84:	9204      	strlt	r2, [sp, #16]
 8010f86:	7823      	ldrb	r3, [r4, #0]
 8010f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f8a:	d10a      	bne.n	8010fa2 <_vfiprintf_r+0x156>
 8010f8c:	7863      	ldrb	r3, [r4, #1]
 8010f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f90:	d132      	bne.n	8010ff8 <_vfiprintf_r+0x1ac>
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	1d1a      	adds	r2, r3, #4
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	9203      	str	r2, [sp, #12]
 8010f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f9e:	3402      	adds	r4, #2
 8010fa0:	9305      	str	r3, [sp, #20]
 8010fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011078 <_vfiprintf_r+0x22c>
 8010fa6:	7821      	ldrb	r1, [r4, #0]
 8010fa8:	2203      	movs	r2, #3
 8010faa:	4650      	mov	r0, sl
 8010fac:	f7ef f998 	bl	80002e0 <memchr>
 8010fb0:	b138      	cbz	r0, 8010fc2 <_vfiprintf_r+0x176>
 8010fb2:	9b04      	ldr	r3, [sp, #16]
 8010fb4:	eba0 000a 	sub.w	r0, r0, sl
 8010fb8:	2240      	movs	r2, #64	@ 0x40
 8010fba:	4082      	lsls	r2, r0
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	3401      	adds	r4, #1
 8010fc0:	9304      	str	r3, [sp, #16]
 8010fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc6:	4829      	ldr	r0, [pc, #164]	@ (801106c <_vfiprintf_r+0x220>)
 8010fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fcc:	2206      	movs	r2, #6
 8010fce:	f7ef f987 	bl	80002e0 <memchr>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d03f      	beq.n	8011056 <_vfiprintf_r+0x20a>
 8010fd6:	4b26      	ldr	r3, [pc, #152]	@ (8011070 <_vfiprintf_r+0x224>)
 8010fd8:	bb1b      	cbnz	r3, 8011022 <_vfiprintf_r+0x1d6>
 8010fda:	9b03      	ldr	r3, [sp, #12]
 8010fdc:	3307      	adds	r3, #7
 8010fde:	f023 0307 	bic.w	r3, r3, #7
 8010fe2:	3308      	adds	r3, #8
 8010fe4:	9303      	str	r3, [sp, #12]
 8010fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fe8:	443b      	add	r3, r7
 8010fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fec:	e76a      	b.n	8010ec4 <_vfiprintf_r+0x78>
 8010fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ff2:	460c      	mov	r4, r1
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	e7a8      	b.n	8010f4a <_vfiprintf_r+0xfe>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	3401      	adds	r4, #1
 8010ffc:	9305      	str	r3, [sp, #20]
 8010ffe:	4619      	mov	r1, r3
 8011000:	f04f 0c0a 	mov.w	ip, #10
 8011004:	4620      	mov	r0, r4
 8011006:	f810 2b01 	ldrb.w	r2, [r0], #1
 801100a:	3a30      	subs	r2, #48	@ 0x30
 801100c:	2a09      	cmp	r2, #9
 801100e:	d903      	bls.n	8011018 <_vfiprintf_r+0x1cc>
 8011010:	2b00      	cmp	r3, #0
 8011012:	d0c6      	beq.n	8010fa2 <_vfiprintf_r+0x156>
 8011014:	9105      	str	r1, [sp, #20]
 8011016:	e7c4      	b.n	8010fa2 <_vfiprintf_r+0x156>
 8011018:	fb0c 2101 	mla	r1, ip, r1, r2
 801101c:	4604      	mov	r4, r0
 801101e:	2301      	movs	r3, #1
 8011020:	e7f0      	b.n	8011004 <_vfiprintf_r+0x1b8>
 8011022:	ab03      	add	r3, sp, #12
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	462a      	mov	r2, r5
 8011028:	4b12      	ldr	r3, [pc, #72]	@ (8011074 <_vfiprintf_r+0x228>)
 801102a:	a904      	add	r1, sp, #16
 801102c:	4630      	mov	r0, r6
 801102e:	f3af 8000 	nop.w
 8011032:	4607      	mov	r7, r0
 8011034:	1c78      	adds	r0, r7, #1
 8011036:	d1d6      	bne.n	8010fe6 <_vfiprintf_r+0x19a>
 8011038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801103a:	07d9      	lsls	r1, r3, #31
 801103c:	d405      	bmi.n	801104a <_vfiprintf_r+0x1fe>
 801103e:	89ab      	ldrh	r3, [r5, #12]
 8011040:	059a      	lsls	r2, r3, #22
 8011042:	d402      	bmi.n	801104a <_vfiprintf_r+0x1fe>
 8011044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011046:	f7ff fe7d 	bl	8010d44 <__retarget_lock_release_recursive>
 801104a:	89ab      	ldrh	r3, [r5, #12]
 801104c:	065b      	lsls	r3, r3, #25
 801104e:	f53f af1f 	bmi.w	8010e90 <_vfiprintf_r+0x44>
 8011052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011054:	e71e      	b.n	8010e94 <_vfiprintf_r+0x48>
 8011056:	ab03      	add	r3, sp, #12
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	462a      	mov	r2, r5
 801105c:	4b05      	ldr	r3, [pc, #20]	@ (8011074 <_vfiprintf_r+0x228>)
 801105e:	a904      	add	r1, sp, #16
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f879 	bl	8011158 <_printf_i>
 8011066:	e7e4      	b.n	8011032 <_vfiprintf_r+0x1e6>
 8011068:	08011b69 	.word	0x08011b69
 801106c:	08011b73 	.word	0x08011b73
 8011070:	00000000 	.word	0x00000000
 8011074:	08010e27 	.word	0x08010e27
 8011078:	08011b6f 	.word	0x08011b6f

0801107c <_printf_common>:
 801107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011080:	4616      	mov	r6, r2
 8011082:	4698      	mov	r8, r3
 8011084:	688a      	ldr	r2, [r1, #8]
 8011086:	690b      	ldr	r3, [r1, #16]
 8011088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801108c:	4293      	cmp	r3, r2
 801108e:	bfb8      	it	lt
 8011090:	4613      	movlt	r3, r2
 8011092:	6033      	str	r3, [r6, #0]
 8011094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011098:	4607      	mov	r7, r0
 801109a:	460c      	mov	r4, r1
 801109c:	b10a      	cbz	r2, 80110a2 <_printf_common+0x26>
 801109e:	3301      	adds	r3, #1
 80110a0:	6033      	str	r3, [r6, #0]
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	0699      	lsls	r1, r3, #26
 80110a6:	bf42      	ittt	mi
 80110a8:	6833      	ldrmi	r3, [r6, #0]
 80110aa:	3302      	addmi	r3, #2
 80110ac:	6033      	strmi	r3, [r6, #0]
 80110ae:	6825      	ldr	r5, [r4, #0]
 80110b0:	f015 0506 	ands.w	r5, r5, #6
 80110b4:	d106      	bne.n	80110c4 <_printf_common+0x48>
 80110b6:	f104 0a19 	add.w	sl, r4, #25
 80110ba:	68e3      	ldr	r3, [r4, #12]
 80110bc:	6832      	ldr	r2, [r6, #0]
 80110be:	1a9b      	subs	r3, r3, r2
 80110c0:	42ab      	cmp	r3, r5
 80110c2:	dc26      	bgt.n	8011112 <_printf_common+0x96>
 80110c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80110c8:	6822      	ldr	r2, [r4, #0]
 80110ca:	3b00      	subs	r3, #0
 80110cc:	bf18      	it	ne
 80110ce:	2301      	movne	r3, #1
 80110d0:	0692      	lsls	r2, r2, #26
 80110d2:	d42b      	bmi.n	801112c <_printf_common+0xb0>
 80110d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80110d8:	4641      	mov	r1, r8
 80110da:	4638      	mov	r0, r7
 80110dc:	47c8      	blx	r9
 80110de:	3001      	adds	r0, #1
 80110e0:	d01e      	beq.n	8011120 <_printf_common+0xa4>
 80110e2:	6823      	ldr	r3, [r4, #0]
 80110e4:	6922      	ldr	r2, [r4, #16]
 80110e6:	f003 0306 	and.w	r3, r3, #6
 80110ea:	2b04      	cmp	r3, #4
 80110ec:	bf02      	ittt	eq
 80110ee:	68e5      	ldreq	r5, [r4, #12]
 80110f0:	6833      	ldreq	r3, [r6, #0]
 80110f2:	1aed      	subeq	r5, r5, r3
 80110f4:	68a3      	ldr	r3, [r4, #8]
 80110f6:	bf0c      	ite	eq
 80110f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110fc:	2500      	movne	r5, #0
 80110fe:	4293      	cmp	r3, r2
 8011100:	bfc4      	itt	gt
 8011102:	1a9b      	subgt	r3, r3, r2
 8011104:	18ed      	addgt	r5, r5, r3
 8011106:	2600      	movs	r6, #0
 8011108:	341a      	adds	r4, #26
 801110a:	42b5      	cmp	r5, r6
 801110c:	d11a      	bne.n	8011144 <_printf_common+0xc8>
 801110e:	2000      	movs	r0, #0
 8011110:	e008      	b.n	8011124 <_printf_common+0xa8>
 8011112:	2301      	movs	r3, #1
 8011114:	4652      	mov	r2, sl
 8011116:	4641      	mov	r1, r8
 8011118:	4638      	mov	r0, r7
 801111a:	47c8      	blx	r9
 801111c:	3001      	adds	r0, #1
 801111e:	d103      	bne.n	8011128 <_printf_common+0xac>
 8011120:	f04f 30ff 	mov.w	r0, #4294967295
 8011124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011128:	3501      	adds	r5, #1
 801112a:	e7c6      	b.n	80110ba <_printf_common+0x3e>
 801112c:	18e1      	adds	r1, r4, r3
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	2030      	movs	r0, #48	@ 0x30
 8011132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011136:	4422      	add	r2, r4
 8011138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801113c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011140:	3302      	adds	r3, #2
 8011142:	e7c7      	b.n	80110d4 <_printf_common+0x58>
 8011144:	2301      	movs	r3, #1
 8011146:	4622      	mov	r2, r4
 8011148:	4641      	mov	r1, r8
 801114a:	4638      	mov	r0, r7
 801114c:	47c8      	blx	r9
 801114e:	3001      	adds	r0, #1
 8011150:	d0e6      	beq.n	8011120 <_printf_common+0xa4>
 8011152:	3601      	adds	r6, #1
 8011154:	e7d9      	b.n	801110a <_printf_common+0x8e>
	...

08011158 <_printf_i>:
 8011158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801115c:	7e0f      	ldrb	r7, [r1, #24]
 801115e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011160:	2f78      	cmp	r7, #120	@ 0x78
 8011162:	4691      	mov	r9, r2
 8011164:	4680      	mov	r8, r0
 8011166:	460c      	mov	r4, r1
 8011168:	469a      	mov	sl, r3
 801116a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801116e:	d807      	bhi.n	8011180 <_printf_i+0x28>
 8011170:	2f62      	cmp	r7, #98	@ 0x62
 8011172:	d80a      	bhi.n	801118a <_printf_i+0x32>
 8011174:	2f00      	cmp	r7, #0
 8011176:	f000 80d2 	beq.w	801131e <_printf_i+0x1c6>
 801117a:	2f58      	cmp	r7, #88	@ 0x58
 801117c:	f000 80b9 	beq.w	80112f2 <_printf_i+0x19a>
 8011180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011188:	e03a      	b.n	8011200 <_printf_i+0xa8>
 801118a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801118e:	2b15      	cmp	r3, #21
 8011190:	d8f6      	bhi.n	8011180 <_printf_i+0x28>
 8011192:	a101      	add	r1, pc, #4	@ (adr r1, 8011198 <_printf_i+0x40>)
 8011194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011198:	080111f1 	.word	0x080111f1
 801119c:	08011205 	.word	0x08011205
 80111a0:	08011181 	.word	0x08011181
 80111a4:	08011181 	.word	0x08011181
 80111a8:	08011181 	.word	0x08011181
 80111ac:	08011181 	.word	0x08011181
 80111b0:	08011205 	.word	0x08011205
 80111b4:	08011181 	.word	0x08011181
 80111b8:	08011181 	.word	0x08011181
 80111bc:	08011181 	.word	0x08011181
 80111c0:	08011181 	.word	0x08011181
 80111c4:	08011305 	.word	0x08011305
 80111c8:	0801122f 	.word	0x0801122f
 80111cc:	080112bf 	.word	0x080112bf
 80111d0:	08011181 	.word	0x08011181
 80111d4:	08011181 	.word	0x08011181
 80111d8:	08011327 	.word	0x08011327
 80111dc:	08011181 	.word	0x08011181
 80111e0:	0801122f 	.word	0x0801122f
 80111e4:	08011181 	.word	0x08011181
 80111e8:	08011181 	.word	0x08011181
 80111ec:	080112c7 	.word	0x080112c7
 80111f0:	6833      	ldr	r3, [r6, #0]
 80111f2:	1d1a      	adds	r2, r3, #4
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	6032      	str	r2, [r6, #0]
 80111f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011200:	2301      	movs	r3, #1
 8011202:	e09d      	b.n	8011340 <_printf_i+0x1e8>
 8011204:	6833      	ldr	r3, [r6, #0]
 8011206:	6820      	ldr	r0, [r4, #0]
 8011208:	1d19      	adds	r1, r3, #4
 801120a:	6031      	str	r1, [r6, #0]
 801120c:	0606      	lsls	r6, r0, #24
 801120e:	d501      	bpl.n	8011214 <_printf_i+0xbc>
 8011210:	681d      	ldr	r5, [r3, #0]
 8011212:	e003      	b.n	801121c <_printf_i+0xc4>
 8011214:	0645      	lsls	r5, r0, #25
 8011216:	d5fb      	bpl.n	8011210 <_printf_i+0xb8>
 8011218:	f9b3 5000 	ldrsh.w	r5, [r3]
 801121c:	2d00      	cmp	r5, #0
 801121e:	da03      	bge.n	8011228 <_printf_i+0xd0>
 8011220:	232d      	movs	r3, #45	@ 0x2d
 8011222:	426d      	negs	r5, r5
 8011224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011228:	4859      	ldr	r0, [pc, #356]	@ (8011390 <_printf_i+0x238>)
 801122a:	230a      	movs	r3, #10
 801122c:	e011      	b.n	8011252 <_printf_i+0xfa>
 801122e:	6821      	ldr	r1, [r4, #0]
 8011230:	6833      	ldr	r3, [r6, #0]
 8011232:	0608      	lsls	r0, r1, #24
 8011234:	f853 5b04 	ldr.w	r5, [r3], #4
 8011238:	d402      	bmi.n	8011240 <_printf_i+0xe8>
 801123a:	0649      	lsls	r1, r1, #25
 801123c:	bf48      	it	mi
 801123e:	b2ad      	uxthmi	r5, r5
 8011240:	2f6f      	cmp	r7, #111	@ 0x6f
 8011242:	4853      	ldr	r0, [pc, #332]	@ (8011390 <_printf_i+0x238>)
 8011244:	6033      	str	r3, [r6, #0]
 8011246:	bf14      	ite	ne
 8011248:	230a      	movne	r3, #10
 801124a:	2308      	moveq	r3, #8
 801124c:	2100      	movs	r1, #0
 801124e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011252:	6866      	ldr	r6, [r4, #4]
 8011254:	60a6      	str	r6, [r4, #8]
 8011256:	2e00      	cmp	r6, #0
 8011258:	bfa2      	ittt	ge
 801125a:	6821      	ldrge	r1, [r4, #0]
 801125c:	f021 0104 	bicge.w	r1, r1, #4
 8011260:	6021      	strge	r1, [r4, #0]
 8011262:	b90d      	cbnz	r5, 8011268 <_printf_i+0x110>
 8011264:	2e00      	cmp	r6, #0
 8011266:	d04b      	beq.n	8011300 <_printf_i+0x1a8>
 8011268:	4616      	mov	r6, r2
 801126a:	fbb5 f1f3 	udiv	r1, r5, r3
 801126e:	fb03 5711 	mls	r7, r3, r1, r5
 8011272:	5dc7      	ldrb	r7, [r0, r7]
 8011274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011278:	462f      	mov	r7, r5
 801127a:	42bb      	cmp	r3, r7
 801127c:	460d      	mov	r5, r1
 801127e:	d9f4      	bls.n	801126a <_printf_i+0x112>
 8011280:	2b08      	cmp	r3, #8
 8011282:	d10b      	bne.n	801129c <_printf_i+0x144>
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	07df      	lsls	r7, r3, #31
 8011288:	d508      	bpl.n	801129c <_printf_i+0x144>
 801128a:	6923      	ldr	r3, [r4, #16]
 801128c:	6861      	ldr	r1, [r4, #4]
 801128e:	4299      	cmp	r1, r3
 8011290:	bfde      	ittt	le
 8011292:	2330      	movle	r3, #48	@ 0x30
 8011294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011298:	f106 36ff 	addle.w	r6, r6, #4294967295
 801129c:	1b92      	subs	r2, r2, r6
 801129e:	6122      	str	r2, [r4, #16]
 80112a0:	f8cd a000 	str.w	sl, [sp]
 80112a4:	464b      	mov	r3, r9
 80112a6:	aa03      	add	r2, sp, #12
 80112a8:	4621      	mov	r1, r4
 80112aa:	4640      	mov	r0, r8
 80112ac:	f7ff fee6 	bl	801107c <_printf_common>
 80112b0:	3001      	adds	r0, #1
 80112b2:	d14a      	bne.n	801134a <_printf_i+0x1f2>
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	b004      	add	sp, #16
 80112ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	f043 0320 	orr.w	r3, r3, #32
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	4833      	ldr	r0, [pc, #204]	@ (8011394 <_printf_i+0x23c>)
 80112c8:	2778      	movs	r7, #120	@ 0x78
 80112ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	6831      	ldr	r1, [r6, #0]
 80112d2:	061f      	lsls	r7, r3, #24
 80112d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80112d8:	d402      	bmi.n	80112e0 <_printf_i+0x188>
 80112da:	065f      	lsls	r7, r3, #25
 80112dc:	bf48      	it	mi
 80112de:	b2ad      	uxthmi	r5, r5
 80112e0:	6031      	str	r1, [r6, #0]
 80112e2:	07d9      	lsls	r1, r3, #31
 80112e4:	bf44      	itt	mi
 80112e6:	f043 0320 	orrmi.w	r3, r3, #32
 80112ea:	6023      	strmi	r3, [r4, #0]
 80112ec:	b11d      	cbz	r5, 80112f6 <_printf_i+0x19e>
 80112ee:	2310      	movs	r3, #16
 80112f0:	e7ac      	b.n	801124c <_printf_i+0xf4>
 80112f2:	4827      	ldr	r0, [pc, #156]	@ (8011390 <_printf_i+0x238>)
 80112f4:	e7e9      	b.n	80112ca <_printf_i+0x172>
 80112f6:	6823      	ldr	r3, [r4, #0]
 80112f8:	f023 0320 	bic.w	r3, r3, #32
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	e7f6      	b.n	80112ee <_printf_i+0x196>
 8011300:	4616      	mov	r6, r2
 8011302:	e7bd      	b.n	8011280 <_printf_i+0x128>
 8011304:	6833      	ldr	r3, [r6, #0]
 8011306:	6825      	ldr	r5, [r4, #0]
 8011308:	6961      	ldr	r1, [r4, #20]
 801130a:	1d18      	adds	r0, r3, #4
 801130c:	6030      	str	r0, [r6, #0]
 801130e:	062e      	lsls	r6, r5, #24
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	d501      	bpl.n	8011318 <_printf_i+0x1c0>
 8011314:	6019      	str	r1, [r3, #0]
 8011316:	e002      	b.n	801131e <_printf_i+0x1c6>
 8011318:	0668      	lsls	r0, r5, #25
 801131a:	d5fb      	bpl.n	8011314 <_printf_i+0x1bc>
 801131c:	8019      	strh	r1, [r3, #0]
 801131e:	2300      	movs	r3, #0
 8011320:	6123      	str	r3, [r4, #16]
 8011322:	4616      	mov	r6, r2
 8011324:	e7bc      	b.n	80112a0 <_printf_i+0x148>
 8011326:	6833      	ldr	r3, [r6, #0]
 8011328:	1d1a      	adds	r2, r3, #4
 801132a:	6032      	str	r2, [r6, #0]
 801132c:	681e      	ldr	r6, [r3, #0]
 801132e:	6862      	ldr	r2, [r4, #4]
 8011330:	2100      	movs	r1, #0
 8011332:	4630      	mov	r0, r6
 8011334:	f7ee ffd4 	bl	80002e0 <memchr>
 8011338:	b108      	cbz	r0, 801133e <_printf_i+0x1e6>
 801133a:	1b80      	subs	r0, r0, r6
 801133c:	6060      	str	r0, [r4, #4]
 801133e:	6863      	ldr	r3, [r4, #4]
 8011340:	6123      	str	r3, [r4, #16]
 8011342:	2300      	movs	r3, #0
 8011344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011348:	e7aa      	b.n	80112a0 <_printf_i+0x148>
 801134a:	6923      	ldr	r3, [r4, #16]
 801134c:	4632      	mov	r2, r6
 801134e:	4649      	mov	r1, r9
 8011350:	4640      	mov	r0, r8
 8011352:	47d0      	blx	sl
 8011354:	3001      	adds	r0, #1
 8011356:	d0ad      	beq.n	80112b4 <_printf_i+0x15c>
 8011358:	6823      	ldr	r3, [r4, #0]
 801135a:	079b      	lsls	r3, r3, #30
 801135c:	d413      	bmi.n	8011386 <_printf_i+0x22e>
 801135e:	68e0      	ldr	r0, [r4, #12]
 8011360:	9b03      	ldr	r3, [sp, #12]
 8011362:	4298      	cmp	r0, r3
 8011364:	bfb8      	it	lt
 8011366:	4618      	movlt	r0, r3
 8011368:	e7a6      	b.n	80112b8 <_printf_i+0x160>
 801136a:	2301      	movs	r3, #1
 801136c:	4632      	mov	r2, r6
 801136e:	4649      	mov	r1, r9
 8011370:	4640      	mov	r0, r8
 8011372:	47d0      	blx	sl
 8011374:	3001      	adds	r0, #1
 8011376:	d09d      	beq.n	80112b4 <_printf_i+0x15c>
 8011378:	3501      	adds	r5, #1
 801137a:	68e3      	ldr	r3, [r4, #12]
 801137c:	9903      	ldr	r1, [sp, #12]
 801137e:	1a5b      	subs	r3, r3, r1
 8011380:	42ab      	cmp	r3, r5
 8011382:	dcf2      	bgt.n	801136a <_printf_i+0x212>
 8011384:	e7eb      	b.n	801135e <_printf_i+0x206>
 8011386:	2500      	movs	r5, #0
 8011388:	f104 0619 	add.w	r6, r4, #25
 801138c:	e7f5      	b.n	801137a <_printf_i+0x222>
 801138e:	bf00      	nop
 8011390:	08011b7a 	.word	0x08011b7a
 8011394:	08011b8b 	.word	0x08011b8b

08011398 <__sflush_r>:
 8011398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a0:	0716      	lsls	r6, r2, #28
 80113a2:	4605      	mov	r5, r0
 80113a4:	460c      	mov	r4, r1
 80113a6:	d454      	bmi.n	8011452 <__sflush_r+0xba>
 80113a8:	684b      	ldr	r3, [r1, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dc02      	bgt.n	80113b4 <__sflush_r+0x1c>
 80113ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	dd48      	ble.n	8011446 <__sflush_r+0xae>
 80113b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113b6:	2e00      	cmp	r6, #0
 80113b8:	d045      	beq.n	8011446 <__sflush_r+0xae>
 80113ba:	2300      	movs	r3, #0
 80113bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80113c0:	682f      	ldr	r7, [r5, #0]
 80113c2:	6a21      	ldr	r1, [r4, #32]
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	d030      	beq.n	801142a <__sflush_r+0x92>
 80113c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	0759      	lsls	r1, r3, #29
 80113ce:	d505      	bpl.n	80113dc <__sflush_r+0x44>
 80113d0:	6863      	ldr	r3, [r4, #4]
 80113d2:	1ad2      	subs	r2, r2, r3
 80113d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113d6:	b10b      	cbz	r3, 80113dc <__sflush_r+0x44>
 80113d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113da:	1ad2      	subs	r2, r2, r3
 80113dc:	2300      	movs	r3, #0
 80113de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113e0:	6a21      	ldr	r1, [r4, #32]
 80113e2:	4628      	mov	r0, r5
 80113e4:	47b0      	blx	r6
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	d106      	bne.n	80113fa <__sflush_r+0x62>
 80113ec:	6829      	ldr	r1, [r5, #0]
 80113ee:	291d      	cmp	r1, #29
 80113f0:	d82b      	bhi.n	801144a <__sflush_r+0xb2>
 80113f2:	4a2a      	ldr	r2, [pc, #168]	@ (801149c <__sflush_r+0x104>)
 80113f4:	410a      	asrs	r2, r1
 80113f6:	07d6      	lsls	r6, r2, #31
 80113f8:	d427      	bmi.n	801144a <__sflush_r+0xb2>
 80113fa:	2200      	movs	r2, #0
 80113fc:	6062      	str	r2, [r4, #4]
 80113fe:	04d9      	lsls	r1, r3, #19
 8011400:	6922      	ldr	r2, [r4, #16]
 8011402:	6022      	str	r2, [r4, #0]
 8011404:	d504      	bpl.n	8011410 <__sflush_r+0x78>
 8011406:	1c42      	adds	r2, r0, #1
 8011408:	d101      	bne.n	801140e <__sflush_r+0x76>
 801140a:	682b      	ldr	r3, [r5, #0]
 801140c:	b903      	cbnz	r3, 8011410 <__sflush_r+0x78>
 801140e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011412:	602f      	str	r7, [r5, #0]
 8011414:	b1b9      	cbz	r1, 8011446 <__sflush_r+0xae>
 8011416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801141a:	4299      	cmp	r1, r3
 801141c:	d002      	beq.n	8011424 <__sflush_r+0x8c>
 801141e:	4628      	mov	r0, r5
 8011420:	f7ff fca0 	bl	8010d64 <_free_r>
 8011424:	2300      	movs	r3, #0
 8011426:	6363      	str	r3, [r4, #52]	@ 0x34
 8011428:	e00d      	b.n	8011446 <__sflush_r+0xae>
 801142a:	2301      	movs	r3, #1
 801142c:	4628      	mov	r0, r5
 801142e:	47b0      	blx	r6
 8011430:	4602      	mov	r2, r0
 8011432:	1c50      	adds	r0, r2, #1
 8011434:	d1c9      	bne.n	80113ca <__sflush_r+0x32>
 8011436:	682b      	ldr	r3, [r5, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0c6      	beq.n	80113ca <__sflush_r+0x32>
 801143c:	2b1d      	cmp	r3, #29
 801143e:	d001      	beq.n	8011444 <__sflush_r+0xac>
 8011440:	2b16      	cmp	r3, #22
 8011442:	d11e      	bne.n	8011482 <__sflush_r+0xea>
 8011444:	602f      	str	r7, [r5, #0]
 8011446:	2000      	movs	r0, #0
 8011448:	e022      	b.n	8011490 <__sflush_r+0xf8>
 801144a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801144e:	b21b      	sxth	r3, r3
 8011450:	e01b      	b.n	801148a <__sflush_r+0xf2>
 8011452:	690f      	ldr	r7, [r1, #16]
 8011454:	2f00      	cmp	r7, #0
 8011456:	d0f6      	beq.n	8011446 <__sflush_r+0xae>
 8011458:	0793      	lsls	r3, r2, #30
 801145a:	680e      	ldr	r6, [r1, #0]
 801145c:	bf08      	it	eq
 801145e:	694b      	ldreq	r3, [r1, #20]
 8011460:	600f      	str	r7, [r1, #0]
 8011462:	bf18      	it	ne
 8011464:	2300      	movne	r3, #0
 8011466:	eba6 0807 	sub.w	r8, r6, r7
 801146a:	608b      	str	r3, [r1, #8]
 801146c:	f1b8 0f00 	cmp.w	r8, #0
 8011470:	dde9      	ble.n	8011446 <__sflush_r+0xae>
 8011472:	6a21      	ldr	r1, [r4, #32]
 8011474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011476:	4643      	mov	r3, r8
 8011478:	463a      	mov	r2, r7
 801147a:	4628      	mov	r0, r5
 801147c:	47b0      	blx	r6
 801147e:	2800      	cmp	r0, #0
 8011480:	dc08      	bgt.n	8011494 <__sflush_r+0xfc>
 8011482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011494:	4407      	add	r7, r0
 8011496:	eba8 0800 	sub.w	r8, r8, r0
 801149a:	e7e7      	b.n	801146c <__sflush_r+0xd4>
 801149c:	dfbffffe 	.word	0xdfbffffe

080114a0 <_fflush_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	690b      	ldr	r3, [r1, #16]
 80114a4:	4605      	mov	r5, r0
 80114a6:	460c      	mov	r4, r1
 80114a8:	b913      	cbnz	r3, 80114b0 <_fflush_r+0x10>
 80114aa:	2500      	movs	r5, #0
 80114ac:	4628      	mov	r0, r5
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	b118      	cbz	r0, 80114ba <_fflush_r+0x1a>
 80114b2:	6a03      	ldr	r3, [r0, #32]
 80114b4:	b90b      	cbnz	r3, 80114ba <_fflush_r+0x1a>
 80114b6:	f7ff f9d7 	bl	8010868 <__sinit>
 80114ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d0f3      	beq.n	80114aa <_fflush_r+0xa>
 80114c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80114c4:	07d0      	lsls	r0, r2, #31
 80114c6:	d404      	bmi.n	80114d2 <_fflush_r+0x32>
 80114c8:	0599      	lsls	r1, r3, #22
 80114ca:	d402      	bmi.n	80114d2 <_fflush_r+0x32>
 80114cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ce:	f7ff fc38 	bl	8010d42 <__retarget_lock_acquire_recursive>
 80114d2:	4628      	mov	r0, r5
 80114d4:	4621      	mov	r1, r4
 80114d6:	f7ff ff5f 	bl	8011398 <__sflush_r>
 80114da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114dc:	07da      	lsls	r2, r3, #31
 80114de:	4605      	mov	r5, r0
 80114e0:	d4e4      	bmi.n	80114ac <_fflush_r+0xc>
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	059b      	lsls	r3, r3, #22
 80114e6:	d4e1      	bmi.n	80114ac <_fflush_r+0xc>
 80114e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ea:	f7ff fc2b 	bl	8010d44 <__retarget_lock_release_recursive>
 80114ee:	e7dd      	b.n	80114ac <_fflush_r+0xc>

080114f0 <__swhatbuf_r>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	460c      	mov	r4, r1
 80114f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114f8:	2900      	cmp	r1, #0
 80114fa:	b096      	sub	sp, #88	@ 0x58
 80114fc:	4615      	mov	r5, r2
 80114fe:	461e      	mov	r6, r3
 8011500:	da0d      	bge.n	801151e <__swhatbuf_r+0x2e>
 8011502:	89a3      	ldrh	r3, [r4, #12]
 8011504:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011508:	f04f 0100 	mov.w	r1, #0
 801150c:	bf14      	ite	ne
 801150e:	2340      	movne	r3, #64	@ 0x40
 8011510:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011514:	2000      	movs	r0, #0
 8011516:	6031      	str	r1, [r6, #0]
 8011518:	602b      	str	r3, [r5, #0]
 801151a:	b016      	add	sp, #88	@ 0x58
 801151c:	bd70      	pop	{r4, r5, r6, pc}
 801151e:	466a      	mov	r2, sp
 8011520:	f000 f87c 	bl	801161c <_fstat_r>
 8011524:	2800      	cmp	r0, #0
 8011526:	dbec      	blt.n	8011502 <__swhatbuf_r+0x12>
 8011528:	9901      	ldr	r1, [sp, #4]
 801152a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801152e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011532:	4259      	negs	r1, r3
 8011534:	4159      	adcs	r1, r3
 8011536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801153a:	e7eb      	b.n	8011514 <__swhatbuf_r+0x24>

0801153c <__smakebuf_r>:
 801153c:	898b      	ldrh	r3, [r1, #12]
 801153e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011540:	079d      	lsls	r5, r3, #30
 8011542:	4606      	mov	r6, r0
 8011544:	460c      	mov	r4, r1
 8011546:	d507      	bpl.n	8011558 <__smakebuf_r+0x1c>
 8011548:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801154c:	6023      	str	r3, [r4, #0]
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	2301      	movs	r3, #1
 8011552:	6163      	str	r3, [r4, #20]
 8011554:	b003      	add	sp, #12
 8011556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011558:	ab01      	add	r3, sp, #4
 801155a:	466a      	mov	r2, sp
 801155c:	f7ff ffc8 	bl	80114f0 <__swhatbuf_r>
 8011560:	9f00      	ldr	r7, [sp, #0]
 8011562:	4605      	mov	r5, r0
 8011564:	4639      	mov	r1, r7
 8011566:	4630      	mov	r0, r6
 8011568:	f7ff f866 	bl	8010638 <_malloc_r>
 801156c:	b948      	cbnz	r0, 8011582 <__smakebuf_r+0x46>
 801156e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011572:	059a      	lsls	r2, r3, #22
 8011574:	d4ee      	bmi.n	8011554 <__smakebuf_r+0x18>
 8011576:	f023 0303 	bic.w	r3, r3, #3
 801157a:	f043 0302 	orr.w	r3, r3, #2
 801157e:	81a3      	strh	r3, [r4, #12]
 8011580:	e7e2      	b.n	8011548 <__smakebuf_r+0xc>
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	6020      	str	r0, [r4, #0]
 8011586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	9b01      	ldr	r3, [sp, #4]
 801158e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011592:	b15b      	cbz	r3, 80115ac <__smakebuf_r+0x70>
 8011594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011598:	4630      	mov	r0, r6
 801159a:	f000 f851 	bl	8011640 <_isatty_r>
 801159e:	b128      	cbz	r0, 80115ac <__smakebuf_r+0x70>
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	f023 0303 	bic.w	r3, r3, #3
 80115a6:	f043 0301 	orr.w	r3, r3, #1
 80115aa:	81a3      	strh	r3, [r4, #12]
 80115ac:	89a3      	ldrh	r3, [r4, #12]
 80115ae:	431d      	orrs	r5, r3
 80115b0:	81a5      	strh	r5, [r4, #12]
 80115b2:	e7cf      	b.n	8011554 <__smakebuf_r+0x18>

080115b4 <_putc_r>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	460d      	mov	r5, r1
 80115b8:	4614      	mov	r4, r2
 80115ba:	4606      	mov	r6, r0
 80115bc:	b118      	cbz	r0, 80115c6 <_putc_r+0x12>
 80115be:	6a03      	ldr	r3, [r0, #32]
 80115c0:	b90b      	cbnz	r3, 80115c6 <_putc_r+0x12>
 80115c2:	f7ff f951 	bl	8010868 <__sinit>
 80115c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115c8:	07d8      	lsls	r0, r3, #31
 80115ca:	d405      	bmi.n	80115d8 <_putc_r+0x24>
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	0599      	lsls	r1, r3, #22
 80115d0:	d402      	bmi.n	80115d8 <_putc_r+0x24>
 80115d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115d4:	f7ff fbb5 	bl	8010d42 <__retarget_lock_acquire_recursive>
 80115d8:	68a3      	ldr	r3, [r4, #8]
 80115da:	3b01      	subs	r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	60a3      	str	r3, [r4, #8]
 80115e0:	da05      	bge.n	80115ee <_putc_r+0x3a>
 80115e2:	69a2      	ldr	r2, [r4, #24]
 80115e4:	4293      	cmp	r3, r2
 80115e6:	db12      	blt.n	801160e <_putc_r+0x5a>
 80115e8:	b2eb      	uxtb	r3, r5
 80115ea:	2b0a      	cmp	r3, #10
 80115ec:	d00f      	beq.n	801160e <_putc_r+0x5a>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	6022      	str	r2, [r4, #0]
 80115f4:	701d      	strb	r5, [r3, #0]
 80115f6:	b2ed      	uxtb	r5, r5
 80115f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115fa:	07da      	lsls	r2, r3, #31
 80115fc:	d405      	bmi.n	801160a <_putc_r+0x56>
 80115fe:	89a3      	ldrh	r3, [r4, #12]
 8011600:	059b      	lsls	r3, r3, #22
 8011602:	d402      	bmi.n	801160a <_putc_r+0x56>
 8011604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011606:	f7ff fb9d 	bl	8010d44 <__retarget_lock_release_recursive>
 801160a:	4628      	mov	r0, r5
 801160c:	bd70      	pop	{r4, r5, r6, pc}
 801160e:	4629      	mov	r1, r5
 8011610:	4622      	mov	r2, r4
 8011612:	4630      	mov	r0, r6
 8011614:	f7ff fa19 	bl	8010a4a <__swbuf_r>
 8011618:	4605      	mov	r5, r0
 801161a:	e7ed      	b.n	80115f8 <_putc_r+0x44>

0801161c <_fstat_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d07      	ldr	r5, [pc, #28]	@ (801163c <_fstat_r+0x20>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	4611      	mov	r1, r2
 8011628:	602b      	str	r3, [r5, #0]
 801162a:	f7f2 f851 	bl	80036d0 <_fstat>
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	d102      	bne.n	8011638 <_fstat_r+0x1c>
 8011632:	682b      	ldr	r3, [r5, #0]
 8011634:	b103      	cbz	r3, 8011638 <_fstat_r+0x1c>
 8011636:	6023      	str	r3, [r4, #0]
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop
 801163c:	24000d60 	.word	0x24000d60

08011640 <_isatty_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d06      	ldr	r5, [pc, #24]	@ (801165c <_isatty_r+0x1c>)
 8011644:	2300      	movs	r3, #0
 8011646:	4604      	mov	r4, r0
 8011648:	4608      	mov	r0, r1
 801164a:	602b      	str	r3, [r5, #0]
 801164c:	f7f2 f850 	bl	80036f0 <_isatty>
 8011650:	1c43      	adds	r3, r0, #1
 8011652:	d102      	bne.n	801165a <_isatty_r+0x1a>
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	b103      	cbz	r3, 801165a <_isatty_r+0x1a>
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	bd38      	pop	{r3, r4, r5, pc}
 801165c:	24000d60 	.word	0x24000d60

08011660 <_init>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	bf00      	nop
 8011664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011666:	bc08      	pop	{r3}
 8011668:	469e      	mov	lr, r3
 801166a:	4770      	bx	lr

0801166c <_fini>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	bf00      	nop
 8011670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011672:	bc08      	pop	{r3}
 8011674:	469e      	mov	lr, r3
 8011676:	4770      	bx	lr
